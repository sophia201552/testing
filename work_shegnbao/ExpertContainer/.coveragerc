# .coveragerc to control coverage.py
[run]
branch = False
omit = tests/*,setup/*,requirements_*/*,log/*,unit_test/*,calctemp/*,diagnosistemp/*,supervisor/*,servertools/*,ExpertContainer/templates/*,ExpertContainer/static/*,
       ExpertContainer/mod_log/*,ExpertContainer/ExpertData/*,ExpertContainer/experts/*,ExpertContainer/diagnosistest/*,ExpertContainer/api/Air.py,
       ExpertContainer/api/MyLoggerDefin.py,ExpertContainer/api/makeDiagnosisFileTimer.py,ExpertContainer/api/DependAnalyst.py,ExpertContainer/api/CalcPointFixedTime.py,ExpertContainer/calculation/*,
       ExpertContainer/api/Refrigeration.py,PythonPackage/*,requirements_bushu/*,requirements_http/*,requirements_jisuandian/*,servertools/*,strategy/*,
       strategy_execute_file/*,supervisor/*,AlarmSendNoticeQueue.py,AlgoCrossClusterNoticeConsumer.py,AutoRepairCalcQueue.py,AutoRepairOneTask.py,config.py,
       CrossClusterConsumer.py,daemonProcessLinux.py,daemonProcessWin.py,DataTaskConsumer.py,DataTaskProductor.py,DiagnosisCalcQueue.py,ExportHistoryDataTask.py,
       FixedTimeCalc.py,ForceCalcQueue.py,manage.py,MySqlCrossClusterWriteConsumer.py,PatchQueryNull.py,psutil_count.py,RealCalcQueue.py,RepairCalcQueue.py,
       RepairOneTask.py,TakenakaDataMessageRoute.py,updateThirdDataRealAndHistory.py,WashDataTask.py,WashQueue.py


[report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

ignore_errors = True
