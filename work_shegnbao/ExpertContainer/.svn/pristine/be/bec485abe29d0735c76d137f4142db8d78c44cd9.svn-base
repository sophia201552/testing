# -*- encoding=utf-8 -*-
from ExpertContainer.logic.LogicBase import *
from ExpertContainer.api.ArchiveManager import ArchiveManager
from ExpertContainer.api.globalMapping import *
from ExpertContainer.api.cacheProfile import DataManager
from ExpertContainer.api.errorLog import errorLog
_logger = LogOperator()

class LogicAct(LogicBase):

    def actlogic(self):
        rt = None
        try:
            rt = self.action()
        except Exception as e:
            errorLog.writeLog(132,'%s in %s:'%(get_current_func_name(), __name__[__name__.rfind('/')+1:])+e.__str__(),True)
            rt = None

        return rt

    def CT001_CTOnOff(self):
        def main():
            try:
                v=self.get_data(132,'IB8.Value')
                return [int(str(bin(int(v)))[-5]) if len(str(bin(int(v))))>=7 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'CT001_CTOnOff:'+e.__str__(),True,'CT001_CTOnOff')
                return None
        return main()

    def CT001_CTPower(self):
        def main():
            try:
                CT001_CTOnOff=self.get_data(132,'CT001_CTOnOff')
                return CT001_CTOnOff*22
            except Exception as e:
                errorLog.writeLog(132,'CT001_CTPower:'+e.__str__(),True,'CT001_CTPower')
                return None
        return main()

    def CT002_CTOnOff(self):
        def main():
            try:
                v=self.get_data(132,'IB8.Value')
                return [int(str(bin(int(v)))[-8]) if len(str(bin(int(v))))>=10 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'CT002_CTOnOff:'+e.__str__(),True,'CT002_CTOnOff')
                return None
        return main()

    def CT002_CTPower(self):
        def main():
            try:
                CT002_CTOnOff=self.get_data(132,'CT002_CTOnOff')
                return CT002_CTOnOff*22
            except Exception as e:
                errorLog.writeLog(132,'CT002_CTPower:'+e.__str__(),True,'CT002_CTPower')
                return None
        return main()

    def CT003_CTOnOff(self):
        def main():
            try:
                v=self.get_data(132,'IB9.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'CT003_CTOnOff:'+e.__str__(),True,'CT003_CTOnOff')
                return None
        return main()

    def CT003_CTPower(self):
        def main():
            try:
                CT003_CTOnOff=self.get_data(132,'CT003_CTOnOff')
                return CT003_CTOnOff*22
            except Exception as e:
                errorLog.writeLog(132,'CT003_CTPower:'+e.__str__(),True,'CT003_CTPower')
                return None
        return main()

    def CT004_CTOnOff(self):
        def main():
            try:
                v=self.get_data(132,'IB9.Value')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'CT004_CTOnOff:'+e.__str__(),True,'CT004_CTOnOff')
                return None
        return main()

    def CT004_CTPower(self):
        def main():
            try:
                CT004_CTOnOff=self.get_data(132,'CT004_CTOnOff')
                return CT004_CTOnOff*22
            except Exception as e:
                errorLog.writeLog(132,'CT004_CTPower:'+e.__str__(),True,'CT004_CTPower')
                return None
        return main()

    def CTGroupTotal001_GroupCost(self):
        def main():
            try:
                Plant001_ElecPrice=self.get_data(132,'Plant001_ElecPrice')
                CTGroupTotal001_GroupPower=self.get_data(132,'CTGroupTotal001_GroupPower')
                return Plant001_ElecPrice*CTGroupTotal001_GroupPower/12
            except Exception as e:
                errorLog.writeLog(132,'CTGroupTotal001_GroupCost:'+e.__str__(),True,'CTGroupTotal001_GroupCost')
                return None
        return main()

    def CTGroupTotal001_GroupCostH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'CTGroupTotal001_GroupCost',1/12.0,'m5')
            except Exception as e:
                errorLog.writeLog(132,'CTGroupTotal001_GroupCostH:'+e.__str__(),True,'CTGroupTotal001_GroupCostH')
                return None
        return main()

    def CTGroupTotal001_GroupEnergyH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'CTGroupTotal001_GroupPower',1/12.0,'m5')
            except Exception as e:
                errorLog.writeLog(132,'CTGroupTotal001_GroupEnergyH:'+e.__str__(),True,'CTGroupTotal001_GroupEnergyH')
                return None
        return main()

    def CTGroupTotal001_GroupPower(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['CT001_CTPower','CT002_CTPower','CT003_CTPower','CT004_CTPower'])
            except Exception as e:
                errorLog.writeLog(132,'CTGroupTotal001_GroupPower:'+e.__str__(),True,'CTGroupTotal001_GroupPower')
                return None
        return main()

    def CTGroupTotal001_RunNum(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['CT001_CTOnOff','CT002_CTOnOff'])
            except Exception as e:
                errorLog.writeLog(132,'CTGroupTotal001_RunNum:'+e.__str__(),True,'CTGroupTotal001_RunNum')
                return None
        return main()

    def CWP001_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB2.Value')
                return [int(str(bin(int(v)))[-5]) if len(str(bin(int(v))))>=7 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'CWP001_PumpOnOff_01:'+e.__str__(),True,'CWP001_PumpOnOff_01')
                return None
        return main()

    def CWP001_PumpPower(self):
        def main():
            try:
                CWP001_PumpOnOff_01=self.get_data(132,'CWP001_PumpOnOff_01')
                CWP001_PumpVSDFreq_01=self.get_data(132,'CWP001_PumpVSDFreq_01')
                return (CWP001_PumpVSDFreq_01/50)**2*37*CWP001_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'CWP001_PumpPower:'+e.__str__(),True,'CWP001_PumpPower')
                return None
        return main()

    def CWP002_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB2.Value')
                return [int(str(bin(int(v)))[-8]) if len(str(bin(int(v))))>=10 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'CWP002_PumpOnOff_01:'+e.__str__(),True,'CWP002_PumpOnOff_01')
                return None
        return main()

    def CWP002_PumpPower(self):
        def main():
            try:
                CWP002_PumpOnOff_01=self.get_data(132,'CWP002_PumpOnOff_01')
                CWP002_PumpVSDFreq_01=self.get_data(132,'CWP002_PumpVSDFreq_01')
                return (CWP002_PumpVSDFreq_01/50)**2*55*CWP002_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'CWP002_PumpPower:'+e.__str__(),True,'CWP002_PumpPower')
                return None
        return main()

    def CWP003_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB3.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'CWP003_PumpOnOff_01:'+e.__str__(),True,'CWP003_PumpOnOff_01')
                return None
        return main()

    def CWP003_PumpPower(self):
        def main():
            try:
                CWP003_PumpOnOff_01=self.get_data(132,'CWP003_PumpOnOff_01')
                CWP003_PumpVSDFreq_01=self.get_data(132,'CWP003_PumpVSDFreq_01')
                return (CWP003_PumpVSDFreq_01/50)**2*37*CWP003_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'CWP003_PumpPower:'+e.__str__(),True,'CWP003_PumpPower')
                return None
        return main()

    def CWP004_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB3.Value')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'CWP004_PumpOnOff_01:'+e.__str__(),True,'CWP004_PumpOnOff_01')
                return None
        return main()

    def CWP004_PumpPower(self):
        def main():
            try:
                CWP004_PumpOnOff_01=self.get_data(132,'CWP004_PumpOnOff_01')
                CWP004_PumpVSDFreq_01=self.get_data(132,'CWP004_PumpVSDFreq_01')
                return (CWP004_PumpVSDFreq_01/50)**2*37*CWP004_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'CWP004_PumpPower:'+e.__str__(),True,'CWP004_PumpPower')
                return None
        return main()

    def CWP101_PumpOnOff_02(self):
        def main():
            try:
                v=self.get_data(132,'IB0.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'CWP101_PumpOnOff_02:'+e.__str__(),True,'CWP101_PumpOnOff_02')
                return None
        return main()

    def CWP101_PumpPower(self):
        def main():
            try:
                CWP101_PumpOnOff_02=self.get_data(132,'CWP101_PumpOnOff_02')
                CWP101_PumpVSDFreq_02=self.get_data(132,'CWP101_PumpVSDFreq_02')
                return (CWP101_PumpVSDFreq_02/50)**2*22*CWP101_PumpOnOff_02
            except Exception as e:
                errorLog.writeLog(132,'CWP101_PumpPower:'+e.__str__(),True,'CWP101_PumpPower')
                return None
        return main()

    def CWP102_PumpOnOff_02(self):
        def main():
            try:
                v=self.get_data(132,'IB0.Value')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'CWP102_PumpOnOff_02:'+e.__str__(),True,'CWP102_PumpOnOff_02')
                return None
        return main()

    def CWP102_PumpPower(self):
        def main():
            try:
                CWP102_PumpOnOff_02=self.get_data(132,'CWP102_PumpOnOff_02')
                CWP102_PumpVSDFreq_02=self.get_data(132,'CWP102_PumpVSDFreq_02')
                return (CWP102_PumpVSDFreq_02/50)**2*22*CWP102_PumpOnOff_02
            except Exception as e:
                errorLog.writeLog(132,'CWP102_PumpPower:'+e.__str__(),True,'CWP102_PumpPower')
                return None
        return main()

    def CWP201_PumpOnOff_02(self):
        def main():
            try:
                v=self.get_data(132,'IB4.Value')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'CWP201_PumpOnOff_02:'+e.__str__(),True,'CWP201_PumpOnOff_02')
                return None
        return main()

    def CWP201_PumpPower(self):
        def main():
            try:
                CWP201_PumpOnOff_02=self.get_data(132,'CWP201_PumpOnOff_02')
                CWP201_PumpVSDFreq_02=self.get_data(132,'CWP201_PumpVSDFreq_02')
                return (CWP201_PumpVSDFreq_02/50)**2*30*CWP201_PumpOnOff_02
            except Exception as e:
                errorLog.writeLog(132,'CWP201_PumpPower:'+e.__str__(),True,'CWP201_PumpPower')
                return None
        return main()

    def CWP202_PumpOnOff_02(self):
        def main():
            try:
                v=self.get_data(132,'IB4.Value')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'CWP202_PumpOnOff_02:'+e.__str__(),True,'CWP202_PumpOnOff_02')
                return None
        return main()

    def CWP202_PumpPower(self):
        def main():
            try:
                CWP202_PumpOnOff_02=self.get_data(132,'CWP202_PumpOnOff_02')
                CWP202_PumpVSDFreq_02=self.get_data(132,'CWP202_PumpVSDFreq_02')
                return (CWP202_PumpVSDFreq_02/50)**2*30*CWP202_PumpOnOff_02
            except Exception as e:
                errorLog.writeLog(132,'CWP202_PumpPower:'+e.__str__(),True,'CWP202_PumpPower')
                return None
        return main()

    def CWPGroup001_GroupCost(self):
        def main():
            try:
                Plant001_ElecPrice=self.get_data(132,'Plant001_ElecPrice')
                CWPGroup001_GroupPower=self.get_data(132,'CWPGroup001_GroupPower')
                return Plant001_ElecPrice*CWPGroup001_GroupPower/12
            except Exception as e:
                errorLog.writeLog(132,'CWPGroup001_GroupCost:'+e.__str__(),True,'CWPGroup001_GroupCost')
                return None
        return main()

    def CWPGroup001_GroupCostH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'CWPGroup001_GroupCost',1,'m5')
            except Exception as e:
                errorLog.writeLog(132,'CWPGroup001_GroupCostH:'+e.__str__(),True,'CWPGroup001_GroupCostH')
                return None
        return main()

    def CWPGroup001_GroupEnergyH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'CWPGroup001_GroupPower',1/12.0,'m5')
            except Exception as e:
                errorLog.writeLog(132,'CWPGroup001_GroupEnergyH:'+e.__str__(),True,'CWPGroup001_GroupEnergyH')
                return None
        return main()

    def CWPGroup001_GroupPower(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['CWP001_PumpPower','CWP002_PumpPower','CWP003_PumpPower','CWP004_PumpPower'])
            except Exception as e:
                errorLog.writeLog(132,'CWPGroup001_GroupPower:'+e.__str__(),True,'CWPGroup001_GroupPower')
                return None
        return main()

    def CWPGroup001_RunNum(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['CWP001_PumpOnOff_01','CWP002_PumpOnOff_01','CWP003_PumpOnOff_01','CWP004_PumpOnOff_01'])
            except Exception as e:
                errorLog.writeLog(132,'CWPGroup001_RunNum:'+e.__str__(),True,'CWPGroup001_RunNum')
                return None
        return main()

    def CWPGroup002_GroupCost(self):
        def main():
            try:
                Plant001_ElecPrice=self.get_data(132,'Plant001_ElecPrice')
                CWPGroup002_GroupPower=self.get_data(132,'CWPGroup002_GroupPower')
                return Plant001_ElecPrice*CWPGroup002_GroupPower/12
            except Exception as e:
                errorLog.writeLog(132,'CWPGroup002_GroupCost:'+e.__str__(),True,'CWPGroup002_GroupCost')
                return None
        return main()

    def CWPGroup002_GroupCostH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'CWPGroup002_GroupCost',1,'m5')
            except Exception as e:
                errorLog.writeLog(132,'CWPGroup002_GroupCostH:'+e.__str__(),True,'CWPGroup002_GroupCostH')
                return None
        return main()

    def CWPGroup002_GroupEnergyH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'CWPGroup002_GroupPower',1/12.0,'m5')
            except Exception as e:
                errorLog.writeLog(132,'CWPGroup002_GroupEnergyH:'+e.__str__(),True,'CWPGroup002_GroupEnergyH')
                return None
        return main()

    def CWPGroup002_GroupPower(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['CWP101_PumpPower','CWP102_PumpPower','CWP201_PumpPower','CWP202_PumpPower'])
            except Exception as e:
                errorLog.writeLog(132,'CWPGroup002_GroupPower:'+e.__str__(),True,'CWPGroup002_GroupPower')
                return None
        return main()

    def CWPGroup002_RunNum(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['CWP101_PumpOnOff_02','CWP102_PumpOnOff_02','CWP201_PumpOnOff_02','CWP202_PumpOnOff_02'])
            except Exception as e:
                errorLog.writeLog(132,'CWPGroup002_RunNum:'+e.__str__(),True,'CWPGroup002_RunNum')
                return None
        return main()

    def CWPGroupTotal001_GroupCost(self):
        def main():
            try:
                Plant001_ElecPrice=self.get_data(132,'Plant001_ElecPrice')
                CWPGroupTotal001_GroupPower=self.get_data(132,'CWPGroupTotal001_GroupPower')
                return Plant001_ElecPrice*CWPGroupTotal001_GroupPower/12
            except Exception as e:
                errorLog.writeLog(132,'CWPGroupTotal001_GroupCost:'+e.__str__(),True,'CWPGroupTotal001_GroupCost')
                return None
        return main()

    def CWPGroupTotal001_GroupCostH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'CWPGroupTotal001_GroupCost',1,'m5')
            except Exception as e:
                errorLog.writeLog(132,'CWPGroupTotal001_GroupCostH:'+e.__str__(),True,'CWPGroupTotal001_GroupCostH')
                return None
        return main()

    def CWPGroupTotal001_GroupEnergyH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'CWPGroupTotal001_GroupPower',1/12.0,'m5')
            except Exception as e:
                errorLog.writeLog(132,'CWPGroupTotal001_GroupEnergyH:'+e.__str__(),True,'CWPGroupTotal001_GroupEnergyH')
                return None
        return main()

    def CWPGroupTotal001_GroupPower(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['CWPGroup001_GroupPower','CWPGroup002_GroupPower'])
            except Exception as e:
                errorLog.writeLog(132,'CWPGroupTotal001_GroupPower:'+e.__str__(),True,'CWPGroupTotal001_GroupPower')
                return None
        return main()

    def CWPGroupTotal001_RunNum(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['CWPGroup001_RunNum','CWPGroup002_RunNum'])
            except Exception as e:
                errorLog.writeLog(132,'CWPGroupTotal001_RunNum:'+e.__str__(),True,'CWPGroupTotal001_RunNum')
                return None
        return main()

    def Ch001_ChPower(self):
        def main():
            try:
                Ch001_ChAMPS_01=self.get_data(132,'Ch001_ChAMPS_01')
                Ch001_CompOnOff_01=self.get_data(132,'Ch001_CompOnOff_01')
                Ch001_ChAMPS_02=self.get_data(132,'Ch001_ChAMPS_02')
                Ch001_CompOnOff_02=self.get_data(132,'Ch001_CompOnOff_02')
                return 581*Ch001_ChAMPS_01/100*Ch001_CompOnOff_01+581*Ch001_ChAMPS_02/100*Ch001_CompOnOff_02
            except Exception as e:
                errorLog.writeLog(132,'Ch001_ChPower:'+e.__str__(),True,'Ch001_ChPower')
                return None
        return main()

    def Ch002_ChPower(self):
        def main():
            try:
                Ch002_ChAMPS_01=self.get_data(132,'Ch002_ChAMPS_01')
                Ch002_CompOnOff_01=self.get_data(132,'Ch002_CompOnOff_01')
                Ch002_ChAMPS_02=self.get_data(132,'Ch002_ChAMPS_02')
                Ch002_CompOnOff_02=self.get_data(132,'Ch002_CompOnOff_02')
                Ch002_ChAMPS_03=self.get_data(132,'Ch002_ChAMPS_03')
                Ch002_CompOnOff_03=self.get_data(132,'Ch002_CompOnOff_03')
                return 625.3*Ch002_ChAMPS_01/100*Ch002_CompOnOff_01+625.3*Ch002_ChAMPS_02/100*Ch002_CompOnOff_02+625.3*Ch002_ChAMPS_03/100*Ch002_CompOnOff_03
            except Exception as e:
                errorLog.writeLog(132,'Ch002_ChPower:'+e.__str__(),True,'Ch002_ChPower')
                return None
        return main()

    def Ch003_ChPower(self):
        def main():
            try:
                Ch003_ChAMPS_01=self.get_data(132,'Ch003_ChAMPS_01')
                Ch003_CompOnOff_01=self.get_data(132,'Ch003_CompOnOff_01')
                Ch003_ChAMPS_02=self.get_data(132,'Ch003_ChAMPS_02')
                Ch003_CompOnOff_02=self.get_data(132,'Ch003_CompOnOff_02')
                return 581*Ch003_ChAMPS_01/100*Ch003_CompOnOff_01+581*Ch003_ChAMPS_02/100*Ch003_CompOnOff_02
            except Exception as e:
                errorLog.writeLog(132,'Ch003_ChPower:'+e.__str__(),True,'Ch003_ChPower')
                return None
        return main()

    def Ch004_ChPower(self):
        def main():
            try:
                Ch004_ChAMPS_01=self.get_data(132,'Ch004_ChAMPS_01')
                Ch004_CompOnOff_01=self.get_data(132,'Ch004_CompOnOff_01')
                Ch004_ChAMPS_02=self.get_data(132,'Ch004_ChAMPS_02')
                Ch004_CompOnOff_02=self.get_data(132,'Ch004_CompOnOff_02')
                return 581*Ch004_ChAMPS_01/100*Ch004_CompOnOff_01+581*Ch004_ChAMPS_02/100*Ch004_CompOnOff_02
            except Exception as e:
                errorLog.writeLog(132,'Ch004_ChPower:'+e.__str__(),True,'Ch004_ChPower')
                return None
        return main()

    def ChGroupTotal001_GroupCost(self):
        def main():
            try:
                Plant001_ElecPrice=self.get_data(132,'Plant001_ElecPrice')
                ChGroupTotal001_GroupPower=self.get_data(132,'ChGroupTotal001_GroupPower')
                return Plant001_ElecPrice*ChGroupTotal001_GroupPower/12
            except Exception as e:
                errorLog.writeLog(132,'ChGroupTotal001_GroupCost:'+e.__str__(),True,'ChGroupTotal001_GroupCost')
                return None
        return main()

    def ChGroupTotal001_GroupCostH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'ChGroupTotal001_GroupCost',1,'m5')
            except Exception as e:
                errorLog.writeLog(132,'ChGroupTotal001_GroupCostH:'+e.__str__(),True,'ChGroupTotal001_GroupCostH')
                return None
        return main()

    def ChGroupTotal001_GroupEnergyH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'ChGroupTotal001_GroupPower',1/12.0,'m5')
            except Exception as e:
                errorLog.writeLog(132,'ChGroupTotal001_GroupEnergyH:'+e.__str__(),True,'ChGroupTotal001_GroupEnergyH')
                return None
        return main()

    def ChGroupTotal001_GroupPower(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['Ch001_ChPower','Ch002_ChPower','Ch003_ChPower','Ch004_ChPower'])
            except Exception as e:
                errorLog.writeLog(132,'ChGroupTotal001_GroupPower:'+e.__str__(),True,'ChGroupTotal001_GroupPower')
                return None
        return main()

    def ChGroupTotal001_RunNum(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['Ch001_ChOnOff_01','Ch002_ChOnOff_01','Ch003_ChOnOff_01','Ch004_ChOnOff_01'])
            except Exception as e:
                errorLog.writeLog(132,'ChGroupTotal001_RunNum:'+e.__str__(),True,'ChGroupTotal001_RunNum')
                return None
        return main()

    def GHX001_ValveCloseStatus_01(self):
        def main():
            try:
                v=self.get_data(132,'IB16.Value')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'GHX001_ValveCloseStatus_01:'+e.__str__(),True,'GHX001_ValveCloseStatus_01')
                return None
        return main()

    def GHX001_ValveOpenStatus_01(self):
        def main():
            try:
                v=self.get_data(132,'IB16.Value')
                return [int(str(bin(int(v)))[-5]) if len(str(bin(int(v))))>=7 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'GHX001_ValveOpenStatus_01:'+e.__str__(),True,'GHX001_ValveOpenStatus_01')
                return None
        return main()

    def GHX002_ValveCloseStatus_01(self):
        def main():
            try:
                v=self.get_data(132,'IB16.Value')
                return [int(str(bin(int(v)))[-8]) if len(str(bin(int(v))))>=10 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'GHX002_ValveCloseStatus_01:'+e.__str__(),True,'GHX002_ValveCloseStatus_01')
                return None
        return main()

    def GHX002_ValveOpenStatus_01(self):
        def main():
            try:
                v=self.get_data(132,'IB16.Value')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'GHX002_ValveOpenStatus_01:'+e.__str__(),True,'GHX002_ValveOpenStatus_01')
                return None
        return main()

    def GHX003_ValveCloseStatus_01(self):
        def main():
            try:
                v=self.get_data(132,'IB16.Value')
                return [int(str(bin(int(v)))[-2]) if len(str(bin(int(v))))>=4 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'GHX003_ValveCloseStatus_01:'+e.__str__(),True,'GHX003_ValveCloseStatus_01')
                return None
        return main()

    def GHX003_ValveOpenStatus_01(self):
        def main():
            try:
                v=self.get_data(132,'IB16.Value')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'GHX003_ValveOpenStatus_01:'+e.__str__(),True,'GHX003_ValveOpenStatus_01')
                return None
        return main()

    def GHX004_ValveCloseStatus_01(self):
        def main():
            try:
                v=self.get_data(132,'IB16.Value')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'GHX004_ValveCloseStatus_01:'+e.__str__(),True,'GHX004_ValveCloseStatus_01')
                return None
        return main()

    def GHX004_ValveOpenStatus_01(self):
        def main():
            try:
                v=self.get_data(132,'IB16.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'GHX004_ValveOpenStatus_01:'+e.__str__(),True,'GHX004_ValveOpenStatus_01')
                return None
        return main()

    def HW001_HWFlow(self):
        def main():
            try:
                HWP001_PumpOnOff_01=self.get_data(132,'HWP001_PumpOnOff_01')
                HWP002_PumpOnOff_01=self.get_data(132,'HWP002_PumpOnOff_01')
                return (HWP001_PumpOnOff_01+HWP002_PumpOnOff_01)*220
            except Exception as e:
                errorLog.writeLog(132,'HW001_HWFlow:'+e.__str__(),True,'HW001_HWFlow')
                return None
        return main()

    def HW001_ValveCloseStatus_01(self):
        def main():
            try:
                v=self.get_data(132,'IB17.Value')
                return [int(str(bin(int(v)))[-2]) if len(str(bin(int(v))))>=4 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'HW001_ValveCloseStatus_01:'+e.__str__(),True,'HW001_ValveCloseStatus_01')
                return None
        return main()

    def HW001_ValveOpenStatus_01(self):
        def main():
            try:
                v=self.get_data(132,'IB17.Value')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'HW001_ValveOpenStatus_01:'+e.__str__(),True,'HW001_ValveOpenStatus_01')
                return None
        return main()

    def HW101_ValveCloseStatus_01(self):
        def main():
            try:
                v=self.get_data(132,'IB17.Value')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'HW101_ValveCloseStatus_01:'+e.__str__(),True,'HW101_ValveCloseStatus_01')
                return None
        return main()

    def HW101_ValveOpenStatus_01(self):
        def main():
            try:
                v=self.get_data(132,'IB17.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'HW101_ValveOpenStatus_01:'+e.__str__(),True,'HW101_ValveOpenStatus_01')
                return None
        return main()

    def HWP001_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB12.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'HWP001_PumpOnOff_01:'+e.__str__(),True,'HWP001_PumpOnOff_01')
                return None
        return main()

    def HWP001_PumpPower(self):
        def main():
            try:
                HWP001_PumpOnOff_01=self.get_data(132,'HWP001_PumpOnOff_01')
                return HWP001_PumpOnOff_01*18.5
            except Exception as e:
                errorLog.writeLog(132,'HWP001_PumpPower:'+e.__str__(),True,'HWP001_PumpPower')
                return None
        return main()

    def HWP002_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB12.Value')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'HWP002_PumpOnOff_01:'+e.__str__(),True,'HWP002_PumpOnOff_01')
                return None
        return main()

    def HWP002_PumpPower(self):
        def main():
            try:
                HWP002_PumpOnOff_01=self.get_data(132,'HWP002_PumpOnOff_01')
                return HWP002_PumpOnOff_01*18.5
            except Exception as e:
                errorLog.writeLog(132,'HWP002_PumpPower:'+e.__str__(),True,'HWP002_PumpPower')
                return None
        return main()

    def HWP101_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB11.Value')
                return [int(str(bin(int(v)))[-5]) if len(str(bin(int(v))))>=7 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'HWP101_PumpOnOff_01:'+e.__str__(),True,'HWP101_PumpOnOff_01')
                return None
        return main()

    def HWP101_PumpPower(self):
        def main():
            try:
                HWP101_PumpOnOff_01=self.get_data(132,'HWP101_PumpOnOff_01')
                HWP101_PumpVSDFreq_01=self.get_data(132,'HWP101_PumpVSDFreq_01')
                return (HWP101_PumpVSDFreq_01/50)**2*11*HWP101_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'HWP101_PumpPower:'+e.__str__(),True,'HWP101_PumpPower')
                return None
        return main()

    def HWP102_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB11.Value')
                return [int(str(bin(int(v)))[-8]) if len(str(bin(int(v))))>=10 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'HWP102_PumpOnOff_01:'+e.__str__(),True,'HWP102_PumpOnOff_01')
                return None
        return main()

    def HWP102_PumpPower(self):
        def main():
            try:
                HWP102_PumpOnOff_01=self.get_data(132,'HWP102_PumpOnOff_01')
                HWP102_PumpVSDFreq_01=self.get_data(132,'HWP102_PumpVSDFreq_01')
                return (HWP102_PumpVSDFreq_01/50)**2*11*HWP102_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'HWP102_PumpPower:'+e.__str__(),True,'HWP102_PumpPower')
                return None
        return main()

    def HWPGroup001_GroupPower(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['HWP001_PumpPower','HWP002_PumpPower'])
            except Exception as e:
                errorLog.writeLog(132,'HWPGroup001_GroupPower:'+e.__str__(),True,'HWPGroup001_GroupPower')
                return None
        return main()

    def HWPGroup001_RunNum(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['HWP001_PumpOnOff_01','HWP002_PumpOnOff_01'])
            except Exception as e:
                errorLog.writeLog(132,'HWPGroup001_RunNum:'+e.__str__(),True,'HWPGroup001_RunNum')
                return None
        return main()

    def HWPGroup002_GroupPower(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['HWP101_PumpPower','HWP102_PumpPower'])
            except Exception as e:
                errorLog.writeLog(132,'HWPGroup002_GroupPower:'+e.__str__(),True,'HWPGroup002_GroupPower')
                return None
        return main()

    def HWPGroup002_RunNum(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['HWP101_PumpOnOff_01','HWP102_PumpOnOff_01'])
            except Exception as e:
                errorLog.writeLog(132,'HWPGroup002_RunNum:'+e.__str__(),True,'HWPGroup002_RunNum')
                return None
        return main()

    def HWPGroupTotal001_GroupCost(self):
        def main():
            try:
                Plant001_ElecPrice=self.get_data(132,'Plant001_ElecPrice')
                HWPGroupTotal001_GroupPower=self.get_data(132,'HWPGroupTotal001_GroupPower')
                return Plant001_ElecPrice*HWPGroupTotal001_GroupPower/12
            except Exception as e:
                errorLog.writeLog(132,'HWPGroupTotal001_GroupCost:'+e.__str__(),True,'HWPGroupTotal001_GroupCost')
                return None
        return main()

    def HWPGroupTotal001_GroupCostH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'HWPGroupTotal001_GroupCost',1/12.0,'m5')
            except Exception as e:
                errorLog.writeLog(132,'HWPGroupTotal001_GroupCostH:'+e.__str__(),True,'HWPGroupTotal001_GroupCostH')
                return None
        return main()

    def HWPGroupTotal001_GroupEnergyH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'HWPGroupTotal001_GroupPower',1/12.0,'m5')
            except Exception as e:
                errorLog.writeLog(132,'HWPGroupTotal001_GroupEnergyH:'+e.__str__(),True,'HWPGroupTotal001_GroupEnergyH')
                return None
        return main()

    def HWPGroupTotal001_GroupPower(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['HWPGroup001_GroupPower','HWPGroup002_GroupPower'])
            except Exception as e:
                errorLog.writeLog(132,'HWPGroupTotal001_GroupPower:'+e.__str__(),True,'HWPGroupTotal001_GroupPower')
                return None
        return main()

    def HWPGroupTotal001_RunNum(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['HWPGroup001_RunNum','HWPGroup002_RunNum'])
            except Exception as e:
                errorLog.writeLog(132,'HWPGroupTotal001_RunNum:'+e.__str__(),True,'HWPGroupTotal001_RunNum')
                return None
        return main()

    def JYZX_AHU0J01_CCValvePositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J01zhuangtai')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J01_CCValvePositionSet_01:'+e.__str__(),True,'JYZX_AHU0J01_CCValvePositionSet_01')
                return None
        return main()

    def JYZX_AHU0J01_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J01zhuangtai')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J01_SADamperPositionSet_01:'+e.__str__(),True,'JYZX_AHU0J01_SADamperPositionSet_01')
                return None
        return main()

    def JYZX_AHU0J01_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'J01zhuangtai')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J01_UnitOnOff_01:'+e.__str__(),True,'JYZX_AHU0J01_UnitOnOff_01')
                return None
        return main()

    def JYZX_AHU0J02_CCValvePositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J02zhuangtai')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J02_CCValvePositionSet_01:'+e.__str__(),True,'JYZX_AHU0J02_CCValvePositionSet_01')
                return None
        return main()

    def JYZX_AHU0J02_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J02zhuangtai')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J02_SADamperPositionSet_01:'+e.__str__(),True,'JYZX_AHU0J02_SADamperPositionSet_01')
                return None
        return main()

    def JYZX_AHU0J02_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'J02zhuangtai')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J02_UnitOnOff_01:'+e.__str__(),True,'JYZX_AHU0J02_UnitOnOff_01')
                return None
        return main()

    def JYZX_AHU0J03_CCValvePositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J03zhuangtai')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J03_CCValvePositionSet_01:'+e.__str__(),True,'JYZX_AHU0J03_CCValvePositionSet_01')
                return None
        return main()

    def JYZX_AHU0J03_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J03zhuangtai')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J03_SADamperPositionSet_01:'+e.__str__(),True,'JYZX_AHU0J03_SADamperPositionSet_01')
                return None
        return main()

    def JYZX_AHU0J03_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'J03zhuangtai')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J03_UnitOnOff_01:'+e.__str__(),True,'JYZX_AHU0J03_UnitOnOff_01')
                return None
        return main()

    def JYZX_AHU0J04_CCValvePositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J04zhuangtai')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J04_CCValvePositionSet_01:'+e.__str__(),True,'JYZX_AHU0J04_CCValvePositionSet_01')
                return None
        return main()

    def JYZX_AHU0J04_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J04zhuangtai')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J04_SADamperPositionSet_01:'+e.__str__(),True,'JYZX_AHU0J04_SADamperPositionSet_01')
                return None
        return main()

    def JYZX_AHU0J04_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'J04zhuangtai')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J04_UnitOnOff_01:'+e.__str__(),True,'JYZX_AHU0J04_UnitOnOff_01')
                return None
        return main()

    def JYZX_AHU0J05_CCValvePositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J05zhuangtai')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J05_CCValvePositionSet_01:'+e.__str__(),True,'JYZX_AHU0J05_CCValvePositionSet_01')
                return None
        return main()

    def JYZX_AHU0J05_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J05zhuangtai')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J05_SADamperPositionSet_01:'+e.__str__(),True,'JYZX_AHU0J05_SADamperPositionSet_01')
                return None
        return main()

    def JYZX_AHU0J05_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'J05zhuangtai')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J05_UnitOnOff_01:'+e.__str__(),True,'JYZX_AHU0J05_UnitOnOff_01')
                return None
        return main()

    def JYZX_AHU0J06_CCValvePositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J06zhuangtai')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J06_CCValvePositionSet_01:'+e.__str__(),True,'JYZX_AHU0J06_CCValvePositionSet_01')
                return None
        return main()

    def JYZX_AHU0J06_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J06zhuangtai')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J06_SADamperPositionSet_01:'+e.__str__(),True,'JYZX_AHU0J06_SADamperPositionSet_01')
                return None
        return main()

    def JYZX_AHU0J06_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'J06zhuangtai')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J06_UnitOnOff_01:'+e.__str__(),True,'JYZX_AHU0J06_UnitOnOff_01')
                return None
        return main()

    def JYZX_AHU0J07_CCValvePositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J07zhuangtai')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J07_CCValvePositionSet_01:'+e.__str__(),True,'JYZX_AHU0J07_CCValvePositionSet_01')
                return None
        return main()

    def JYZX_AHU0J07_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J07zhuangtai')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J07_SADamperPositionSet_01:'+e.__str__(),True,'JYZX_AHU0J07_SADamperPositionSet_01')
                return None
        return main()

    def JYZX_AHU0J07_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'J07zhuangtai')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J07_UnitOnOff_01:'+e.__str__(),True,'JYZX_AHU0J07_UnitOnOff_01')
                return None
        return main()

    def JYZX_AHU0J08_CCValvePositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J08zhuangtai')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J08_CCValvePositionSet_01:'+e.__str__(),True,'JYZX_AHU0J08_CCValvePositionSet_01')
                return None
        return main()

    def JYZX_AHU0J08_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J08zhuangtai')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J08_SADamperPositionSet_01:'+e.__str__(),True,'JYZX_AHU0J08_SADamperPositionSet_01')
                return None
        return main()

    def JYZX_AHU0J08_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'J08zhuangtai')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J08_UnitOnOff_01:'+e.__str__(),True,'JYZX_AHU0J08_UnitOnOff_01')
                return None
        return main()

    def JYZX_AHU0J09_CCValvePositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J09zhuangtai')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J09_CCValvePositionSet_01:'+e.__str__(),True,'JYZX_AHU0J09_CCValvePositionSet_01')
                return None
        return main()

    def JYZX_AHU0J09_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J09zhuangtai')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J09_SADamperPositionSet_01:'+e.__str__(),True,'JYZX_AHU0J09_SADamperPositionSet_01')
                return None
        return main()

    def JYZX_AHU0J09_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'J09zhuangtai')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J09_UnitOnOff_01:'+e.__str__(),True,'JYZX_AHU0J09_UnitOnOff_01')
                return None
        return main()

    def JYZX_AHU0J10_CCValvePositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J10zhuangtai')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J10_CCValvePositionSet_01:'+e.__str__(),True,'JYZX_AHU0J10_CCValvePositionSet_01')
                return None
        return main()

    def JYZX_AHU0J10_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'J10zhuangtai')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J10_SADamperPositionSet_01:'+e.__str__(),True,'JYZX_AHU0J10_SADamperPositionSet_01')
                return None
        return main()

    def JYZX_AHU0J10_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'J10zhuangtai')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_AHU0J10_UnitOnOff_01:'+e.__str__(),True,'JYZX_AHU0J10_UnitOnOff_01')
                return None
        return main()

    def JYZX_SCHWP001_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB5.Value')
                return [int(str(bin(int(v)))[-2]) if len(str(bin(int(v))))>=4 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_SCHWP001_PumpOnOff_01:'+e.__str__(),True,'JYZX_SCHWP001_PumpOnOff_01')
                return None
        return main()

    def JYZX_SCHWP001_PumpPower(self):
        def main():
            try:
                JYZX_SCHWP001_PumpVSDFreq_01=self.get_data(132,'JYZX_SCHWP001_PumpVSDFreq_01')
                JYZX_SCHWP001_PumpOnOff_01=self.get_data(132,'JYZX_SCHWP001_PumpOnOff_01')
                return (JYZX_SCHWP001_PumpVSDFreq_01/50)**2*30*JYZX_SCHWP001_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'JYZX_SCHWP001_PumpPower:'+e.__str__(),True,'JYZX_SCHWP001_PumpPower')
                return None
        return main()

    def JYZX_SCHWP002_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB7.Value')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'JYZX_SCHWP002_PumpOnOff_01:'+e.__str__(),True,'JYZX_SCHWP002_PumpOnOff_01')
                return None
        return main()

    def JYZX_SCHWP002_PumpPower(self):
        def main():
            try:
                JYZX_SCHWP002_PumpVSDFreq_01=self.get_data(132,'JYZX_SCHWP002_PumpVSDFreq_01')
                JYZX_SCHWP002_PumpOnOff_01=self.get_data(132,'JYZX_SCHWP002_PumpOnOff_01')
                return (JYZX_SCHWP002_PumpVSDFreq_01/50)**2*30*JYZX_SCHWP002_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'JYZX_SCHWP002_PumpPower:'+e.__str__(),True,'JYZX_SCHWP002_PumpPower')
                return None
        return main()

    def KYL_SCHWP001_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB5.Value')
                return [int(str(bin(int(v)))[-8]) if len(str(bin(int(v))))>=10 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'KYL_SCHWP001_PumpOnOff_01:'+e.__str__(),True,'KYL_SCHWP001_PumpOnOff_01')
                return None
        return main()

    def KYL_SCHWP001_PumpPower(self):
        def main():
            try:
                KYL_SCHWP001_PumpVSDFreq_01=self.get_data(132,'KYL_SCHWP001_PumpVSDFreq_01')
                KYL_SCHWP001_PumpOnOff_01=self.get_data(132,'KYL_SCHWP001_PumpOnOff_01')
                return (KYL_SCHWP001_PumpVSDFreq_01/50)**2*22*KYL_SCHWP001_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'KYL_SCHWP001_PumpPower:'+e.__str__(),True,'KYL_SCHWP001_PumpPower')
                return None
        return main()

    def KYL_SCHWP002_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB5.Value')
                return [int(str(bin(int(v)))[-5]) if len(str(bin(int(v))))>=7 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'KYL_SCHWP002_PumpOnOff_01:'+e.__str__(),True,'KYL_SCHWP002_PumpOnOff_01')
                return None
        return main()

    def KYL_SCHWP002_PumpPower(self):
        def main():
            try:
                KYL_SCHWP002_PumpVSDFreq_01=self.get_data(132,'KYL_SCHWP002_PumpVSDFreq_01')
                KYL_SCHWP002_PumpOnOff_01=self.get_data(132,'KYL_SCHWP002_PumpOnOff_01')
                return (KYL_SCHWP002_PumpVSDFreq_01/50)**2*22*KYL_SCHWP002_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'KYL_SCHWP002_PumpPower:'+e.__str__(),True,'KYL_SCHWP002_PumpPower')
                return None
        return main()

    def PCHW001_ChWFlow(self):
        def main():
            try:
                PCHWP001_PumpFlow=self.get_data(132,'PCHWP001_PumpFlow')
                PCHWP002_PumpFlow=self.get_data(132,'PCHWP002_PumpFlow')
                PCHWP003_PumpFlow=self.get_data(132,'PCHWP003_PumpFlow')
                PCHWP004_PumpFlow=self.get_data(132,'PCHWP004_PumpFlow')
                return PCHWP001_PumpFlow+PCHWP002_PumpFlow+PCHWP003_PumpFlow+PCHWP004_PumpFlow
            except Exception as e:
                errorLog.writeLog(132,'PCHW001_ChWFlow:'+e.__str__(),True,'PCHW001_ChWFlow')
                return None
        return main()

    def PCHW001_DT(self):
        def main():
            try:
                PCHW001_PriChWReturnT_01=self.get_data(132,'PCHW001_PriChWReturnT_01')
                PCHW001_PriChWSupplyT_01=self.get_data(132,'PCHW001_PriChWSupplyT_01')
                return abs(PCHW001_PriChWReturnT_01-PCHW001_PriChWSupplyT_01)
            except Exception as e:
                errorLog.writeLog(132,'PCHW001_DT:'+e.__str__(),True,'PCHW001_DT')
                return None
        return main()

    def PCHWP001_PumpFlow(self):
        def main():
            try:
                PCHWP001_PumpOnOff_01=self.get_data(132,'PCHWP001_PumpOnOff_01')
                return PCHWP001_PumpOnOff_01*220
            except Exception as e:
                errorLog.writeLog(132,'PCHWP001_PumpFlow:'+e.__str__(),True,'PCHWP001_PumpFlow')
                return None
        return main()

    def PCHWP001_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB1.Value')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'PCHWP001_PumpOnOff_01:'+e.__str__(),True,'PCHWP001_PumpOnOff_01')
                return None
        return main()

    def PCHWP001_PumpPower(self):
        def main():
            try:
                PCHWP001_PumpOnOff_01=self.get_data(132,'PCHWP001_PumpOnOff_01')
                return PCHWP001_PumpOnOff_01*18.5
            except Exception as e:
                errorLog.writeLog(132,'PCHWP001_PumpPower:'+e.__str__(),True,'PCHWP001_PumpPower')
                return None
        return main()

    def PCHWP002_PumpFlow(self):
        def main():
            try:
                PCHWP002_PumpOnOff_01=self.get_data(132,'PCHWP002_PumpOnOff_01')
                return PCHWP002_PumpOnOff_01*355
            except Exception as e:
                errorLog.writeLog(132,'PCHWP002_PumpFlow:'+e.__str__(),True,'PCHWP002_PumpFlow')
                return None
        return main()

    def PCHWP002_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB2.Value')
                return [int(str(bin(int(v)))[-2]) if len(str(bin(int(v))))>=4 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'PCHWP002_PumpOnOff_01:'+e.__str__(),True,'PCHWP002_PumpOnOff_01')
                return None
        return main()

    def PCHWP002_PumpPower(self):
        def main():
            try:
                PCHWP002_PumpOnOff_01=self.get_data(132,'PCHWP002_PumpOnOff_01')
                return PCHWP002_PumpOnOff_01*30
            except Exception as e:
                errorLog.writeLog(132,'PCHWP002_PumpPower:'+e.__str__(),True,'PCHWP002_PumpPower')
                return None
        return main()

    def PCHWP003_PumpFlow(self):
        def main():
            try:
                PCHWP003_PumpOnOff_01=self.get_data(132,'PCHWP003_PumpOnOff_01')
                return PCHWP003_PumpOnOff_01*220
            except Exception as e:
                errorLog.writeLog(132,'PCHWP003_PumpFlow:'+e.__str__(),True,'PCHWP003_PumpFlow')
                return None
        return main()

    def PCHWP003_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB1.Value')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'PCHWP003_PumpOnOff_01:'+e.__str__(),True,'PCHWP003_PumpOnOff_01')
                return None
        return main()

    def PCHWP003_PumpPower(self):
        def main():
            try:
                PCHWP003_PumpOnOff_01=self.get_data(132,'PCHWP003_PumpOnOff_01')
                return PCHWP003_PumpOnOff_01*18.5
            except Exception as e:
                errorLog.writeLog(132,'PCHWP003_PumpPower:'+e.__str__(),True,'PCHWP003_PumpPower')
                return None
        return main()

    def PCHWP004_PumpFlow(self):
        def main():
            try:
                PCHWP004_PumpOnOff_01=self.get_data(132,'PCHWP004_PumpOnOff_01')
                return PCHWP004_PumpOnOff_01*220
            except Exception as e:
                errorLog.writeLog(132,'PCHWP004_PumpFlow:'+e.__str__(),True,'PCHWP004_PumpFlow')
                return None
        return main()

    def PCHWP004_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB1.Value')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'PCHWP004_PumpOnOff_01:'+e.__str__(),True,'PCHWP004_PumpOnOff_01')
                return None
        return main()

    def PCHWP004_PumpPower(self):
        def main():
            try:
                PCHWP004_PumpOnOff_01=self.get_data(132,'PCHWP004_PumpOnOff_01')
                return PCHWP004_PumpOnOff_01*18.5
            except Exception as e:
                errorLog.writeLog(132,'PCHWP004_PumpPower:'+e.__str__(),True,'PCHWP004_PumpPower')
                return None
        return main()

    def PCHWPGroupTotal001_GroupCost(self):
        def main():
            try:
                Plant001_ElecPrice=self.get_data(132,'Plant001_ElecPrice')
                PCHWPGroupTotal001_GroupPower=self.get_data(132,'PCHWPGroupTotal001_GroupPower')
                return Plant001_ElecPrice*PCHWPGroupTotal001_GroupPower/12
            except Exception as e:
                errorLog.writeLog(132,'PCHWPGroupTotal001_GroupCost:'+e.__str__(),True,'PCHWPGroupTotal001_GroupCost')
                return None
        return main()

    def PCHWPGroupTotal001_GroupCostH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'PCHWPGroupTotal001_GroupCost',1,'m5')
            except Exception as e:
                errorLog.writeLog(132,'PCHWPGroupTotal001_GroupCostH:'+e.__str__(),True,'PCHWPGroupTotal001_GroupCostH')
                return None
        return main()

    def PCHWPGroupTotal001_GroupEnergyH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'PCHWPGroupTotal001_GroupPower',1/12.0,'m5')
            except Exception as e:
                errorLog.writeLog(132,'PCHWPGroupTotal001_GroupEnergyH:'+e.__str__(),True,'PCHWPGroupTotal001_GroupEnergyH')
                return None
        return main()

    def PCHWPGroupTotal001_GroupPower(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['PCHWP001_PumpPower','PCHWP002_PumpPower','PCHWP003_PumpPower','PCHWP004_PumpPower'])
            except Exception as e:
                errorLog.writeLog(132,'PCHWPGroupTotal001_GroupPower:'+e.__str__(),True,'PCHWPGroupTotal001_GroupPower')
                return None
        return main()

    def PCHWPGroupTotal001_RunNum(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['PCHWP001_PumpOnOff_01','PCHWP002_PumpOnOff_01','PCHWP003_PumpOnOff_01','PCHWP004_PumpOnOff_01'])
            except Exception as e:
                errorLog.writeLog(132,'PCHWPGroupTotal001_RunNum:'+e.__str__(),True,'PCHWPGroupTotal001_RunNum')
                return None
        return main()

    def Plant001_COP(self):
        def main():
            try:
                Plant001_Eff=self.get_data(132,'Plant001_Eff')
                PCHWPGroupTotal001_RunNum=self.get_data(132,'PCHWPGroupTotal001_RunNum')
                return 3.516/(Plant001_Eff+(Plant001_Eff<0.1))*(Plant001_Eff>=0.1)*(PCHWPGroupTotal001_RunNum>0)
            except Exception as e:
                errorLog.writeLog(132,'Plant001_COP:'+e.__str__(),True,'Plant001_COP')
                return None
        return main()

    def Plant001_Eff(self):
        def main():
            try:
                Plant001_GroupPower=self.get_data(132,'Plant001_GroupPower')
                Plant001_Load=self.get_data(132,'Plant001_Load')
                PCHWPGroupTotal001_RunNum=self.get_data(132,'PCHWPGroupTotal001_RunNum')
                HWPGroupTotal001_GroupPower=self.get_data(132,'HWPGroupTotal001_GroupPower')
                PCHW001_PriChWSupplyT_01=self.get_data(132,'PCHW001_PriChWSupplyT_01')
                Ch001_CoolingorHeatingMode_01=self.get_data(132,'Ch001_CoolingorHeatingMode_01')
                return ((Plant001_GroupPower-HWPGroupTotal001_GroupPower)*(Ch001_CoolingorHeatingMode_01==3)+(Plant001_GroupPower-HWPGroupTotal001_GroupPower)*(Ch001_CoolingorHeatingMode_01==4)+(Plant001_GroupPower-HWPGroupTotal001_GroupPower)*(Ch001_CoolingorHeatingMode_01==5)+(Plant001_GroupPower-HWPGroupTotal001_GroupPower)*(Ch001_CoolingorHeatingMode_01==6)+Plant001_GroupPower*(Ch001_CoolingorHeatingMode_01==1)+Plant001_GroupPower*(Ch001_CoolingorHeatingMode_01==2))/(Plant001_Load+(Plant001_Load<=10))*(Plant001_Load>10)*(PCHWPGroupTotal001_RunNum>0)
            except Exception as e:
                errorLog.writeLog(132,'Plant001_Eff:'+e.__str__(),True,'Plant001_Eff')
                return None
        return main()

    def Plant001_ElecPrice(self):
        def main():
            try:
                i=int(self.get_act_time().hour)
                return [0.23,0.23,0.23,0.23,0.23,0.23,0.23,0.23,0.6502,0.6502,0.6502,0.6502,0.3901,0.3901,0.3901,0.3901,0.3901,0.6502,0.6502,0.6502,0.6502,0.3901,0.3901,0.3901][i]
            except Exception as e:
                errorLog.writeLog(132,'Plant001_ElecPrice:'+e.__str__(),True,'Plant001_ElecPrice')
                return None
        return main()

    def Plant001_GroupCost(self):
        def main():
            try:
                Plant001_ElecPrice=self.get_data(132,'Plant001_ElecPrice')
                Plant001_GroupPower=self.get_data(132,'Plant001_GroupPower')
                return Plant001_ElecPrice*Plant001_GroupPower/12
            except Exception as e:
                errorLog.writeLog(132,'Plant001_GroupCost:'+e.__str__(),True,'Plant001_GroupCost')
                return None
        return main()

    def Plant001_GroupCostH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'Plant001_GroupCost',1,'m5')
            except Exception as e:
                errorLog.writeLog(132,'Plant001_GroupCostH:'+e.__str__(),True,'Plant001_GroupCostH')
                return None
        return main()

    def Plant001_GroupEnergyH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'Plant001_GroupPower',1/12.0,'m5')
            except Exception as e:
                errorLog.writeLog(132,'Plant001_GroupEnergyH:'+e.__str__(),True,'Plant001_GroupEnergyH')
                return None
        return main()

    def Plant001_GroupLoadH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'Plant001_Load',1/12.0,'m5')
            except Exception as e:
                errorLog.writeLog(132,'Plant001_GroupLoadH:'+e.__str__(),True,'Plant001_GroupLoadH')
                return None
        return main()

    def Plant001_GroupPower(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['ChGroupTotal001_GroupPower','SCHWPGroupTotal001_GroupPower','PCHWPGroupTotal001_GroupPower','CWPGroupTotal001_GroupPower','HWPGroupTotal001_GroupPower','CTGroupTotal001_GroupPower'])
            except Exception as e:
                errorLog.writeLog(132,'Plant001_GroupPower:'+e.__str__(),True,'Plant001_GroupPower')
                return None
        return main()

    def Plant001_Load(self):
        def main():
            try:
                PCHW001_PriChWReturnT_01=self.get_data(132,'PCHW001_PriChWReturnT_01')
                PCHW001_PriChWSupplyT_01=self.get_data(132,'PCHW001_PriChWSupplyT_01')
                PCHW001_ChWFlow=self.get_data(132,'PCHW001_ChWFlow')
                PCHWPGroupTotal001_RunNum=self.get_data(132,'PCHWPGroupTotal001_RunNum')
                HW001_HWSupplyT_01=self.get_data(132,'HW001_HWSupplyT_01')
                HW001_HWReturnT_01=self.get_data(132,'HW001_HWReturnT_01')
                HW001_HWFlow=self.get_data(132,'HW001_HWFlow')
                HWPGroup001_RunNum=self.get_data(132,'HWPGroup001_RunNum')
                Ch001_CoolingorHeatingMode_01=self.get_data(132,'Ch001_CoolingorHeatingMode_01')
                return (abs(PCHW001_PriChWReturnT_01-PCHW001_PriChWSupplyT_01)*(Ch001_CoolingorHeatingMode_01==0)*PCHW001_ChWFlow*(PCHWPGroupTotal001_RunNum>0)+abs(PCHW001_PriChWSupplyT_01-PCHW001_PriChWReturnT_01)*(Ch001_CoolingorHeatingMode_01==1)*PCHW001_ChWFlow*(PCHWPGroupTotal001_RunNum>0)+abs(PCHW001_PriChWSupplyT_01-PCHW001_PriChWReturnT_01)*(Ch001_CoolingorHeatingMode_01==2)*PCHW001_ChWFlow*(PCHWPGroupTotal001_RunNum>0)+abs(PCHW001_PriChWSupplyT_01-PCHW001_PriChWReturnT_01)*(Ch001_CoolingorHeatingMode_01==3)*PCHW001_ChWFlow*(PCHWPGroupTotal001_RunNum>0)+abs(PCHW001_PriChWSupplyT_01-PCHW001_PriChWReturnT_01)*(Ch001_CoolingorHeatingMode_01==4)*PCHW001_ChWFlow*(PCHWPGroupTotal001_RunNum>0)+abs(PCHW001_PriChWSupplyT_01-PCHW001_PriChWReturnT_01)*(Ch001_CoolingorHeatingMode_01==5)*PCHW001_ChWFlow*(PCHWPGroupTotal001_RunNum>0)+0*(Ch001_CoolingorHeatingMode_01==6)*PCHW001_ChWFlow*(PCHWPGroupTotal001_RunNum>0))*4.2/3.6/3.516
            except Exception as e:
                errorLog.writeLog(132,'Plant001_Load:'+e.__str__(),True,'Plant001_Load')
                return None
        return main()

    def SCHWPGroup001_GroupPower(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['JYZX_SCHWP001_PumpPower','JYZX_SCHWP002_PumpPower'])
            except Exception as e:
                errorLog.writeLog(132,'SCHWPGroup001_GroupPower:'+e.__str__(),True,'SCHWPGroup001_GroupPower')
                return None
        return main()

    def SCHWPGroup001_RunNum(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['JYZX_SCHWP001_PumpOnOff_01','JYZX_SCHWP002_PumpOnOff_01'])
            except Exception as e:
                errorLog.writeLog(132,'SCHWPGroup001_RunNum:'+e.__str__(),True,'SCHWPGroup001_RunNum')
                return None
        return main()

    def SCHWPGroup002_GroupPower(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['KYL_SCHWP001_PumpPower','KYL_SCHWP002_PumpPower'])
            except Exception as e:
                errorLog.writeLog(132,'SCHWPGroup002_GroupPower:'+e.__str__(),True,'SCHWPGroup002_GroupPower')
                return None
        return main()

    def SCHWPGroup002_RunNum(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['KYL_SCHWP001_PumpOnOff_01','KYL_SCHWP002_PumpOnOff_01'])
            except Exception as e:
                errorLog.writeLog(132,'SCHWPGroup002_RunNum:'+e.__str__(),True,'SCHWPGroup002_RunNum')
                return None
        return main()

    def SCHWPGroup003_GroupPower(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['ST_SCHWP001_PumpPower','ST_SCHWP002_PumpPower'])
            except Exception as e:
                errorLog.writeLog(132,'SCHWPGroup003_GroupPower:'+e.__str__(),True,'SCHWPGroup003_GroupPower')
                return None
        return main()

    def SCHWPGroup003_RunNum(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['ST_SCHWP001_PumpOnOff_01','ST_SCHWP002_PumpOnOff_01'])
            except Exception as e:
                errorLog.writeLog(132,'SCHWPGroup003_RunNum:'+e.__str__(),True,'SCHWPGroup003_RunNum')
                return None
        return main()

    def SCHWPGroup004_GroupPower(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['TSG_SCHWP001_PumpPower','TSG_SCHWP002_PumpPower'])
            except Exception as e:
                errorLog.writeLog(132,'SCHWPGroup004_GroupPower:'+e.__str__(),True,'SCHWPGroup004_GroupPower')
                return None
        return main()

    def SCHWPGroup004_RunNum(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['TSG_SCHWP001_PumpOnOff_01','TSG_SCHWP002_PumpOnOff_01'])
            except Exception as e:
                errorLog.writeLog(132,'SCHWPGroup004_RunNum:'+e.__str__(),True,'SCHWPGroup004_RunNum')
                return None
        return main()

    def SCHWPGroup005_GroupPower(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['XZL_SCHWP001_PumpPower','XZL_SCHWP002_PumpPower'])
            except Exception as e:
                errorLog.writeLog(132,'SCHWPGroup005_GroupPower:'+e.__str__(),True,'SCHWPGroup005_GroupPower')
                return None
        return main()

    def SCHWPGroup005_RunNum(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['XZL_SCHWP001_PumpOnOff_01','XZL_SCHWP002_PumpOnOff_01'])
            except Exception as e:
                errorLog.writeLog(132,'SCHWPGroup005_RunNum:'+e.__str__(),True,'SCHWPGroup005_RunNum')
                return None
        return main()

    def SCHWPGroup006_GroupPower(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['SSL_SCHWP001_PumpPower','SSL_SCHWP002_PumpPower','SSL_SCHWP003_PumpPower','SSL_SCHWP004_PumpPower'])
            except Exception as e:
                errorLog.writeLog(132,'SCHWPGroup006_GroupPower:'+e.__str__(),True,'SCHWPGroup006_GroupPower')
                return None
        return main()

    def SCHWPGroup006_RunNum(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['SSL_SCHWP001_PumpOnOff_01','SSL_SCHWP002_PumpOnOff_01','SSL_SCHWP003_PumpOnOff_01','SSL_SCHWP004_PumpOnOff_01'])
            except Exception as e:
                errorLog.writeLog(132,'SCHWPGroup006_RunNum:'+e.__str__(),True,'SCHWPGroup006_RunNum')
                return None
        return main()

    def SCHWPGroupTotal001_GroupCost(self):
        def main():
            try:
                Plant001_ElecPrice=self.get_data(132,'Plant001_ElecPrice')
                SCHWPGroupTotal001_GroupPower=self.get_data(132,'SCHWPGroupTotal001_GroupPower')
                return Plant001_ElecPrice*SCHWPGroupTotal001_GroupPower/12
            except Exception as e:
                errorLog.writeLog(132,'SCHWPGroupTotal001_GroupCost:'+e.__str__(),True,'SCHWPGroupTotal001_GroupCost')
                return None
        return main()

    def SCHWPGroupTotal001_GroupCostH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'SCHWPGroupTotal001_GroupCost',1,'m5')
            except Exception as e:
                errorLog.writeLog(132,'SCHWPGroupTotal001_GroupCostH:'+e.__str__(),True,'SCHWPGroupTotal001_GroupCostH')
                return None
        return main()

    def SCHWPGroupTotal001_GroupEnergyH(self):
        def main():
            try:
                return self.calc_sum_hour(132,'SCHWPGroupTotal001_GroupPower',1/12.0,'m5')
            except Exception as e:
                errorLog.writeLog(132,'SCHWPGroupTotal001_GroupEnergyH:'+e.__str__(),True,'SCHWPGroupTotal001_GroupEnergyH')
                return None
        return main()

    def SCHWPGroupTotal001_GroupPower(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['SCHWPGroup001_GroupPower','SCHWPGroup002_GroupPower','SCHWPGroup003_GroupPower','SCHWPGroup004_GroupPower','SCHWPGroup005_GroupPower','SCHWPGroup006_GroupPower'])
            except Exception as e:
                errorLog.writeLog(132,'SCHWPGroupTotal001_GroupPower:'+e.__str__(),True,'SCHWPGroupTotal001_GroupPower')
                return None
        return main()

    def SCHWPGroupTotal001_RunNum(self):
        def main():
            try:
                return self.calc_sum_in_points(132,['SCHWPGroup001_RunNum','SCHWPGroup002_RunNum','SCHWPGroup003_RunNum','SCHWPGroup004_RunNum','SCHWPGroup005_RunNum','SCHWPGroup006_RunNum'])
            except Exception as e:
                errorLog.writeLog(132,'SCHWPGroupTotal001_RunNum:'+e.__str__(),True,'SCHWPGroupTotal001_RunNum')
                return None
        return main()

    def SSL_SCHWP001_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB11.Value')
                return [int(str(bin(int(v)))[-2]) if len(str(bin(int(v))))>=4 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'SSL_SCHWP001_PumpOnOff_01:'+e.__str__(),True,'SSL_SCHWP001_PumpOnOff_01')
                return None
        return main()

    def SSL_SCHWP001_PumpPower(self):
        def main():
            try:
                SSL_SCHWP001_PumpVSDFreq_01=self.get_data(132,'SSL_SCHWP001_PumpVSDFreq_01')
                SSL_SCHWP001_PumpOnOff_01=self.get_data(132,'SSL_SCHWP001_PumpOnOff_01')
                return (SSL_SCHWP001_PumpVSDFreq_01/50)**2*37*SSL_SCHWP001_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'SSL_SCHWP001_PumpPower:'+e.__str__(),True,'SSL_SCHWP001_PumpPower')
                return None
        return main()

    def SSL_SCHWP002_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB10.Value')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'SSL_SCHWP002_PumpOnOff_01:'+e.__str__(),True,'SSL_SCHWP002_PumpOnOff_01')
                return None
        return main()

    def SSL_SCHWP002_PumpPower(self):
        def main():
            try:
                SSL_SCHWP002_PumpVSDFreq_01=self.get_data(132,'SSL_SCHWP002_PumpVSDFreq_01')
                SSL_SCHWP002_PumpOnOff_01=self.get_data(132,'SSL_SCHWP002_PumpOnOff_01')
                return (SSL_SCHWP002_PumpVSDFreq_01/50)**2*37*SSL_SCHWP002_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'SSL_SCHWP002_PumpPower:'+e.__str__(),True,'SSL_SCHWP002_PumpPower')
                return None
        return main()

    def SSL_SCHWP003_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB10.Value')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'SSL_SCHWP003_PumpOnOff_01:'+e.__str__(),True,'SSL_SCHWP003_PumpOnOff_01')
                return None
        return main()

    def SSL_SCHWP003_PumpPower(self):
        def main():
            try:
                SSL_SCHWP003_PumpVSDFreq_01=self.get_data(132,'SSL_SCHWP003_PumpVSDFreq_01')
                SSL_SCHWP003_PumpOnOff_01=self.get_data(132,'SSL_SCHWP003_PumpOnOff_01')
                return (SSL_SCHWP003_PumpVSDFreq_01/50)**2*37*SSL_SCHWP003_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'SSL_SCHWP003_PumpPower:'+e.__str__(),True,'SSL_SCHWP003_PumpPower')
                return None
        return main()

    def SSL_SCHWP004_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB10.Value')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'SSL_SCHWP004_PumpOnOff_01:'+e.__str__(),True,'SSL_SCHWP004_PumpOnOff_01')
                return None
        return main()

    def SSL_SCHWP004_PumpPower(self):
        def main():
            try:
                SSL_SCHWP004_PumpVSDFreq_01=self.get_data(132,'SSL_SCHWP004_PumpVSDFreq_01')
                SSL_SCHWP004_PumpOnOff_01=self.get_data(132,'SSL_SCHWP004_PumpOnOff_01')
                return (SSL_SCHWP004_PumpVSDFreq_01/50)**2*37*SSL_SCHWP004_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'SSL_SCHWP004_PumpPower:'+e.__str__(),True,'SSL_SCHWP004_PumpPower')
                return None
        return main()

    def ST_SCHWP001_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB6.Value')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'ST_SCHWP001_PumpOnOff_01:'+e.__str__(),True,'ST_SCHWP001_PumpOnOff_01')
                return None
        return main()

    def ST_SCHWP001_PumpPower(self):
        def main():
            try:
                ST_SCHWP001_PumpVSDFreq_01=self.get_data(132,'ST_SCHWP001_PumpVSDFreq_01')
                ST_SCHWP001_PumpOnOff_01=self.get_data(132,'ST_SCHWP001_PumpOnOff_01')
                return (ST_SCHWP001_PumpVSDFreq_01/50)**2*37*ST_SCHWP001_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'ST_SCHWP001_PumpPower:'+e.__str__(),True,'ST_SCHWP001_PumpPower')
                return None
        return main()

    def ST_SCHWP002_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB6.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'ST_SCHWP002_PumpOnOff_01:'+e.__str__(),True,'ST_SCHWP002_PumpOnOff_01')
                return None
        return main()

    def ST_SCHWP002_PumpPower(self):
        def main():
            try:
                ST_SCHWP002_PumpVSDFreq_01=self.get_data(132,'ST_SCHWP002_PumpVSDFreq_01')
                ST_SCHWP002_PumpOnOff_01=self.get_data(132,'ST_SCHWP002_PumpOnOff_01')
                return (ST_SCHWP002_PumpVSDFreq_01/50)**2*37*ST_SCHWP002_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'ST_SCHWP002_PumpPower:'+e.__str__(),True,'ST_SCHWP002_PumpPower')
                return None
        return main()

    def TSG_AHU0T101_CCValvePositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T101zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T101_CCValvePositionSet_01:'+e.__str__(),True,'TSG_AHU0T101_CCValvePositionSet_01')
                return None
        return main()

    def TSG_AHU0T101_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T101zhuangtaixinhao')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T101_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T101_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T101_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T101zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T101_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T101_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T102_CCValvePositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T102zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T102_CCValvePositionSet_01:'+e.__str__(),True,'TSG_AHU0T102_CCValvePositionSet_01')
                return None
        return main()

    def TSG_AHU0T102_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T102zhuangtaixinhao')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T102_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T102_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T102_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T102zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T102_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T102_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T103_CCValvePositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T103zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T103_CCValvePositionSet_01:'+e.__str__(),True,'TSG_AHU0T103_CCValvePositionSet_01')
                return None
        return main()

    def TSG_AHU0T103_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T103zhuangtaixinhao')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T103_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T103_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T103_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T103zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T103_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T103_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T104_CCValvePositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T104zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T104_CCValvePositionSet_01:'+e.__str__(),True,'TSG_AHU0T104_CCValvePositionSet_01')
                return None
        return main()

    def TSG_AHU0T104_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T104zhuangtaixinhao')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T104_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T104_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T104_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T104zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T104_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T104_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T105_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T105zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T105_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T105_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T105_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T105zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T105_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T105_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T201_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T201zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T201_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T201_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T201_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T201zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T201_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T201_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T202_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T202zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T202_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T202_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T202_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T202zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T202_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T202_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T203_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T203zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T203_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T203_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T203_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T203zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T203_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T203_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T204_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T204zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T204_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T204_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T204_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T204zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T204_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T204_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T205_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T205zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T205_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T205_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T205_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T205zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T205_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T205_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T206_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T206zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T206_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T206_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T206_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T206zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T206_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T206_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T207_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T207zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T207_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T207_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T207_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T207zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T207_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T207_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T208_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T208zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T208_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T208_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T208_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T208zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T208_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T208_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T301_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T301zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T301_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T301_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T301_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T301zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T301_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T301_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T302_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T302zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T302_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T302_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T302_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T302zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T302_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T302_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T303_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T303zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T303_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T303_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T303_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T303zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T303_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T303_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T304_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T304zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T304_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T304_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T304_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T304zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T304_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T304_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T305_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T305zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T305_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T305_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T305_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T305zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T305_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T305_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T306_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T306zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T306_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T306_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T306_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T306zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T306_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T306_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T307_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T307zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T307_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T307_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T307_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T307zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T307_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T307_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T308_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T308zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T308_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T308_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T308_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T308zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T308_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T308_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T401_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T401zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T401_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T401_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T401_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T401zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T401_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T401_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T402_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T402zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T402_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T402_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T402_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T402zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T402_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T402_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T403_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T403zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T403_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T403_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T403_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T403zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T403_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T403_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T404_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T404zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T404_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T404_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T404_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T404zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T404_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T404_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T405_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T405zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T405_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T405_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T405_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T405zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T405_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T405_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T406_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T406zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T406_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T406_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T406_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T406zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T406_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T406_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T407_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T407zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T407_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T407_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T407_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T407zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T407_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T407_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T408_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T408zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T408_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T408_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T408_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T408zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T408_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T408_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T501_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T501zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T501_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T501_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T501_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T501zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T501_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T501_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T502_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T502zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T502_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T502_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T502_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T502zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T502_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T502_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T503_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T503zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T503_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T503_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T503_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T503zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T503_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T503_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T504_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T504zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T504_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T504_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T504_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T504zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T504_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T504_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T505_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T505zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T505_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T505_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T505_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T505zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T505_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T505_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T506_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T506zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T506_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T506_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T506_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T506zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T506_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T506_UnitOnOff_01')
                return None
        return main()

    def TSG_AHU0T507_SADamperPositionSet_01(self):
        def main():
            try:
                v=self.get_data(132,'T507zhuangtaixinhao')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T507_SADamperPositionSet_01:'+e.__str__(),True,'TSG_AHU0T507_SADamperPositionSet_01')
                return None
        return main()

    def TSG_AHU0T507_UnitOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'T507zhuangtaixinhao')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_AHU0T507_UnitOnOff_01:'+e.__str__(),True,'TSG_AHU0T507_UnitOnOff_01')
                return None
        return main()

    def TSG_SCHWP001_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB7.Value')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_SCHWP001_PumpOnOff_01:'+e.__str__(),True,'TSG_SCHWP001_PumpOnOff_01')
                return None
        return main()

    def TSG_SCHWP001_PumpPower(self):
        def main():
            try:
                TSG_SCHWP001_PumpVSDFreq_01=self.get_data(132,'TSG_SCHWP001_PumpVSDFreq_01')
                TSG_SCHWP001_PumpOnOff_01=self.get_data(132,'TSG_SCHWP001_PumpOnOff_01')
                return (TSG_SCHWP001_PumpVSDFreq_01/50)**2*30*TSG_SCHWP001_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'TSG_SCHWP001_PumpPower:'+e.__str__(),True,'TSG_SCHWP001_PumpPower')
                return None
        return main()

    def TSG_SCHWP002_PumpOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'IB7.Value')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'TSG_SCHWP002_PumpOnOff_01:'+e.__str__(),True,'TSG_SCHWP002_PumpOnOff_01')
                return None
        return main()

    def TSG_SCHWP002_PumpPower(self):
        def main():
            try:
                TSG_SCHWP002_PumpVSDFreq_01=self.get_data(132,'TSG_SCHWP002_PumpVSDFreq_01')
                TSG_SCHWP002_PumpOnOff_01=self.get_data(132,'TSG_SCHWP002_PumpOnOff_01')
                return (TSG_SCHWP002_PumpVSDFreq_01/50)**2*30*TSG_SCHWP002_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'TSG_SCHWP002_PumpPower:'+e.__str__(),True,'TSG_SCHWP002_PumpPower')
                return None
        return main()

    def Valve111_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB21.Value')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve111_ValveOpenStatus:'+e.__str__(),True,'Valve111_ValveOpenStatus')
                return None
        return main()

    def Valve112_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB20.Value')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve112_ValveOpenStatus:'+e.__str__(),True,'Valve112_ValveOpenStatus')
                return None
        return main()

    def Valve113_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB21.Value')
                return [int(str(bin(int(v)))[-5]) if len(str(bin(int(v))))>=7 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve113_ValveOpenStatus:'+e.__str__(),True,'Valve113_ValveOpenStatus')
                return None
        return main()

    def Valve114_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB20.Value')
                return [int(str(bin(int(v)))[-5]) if len(str(bin(int(v))))>=7 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve114_ValveOpenStatus:'+e.__str__(),True,'Valve114_ValveOpenStatus')
                return None
        return main()

    def Valve115_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB21.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve115_ValveOpenStatus:'+e.__str__(),True,'Valve115_ValveOpenStatus')
                return None
        return main()

    def Valve116_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB20.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve116_ValveOpenStatus:'+e.__str__(),True,'Valve116_ValveOpenStatus')
                return None
        return main()

    def Valve117_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB21.Value')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve117_ValveOpenStatus:'+e.__str__(),True,'Valve117_ValveOpenStatus')
                return None
        return main()

    def Valve118_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB20.Value')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve118_ValveOpenStatus:'+e.__str__(),True,'Valve118_ValveOpenStatus')
                return None
        return main()

    def Valve121_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB22.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve121_ValveOpenStatus:'+e.__str__(),True,'Valve121_ValveOpenStatus')
                return None
        return main()

    def Valve122_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB23.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve122_ValveOpenStatus:'+e.__str__(),True,'Valve122_ValveOpenStatus')
                return None
        return main()

    def Valve123_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB22.Value')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve123_ValveOpenStatus:'+e.__str__(),True,'Valve123_ValveOpenStatus')
                return None
        return main()

    def Valve124_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB23.Value')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve124_ValveOpenStatus:'+e.__str__(),True,'Valve124_ValveOpenStatus')
                return None
        return main()

    def Valve125_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB22.Value')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve125_ValveOpenStatus:'+e.__str__(),True,'Valve125_ValveOpenStatus')
                return None
        return main()

    def Valve126_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB23.Value')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve126_ValveOpenStatus:'+e.__str__(),True,'Valve126_ValveOpenStatus')
                return None
        return main()

    def Valve127_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB22.Value')
                return [int(str(bin(int(v)))[-5]) if len(str(bin(int(v))))>=7 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve127_ValveOpenStatus:'+e.__str__(),True,'Valve127_ValveOpenStatus')
                return None
        return main()

    def Valve128_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB23.Value')
                return [int(str(bin(int(v)))[-5]) if len(str(bin(int(v))))>=7 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve128_ValveOpenStatus:'+e.__str__(),True,'Valve128_ValveOpenStatus')
                return None
        return main()

    def Valve131_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB24.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve131_ValveOpenStatus:'+e.__str__(),True,'Valve131_ValveOpenStatus')
                return None
        return main()

    def Valve132_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB25.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve132_ValveOpenStatus:'+e.__str__(),True,'Valve132_ValveOpenStatus')
                return None
        return main()

    def Valve133_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB24.Value')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve133_ValveOpenStatus:'+e.__str__(),True,'Valve133_ValveOpenStatus')
                return None
        return main()

    def Valve134_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB25.Value')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve134_ValveOpenStatus:'+e.__str__(),True,'Valve134_ValveOpenStatus')
                return None
        return main()

    def Valve135_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB24.Value')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve135_ValveOpenStatus:'+e.__str__(),True,'Valve135_ValveOpenStatus')
                return None
        return main()

    def Valve136_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB25.Value')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve136_ValveOpenStatus:'+e.__str__(),True,'Valve136_ValveOpenStatus')
                return None
        return main()

    def Valve137_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB24.Value')
                return [int(str(bin(int(v)))[-5]) if len(str(bin(int(v))))>=7 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve137_ValveOpenStatus:'+e.__str__(),True,'Valve137_ValveOpenStatus')
                return None
        return main()

    def Valve138_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB25.Value')
                return [int(str(bin(int(v)))[-5]) if len(str(bin(int(v))))>=7 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve138_ValveOpenStatus:'+e.__str__(),True,'Valve138_ValveOpenStatus')
                return None
        return main()

    def Valve141_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB26.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve141_ValveOpenStatus:'+e.__str__(),True,'Valve141_ValveOpenStatus')
                return None
        return main()

    def Valve142_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB27.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve142_ValveOpenStatus:'+e.__str__(),True,'Valve142_ValveOpenStatus')
                return None
        return main()

    def Valve143_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB26.Value')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve143_ValveOpenStatus:'+e.__str__(),True,'Valve143_ValveOpenStatus')
                return None
        return main()

    def Valve144_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB27.Value')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve144_ValveOpenStatus:'+e.__str__(),True,'Valve144_ValveOpenStatus')
                return None
        return main()

    def Valve145_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB26.Value')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve145_ValveOpenStatus:'+e.__str__(),True,'Valve145_ValveOpenStatus')
                return None
        return main()

    def Valve146_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB27.Value')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve146_ValveOpenStatus:'+e.__str__(),True,'Valve146_ValveOpenStatus')
                return None
        return main()

    def Valve147_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB26.Value')
                return [int(str(bin(int(v)))[-5]) if len(str(bin(int(v))))>=7 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve147_ValveOpenStatus:'+e.__str__(),True,'Valve147_ValveOpenStatus')
                return None
        return main()

    def Valve148_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB27.Value')
                return [int(str(bin(int(v)))[-5]) if len(str(bin(int(v))))>=7 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve148_ValveOpenStatus:'+e.__str__(),True,'Valve148_ValveOpenStatus')
                return None
        return main()

    def Valve221_ValveCloseStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB13.Value')
                return [int(str(bin(int(v)))[-2]) if len(str(bin(int(v))))>=4 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve221_ValveCloseStatus:'+e.__str__(),True,'Valve221_ValveCloseStatus')
                return None
        return main()

    def Valve221_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB13.Value')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve221_ValveOpenStatus:'+e.__str__(),True,'Valve221_ValveOpenStatus')
                return None
        return main()

    def Valve222_ValveCloseStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB13.Value')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve222_ValveCloseStatus:'+e.__str__(),True,'Valve222_ValveCloseStatus')
                return None
        return main()

    def Valve222_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB13.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve222_ValveOpenStatus:'+e.__str__(),True,'Valve222_ValveOpenStatus')
                return None
        return main()

    def Valve223_ValveCloseStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB13.Value')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve223_ValveCloseStatus:'+e.__str__(),True,'Valve223_ValveCloseStatus')
                return None
        return main()

    def Valve223_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB13.Value')
                return [int(str(bin(int(v)))[-5]) if len(str(bin(int(v))))>=7 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve223_ValveOpenStatus:'+e.__str__(),True,'Valve223_ValveOpenStatus')
                return None
        return main()

    def Valve224_ValveCloseStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB13.Value')
                return [int(str(bin(int(v)))[-8]) if len(str(bin(int(v))))>=10 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve224_ValveCloseStatus:'+e.__str__(),True,'Valve224_ValveCloseStatus')
                return None
        return main()

    def Valve224_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB13.Value')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve224_ValveOpenStatus:'+e.__str__(),True,'Valve224_ValveOpenStatus')
                return None
        return main()

    def Valve231_ValveCloseStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB14.Value')
                return [int(str(bin(int(v)))[-2]) if len(str(bin(int(v))))>=4 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve231_ValveCloseStatus:'+e.__str__(),True,'Valve231_ValveCloseStatus')
                return None
        return main()

    def Valve231_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB14.Value')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve231_ValveOpenStatus:'+e.__str__(),True,'Valve231_ValveOpenStatus')
                return None
        return main()

    def Valve232_ValveCloseStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB14.Value')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve232_ValveCloseStatus:'+e.__str__(),True,'Valve232_ValveCloseStatus')
                return None
        return main()

    def Valve232_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB14.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve232_ValveOpenStatus:'+e.__str__(),True,'Valve232_ValveOpenStatus')
                return None
        return main()

    def Valve233_ValveCloseStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB14.Value')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve233_ValveCloseStatus:'+e.__str__(),True,'Valve233_ValveCloseStatus')
                return None
        return main()

    def Valve233_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB14.Value')
                return [int(str(bin(int(v)))[-5]) if len(str(bin(int(v))))>=7 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve233_ValveOpenStatus:'+e.__str__(),True,'Valve233_ValveOpenStatus')
                return None
        return main()

    def Valve234_ValveCloseStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB14.Value')
                return [int(str(bin(int(v)))[-8]) if len(str(bin(int(v))))>=10 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve234_ValveCloseStatus:'+e.__str__(),True,'Valve234_ValveCloseStatus')
                return None
        return main()

    def Valve234_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB14.Value')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve234_ValveOpenStatus:'+e.__str__(),True,'Valve234_ValveOpenStatus')
                return None
        return main()

    def Valve241_ValveCloseStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB15.Value')
                return [int(str(bin(int(v)))[-2]) if len(str(bin(int(v))))>=4 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve241_ValveCloseStatus:'+e.__str__(),True,'Valve241_ValveCloseStatus')
                return None
        return main()

    def Valve241_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB15.Value')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve241_ValveOpenStatus:'+e.__str__(),True,'Valve241_ValveOpenStatus')
                return None
        return main()

    def Valve242_ValveCloseStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB15.Value')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve242_ValveCloseStatus:'+e.__str__(),True,'Valve242_ValveCloseStatus')
                return None
        return main()

    def Valve242_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB15.Value')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve242_ValveOpenStatus:'+e.__str__(),True,'Valve242_ValveOpenStatus')
                return None
        return main()

    def Valve243_ValveCloseStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB15.Value')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve243_ValveCloseStatus:'+e.__str__(),True,'Valve243_ValveCloseStatus')
                return None
        return main()

    def Valve243_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB15.Value')
                return [int(str(bin(int(v)))[-5]) if len(str(bin(int(v))))>=7 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve243_ValveOpenStatus:'+e.__str__(),True,'Valve243_ValveOpenStatus')
                return None
        return main()

    def Valve244_ValveCloseStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB15.Value')
                return [int(str(bin(int(v)))[-8]) if len(str(bin(int(v))))>=10 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve244_ValveCloseStatus:'+e.__str__(),True,'Valve244_ValveCloseStatus')
                return None
        return main()

    def Valve244_ValveOpenStatus(self):
        def main():
            try:
                v=self.get_data(132,'IB15.Value')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'Valve244_ValveOpenStatus:'+e.__str__(),True,'Valve244_ValveOpenStatus')
                return None
        return main()

    def XZL_AHU0X01_RAFanOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'Xingzhenglouzhuangtai01')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'XZL_AHU0X01_RAFanOnOff_01:'+e.__str__(),True,'XZL_AHU0X01_RAFanOnOff_01')
                return None
        return main()

    def XZL_AHU0X01_SAFanOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'Xingzhenglouzhuangtai01')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'XZL_AHU0X01_SAFanOnOff_01:'+e.__str__(),True,'XZL_AHU0X01_SAFanOnOff_01')
                return None
        return main()

    def XZL_PAU002_RAFanOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'Xingzhenglouzhuangtai02')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'XZL_PAU002_RAFanOnOff_01:'+e.__str__(),True,'XZL_PAU002_RAFanOnOff_01')
                return None
        return main()

    def XZL_PAU002_SAFanOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'Xingzhenglouzhuangtai02')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'XZL_PAU002_SAFanOnOff_01:'+e.__str__(),True,'XZL_PAU002_SAFanOnOff_01')
                return None
        return main()

    def XZL_PAU003_RAFanOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'Xingzhenglouzhuangtai03')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'XZL_PAU003_RAFanOnOff_01:'+e.__str__(),True,'XZL_PAU003_RAFanOnOff_01')
                return None
        return main()

    def XZL_PAU003_SAFanOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'Xingzhenglouzhuangtai03')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'XZL_PAU003_SAFanOnOff_01:'+e.__str__(),True,'XZL_PAU003_SAFanOnOff_01')
                return None
        return main()

    def XZL_PAU004_RAFanOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'Xingzhenglouzhuangtai04')
                return [int(str(bin(int(v)))[-2]) if len(str(bin(int(v))))>=4 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'XZL_PAU004_RAFanOnOff_01:'+e.__str__(),True,'XZL_PAU004_RAFanOnOff_01')
                return None
        return main()

    def XZL_PAU004_SAFanOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'Xingzhenglouzhuangtai03')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'XZL_PAU004_SAFanOnOff_01:'+e.__str__(),True,'XZL_PAU004_SAFanOnOff_01')
                return None
        return main()

    def XZL_PAU005_RAFanOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'Xingzhenglouzhuangtai04')
                return [int(str(bin(int(v)))[-8]) if len(str(bin(int(v))))>=10 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'XZL_PAU005_RAFanOnOff_01:'+e.__str__(),True,'XZL_PAU005_RAFanOnOff_01')
                return None
        return main()

    def XZL_PAU005_SAFanOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'Xingzhenglouzhuangtai04')
                return [int(str(bin(int(v)))[-5]) if len(str(bin(int(v))))>=7 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'XZL_PAU005_SAFanOnOff_01:'+e.__str__(),True,'XZL_PAU005_SAFanOnOff_01')
                return None
        return main()

    def XZL_PAU006_RAFanOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'Xingzhenglouzhuangtai05')
                return [int(str(bin(int(v)))[-6]) if len(str(bin(int(v))))>=8 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'XZL_PAU006_RAFanOnOff_01:'+e.__str__(),True,'XZL_PAU006_RAFanOnOff_01')
                return None
        return main()

    def XZL_PAU006_SAFanOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'Xingzhenglouzhuangtai05')
                return [int(str(bin(int(v)))[-3]) if len(str(bin(int(v))))>=5 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'XZL_PAU006_SAFanOnOff_01:'+e.__str__(),True,'XZL_PAU006_SAFanOnOff_01')
                return None
        return main()

    def XZL_PAU007_RAFanOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'Xingzhenglouzhuangtai06')
                return [int(str(bin(int(v)))[-4]) if len(str(bin(int(v))))>=6 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'XZL_PAU007_RAFanOnOff_01:'+e.__str__(),True,'XZL_PAU007_RAFanOnOff_01')
                return None
        return main()

    def XZL_PAU007_SAFanOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'Xingzhenglouzhuangtai06')
                return [int(str(bin(int(v)))[-1]) if len(str(bin(int(v))))>=3 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'XZL_PAU007_SAFanOnOff_01:'+e.__str__(),True,'XZL_PAU007_SAFanOnOff_01')
                return None
        return main()

    def XZL_PAU008_RAFanOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'Xingzhenglouzhuangtai07')
                return [int(str(bin(int(v)))[-2]) if len(str(bin(int(v))))>=4 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'XZL_PAU008_RAFanOnOff_01:'+e.__str__(),True,'XZL_PAU008_RAFanOnOff_01')
                return None
        return main()

    def XZL_PAU008_SAFanOnOff_01(self):
        def main():
            try:
                v=self.get_data(132,'Xingzhenglouzhuangtai06')
                return [int(str(bin(int(v)))[-7]) if len(str(bin(int(v))))>=9 else 0 ]
            except Exception as e:
                errorLog.writeLog(132,'XZL_PAU008_SAFanOnOff_01:'+e.__str__(),True,'XZL_PAU008_SAFanOnOff_01')
                return None
        return main()

    def XZL_SCHWP001_PumpPower(self):
        def main():
            try:
                XZL_SCHWP001_PumpVSDFreq_01=self.get_data(132,'XZL_SCHWP001_PumpVSDFreq_01')
                XZL_SCHWP001_PumpOnOff_01=self.get_data(132,'XZL_SCHWP001_PumpOnOff_01')
                return (XZL_SCHWP001_PumpVSDFreq_01/50)**2*22*XZL_SCHWP001_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'XZL_SCHWP001_PumpPower:'+e.__str__(),True,'XZL_SCHWP001_PumpPower')
                return None
        return main()

    def XZL_SCHWP002_PumpPower(self):
        def main():
            try:
                XZL_SCHWP002_PumpVSDFreq_01=self.get_data(132,'XZL_SCHWP002_PumpVSDFreq_01')
                XZL_SCHWP002_PumpOnOff_01=self.get_data(132,'XZL_SCHWP002_PumpOnOff_01')
                return (XZL_SCHWP002_PumpVSDFreq_01/50)**2*22*XZL_SCHWP002_PumpOnOff_01
            except Exception as e:
                errorLog.writeLog(132,'XZL_SCHWP002_PumpPower:'+e.__str__(),True,'XZL_SCHWP002_PumpPower')
                return None
        return main()

    def action(self):
        rt = True
        name_list = []
        value_list = []
        try:
            temp = self.GHX002_ValveCloseStatus_01()
            if temp is None:
                temp = 'Null'
            name_list.append('GHX002_ValveCloseStatus_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['GHX002_ValveCloseStatus_01'], [temp])
            temp = self.TSG_AHU0T502_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T502_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T502_SADamperPositionSet_01'], [temp])
            temp = self.CWP202_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('CWP202_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWP202_PumpPower'], [temp])
            temp = self.Valve222_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve222_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve222_ValveOpenStatus'], [temp])
            temp = self.JYZX_AHU0J04_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J04_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J04_UnitOnOff_01'], [temp])
            temp = self.SCHWPGroup006_RunNum()
            if temp is None:
                temp = 'Null'
            name_list.append('SCHWPGroup006_RunNum')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SCHWPGroup006_RunNum'], [temp])
            temp = self.TSG_AHU0T506_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T506_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T506_UnitOnOff_01'], [temp])
            temp = self.TSG_AHU0T504_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T504_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T504_SADamperPositionSet_01'], [temp])
            temp = self.SCHWPGroupTotal001_RunNum()
            if temp is None:
                temp = 'Null'
            name_list.append('SCHWPGroupTotal001_RunNum')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SCHWPGroupTotal001_RunNum'], [temp])
            temp = self.KYL_SCHWP001_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('KYL_SCHWP001_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['KYL_SCHWP001_PumpOnOff_01'], [temp])
            temp = self.CTGroupTotal001_GroupPower()
            if temp is None:
                temp = 'Null'
            name_list.append('CTGroupTotal001_GroupPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CTGroupTotal001_GroupPower'], [temp])
            temp = self.JYZX_SCHWP002_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_SCHWP002_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_SCHWP002_PumpPower'], [temp])
            temp = self.Valve223_ValveCloseStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve223_ValveCloseStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve223_ValveCloseStatus'], [temp])
            temp = self.Valve115_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve115_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve115_ValveOpenStatus'], [temp])
            temp = self.SCHWPGroup002_GroupPower()
            if temp is None:
                temp = 'Null'
            name_list.append('SCHWPGroup002_GroupPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SCHWPGroup002_GroupPower'], [temp])
            temp = self.Valve231_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve231_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve231_ValveOpenStatus'], [temp])
            temp = self.TSG_AHU0T403_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T403_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T403_SADamperPositionSet_01'], [temp])
            temp = self.XZL_PAU008_RAFanOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_PAU008_RAFanOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_PAU008_RAFanOnOff_01'], [temp])
            temp = self.Plant001_ElecPrice()
            if temp is None:
                temp = 'Null'
            name_list.append('Plant001_ElecPrice')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Plant001_ElecPrice'], [temp])
            temp = self.GHX001_ValveOpenStatus_01()
            if temp is None:
                temp = 'Null'
            name_list.append('GHX001_ValveOpenStatus_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['GHX001_ValveOpenStatus_01'], [temp])
            temp = self.CWP002_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('CWP002_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWP002_PumpPower'], [temp])
            temp = self.KYL_SCHWP002_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('KYL_SCHWP002_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['KYL_SCHWP002_PumpOnOff_01'], [temp])
            temp = self.TSG_AHU0T305_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T305_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T305_UnitOnOff_01'], [temp])
            temp = self.Valve147_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve147_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve147_ValveOpenStatus'], [temp])
            temp = self.Plant001_Load()
            if temp is None:
                temp = 'Null'
            name_list.append('Plant001_Load')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Plant001_Load'], [temp])
            temp = self.SSL_SCHWP003_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('SSL_SCHWP003_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SSL_SCHWP003_PumpOnOff_01'], [temp])
            temp = self.TSG_SCHWP001_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_SCHWP001_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_SCHWP001_PumpOnOff_01'], [temp])
            temp = self.Valve221_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve221_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve221_ValveOpenStatus'], [temp])
            temp = self.TSG_AHU0T207_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T207_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T207_UnitOnOff_01'], [temp])
            temp = self.ST_SCHWP001_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('ST_SCHWP001_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['ST_SCHWP001_PumpOnOff_01'], [temp])
            temp = self.KYL_SCHWP001_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('KYL_SCHWP001_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['KYL_SCHWP001_PumpPower'], [temp])
            temp = self.JYZX_AHU0J02_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J02_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J02_SADamperPositionSet_01'], [temp])
            temp = self.HWPGroupTotal001_GroupCost()
            if temp is None:
                temp = 'Null'
            name_list.append('HWPGroupTotal001_GroupCost')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HWPGroupTotal001_GroupCost'], [temp])
            temp = self.XZL_PAU002_SAFanOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_PAU002_SAFanOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_PAU002_SAFanOnOff_01'], [temp])
            temp = self.JYZX_AHU0J08_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J08_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J08_UnitOnOff_01'], [temp])
            temp = self.Valve232_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve232_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve232_ValveOpenStatus'], [temp])
            temp = self.CWPGroup001_GroupCost()
            if temp is None:
                temp = 'Null'
            name_list.append('CWPGroup001_GroupCost')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWPGroup001_GroupCost'], [temp])
            temp = self.HWPGroupTotal001_GroupCostH()
            if temp is None:
                temp = 'Null'
            name_list.append('HWPGroupTotal001_GroupCostH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HWPGroupTotal001_GroupCostH'], [temp])
            temp = self.CWP003_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('CWP003_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWP003_PumpOnOff_01'], [temp])
            temp = self.CWPGroup001_GroupEnergyH()
            if temp is None:
                temp = 'Null'
            name_list.append('CWPGroup001_GroupEnergyH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWPGroup001_GroupEnergyH'], [temp])
            temp = self.TSG_AHU0T101_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T101_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T101_UnitOnOff_01'], [temp])
            temp = self.SCHWPGroup005_GroupPower()
            if temp is None:
                temp = 'Null'
            name_list.append('SCHWPGroup005_GroupPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SCHWPGroup005_GroupPower'], [temp])
            temp = self.JYZX_AHU0J06_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J06_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J06_SADamperPositionSet_01'], [temp])
            temp = self.XZL_PAU002_RAFanOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_PAU002_RAFanOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_PAU002_RAFanOnOff_01'], [temp])
            temp = self.TSG_AHU0T208_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T208_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T208_UnitOnOff_01'], [temp])
            temp = self.CWPGroup002_GroupCost()
            if temp is None:
                temp = 'Null'
            name_list.append('CWPGroup002_GroupCost')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWPGroup002_GroupCost'], [temp])
            temp = self.Valve121_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve121_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve121_ValveOpenStatus'], [temp])
            temp = self.ChGroupTotal001_GroupCost()
            if temp is None:
                temp = 'Null'
            name_list.append('ChGroupTotal001_GroupCost')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['ChGroupTotal001_GroupCost'], [temp])
            temp = self.TSG_AHU0T307_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T307_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T307_UnitOnOff_01'], [temp])
            temp = self.PCHWP002_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHWP002_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHWP002_PumpOnOff_01'], [temp])
            temp = self.SCHWPGroupTotal001_GroupEnergyH()
            if temp is None:
                temp = 'Null'
            name_list.append('SCHWPGroupTotal001_GroupEnergyH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SCHWPGroupTotal001_GroupEnergyH'], [temp])
            temp = self.TSG_AHU0T304_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T304_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T304_UnitOnOff_01'], [temp])
            temp = self.TSG_AHU0T402_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T402_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T402_UnitOnOff_01'], [temp])
            temp = self.Valve116_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve116_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve116_ValveOpenStatus'], [temp])
            temp = self.CWP003_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('CWP003_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWP003_PumpPower'], [temp])
            temp = self.CWP004_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('CWP004_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWP004_PumpOnOff_01'], [temp])
            temp = self.JYZX_AHU0J10_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J10_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J10_UnitOnOff_01'], [temp])
            temp = self.CWPGroup001_RunNum()
            if temp is None:
                temp = 'Null'
            name_list.append('CWPGroup001_RunNum')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWPGroup001_RunNum'], [temp])
            temp = self.HWPGroup001_RunNum()
            if temp is None:
                temp = 'Null'
            name_list.append('HWPGroup001_RunNum')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HWPGroup001_RunNum'], [temp])
            temp = self.CWPGroup002_RunNum()
            if temp is None:
                temp = 'Null'
            name_list.append('CWPGroup002_RunNum')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWPGroup002_RunNum'], [temp])
            temp = self.TSG_AHU0T306_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T306_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T306_SADamperPositionSet_01'], [temp])
            temp = self.SCHWPGroup001_GroupPower()
            if temp is None:
                temp = 'Null'
            name_list.append('SCHWPGroup001_GroupPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SCHWPGroup001_GroupPower'], [temp])
            temp = self.Valve135_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve135_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve135_ValveOpenStatus'], [temp])
            temp = self.TSG_AHU0T306_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T306_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T306_UnitOnOff_01'], [temp])
            temp = self.XZL_PAU003_RAFanOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_PAU003_RAFanOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_PAU003_RAFanOnOff_01'], [temp])
            temp = self.JYZX_AHU0J01_CCValvePositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J01_CCValvePositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J01_CCValvePositionSet_01'], [temp])
            temp = self.Valve146_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve146_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve146_ValveOpenStatus'], [temp])
            temp = self.Valve137_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve137_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve137_ValveOpenStatus'], [temp])
            temp = self.XZL_PAU005_SAFanOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_PAU005_SAFanOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_PAU005_SAFanOnOff_01'], [temp])
            temp = self.XZL_PAU005_RAFanOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_PAU005_RAFanOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_PAU005_RAFanOnOff_01'], [temp])
            temp = self.CT001_CTOnOff()
            if temp is None:
                temp = 'Null'
            name_list.append('CT001_CTOnOff')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CT001_CTOnOff'], [temp])
            temp = self.CT002_CTPower()
            if temp is None:
                temp = 'Null'
            name_list.append('CT002_CTPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CT002_CTPower'], [temp])
            temp = self.CWP101_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('CWP101_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWP101_PumpPower'], [temp])
            temp = self.JYZX_AHU0J08_CCValvePositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J08_CCValvePositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J08_CCValvePositionSet_01'], [temp])
            temp = self.Plant001_Eff()
            if temp is None:
                temp = 'Null'
            name_list.append('Plant001_Eff')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Plant001_Eff'], [temp])
            temp = self.HWP002_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('HWP002_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HWP002_PumpPower'], [temp])
            temp = self.HWPGroupTotal001_GroupEnergyH()
            if temp is None:
                temp = 'Null'
            name_list.append('HWPGroupTotal001_GroupEnergyH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HWPGroupTotal001_GroupEnergyH'], [temp])
            temp = self.JYZX_AHU0J10_CCValvePositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J10_CCValvePositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J10_CCValvePositionSet_01'], [temp])
            temp = self.PCHWP001_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHWP001_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHWP001_PumpOnOff_01'], [temp])
            temp = self.Valve244_ValveCloseStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve244_ValveCloseStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve244_ValveCloseStatus'], [temp])
            temp = self.PCHWP004_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHWP004_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHWP004_PumpOnOff_01'], [temp])
            temp = self.SCHWPGroup004_RunNum()
            if temp is None:
                temp = 'Null'
            name_list.append('SCHWPGroup004_RunNum')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SCHWPGroup004_RunNum'], [temp])
            temp = self.CT004_CTPower()
            if temp is None:
                temp = 'Null'
            name_list.append('CT004_CTPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CT004_CTPower'], [temp])
            temp = self.CWPGroupTotal001_GroupPower()
            if temp is None:
                temp = 'Null'
            name_list.append('CWPGroupTotal001_GroupPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWPGroupTotal001_GroupPower'], [temp])
            temp = self.JYZX_AHU0J03_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J03_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J03_UnitOnOff_01'], [temp])
            temp = self.GHX003_ValveCloseStatus_01()
            if temp is None:
                temp = 'Null'
            name_list.append('GHX003_ValveCloseStatus_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['GHX003_ValveCloseStatus_01'], [temp])
            temp = self.Valve122_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve122_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve122_ValveOpenStatus'], [temp])
            temp = self.Valve222_ValveCloseStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve222_ValveCloseStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve222_ValveCloseStatus'], [temp])
            temp = self.SSL_SCHWP001_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('SSL_SCHWP001_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SSL_SCHWP001_PumpOnOff_01'], [temp])
            temp = self.SCHWPGroup002_RunNum()
            if temp is None:
                temp = 'Null'
            name_list.append('SCHWPGroup002_RunNum')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SCHWPGroup002_RunNum'], [temp])
            temp = self.TSG_AHU0T207_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T207_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T207_SADamperPositionSet_01'], [temp])
            temp = self.Plant001_GroupLoadH()
            if temp is None:
                temp = 'Null'
            name_list.append('Plant001_GroupLoadH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Plant001_GroupLoadH'], [temp])
            temp = self.Valve141_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve141_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve141_ValveOpenStatus'], [temp])
            temp = self.Plant001_COP()
            if temp is None:
                temp = 'Null'
            name_list.append('Plant001_COP')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Plant001_COP'], [temp])
            temp = self.JYZX_AHU0J06_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J06_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J06_UnitOnOff_01'], [temp])
            temp = self.TSG_AHU0T404_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T404_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T404_SADamperPositionSet_01'], [temp])
            temp = self.Valve134_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve134_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve134_ValveOpenStatus'], [temp])
            temp = self.TSG_AHU0T507_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T507_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T507_UnitOnOff_01'], [temp])
            temp = self.TSG_AHU0T308_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T308_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T308_UnitOnOff_01'], [temp])
            temp = self.CT001_CTPower()
            if temp is None:
                temp = 'Null'
            name_list.append('CT001_CTPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CT001_CTPower'], [temp])
            temp = self.HWPGroup002_GroupPower()
            if temp is None:
                temp = 'Null'
            name_list.append('HWPGroup002_GroupPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HWPGroup002_GroupPower'], [temp])
            temp = self.Valve148_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve148_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve148_ValveOpenStatus'], [temp])
            temp = self.TSG_AHU0T202_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T202_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T202_UnitOnOff_01'], [temp])
            temp = self.TSG_AHU0T501_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T501_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T501_UnitOnOff_01'], [temp])
            temp = self.PCHWP002_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHWP002_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHWP002_PumpPower'], [temp])
            temp = self.Valve138_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve138_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve138_ValveOpenStatus'], [temp])
            temp = self.JYZX_AHU0J08_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J08_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J08_SADamperPositionSet_01'], [temp])
            temp = self.CT003_CTOnOff()
            if temp is None:
                temp = 'Null'
            name_list.append('CT003_CTOnOff')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CT003_CTOnOff'], [temp])
            temp = self.XZL_PAU007_SAFanOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_PAU007_SAFanOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_PAU007_SAFanOnOff_01'], [temp])
            temp = self.JYZX_AHU0J04_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J04_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J04_SADamperPositionSet_01'], [temp])
            temp = self.Valve112_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve112_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve112_ValveOpenStatus'], [temp])
            temp = self.TSG_SCHWP001_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_SCHWP001_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_SCHWP001_PumpPower'], [temp])
            temp = self.Valve224_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve224_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve224_ValveOpenStatus'], [temp])
            temp = self.HW001_ValveCloseStatus_01()
            if temp is None:
                temp = 'Null'
            name_list.append('HW001_ValveCloseStatus_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HW001_ValveCloseStatus_01'], [temp])
            temp = self.JYZX_AHU0J02_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J02_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J02_UnitOnOff_01'], [temp])
            temp = self.CWPGroupTotal001_GroupCostH()
            if temp is None:
                temp = 'Null'
            name_list.append('CWPGroupTotal001_GroupCostH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWPGroupTotal001_GroupCostH'], [temp])
            temp = self.JYZX_AHU0J07_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J07_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J07_UnitOnOff_01'], [temp])
            temp = self.Valve243_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve243_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve243_ValveOpenStatus'], [temp])
            temp = self.ST_SCHWP001_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('ST_SCHWP001_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['ST_SCHWP001_PumpPower'], [temp])
            temp = self.SCHWPGroupTotal001_GroupPower()
            if temp is None:
                temp = 'Null'
            name_list.append('SCHWPGroupTotal001_GroupPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SCHWPGroupTotal001_GroupPower'], [temp])
            temp = self.TSG_AHU0T102_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T102_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T102_UnitOnOff_01'], [temp])
            temp = self.TSG_AHU0T401_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T401_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T401_UnitOnOff_01'], [temp])
            temp = self.SSL_SCHWP004_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('SSL_SCHWP004_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SSL_SCHWP004_PumpPower'], [temp])
            temp = self.TSG_AHU0T403_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T403_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T403_UnitOnOff_01'], [temp])
            temp = self.HWPGroupTotal001_RunNum()
            if temp is None:
                temp = 'Null'
            name_list.append('HWPGroupTotal001_RunNum')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HWPGroupTotal001_RunNum'], [temp])
            temp = self.Valve123_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve123_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve123_ValveOpenStatus'], [temp])
            temp = self.JYZX_SCHWP002_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_SCHWP002_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_SCHWP002_PumpOnOff_01'], [temp])
            temp = self.CTGroupTotal001_RunNum()
            if temp is None:
                temp = 'Null'
            name_list.append('CTGroupTotal001_RunNum')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CTGroupTotal001_RunNum'], [temp])
            temp = self.TSG_AHU0T404_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T404_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T404_UnitOnOff_01'], [temp])
            temp = self.GHX004_ValveCloseStatus_01()
            if temp is None:
                temp = 'Null'
            name_list.append('GHX004_ValveCloseStatus_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['GHX004_ValveCloseStatus_01'], [temp])
            temp = self.TSG_AHU0T104_CCValvePositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T104_CCValvePositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T104_CCValvePositionSet_01'], [temp])
            temp = self.CWP001_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('CWP001_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWP001_PumpPower'], [temp])
            temp = self.XZL_AHU0X01_RAFanOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_AHU0X01_RAFanOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_AHU0X01_RAFanOnOff_01'], [temp])
            temp = self.Ch003_ChPower()
            if temp is None:
                temp = 'Null'
            name_list.append('Ch003_ChPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Ch003_ChPower'], [temp])
            temp = self.SSL_SCHWP003_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('SSL_SCHWP003_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SSL_SCHWP003_PumpPower'], [temp])
            temp = self.Valve143_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve143_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve143_ValveOpenStatus'], [temp])
            temp = self.PCHWP003_PumpFlow()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHWP003_PumpFlow')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHWP003_PumpFlow'], [temp])
            temp = self.Valve233_ValveCloseStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve233_ValveCloseStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve233_ValveCloseStatus'], [temp])
            temp = self.Ch002_ChPower()
            if temp is None:
                temp = 'Null'
            name_list.append('Ch002_ChPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Ch002_ChPower'], [temp])
            temp = self.SCHWPGroup004_GroupPower()
            if temp is None:
                temp = 'Null'
            name_list.append('SCHWPGroup004_GroupPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SCHWPGroup004_GroupPower'], [temp])
            temp = self.PCHWP003_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHWP003_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHWP003_PumpPower'], [temp])
            temp = self.SSL_SCHWP002_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('SSL_SCHWP002_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SSL_SCHWP002_PumpPower'], [temp])
            temp = self.Plant001_GroupCostH()
            if temp is None:
                temp = 'Null'
            name_list.append('Plant001_GroupCostH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Plant001_GroupCostH'], [temp])
            temp = self.JYZX_AHU0J03_CCValvePositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J03_CCValvePositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J03_CCValvePositionSet_01'], [temp])
            temp = self.CWP102_PumpOnOff_02()
            if temp is None:
                temp = 'Null'
            name_list.append('CWP102_PumpOnOff_02')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWP102_PumpOnOff_02'], [temp])
            temp = self.XZL_PAU004_RAFanOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_PAU004_RAFanOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_PAU004_RAFanOnOff_01'], [temp])
            temp = self.TSG_AHU0T105_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T105_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T105_UnitOnOff_01'], [temp])
            temp = self.TSG_AHU0T406_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T406_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T406_UnitOnOff_01'], [temp])
            temp = self.CWP201_PumpOnOff_02()
            if temp is None:
                temp = 'Null'
            name_list.append('CWP201_PumpOnOff_02')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWP201_PumpOnOff_02'], [temp])
            temp = self.Valve224_ValveCloseStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve224_ValveCloseStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve224_ValveCloseStatus'], [temp])
            temp = self.TSG_AHU0T503_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T503_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T503_SADamperPositionSet_01'], [temp])
            temp = self.Valve127_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve127_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve127_ValveOpenStatus'], [temp])
            temp = self.TSG_AHU0T406_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T406_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T406_SADamperPositionSet_01'], [temp])
            temp = self.HWPGroup001_GroupPower()
            if temp is None:
                temp = 'Null'
            name_list.append('HWPGroup001_GroupPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HWPGroup001_GroupPower'], [temp])
            temp = self.CWP202_PumpOnOff_02()
            if temp is None:
                temp = 'Null'
            name_list.append('CWP202_PumpOnOff_02')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWP202_PumpOnOff_02'], [temp])
            temp = self.TSG_SCHWP002_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_SCHWP002_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_SCHWP002_PumpOnOff_01'], [temp])
            temp = self.JYZX_AHU0J09_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J09_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J09_SADamperPositionSet_01'], [temp])
            temp = self.Valve131_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve131_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve131_ValveOpenStatus'], [temp])
            temp = self.TSG_AHU0T301_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T301_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T301_SADamperPositionSet_01'], [temp])
            temp = self.CWPGroup001_GroupPower()
            if temp is None:
                temp = 'Null'
            name_list.append('CWPGroup001_GroupPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWPGroup001_GroupPower'], [temp])
            temp = self.CT004_CTOnOff()
            if temp is None:
                temp = 'Null'
            name_list.append('CT004_CTOnOff')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CT004_CTOnOff'], [temp])
            temp = self.CWPGroupTotal001_RunNum()
            if temp is None:
                temp = 'Null'
            name_list.append('CWPGroupTotal001_RunNum')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWPGroupTotal001_RunNum'], [temp])
            temp = self.TSG_AHU0T104_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T104_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T104_UnitOnOff_01'], [temp])
            temp = self.TSG_AHU0T504_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T504_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T504_UnitOnOff_01'], [temp])
            temp = self.Ch001_ChPower()
            if temp is None:
                temp = 'Null'
            name_list.append('Ch001_ChPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Ch001_ChPower'], [temp])
            temp = self.GHX001_ValveCloseStatus_01()
            if temp is None:
                temp = 'Null'
            name_list.append('GHX001_ValveCloseStatus_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['GHX001_ValveCloseStatus_01'], [temp])
            temp = self.Valve234_ValveCloseStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve234_ValveCloseStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve234_ValveCloseStatus'], [temp])
            temp = self.TSG_AHU0T506_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T506_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T506_SADamperPositionSet_01'], [temp])
            temp = self.Valve234_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve234_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve234_ValveOpenStatus'], [temp])
            temp = self.TSG_AHU0T408_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T408_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T408_SADamperPositionSet_01'], [temp])
            temp = self.CWP001_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('CWP001_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWP001_PumpOnOff_01'], [temp])
            temp = self.SCHWPGroup001_RunNum()
            if temp is None:
                temp = 'Null'
            name_list.append('SCHWPGroup001_RunNum')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SCHWPGroup001_RunNum'], [temp])
            temp = self.TSG_AHU0T302_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T302_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T302_SADamperPositionSet_01'], [temp])
            temp = self.ChGroupTotal001_GroupEnergyH()
            if temp is None:
                temp = 'Null'
            name_list.append('ChGroupTotal001_GroupEnergyH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['ChGroupTotal001_GroupEnergyH'], [temp])
            temp = self.Ch004_ChPower()
            if temp is None:
                temp = 'Null'
            name_list.append('Ch004_ChPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Ch004_ChPower'], [temp])
            temp = self.ST_SCHWP002_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('ST_SCHWP002_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['ST_SCHWP002_PumpOnOff_01'], [temp])
            temp = self.CTGroupTotal001_GroupCost()
            if temp is None:
                temp = 'Null'
            name_list.append('CTGroupTotal001_GroupCost')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CTGroupTotal001_GroupCost'], [temp])
            temp = self.PCHWP003_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHWP003_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHWP003_PumpOnOff_01'], [temp])
            temp = self.Valve244_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve244_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve244_ValveOpenStatus'], [temp])
            temp = self.TSG_AHU0T308_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T308_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T308_SADamperPositionSet_01'], [temp])
            temp = self.CT002_CTOnOff()
            if temp is None:
                temp = 'Null'
            name_list.append('CT002_CTOnOff')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CT002_CTOnOff'], [temp])
            temp = self.Valve126_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve126_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve126_ValveOpenStatus'], [temp])
            temp = self.Valve125_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve125_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve125_ValveOpenStatus'], [temp])
            temp = self.TSG_AHU0T102_CCValvePositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T102_CCValvePositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T102_CCValvePositionSet_01'], [temp])
            temp = self.Valve145_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve145_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve145_ValveOpenStatus'], [temp])
            temp = self.ChGroupTotal001_GroupPower()
            if temp is None:
                temp = 'Null'
            name_list.append('ChGroupTotal001_GroupPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['ChGroupTotal001_GroupPower'], [temp])
            temp = self.JYZX_AHU0J01_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J01_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J01_SADamperPositionSet_01'], [temp])
            temp = self.Valve243_ValveCloseStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve243_ValveCloseStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve243_ValveCloseStatus'], [temp])
            temp = self.HWP001_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('HWP001_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HWP001_PumpPower'], [temp])
            temp = self.SSL_SCHWP002_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('SSL_SCHWP002_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SSL_SCHWP002_PumpOnOff_01'], [temp])
            temp = self.TSG_AHU0T202_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T202_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T202_SADamperPositionSet_01'], [temp])
            temp = self.CWPGroup002_GroupEnergyH()
            if temp is None:
                temp = 'Null'
            name_list.append('CWPGroup002_GroupEnergyH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWPGroup002_GroupEnergyH'], [temp])
            temp = self.CWP101_PumpOnOff_02()
            if temp is None:
                temp = 'Null'
            name_list.append('CWP101_PumpOnOff_02')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWP101_PumpOnOff_02'], [temp])
            temp = self.PCHWPGroupTotal001_GroupCostH()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHWPGroupTotal001_GroupCostH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHWPGroupTotal001_GroupCostH'], [temp])
            temp = self.TSG_AHU0T503_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T503_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T503_UnitOnOff_01'], [temp])
            temp = self.HWP101_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('HWP101_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HWP101_PumpPower'], [temp])
            temp = self.JYZX_AHU0J07_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J07_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J07_SADamperPositionSet_01'], [temp])
            temp = self.TSG_AHU0T405_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T405_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T405_UnitOnOff_01'], [temp])
            temp = self.Valve241_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve241_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve241_ValveOpenStatus'], [temp])
            temp = self.TSG_AHU0T206_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T206_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T206_SADamperPositionSet_01'], [temp])
            temp = self.JYZX_AHU0J09_CCValvePositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J09_CCValvePositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J09_CCValvePositionSet_01'], [temp])
            temp = self.PCHWP004_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHWP004_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHWP004_PumpPower'], [temp])
            temp = self.SCHWPGroupTotal001_GroupCost()
            if temp is None:
                temp = 'Null'
            name_list.append('SCHWPGroupTotal001_GroupCost')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SCHWPGroupTotal001_GroupCost'], [temp])
            temp = self.Valve124_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve124_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve124_ValveOpenStatus'], [temp])
            temp = self.TSG_AHU0T201_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T201_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T201_UnitOnOff_01'], [temp])
            temp = self.HWP001_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('HWP001_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HWP001_PumpOnOff_01'], [temp])
            temp = self.CWP002_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('CWP002_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWP002_PumpOnOff_01'], [temp])
            temp = self.PCHWPGroupTotal001_GroupPower()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHWPGroupTotal001_GroupPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHWPGroupTotal001_GroupPower'], [temp])
            temp = self.Valve241_ValveCloseStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve241_ValveCloseStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve241_ValveCloseStatus'], [temp])
            temp = self.GHX004_ValveOpenStatus_01()
            if temp is None:
                temp = 'Null'
            name_list.append('GHX004_ValveOpenStatus_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['GHX004_ValveOpenStatus_01'], [temp])
            temp = self.HWP102_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('HWP102_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HWP102_PumpPower'], [temp])
            temp = self.ST_SCHWP002_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('ST_SCHWP002_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['ST_SCHWP002_PumpPower'], [temp])
            temp = self.PCHWPGroupTotal001_GroupCost()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHWPGroupTotal001_GroupCost')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHWPGroupTotal001_GroupCost'], [temp])
            temp = self.CWPGroup001_GroupCostH()
            if temp is None:
                temp = 'Null'
            name_list.append('CWPGroup001_GroupCostH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWPGroup001_GroupCostH'], [temp])
            temp = self.HW001_ValveOpenStatus_01()
            if temp is None:
                temp = 'Null'
            name_list.append('HW001_ValveOpenStatus_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HW001_ValveOpenStatus_01'], [temp])
            temp = self.CWPGroupTotal001_GroupEnergyH()
            if temp is None:
                temp = 'Null'
            name_list.append('CWPGroupTotal001_GroupEnergyH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWPGroupTotal001_GroupEnergyH'], [temp])
            temp = self.XZL_PAU003_SAFanOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_PAU003_SAFanOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_PAU003_SAFanOnOff_01'], [temp])
            temp = self.KYL_SCHWP002_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('KYL_SCHWP002_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['KYL_SCHWP002_PumpPower'], [temp])
            temp = self.PCHWP001_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHWP001_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHWP001_PumpPower'], [temp])
            temp = self.PCHWP004_PumpFlow()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHWP004_PumpFlow')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHWP004_PumpFlow'], [temp])
            temp = self.PCHWP002_PumpFlow()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHWP002_PumpFlow')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHWP002_PumpFlow'], [temp])
            temp = self.XZL_PAU007_RAFanOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_PAU007_RAFanOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_PAU007_RAFanOnOff_01'], [temp])
            temp = self.TSG_AHU0T101_CCValvePositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T101_CCValvePositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T101_CCValvePositionSet_01'], [temp])
            temp = self.Valve113_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve113_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve113_ValveOpenStatus'], [temp])
            temp = self.XZL_PAU006_RAFanOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_PAU006_RAFanOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_PAU006_RAFanOnOff_01'], [temp])
            temp = self.TSG_AHU0T205_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T205_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T205_UnitOnOff_01'], [temp])
            temp = self.JYZX_AHU0J05_CCValvePositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J05_CCValvePositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J05_CCValvePositionSet_01'], [temp])
            temp = self.Valve136_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve136_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve136_ValveOpenStatus'], [temp])
            temp = self.CWPGroupTotal001_GroupCost()
            if temp is None:
                temp = 'Null'
            name_list.append('CWPGroupTotal001_GroupCost')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWPGroupTotal001_GroupCost'], [temp])
            temp = self.JYZX_AHU0J03_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J03_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J03_SADamperPositionSet_01'], [temp])
            temp = self.CWPGroup002_GroupPower()
            if temp is None:
                temp = 'Null'
            name_list.append('CWPGroup002_GroupPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWPGroup002_GroupPower'], [temp])
            temp = self.Valve144_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve144_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve144_ValveOpenStatus'], [temp])
            temp = self.TSG_AHU0T501_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T501_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T501_SADamperPositionSet_01'], [temp])
            temp = self.TSG_AHU0T201_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T201_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T201_SADamperPositionSet_01'], [temp])
            temp = self.HWP102_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('HWP102_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HWP102_PumpOnOff_01'], [temp])
            temp = self.CWP201_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('CWP201_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWP201_PumpPower'], [temp])
            temp = self.TSG_AHU0T104_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T104_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T104_SADamperPositionSet_01'], [temp])
            temp = self.TSG_AHU0T301_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T301_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T301_UnitOnOff_01'], [temp])
            temp = self.TSG_AHU0T405_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T405_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T405_SADamperPositionSet_01'], [temp])
            temp = self.TSG_AHU0T305_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T305_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T305_SADamperPositionSet_01'], [temp])
            temp = self.JYZX_AHU0J05_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J05_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J05_SADamperPositionSet_01'], [temp])
            temp = self.CWPGroup002_GroupCostH()
            if temp is None:
                temp = 'Null'
            name_list.append('CWPGroup002_GroupCostH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWPGroup002_GroupCostH'], [temp])
            temp = self.HW101_ValveCloseStatus_01()
            if temp is None:
                temp = 'Null'
            name_list.append('HW101_ValveCloseStatus_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HW101_ValveCloseStatus_01'], [temp])
            temp = self.Valve111_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve111_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve111_ValveOpenStatus'], [temp])
            temp = self.JYZX_AHU0J10_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J10_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J10_SADamperPositionSet_01'], [temp])
            temp = self.TSG_AHU0T303_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T303_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T303_SADamperPositionSet_01'], [temp])
            temp = self.TSG_AHU0T102_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T102_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T102_SADamperPositionSet_01'], [temp])
            temp = self.TSG_AHU0T505_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T505_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T505_SADamperPositionSet_01'], [temp])
            temp = self.TSG_AHU0T203_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T203_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T203_SADamperPositionSet_01'], [temp])
            temp = self.PCHWPGroupTotal001_GroupEnergyH()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHWPGroupTotal001_GroupEnergyH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHWPGroupTotal001_GroupEnergyH'], [temp])
            temp = self.GHX002_ValveOpenStatus_01()
            if temp is None:
                temp = 'Null'
            name_list.append('GHX002_ValveOpenStatus_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['GHX002_ValveOpenStatus_01'], [temp])
            temp = self.TSG_AHU0T103_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T103_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T103_UnitOnOff_01'], [temp])
            temp = self.TSG_AHU0T505_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T505_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T505_UnitOnOff_01'], [temp])
            temp = self.SCHWPGroup006_GroupPower()
            if temp is None:
                temp = 'Null'
            name_list.append('SCHWPGroup006_GroupPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SCHWPGroup006_GroupPower'], [temp])
            temp = self.Valve133_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve133_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve133_ValveOpenStatus'], [temp])
            temp = self.JYZX_AHU0J06_CCValvePositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J06_CCValvePositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J06_CCValvePositionSet_01'], [temp])
            temp = self.Valve233_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve233_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve233_ValveOpenStatus'], [temp])
            temp = self.HWP002_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('HWP002_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HWP002_PumpOnOff_01'], [temp])
            temp = self.Plant001_GroupEnergyH()
            if temp is None:
                temp = 'Null'
            name_list.append('Plant001_GroupEnergyH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Plant001_GroupEnergyH'], [temp])
            temp = self.SSL_SCHWP004_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('SSL_SCHWP004_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SSL_SCHWP004_PumpOnOff_01'], [temp])
            temp = self.JYZX_AHU0J01_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J01_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J01_UnitOnOff_01'], [temp])
            temp = self.TSG_AHU0T204_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T204_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T204_UnitOnOff_01'], [temp])
            temp = self.HWPGroup002_RunNum()
            if temp is None:
                temp = 'Null'
            name_list.append('HWPGroup002_RunNum')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HWPGroup002_RunNum'], [temp])
            temp = self.JYZX_AHU0J02_CCValvePositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J02_CCValvePositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J02_CCValvePositionSet_01'], [temp])
            temp = self.GHX003_ValveOpenStatus_01()
            if temp is None:
                temp = 'Null'
            name_list.append('GHX003_ValveOpenStatus_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['GHX003_ValveOpenStatus_01'], [temp])
            temp = self.Valve142_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve142_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve142_ValveOpenStatus'], [temp])
            temp = self.SSL_SCHWP001_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('SSL_SCHWP001_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SSL_SCHWP001_PumpPower'], [temp])
            temp = self.TSG_AHU0T105_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T105_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T105_SADamperPositionSet_01'], [temp])
            temp = self.TSG_SCHWP002_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_SCHWP002_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_SCHWP002_PumpPower'], [temp])
            temp = self.Valve117_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve117_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve117_ValveOpenStatus'], [temp])
            temp = self.TSG_AHU0T205_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T205_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T205_SADamperPositionSet_01'], [temp])
            temp = self.CTGroupTotal001_GroupEnergyH()
            if temp is None:
                temp = 'Null'
            name_list.append('CTGroupTotal001_GroupEnergyH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CTGroupTotal001_GroupEnergyH'], [temp])
            temp = self.TSG_AHU0T408_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T408_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T408_UnitOnOff_01'], [temp])
            temp = self.Plant001_GroupCost()
            if temp is None:
                temp = 'Null'
            name_list.append('Plant001_GroupCost')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Plant001_GroupCost'], [temp])
            temp = self.TSG_AHU0T203_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T203_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T203_UnitOnOff_01'], [temp])
            temp = self.Valve118_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve118_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve118_ValveOpenStatus'], [temp])
            temp = self.Valve223_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve223_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve223_ValveOpenStatus'], [temp])
            temp = self.XZL_PAU006_SAFanOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_PAU006_SAFanOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_PAU006_SAFanOnOff_01'], [temp])
            temp = self.TSG_AHU0T101_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T101_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T101_SADamperPositionSet_01'], [temp])
            temp = self.XZL_AHU0X01_SAFanOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_AHU0X01_SAFanOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_AHU0X01_SAFanOnOff_01'], [temp])
            temp = self.CWP102_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('CWP102_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWP102_PumpPower'], [temp])
            temp = self.HWPGroupTotal001_GroupPower()
            if temp is None:
                temp = 'Null'
            name_list.append('HWPGroupTotal001_GroupPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HWPGroupTotal001_GroupPower'], [temp])
            temp = self.PCHW001_ChWFlow()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHW001_ChWFlow')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHW001_ChWFlow'], [temp])
            temp = self.PCHWPGroupTotal001_RunNum()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHWPGroupTotal001_RunNum')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHWPGroupTotal001_RunNum'], [temp])
            temp = self.TSG_AHU0T303_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T303_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T303_UnitOnOff_01'], [temp])
            temp = self.JYZX_SCHWP001_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_SCHWP001_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_SCHWP001_PumpOnOff_01'], [temp])
            temp = self.XZL_SCHWP001_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_SCHWP001_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_SCHWP001_PumpPower'], [temp])
            temp = self.JYZX_AHU0J09_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J09_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J09_UnitOnOff_01'], [temp])
            temp = self.TSG_AHU0T204_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T204_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T204_SADamperPositionSet_01'], [temp])
            temp = self.TSG_AHU0T407_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T407_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T407_SADamperPositionSet_01'], [temp])
            temp = self.JYZX_AHU0J05_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J05_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J05_UnitOnOff_01'], [temp])
            temp = self.TSG_AHU0T402_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T402_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T402_SADamperPositionSet_01'], [temp])
            temp = self.Valve231_ValveCloseStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve231_ValveCloseStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve231_ValveCloseStatus'], [temp])
            temp = self.Valve114_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve114_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve114_ValveOpenStatus'], [temp])
            temp = self.Valve242_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve242_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve242_ValveOpenStatus'], [temp])
            temp = self.TSG_AHU0T103_CCValvePositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T103_CCValvePositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T103_CCValvePositionSet_01'], [temp])
            temp = self.TSG_AHU0T307_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T307_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T307_SADamperPositionSet_01'], [temp])
            temp = self.SCHWPGroup005_RunNum()
            if temp is None:
                temp = 'Null'
            name_list.append('SCHWPGroup005_RunNum')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SCHWPGroup005_RunNum'], [temp])
            temp = self.SCHWPGroup003_GroupPower()
            if temp is None:
                temp = 'Null'
            name_list.append('SCHWPGroup003_GroupPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SCHWPGroup003_GroupPower'], [temp])
            temp = self.TSG_AHU0T304_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T304_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T304_SADamperPositionSet_01'], [temp])
            temp = self.SCHWPGroupTotal001_GroupCostH()
            if temp is None:
                temp = 'Null'
            name_list.append('SCHWPGroupTotal001_GroupCostH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SCHWPGroupTotal001_GroupCostH'], [temp])
            temp = self.Valve221_ValveCloseStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve221_ValveCloseStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve221_ValveCloseStatus'], [temp])
            temp = self.CTGroupTotal001_GroupCostH()
            if temp is None:
                temp = 'Null'
            name_list.append('CTGroupTotal001_GroupCostH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CTGroupTotal001_GroupCostH'], [temp])
            temp = self.JYZX_AHU0J07_CCValvePositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J07_CCValvePositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J07_CCValvePositionSet_01'], [temp])
            temp = self.TSG_AHU0T103_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T103_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T103_SADamperPositionSet_01'], [temp])
            temp = self.TSG_AHU0T401_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T401_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T401_SADamperPositionSet_01'], [temp])
            temp = self.XZL_PAU008_SAFanOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_PAU008_SAFanOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_PAU008_SAFanOnOff_01'], [temp])
            temp = self.Valve132_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve132_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve132_ValveOpenStatus'], [temp])
            temp = self.HWP101_PumpOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('HWP101_PumpOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HWP101_PumpOnOff_01'], [temp])
            temp = self.TSG_AHU0T208_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T208_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T208_SADamperPositionSet_01'], [temp])
            temp = self.TSG_AHU0T502_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T502_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T502_UnitOnOff_01'], [temp])
            temp = self.XZL_PAU004_SAFanOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_PAU004_SAFanOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_PAU004_SAFanOnOff_01'], [temp])
            temp = self.ChGroupTotal001_GroupCostH()
            if temp is None:
                temp = 'Null'
            name_list.append('ChGroupTotal001_GroupCostH')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['ChGroupTotal001_GroupCostH'], [temp])
            temp = self.JYZX_SCHWP001_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_SCHWP001_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_SCHWP001_PumpPower'], [temp])
            temp = self.HW001_HWFlow()
            if temp is None:
                temp = 'Null'
            name_list.append('HW001_HWFlow')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HW001_HWFlow'], [temp])
            temp = self.Valve232_ValveCloseStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve232_ValveCloseStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve232_ValveCloseStatus'], [temp])
            temp = self.ChGroupTotal001_RunNum()
            if temp is None:
                temp = 'Null'
            name_list.append('ChGroupTotal001_RunNum')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['ChGroupTotal001_RunNum'], [temp])
            temp = self.TSG_AHU0T302_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T302_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T302_UnitOnOff_01'], [temp])
            temp = self.JYZX_AHU0J04_CCValvePositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('JYZX_AHU0J04_CCValvePositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['JYZX_AHU0J04_CCValvePositionSet_01'], [temp])
            temp = self.SCHWPGroup003_RunNum()
            if temp is None:
                temp = 'Null'
            name_list.append('SCHWPGroup003_RunNum')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['SCHWPGroup003_RunNum'], [temp])
            temp = self.TSG_AHU0T206_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T206_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T206_UnitOnOff_01'], [temp])
            temp = self.Valve242_ValveCloseStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve242_ValveCloseStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve242_ValveCloseStatus'], [temp])
            temp = self.Valve128_ValveOpenStatus()
            if temp is None:
                temp = 'Null'
            name_list.append('Valve128_ValveOpenStatus')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Valve128_ValveOpenStatus'], [temp])
            temp = self.PCHW001_DT()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHW001_DT')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHW001_DT'], [temp])
            temp = self.TSG_AHU0T507_SADamperPositionSet_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T507_SADamperPositionSet_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T507_SADamperPositionSet_01'], [temp])
            temp = self.CT003_CTPower()
            if temp is None:
                temp = 'Null'
            name_list.append('CT003_CTPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CT003_CTPower'], [temp])
            temp = self.CWP004_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('CWP004_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['CWP004_PumpPower'], [temp])
            temp = self.HW101_ValveOpenStatus_01()
            if temp is None:
                temp = 'Null'
            name_list.append('HW101_ValveOpenStatus_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['HW101_ValveOpenStatus_01'], [temp])
            temp = self.PCHWP001_PumpFlow()
            if temp is None:
                temp = 'Null'
            name_list.append('PCHWP001_PumpFlow')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['PCHWP001_PumpFlow'], [temp])
            temp = self.TSG_AHU0T407_UnitOnOff_01()
            if temp is None:
                temp = 'Null'
            name_list.append('TSG_AHU0T407_UnitOnOff_01')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['TSG_AHU0T407_UnitOnOff_01'], [temp])
            temp = self.Plant001_GroupPower()
            if temp is None:
                temp = 'Null'
            name_list.append('Plant001_GroupPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['Plant001_GroupPower'], [temp])
            temp = self.XZL_SCHWP002_PumpPower()
            if temp is None:
                temp = 'Null'
            name_list.append('XZL_SCHWP002_PumpPower')
            value_list.append(temp)
            DataManager.update_realtime_cache(132, ['XZL_SCHWP002_PumpPower'], [temp])
            if name_list and value_list:
                self.set_data_calcpoint(132, name_list, value_list)
        except Exception as e:
            errorLog.writeLog(132,'%s in %s:'%(get_current_func_name(), __name__[__name__.rfind('/')+1:])+e.__str__(),True)
            rt = False
        return rt

