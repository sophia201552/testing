# -*- encoding=utf-8 -*-
from ExpertContainer.logic.LogicBase import *
from ExpertContainer.api.ArchiveManager import ArchiveManager
from ExpertContainer.api.globalMapping import *
from ExpertContainer.api.cacheProfile import DataManager
from ExpertContainer.api.errorLog import errorLog
_logger = LogOperator()

class LogicAct(LogicBase):

    def actlogic(self):
        rt = None
        try:
            rt = self.action()
        except Exception as e:
            errorLog.writeLog(1,'%s in %s:'%(get_current_func_name(), __name__[__name__.rfind('/')+1:])+e.__str__(),True)
            rt = None

        return rt

    def sophia_1_6(self):
        def main():
            try:
                return min([2,34,4,32,5])
            except Exception as e:
                errorLog.writeLog(1,'sophia_1_6:'+e.__str__(),True,'sophia_1_6')
                return None
        return main()

    def action(self):
        rt = True
        name_list = []
        value_list = []
        try:
            temp = self.sophia_1_6()
            if temp is None:
                temp = 'Null'
            name_list.append('sophia_1_6')
            value_list.append(temp)
            DataManager.update_realtime_cache(1, ['sophia_1_6'], [temp])
            if name_list and value_list:
                self.set_data_calcpoint(1, name_list, value_list)
        except Exception as e:
            errorLog.writeLog(1,'%s in %s:'%(get_current_func_name(), __name__[__name__.rfind('/')+1:])+e.__str__(),True)
            rt = False
        return rt

