# # coding=utf-8
# from ExpertContainer.api.views import *
# import pytest
# import json
#
#
# projId = 194
# @pytest.mark.p0
# @pytest.mark.parametrize(('data', 'expected', 'flag'), [
#     ({'projId':72,'diagObid':'57bd1932833c976928ed42cf','s_time':'2016-12-01 00:00:00','e_time':'2016-12-01 00:30:00','dateFormat':'h1','diagname':'synData'}, expected, True),
#     ({'projId':49,'diagObid':'585892d3833c97143c55b5db','s_time':'2016-12-20 00:00:00','e_time':'2016-12-20 22:00:00','dateFormat':'h1','diagname':'test01210a'}, expected, True),
#     ({'projId':49,'diagObid':'585892d3833c97143c55b5db','s_time':'2017-08-11 00:00:00','e_time':'2017-08-12 22:00:00','dateFormat':'h1','diagname':'test01210a'}, expected, True),
#     ({}, {}, False),
# ])
# def test_diagnosis_get_moduleStatus_single(data, expected, flag):
#     if flag:
#         rt = json.loads(do_diagnosis_get_moduleStatus_single(data))
#         assert rt.get('error')==0 and rt.get('msg') == 'ok', 'actual is not equal to expcted ,acutal is {0}'.format(rt)
#         assert len(rt)==len(expected),'acutal length is not equal to expected,acutal is {0},expected is {1}'.format(len(rt),len(expected))
#         data=rt.get('data')
#         for item in data:
#             assert item in expected.get('data'),'{0} is not in expected'.format(item)
#     else:
#         rt = json.loads(do_find_api_in_calc(data))
#         assert rt.get('error') == 1 and rt.get('msg') == expected, 'acutal is not False,acutal is {0}'.format(rt)
