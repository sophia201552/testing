var FactoryIoC = (function () {
    function FactoryIoC(strType) {
        this.listClass = [];
        this.init(strType);
    };

    FactoryIoC.prototype = {
        init: function (strType) {
            switch (strType) {
                case 'analysis': this.initAnalysisModule(); break;
                case 'dashboard': this.initDashboardModule(); break;
                case 'report': this.initReportModule(); break;
                default: break;
            }
        },

        add: function (entityClass) {
            this.listClass.push(entityClass);
        },

        getModel: function (strModelName) {
            for (var i = 0, len = this.listClass.length; i < len; i++) {
                if (strModelName.toLowerCase() == this.listClass[i].name.toLowerCase()) {
                    return this.listClass[i];
                }
            }
            return null;
        },

        getList: function () {
            return this.listClass;
        },

        initAnalysisModule: function () {
            this.add(AnlzTendency);
            this.add(AnlzSpectrum);
            this.add(AnlzScatter);

            //this.add(AnlzHistory);

            this.add(AnlzHistoryCompare);
            this.add(AnlzHistoryCompare_Line);
            //this.add(AnlzChart);
            this.add(AnlzStack);
            this.add(AnlzPieRealtime);
            this.add(AnlzEnergy);
            this.add(AnlzCluster);
            this.add(AnlzCluster_AHU);
            this.add(AnlzCluster_Chiller);
        },

        initDashboardModule: function () {
            this.add(ModalNone);
            this.add(ModalAnalysis);

            this.add(ModalHistoryChart);
            this.add(ModalHistoryChartNormal);//line
            this.add(ModalHistoryChartEnergyConsume);//bar
            this.add(ModalHistoryChartYearOnYearLine);
            this.add(ModalHistoryChartYearOnYearBar);
            this.add(ModalHistoryDataAnalyze);

            this.add(ModalChart);
            this.add(ModalRealtimePieEnegBrkd);
            //this.add(ModalRealtimePieDataRoom);
            this.add(ModalRealtimeLineOutdoor);
            this.add(ModalRealtimeBarSub);
            //this.add(ModalRealtimeLinePUE);
            this.add(ModalRealtimeGauge);
            this.add(ModalRealtimeBarEnegBrkd);
            this.add(ModalMultiple);
            //this.add(ModalRealtimeLineEnegBrkd);

            //this.add(ModalCarbonFootprint);
            //this.add(ModalWeather);
            //this.add(ModalEnergySaveRate);
            //this.add(ModalCoalSaveTotal);
            //this.add(ModalCo2SaveTotal);

            this.add(ModalKPIChart);
            this.add(ModalObserver);
            this.add(ModalPredictPointLine);
            this.add(ModalNote);
            this.add(ModalRank);
            this.add(ModalRankNormal);
            this.add(ModalMix);
            this.add(ModalHtml); 
            this.add(ModalChartCustom);
            this.add(ModalPointKPI);
            this.add(ModalReportChapter);
            (typeof ModalReportFactory != "undefined") && this.add(ModalReportFactory);
            this.add(ModalInteract);
            //this.add(ModalKPIManage);

            this.add(ModalMonitor);
            this.add(ModalAppChart);
            this.add(ModalAppGauge);
            this.add(ModalAppButton);
            this.add(ModalAppHistory);
            this.add(ModalHistoryDataAnalyze);            
			this.add(ModalKPIStruct);
            this.add(ModalAppBlind);            
			this.add(ModalAppDiagRanking);
            this.add(ModalAPPMonthHistory);
			//this.add(ModalMobileWorkDiagnosis);
			this.add(ModalAppKPICollect);
			this.add(ModalAppPie);
			this.add(ModalDiagnosisPanelHtml);
            this.add(ModalRealtimeWeather);
			this.add(ModalDataMonitorList);
            this.add(ModalKpiOverview);//kpi总览
            this.add(ModalDiagnosisStruct);//诊断汇总
            this.add(ModalCumulantChart);
            this.add(ModalColdHotAreaSummary);//华为过冷过热区域汇总
            this.add(ModalEquipmentPerfectRate);//华为设备完好率
            this.add(ModalWorkOrderStatistics);//华为工单统计
            this.add(ModalPriorityHandlingFaultList);//华为优先处理故障列表
            this.add(ModalEnergyTrendAnalysis);//能耗趋势分析
        },

        initReportModule: function () {
            var ns = namespace('factory.report.components');

            this.add(ns.Summary);
            this.add(ns.ChapterContainer);
            this.add(ns.Text);
            this.add(ns.Html);
            this.add(ns.Chart);
            this.add(ns.Block);
            this.add(ns.DiagnosisBlock);
            this.add(ns.Table);
        },
    }

    return FactoryIoC;
})();
var modalConfigurePane = (function(){
    var _this;
    function modalConfigurePane(container,screen,modalType){
        _this = this;
        this.container = container;
        this.screen = screen;
        this.modalType = modalType;
        //data analysis or dashboard
        this.templateObj = undefined;
        this.optionType = undefined;
        //optionType--True:New chart/False:load exist option;
        this.option = undefined;
        this.dataLose = undefined;
        this.editorData = undefined;
        this.ue = undefined;
        //option = {
        //    modeUsable: []
        //    allDataNeed; bool
        //    rowDataType: []
        //    dataTypeMaxNum: []
        //    templateType; str
        //    optionPara:{
        //                dataItem:
        //                option;
        //                } for new
        //    optionPara:{
        //                mode:''
        //                startTime:
        //                endTime:
        //                interval:
        //                dataItem:{dsId,dsName,dsType
        //                          }
        //                } for exist
        //}
        this.UILoadPromise = undefined;
    }
    modalConfigurePane.prototype = {
        show: function(){
            this.UILoadPromise = WebAPI.get("/static/views/observer/widgets/modalConfigurePane.html").done(function (resultHtml) {
                _this.container.innerHTML += resultHtml;
                if (_this.modalType == "dataAnalysis"){
                    document.getElementById('startConfig').setAttribute('i18n','modalConfig.btnStartConfig.TYPE1');
                }else if(_this.modalType == "dashboard"){
                    document.getElementById('startConfig').setAttribute('i18n','modalConfig.btnStartConfig.TYPE2');
                }
                I18n.fillArea($('#modalConfig'));
            });
        },
        showModalInit: function(optionType,option,templateObj){
            this.optionType = optionType;
            this.option = option;
            this.templateObj = templateObj;
            //if(!_this.option.dataTypeMaxNum){
            //    _this.option.dataTypeMaxNum = [];
            //    for (var i = 0;i<this.option.rowDataType.length;i++){
            //        _this.option.dataTypeMaxNum[i] = 5
            //    }
            //}else{
            //    if (_this.option.dataTypeMaxNum.length != _this.option.rowDataType.length){
            //        for (var i = _this.option.dataTypeMaxNum.length;i<this.option.rowDataType.length;i++){
            //            _this.option.dataTypeMaxNum[i] = _this.option.dataTypeMaxNum[_this.option.dataTypeMaxNum.length - 1]
            //        }
            //    }
            //}
            
            if (this.UILoadPromise && this.UILoadPromise.state() === 'pending') {

            } else {
                this.UILoadPromise = $.Deferred().resolve();
            }

            this.UILoadPromise.done(function () {
                this.init();
                if (_this.option.templateType == "ModalNote") {
                    _this.initEditor();
                }
                $('#modalConfig').modal('show');
            }.bind(this));
            
        },
        init: function () {
            var $modalConfig = $('#modalConfig');
            var $inputRealTimeInterval = $('#inputRealTimeInterval')
            var $labelText = $('#divRealTimeInterval label');
            var $option30s = $('#inputRealTimeInterval option[value = "30s"]');
            var $option10m = $('#inputRealTimeInterval option[value = "10m"]');
            var $option30m = $('#inputRealTimeInterval option[value = "30m"]');
            var $optionh1 = $('#inputRealTimeInterval option[value = "h1"]');
            var $optiond1 = $('#inputRealTimeInterval option[value = "d1"]');
            var $optionM1 = $('#inputRealTimeInterval option[value = "M1"]');
            $modalConfig.off('show.bs.modal').on('show.bs.modal', function (e) {
                if(e.namespace !== 'bs.modal' ) return true;
                _this.initOption();
                _this.initConfigData();
                $('#inputAddGroup').click(function(e){
                    $(e.target).focus();
                });
                if(_this.modalType =="dashboard"){
                    _this.toggleDataSource(true);
                }
                if (_this.templateObj instanceof ModalRealtimeLineOutdoor || _this.templateObj instanceof ModalRealtimeBarSub){//当配置框添加的为实时折线图/柱图，改变一些样式
                    if(!_this.templateObj.entity.modal.option){
                        $inputRealTimeInterval.find('option[value= "m5"]').attr('selected' ,true);//默认选中m5
                    }else if (_this.templateObj.entity.modal.option.timeFormat){
                        $inputRealTimeInterval.find('option[value=' +_this.templateObj.entity.modal.option.timeFormat + ']').attr('selected' ,true);
                    }
                    $labelText.text(I18n.resource.modalConfig.option.LABEL_INTERVAL_ONE);
                    $optionh1.show();
                    $optiond1.show();
                    $optionM1.show();
                    $option30s.hide();
                    $option10m.hide();
                    $option30m.hide();
                }else {//不是实时折线图清空改变的样式
                    $labelText.text(I18n.resource.modalConfig.option.LABEL_REAL_TIME_INTERVAL_ONE);
                    $optionh1.hide();
                    $optiond1.hide();
                    $optionM1.hide();
                    $option30s.show();
                    $option10m.show();
                    $option30m.show();
                }
                if (_this.option.modeUsable && _this.option.modeUsable[0] && _this.option.templateType === 'ModalAppGauge') {
                    $('#modalConfig .modal-body>.row>div').css('display', 'none');
                    if(!_this.templateObj.entity.modal.option||(_this.templateObj.entity.modal.option&&!_this.templateObj.entity.modal.option.guageBgColor)){
                        $('.guageBgColor').html('<input type="color" value="#2F91E8" data-key="guageBgColor"/>');
                    }
                    $('#divAppGauge').css('display', 'block');
                }
                if (_this.option.modeUsable && _this.option.modeUsable[0] && _this.option.templateType === 'ModalAppHistory') {
                    $('#modalConfig .modal-body>.row>div').css('display', 'none');
                    $('#divAppHistory').css('display', 'block');
                }
                if (_this.option.modeUsable && _this.option.modeUsable[0] && _this.option.templateType === 'ModalAppDiagRanking') {
                    $('#modalConfig .modal-body>.row>div').css('display', 'none');
                    $('.chartPointCog').css("pointer-events","none");
                    $('#appDiagRank').css('display', 'block');
                }
                if (_this.option.modeUsable && _this.option.modeUsable[0] &&( _this.option.templateType === 'ModalAPPMonthHistory'||_this.option.templateType ==='ModalAppPie')) {
                     $('#modalConfig .modal-body>.row>div').css('display', 'none');
                }
                if (_this.option.modeUsable && _this.option.modeUsable[0] && _this.option.templateType === 'ModalKpiOverview') {
                    $('#modalConfig .modal-body>.row>div').css('display', 'none');
                    $('.chartPointCog').css("pointer-events","none");
                }
                if (_this.option.modeUsable && _this.option.modeUsable[0] && _this.option.templateType === 'ModalDataMonitorList') {
                    $('#modalConfig .modal-body>.row>div').css('display', 'none');
                    $('.chartPointCog').css("pointer-events","none");
                }
            });
            $modalConfig.off('shown.bs.modal').on('shown.bs.modal', function () {
                _this.initTime();
                //$('.rowDataType').each(function(){
                //    _this.initDataTypeWidth($(this));
                //});
                _this.initDrag();
                _this.initConfigStart();
            });
            $modalConfig.off('hidden.bs.modal').on('hidden.bs.modal', function () {
                $modalConfig.find('#dataConfig').html('<div><span I18n="modalConfig.data.DATA_CONFIG_TITLE"></span></div>');
                I18n.fillArea($modalConfig.find('#dataConfig'));
                if(_this.modalType =="dashboard"){
                    _this.toggleDataSource(false);
                }
                $('#divChartPointCog').css('display','none');
                _this.dataLose = undefined;
            });
        },
        toggleDataSource: function(bool){
            var ele = $('#paneContent')[0];
            var colCount;

            if (!ele) {
                return;
            }
            colCount = ele.classList.contains('col-sm-10');

            if(bool && colCount){
                ele = document.getElementById('rightCt');
                ele && ele.click();
            }
            if(!bool && !colCount){
                ele = document.getElementById('rightCt');
                ele && ele.click();
            }
        },
        initDataTypeWidth: function(ele){
            if (window.innerWidth > 1200 ){
                if( ele.outerWidth() < ele.parent().outerWidth() / 4){
                    ele.addClass('col-lg-3');
                }else if(ele.outerWidth() < ele.parent().outerWidth() / 2){
                    ele.addClass('col-lg-6');
                }else if (ele.outerWidth() < ele.parent().outerWidth() * 3 / 4){
                    ele.addClass('col-lg-9');
                }else{
                    ele.addClass('col-lg-12');
                }
            }else{
                if(ele.outerWidth() < ele.parent().outerWidth() / 3){
                    ele.addClass('col-xs-4');
                }else if(ele.outerWidth() < ele.parent().outerWidth() * 2 / 3){
                    ele.addClass('col-xs-8');
                }else{
                    ele.addClass('col-xs-12');
                }
            }
        },
        initOption: function(){
            var $inputMode = $('#inputMode');
            var $divMode = $inputMode.parent();

            var $inputInterval = $('#inputInterval');
            var $divInterval = $inputInterval.parent();

            var $divInputGroupPeriod = $('#divInputGroupPeriod');
            var $divPeriod = $divInputGroupPeriod.parent();
            var $inputPeriodUnit = $('#inputPeriodUnit');
            var $inputPeriodValue = $('#inputPeriodValue');
            var $inputPeriodDropDown = $('#inputPeriodDropDown');
            var $divPeriodDropDown = $inputPeriodDropDown.parent();

            var $divInputGroupTimeRange = $('#divInputGroupTimeRange');
            var $divTimeRange = $divInputGroupTimeRange.parent();
            var $inputTimeStart = $('#inputTimeStart');
            var $inputTimeEnd = $('#inputTimeEnd');

            var $gaugeMode = $('#gaugeMode');
            var $divGaugeMode = $gaugeMode.parent();
            var $divGauge = $('#divGauge');
            var $gaugeLowerLimit = $('#gaugeLowerLimit');
            var $gaugeUpperLimit = $('#gaugeUpperLimit');
            var $normalLowerLimit = $('#normalLowerLimit');
            var $normalUpperLimit = $('#normalUpperLimit');

            var $inputComparePeriod = $('#inputComparePeriod');
            var $divComparePeriod = $inputComparePeriod.parent();
            var $inputCompareDate1 = $('#inputCompareDate1');
            var $inputCompareDate2 = $('#inputCompareDate2');
            var $divCompareDate = $('#divCompareDate');

            var $inputRealTimeInterval = $('#inputRealTimeInterval');
            var $divRealTimeInterval = $inputRealTimeInterval.parent();

            var $divHistoryRange = $('#divHistoryRange');
            var $inputHistoryRange = $('#inputHistoryRange');
            //var $divModeSelect = $('#divModeSelect');
            //var $divDefaultMode = $('#divDefaultMode');

            var $divChartSelect = $('#divChartSelect');


            var $divAppHistory = $("#divAppHistory");
            var i;
            var totalModeType = {
                    easy: [$divPeriodDropDown],
                    fixed: [$divInterval, $divTimeRange],
                    recent: [$divInterval, $divPeriod],
                    realTime: [],
                    easyEnergy: [$divPeriodDropDown],
                    realTimeDashboard: [$divRealTimeInterval],
                    easyCompareAnalyz: [$divCompareDate],
                    easyCompare: [$divComparePeriod],
                    easyCompareToggle: [$divComparePeriod,$divChartSelect],
                    compareSensor: [$divInterval, $divComparePeriod, $divCompareDate],
                    compareMeter: [$divInterval, $divComparePeriod, $divCompareDate],
                    gauge: [$divGauge, $divGaugeMode],
                    weather: [],
                    easyHistory: [$divHistoryRange],
                    easyHistorySelect: [$divHistoryRange,$divChartSelect],
                    multiple: [$divRealTimeInterval],
                    modalRankNormal: [$divPeriodDropDown]
                }
            ;

            var isInit = true;
            //模式选择初始化
            var $dataConfig = $('#dataConfig');
            var $startConfig = $('#startConfig');

            $dataConfig.css('display','block');
            $startConfig.removeClass('alwaysEnable');
            $inputMode.children().css('display','none');
            var modeSelectInit = false;
            if (_this.option.modeUsable && _this.option.modeUsable[0] &&( _this.option.templateType === 'ModalAppGauge'|| _this.option.templateType==='ModalAppPie' || _this.option.templateType === 'ModalAppDiagRanking' || _this.option.templateType === 'ModalAPPMonthHistory' || _this.option.templateType === 'ModalKpiOverview' || _this.option.templateType === 'ModalDataMonitorList')) {
                return;
            }
            if (_this.option.modeUsable && _this.option.modeUsable[0] && _this.option.templateType === 'ModalAppHistory') {
                $divAppHistory.css('display', 'block');
                var startTime = new Date().format("yyyy-MM-dd 00:00:00");
                var endTime = new Date().format("yyyy-MM-dd HH:mm:ss");
                $divAppHistory.find("#startTime").val(startTime);
                $divAppHistory.find("#endTime").val(endTime);
                var modalOption = _this.templateObj.entity.modal.option;
                // $('#divAppHistoryTitle').val(gaugeTitleVal); return;
                return;
            }
            for (i = 0; i < _this.option.modeUsable.length; i++) {
                $inputMode.children('option[value=' + _this.option.modeUsable[i] + ']').css('display', 'block');
                if (_this.optionType) {
                    if (sessionStorage.getItem('mode') == _this.option.modeUsable[i] && !modeSelectInit) {
                        $inputMode.val(_this.option.modeUsable[i]);
                        modeSelectInit = true;
                    }
                }else{
                    if (_this.option.modeUsable[i] == _this.option.optionPara.mode && !modeSelectInit) {
                        $inputMode.val(_this.option.optionPara.mode);
                        modeSelectInit = true;
                    }
                }
            }
            if (!modeSelectInit){
                $inputMode.val(_this.option.modeUsable[0]);
            }
            function initMode(mode){
                sessionStorage.setItem('mode', $inputMode.val());
                $divMode.siblings().css('display','none');
                $inputInterval.children().removeClass('forbid');
                for (var i = 0;i < totalModeType[mode].length;i++){
                    totalModeType[mode][i].css('display','block');
                }
                switch (mode) {
                    case 'easy':
                        initPeriodDropDown(mode);
                        initInterval(mode);
                        break;
                    case 'recent':
                        initInterval(mode);
                        break;
                    case 'easyEnergy':
                        initPeriodDropDown(mode);
                        initInterval(mode);
                        break;
                    case 'weather':
                        $dataConfig.css('display','none');
                        $startConfig.addClass('alwaysEnable');
                        break;
                    case 'easyCompareAnalyz':
                        $inputComparePeriod.val('month');
                        //initCompareDate();
                        break;
                    case 'easyCompare' :
                    case 'easyCompareToggle' :
                        $inputComparePeriod.val('day');
                        break;
                    default :
                        break;
                }
            }
            //间隔单位选择初始化
            if(this.optionType){
                if(sessionStorage.getItem('interval') != null ){
                    if ($inputInterval.children('option[value="'+ sessionStorage.getItem('interval') + '"]').hasClass('forbid')){
                        $inputInterval.val($inputInterval.children(':not(.forbid)').first());
                    }else{
                        $inputInterval.val(sessionStorage.getItem('interval'));
                    }
                }else{
                    sessionStorage.setItem('interval',$inputInterval.val());
                }
            }else{
                if(_this.option.optionPara.interval){
                    $inputInterval.val(_this.option.optionPara.interval);
                }else{
                    $inputInterval.val($inputInterval.children(':not(.forbid)').first());
                }
                //设置时间输入框精确度
                this.setTimePrecision($inputInterval.val(), $inputTimeStart, $inputTimeEnd);
            }
            $inputInterval.off('change').change(function(e){
                sessionStorage.setItem('interval', $(e.target).val());
                //设置时间输入框时间精度
                _this.setTimePrecision(this.value, $inputTimeStart, $inputTimeEnd)
            });
            function initInterval(mode) {
                $inputInterval.children().addClass('forbid').attr('selected',false);
                if (mode == 'recent') {
                    switch ($inputPeriodUnit.children(':selected').val()) {
                        case 'second' :
                            firstSelect = 'm5';
                            secondSelect = 'm1';
                            break;
                        case 'minute' :
                            firstSelect = 'm5';
                            secondSelect = 'm1';
                            break;
                        case 'hour':
                            firstSelect = 'h1';
                            secondSelect = 'm5';
                            break;
                        case 'day' :
                            firstSelect = 'd1';
                            secondSelect = 'h1';
                            break;
                        case 'month' :
                            firstSelect = 'M1';
                            secondSelect = 'd1';
                            break;
                    }
                    $inputInterval.find('option[value="' + secondSelect + '"]').removeClass('forbid');
                }
                if (mode == 'easy') {
                    //sessionStorage.setItem('periodDropDown', $inputPeriodDropDown.val());
                    switch ($inputPeriodDropDown.val()) {
                        case 'today' :
                            firstSelect = 'h1';
                            break;
                        case 'yesterday' :
                            firstSelect = 'h1';
                            break;
                        case 'thisWeek':
                            firstSelect = 'd1';
                            break;
                        case 'lastWeek' :
                            firstSelect = 'd1';
                            break;
                        case 'thisYear' :
                            firstSelect = 'M1';
                            break;
                    }
                }
                $inputInterval.find('option[value="' + firstSelect + '"]').removeClass('forbid').attr('selected',true);
                if(isInit && _this.option.optionPara.format){
                    $inputInterval.find('option[value="' + _this.option.optionPara.format + '"]').removeClass('forbid');
                }
                sessionStorage.setItem('interval',$inputInterval.val());
            }
            //周期初始化
            var firstSelect,secondSelect;
            if(this.optionType) {
                if (sessionStorage.getItem('periodValue')){
                    $inputPeriodValue.val(sessionStorage.getItem('periodValue'));
                }
                if (sessionStorage.getItem('periodUnit')){
                    $inputPeriodUnit.val(sessionStorage.getItem('periodUnit'));
                }
                if (sessionStorage.getItem('periodDropDown')){
                    if ($inputPeriodDropDown.children('option[value="'+ sessionStorage.getItem('periodDropDown') + '"]').hasClass('forbid')){
                        $inputPeriodDropDown.val($inputPeriodDropDown.children(':not(.forbid)').first());
                    }
                    $inputPeriodDropDown.val(sessionStorage.getItem('periodDropDown'));
                }
            }else{
                if(this.option.optionPara.timeRecent && this.option.optionPara.timeRecent.val && this.option.optionPara.timeRecent.unit){
                    $inputPeriodValue.val(this.option.optionPara.timeRecent.val);
                    $inputPeriodUnit.val(this.option.optionPara.timeRecent.unit);
                    $inputPeriodDropDown.val(this.option.optionPara.timeRecent.unit);
                }
            }
            $inputPeriodValue.off('change').change(function(e){
                sessionStorage.setItem('periodValue', e.target.value)
            });
            $inputPeriodUnit.off('change').change(function(e){
                sessionStorage.setItem('periodUnit',e.target.value);
               initInterval($inputMode.val());
            });
            $divPeriodDropDown.off('change').change(function(e){
                sessionStorage.setItem('periodDropDown',e.target.value);
                initInterval($inputMode.val());
            });

            //快速配置周期初始化
            function initPeriodDropDown(mode){
                $inputPeriodDropDown.children('').removeClass('forbid');
                if(mode == 'easy'){
                    $inputPeriodDropDown.children().eq(1).addClass('forbid');
                }else if(mode == 'easyEnergy') {
                    $inputPeriodDropDown.children().eq(2).addClass('forbid');
                    $inputPeriodDropDown.children().eq(4).addClass('forbid');
                    $inputPeriodDropDown.children().eq(5).addClass('forbid');
                }
                if(isInit && typeof _this.option.optionPara.timeRecent == 'string'){
                    $inputPeriodDropDown.children('[value="'+ _this.option.optionPara.timeRecent +'"]')[0].selected = true;
                }
            }
            //时间范围和对比时间范围初始化
            if(_this.optionType && sessionStorage.getItem('anlzTimeStart') != null){
                $inputTimeStart.val(sessionStorage.getItem('anlzTimeStart'));
                $inputCompareDate1.val(sessionStorage.getItem('anlzTimeStart'));
            }else{
                $inputTimeStart.val(new Date(_this.option.optionPara.startTime).format(_this.getDateFmtByInputFmt($inputTimeStart[0].dataset.format)));
                $inputCompareDate1.val(new Date(_this.option.optionPara.startTime).format(_this.getDateFmtByInputFmt($inputCompareDate1[0].dataset.format)));
            }
            $inputTimeStart.off('change').change(function(e){
                if (e.target.value !=''){
                    sessionStorage.setItem('anlzTimeStart', e.target.value)
                }
            });
            $inputCompareDate1.off('change').change(function(e){
                if (e.target.value !=''){
                    sessionStorage.setItem('anlzTimeStart', e.target.value)
                }
            });
            if(_this.optionType && sessionStorage.getItem('anlzTimeEnd') != null) {
                $inputTimeEnd.val(sessionStorage.getItem('anlzTimeEnd'));
                $inputCompareDate2.val(sessionStorage.getItem('anlzTimeEnd'));
            }else {
                $inputTimeEnd.val(new Date(_this.option.optionPara.endTime).format(_this.getDateFmtByInputFmt($inputTimeEnd[0].dataset.format)));
                $inputCompareDate2.val(new Date(_this.option.optionPara.endTime).format(_this.getDateFmtByInputFmt($inputCompareDate2[0].dataset.format)));//_this.option.optionPara.endTime
            }
            $inputTimeEnd.off('change').change(function(e){
                if (e.target.value !=''){
                    sessionStorage.setItem('anlzTimeEnd', e.target.value)
                }
            });
            $inputCompareDate2.off('change').change(function(e){
                if (e.target.value !=''){
                    sessionStorage.setItem('anlzTimeEnd', e.target.value)
                }
            });
            //历史同比时间初始化
            if (_this.option.optionPara.timeType && $inputMode.val() == 'easyCompareAnalyz'){
                $inputComparePeriod.val(_this.option.optionPara.timeType);
            }else if (sessionStorage.getItem('comparePeriodAnalyz') != null){
                $inputComparePeriod.val(sessionStorage.getItem('comparePeriodAnalyz'));
            }

            if (_this.option.optionPara.timeType && ($inputMode.val() == 'easyCompare' || $inputMode.val() == 'easyCompareToggle')){
                $inputComparePeriod.val(_this.option.optionPara.timeType);
            }else if (sessionStorage.getItem('comparePeriod') != null){
                $inputComparePeriod.val(sessionStorage.getItem('comparePeriod'));
            }
            $inputComparePeriod.change(function(e){
                sessionStorage.setItem('comparePeriod',$inputComparePeriod.val());
            });

            //gaugeMode初始化
            if(sessionStorage.getItem('gaugeMode') != null) {
                $gaugeMode.val(sessionStorage.getItem('gaugeMode'))
            }
            $gaugeMode.change(function(){
                sessionStorage.setItem('gaugeMode',$gaugeMode.val())
            });
            initGaugeMode();
            $gaugeMode.change(function(){
                initGaugeMode();
            });
            function initGaugeMode(){
                var green = '<span class="input-group-addon gaugeGreen" i18n="modalConfig.option.GAUGE_GREEN"></span>';
                var red = '<span class="input-group-addon gaugeRed" i18n="modalConfig.option.GAUGE_RED"></span>';
                if($gaugeMode.val() == 'high'){
                    $gaugeLowerLimit.next().remove();
                    $gaugeLowerLimit.after(green);
                    $normalUpperLimit.next().remove();
                    $normalUpperLimit.after(red);
                }else if($gaugeMode.val() == 'low'){
                    $gaugeLowerLimit.next().remove();
                    $gaugeLowerLimit.after(red);
                    $normalUpperLimit.next().remove();
                    $normalUpperLimit.after(green);

                }
                I18n.fillArea($('#divGauge'));
            }
            if(_this.option.optionPara.scaleList){
                _this.option.optionPara.scaleList.sort(function(a,b){
                        return a > b ? 1: -1
                    });
            }
            if(_this.optionType && sessionStorage.getItem('gaugeLowerLimit') != null){
                $gaugeLowerLimit.val(sessionStorage.getItem('gaugeLowerLimit'))
            }else if(!_this.optionType && _this.option.optionPara.scaleList){
                $gaugeLowerLimit.val(_this.option.optionPara.scaleList[0])
            }
            $gaugeLowerLimit.change(function(){
                sessionStorage.setItem('gaugeLowerLimit',$gaugeLowerLimit.val())
            });
            if(_this.optionType && sessionStorage.getItem('gaugeUpperLimit') != null){
                $gaugeUpperLimit.val(sessionStorage.getItem('gaugeUpperLimit'))
            }else if(!_this.optionType && _this.option.optionPara.scaleList){
                $gaugeUpperLimit.val(_this.option.optionPara.scaleList[3])
            }
            $gaugeUpperLimit.change(function(){
                sessionStorage.setItem('gaugeUpperLimit',$gaugeUpperLimit.val())
            });
            if(_this.optionType && sessionStorage.getItem('normalLowerLimit') != null){
                $normalLowerLimit.val(sessionStorage.getItem('normalLowerLimit'))
            }else if(!_this.optionType && _this.option.optionPara.scaleList){
                $normalLowerLimit.val(_this.option.optionPara.scaleList[1])
            }
            $normalLowerLimit.change(function(){
                sessionStorage.setItem('normalLowerLimit',$normalLowerLimit.val())
            });
            if(_this.optionType && sessionStorage.getItem('normalUpperLimit') != null){
                $normalUpperLimit.val(sessionStorage.getItem('normalUpperLimit'))
            }else if(!_this.optionType && _this.option.optionPara.scaleList){
                $normalUpperLimit.val(_this.option.optionPara.scaleList[2])
            }
            $normalUpperLimit.change(function(){
                sessionStorage.setItem('normalUpperLimit',$normalUpperLimit.val())
            });
            //dashboard实时图刷新周期初始化
            if (_this.option.optionPara.timeType && ($inputMode.val() == 'realTimeDashboard'|| $inputMode.val() == 'multiple')){
                $inputHistoryRange.val(_this.option.optionPara.timeType);
            }else if (sessionStorage.getItem('historyRange') != null){
                $inputHistoryRange.val(sessionStorage.getItem('historyRange'));
            }
            $inputHistoryRange.change(function(){
                sessionStorage.setItem('historyRange',$inputHistoryRange.val());
            });

            //快速配置历史范围初始化
            if (_this.option.optionPara.timeType && ($inputMode.val() == 'easyHistory' || $inputMode.val() == 'easyHistorySelect')){
                $inputHistoryRange.val(_this.option.optionPara.timeType);
            }else if (sessionStorage.getItem('historyRange') != null){
                $inputHistoryRange.val(sessionStorage.getItem('historyRange'));
            }
            $inputHistoryRange.change(function(){
                sessionStorage.setItem('historyRange',$inputHistoryRange.val());
            });
            initMode($inputMode.val());
            $inputMode.off('change').change(function(e){
                isInit = false;
                initMode($inputMode.val())
            });


            if ('AnlzTendency' == this.option.templateType) {
                $('#dataConfig').css('height', '100%');
                $('#modifyChart').show();
                if (this.optionType) {  // new
                    $('#modifyChartTitle').val('');
                    $('#modifyChartYMax').val('');
                    $('#modifyChartYMin').val('');
                    $('#modifyChartYMark').val('');
                    $('#modifyChartYUnitName').val('');
                    //$('#modifyChartYUnitEx').val('');
                    $('#modifyChartYUnitEx')[0].selectedIndex =0;
                }
                else {  // open
                    var opt = _this.screen.curModal.chartOption;
                    if (opt) {
                        $('#modifyChartTitle').val(opt.chartName);
                        $('#modifyChartYMax').val(opt.yMax);
                        $('#modifyChartYMin').val(opt.yMin);
                        $('#modifyChartYMark').val(opt.yMark);

                        var yUnit = opt.yUnit;
                        var flag = ' ';
                        var index = yUnit.indexOf(flag);
                        $('#modifyChartYUnitName').val(yUnit.substr(0, index));
                        if (yUnit.substr(index + 1)) {
                            $('#modifyChartYUnitEx').val(yUnit.substr(index + 1));
                        } else {
                            $('#modifyChartYUnitEx')[0].selectedIndex = 0;
                        }
                        
                    }
                }
            }
            else {
                $('#dataConfig').css('height', '350px');
                $('#modifyChart').hide();
            }
            $('#modifyChart .anlsModifyCobfig').off('click').click(function () {
                if ($('#modifyChart .row').is(':visible')) {
                    $('#modifyChart .row').hide();
                } else {
                    $('#modifyChart .row').show();
                }
            });
        },
        initConfigData: function(){
            var $dataConfig = $('#dataConfig');
            var $divAppGauge = $('#divAppGauge');
            var $appDiagRank = $('#appDiagRank');
            $dataConfig.html('<div><span I18n="modalConfig.data.DATA_CONFIG_TITLE"></span></div>');
            //var strDataTitle = '<span>'+ I18n.resource.modalConfig.data.DATA_CONFIG_TITLE_TYPE1 + '</span>';
            //var strTempDataMaxNum = '<span>'+ I18n.resource.modalConfig.data.DATA_TYPE_MAX_NUM + '</span>';
            //var arrTempDataMaxNum = [];

            //for (var i = 0;i < _this.option.dataTypeMaxNum.length; ++i){
            //    arrTempDataMaxNum.push(strTempDataMaxNum.replace('<%maxNum%>',_this.option.dataTypeMaxNum[i]));
            //}
            var strConfigModalBody = $dataConfig.html();
            var strDataTypeShowName = [];
            if(_this.option.rowDataTypeShowName){
                for (var i = 0;i < _this.option.rowDataType.length;++i) {
                    strDataTypeShowName.push(_this.option.rowDataTypeShowName[_this.option.rowDataType[i]])
                }
            }else{
                strDataTypeShowName = _this.option.rowDataType;
            }
            for (var i = 0; i < _this.option.rowDataType.length; ++i) {
                strConfigModalBody += '<div class="divConfigData" dataType="' + _this.option.rowDataType[i] + '">\
                                                <div class="dataTypeName">' +
                                                strDataTypeShowName[i]  +
                                                '</div>\
                                                <span class="chartPointCog glyphicon glyphicon-cog grow"></span>\
                                                <div class="row rowDataValue"><div class="dataDragTip col-lg-3 col-xs-4"><span class="glyphicon glyphicon-plus" aria-hidden="true"></span></div></div>\
                                    </div>';
            }
            $dataConfig.html(strConfigModalBody);
            if(_this.option.modeUsable && _this.option.modeUsable[0] && _this.option.templateType ==='ModalAppDiagRanking'){
                $appDiagRank.css('display', 'block');
                var rankType;
                if(_this.templateObj.entity.modal.option){
                    rankType = _this.templateObj.entity.modal.option.diagType?_this.templateObj.entity.modal.option.diagType:'fault';
                }else{
                    rankType = 'fault';
                }
                $('#appDiagRank').find('select').val(rankType);
            }
            if(_this.option.modeUsable && _this.option.modeUsable[0] && _this.option.templateType ==='ModalAppGauge'){
                $divAppGauge.css('display', 'block');
                var modalOption = _this.templateObj.entity.modal.option;
                var gaugeTitleVal = modalOption ? modalOption.guageTitle: '';
                $('#appGuageTitle').val(gaugeTitleVal);
                //$('#appGuageFulTitle').val(modalOption ? modalOption.guageFulTitle: '');
                $('#appGuageDot').val(modalOption ? modalOption.guageFixed: '');
                $('#appGuageUnit').val(modalOption ? modalOption.guageUnit: '');
                var guageText = modalOption ? modalOption.timeLocal: '';
                $('.timeDirectSelect').find('option[value="'+guageText+'"]').attr("selected", true);
                var guageDSelect = modalOption ? modalOption.guageDirect: '';
                $('.GuageDirectSelect').find('option[value="'+guageDSelect+'"]').attr("selected", true);
                var bgColor = modalOption ? modalOption.guageBgColor: '';
                if(bgColor){
                    $('.guageBgColor').html('<input type="color" value="'+bgColor+'" data-key="guageBgColor"/>');
                }
                $('#guageBgColor').val()
               // $('#appDataDot').val(modalOption ? modalOption.transDataDot: '')
            }
            var btnStartConfigEnable;
            for(i = 0;i < _this.option.optionPara.dataItem.length;++i){
                var $dataDragTip = $dataConfig.find('[dataType="'+_this.option.optionPara.dataItem[i].dsType +'"]').find('.dataDragTip');
                if ($dataDragTip.length ==0){
                    $dataDragTip = $('.dataDragTip').eq(i);
                }
                var strDSConfig;
                var loseJudge;
                for(var j= 0;j < _this.option.optionPara.dataItem[i].dsId.length;++j) {
                    loseJudge = "ptExist";
                    if (_this.option.optionPara.dataItem[i].dsName[j] == undefined){
                        _this.option.optionPara.dataItem[i].dsName[j] = I18n.resource.modalConfig.data.DATA_LOSE;
                        _this.dataLose = true;
                        loseJudge = "ptLose";
                    }
                    strDSConfig= '<div class="col-lg-3 col-xs-4 divDSConfigure grow '+ loseJudge + '" dsid="' + _this.option.optionPara.dataItem[i].dsId[j] + '"><span class="contentDS" title="'+ _this.option.optionPara.dataItem[i].dsName[j] +'">' +
                    _this.option.optionPara.dataItem[i].dsName[j] +
                    '</span><span class="glyphicon glyphicon-remove btnRemoveDS" aria-hidden="true" ></span></div>';
                    $dataDragTip.before(strDSConfig);
                    $('.divDSConfigure').tooltip({
                        placement: 'bottom',
                        title: _this.option.optionPara.dataItem[i].dsName[j]
                    });
                    btnStartConfigEnable = true;
                }
            }
            if (_this.modalType == "dataAnalysis"||_this.option.templateType ==='ModalAppGauge'||_this.option.templateType==='ModalAppPie' || _this.option.templateType ==='ModalAppHistory'||_this.option.templateType ==='ModalAppDiagRanking'||_this.option.templateType ==='ModalAPPMonthHistory'||_this.option.templateType ==='ModalKpiOverview'||_this.option.templateType ==='ModalDataMonitorList'){
                $('.chartPointCog').css('display','none');
            }else if(_this.modalType == "dashboard"){
                $('.chartPointCog').css('display','');
            }
            $dataConfig.off('click').on('click','.chartPointCog',function(e){
                $('#divChartPointCog').css('display','block');
                _this.initChartPtCog($('.chartPointCog').index($(e.target)))
            });
            if (_this.dataLose){
                new Alert($("#configAlert"), "danger", "<strong>" + I18n.resource.modalConfig.err.TYPE11 + "</strong>").show().close();
            }
            initDataTipAndButton();
            $('.alwaysEnable').removeClass('disabled');
            $('.divDSConfigure span').on('click', function (e) {
                var $thisPar = $(e.target).parent();
                $thisPar.next('.tooltip').remove();
                $thisPar.remove();
                if($('.ptLose').length == 0){
                    _this.dataLose = false;
                }
                initDataTipAndButton();

                $('#dataConfig').css('height','100%');
            });
            //initDataTipAndButton
            function initDataTipAndButton() {
                var NumOfDataTypeWithValue = 0;
                var $rowDataValue = $('.rowDataValue');
                for (var i =0;i< $rowDataValue.length;++i){
                    if($rowDataValue.eq(i).children().length > 1){
                        NumOfDataTypeWithValue += 1;
                    }
                    //if($rowDataValue.eq(i).children().length > _this.option.dataTypeMaxNum[i]){
                    //    $('.dataDragTip').get(i).style.display = 'none';
                    //}else{
                    //    $('.dataDragTip').get(i).style.display = 'block';
                    //}
                }
                if (_this.option.allDataNeed == true){
                    if(NumOfDataTypeWithValue == $rowDataValue.length){
                        $('#startConfig').removeClass('disabled');
                    }else{
                        $('#startConfig').addClass('disabled');
                    }
                }else{
                    if (NumOfDataTypeWithValue){
                        $('#startConfig').removeClass('disabled');
                    }else{
                        $('#startConfig').addClass('disabled');
                    }
                }

                if (_this.dataLose){
                     $('#startConfig').addClass('disabled');
                }
                //如果是便签,无论是否拖点,都是enable
                if(_this.templateObj && _this.templateObj.entity.modal.type == 'ModalNote'){
                    $('#startConfig').removeClass('disabled');
                }
            }

            _this.renderEditor();
        },
        initChartPtCog: function(index){
            var $inputUpper = $('#inputPtValUpper');
            var $inputLower = $('#inputPtValLower');
            var $inputUnit = $('#inputPtUnit');
            var $inputAccuracy = $('#inputPtAccuracy');
            var $inputLineVal1 = $('#inputLineVal1');
            var $inputLineName1 = $('#inputLineName1');
            var $inputLineVal2 = $('#inputLineVal2');
            var $inputLineName2 = $('#inputLineName2');
            var $inputLineVal3 = $('#inputLineVal3');
            var $inputLineName3 = $('#inputLineName3');
            var $inputLineVal4 = $('#inputLineVal4');
            var $inputLineName4 = $('#inputLineName4');
            var $inputLineNameTotal = $('.inputLineName');
            var $inputLineValTotal = $('.inputLineVal');
            if (_this.option.dsChartCog && _this.option.dsChartCog[index]){
                $inputUpper.val(_this.option.dsChartCog[index].upper);
                $inputLower.val(_this.option.dsChartCog[index].lower);
                $inputUnit.val(_this.option.dsChartCog[index].unit);
                $inputAccuracy.val(_this.option.dsChartCog[index].accuracy);
                for (var i = 0;i < 4 ;i ++) {
                    $inputLineNameTotal.eq(i).val(_this.option.dsChartCog[index].markLine[i].name);
                    $inputLineValTotal.eq(i).val(_this.option.dsChartCog[index].markLine[i].value);
                    //$inputLineVal2.val(_this.option.dsChartCog[index].lineVal2);
                    //$inputLineName2.val(_this.option.dsChartCog[index].lineName2);
                    //$inputLineVal3.val(_this.option.dsChartCog[index].lineVal3);
                    //$inputLineName3.val(_this.option.dsChartCog[index].lineName3);
                    //$inputLineVal4.val(_this.option.dsChartCog[index].lineVal4);
                    //$inputLineName4.val(_this.option.dsChartCog[index].lineName4);
                }

            }else{
                $('#divChartPointCog').find('input').val('');
            }
            $('#btnPtCogSure').off('click').click(function(){
                if(!_this.option.dsChartCog){
                    _this.option.dsChartCog = [];
                    for (var i=0;i<_this.option.rowDataType.length;++i){
                        _this.option.dsChartCog[i] = {};
                        _this.option.dsChartCog[i].markLine = [{},{},{},{}];
                    }
                }
                if (isNaN(Number($inputUpper.val())) || isNaN(Number($inputLower.val())) || isNaN(Number($inputAccuracy.val())) || isNaN(Number($inputLineVal1.
                        val())) || isNaN(Number($inputLineVal2.val())) || isNaN(Number($inputLineVal3.val())) || isNaN(Number($inputLineVal4.val()))){
                    new Alert($("#configAlert"), "danger", "<strong>" + I18n.resource.modalConfig.err.TYPE10 + "</strong>").show().close();
                    return;
                }
                if ($inputUpper.val() != '' && $inputLower.val() != '' && Number($inputUpper.val()) < Number($inputLower.val())){
                    new Alert($("#configAlert"), "danger", "<strong>" + I18n.resource.modalConfig.err.TYPE12 + "</strong>").show().close();
                    return;
                }
                _this.option.dsChartCog[index].upper = $inputUpper.val();
                _this.option.dsChartCog[index].lower = $inputLower.val();
                _this.option.dsChartCog[index].unit = $inputUnit.val();
                _this.option.dsChartCog[index].accuracy = $inputAccuracy.val();
                for(var i =0 ; i < 4;++i){
                    if (!_this.option.dsChartCog[index].markLine[i]){
                        _this.option.dsChartCog[index].markLine[i] = {}
                    }
                    _this.option.dsChartCog[index].markLine[i].value = $inputLineValTotal.eq(i).val();
                    _this.option.dsChartCog[index].markLine[i].name = $inputLineNameTotal.eq(i).val();
                }
                //_this.option.dsChartCog[index].lineVal1 = $inputLineVal1.val();
                //_this.option.dsChartCog[index].lineName1 = $inputLineName1.val();
                //_this.option.dsChartCog[index].lineVal2 = $inputLineVal2.val();
                //_this.option.dsChartCog[index].lineName2 = $inputLineName2.val();
                //_this.option.dsChartCog[index].lineVal3 = $inputLineVal3.val();
                //_this.option.dsChartCog[index].lineName3 = $inputLineName3.val();
                //_this.option.dsChartCog[index].lineVal4 = $inputLineVal4.val();
                //_this.option.dsChartCog[index].lineName4 = $inputLineName4.val();
                $('#divChartPointCog').css('display','none');
            });
            $('#btnPtCogCancel').off('click').click(function(){
                $inputUpper.val('');
                $inputLower.val('');
                $inputUnit.val('');
                $inputAccuracy.val('');
                $('#divChartPointCog').css('display','none');
            });
            $('#btnPtCogRemove').off('click').click(function(){
                $inputUpper.val('');
                $inputLower.val('');
                $inputUnit.val('');
                $inputAccuracy.val('');
                $('#divChartPointCog').css('display','none');
            });
        },
        initTime: function(){
            var $inputTimeStart = $('#inputTimeStart');
            var $inputTimeEnd = $('#inputTimeEnd');
            /*$inputTimeStart.datetimepicker({
                format: "yyyy-mm-dd hh:ii",
                minView: "hour",
                autoclose: true,
                todayBtn: true,
                initialDate: new Date()
            });*/
            $inputTimeStart.datetimepicker('remove');
            $inputTimeStart.datetime();
            /*$inputTimeEnd.datetimepicker({
                format: "yyyy-mm-dd hh:ii",
                minView: "hour",
                autoclose: true,
                todayBtn: true,
                initialDate: new Date()
            });*/
            $inputTimeEnd.datetimepicker('remove');
            $inputTimeEnd.datetime();

            var $inputCompareDate1 = $('#inputCompareDate1');
            var $inputCompareDate2 = $('#inputCompareDate2');
            /*$inputCompareDate1.datetimepicker({
                format: "yyyy-mm-dd hh:ii",
                minView: "hour",
                autoclose: true,
                todayBtn: true,
                initialDate: new Date()
            });
            $inputCompareDate2.datetimepicker({
                format: "yyyy-mm-dd hh:ii",
                minView: "hour",
                autoclose: true,
                todayBtn: true,
                initialDate: new Date()
            });*/
            $inputCompareDate1.datetimepicker('remove');
            $inputCompareDate2.datetimepicker('remove');
            $inputCompareDate1.datetime();
            $inputCompareDate2.datetime();

            if(_this.optionType) {
                var now = new Date();
                var time = new Date(now - 259200000).format('yyyy-MM-dd HH:mm');
                var initCompareDate1 = new Date(now.getFullYear(),now.getMonth() - 2).format('yyyy-MM-dd HH:mm');//上上个月第一天00:00:00
                var initCompareDate2 = new Date(now.getFullYear(),now.getMonth() - 1).format('yyyy-MM-dd HH:mm');//上个月第一天00:00:00
                if (!sessionStorage.getItem('anlzTimeStart')){
                    $inputTimeStart.val(time);
                    $inputCompareDate1.val(initCompareDate1)
                }
                now = now.format('yyyy-MM-dd HH:mm');
                if(!sessionStorage.getItem('anlzTimeEnd')){
                    $inputTimeEnd.val(now);
                    $inputCompareDate2.val(initCompareDate2)
                }
            }

        },
        initDrag: function(){
            var $divConfigData = $('.divConfigData');
            var $btnConfigStart = $('#startConfig');
            var _this = this;
            $divConfigData.on('dragover', function (e) {
                e.preventDefault();
                $(e.currentTarget).find('.dataDragTip').addClass('addData');
            });
            $divConfigData.on('dragleave', function (e) {
                e.preventDefault();
                $(e.currentTarget).find('.dataDragTip').removeClass('addData');
            });
            var targetId, targetContent;
            var initBtnStartEnable;
            var initDragTipShow = [];
            var index;
            $divConfigData.on('drop',function(e, arg){
                $('.addData').removeClass('addData');
                var $note = $('#noteEditor');
                if(!$note.is(':hidden') && !arg){
                    return;
                }
                if(_this.option.templateType === "ModalAPPMonthHistory" || _this.option.templateType === "ModalAppDiagRanking" || _this.option.templateType ==="ModalDataMonitorList"){
                    var dsItemLength = $(e.currentTarget).find(".rowDataValue>div").length;
                    if(dsItemLength === 2){
                        new Alert($("#configAlert"), "danger", "<strong>" + I18n.resource.modalConfig.err.TYPE13 + "</strong>").show().close();
                        return;
                    }
                }
                //for (var j = 0; j < $divConfigData.length; ++j) {
                //    if ($divConfigData.find('.rowDataValue').eq(j).children().length < _this.option.dataTypeMaxNum[j] + 1) {
                //        initDragTipShow[j] = true;
                //    } else {
                //        initDragTipShow[j] = false
                //    }
                //}
                index = $(e.currentTarget).index() - 1;
                //if(!initDragTipShow[index]){
                //    new Alert($("#configAlert"), "danger", "<strong>" + I18n.resource.modalConfig.err.TYPE1 + "</strong>").show().close();
                //    return;
                //}
                var $rowTempData = $(e.currentTarget).find('.rowDataValue');
                var $dataDragTip = $rowTempData.find('.dataDragTip');
                targetId = EventAdapter.getData().dsItemId;
                //if(e.originalEvent){
                //    targetId = EventAdapter.getData().dsItemId;
                //}else if(arg){
                //    targetId = arg.dataTransfer.getData("dsItemId");
                //}
                if(!targetId)return;
                if (Object.prototype.toString.call(targetId) === '[object Array]') {
                    var len = targetId.length;
                    var isContainue = false;
                    for (var i = 0; i < len; i++) {
                        if ($rowTempData.find('.divDSConfigure[dsid="' + targetId[i] + '"]').length > 0) {
                            //new Alert($("#configAlert"), "danger", "<strong>" + I18n.resource.modalConfig.err.TYPE2 + "</strong>").show().close();
                            //return;
                            targetId.splice(i, i + 1);
                            len = len - 1;
                            i = i - 1;
                        } else {
                            targetContent = AppConfig.datasource.getDSItemById(targetId[i]).alias;
                            var strDSConfig = '<div class="col-lg-3 col-xs-4 divDSConfigure grow" dsid="' + targetId[i] + '"><span class="contentDS" title="' + targetContent + '">' +
                            targetContent +
                            '</span><span class="glyphicon glyphicon-remove btnRemoveDS" aria-hidden="true" ></span></div>';
                            $dataDragTip.before(strDSConfig);
                            $(strDSConfig).tooltip({
                                placement: 'bottom',
                                title: targetContent
                            });
                        }
                    }
                    if (targetId.length < 1) {
                        new Alert($("#configAlert"), "danger", "<strong>" + I18n.resource.modalConfig.err.TYPE2 + "</strong>").show().close();
                    } else {
                        $('#startConfig').removeClass('disabled');
                    }
                } else {
                    var info = AppConfig.datasource.getDSItemById(targetId);
                    targetContent = info.alias===""?info.value:info.alias;
                    if ($rowTempData.find('.divDSConfigure[dsid="' + targetId + '"]').length > 0) {
                        new Alert($("#configAlert"), "danger", "<strong>" + I18n.resource.modalConfig.err.TYPE2 + "</strong>").show().close();
                        return;
                    }
                    var strDSConfig = '<div class="col-lg-3 col-xs-4 divDSConfigure grow" dsid="' + targetId + '"><span class="contentDS" title="' + targetContent + '">' +
                    targetContent +
                    '</span><span class="glyphicon glyphicon-remove btnRemoveDS" aria-hidden="true" ></span></div>';
                    $dataDragTip.before(strDSConfig);
                    $(strDSConfig).tooltip({
                                placement: 'bottom',
                                title: targetContent
                            });
                    $('#startConfig').removeClass('disabled');
                }
                initBtnStartAndDragTip(index);

                $(e.currentTarget).find('.divDSConfigure span').off('click').on('click', function (e) {
                    var $thisPar = $(e.target).parent();
                    var dsid = $thisPar.attr('dsid');
                    $thisPar.remove();
                    if($('.ptLose').length == 0){
                        _this.dataLose = false;
                    }
                    initBtnStartAndDragTip(index);
                    var $dataConfig = $('#dataConfig');
                    $dataConfig.css('height','100%');
                    //$dataConfig.height('');
                    //if($dataConfig.height() > window.innerHeight - 80){
                    //    $dataConfig.css('height','100%');
                    //}
                });
                var $dataConfig = $('#dataConfig');
                if ('AnlzTendency' != _this.option.templateType) {
                    $dataConfig.height('');
                }
                if($dataConfig.height() > window.innerHeight - 80){
                    $dataConfig.css('height','100%');
                }

                if(!$note.is(':hidden') && arg){
                    if (Object.prototype.toString.call(targetId) === '[object Array]') {
                        var len = targetId.length;
                        for (var i = 0; i < len; i++) {
                            targetContent = AppConfig.datasource.getDSItemById(targetId[i]).alias;
                            var format = '&nbsp;<span id = "' + targetId[i] +  '" contenteditable="false" class="pointValue" title="' + targetContent + '"><%' + targetContent + '%></span>&nbsp;';
                            insertHtmlAtCaret(format, targetId[i]);
                        }
                    } else {
                        var format = '&nbsp;<span id = "' + targetId + '" contenteditable="false" class="pointValue" title="' + targetContent + '"><%' + targetContent + '%></span>&nbsp;';
                        insertHtmlAtCaret(format, targetId);
                    }
                    //var format = '&nbsp;<span id = "'+ targetId +'" contenteditable="false" class="pointValue" title="'+ targetContent +'"><%'+ targetContent + '%></span>&nbsp;';
                    //insertHtmlAtCaret(format,targetId);

                    function insertHtmlAtCaret(html,targetId) {
                        var sel, range;
                        //var iframeWin = document.querySelector('iframe').contentWindow;
                        var iframeWin = _this.ue.window;
                        if (iframeWin.getSelection) {
                            sel = iframeWin.getSelection();
                            if (sel.getRangeAt && sel.rangeCount) {
                                range = sel.getRangeAt(0);
                                range.deleteContents();
                                var el = document.createElement("div");
                                el.innerHTML = html;
                                var frag = document.createDocumentFragment(), node, lastNode;

                                while ( (node = el.firstChild) ) {
                                    lastNode = frag.appendChild(node);
                                }
                                range.insertNode(frag);
                                if (lastNode) {
                                    range = range.cloneRange();
                                    range.setStartAfter(lastNode);
                                    range.collapse(true);
                                    sel.removeAllRanges();
                                    sel.addRange(range);
                                }
                                $(iframeWin.document).find('#'+targetId)[0].addEventListener('DOMNodeRemoved', _this.domNodeRemoved, false);
                                //_this.$editor.find('#'+targetId).off('click').on('click',function(e){
                                //    _this.initNotePtCfg(_this.$editor.find('.pointValue').index($(e.target)));
                                //});
                                $(iframeWin.document).find('#' + targetId).off('click').on('click', function (e) {
                                    _this.initNotePtCfg($(iframeWin.document).find('.pointValue').index($(e.target)));
                                });
                            }
                        }
                    }
                }
            });

            function initBtnStartAndDragTip(indexOfDataType){
                var tempDivDS = $divConfigData.find('.rowDataValue').eq(indexOfDataType).children();
                if(_this.option.allDataNeed == true){
                    initBtnStartEnable = true;
                    for (var i = 0;i < $divConfigData.length;++i){
                        if($divConfigData.find('.rowDataValue').eq(i).children().length <= 1){
                            initBtnStartEnable = false;
                            break;
                        }
                    }
                    if(tempDivDS.length > 1){
                        //if (tempDivDS.length > _this.option.dataTypeMaxNum[indexOfDataType]){
                        //    initDragTipShow[indexOfDataType] = false;
                        //}else{
                        //    initDragTipShow[indexOfDataType] = true;
                        //}
                    }else{
                        initBtnStartEnable -= 1;
                        initDragTipShow[indexOfDataType] = true;
                    }
                }else{
                    if($divConfigData.find('.divDSConfigure').length > 0){
                        initBtnStartEnable = true;
                    }else{
                        initBtnStartEnable = false;
                    }
                    //if (tempDivDS.length > _this.option.dataTypeMaxNum[indexOfDataType]){
                    //    initDragTipShow[indexOfDataType] = false;
                    //}else{
                    //    initDragTipShow[indexOfDataType] = true;
                    //}
                }
                if(initBtnStartEnable > 0){
                    $btnConfigStart.removeClass('disabled');
                }else{
                    $btnConfigStart.addClass('disabled');
                }
                //if (initDragTipShow[indexOfDataType]){
                //    tempDivDS.last().css('display','block');
                //}else{
                //    tempDivDS.last().css('display','none');
                //}
                if (_this.dataLose){
                    $btnConfigStart.addClass('disabled');
                }
            }
        },
        initConfigStart: function(){
            var $modalConfig = $('#modalConfig');
            var $inputModal = $('#inputMode');
            document.getElementById('startConfig').onclick = function () {
                if ($(this).hasClass('disabled')) return;
                var tempStartTime, tempEndTime, tempPeriodTime;
                var timeRecent;
                var tempInterval = 0;
                var $inputPeriodValue = $('#inputPeriodValue');
                var periodValue = $inputPeriodValue.val();
                var tempDSId, tempDS, arrItemDS = [];
                var $rowDataValue = $('.rowDataValue');
                var $inputInterval = $('#inputInterval');
                var $inputTimeStart = $('#inputTimeStart');
                var $inputTimeEnd = $('#inputTimeEnd');
                var $inputPeriodUnit = $('#inputPeriodUnit');
                var $inputPeriodDropDown = $('#inputPeriodDropDown');
                var $inputCompareDate1 = $('#inputCompareDate1');
                var $inputCompareDate2 = $('#inputCompareDate2');
                var $inputComparePeriod = $('#inputComparePeriod');
                var $gaugeMode = $('#gaugeMode');
                var $gaugeLowerLimit = $('#gaugeLowerLimit');
                var $gaugeUpperLimit = $('#gaugeUpperLimit');
                var $normalLowerLimit = $('#normalLowerLimit');
                var $normalUpperLimit = $('#normalUpperLimit');
                var $inputRealTimeInterval = $('#inputRealTimeInterval');
                var $optionSelescted = $('#inputRealTimeInterval option:selected').val();//获取选中的采样间隔值
                var $inputHistoryRange = $('#inputHistoryRange');
                var timeType,scaleList;
                var now;
                for (var i = 0; i < $rowDataValue.length; ++i) {
                    tempDS = {};
                    tempDS.type = $rowDataValue[i].parentNode.getAttribute('dataType');
                    tempDSId = [];
                    for (var j = 0; j < $rowDataValue[i].children.length - 1; ++j) {
                        tempDSId.push($rowDataValue[i].children[j].getAttribute('dsid'));
                    }
                    tempDS.arrId = tempDSId;
                    arrItemDS.push(tempDS);
                }
                var totalModeType ={
                    easy:'easy',
                    fixed:'fixed',
                    recent:'recent',
                    realTime:'realTime',
                    //easyEnergy:'easyEnergy',
                    easyCompareAnalyz:'easyCompareAnalyz',
                    easyCompare:'easyCompare',
                    easyCompareToggle:'easyCompareToggle',
                    compareSensor:'compareSensor',
                    compareMeter:'compareMeter',
                    realTimeDashboard:"realTimeDashboard",
                    gauge:'gauge',
                    weather: 'weather',
                    easyHistory:"easyHistory",
                    easyHistorySelect:"easyHistorySelect",
                    multiple:'multiple'
                };

                switch ($inputModal.val()) {
                    case totalModeType['fixed']:
                        tempStartTime = $inputTimeStart.val().toDate().format('yyyy-MM-dd HH:mm');
                        tempEndTime = $inputTimeEnd.val().toDate().format('yyyy-MM-dd HH:mm');
                        if (tempStartTime.toDate() >= tempEndTime.toDate()) {
                            new Alert($("#configAlert"), "danger", "<strong>" + I18n.resource.modalConfig.err.TYPE3 + "</strong>").show().close();
                            return;
                        }
                        if (tempEndTime.toDate() >= new Date()) {
                            new Alert($("#configAlert"), "danger", "<strong>" + I18n.resource.modalConfig.err.TYPE4 + "</strong>").show().close();
                            return;
                        }
                        break;
                    case totalModeType['recent']:
                        tempEndTime = new Date().format('yyyy-MM-dd HH:mm:ss');
                        timeRecent = {
                            val:periodValue,
                            unit:$inputPeriodUnit.val()
                        };
                        switch ($inputPeriodUnit.val()) {
                            case 'hour':
                                tempPeriodTime = periodValue * 3600000;
                                break;
                            case 'day' :
                                tempPeriodTime = periodValue * 86400000;
                                break;
                            case 'month' :
                                tempPeriodTime = periodValue * 2592000000;
                                break;
                            case 'year' :
                                tempPeriodTime = periodValue * 31536000000;
                                break;
                        }
                        now = new Date();
                        tempStartTime = new Date(now - tempPeriodTime).format('yyyy-MM-dd HH:mm:ss');
                        break;
                    case totalModeType['realTime']:
                        tempStartTime = '';
                        tempEndTime = '';
                        break;
                    case totalModeType['easy']:
                        now = new Date();
                        timeRecent = $inputPeriodDropDown.val();
                        switch ($inputPeriodDropDown.val()) {
                            case 'today' :
                                tempPeriodTime = 86400000;
                                tempEndTime = now.format('yyyy-MM-dd HH:mm:ss');
                                tempStartTime = new Date(now - tempPeriodTime).format('yyyy-MM-dd HH:mm:ss');
                                break;
                            case 'yesterday' :
                                var yesterday = new Date();
                                yesterday = new Date(yesterday.setDate(yesterday.getDate() - 1));
                                tempEndTime = new Date(getTimeOfMidnightZero(now).getTime() - 1000).format('yyyy-MM-dd HH:mm:ss');
                                tempStartTime = getTimeOfMidnightZero(yesterday).format('yyyy-MM-dd HH:mm:ss');
                                break;
                            case 'thisWeek':
                                tempPeriodTime = 604800000;
                                tempEndTime = now.format('yyyy-MM-dd HH:mm:ss');
                                tempStartTime = new Date(now - tempPeriodTime).format('yyyy-MM-dd HH:mm:ss');
                                break;
                            case 'lastWeek' :
                                tempPeriodTime = 604800000;
                                tempEndTime = getTimeOfMidnightZero(new Date(now-(now.getDay() + 1) * 86400000)).format('yyyy-MM-dd HH:mm:ss');
                                tempStartTime = getTimeOfMidnightZero(new Date(now-(now.getDay() + 7) * 86400000)).format('yyyy-MM-dd HH:mm:ss');
                                break;
                            case 'thisYear' :
                                tempPeriodTime = 31536000000;
                                tempEndTime = now.format('yyyy-MM-dd HH:mm:ss');
                                tempStartTime = new Date(now - tempPeriodTime).format('yyyy-MM-dd HH:mm:ss');
                                break;
                        }
                        break;
                    case totalModeType['realTimeDashboard']:
                        tempStartTime = '';
                        tempEndTime = '';
                        //tempInterval = $inputInterval.val();
                        tempInterval = $inputRealTimeInterval.val();
                        timeType = $inputRealTimeInterval.val();
                        break;
                    case totalModeType['multiple']:
                        tempStartTime = '';
                        tempEndTime = '';
                        tempInterval = $inputInterval.val();
                        timeType = $inputRealTimeInterval.val();
                        var paraType = arrItemDS;
                        break;
                    case totalModeType['easyCompareAnalyz']:
                        tempPeriodTime = 'month';
                        $inputInterval.val('d1');
                        timeType = $inputComparePeriod.val();
                        tempStartTime = initCompareTime(tempPeriodTime,$inputCompareDate1.val());
                        tempEndTime = initCompareTime(tempPeriodTime,$inputCompareDate2.val());
                        break;
                    case totalModeType['easyCompare']:
                        tempPeriodTime = 'month';
                        $inputInterval.val('d1');
                        timeType = $inputComparePeriod.val();
                        break;
                    case totalModeType['easyCompareToggle']:
                        tempPeriodTime = 'month';
                        $inputInterval.val('d1');
                        timeType = $inputComparePeriod.val();
                        var chartType = $('#inputChartSelect').val();
                        break;
                    case totalModeType['compareSensor']:
                        tempPeriodTime = $inputComparePeriod.val();
                        timeType = $inputComparePeriod.val();
                        tempStartTime = initCompareTime(tempPeriodTime,$inputCompareDate1.val());
                        tempEndTime = initCompareTime(tempPeriodTime,$inputCompareDate2.val());
                        break;
                    case totalModeType['compareMeter']:
                        tempPeriodTime = $inputComparePeriod.val();
                        timeType = $inputComparePeriod.val();
                        tempStartTime = initCompareTime(tempPeriodTime,$inputCompareDate1.val());
                        tempEndTime = initCompareTime(tempPeriodTime,$inputCompareDate2.val());
                        break;
                    case totalModeType['gauge']:
                        if ($gaugeMode.val() == 'high'){
                            scaleList = [$gaugeLowerLimit.val(),$normalLowerLimit.val(),$normalUpperLimit.val(),$gaugeUpperLimit.val()];
                        }else{
                            scaleList = [$gaugeUpperLimit.val(),$normalUpperLimit.val(),$normalLowerLimit.val(),$gaugeLowerLimit.val()];
                        }
                        for (i = 0;i < scaleList.length;i++){
                            if (isNaN(Number(scaleList[i]))){
                                new Alert($("#configAlert"), "danger", "<strong>" + I18n.resource.modalConfig.err.TYPE10 + "</strong>").show().close();
                                return;
                            }
                            scaleList[i] = parseFloat(scaleList[i]);
                        }
                        var tempArr = scaleList.concat();
                        if($gaugeMode.val() =='high'){
                            tempArr.sort(function(a,b){
                                return a > b ? 1: -1
                            });
                        }else{
                            tempArr.sort(function(a,b){
                                return a < b ? 1: -1
                            });
                        }
                        if (tempArr.toString() != scaleList.toString()) {
                            new Alert($("#configAlert"), "danger", "<strong>" + I18n.resource.modalConfig.err.TYPE5 + "</strong>").show().close();
                            return;
                        }
                        break;
                    case totalModeType['weather']:
                        tempStartTime = '';
                        tempEndTime = '';
                        break;
                    case totalModeType['easyHistory']:
                        timeType = $inputHistoryRange.val();
                        break;
                    case totalModeType['easyHistorySelect']:
                        timeType = $inputHistoryRange.val();
                        var chartType = $('#inputChartSelect').val();
                        break;
                    default :
                        break;
                }
                //根据对比周期获取对比开始时间
                function initCompareTime(period,time){
                    var startTime;
                    switch (period){
                        case 'hour':
                            startTime = time.toDate().format('yyyy-MM-dd HH') + ':00:00';
                            break;
                        case 'day' :
                            startTime = time.toDate().format('yyyy-MM-dd') + ' 00:00:00';
                            break;
                        case 'week' :
                            var weekDay = time.toDate().getDay();
                            var date = time.toDate().getDate();
                            startTime = new Date(time.toDate().setDate(date-weekDay + 1)).format('yyyy-MM-dd') + ' 00:00:00';
                            break;
                        case 'month' :
                            startTime = time.toDate().format('yyyy-MM') + '-01 00:00:00';
                            break;
                        default :
                            break;
                    }

                    return startTime;
                }
                //获取指定日期的午夜零点
                function getTimeOfMidnightZero(date){
                    var tempDate;
                    if(date){
                        tempDate = date
                    }else{
                        tempDate = new Date();
                    }
                    return (date.format('yyyy-MM-dd') + ' 00:00:00').toDate();
                }
                if(_this.modalType == "dataAnalysis"){
                    if(_this.optionType){//新建的Slider
                        _this.screen.curModal = {
                            startTime: tempStartTime,
                            endTime: tempEndTime,
                            format: $inputInterval.val(),
                            mode: $inputModal.val(),
                            type: _this.option.templateType,
                            itemDS: arrItemDS,
                            comparePeriod: tempPeriodTime,
                            dsChartCog: _this.option.dsChartCog,
                            noteList: [],
                            graphList: [],
                            timeRecent:timeRecent
                        };
                    }else{
                        _this.screen.curModal = {
                            startTime: tempStartTime,
                            endTime: tempEndTime,
                            format: $inputInterval.val(),
                            mode: $inputModal.val(),
                            type: _this.option.templateType,
                            itemDS: arrItemDS,
                            comparePeriod: tempPeriodTime,
                            dsChartCog: _this.option.dsChartCog,
                            noteList: _this.screen.curModal.noteList,
                            graphList: _this.screen.curModal.graphList,
                            timeRecent:timeRecent
                        };
                    }
                }else if(_this.modalType == "dashboard"){
                    _this.templateObj.entity.modal.option = {timeFormat: $optionSelescted};//把采样间隔值放进option中
                    _this.templateObj.configParams = {};
                    var $divDSConfigure = $('.divDSConfigure');
                    _this.templateObj.entity.modal.title = $('.springSel .chartTitle input').val();
                    _this.templateObj.entity.modal.points = [];
                    _this.templateObj.entity.modal.StartTime = tempStartTime;
                    _this.templateObj.entity.modal.EndTime = tempEndTime;
                    _this.templateObj.entity.modal.dsChartCog = _this.option.dsChartCog;
                    if (_this.option.modeUsable && _this.option.modeUsable[0] && _this.option.templateType === 'ModalAppGauge') {
                        var appGuageList = {};
                        var guageTitle = $('#appGuageTitle').val().trim();
                        //var guageFulTitle = $('#appGuageFulTitle').val().trim();
                        var guageFixed = $('#appGuageDot').val().trim();
                        var guageUnit = $('#appGuageUnit').val().trim();
                        var timeLocal = $('.timeDirectSelect').val();
                        var guageDirect = $('.GuageDirectSelect').val();
                        var guageBgColor = $('.guageBgColor').find('input').val();
                        //var transDataDot =$('#appDataDot').val().trim();
                        if(guageFixed!=='' && !(/^(0|[1-9]\d*)$/.test(guageFixed))){
                            alert('请输入非负整数！');
                            return;
                        }
/*                        if(parseInt(transDataDot)<0||parseInt(transDataDot)>1){
                            alert('请输入0-1之间的小数！');
                            return;
                        }*/
                    }
                    if( _this.option.templateType === 'ModalAppDiagRanking'){
                        var diagType =$('#appDiagRank').find('select.selecTDiagType').val()
                    }
                    if (_this.option.modeUsable && _this.option.modeUsable[0] && _this.option.templateType === 'ModalAppHistory') {
                        var historyTitle = $('#appHistoryTitle').val();
                        //_this.templateObj.entity.modal.desc = appGuageTitle;
                        //_this.templateObj.entity.modal.option.gaugeTitle = appGuageTitle;
                    }
                    if(_this.templateObj.entity.modal.type == 'ModalNote'){
                        //var bodyEditor = document.querySelector('iframe').contentWindow.document.querySelector('body');
                        var $divModalTextSpan = $(_this.ue.body).find('.pointValue');

                        _this.templateObj.entity.modal.modalText = _this.ue.getContent();

                        for(var i = 0;i< $divModalTextSpan.length;++i){
                            _this.templateObj.entity.modal.points.push($divModalTextSpan.get(i).attributes['id'].value);
                        }
                        _this.templateObj.entity.modal.modalTextUrl =_this.editorData;
                    }else{
                        //for(var i = 0;i< $divDSConfigure.length;++i){
                        //    _this.templateObj.entity.modal.points.push($divDSConfigure.get(i).attributes['dsid'].value);
                        //}
                        if(_this.templateObj.entity.modal.type === 'ModalAppPie'){
                            _this.templateObj.entity.modal.points.push($divDSConfigure.get(0).attributes['dsid'].value);
                            WebAPI.post('/analysis/startWorkspaceDataGenPieChart', { dsItemIds: $divDSConfigure.get(0).attributes['dsid'].value }).done(function (result) {
                                var data = JSON.parse(result.dsItemList[0].data);
                                var projectId = data.EnergyList[0].projectId;
                                if(!projectId){
                                    if(AppConfig.project && AppConfig.project.bindId){
                                        projectId = AppConfig.project.bindId;
                                    }else{
                                        projectId = AppConfig.projectId;
                                    }
                                }
                                _this.templateObj.entity.modal.points.push('@'+projectId+'|'+data.EnergyList[0].accumCostPoint);
                                _this.templateObj.entity.modal.points.push('@'+projectId+'|'+data.EnergyList[0].accumEnergyPoint);
                            })
                        }else{
                            for(var i = 0;i< $divDSConfigure.length;++i){
                                _this.templateObj.entity.modal.points.push($divDSConfigure.get(i).attributes['dsid'].value);
                            }
                        }
                    }
                    //_this.templateObj.entity.modal.points = arrItemDS;
                    var option={};
                    timeType && (option.timeType = timeType);
                    scaleList && (option.scaleList = scaleList);
                    paraType && (option.paraType = paraType);
                    chartType && (option.showType = chartType);
                    //appGuageList && (option.appGuageList = appGuageList);
                    if(_this.option.templateType === 'ModalAppGauge'){
                        option['guageTitle'] = guageTitle!==''?guageTitle:null;
                        //option['guageFulTitle'] = guageFulTitle!==''?guageFulTitle:null;
                        option['guageFixed'] = guageFixed!==''?parseInt(guageFixed):null;
                        option['guageUnit'] = guageUnit!==''?guageUnit:null;
                        option['timeLocal'] = timeLocal!==''?timeLocal:null;
                        option['guageDirect'] = guageDirect!==''?guageDirect:null;
                        option['guageBgColor'] = guageBgColor!==''?guageBgColor:null;
                        //option['transDataDot'] = transDataDot!==''?parseFloat(transDataDot):null;
                    }
                    historyTitle && (option.historyTitle = historyTitle);
                    if(_this.option.templateType === 'ModalAppDiagRanking'){
                        option['diagType'] = diagType;
                    }
                }

                $modalConfig.modal('hide');
                _this.newPageFlag = true;
                //Spinner.spin(ElScreenContainer);
                //alert('预计' + + '秒后生成图表')
                if(_this.modalType == 'dataAnalysis') {
                    var yMax = $('#modifyChartYMax').val();
                    var yMin = $('#modifyChartYMin').val();
                    var yUintSpare = $('#modifyChartYUnitEx').find("option:selected").text();
                    yUintSpare = (yUintSpare==='--') ? '' : yUintSpare;
                    if (yMax) {
                        yMax = parseInt(yMax, 10);
                    }
                    if (yMin) {
                        yMin = parseInt(yMin, 10);
                    }
                    var chartOpt = {
                        'chartName' : $('#modifyChartTitle').val(),
                        'yUnit' : $('#modifyChartYUnitName').val() + ' ' + yUintSpare,//$('#modifyChartYUnitEx').find("option:selected").text(),
                        'yMax' : yMax,
                        'yMin' : yMin,
                        'yMark' : $('#modifyChartYMark').val()
                    };
                    _this.screen.curModal.chartOption = chartOpt;
                    _this.screen.renderModal();
                }else if(_this.modalType == 'dashboard'){
                    _this.templateObj.setModalOption(option);
                    _this.templateObj.render();
                }
            }
        },
        close: function(){
            this.screen = null;
            this.container.parentNode.removeChild(this.container);
            this.container = null;
            this.modalType = null;
            this.ue = null;
        },
        initEditor: function(){
            //_this.$editor.find('#'+targetId).off('click').on('click',function(e){
            //    _this.initNotePtCfg(_this.$editor.find('span').index($(e.target)));
            //})
            var _this = this;
            //var bodyEditor, iframe;
            this.editorData = _this.templateObj.entity.modal.modalTextUrl?_this.templateObj.entity.modal.modalTextUrl:[];
            //$('#dataConfig').hide();
            if(!this.ue){
                UE.delEditor('noteEditor');
                this.ue = UE.getEditor('noteEditor',{lang: (I18n.type == 'zh' ? 'zh-cn': 'en')});
                this.ue.ready(function(){
                    $('#noteEditor').slideDown('fast');
                    $('#dataConfig').hide();
                    this.setContent(_this.templateObj.entity.modal.modalText ? _this.templateObj.entity.modal.modalText : '');
                    //iframe = document.querySelector('iframe');
                    //bodyEditor = iframe.contentWindow.document.querySelector('body');
                    $(this.iframe).addClass('gray-scrollbar');
                    this.body.ondrop = dropBody;
                    this.body.ondragover = ondragoverBody;
                    this.body.ondragleave = dragleaveBody;
                    this.body.onmouseup = onmouseupBody;
                    this.body.onkeydown = onkeydownBody;

                    $(this.body).find('.pointValue').each(function(){
                        this.addEventListener('DOMNodeRemoved',_this.domNodeRemoved,false);
                    });
                });
            }else{
                this.ue.setContent(this.templateObj.entity.modal.modalText ? this.templateObj.entity.modal.modalText : '');
            }
            // events
            function dropBody(e){
                e.preventDefault();
                this.focus();
                var $divConfigData = $('#modalConfig').find('.divConfigData');
                $divConfigData.trigger('drop',[e]);
                var $editorPoint = $(_this.ue.body).find('.pointValue');
                var modalTextUrl = _this.editorData?_this.editorData:[];
                var tempModalTexUrl = [];
                var flag;
                for (var i = 0; i < $editorPoint.length; i++){
                    flag = false;
                    for (var  j = 0; j < modalTextUrl.length; j++){
                        if ($editorPoint[i].id == modalTextUrl[j].ptId){
                            tempModalTexUrl[i] = modalTextUrl[j];
                            flag = true;
                            break;
                        }
                    }
                    if (!flag){
                        tempModalTexUrl[i] =
                        {
                            ptId:$editorPoint[i].id,
                            ptName:$editorPoint[i].innerText.match(/\b\w+\b/g),
                            ptTextUrl:[]
                        }
                    }
                }
                _this.editorData = tempModalTexUrl;

            }
            function ondragoverBody (e) {
                e.preventDefault();
                $(e.currentTarget).find('.dataDragTip').addClass('addData');
            }
            function dragleaveBody (e) {
                e.preventDefault();
                $(e.currentTarget).find('.dataDragTip').removeClass('addData');
            }

            function onmouseupBody(e){
                var selection = window.getSelection();
                if(selection.type == "Range"){
                    var content = selection.getRangeAt(0).cloneContents();
                    for(var i in content.childNodes){
                        if(content.childNodes[i].className == 'pointValue'){
                            $('.pointValue').attr("contenteditable",true);
                            _this.isSelection = true;
                            return;
                        }
                    }
                }else{
                    $('.pointValue').attr("contenteditable",false);
                }
                _this.isSelection = false;
            }
            function onkeydownBody(e){
                if(_this.isSelection) window.event.returnValue=false;
            };
        },
        renderEditor: function(){
            var $note = $('#noteEditor');
            var $dataConfig = $('#dataConfig');

            if(this.templateObj && this.templateObj.entity.modal.type == 'ModalNote'){
                $dataConfig.hide();
                $note.show();
                /*if(!_this.$editor) return;
                _this.$editor.html(_this.templateObj.entity.modal.modalText);
                $('.pointValue').each(function(){
                    this.addEventListener('DOMNodeRemoved',_this.domNodeRemoved,false);
                });*/
                if (this.editorData){
                    var $editor = $('#editor');
                    $editor.find('.pointValue').off('click').on('click',function(e){
                        _this.initNotePtCfg($editor.find('.pointValue').index($(e.target)));
                    })
                }
            }else{
                $dataConfig.show();
                $note.hide();
            }
        },
        domNodeRemoved: function(){
            var id = $(this).attr('id');
            //var bodyEditor = document.querySelector('iframe').contentWindow.document.querySelector('body');
            var $target = $('.divDSConfigure[dsid="'+ id +'"]');
            var index = $target.parent().children('.divDSConfigure').index($target);
            setTimeout(function(){
                var newDom = $(_this.ue.body).find('#'+id);
                if(newDom.length < 1){
                    $target.find('.btnRemoveDS').trigger('click');
                    var tempArray = [];
                    for (var i =0; i < _this.editorData.length; i++) {
                        if (i == index)continue;
                        tempArray.push(_this.editorData[i]);
                    }
                    _this.editorData = tempArray;
                }else{
                    newDom[0].addEventListener('DOMNodeRemoved',_this.domNodeRemoved,false);
                }
            },1000);
        },
        initNotePtCfg: function(index){
            var modalTextUrl;
            //var bodyEditor = document.querySelector('iframe').contentWindow.document.querySelector('body');
            var $editorPoint = $(_this.ue.body).find('.pointValue');
            if(_this.editorData && $editorPoint.length == _this.editorData.length){
                modalTextUrl = _this.editorData;
            }else{
                modalTextUrl = [];
                for (var i = 0;i < $editorPoint.length; ++i){
                    modalTextUrl.push(
                        {
                            ptId:$editorPoint[i].id,
                            ptName:$editorPoint[i].innerText.match(/\b\w+\b/g),
                            ptTextUrl:[]
                        }
                    )
                }
            }
            var temp;
            var $tempDivUrl = $('<div class="col-xs-4 "><select type="text" class="form-control inputNotePtCfgUrl"></select></div>');
            var $tempSelUrl = $tempDivUrl.children();
            $tempSelUrl[0].options.add(new Option(I18n.resource.dashboard.show.SELECT_LINK,'',true));
            for(var i in AppConfig.menu){
                var option = new Option(AppConfig.menu[i],i);
                $tempSelUrl[0].options.add(option);
            }
            $tempSelUrl[0].onchange = function(){
                _this.templateObj.entity.modal.link = $tempSelUrl[0].value;
            };
            var strNotePtCfg = new StringBuilder();
            strNotePtCfg.append('<div id="containerNotePtCfg">');
            strNotePtCfg.append('   <span class="glyphicon glyphicon-plus" id="btnNotePtCfgAdd" aria-hidden="true"></span>');
            strNotePtCfg.append('   <span class="glyphicon glyphicon-remove" id="btnNotePtCfgExit" aria-hidden="true"></span>');
            strNotePtCfg.append('   <div class="rowNotePtCfgTitle row">');
            strNotePtCfg.append('       <div class="col-xs-3">Value</div>');
            strNotePtCfg.append('       <div class="col-xs-5">Name</div>');
            strNotePtCfg.append('       <div class="col-xs-4">Url</div>');
            strNotePtCfg.append('   </div>');
            strNotePtCfg.append('   <div id="divNotePtCfg">');
            strNotePtCfg.append('   </div>');
            strNotePtCfg.append('   <div id="divBtnNotePtCfg">');
            strNotePtCfg.append('       <button type="button" class="btn btn-primary" id="btnNotePtCogSure" i18n="modalConfig.data.PT_COG_SURE"></button>');
            strNotePtCfg.append('       <button type="button" class="btn btn-primary" id="btnNotePtCogCancel" i18n="modalConfig.data.PT_COG_CANCEL"></button>');
            strNotePtCfg.append('   </div>');
            strNotePtCfg.append('</div>');
            $('#noteEditor').append(strNotePtCfg.toString());
            strNotePtCfg = new StringBuilder();
            if (modalTextUrl[index] && modalTextUrl[index].ptTextUrl.length > 0){
                for(var i = 0;i < modalTextUrl[index].ptTextUrl.length;i++){
                    temp = modalTextUrl[index].ptTextUrl[i];
                    strNotePtCfg.append('   <div class="row rowNotePtCfg form-group">');
                    strNotePtCfg.append('      <span class="glyphicon glyphicon-remove btnRowNoteCfgRemove" aria-hidden="true"></span> ');
                    strNotePtCfg.append('       <div class="col-xs-3 "><input type="text" class="form-control inputNotePtCfgVal" value="' + temp.value +'"></div>');
                    strNotePtCfg.append('       <div class="col-xs-5 "><input type="text" class="form-control inputNotePtCfgName" value="' + temp.name +'"></div>');
                    //strNotePtCfg.append('       <div class="col-xs-8 "><input type="text" class="form-control inputNotePtCfgUrl" value="' + temp.url +'"></div>');
                    strNotePtCfg.append('   </div>');
                }
            }
            else
            {
                strNotePtCfg.append('   <div class="row rowNotePtCfg form-group">');
                strNotePtCfg.append('      <span class="glyphicon glyphicon-remove btnRowNoteCfgRemove" aria-hidden="true"></span> ');
                strNotePtCfg.append('       <div class="col-xs-3 "><input type="text" class="form-control inputNotePtCfgVal"></div>');
                strNotePtCfg.append('       <div class="col-xs-5 "><input type="text" class="form-control inputNotePtCfgName"></div>');
                //strNotePtCfg.append('       <div class="col-xs-8 "><input type="text" class="form-control inputNotePtCfgUrl"></div>');
                strNotePtCfg.append('   </div>');
            }
            $('#divNotePtCfg').append(strNotePtCfg.toString());
            var $rowNotePtCfg = $('.rowNotePtCfg');
            var tempVal;
            for(var i = 0; i < $rowNotePtCfg.length;i++){
                $rowNotePtCfg.eq(i).append($tempDivUrl.clone());
                tempVal = modalTextUrl[index].ptTextUrl[i] ? modalTextUrl[index].ptTextUrl[i].url:'';
                $rowNotePtCfg.eq(i).find('.inputNotePtCfgUrl').val(tempVal)
            }
            I18n.fillArea($('#divBtnNotePtCfg'));
            var $self = $('#containerNotePtCfg');
            $('#btnNotePtCfgAdd').off('click').on('click',function(e){
                var strRowNotePtCfg = new StringBuilder();
                strRowNotePtCfg.append('   <div class="row rowNotePtCfg form-group">');
                strRowNotePtCfg.append('      <span class="glyphicon glyphicon-remove btnRowNoteCfgRemove" aria-hidden="true"></span> ');
                strRowNotePtCfg.append('       <div class="col-xs-3 "><input type="text" class="form-control inputNotePtCfgVal"></div>');
                strRowNotePtCfg.append('       <div class="col-xs-5 "><input type="text" class="form-control inputNotePtCfgName"></div>');
                //strRowNotePtCfg.append('       <div class="col-xs-8 "><input type="text" class="form-control inputNotePtCfgUrl"></div>');
                strRowNotePtCfg.append('   </div>');
                $('#divNotePtCfg').append(strRowNotePtCfg.toString());
                $('.rowNotePtCfg').last().append($tempDivUrl.clone());
                $('.btnRowNoteCfgRemove').last().off('click').on('click',function(e){
                    var tempPtTextUrl = [];
                    var tempIndex = $('.btnRowNoteCfgRemove').index($(e.target));
                    tempPtTextUrl = [_this.editorData[index].ptTextUrl.slice(0,tempIndex),_this.editorData[index].ptTextUrl.slice(tempIndex + 1)];
                    tempPtTextUrl = tempPtTextUrl[0].concat(tempPtTextUrl[1]);
                    _this.editorData[index].ptTextUrl = tempPtTextUrl.concat();
                    $(e.target).parent().remove();
                });
            });
            $('#btnNotePtCfgExit').off('click').on('click',function(e){
                $self.remove();
            });
            $('#btnNotePtCogSure').off('click').on('click',function(e){
                //var modalTextUrl = _this.templateObj.entity.modal.modalTextUrl?_this.templateObj.entity.modal.modalTextUrl[index]:{};
                $rowNotePtCfg = $('.rowNotePtCfg');
                modalTextUrl[index].ptTextUrl = [];
                for (var j = 0;j < $rowNotePtCfg.length; j++){
                    modalTextUrl[index].ptTextUrl.push({
                        value:$rowNotePtCfg.eq(j).find('.inputNotePtCfgVal').val(),
                        name:$rowNotePtCfg.eq(j).find('.inputNotePtCfgName').val(),
                        url:$rowNotePtCfg.eq(j).find('.inputNotePtCfgUrl').val()
                    })
                }
                _this.editorData = modalTextUrl;
                $self.remove();
            });
            $('#btnNotePtCogCancel').off('click').on('click',function(e){
                $self.remove();
            });
            $('.btnRowNoteCfgRemove').off('click').on('click',function(e){
                var tempPtTextUrl = [];
                var tempIndex = $('.btnRowNoteCfgRemove').index($(e.target));
                tempPtTextUrl = [_this.editorData[index].ptTextUrl.slice(0,tempIndex),_this.editorData[index].ptTextUrl.slice(tempIndex + 1)];
                tempPtTextUrl = tempPtTextUrl[0].concat(tempPtTextUrl[1]);
                _this.editorData[index].ptTextUrl = tempPtTextUrl.concat();
                $(e.target).parent().remove();
            });

        },
        /**
         cycle, $iptTime1 is required
         $iptTime2 is optional
        **/
        setTimePrecision: function(cycle, $iptTime1, $iptTime2){

            var option = {
                format: "yyyy-mm-dd hh:ii",
                autoclose: true,
                todayBtn: true,
                initialDate: new Date(),
                startView: 2
            }
            $iptTime1.datetimepicker('remove');
            $iptTime2 && $iptTime2.datetimepicker('remove');
            /*
            0 or 'hour' for the hour view
            1 or 'day' for the day view
            2 or 'month' for month view (the default)
            3 or 'year' for the 12-month overview
            4 or 'decade' for the 10-year overview. Useful for date-of-birth datetimepickers.*/
            switch (cycle){
                case 'm1':
                    option.minView = 0;
                    break;
                case 'm5':
                    option.minView = 0;
                    break;
                case 'h1':
                    option.minView = 1;
                    option.format = "yyyy-mm-dd hh:00";
                    break;
                case 'd1':
                    option.minView = 2;
                    option.format = "yyyy-mm-dd 00:00";
                    break;
                case 'M1':
                    option.minView = 3;
                    option.startView = 3;
                    option.format = "yyyy-mm-01 00:00";
                    break;
                default :
                    option.minView = 2;
                    option.format = "yyyy-mm-dd 00:00";
                    break;
            }
            /*$iptTime1.datetimepicker(option);
            $iptTime2 && $iptTime2.datetimepicker(option);*/
            $iptTime1.datetime();
            $iptTime2 && $iptTime2.datetime();
        },
        /**
         * input的data-format 转换为 Date数据格式的format
         */
        getDateFmtByInputFmt: function(inputFmt){
            var arrFmt = inputFmt.split(' ');
            var dtFmt = '';
            for(var i = 0; i < arrFmt.length; i++){
                if(/yyyy(.)mm(.)dd/.test(arrFmt[i])){//
                    dtFmt += arrFmt[i].replace(/mm/, 'MM');
                }
                if(/hh:ii/.test(arrFmt[i])){
                    dtFmt += ' HH:mm';
                }
            }
            return dtFmt;
        }
    };
    return modalConfigurePane;
})();

var DiagnosisInfo = (function () {
    var _this;
    function DiagnosisInfo() {
        this.diagnosisDetailInfo =undefined;
        this.$disgnosisDetailInfoModal = undefined;
        _this = this;
    }

    DiagnosisInfo.prototype = {
        show: function (diagnosisDetailInfo) {
            var _this = this;
            this.diagnosisDetailInfo =diagnosisDetailInfo;
            WebAPI.get("/static/views/observer/diagnosis/diagnosisInfo.html").done(function (resultHtml) {
                _this.$disgnosisDetailInfoModal = $('#disgnosisDetailInfoModal');
                if(_this.$disgnosisDetailInfoModal.length===0) {
                    _this.diagnosisDetailInfo.containerScreen.append(resultHtml);
                    _this.$disgnosisDetailInfoModal = $('#disgnosisDetailInfoModal');
                }else{
                    _this.$disgnosisDetailInfoModal.find('.diagnosisTable tbody').html('');
                }
                I18n.fillArea(_this.$disgnosisDetailInfoModal);
                _this.$disgnosisDetailInfoModal.modal('show');
                var currentType = _this.diagnosisDetailInfo.diagType;
                _this.$disgnosisDetailInfoModal.find('h4.modal-title').text(_this.diagnosisDetailInfo.faultName);
                var timeFormatStr = timeFormatChange('yyyy-mm-dd hh');
                function initDefaultDate(n,timeUnit) {
                    var curr_date = new Date();
                    if (timeUnit === 'd') {
                    curr_date.setDate(curr_date.getDate() + n);
                    } else if (timeUnit === 'M') {
                        curr_date.setMonth(curr_date.getMonth() + n);
                    } else if (timeUnit === 'y') {
                        curr_date.setFullYear(curr_date.getFullYear() + n);
                    }
                    var strYear = curr_date.getFullYear();
                    var strMonth = curr_date.getMonth()+1;
                    var strDay = curr_date.getDate();
                    var strHours = curr_date.getHours();
                    var strMinutes = curr_date.getMinutes();

                    var datastr = strYear + '-' + formatNumber(strMonth) + '-'
                        + formatNumber(strDay) +' '+ formatNumber(strHours) + ':' + formatNumber(strMinutes);
                    return datastr;
                }
                function formatNumber(value){
                    return (value < 10 ? '0' : '') + value;
                }
                $('#startTimeCog').datetimepicker({
                    format: timeFormatStr+":00",
                    autoclose: true,
                    minView:1,
                    startView: 2,
                    forceParse: false
                }).val(new Date(initDefaultDate(-1,'M')+':00').timeFormat(timeFormatChange('yyyy-mm-dd'))+' 00:00');
                $('#endTimeCog').datetimepicker({
                    format: timeFormatStr+":00",
                    autoclose: true,
                    minView: 1,
                    forceParse: false,
                    startView:2
                }).val(new Date().timeFormat(timeFormatStr)+':00');
                //Spinner.spin($dialog.find('.modal-body')[0]);

                //_this.bindEvent();
                _this.init();
                _this.addEvents();
                Spinner.stop();
            });
        },

        close: function () {
            this.diagnosisDetailInfo = null;
            this.$disgnosisDetailInfoModal.empty().remove();
            this.$disgnosisDetailInfoModal = null;
        },
        addEvents:function(){
            var _this = this;
            $('#checkDiagnosis').off('click').click(function(){
                _this.$disgnosisDetailInfoModal.find('.diagnosisTable tbody').html('');
                var currentType = $(_this.diagnosisDetailInfo.containerScreen.context).find('.diagRanking').attr('data-type');
                var diagType = currentType?currentType:_this.diagnosisDetailInfo.diagType;
                var startTime = timeFormat($('#startTimeCog').val()+':00','yyyy-mm-dd hh:ii:ss');
                var endTime = timeFormat($('#endTimeCog').val()+':00','yyyy-mm-dd hh:ii:ss');
                if(new Date(startTime).valueOf()>new Date(endTime).valueOf()){
                    alert(I18n.resource.modalConfig.modalApp.TIME_ERROR);
                    return;
                }
                Spinner.spin($('#disgnosisDetailInfoModal')[0]);
                var postData = {
                    //faultName:_this.diagnosisDetailInfo.faultName,
                    value:_this.diagnosisDetailInfo.faultName,
                    type:diagType,
                    startTime:startTime,
                    endTime:endTime,
                    projId: AppConfig.projectId
                }
                WebAPI.post('/diagnosis/getFaultDetails',postData).done(function(faultDetailCl){
                    _this.diagnosisDetailInfo.faultDetailData = faultDetailCl.data;
                    _this.init();
                    Spinner.stop();
                })
                //    .always(function(){
                //    Spinner.stop();
                //});
            });
            //发送工单按钮
            $('#sendOrder').off('click').click(function(){
                var resultData = _this.diagnosisDetailInfo.faultDetailData;
                var nowZeroValue = new Date(new Date().format('yyyy-MM-dd 00:00:00')).valueOf();
                var desc = '';
                var wiInstance;
                for(var i = 0;i<resultData.length;i++){
                    var item = resultData[i].arrNoticeTime;
                    if(item&&item.length>0){
                        for(var j = 0;j<item.length;j++){
                            var itemValueOf = new Date(item[j].Time).valueOf();
                            if(itemValueOf>=nowZeroValue){
                                desc+=item[j].EquipmentName+', ';
                            }
                        }
                    }
                }
                var back = function () {
                    wiInstance = null;
                };
                desc = desc.substring(0,desc.length-2);
                wiInstance = new WorkflowInsert({
                    noticeId: '',
                    title: _this.diagnosisDetailInfo.faultName,
                    detail:desc,
                    dueDate: new Date(+new Date() + 172800000).format('yyyy-MM-dd'), //结束时间为两天后
                    critical: 2,
                    projectId: AppConfig.projectId,
                    chartPointList: '',
                    chartQueryCircle: 'm5',
                    description: desc,
                    name: _this.diagnosisDetailInfo.faultName,
                    time: new Date().format('yyyy-MM-dd HH:mm:ss'),
                    chartStartTime: new Date(new Date().getTime() - 43200000).format('yyyy-MM-dd HH:mm:ss'), //报警发生前半天12 * 60 * 60 * 1000
                    chartEndTime: new Date(new Date().getTime() + 43200000).format('yyyy-MM-dd HH:mm:ss') //报警发生后半天12 * 60 * 60 * 1000
                });
                wiInstance.show().submitSuccess(function(taskModelInfo, uploadFiles) {
                    //insertCallback(taskModelInfo);
                    this.close();
                    back();
                }).cancel(function() {
                    back();
                }).fail(function() {
                    Alert.danger($("#workflow-insert-container"), I18n.resource.workflow.main.CREATE_WORKFLOW_FAILED).showAtTop(2000);
                });
                return
            });
        },
        init:function(){
            var _this = this;
            var detailInfoData = _this.diagnosisDetailInfo.faultDetailData;
            
            var pageCount = 20;
            var tatalPage = Math.ceil(detailInfoData.length/pageCount);
            var pageIndex = 0;
            
            
            var rankType = $(_this.diagnosisDetailInfo.containerScreen.context).find('.diagRanking').attr('data-type');
            var diagnosisHead = '';
            if(rankType==='equipment'){
                    diagnosisHead = '<tr">\
                        <th  width="20%">'+I18n.resource.modalConfig.modalApp.ZONE+'</th>\
                        <th width="20%">'+I18n.resource.modalConfig.modalApp.TIMES+'</th>\
                        <th>'+I18n.resource.modalConfig.modalApp.FREQUENCY+'</th>\
                        </tr>';
            }else if(rankType==='zone'){
                diagnosisHead = '<tr">\
                        <th  width="30%">'+I18n.resource.modalConfig.modalApp.ZONE+'</th>\
                        <th>'+I18n.resource.modalConfig.modalApp.FREQUENCY+'</th>\
                        </tr>';
            }else{
                diagnosisHead = '<tr">\
                        <th  width="15%">'+I18n.resource.modalConfig.modalApp.ZONE+'</th>\
                        <th  width="15%">'+I18n.resource.modalConfig.modalApp.EQUIPMENT+'</th>\
                        <th width="15%">'+I18n.resource.modalConfig.modalApp.TIMES+'</th>\
                        <th>'+I18n.resource.modalConfig.modalApp.FREQUENCY+'</th>\
                        </tr>';
            }
            _this.$disgnosisDetailInfoModal.find('.diagnosisTable thead').html('');
            _this.$disgnosisDetailInfoModal.find('.diagnosisTable thead').append(diagnosisHead);

            $('#btnLoadMore').off('click').remove();
            if(tatalPage > 1){//大于1页
                var arrRender = _this.diagnosisDetailInfo.faultDetailData.slice(pageIndex*pageCount, (++pageIndex)*pageCount);
                var $btnMore = $('<div id="btnLoadMore" style="text-align:center;padding: 15px;cursor:pointer;">'+I18n.resource.workflow.pageInfo.LOAD_MORE+'</div>');
                $btnMore.off('click').on('click', e => {
                    arrRender = _this.diagnosisDetailInfo.faultDetailData.slice(pageIndex*pageCount, (++pageIndex)*pageCount);
                    arrRender.length > 0 && this.renderDate(arrRender);

                    if(pageIndex*pageCount >= _this.diagnosisDetailInfo.faultDetailData.length){
                        $btnMore.off('click').text('没有更多了').css({cursor:'initial'});
                    }
                });
                this.renderDate(arrRender);
                $('.diagnosisAllBox').append($btnMore);
            }else{
                this.renderDate(_this.diagnosisDetailInfo.faultDetailData);
            }
            
        },

        renderDate(detailInfoData){
            var rankType = $(_this.diagnosisDetailInfo.containerScreen.context).find('.diagRanking').attr('data-type');
            var currentnowType = _this.diagnosisDetailInfo.diagType?_this.diagnosisDetailInfo.diagType:'fault';
            var timeIntervalObj = _this.timeInterval();
            for(var i = 0;i<detailInfoData.length;i++){
                var diagnosisDetailTr = '';
                if(rankType==='equipment'){
                    diagnosisDetailTr = '<tr class="diagnosisDetailTr" data-faultId="'+detailInfoData[i].FaultId+'">\
                        <td>'+detailInfoData[i].SubBuildingName+'</td>\
                        <td>'+detailInfoData[i].arrNoticeTime.length+'</td>\
                        <td class="spectrumCommen">'+
                            spectrumCreate(detailInfoData[i])
                        +'</td>\
                        </tr>';
                }else if(rankType==='zone'){
                    diagnosisDetailTr = '<tr class="diagnosisDetailTr" data-faultId="'+detailInfoData[i].FaultId+'">\
                        <td>'+detailInfoData[i].SubBuildingName+'</td>\
                        <td class="spectrumCommen">'+
                            spectrumCreate(detailInfoData[i])
                        +'</td>\
                        </tr>';
                }else{
                    diagnosisDetailTr = '<tr class="diagnosisDetailTr" data-faultId="'+detailInfoData[i].FaultId+'">\
                        <td>'+detailInfoData[i].SubBuildingName+'</td>\
                        <td>'+detailInfoData[i].EquipmentName+'</td>\
                        <td>'+detailInfoData[i].arrNoticeTime.length+'</td>\
                        <td class="spectrumCommen">'+
                            spectrumCreate(detailInfoData[i])
                        +'</td>\
                        </tr>';
                }
                 _this.$disgnosisDetailInfoModal.find('.diagnosisTable tbody').append(diagnosisDetailTr);
                if(currentnowType=='fault'||currentnowType=='workhours'){
                     $('.spectrumDivCh').hide();
                     $('.zoneApart').show();
                }else{
                    $('.spectrumDivCh').show();
                    $('.zoneApart').hide();
                }
                var tooltipTemplate = '<div class="tooltip tplItemTooltip diagnosisTableTool gray-scrollbar" role="tooltip" style="border-radius:5px">' +
                    '<div class="tooltip-arrow"></div>'+
                   // '<div class="tooltip-inner tooltipTitle">预览</div>' +
                    '<div class="tooltipContent diagnosisDetailTrContent clearfix">'+
                    '</div>' +
                    '</div>';
                var options = {
                    placement:'auto bottom',
                    title:'预览',
                    delay:{ show: 200, hide: 200 },
                    template:tooltipTemplate
                };
                var $spectrumDivCh = _this.$disgnosisDetailInfoModal.find('.spectrumDivCh');
                $spectrumDivCh.tooltip(options);
                $spectrumDivCh.off('shown.bs.tooltip').on('shown.bs.tooltip',function() {
                    var $this = $(this);
                    Array.prototype.notempty = function(){
                        return this.filter(t => t!=undefined && t!==null&&t!=='');
                    }
                    function timecount(){
                        var dataTimeArrList = $this.attr('data-timeList').split(',');
                        var dataFaultCurrent = $this.attr('data-faultName').split('*').notempty();
                        var timeDayCountDom = '';
                        for(var i = 0;i<dataTimeArrList.length;i++){
                            currentFault = JSON.parse(dataFaultCurrent[i].replace(/'/g, '"'));
                            timeDayCountDom+='<div class="timeDayCount" style="border-top:1px solid #333">'+I18n.resource.modalConfig.modalApp.FAULT_NAME+'</div>'+
                                '<div class="timeDayCount">'+currentFault.FaultName+'</div>'+
                                '<div class="timeDayCount">'+I18n.resource.modalConfig.modalApp.EQUIPMENT_NAME+'</div>'+
                                '<div class="timeDayCount">'+currentFault.EquipmentName+'</div>'+
                                '<div class="timeDayCount">'+I18n.resource.modalConfig.modalApp.TIME_TITLE+'</div>'+
                                '<div class="timeDayCount">'+dataTimeArrList[i]+'</div>';
                        }
                        return timeDayCountDom;
                    }
                    var tooltipContent = '<div class="timeDayCount">'+$this.attr('data-title')+'</div>'+
                            //'<div class="timeDayCount">'+I18n.resource.modalConfig.modalApp.FAULT_NAME+'</div>'+
                            //'<div class="timeDayCount">'+$this.attr('data-faultName')+'</div>'+
                            //'<div class="timeDayCount">'+I18n.resource.modalConfig.modalApp.EQUIPMENT_NAME+'</div>'+
                            //'<div class="timeDayCount">'+$this.attr('data-equipmentName')+'</div>'+
                            '<div class="timeDayCount">'+I18n.resource.modalConfig.modalApp.TIME_DOT+'</div>'+timecount();
                    var $diagnosisDetailTrContent = $('.diagnosisDetailTrContent');
                    $diagnosisDetailTrContent.html('');
                    $diagnosisDetailTrContent.html(tooltipContent);
                })
            }

            function unique(arr) {//去重复
                var result = [], hash = {};
                for (var i = 0, elem; (elem = arr[i]) != null; i++) {
                    if (!hash[elem]) {
                        result.push(elem);
                        hash[elem] = true;
                    }
                }
                return result;
            }

            function spectrumCreate(detailInfoData){
                var spectrumDiv='';
                var faultZoneArr = {};
                
                for(var m = 0;m<timeIntervalObj.length;m++){
                    var detailInfoI = timeIntervalObj[m];
                    var faultTimeArr = {};
                    faultTimeArr['time'] = [];
                    faultTimeArr['counts'] = [];
                    faultTimeArr['timeArr'] = [];
                    faultTimeArr['timeDetails'] = [];
                    faultTimeArr['checkTime'] = [];

                    for(var n = 0;n<detailInfoI.length;n++){
                        var timeArr = [];
                        var count = 0;
                        var timeDetailsArr = [];
                        var hourPrimTime =detailInfoI[n].split(' ')[0]+' '+detailInfoI[n].split(' ')[1].split(':')[0];
                        for(var k = 0;k<detailInfoData.arrNoticeTime.length;k++){
                            var noticeTime =detailInfoData.arrNoticeTime[k].Time;
                            var hourCompaTime =noticeTime.split(' ')[0]+' '+noticeTime.split(' ')[1].split(':')[0];
                            if(hourPrimTime==hourCompaTime){
                                count = count+1;
                                if(currentnowType=='fault'||currentnowType=='workhours'){
                                    var nowCheckT = detailInfoData.arrNoticeTime[k].CheckTime?detailInfoData.arrNoticeTime[k].CheckTime:null;
                                    faultTimeArr.checkTime.push(nowCheckT);
                                }
                                faultTimeArr.time.push(hourPrimTime);
                                timeArr.push(noticeTime);
                                timeDetailsArr.push(detailInfoData.arrNoticeTime[k]);
                            }
                        }
                        if(count!==0) {
                            faultTimeArr.timeArr.push(timeArr);
                            faultTimeArr.counts.push(count);
                            faultTimeArr['timeDetails'].push(timeDetailsArr);
                            faultZoneArr = faultTimeArr;
                        }
                    }
                    //区间模式
                    if((currentnowType=='fault'||currentnowType=='workhours')&&faultTimeArr.timeArr.length!==0){
                        var timeOne = faultTimeArr.timeArr[0];
                        var timeTwo = faultTimeArr.checkTime[0]?faultTimeArr.checkTime[0]:new Date().format('yyyy-MM-dd HH:mm:ss');
                        var timeStartF,timeEndF, timeStartA = new Date(timeFormat($('#startTimeCog').val())), timeEndA = new Date(timeFormat($('#endTimeCog').val()));
                        if(new Date(timeOne).valueOf()>new Date(timeTwo).valueOf()){
                            timeStartF = timeTwo;
                            timeEndF = timeOne;
                        }else{
                            timeStartF = timeOne;
                            timeEndF = timeTwo;
                        }

                        //开始时间结束时间格式化为 yyyy-MM-dd 00:00:00
                        timeStartA.setHours(0);
                        timeStartA.setMinutes(0);
                        timeStartA.setSeconds(0);

                        timeEndA.setHours(0);
                        timeEndA.setMinutes(0);
                        timeEndA.setSeconds(0);

                        //求相隔天数
                        var daysApart = (timeEndA.valueOf()-timeStartA.valueOf())/86400000+1;
                        //开始时间与最左边时间相隔小时数（可求left值）
                        var startTimeNum = (new Date(timeStartF).valueOf()-new Date(timeFormat($('#startTimeCog').val())).valueOf())/3600000;
                        //结束时间与开始时间相隔小时数（可求width值）
                        var endStartNum= (new Date(timeEndF).valueOf()-new Date(timeStartF).valueOf())/3600000;
                        var leftValue = startTimeNum*100/(daysApart*24);
                        var widthValue = endStartNum*100/(daysApart*24);
                        //zoneApart前置
                        spectrumDiv= '<div class="zoneApart" style="position:absolute;top:4.5px;height:26px;z-index:33;width:'+widthValue+'%;left:'+leftValue+'%;" title="'+timeStartF+' - '+timeEndF+'"></div>' + spectrumDiv
                    }
                    if(m%2===0){
                        spectrumDiv += '<div class="spectrumDiv" title="'+timeFormat(detailInfoI[0].split(' ')[0],timeFormatChange('yyyy-mm-dd'))+'" style="width:'+100/timeIntervalObj.length+'%;background:-webkit-linear-gradient(top,#f0f4fb,#e4ecf9);position:relative">'+spectrumDivChild(faultTimeArr)+'</div>';
                    }else{
                        var evenColor = '-webkit-linear-gradient(top,#ffffff,#f0f4fb)';
                        spectrumDiv += '<div class="spectrumDiv" title="'+timeFormat(detailInfoI[0].split(' ')[0],timeFormatChange('yyyy-mm-dd'))+'" style="width:'+100/timeIntervalObj.length+'%;background:-webkit-linear-gradient(top,#ffffff,#f0f4fb);position:relative">'+spectrumDivChild(faultTimeArr)+'</div>';
                    }
                }

                return spectrumDiv
            }

            function spectrumDivChild(faultTimeArr){
                //var rgbArrColor = _this.hslOrRgb(count);
                var faultTimeArrTime =  unique(faultTimeArr.time);
                var faultTimeArrCount = faultTimeArr.counts;
                var faultTimeArrTimeList = faultTimeArr.timeArr;
                var faultContenList = faultTimeArr.timeDetails;
                var spectrumDivCh = '';
                for(var p = 0;p<faultTimeArrTime.length;p++){
                    var cuerH = parseInt(faultTimeArrTime[p].split(' ')[1]);
                    var currentTimeList = faultTimeArrTimeList[p];
                    var faultCurent = faultContenList[p];
                    var dataFaultJsonStr = '';
                    for(var i = 0;i<faultCurent.length;i++){
                        dataFaultJsonStr+=JSON.stringify(faultCurent[i]).replace(/\"/g,"'")+'*';
                    }
                    spectrumDivCh += '<div class="spectrumDivCh" data-faultName="'+dataFaultJsonStr+'" data-timeList="'+currentTimeList+'" data-title="'+timeFormat(faultTimeArrTime[p]+':00:00',timeFormatChange('yyyy-mm-dd hh:ii:ss'))+'('+faultTimeArrCount[p]+')'+'" style="width:'+100/24+'%;height:26px;display:inline-block;background:rgba(193, 33, 33, 0.8);position:absolute;top:0;left:'+100*((cuerH<1?1:cuerH)-1)/24+'%"></div>'
                }
                return spectrumDivCh
            }
        },

        hslOrRgb:function(n){
            //十六进制颜色值的正则表达式
            var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
            String.prototype.colorRgb = function () {
                var sColor = this.toLowerCase();
                if (sColor && reg.test(sColor)) {
                    if (sColor.length === 4) {
                        var sColorNew = "#";
                        for (var i = 1; i < 4; i += 1) {
                            sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));
                        }
                        sColor = sColorNew;
                    }
                    //处理六位的颜色值
                    var sColorChange = [];
                    for (var i = 1; i < 7; i += 2) {
                        sColorChange.push(parseInt("0x" + sColor.slice(i, i + 2)));
                    }
                    return "RGB(" + sColorChange.join(",") + ")";
                } else {
                    return sColor;
                }
            };
            function rgbToHsl(r, g, b) {
                r /= 255, g /= 255, b /= 255;
                var max = Math.max(r, g, b), min = Math.min(r, g, b);
                var h, s, l = (max + min) / 2;

                if (max == min) {
                    h = s = 0; // achromatic
                } else {
                    var d = max - min;
                    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                    switch (max) {
                        case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                        case g: h = (b - r) / d + 2; break;
                        case b: h = (r - g) / d + 4; break;
                    }
                    h /= 6;
                }

                return [h, s, l];
            }
            function hslToRgb(h, s, l) {
                var r, g, b;

                if (s == 0) {
                    r = g = b = l; // achromatic
                } else {
                    var hue2rgb = function hue2rgb(p, q, t) {
                        if (t < 0) t += 1;
                        if (t > 1) t -= 1;
                        if (t < 1 / 6) return p + (q - p) * 6 * t;
                        if (t < 1 / 2) return q;
                        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
                        return p;
                    }

                    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                    var p = 2 * l - q;
                    r = hue2rgb(p, q, h + 1 / 3);
                    g = hue2rgb(p, q, h);
                    b = hue2rgb(p, q, h - 1 / 3);
                }

                return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
            }

            var colorBasic = '#055197';//'#2e6da4';
            var rgb = colorBasic.colorRgb().split("(")[1].split(")")[0];

            var r = rgb.split(",")[0];
            var g = rgb.split(",")[1];
            var b = rgb.split(",")[2];
            var hsl = rgbToHsl(r, g, b);
            var hslCo;
            if(n===0){
                hsl[2] = 1;
            }else if(n===1){
                hsl[2] = 0.92;
                hslCo = 0.88;
            }else{
                hsl[2] = 96-n*3<10?10:(96-n*3);
                hsl[2] = hsl[2]/100;
                
                hslCo = 96-n*5<10?10:(96-n*5);
                hslCo = hslCo/100
            }
            var rgbStartColor = hslToRgb(hsl[0], hsl[1], hsl[2]);
            var rgbStartColor1 =hslToRgb(hsl[0], hsl[1], hslCo);
            if(n===0) {
                //return 'rgb(' + rgbStartColor[0] + ',' + rgbStartColor[1] + ',' + rgbStartColor[2] + ')';
                return '-webkit-linear-gradient(top,#f0f4fb,#e4ecf9)';//#eff3fc,#dce7f7
            }else {
                return 'rgba(193, 33, 33, 0.8)';
                //return '-webkit-linear-gradient(top,rgb('+ rgbStartColor[0] + ',' + rgbStartColor[1] + ',' + rgbStartColor[2] + '),rgb(' + rgbStartColor1[0] + ',' + rgbStartColor1[1] + ',' + rgbStartColor1[2] + '))';
                //return '-webkit-gradient(linear,center top,center bottom,from(rgb('+ rgbStartColor[0] + ',' + rgbStartColor[1] + ',' + rgbStartColor[2] + ')), to(rgb(' + rgbStartColor1[0] + ',' + rgbStartColor1[1] + ',' + rgbStartColor1[2] + ')))';
            }
        },
        timeInterval:function(){
            var timeIntervalObj = {};
            var startTimeCogVal = timeFormat($('#startTimeCog').val()+':00', 'yyyy-mm-dd hh:ii:ss');
            var endTimeCogVal = timeFormat($('#endTimeCog').val()+':00','yyyy-mm-dd hh:ii:ss');
            var startYear = parseInt(startTimeCogVal.split('-')[0]);
            var startMonth = parseInt(startTimeCogVal.split('-')[1]);
            var startDay = parseInt(startTimeCogVal.split(' ')[0].split('-')[2]);
            var endYear = parseInt(endTimeCogVal.split('-')[0]);
            var endMonth = parseInt(endTimeCogVal.split('-')[1]);
            var endDay = parseInt(endTimeCogVal.split(' ')[0].split('-')[2]);
            var startHour = parseInt(startTimeCogVal.split(' ')[1].split(':')[0]);
            startHour = startHour===0?24:startHour;

            var endHour = parseInt(endTimeCogVal.split(' ')[1].split(':')[0]);
            endHour = endHour===0?24:endHour;
            var monthLength = 0;//开始时间与结束时间的间隔小时数
            var monthArrCount = [];//开始时间与结束时间的间隔小时数组
            var monthDayArr = [];//以一天做间隔的二维数组如[[2016-09-09 00:00:00...2016-09-09 23:00:00],[2016-09-10 00:00:00...2016-09-10 23:00:00]]
            if(new Date(startTimeCogVal).valueOf()>new Date(endTimeCogVal).valueOf()){
                alert(I18n.resource.modalConfig.modalApp.TIME_ERROR);
                return;
            }
            if(endYear-startYear>1){
                alert(I18n.resource.modalConfig.modalApp.TIME_INTERVAL);
                return;
            }else{
                if(startMonth===endMonth){
                    if(startDay===endDay){
                        var monthDay = [];//一天的小时间隔数组；
                        startHour = startHour===24?0:startHour;
                        var intervalHour = endHour-startHour;
                        monthLength+=intervalHour+1;
                        for(var i = 0;i<=intervalHour;i++){
                            var currentTimes
                            var startHourF = startHour+i>9?(startHour+i):('0'+(startHour+i).toString());
                            if(startHourF===24){
                                startHourF='00';
                                currentTimes = startYear+'-'+(startMonth>9?startMonth:('0'+startMonth.toString()))+'-'+(startDay+1>9?(startDay+1):('0'+(startDay+1).toString()))+' '+startHourF+':00:00';
                                monthArrCount.push(currentTimes);
                                monthDay.push(currentTimes);
                            }else{
                                currentTimes = startYear+'-'+(startMonth>9?startMonth:('0'+startMonth.toString()))+'-'+(startDay>9?startDay:('0'+startDay.toString()))+' '+startHourF+':00:00';
                                monthArrCount.push(currentTimes);
                                monthDay.push(currentTimes);
                            }
                        }
                        monthDayArr.push(monthDay);
                    }else{
                        startHour = startHour===24?0:startHour;
                        var startDayHour =24 - startHour+1;
                        //开始时刻的时间间隔
                        monthLength += startDayHour;
                        var monthDay = [];
                        for(var i = 0;i<startDayHour;i++){
                            var currentTimes;
                            var startDayHourF = startHour+i>9?(startHour+i):('0'+(startHour+i).toString());
                            //startDayHourF = startDayHourF===24?'00':startDayHourF;
                            if(startDayHourF===24){
                                startDayHourF='00';
                                currentTimes = startYear+'-'+(startMonth>9?startMonth:('0'+startMonth.toString()))+'-'+(startDay+1>9?(startDay+1):('0'+(startDay+1).toString()))+' '+startDayHourF+':00:00';
                                monthArrCount.push(currentTimes);
                                monthDay.push(currentTimes);
                            }else{
                                currentTimes = startYear+'-'+(startMonth>9?startMonth:('0'+startMonth.toString()))+'-'+(startDay>9?startDay:('0'+startDay.toString()))+' '+startDayHourF+':00:00'
                                monthArrCount.push(currentTimes);
                                monthDay.push(currentTimes);
                            }
                            //monthArrCount.push(startYear+'-'+(startMonth>9?startMonth:('0'+startMonth.toString()))+'-'+(startDay>9?startDay:('0'+startDay.toString()))+' '+startDayHourF+':00:00');
                        }
                        monthDayArr.push(monthDay);
                        //中间时刻的间隔
                        if(endDay-startDay>1){
                            var intervalDays = endDay-startDay;
                            for(var i = 1;i<intervalDays;i++){
                                var monthDays = [];
                                monthLength+=24;
                                for(var j =1;j<=24;j++ ){
                                    var currentTimes;
                                    var endHourCur = (j>9?j:'0'+j.toString());
                                    //endHourCur = endHourCur===24?'00':endHourCur;
                                    if(endHourCur===24){
                                        endHourCur='00';
                                        currentTimes =startYear+'-'+(startMonth>9?(startMonth):('0'+(startMonth).toString()))+'-'+(startDay+i+1>9?(startDay+i+1):('0'+(startDay+i+1).toString()))+' '+endHourCur+':00:00' ;
                                        monthArrCount.push(currentTimes);
                                        monthDays.push(currentTimes);
                                    }else{
                                        currentTimes = startYear+'-'+(startMonth>9?(startMonth):('0'+(startMonth).toString()))+'-'+(startDay+i>9?(startDay+i):('0'+(startDay+i).toString()))+' '+endHourCur+':00:00';
                                        monthArrCount.push(currentTimes);
                                        monthDays.push(currentTimes);
                                    }
                                    //monthArrCount.push(startYear+'-'+(startMonth>9?(startMonth):('0'+(startMonth).toString()))+'-'+(startDay+1>9?(startDay+1):('0'+(startDay+1).toString()))+' '+endHourCur+':00:00');
                                }
                               monthDayArr.push(monthDays);
                            }
                        }
                        //最后时刻的时间间隔
                        var monthDayss = [];
                        monthLength+=endHour;
                        if(endHour===1){
                            monthArrCount.push(startYear+'-'+(endMonth>9?endMonth:('0'+endMonth.toString()))+'-'+(endDay>9?endDay:('0'+endDay.toString()))+' '+'01:00:00');
                            monthDayss.push(startYear+'-'+(endMonth>9?endMonth:('0'+endMonth.toString()))+'-'+(endDay>9?endDay:('0'+endDay.toString()))+' '+'01:00:00');
                        }else{
                            for(var i = 1;i<=endHour;i++){
                                var currentTimes;
                                var endHourCue = i>9?i:'0'+i.toString();
                                //endHourCue = endHourCue===24?'00':endHourCue;
                                if(endHourCue===24){
                                    endHourCue='00';
                                    currentTimes = startYear+'-'+(endMonth>9?endMonth:('0'+endMonth.toString()))+'-'+(endDay+1>9?(endDay+1):('0'+(endDay+1).toString()))+' '+endHourCue+':00:00'
                                    monthArrCount.push(currentTimes);
                                    monthDayss.push(currentTimes);
                                }else{
                                    currentTimes = startYear+'-'+(endMonth>9?endMonth:('0'+endMonth.toString()))+'-'+(endDay>9?endDay:('0'+endDay.toString()))+' '+endHourCue+':00:00'
                                   monthArrCount.push(currentTimes);
                                   monthDayss.push(currentTimes);
                                }
                                //monthArrCount.push(startYear+'-'+(endMonth>9?endMonth:('0'+endMonth.toString()))+'-'+(endDay>9?endDay:('0'+endDay.toString()))+' '+endHourCue+':00:00');
                            }
                        }
                        monthDayArr.push(monthDayss);
                    }
                }else{
                    //if(endMonth-startMonth>1)
                    startHour = startHour===24?0:startHour;
                    var startDayHour =24 - startHour+1;
                    //开始时刻的时间间隔
                    monthLength += startDayHour;
                    var monthDays = [];
                    for(var i = 0;i<startDayHour;i++){
                        var startDayHourF = startHour+i>9?(startHour+i):('0'+(startHour+i).toString());
                        //startDayHourF = startDayHourF===24?'00':startDayHourF;
                        var currentTimes;
                        if(startDayHourF===24){
                            startDayHourF='00';
                            currentTimes = startYear+'-'+(startMonth>9?startMonth:('0'+startMonth.toString()))+'-'+(startDay+1>9?(startDay+1):('0'+(startDay+1).toString()))+' '+startDayHourF+':00:00'
                            monthArrCount.push(currentTimes);
                            monthDays.push(currentTimes);
                        }else{
                            currentTimes = startYear+'-'+(startMonth>9?startMonth:('0'+startMonth.toString()))+'-'+(startDay>9?startDay:('0'+startDay.toString()))+' '+startDayHourF+':00:00'
                            monthArrCount.push(currentTimes);
                            monthDays.push(currentTimes);
                        }
                        //monthArrCount.push(startYear+'-'+(startMonth>9?startMonth:('0'+startMonth.toString()))+'-'+(startDay>9?startDay:('0'+startDay.toString()))+' '+startDayHourF+':00:00');
                    }
                    monthDayArr.push(monthDays);
                    var startMonthDCount = new Date(startYear,startMonth,0).getDate();
                    var intervalDay = startMonthDCount-startDay;
                    for(var i = 1;i<=intervalDay;i++){
                        var monthDay = [];
                        var pushStartDay = (startDay+i)>9?(startDay+i):('0'+(startDay+i).toString());
                        var pushStartDay1 = (startDay+i+1)>9?(startDay+i+1):('0'+(startDay+i+1).toString());
                        monthLength+=24;
                        for(var j = 1;j<=24;j++){
                            var currentTimes;
                            var pushDayHourCound =  j>9?j:('0'+j.toString());
                            //pushDayHourCound = pushDayHourCound===24?'00':pushDayHourCound;
                            if(pushDayHourCound===24){
                                pushDayHourCound='00';
                                var isNextYear = false;
                                if(pushStartDay1>startMonthDCount){
                                    startMonth = startMonth+1;
                                    if(startMonth>12){
                                        startMonth = (startMonth-12);
                                        isNextYear = true;
                                    }
                                    pushStartDay1 = '01';
                                }
                                if(isNextYear){
                                    currentTimes = endYear+'-'+(startMonth>9?startMonth:('0'+startMonth.toString()))+'-'+pushStartDay1+' '+pushDayHourCound+':00:00';
                                }else{
                                    currentTimes = startYear+'-'+(startMonth>9?startMonth:('0'+startMonth.toString()))+'-'+pushStartDay1+' '+pushDayHourCound+':00:00';
                                }
                               monthArrCount.push(currentTimes);
                                monthDay.push(currentTimes);
                            }else{
                               currentTimes = startYear+'-'+(startMonth>9?startMonth:('0'+startMonth.toString()))+'-'+pushStartDay+' '+pushDayHourCound+':00:00'
                               monthArrCount.push(currentTimes);
                                monthDay.push(currentTimes);
                            }
                            //monthArrCount.push(startYear+'-'+(startMonth>9?startMonth:('0'+startMonth.toString()))+'-'+pushStartDay+' '+pushDayHourCound+':00:00');
                        }
                        monthDayArr.push(monthDay);
                    }
                    //中间时刻的计算
                    var startMonthArr = endMonth-startMonth;
                    if(endMonth-startMonth>1){
                        var monthHourArr = endMonth-startMonth;
                        for(var i = 1;i<monthHourArr;i++){
                            var currentMonths = startMonth+i>9?(startMonth+i):('0'+(startMonth+i).toString());
                            var currentMonthDays = new Date(startYear,currentMonths,0).getDate();
                            for(var j = 1;j<=currentMonthDays;j++){
                                var monthDay = [];
                                var currentMonthDay = j>9?j:('0'+j.toString());
                                var currentMonthDay1 = j+1>9?j+1:('0'+(j+1).toString());
                                monthLength+=24;
                                for(var k = 1;k<=24;k++){
                                    var currentTimes;
                                    var currentMonthDayHour =  k>9?k:('0'+k.toString());
                                    //currentMonthDayHour = currentMonthDayHour===24?'00':currentMonthDayHour;
                                    if(currentMonthDayHour===24){
                                        currentMonthDayHour='00';
                                        currentTimes = startYear+'-'+currentMonths+'-'+currentMonthDay1+' '+currentMonthDayHour+':00:00';
                                       monthArrCount.push(currentTimes);
                                        monthDay.push(currentTimes);
                                    }else{
                                        currentTimes = startYear+'-'+currentMonths+'-'+currentMonthDay+' '+currentMonthDayHour+':00:00'
                                       monthArrCount.push(currentTimes);
                                        monthDay.push(currentTimes);
                                    }
                                    //monthArrCount.push(startYear+'-'+currentMonths+'-'+currentMonthDay+' '+currentMonthDayHour+':00:00');
                                }
                               monthDayArr.push(monthDay);
                            }
                        }
                    }
                    //最后时刻的时间间隔
                    var endMonthGe = endMonth>9?endMonth:('0'+endMonth.toString());
                    for(var i = 1;i<endDay;i++){
                        var monthDay = [];
                        var currendEndDay = i>9?i:('0'+i.toString());
                        var currendEndDay1 = i+1>9?i+1:('0'+(i+1).toString());
                         monthLength+=24;
                        for(var j = 1;j<=24;j++){
                            var currentTimes;
                            var currentEndDayHours =  j>9?j:('0'+j.toString());
                            //currentEndDayHours = currentEndDayHours===24?'00':currentEndDayHours;
                            if(currentEndDayHours===24){
                                currentEndDayHours='00';
                                currentTimes = endYear+'-'+endMonthGe+'-'+currendEndDay1+' '+currentEndDayHours+':00:00'
                               monthArrCount.push(currentTimes);
                                monthDay.push(currentTimes);
                            }else{
                                currentTimes = endYear+'-'+endMonthGe+'-'+currendEndDay+' '+currentEndDayHours+':00:00'
                               monthArrCount.push(currentTimes);
                                monthDay.push(currentTimes);
                            }
                            //monthArrCount.push(startYear+'-'+endMonthGe+'-'+currendEndDay+' '+currentEndDayHours+':00:00');
                        }
                        monthDayArr.push(monthDay);
                    }
                    monthLength+=endHour;
                    var monthDayF = [];
                    if(endHour===1){
                        monthArrCount.push(endYear+'-'+endMonthGe+'-'+(endDay>9?endDay:('0'+endDay.toString()))+' '+'01:00:00');
                        monthDayF.push(endYear+'-'+endMonthGe+'-'+(endDay>9?endDay:('0'+endDay.toString()))+' '+'01:00:00');
                    }else{
                        for(var i = 1;i<=endHour;i++){
                            var currentTimes = endYear+'-'+endMonthGe+'-'+(endDay>9?endDay:('0'+endDay.toString()))+' '+(i>9?i:('0'+i.toString()))+':00:00';
                            monthArrCount.push(currentTimes);
                            monthDayF.push(currentTimes);
                        }
                    }
                     monthDayArr.push(monthDayF);
                }
            }
            timeIntervalObj['timeIntervalCount'] = monthLength;
            timeIntervalObj['timeIntervalArr'] = monthArrCount;
            for(var k = 0;k<monthDayArr.length-1;k++){
                var arrFirst = monthDayArr[k].pop();
                monthDayArr[k+1].splice(0, 0, arrFirst);
            }
            return monthDayArr;//monthArrCount;
        }
    }
    return DiagnosisInfo;
})();
var DiagnosisLogHistory = (function () {
    var _this = undefined;

    function DiagnosisLogHistory(parent) {
        _this = this;
        this.parent = parent;
        this.m_tableInfo = [];
        this.m_bSortTimeAscend = false;
        this.m_bSortGradeAscend = false;
        this.m_bSortEquipAscend = false;
        this.m_bSortZoneAscend = false;
        this.m_bSortFaultAscend = false;
        this.m_bSortStatusAscend = false;
        this.isModal = false;//是否是控件
    }

    DiagnosisLogHistory.prototype = {
        show: function () {
            var _this = this;
            window.ElScreenContainer && Spinner.spin(ElScreenContainer);

            WebAPI.get("/static/views/observer/diagnosis/paneHistory.html").done(function (resultHtml) {
                var dialog = $('#dialogModal');
                //页面上没有dialog摸态框
                if (dialog.length < 1) {
                    $('body').append('<div class="modal fade" id="dialogModal" tabindex="-1" data-backdrop="static" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true"><div class="modal-dialog modal-lg" id="dialogContent"></div></div>');
                    dialog = $('#dialogModal');
                }
                var $dialogContent = dialog.find('#dialogContent');
                $dialogContent.addClass('historyQueryModel').html(resultHtml).find('.modal-content').css({'height': document.body.scrollHeight - 40});
                //缓兵之计
                if(_this.parent && _this.parent.optionCss){
                    $dialogContent.find('.modal-content,#btnDownload,#btnDownloadPDF').css(_this.parent.optionCss);
                }
                dialog.off('hidden.bs.modal').on('hidden.bs.modal', function (e) {
                    _this.close();
                    ScreenModal = null;
                    Spinner.stop();
                    $dialogContent.removeClass('historyQueryModel')
                }).modal({});
                Spinner.spin(dialog.find('.modal-body')[0]);

                _this.init();

                //init event 无需升级
                $("#datePickerLog").datetimepicker({
                    minView: "month",
                    autoclose: true,
                    todayBtn: true,
                    initialDate: new Date()
                });
                //下载excel和下载pdf按钮国际化
                $('#btnDownload').attr('title', i18n_resource.diagnosis.historyLog.DOWNLOAD_EXCEL);
                $('#btnDownloadPDF').attr('title', i18n_resource.diagnosis.historyLog.DOWNLOAD_PDF);

                var date = new Date();
                $("#txtLogDate").val(date.timeFormat(timeFormatChange('yyyy-mm-dd')));

                $('#thTime').click(function (e) {
                    _this.sortTable(0);
                });

                $('#thGrade').click(function (e) {
                    _this.sortTable(1);
                });

                $('#thEquip').click(function (e) {
                    _this.sortTable(2);
                });

                $('#thZone').click(function (e) {
                    _this.sortTable(3);
                });

                $('#thFault').click(function (e) {
                    _this.sortTable(4);
                });

                $('#thStatus').click(function (e) {
                    _this.sortTable(5);
                });

                $('#btnSearchFault').eventOn('click', function (e) {
                    _this.searchFaultInfo();
                }, '诊断历史记录搜索');

                $('#inputSearchFault').keyup(function (e) {
                    if (13 === e.keyCode) {
                        _this.searchFaultInfo();
                    }
                });
            });
        },

        close: function () {
            _this.m_tableInfo.forEach(function (m_tableInfo) {
                m_tableInfo && m_tableInfo.dispose && m_tableInfo.dispose();
                m_tableInfo = null;
            });

            _this.m_tableInfo = [];
            $('#dialogContent').empty();

        },

        init: function () {
            var _this = this;
            var now = new Date();
            var startTime = new Date(now.getFullYear(), now.getMonth(), now.getDate());
            this.refreshData(startTime, now);
            var timeFormat = timeFormatChange('yyyy-mm-dd');
            $("#datePickerLog").attr('data-date-format', timeFormat);
            $("#txtLogDate").eventOn('change', function (e) {
                var startTime = ($(this).val() + ' 00:00:00').toDate();
                var endTime = new Date(+startTime + 86400000);
                _this.refreshData(startTime, endTime);
            }, '诊断历史记录切换时间');

            EventAdapter.on($("#btnLogPre"), 'click', function (e) {
                var endTime = ($("#txtLogDate").val() + ' 00:00:00').toDate();
                var preDay = new Date(+endTime - 86400000);
                $("#txtLogDate").val(preDay.timeFormat(timeFormat));
                _this.refreshData(preDay, endTime);
            }, '诊断历史记录切换时间');

            $("#btnLogNext").eventOff('click').eventOn('click', function (e) {
                var startTime = ($("#txtLogDate").val() + ' 00:00:00').toDate();
                var nextDay = new Date(+startTime + 86400000);
                $("#txtLogDate").val(nextDay.timeFormat(timeFormat));
                startTime = ($("#txtLogDate").val() + ' 00:00:00').toDate();
                nextDay = new Date(+startTime + 86400000);
                _this.refreshData(startTime, nextDay);
            }, '诊断历史记录切换时间');

            $("#btnDownload").eventOff('click').eventOn('click', function () {
                //如果没有历史记录,不可以下载
                if ($('#tableNoticeHistory tbody tr').length === 0) {
                    alert('没有历史记录');
                    return;
                }
                var logTime = ($("#txtLogDate").val() + ' 00:00:00').toDate();
                var startTime = logTime.format("yyyy-MM-dd HH:mm:ss");
                //var endTime=now.format("yyyy-MM-dd HH:mm:ss");
                var endTime = new Date(+logTime + 86400000).format("yyyy-MM-dd HH:mm:ss");
                var language = localStorage.getItem('language');
                window.open('/diagnosis/downloadHistoryFault/' + AppConfig.projectId + '/' + startTime + '/' + endTime + '/' + language);
            }, '诊断历史记录下载excel');

            $("#btnDownloadPDF").eventOff('click').eventOn('click', function () {
                if ($('#tableNoticeHistory tbody tr').length === 0) {
                    alert('没有历史记录');
                    return;
                }
                var reportTitle = i18n_resource.diagnosis.historyLog.TITLE;
                Spinner.spin(document.body);
                var arrHtml = [];
                $('#tableNoticeHistory').find('.removeNode').remove();
                arrHtml.push($('#tableWrap').html());
                var promise = WebAPI.get('/static/views/share/reportWrap/pdfTemplate.html');
                // 在这里定义成功事件
                promise.done(function (html) {
                    var xhr, formData;
                    // 生成最终的 html
                    html = html.formatEL({
                        cover: BEOPUtil.getProjectImgByType(AppConfig.projectId, BEOPUtil.projectImgType.pdfCover),
                        title: reportTitle,
                        encoding: 'UTF-8',
                        entitiesHtml: arrHtml[0],
                        projName: AppConfig.projectShowName,
                        logo: BEOPUtil.getProjectImgByType(AppConfig.projectId, BEOPUtil.projectImgType.logo),
                        date: $('#txtLogDate').val(),
                        footerLeft: i18n_resource.report.reportWrap.GENERATED_BY_BEOP,
                        footerRight: localStorage.getItem("language") === "zh" ? "第 [page] 页 共[topage]页" : "Page [page] of [topage]"
                    });

                    // 表单数据
                    formData = new FormData();
                    formData.append('html', html);
                    formData.append('skin', 'default');

                    xhr = new XMLHttpRequest();
                    xhr.open('POST', '/admin/getShareReportWrapPDF');
                    xhr.responseType = 'arraybuffer';
                    xhr.onload = function () {
                        var blob, url, lkPdfFile;
                        if (this.status === 200) {
                            blob = new Blob([xhr.response], {type: "application/pdf"});
                            url = URL.createObjectURL(blob);

                            // 这里用 a 标签来模拟下载，而不直接使用 window.open
                            // 是因为 window.open 不能自定义下载文件的名称
                            // 而 a 标签可以通过设置 download 属性来自定义下载文件的名称
                            lkPdfFile = document.createElement('a');
                            lkPdfFile.style = "display: none";
                            lkPdfFile.id = "lkPdfFile";
                            lkPdfFile.href = url;
                            lkPdfFile.download = reportTitle + ' ' + $('#txtLogDate').val() + '.pdf';

                            document.body.appendChild(lkPdfFile);
                            lkPdfFile.click();
                            window.URL.revokeObjectURL(url);
                            window.setTimeout(function () {
                                lkPdfFile.parentNode.removeChild(lkPdfFile);
                            }, 0);

                        } else {
                            alert('Generate report failed, please try it again soon!');
                        }
                        // 隐藏 loading
                        Spinner.stop();
                    };
                    xhr.send(formData);

                }).fail(function (e) {
                    throw e;
                });

            }, '诊断历史记录下载PDF');
        },

        createWorkflowOrder: function (notice) {
            var wiInstance;
            var momentTime = notice.time.toDate();
            var back = function () {
                wiInstance = null;
            };
            var insertCallback = function (taskModelInfo) {
                var taskTitle = (taskModelInfo && taskModelInfo.fields) ? taskModelInfo.fields.title : '';
                Alert.success(ElScreenContainer, I18n.resource.workflow.main.THE_WORK_ORDER + ' ' + taskTitle + ' ' + I18n.resource.workflow.main.IS_CREATED_SUCCESSFULLY).showAtTop(2000);
                var $faultCount = $('#btnWarningLog .badge');
                var faultCount = (function (txt) {
                    if (parseInt(txt).toString() != "NaN") {
                        return parseInt(txt);
                    }
                    return 0;
                }($faultCount.text()));
                //诊断故障信息个数减一, 同时楼层导航的故障个数减一
                if (faultCount > 0) {
                    var count = faultCount - 1;
                    count = count > 0 ? count : '';
                    $faultCount.text(count);
                    //诊断故障信息remove
                    $('[noticeid="' + notice.id + '"]').remove();
                    //楼层故障个数更新
                    if (notice.grade === 1) {
                        var $warningCount = $('#navFloor-' + AppConfig.zoneId).next('.warningCount');
                        $warningCount.text($warningCount.text() - 1);
                    } else if (notice.grade === 2) {
                        var $alertCount = $('#navFloor-' + AppConfig.zoneId).siblings('.alertCount');
                        $alertCount.text($alertCount.text() - 1);
                    }
                }
            };
            wiInstance = new WorkflowInsert({
                noticeId: notice.id,
                title: notice.name,
                detail: notice.description,
                dueDate: new Date(+new Date() + 172800000).format('yyyy-MM-dd'),  //结束时间为两天后
                critical: notice.grade,
                projectId: Number(notice.project),
                chartPointList: notice.points,
                chartQueryCircle: 'm5',
                description: notice.description,
                name: notice.name,
                time: new Date(momentTime).format('yyyy-MM-dd HH:mm:ss'),
                chartStartTime: new Date(new Date(momentTime).getTime() - 12 * 60 * 60 * 1000).format('yyyy-MM-dd HH:mm:ss'), //报警发生前半天
                chartEndTime: new Date(new Date(momentTime).getTime() + 12 * 60 * 60 * 1000).format('yyyy-MM-dd HH:mm:ss')   //报警发生后半天
            });
            wiInstance.show().submitSuccess(function (taskModelInfo, uploadFiles) {
                insertCallback(taskModelInfo);
                this.close();
                back();
            }).cancel(function () {
                back();
            }).fail(function () {
                Alert.danger(ElScreenContainer, I18n.resource.workflow.main.CREATE_WORKFLOW_FAILED).showAtTop(2000);
            });
            return true;
        },

        refreshData: function (startTime, endTime) {
            var _this = this;

            startTime = startTime.format("yyyy-MM-dd HH:mm:ss");
            endTime = endTime.format("yyyy-MM-dd HH:mm:ss");

            Spinner.spin(document.getElementById('tableNoticeHistory'));
            WebAPI.get('/diagnosis/getHistoryFault/' + AppConfig.projectId + '/' + startTime + '/' + endTime).done(function (result) {
                _this.m_tableInfo = result;
                _this.initTable(result);
            }).error(function (result) {
                var dialog = $('#dialogModal');
                dialog.find('.modal-body').html('Error query.');
            }).always(function () {
                Spinner.stop();
            });
        },

        initTable: function (data) {
            $('#tableNoticeHistory tbody').remove();
            var tbody = document.createElement('tbody');
            var $spanPoint;

            $('#tableNoticeHistory').append(tbody);
            if (data.length == 0) tbody.innerHTML = 'no history data';

            var tr, td, item, sb, equipment, zone, timeDif, strDesc;
            for (var i = 0, len = data.length; i < len; i++) {
                item = data[i];
                strDesc = item.description;
                equipment = this.parent.dictEquipment[item.equipmentId];
                if (!equipment) continue;
                zone = this.parent.dictZone[equipment.zoneId];

                tr = document.createElement('tr');
                tr.id = 'diagHistory_' + item.id;
                tr.title = strDesc;
                //tr.innerHTML = sb.toString();
                tbody.appendChild(tr);

                //sb = new StringBuilder();
                //sb.append('<td>').append(item.time.toDate().format("yyyy-MM-dd HH:mm:ss")).append('</td>');
                $(tr).append($('<td></td>').html(item.time.toDate().timeFormat(timeFormatChange("yyyy-mm-dd hh:ii:ss"))));
                switch (item.grade) {
                    case 0:
                        $(tr).append('<td><span class="badge" style="background-color: #5bc0de;" title="Grade">Normal</span></td>');
                        break;//sb.append
                    case 1:
                        $(tr).append('<td><span class="badge" style="background-color: #f0ad4e;" title="Grade">Alert</span></td>');
                        break;//sb.append
                    case 2:
                        $(tr).append('<td><span class="badge" style="background-color: #d9534f;" title="Grade">Fault</span></td>');
                        break;//sb.append
                    default:
                        $(tr).append('<td><span class="badge" style="background-color: #d9534f;" title="Grade">Unknown</span></td>');
                        break;//sb.append
                }
                $(tr).append($('<td></td>').html(equipment.name));
                $(tr).append($('<td></td>').html(zone.subBuildingName));
                $(tr).append($('<td></td>').html(item.name));
                switch (item.status) {
                    case '0':
                        $(tr).append('<td>Disable</td>');
                        break;//sb.append
                    case '1':
                        $(tr).append('<td>Delayed</td>');
                        break;//sb.append
                    case '2':
                        $(tr).append('<td>Realtime</td>');
                        break;//sb.append
                    default:
                        $(tr).append('<td></td>');
                        break;
                }

                if (!item.resTime || item.resTime == null) {
                    $(tr).append($('<td class="removeNode" colspan="2" style="text-align:center;" i18n="diagnosis.historyLog.RESPONSE_CONTENT"></td>'));
                    switch (item.FeedBack) {
                        case 0:
                            $(tr).append('<td><span class="badge"></span></td>');
                            break;
                        case 1:
                            $(tr).append('<td><span class="badge" style="background-color: #5bc0de;">Waiting</span></td>');
                            break;
                        case 2:
                            $(tr).append('<td><span class="badge" style="background-color: #f0ad4e;">executing</span></td>');
                            break;
                        case 3:
                            $(tr).append('<td><span class="badge" style="background-color: #5cb85c;">finished</span></td>');
                            break;
                        default:
                            break;
                    }
                    $spanPoint = pointerClick(item);
                    $(tr).append($('<td class="removeNode someHide"></td>').append($spanPoint));
                } else {
                    timeDif = Math.floor(((new Date(item.resTime)).getTime() - (new Date(item.time)).getTime()) / (3600 * 1000));//小時为单位 如果以天就*24
                    $(tr).append($('<td class="removeNode"></td>').html(item.executor));
                    $(tr).append($('<td class="removeNode"></td>').html(timeDif));

                    $(tr).append($('<td class="removeNode"></td>').html(''));
                }

                var arr = item.detail.toString().split(',');
                for (var j = 0; j < arr.length; j++) {
                    strDesc = strDesc.replace('{' + j.toString() + '}', '<span class="variable">' + arr[j] + '</span>');
                }
                function pointerClick(item) {
                    var $pointeer;
                    $pointeer = $('<span class="glyphicon glyphicon-share grow span-hover-pointer" data-dismiss="modal"></span>').off('click').on('click', function () {
                        _this.createWorkflowOrder(item);
                    });
                    return $pointeer
                }
            }
        },

        sortTable: function (type) {
            $('#tableNoticeHistory tbody').html('');
            if (0 === type) {
                if (!_this.m_bSortTimeAscend) {
                    _this.m_tableInfo.sort(_this.sortTimeAscending);
                }
                else {
                    _this.m_tableInfo.sort(_this.sortTimeDescending);
                }
                _this.m_bSortTimeAscend = !_this.m_bSortTimeAscend;
            }
            else if (1 === type) {
                if (!_this.m_bSortGradeAscend) {
                    _this.m_tableInfo.sort(_this.sortGradeAscending);
                }
                else {
                    _this.m_tableInfo.sort(_this.sortGradeDescending);
                }
                _this.m_bSortGradeAscend = !_this.m_bSortGradeAscend;
            }
            else if (2 === type) {
                if (!_this.m_bSortEquipAscend) {
                    _this.m_tableInfo.sort(_this.sortEquipAscending);
                }
                else {
                    _this.m_tableInfo.sort(_this.sortEquipDescending);
                }
                _this.m_bSortEquipAscend = !_this.m_bSortEquipAscend;
            }
            else if (3 === type) {
                if (!_this.m_bSortZoneAscend) {
                    _this.m_tableInfo.sort(_this.sortZoneAscending);
                }
                else {
                    _this.m_tableInfo.sort(_this.sortZoneDescending);
                }
                _this.m_bSortZoneAscend = !_this.m_bSortZoneAscend;
            }
            else if (4 === type) {
                if (!_this.m_bSortFaultAscend) {
                    _this.m_tableInfo.sort(_this.sortFaultAscending);
                }
                else {
                    _this.m_tableInfo.sort(_this.sortFaultDescending);
                }
                _this.m_bSortFaultAscend = !_this.m_bSortFaultAscend;
            }
            else if (5 === type) {
                if (!_this.m_bSortStatusAscend) {
                    _this.m_tableInfo.sort(_this.sortStatusAscending);
                }
                else {
                    _this.m_tableInfo.sort(_this.sortStatusDescending);
                }
                _this.m_bSortStatusAscend = !_this.m_bSortStatusAscend;
            }
            _this.initTable(_this.m_tableInfo);
        },

        sortTimeAscending: function (a, b) {
            return new Date(a.time) - new Date(b.time);
        },

        sortTimeDescending: function (a, b) {
            return new Date(b.time) - new Date(a.time);
        },

        sortGradeAscending: function (a, b) {
            return a.grade - b.grade;
        },

        sortGradeDescending: function (a, b) {
            return b.grade - a.grade;
        },

        sortEquipAscending: function (a, b) {
            var equipA = _this.parent.dictEquipment[a.equipmentId];
            var equipB = _this.parent.dictEquipment[b.equipmentId];
            return (equipA.name).localeCompare(equipB.name);
        },

        sortEquipDescending: function (a, b) {
            var equipA = _this.parent.dictEquipment[a.equipmentId];
            var equipB = _this.parent.dictEquipment[b.equipmentId];
            return (equipB.name).localeCompare(equipA.name);
        },

        sortZoneAscending: function (a, b) {
            var equip = _this.parent.dictEquipment[a.equipmentId];
            var zoneA = _this.parent.dictZone[equip.zoneId];

            equip = _this.parent.dictEquipment[b.equipmentId];
            var zoneB = _this.parent.dictZone[equip.zoneId];

            return (zoneA.subBuildingName).localeCompare(zoneB.subBuildingName);
        },

        sortZoneDescending: function (a, b) {
            var equip = _this.parent.dictEquipment[a.equipmentId];
            var zoneA = _this.parent.dictZone[equip.zoneId];

            equip = _this.parent.dictEquipment[b.equipmentId];
            var zoneB = _this.parent.dictZone[equip.zoneId];

            return (zoneB.subBuildingName).localeCompare(zoneA.subBuildingName);
        },

        sortFaultAscending: function (a, b) {
            return (a.name).localeCompare(b.name);
        },

        sortFaultDescending: function (a, b) {
            return (a.name).localeCompare(b.name);
        },

        sortStatusAscending: function (a, b) {
            return a.status - b.status;
        },

        sortStatusDescending: function (a, b) {
            return b.status - a.status;
        },

        searchFaultInfo: function () {
            var searchVal = $('#inputSearchFault').val();
            if (null == searchVal || undefined == searchVal) {
                return;
            }

            $('#tableNoticeHistory tbody').html('');
            if ('' == searchVal) {
                _this.initTable(_this.m_tableInfo);
                return;
            }

            var item;
            var arrSuit = [];
            searchVal = searchVal.toLowerCase();
            for (var i = 0, len = _this.m_tableInfo.length; i < len; i++) {
                item = _this.m_tableInfo[i];
                if (-1 != item.name.toLowerCase().indexOf(searchVal)) {
                    arrSuit.push(item);
                }
            }
            _this.initTable(arrSuit);
        },

        setIsModal: function (boolean) {
            this.isModal = boolean;
        },

        renderChart: function (record) {
            Spinner.spin($("#wf-add-person")[0]);
            var list_description = record.list_description,
                list_value = record.list_value,
                arrXAxis;
            if (list_description.length == list_value.length) {
                if (record.list_time.length > 0)
                    arrXAxis = record.list_time[0].split(',');
                var arrSeriesTemp = [];
                for (var i = 0; i < list_value.length; i++) {
                    var arrDatas = [];
                    if (i < 8) {
                        var item = list_value[i];
                        if (item) {
                            var strDatas = item.split(",");
                            for (var j = 0; j < strDatas.length; ++j) {
                                arrDatas.push(parseFloat(strDatas[j]).toFixed(1));
                            }
                        }

                        arrSeriesTemp.push(
                            {
                                name: list_description[i],
                                type: 'line',
                                itemStyle: {normal: {lineStyle: {type: 'solid'}}},
                                data: arrDatas
                            });
                    }
                }
                var option =
                {
                    tooltip: {
                        trigger: 'axis',
                        formatter: function (params) {
                            var strResult;
                            if (params[0].name.length > 0) {
                                strResult = params[0].name + '<br/>';
                                for (var i = 0; i < params.length; ++i) {
                                    strResult += params[i].seriesName + ' : ' + params[i].value;
                                    if (i != params.length - 1) {
                                        strResult += '<br/>';
                                    }
                                }
                            }
                            return strResult;
                        }
                    },
                    legend: {
                        data: list_description,
                        x: 'center'
                    },
                    toolbox: {
                        show: true
                    },
                    dataZoom: {
                        show: true,
                        realtime: true,
                        start: 0,
                        end: 100
                    },
                    xAxis: [
                        {
                            name: "",
                            type: 'category',
                            boundaryGap: false,
                            axisLine: {onZero: false},
                            data: arrXAxis
                        }
                    ],
                    yAxis: [
                        {
                            name: "",
                            type: 'value',
                            scale: true
                        }
                    ],
                    series: arrSeriesTemp,
                    showLoading: {
                        text: 'loading',
                        effect: 'spin'
                    }
                };
                var myChart = echarts.init($('#wf-fault-curve').get(0));
                myChart.setOption(option);
                window.onresize = myChart.resize;
                Spinner.stop();
            }
        }
    };
    return DiagnosisLogHistory;
})();
// /**
//  * Created by vicky on 2015/8/21.
//  */

//  *2016.09.13 在factory dashboard发布项目时 会偶发性的将账户名自动填充到iki id,pop id中 无法稳定性重现 先注释掉

// var ModalWiki = (function(){
//     function ModalWiki(parent){
//         this.parent = parent;
//         this.$modal = undefined;
//         this.$modalContent = undefined;
//         this.searchWikis = {};
//         this.isManager = false;//是否在wiki管理页面,
//         this.managerWikis = {};

//         var tempHtml = '\
//             <div class="modal fade in" id="modalWikiConfig" role="dialog" aria-labelledby="templateType" aria-hidden="false">\
//                 <div class="modal-dialog">\
//                     <div class="modal-content">\
//                     </div>\
//                 </div>\
//             </div>';
//         $('body').append(tempHtml);
//         this.$modal = $('#modalWikiConfig');
//         this.$modalContent = this.$modal.find('.modal-content');
//     }

//     /* wiki manager start */
//     ModalWiki.prototype.show = function(){
//         var _this = this;
//         WebAPI.get('/static/scripts/observer/widgets/modalWiki.html').done(function(resultHTML){
//             $(ElScreenContainer).html(resultHTML);
//             _this.init();
//         });

//     }

//     ModalWiki.prototype.init = function(){
//         var _this = this;
//         var data = {projectIds: this.getProjectIds()};
//         WebAPI.post('/getAllWiki', data).done(function (rlst) {
//             if(rlst.length > 0){
//                 var $divWiki = $('.divWiki'), temp = '';
//                 for(var i = 0, wiki; i < rlst.length; i++){
//                     wiki = rlst[i];
//                     if(!_this.managerWikis[wiki.id]){
//                         _this.managerWikis[wiki.id] = wiki;
//                     }
//                     temp += _this.tpl_wiki_mng.formatEL({
//                         id: wiki.id,
//                         title: wiki.title,
//                         tagArr: _this.addTagOfKewWord(wiki.tagStrArr),
//                         tagProjectArr: _this.addTagOfProject(wiki.tagProjectIdArr),
//                         modifyTime: wiki.modifyTime
//                     })
//                 }
//                 $divWiki.html(temp);

//             }else{
//                 alert('There is no wiki currently, you can create wiki.')
//             }
//             _this.$wikiListPanel = $('#wikiListPanel');
//             _this.isManager = true;
//             _this.attachEvent();
//         }).fail(function(){

//         }).always(function(){

//         });
//     }

//     ModalWiki.prototype.close = function(){
//         this.parent = null;
//         this.$modal = null;
//         this.$modalContent = null;
//         this.searchWikis = null;
//         this.isManager = null;
//         this.managerWikis = null;
//     }

//     ModalWiki.prototype.tpl_wiki_mng = '\
//         <div class="row" id="{id}">\
//             <div class="col-xs-3">{id}</div>\
//             <div class="col-xs-2">{title}</div>\
//             <div class="col-xs-2">{tagArr}</div>\
//             <div class="col-xs-2">{tagProjectArr}</div>\
//             <div class="col-xs-2">{modifyTime}</div>\
//             <div class="col-xs-1 btns">\
//                 <span class="glyphicon glyphicon-remove grow" title="Delete"></span>\
//                 <span class="glyphicon glyphicon-edit grow" title="Edit"></span>\
//             </div>\
//         </div>';

//     ModalWiki.prototype.attachEvent = function(){
//         var _this = this;
//         this.$wikiListPanel.find('#mngCreateWiki').off('click').on('click',function(e){
//             e.stopPropagation();
//             _this.showWikiCreate();
//         });
//         this.$wikiListPanel.on('click','.glyphicon-edit',function(e){
//              e.stopPropagation();
//             _this.showWikiEdit(_this.managerWikis[$(this).closest('.row').attr('id')]);
//         });
//         this.$wikiListPanel.on('click','.glyphicon-remove',function(e){
//              e.stopPropagation();
//             _this.removeWiki($(this).closest('.row').attr('id'));
//         });
//         this.$wikiListPanel.on('click','.row',function(e){
//              e.stopPropagation();
//             _this.showWikiDetail(_this.managerWikis[$(this).attr('id')]);
//         });
//     };

//     ModalWiki.prototype.removeWiki = function (wikiId) {
//         //TODO 测试confirm
//         confirm('Delete this wiki ?', function () {
//             WebAPI.get('/deleteWiki/' + wikiId).done(function (result) {
//                 $('#' + wikiId).remove();
//             }).fail(function () {
//                 alert('delete failed !');
//             });
//         })
//     };

//     /* wiki manager end */

//     ModalWiki.prototype.showWikiSearch = function(){
//         var _this = this, $addWiki, $searchResultList, $configAlert;
//         var tempHtml = '\
//             <div class="modal-header">\
//                 <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>\
//                 <h4 class="modal-title" id="" i18n="modalConfig.TITLE">Config Wiki</h4>\
//             </div>\
//             <div class="modal-body" id="">\
//                 <div class="bodyTop">\
//                     <div class="">\
//                         <div class="form-inline">\
//                           <div class="form-group" style="width: 260px;">\
//                             <label class="sr-only" for="wikiKeyWord"></label>\
//                             <input type="text" class="form-control" id="wikiKeyWord" placeholder="Input Keyword" style="width: 100%;">\
//                           </div>\
//                           <div class="form-group">\
//                             <label class="sr-only" for="wikiProject"></label>\
//                             <select id="wikiProject" class="form-control">\
//                             </select>\
//                           </div>\
//                           <button type="" class="btn btn-default" id="btnSearchWiki">Search</button>\
//                         </div>\
//                     </div>\
//                 </div>\
//                 <div class="bodyMiddle">\
//                     <div class="searchResultCtn">\
//                         <ul class="list-unstyled" id="searchResultList">\
//                         </ul>\
//                     </div>\
//                 </div>\
//             </div>\
//             <div class="modal-footer">\
//                 <div id="configAlert"></div>\
//                 <button type="button" class="btn btn-primary" id="addWiki" i18n="">Create</button>\
//             </div>';

//         this.$modalContent.html(tempHtml);
//         this.$modalContent.find('#wikiProject').html(renderSelectProject())
//         $addWiki = this.$modal.find('#addWiki');
//         $searchResultList = this.$modal.find('#searchResultList');
//         $configAlert = _this.$modalContent.find("#configAlert");
//         //attach event
//         $addWiki.off().on('click', function(e){
//             e.stopPropagation();
//             _this.showWikiCreate();
//         });

//         this.$modalContent.find('#btnSearchWiki').click(function(){
//             var selectPrj = $('#wikiProject').val();
//             var queryCondition = {
//                 keywords: $('#wikiKeyWord').val().split(' '),
//                 projectId: (selectPrj != '') ? new Array(selectPrj): _this.getProjectIds()
//             }
//             $searchResultList.empty();
//             WebAPI.post('/getWikiByKeywordsAndProjectId', queryCondition).done(function (rslt) {
//                 var temp = '';
//                 var tpl_search = '<li wikiId="{id}"><span class="title">{title}</span><span class="keywordTags" title="Tag">{tagArr}</span><span class="projectTags" title="Project">{tagProjectArr}</span><span class="glyphicon glyphicon-link"></span></li>';
//                 if(rslt.length > 0){
//                     for(var i = 0, wiki; i < rslt.length; i++){
//                         wiki = rslt[i];
//                         if(!_this.searchWikis[wiki.id]){
//                             _this.searchWikis[wiki.id] = wiki;
//                         }
//                         //$searchResultList.append('<li wikiId="'+ wiki.id +'"><span class="">'+ wiki.title +'</span><span class="glyphicon glyphicon-link"></span></li>');
//                         temp += tpl_search.formatEL({
//                             id: wiki.id,
//                             title: wiki.title,
//                             tagArr: _this.addTagOfKewWord(wiki.tagStrArr),
//                             tagProjectArr: _this.addTagOfProject(wiki.tagProjectIdArr)
//                         })
//                     }
//                     $searchResultList.html(temp);
//                 }else{
//                     $configAlert.parent().show();
//                     var $tip = $('<span>There is no wiki match input,you can create a new wiki !</span>');
//                     $configAlert.html($tip)
//                     $tip.fadeOut(3000);
//                 }
//             });
//         });

//         $searchResultList.off().on('click','li',function(e){
//             e.stopPropagation();
//             var wikiId = $(this).attr('wikiId');
//             _this.showWikiDetail(_this.searchWikis[wikiId]);
//             _this.$modalContent.find('.modal-footer').show();
//             //绑定wiki
//             _this.$modalContent.find('#confirm').off().on('click', function(){
//                 if(_this.parent.entity.modal.type == 'ModalPointKPI'){
//                     _this.parent.kpiItem.wikiId = wikiId;
//                     _this.parent.entity.modal.option.kpiList.forEach(function(kpiItem){
//                         traverseTree(kpiItem);
//                     })
//                     _this.parent.parentArgt.screen.isScreenChange = true;
//                 }else{
//                     _this.parent.entity.modal.wikiId = wikiId;
//                     _this.parent.screen.isScreenChange = true;
//                     $('#wikiId','#divContainer_' + _this.parent.entity.id).val(wikiId).hide().next('.chartTitleShow').show().html(wikiId);
//                 }
//                 $(this).addClass('disabled').html('Binding');

//                 function traverseTree(tree) {
//                         traverse(tree, 0);
//                 }
//                 function traverse(node, i) {
//                     var children = node.list;
//                     if(node.id == _this.parent.kpiItem.id){
//                         node.wikiId = wikiId;
//                         return;
//                     }
//                     if (children != null && children.length > 0) {
//                         if (i == children.length - 1) {
//                             for(var j = 0; j < children.length; j++){
//                                 traverse(children[j], 0);
//                             }
//                         } else {
//                             traverse(node, i + 1);
//                         }
//                     }
//                 }
//             });
//         });

//         this.$modal.off('show.bs.modal').on('show.bs.modal', function (e) {

//         });
//         this.$modal.off('hidden.bs.modal').on('hidden.bs.modal', function () {

//         });
//         this.$modal.modal('show');

//         function renderSelectProject(){
//             var projectName = '', option = '',
//             temp = '<option value="">Choose project(Optional)</option>';
//             for(var i = 0; i < AppConfig.projectList.length; i++){
//                 var project = AppConfig.projectList[i];
//                 if(I18n.type == 'zh'){
//                     projectName = project.name_cn;
//                 }else{
//                     projectName = project.name_en;
//                 }
//                 option = '<option value="'+ AppConfig.projectList[i].id +'">'+ projectName +'</option>';
//                 temp += option;
//             }
//             return temp;
//         }
//     }

//     ModalWiki.prototype.showWikiCreate = function(){
//         var _this = this;
//         var tempHtml = '\
//             <div class="modal-header">\
//                 <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>\
//                 <h4 class="modal-title" id="" i18n="">Create Wiki</h4>\
//             </div>\
//             <div class="modal-body" id="">\
//                 <div class="bodyTop">\
//                     <div class="">\
//                         <form class="form-horizontal">\
//                             <div class="form-group">\
//                                 <label class="col-sm-1 control-label" for="wikiTitle">Title</label>\
//                                 <div class="col-sm-9"><input type="text" class="form-control" id="wikiTitle" placeholder="Input title"/></div>\
//                             </div>\
//                             <div class="form-group">\
//                                 <label class="col-sm-1 control-label" for="">Tag</label>\
//                                 <div class="col-sm-9">\
//                                     <ul class="list-inline tagCtn" id="tagStr">\
//                                         <li><span class="glyphicon glyphicon-remove-circle add"></span></li>\
//                                     </ul>\
//                                 </div>\
//                             </div>\
//                             <div class="form-group">\
//                                 <label class="col-sm-1 control-label" for="">Project</label>\
//                                 <div class="col-sm-9">\
//                                     <ul class="list-inline tagCtn" id="tagProject">\
//                                         <li><span class="glyphicon glyphicon-remove-circle add"></span></li>\
//                                     </ul>\
//                                 </div>\
//                             </div>\
//                         </form>\
//                     </div>\
//                 </div>\
//                 <div class="bodyMiddle">\
//                     <div id="wikiContentCtn">\
//                         <label for="">Content</label>\
//                         <hr style="position: absolute;width: calc(100% - 70px);right: 0;top: -8px;"/>\
//                         <script id="ueditor" type="text/plain"></script>\
//                     </div>\
//                 </div>\
//             </div>\
//             <div class="modal-footer">\
//                 <div id="configAlert"></div>\
//                 <button type="button" class="btn btn-primary" id="confirm" i18n="modalConfig.btnStartConfig.TYPE2">Confirm</button>\
//             </div>';
//         this.$modalContent = this.$modal.find('.modal-content');
//         this.$modalContent.html(tempHtml);
//         this.showUEditor();
//         this.$modalContent.find('#confirm').off().on('click',function(e){
//             e.stopPropagation();
//             _this.createWiki();
//         });
//         this.$modalContent.find('#tagStr .add').off().on('click',function(e){
//             e.stopPropagation();
//             _this.addTagStr(this);
//         });
//         this.$modalContent.find('#tagProject .add').off().on('click',function(e){
//             e.stopPropagation();
//             _this.addTagProject(this);
//         });
//         this.$modalContent.on('click','.glyphicon.remove',function(){
//             $(this).closest('li').remove();
//         });
//         this.$modal.modal('show');
//     }

//     ModalWiki.prototype.getWikiById = function(){
//         var _this = this;
//         var wiki = this.parent.parentArgt.wikis[this.parent.kpiItem.wikiId];
//         if(wiki){
//             _this.showWikiEdit(wiki);
//         }else{
//             WebAPI.get('/getWikiById/'+ this.parent.kpiItem.wikiId)
//             .done(function(result){
//                 if(result.id){
//                     _this.parent.parentArgt.wikis[result.id] = result;
//                     _this.showWikiEdit(result);
//                 }else{
//                     _this.showWikiSearch();
//                 }
//             })
//             .fail(function(result){
//                 alert(result)
//             });
//         }
//     }

//     ModalWiki.prototype.showWikiEdit = function(wiki){
//         var _this = this, $tagStrAdd, $tagProjectAdd;
//         var tempHtml = '\
//             <div class="modal-header">\
//                 <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>\
//                 <h4 class="modal-title" id="" i18n="">Edit Wiki\
//                     <a id="btnChangeWiki" style="position: absolute;right: 150px;top: 18px;font-size:14px;" title="Change Wiki">Change</a>\
//                     <a id="btnRemoveWiki" style="position: absolute;right: 80px;top: 18px;font-size:14px;" title="Unbind Wiki">Unbind</a>\
//                 </h4>\
//             </div>\
//             <div class="modal-body" id="">\
//                 <div class="bodyTop">\
//                     <div class="">\
//                         <form class="form-horizontal">\
//                             <div class="form-group">\
//                                 <label class="col-sm-1 control-label" for="wikiTitle">Title</label>\
//                                 <div class="col-sm-9"><input type="text" class="form-control" id="wikiTitle" placeholder="Input title"/></div>\
//                             </div>\
//                             <div class="form-group">\
//                                 <label class="col-sm-1 control-label" for="">Tag</label>\
//                                 <div class="col-sm-9">\
//                                     <ul class="list-inline tagCtn" id="tagStr">\
//                                         <li><span class="glyphicon glyphicon-remove-circle add"></span></li>\
//                                     </ul>\
//                                 </div>\
//                             </div>\
//                             <div class="form-group">\
//                                 <label class="col-sm-1 control-label" for="">Project</label>\
//                                 <div class="col-sm-9">\
//                                     <ul class="list-inline tagCtn" id="tagProject">\
//                                         <li><span class="glyphicon glyphicon-remove-circle add"></span></li>\
//                                     </ul>\
//                                 </div>\
//                             </div>\
//                         </form>\
//                     </div>\
//                 </div>\
//                 <div class="bodyMiddle">\
//                     <div id="wikiContentCtn">\
//                         <label for="">Content</label>\
//                         <hr style="position: absolute;width: calc(100% - 70px);right: 0;top: -8px;"/>\
//                         <script id="ueditor" type="text/plain"></script>\
//                     </div>\
//                 </div>\
//             </div>\
//             <div class="modal-footer">\
//                 <div id="configAlert"></div>\
//                 <button type="button" class="btn btn-primary" id="confirm" i18n="modalConfig.btnStartConfig.TYPE2">Confirm</button>\
//             </div>';
//         this.$modalContent = this.$modal.find('.modal-content');
//         this.$modalContent.html(tempHtml);

//         $tagStrAdd = this.$modalContent.find('#tagStr li');
//         $tagProjectAdd = this.$modalContent.find('#tagProject li');
//         //$divWikiEditor = this.$modalContent.find('.divWikiEditor');
//         //$editor = this.$modalContent.find('#editor').wysiwyg().html(wiki.content);
//         this.showUEditor(wiki);
//         if(this.isManager){
//             this.$modalContent.find('#btnChangeWiki').hide();
//             this.$modalContent.find('#btnRemoveWiki').hide();
//         }
//         this.$modalContent.find('#wikiTitle').val(wiki.title);
//         (wiki.tagStrArr instanceof Array) && wiki.tagStrArr.forEach(function(tag){
//             $tagStrAdd.before($('<li class="tagItem"><span class="tag">'+ tag +'</span><span class="glyphicon remove">&times;</span></li>'));
//         });
//         (wiki.tagProjectIdArr instanceof Array) && wiki.tagProjectIdArr.forEach(function(tag){
//             var projectName = undefined;
//             for(var i = 0; i < AppConfig.projectList.length; i++){
//                 if(AppConfig.projectList[i].id == tag){
//                     if(I18n.type == 'zh'){
//                         projectName = AppConfig.projectList[i].name_cn;
//                     }else{
//                         projectName = AppConfig.projectList[i].name_en;
//                     }
//                 }
//             }
//             $tagProjectAdd.before($('<li class="tagItem"><span class="tag" projectId="'+ tag +'">'+ projectName +'</span><span class="glyphicon remove">&times;</span></li>'));
//         });

//         this.$modalContent.find('#editor').css({height: 'calc(100% - 88px)', width: 'calc(100% - 18px)'});

//         this.$modalContent.find('#btnChangeWiki').off().on('click',function(e){
//             _this.showWikiSearch();
//         });
//         this.$modalContent.find('#btnRemoveWiki').off().on('click',function(e){
//             //TODO 测试confirm
//             confirm('Are you sure to unbind this wiki ?', function () {
//                 if (_this.parent.entity.modal.type == 'ModalPointKPI') {
//                     _this.parent.kpiItem.wikiId = '';
//                     _this.parent.entity.modal.option.kpiList.forEach(function (kpiItem) {
//                         traverseTree(kpiItem);
//                     });
//                     _this.parent.parentArgt.screen.isScreenChange = true;
//                     function traverseTree(tree) {
//                         traverse(tree, 0);
//                     }

//                     function traverse(node, i) {
//                         var children = node.list;
//                         if (node.id == _this.parent.kpiItem.id) {
//                             node.wikiId = '';
//                             return;
//                         }
//                         if (children != null && children.length > 0) {
//                             if (i == children.length - 1) {
//                                 for (var j = 0; j < children.length; j++) {
//                                     traverse(children[j], 0);
//                                 }
//                             } else {
//                                 traverse(node, i + 1);
//                             }
//                         }
//                     }
//                 } else {
//                     _this.parent.entity.modal.wikiId = '';
//                     _this.parent.screen.isScreenChange = true;
//                     $('#wikiId', '#divContainer_' + _this.parent.entity.id).val('').show().next('.chartTitleShow').hide().html('');
//                 }
//                 _this.$modalContent.find('#configAlert').html('Unbind success !');

//                 setTimeout(function () {
//                     _this.$modal.modal('hide');
//                 }, 1000);
//             });
//         });
//         this.$modalContent.find('#tagStr .add').off().on('click',function(e){
//             e.stopPropagation();
//             _this.addTagStr(this);
//         });
//         this.$modalContent.find('#tagProject .add').off().on('click',function(e){
//             e.stopPropagation();
//             _this.addTagProject(this);
//         });
//         this.$modalContent.on('click','.glyphicon.remove',function(){
//             $(this).closest('li').remove();
//         });

//         this.$modalContent.find('#confirm').off().on('click',function(){
//             var tagStrArr = [], tagProjectIdArr = [];
//             var title = _this.$modalContent.find('#wikiTitle').val();
//             var content = _this.ue.getContent().replace(/_ueditor_page_break_tag_/,'<hr class="pagebreak" noshade="noshade" size="5" style="-webkit-user-select: none;">');
//             if(title.trim() == ''){
//                 alert('Title is required !');
//                 return false;
//             }
//             if(content.trim() == ''){
//                 alert('Content is required !');
//                 return false;
//             }
//             _this.$modalContent.find('#tagStr .tag').each(function(){
//                 tagStrArr.push($.trim(this.innerHTML));
//             });
//             _this.$modalContent.find('#tagProject .tag').each(function(){
//                 tagProjectIdArr.push(parseInt($(this).attr('projectId')));
//             });
//             var newWiki = {
//                 id: wiki.id,
//                 modifierId: AppConfig.userId,
//                 title: title,
//                 content: content,
//                 tagStrArr: tagStrArr,
//                 tagProjectIdArr: tagProjectIdArr
//             }
//             WebAPI.post('/updateWiki', newWiki).done(function(result){
//                 if(_this.isManager){
//                     _this.managerWikis[wiki.id] = newWiki;

//                     $('#'+ newWiki.id).after(_this.tpl_wiki_mng.formatEL({
//                         id: newWiki.id,
//                         title: newWiki.title,
//                         tagArr: _this.addTagOfKewWord(newWiki.tagStrArr),
//                         tagProjectArr: _this.addTagOfProject(newWiki.tagProjectIdArr),
//                         modifyTime: new Date().format('yyyy-MM-dd HH:mm')
//                     }));
//                     $('#'+ newWiki.id).remove();
//                 }else{
//                     if(_this.parent.entity.modal.type == 'ModalPointKPI'){
//                         _this.parent.parentArgt.screen.isScreenChange = true;
//                         _this.parent.parentArgt.wikis[newWiki.id] = newWiki;
//                     }else{
//                         _this.parent.screen.isScreenChange = true;
//                         _this.parent.wikis[newWiki.id] = newWiki;
//                     }
//                 }
//                 _this.$modalContent.find('#configAlert').html('Modify success !');
//                 setTimeout(function(){
//                     _this.$modal.modal('hide');
//                 }, 1000);
//             }).fail(function(result){

//             }).always(function(){
//                 _this.$modal.modal('show')
//             });
//         });
//         this.$modal.modal('show');
//     }

//     ModalWiki.prototype.viewWikiInfo = function(wikiId){
//         var _this = this, wiki;
//         if(this.parent.entity.modal.type == 'ModalPointKPI'){
//             wiki = this.parent.parentArgt.wikis[wikiId];
//         }else{
//             wiki = this.parent.wikis[wikiId]
//         }
//         if(wiki){
//             _this.showWikiDetail(wiki);
//         }else{
//             WebAPI.get('/getWikiById/'+ wikiId)
//             .done(function(result){
//                 if(result.id){
//                     if(_this.parent.parentArgt){
//                         _this.parent.parentArgt.wikis[result.id] = result
//                     }else{
//                         _this.parent.wikis[result.id] = result
//                     }
//                     _this.showWikiDetail(result);
//                 }else{
//                     alert('The wiki may be have been removed, please bind a new wiki !');
//                 }
//             })
//             .fail(function(result){
//                 alert(result)
//             });
//         }
//     }

//     ModalWiki.prototype.showWikiDetail = function(wiki){
//         var tempHtml = '\
//             <div class="modal-header">\
//                 <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>\
//                 <h4 class="modal-title" id="" i18n="">{title}</h4>\
//             </div>\
//             <div class="modal-body" id="">\
//                 <div class="bodyTop" style="display:none;">\
//                     <div class="">\
//                         <form class="form-horizontal">\
//                             <div class="form-group">\
//                                 <label class="col-sm-1 control-label" for="">Tag</label>\
//                                 <div class="col-sm-9">\
//                                     <ul class="list-inline tagCtn" id="tagStr">\
//                                     </ul>\
//                                 </div>\
//                             </div>\
//                             <div class="form-group">\
//                                 <label class="col-sm-1 control-label" for="">Project</label>\
//                                 <div class="col-sm-9">\
//                                     <ul class="list-inline tagCtn" id="tagProject">\
//                                     </ul>\
//                                 </div>\
//                             </div>\
//                         </form>\
//                     </div>\
//                 </div>\
//                 <div class="bodyMiddle">\
//                     <div id="wikiContentCtn" style="position: relative; padding-top: 10px;">\
//                         <label for="" style="display:none;">Content</label>\
//                         <div id="divWikiContent" style="min-height: 180px;"></div>\
//                     </div>\
//                 </div>\
//             </div>\
//             <div class="modal-footer" style="display: none;">\
//                 <div id="configAlert"></div>\
//                 <button type="button" class="btn btn-primary" id="confirm" i18n="">Bind</button>\
//             </div>';

//         this.$modalContent.html(tempHtml.formatEL(wiki));
//         var $tagStrAdd = this.$modalContent.find('#tagStr');
//         var $tagProjectAdd = this.$modalContent.find('#tagProject');
//         this.$modalContent.find('#divWikiContent').html(wiki.content);

//         var tempTagStr = '', tempTagProj = '';
//         (wiki.tagStrArr instanceof Array) && wiki.tagStrArr.forEach(function(tag){
//             tempTagStr += '<li class="tagItem"><span class="tag">'+ tag +'</span></li>';
//         });
//         $tagStrAdd.html(tempTagStr);
//         (wiki.tagProjectIdArr instanceof Array) && wiki.tagProjectIdArr.forEach(function(tag){
//             var projectName = undefined;
//             for(var i = 0; i < AppConfig.projectList.length; i++){
//                 if(AppConfig.projectList[i].id == tag){
//                     if(I18n.type == 'zh'){
//                         projectName = AppConfig.projectList[i].name_cn;
//                     }else{
//                         projectName = AppConfig.projectList[i].name_en;
//                     }
//                 }
//             }
//             tempTagProj = '<li class="tagItem"><span class="tag" projectId="'+ tag +'">'+ projectName +'</span></li>';
//         });
//         $tagProjectAdd.html(tempTagProj);
//         this.$modal.modal('show');


//     }

//     //项目标签
//     ModalWiki.prototype.addTagOfProject = function(arr){
//         var str = '';
//         if(arr instanceof Array){
//             for(var i = 0; i < arr.length; i++){
//                 for(var j = 0; j < AppConfig.projectList.length; j++){
//                     if(arr[i] == AppConfig.projectList[j].id){
//                         if(I18n.type = 'zh'){
//                             str += ('<span class="wikiTag">' + AppConfig.projectList[j].name_cn + '</span>');
//                         }else{
//                             str += ('<span class="wikiTag">' + AppConfig.projectList[j].name_en + '</span>');
//                         }
//                     }
//                 }
//             }
//         }
//         return str;
//     }

//     //关键字标签
//     ModalWiki.prototype.addTagOfKewWord = function(arr){
//         var str = '';
//         if(arr instanceof Array){
//             for(var i = 0; i < arr.length; i++){
//                 str += ('<span class="wikiTag">' + arr[i] + '</span>');
//             }
//         }
//         return str;
//     }

//     ModalWiki.prototype.createWiki = function(){
//         var tagStrArr = [], tagProjectIdArr = [], _this = this;
//         var title = this.$modalContent.find('#wikiTitle').val();
//         var content = this.ue.getContent().replace(/_ueditor_page_break_tag_/,'<hr class="pagebreak" noshade="noshade" size="5" style="-webkit-user-select: none;">');
//         this.$modalContent.find('#tagStr .tag').each(function(){
//             tagStrArr.push($.trim(this.innerHTML));
//         });
//         this.$modalContent.find('#tagProject .tag').each(function(){
//             tagProjectIdArr.push(parseInt($(this).attr('projectId')));
//         });
//         if(title.trim() == ''){
//             alert('Title is required !');
//             return false;
//         }
//         if(content.trim() == ''){
//             alert('Content is required !');
//             return false;
//         }
//         var wiki = {
//             creatorId : AppConfig.userId,
//             title : title,
//             content : content,
//             tagStrArr: tagStrArr,
//             tagProjectIdArr: tagProjectIdArr,
//             modifyTime: new Date().format('yyyy-MM-dd HH:mm')
//         }
//         //spin
//         WebAPI.post('/createWiki', wiki).done(function (rslt) {
//             if(rslt.wikiId){
//                 wiki.id = rslt.wikiId;
//                 if(_this.isManager){
//                     _this.managerWikis[wiki.id] = wiki;

//                     _this.$wikiListPanel.find('.divWiki').append(_this.tpl_wiki_mng.formatEL({
//                         id: wiki.id,
//                         title: wiki.title,
//                         tagArr: _this.addTagOfKewWord(wiki.tagStrArr),
//                         tagProjectArr: _this.addTagOfProject(wiki.tagProjectIdArr),
//                         modifyTime: wiki.modifyTime
//                     }))
//                 }else{
//                     if(_this.parent.entity.modal.type == 'ModalPointKPI'){
//                         _this.parent.kpiItem.wikiId = rslt.wikiId;
//                         _this.parent.entity.modal.option.kpiList.forEach(function(kpiItem){
//                             traverseTree(kpiItem);
//                         });
//                         _this.parent.parentArgt.screen.isScreenChange = true;
//                     }else{
//                         _this.parent.entity.modal.wikiId = rslt.wikiId;
//                         _this.parent.wikis[rslt.wikiId] = wiki;
//                         _this.parent.screen.isScreenChange = true;
//                         $('#wikiId','#divContainer_' + _this.parent.entity.id).val(rslt.wikiId).hide().next('.chartTitleShow').show().html(rslt.wikiId);
//                     }
//                 }
//                 _this.$modalContent.find('#configAlert').html('Create success !');
//                 setTimeout(function(){
//                     _this.$modal.modal('hide');
//                 }, 1000);

//                 // modal disappear
//                 function traverseTree(tree) {
//                     traverse(tree, 0);
//                 }
//                 function traverse(node, i) {
//                     var children = node.list;
//                     if(node.id == _this.parent.kpiItem.id){
//                         node.wikiId = rslt.wikiId;
//                         return;
//                     }
//                     if (children != null && children.length > 0) {
//                         if (i == children.length - 1) {
//                             for(var j = 0; j < children.length; j++){
//                                 traverse(children[j], 0);
//                             }
//                         } else {
//                             traverse(node, i + 1);
//                         }
//                     }
//                 }
//             }
//         }).fail(function(){

//         }).always(function(){

//         });
//     }

//     ModalWiki.prototype.addTagStr = function(obj){
//         if($('#tagStr input').length > 0) return;
//         var $input = $('<input type="text"/>');
//         $input.blur(function(){
//             var inputTxt = $input.val();
//             if($.trim(inputTxt) != ''){
//                 var $li = $('<li class="tagItem"><span class="tag">'+ inputTxt +'</span><span class="glyphicon remove">&times;</span></li>');
//                 $(obj.parentElement).prev().remove();
//                 $(obj.parentElement).before($li);
//             }
//         });
//         $(obj.parentElement).before($input);
//     }

//     ModalWiki.prototype.addTagProject = function(obj){
//         if($('#tagProject select').length > 0) return;
//         var $select = $('<select class="">'), name;
//         $select[0].options.add(new Option('Select a project', ''))
//         for(var i = 0; i < AppConfig.projectList.length; i ++){
//             var project = AppConfig.projectList[i];
//             if(I18n.type == 'zh'){
//                 name = project.name_cn;
//             }else{
//                 name = project.name_en;
//             }
//             $select[0].options.add(new Option(name, project.id))
//         }
//         $select.change(function(){
//             var selectTxt = $select[0].options[$select[0].selectedIndex].text;
//             var selectVal = $select.val();
//             if(selectVal != ''){
//                 var $li = $('<li class="tagItem"><span class="tag" projectId="'+ selectVal +'">'+ selectTxt +'</span><span class="glyphicon remove">&times;</span></li>');
//                 $(obj.parentElement).prev().remove();
//                 $(obj.parentElement).before($li);
//             }
//         });
//         $(obj.parentElement).before($select);
//     }

//     ModalWiki.prototype.getProjectIds = function(){
//         var arrProjectId = [];
//         for(var i = 0; i < AppConfig.projectList.length; i++){
//             arrProjectId.push(AppConfig.projectList[i].id);
//         }
//         return arrProjectId;
//     }

//     ModalWiki.prototype.showUEditor = function(wiki){
//         var _this = this;
//         if(!this.ue){
//             UE.delEditor('ueditor');
//             this.ue = UE.getEditor('ueditor',{lang: (I18n.type == 'zh' ? 'zh-cn': 'en')});
//             this.ue.ready(function(){
//                 UE.insertPic(this);//绑定插入图片事件
//                 //wiki && _this.ue.setContent(wiki.content);
//                 var bodyEditor = _this.ue.container.querySelector('iframe').contentWindow.document.querySelector('body');
//                 bodyEditor && (bodyEditor.innerHTML = wiki ? wiki.content : '');
//             });
//         }else{
//             var ue = this.ue;
//             $('#ueditor').replaceWith(this.ue.container.parentNode);
//             this.ue.reset();
//             setTimeout(function(){
//                 if(wiki){
//                     //ue.setContent(wiki.content);
//                     var bodyEditor = ue.container.querySelector('iframe').contentWindow.document.querySelector('body');
//                     bodyEditor && (bodyEditor.innerHTML = wiki ? wiki.content : '');
//                 }else{
//                     ue.setContent('');
//                 }
//             },200)
//         }
//     }

//     return ModalWiki;
// })();

(function () {
    var _this;

    function ModulePanel(screen) {
        _this = this;
        this.screen = screen;
        this.container = screen.modulePanelCtn;
        this.tooltip = null;
        this.init();
    }

    ModulePanel.prototype.tpl = '<div id="modalCt" class="panel-body"><span id="btnModalAdd" class="glyphicon glyphicon-plus-sign" style="position:absolute;top: 5px;right: 15px;font-size: 16px;"></span></div>';

    ModulePanel.prototype.show = function () {
        //默认显示第一组
        //$('#modalCt').children('ul:eq(0)').children('.nav-header').click();
    };

    ModulePanel.prototype.init = function () {
        this.renderTooltip();

    };

    ModulePanel.prototype.attachEvents = function () {
        var _this = this;

        $('#btnModalAdd', this.container).off('click').click(function (e) {
            var entity = new ModalNone(_this.screen, {
                id: (+new Date()).toString(),
                spanC: 6,
                spanR: 2,
                modal: {type: "ModalNone"}
            });
            _this.screen.arrEntityOrder.push(entity.entity.id);
            _this.screen.listEntity[entity.entity.id] = entity;
            entity.render();
            entity.configure();
        });
    };

    ModulePanel.prototype.detachEvents = function () {
        $('#btnModalAdd', this.container).off('click');
    };

    ModulePanel.prototype.initModuleList = (function () {

        function getModuleList(group) {
            var $ul = $('<ul class="nav nav-list accordion-group">');
            var $liList = $('<li class="rows" style="display: none;">').appendTo($ul);
            var icon = '';
            var hideGroup = ['ModalRank', 'ModalPointKPI'];
            for (var i in group) {
                if (i == 0) {
                    switch (group[0].type) {
                        case 'ModalChart':
                            icon = 'glyphicon glyphicon-align-left';
                            break;
                        case 'ModalHistoryChart':
                            icon = 'glyphicon glyphicon-stats';
                            break;
                        case 'ModalAppChart':
                            icon = 'glyphicon glyphicon-align-right';
                            break;
                    }
                    var $liHd = $('<li class="nav-header">').append('<span class="' + icon + '"></span>').append('<i class="icon-plus icon-white"></i>' + I18n.findContent(group[i].name))
                        .click(function () {
                            var $otherUl = $(this).parent('ul').siblings('ul');
                            $otherUl.find('.rows').slideUp();
                            $otherUl.find('i').removeClass('icon-minus').addClass('icon-plus');
                            $(this).next('.rows').slideToggle();
                            var $i = $(this).find('i');
                            var toggleClass = (function () {
                                if ($i.hasClass('icon-minus'))
                                    return 'icon-plus icon-white'
                                else
                                    return 'icon-minus icon-white'
                            })();
                            $(this).find('i').removeClass().addClass(toggleClass)
                        });
                    $ul.prepend($liHd);
                } else {
                    var $div = $('<div class="lyrow ui-draggable" draggable="true"> ').html('<span class="glyphicon glyphicon-menu-right"></span>' + I18n.findContent(group[i].name)).attr('type', group[i].type);
                    $div[0].ondragstart = function (e) {
                        $('#functionPreview').remove();
                        e.dataTransfer.setData("type", $(this).attr('type'));
                        e.dataTransfer.setData("title", $(this).text());
                    }
                    $div.on('mouseenter', function () {
                        var imgName = $(this).attr('type');
                        var toolDiv = document.createElement('div');
                        toolDiv.id = 'functionPreview';
                        $(toolDiv).addClass('toolDiv');
                        this.appendChild(toolDiv);
                        var dataDiv = document.createElement('div');
                        $(dataDiv).addClass('dataDiv');

                        var facOption = new FactoryIoC('dashboard');
                        var optionTemplate = facOption.getModel(imgName).prototype.optionTemplate;
                        var desc=optionTemplate.tooltip.isSpecData ?$(optionTemplate.tooltip.desc, _this.tooltip).html():optionTemplate.tooltip.desc;
                        $(dataDiv).html('<span>数据源</span><span class="btnCopy">复制</span><pre class="dataStruct">' +desc+'</pre>');

                        if (optionTemplate.tooltip.imgPC) {
                            var imgPC = new Image();
                            imgPC.src = 'static/images/dashboard/spec/pc_' + imgName + '.png';
                            imgPC.onload = function () {
                                var imgPCDiv = document.createElement('div');
                                imgPCDiv.className = 'imgPCDiv';
                                $(imgPCDiv).append('<p>PC端</p>');
                                imgPCDiv.appendChild(imgPC);
                                toolDiv.appendChild(imgPCDiv);
                            }
                        }
                        if (optionTemplate.tooltip.imgMobile) {
                            var imgMobile = new Image();
                            imgMobile.src = 'static/images/dashboard/spec/app_' + imgName + '.png';
                            imgMobile.onload = function () {
                                var imgMobDiv = document.createElement('div');
                                imgMobDiv.className = 'imgMobDiv';
                                $(imgMobDiv).append('<p>移动端</p>');
                                imgMobDiv.appendChild(imgMobile);
                                toolDiv.appendChild(imgMobDiv);
                            }
                        }
                        $(toolDiv).append(dataDiv);

                        $('.btnCopy').off('click').on('click', function(e){
                            // 创建元素用于复制
                            var aux = document.createElement("input");
                            // 获取复制内容
                            var content = document.querySelector('.dataStruct').innerHTML;
                            // 设置元素内容
                            aux.setAttribute("value", content);
                            // 将元素插入页面进行调用
                            document.body.appendChild(aux);
                            // 复制内容
                            aux.select();
                            // 将内容复制到剪贴板
                            document.execCommand("copy");
                            // 删除创建元素
                            document.body.removeChild(aux);
                            alert('已复制到剪切板');
                        });
                    }).on('mouseleave', function () {
                        $('#functionPreview').remove();
                    });

                    if (hideGroup.indexOf(group[i].type) != -1) {
                        continue;
                    } else {
                        $liList.append($div);
                    }

                }
            }
            return $ul;
        }

        return function () {
            var list, groupList = [];
            var list = this.screen.factoryIoC.getList();
            var $modals = $(this.tpl);

            for (var i = 0, len = list.length, option; i < len; i++) {
                option = list[i].prototype.optionTemplate;
                if (option && option.parent != null) {
                    groupList[option.parent] = groupList[option.parent] || [];
                    groupList[option.parent].push(option)
                }
            }
            for (var i = 0; i < groupList.length; i++) {
                //暂时不显示 数据分析
                if (groupList[i][0].type == 'ModalAnalysis') {
                    continue;
                }
                $modals.append(getModuleList(groupList[i]));
            }

            $(this.container).append($modals);

            //factory 暂时隐藏 报表章节
            $('[type="ModalReportChapter"]', '#modalCt').hide();

            //默认展开第一个
            $('#modalCt').children('ul:eq(0)').children('.nav-header').click();
        };
    }());

    ModulePanel.prototype.renderTooltip = function () {
        WebAPI.get('static/app/WebFactory/scripts/screens/dashboard/panels/modulePanel.html').done(function (result) {
            var dataPointDiv = document.createElement('div');
            _this.tooltip=$(dataPointDiv).html(result);
            _this.initModuleList();
            _this.attachEvents();
        });
    };

    ModulePanel.prototype.hide = function () {
    };

    ModulePanel.prototype.close = function () {
        this.container.innerHTML = '';
    };

    window.ModulePanel = ModulePanel;

}());
(function ($) {

    function ModalDBHistory() {
        this.options = undefined;
        // 当前需要渲染的实例
        this.modal = null;
        this.refChart = null;

        this.$wrap = null;

        this.showOptions = {};
    }

    ModalDBHistory.prototype.show = function () {
        var _this = this;
        var domPanelContent = document.getElementById('paneCenter');

        if(!this.modal) return;
        this.options = getDefaultOption();

        // 查看页面是否已经缓存过模板
        // 没有缓存，则从服务端获取模板
        if(this.$wrap) {
            this.$wrap.appendTo(document.body);
            this.initCustomShow();
            return;
        }

        Spinner.spin(domPanelContent);
        WebAPI.get('/static/views/observer/widgets/modalDBHistory.html')
        .done(function (html) {
            Spinner.stop();
            _this.$wrap = $('<div class="modal-db-history-wrap" id="modalDBHistoryWrap">')
                .appendTo(document.body).html(html);
            _this.$modal = _this.$wrap.children('.modal');
            I18n.fillArea(_this.$wrap);
            _this.init();
            _this.initCustomShow();
        });
    };

    // 自定义显示
    ModalDBHistory.prototype.displayCustomShow = function (options) {
        if(!options) return;

        this.$selMode.val(options.mode);
        this.$selMode.trigger('change');

        // 处理显示时间间隔，开始结束时间
        if(options.mode === 'fast') {
            this.$selTimerange.val(options.timeRange);
        } else {
            this.$selInterval.val(options.timeFmt);
            this.$selInterval.trigger('change');

            this.$iptTimeStart.val(options.startTimeStr);
            this.$iptTimeEnd.val(options.endTimeStr);
        }

        this.$modal.modal('show');
    };

    ModalDBHistory.prototype.initCustomShow = function () {
        var showOptions = this.showOptions;
        var now;

        if(this.modal.type === "ModalMultiple") {
            now = new Date();
            showOptions.mode = 'custom';
            showOptions.timeFmt = 'h1';
            // 向前推100个小时
            showOptions.startTimeStr = function () {
                return new Date(now.valueOf() - 360000000/* 100*60*60*1000 */).format('yyyy-MM-dd HH:00'); 
            }.call(this);
            showOptions.endTimeStr = function () {
                return now.format('yyyy-MM-dd HH:00');
            }.call(this);

        } else {
            showOptions = this.showOptions = {
                mode: 'fast',
                timeRange: 'day'
            };
        }
        this.displayCustomShow(showOptions);
    };

    ModalDBHistory.prototype.getOptionsByType = function (data) {
        var options = [];

        if(this.modal.type === 'ModalMultiple') {
            options = function () {
                var series = [];
                var legend = [];
                var typeMap = {};
                var paraType = this.modal.option.paraType || [];
                var usedDsNameMap = {};
                
                paraType.forEach(function (row) {
                    if(!row.arrId || !row.arrId.length) return;
                    row.arrId.forEach(function (dsId) {
                        if(typeMap[dsId] === undefined) {
                            typeMap[dsId] = [row.type];
                        } else {
                            typeMap[dsId].push(row.type);
                        }
                    });
                });

                var arrId = [];
                var arrItem = [];
                data.list.forEach(function (row) {
                    var dsId = row.dsItemId;
                    if (dsId) {
                        arrId.push(dsId);
                    }
                });
                arrItem = AppConfig.datasource.getDSItemById(arrId);

                data.list.forEach(function (row) {
                    var type = typeMap[row.dsItemId].shift();
                    var dsId = row.dsItemId;
                    //var name = AppConfig.datasource.getDSItemById(dsId).alias || dsId;
                    var name;
                    for (var i = 0, len = arrItem.length; i < len; i++) {
                        if (dsId == arrItem[i].id) {
                            name = arrItem[i].alias;

                            // 处理 undefined 的情况
                            usedDsNameMap[dsId] = usedDsNameMap[dsId] || 0;
                            usedDsNameMap[dsId] += 1;

                            if(usedDsNameMap[dsId] > 1) {
                                name = name + '_' + usedDsNameMap[dsId];
                            }

                            legend.push(name);

                            switch(type) {
                                case 'line':
                                    series.push({
                                        name: name,
                                        type: 'line',
                                        symbol: 'none',
                                        data: row.data,
                                        yAxisIndex: 1,
                                        z: 4
                                    });
                                    break;
                                case 'bar':
                                    series.push({
                                        name: name,
                                        type: 'bar',
                                        symbol: 'none',
                                        data: row.data,
                                        yAxisIndex: 0
                                    });
                                    break;
                                case 'area':
                                    series.push({
                                        name: name,
                                        type: 'line',
                                        itemStyle: {normal: {areaStyle: {type: 'default'}}},
                                        symbol: 'none',
                                        data: row.data,
                                        yAxisIndex: 0,
                                        z: 3
                                    });
                                    break;
                                case 'cumulativeBar':
                                    series.push({
                                        name: name,
                                        type: 'bar',
                                        stack:'realtime total',
                                        symbol: 'none',
                                        data: row.data,
                                        yAxisIndex: 0
                                    });
                                    break;
                                default: break;
                            }
                            break;
                        }
                    }
                });
                return {
                    series: series,
                    legend: {data: legend},
                    yAxis: [
                        {
                            type: 'value',
                            scale: false,
                            splitArea:{show:false}
                        },
                        {
                            type: 'value',
                            scale: false,
                            splitArea:{show:false}
                        }
                    ]
                };
            }.call(this);

        } else {
            options = function () {
                var series = [];
                var legend = [];
                var usedDsNameMap = {};


                data.list = data.list.filter(function (row, i) {
                    if( (!row.data || !row.data.length) && this.modal.type === 'ModalNote') {
                        return false;
                    }

                    var dsId = row.dsItemId;
                    var name = AppConfig.datasource.getDSItemById(dsId).alias || dsId;
                    // 处理 undefined 的情况
                    usedDsNameMap[dsId] = usedDsNameMap[dsId] || 0;
                    usedDsNameMap[dsId] += 1;

                    if(usedDsNameMap[dsId] > 1) {
                        name = name + '_' + usedDsNameMap[dsId];
                    }

                    series.push({
                        name: name,
                        symbol: 'none',
                        type: 'line',
                        markLine: {
                            data: [{type : 'average', name: 'average'}]
                        },
                        data: row.data
                    });

                    legend.push(name);

                    return true;
                }, this);
                return {
                    series: series,
                    legend: {data: legend}
                };
            }.call(this);
        }

        if(this.refChart) {
            try {
                options.color = this.refChart.getOption().color || [];
            } catch (e) {}
        }

        return options;
    };

    ModalDBHistory.prototype.init = function () {
        this.$chartContainer = $('.chart-container', this.$modal);
        this.$btnSearch = $('.btn-search', this.$modal);
        this.$selMode = $('.sel-mode', this.$modal);

        this.$selTimerange = $('.sel-timerange', this.$modal);
        this.$selInterval = $('.sel-interval', this.$modal);
        this.$iptTimeStart = $('.ipt-timestart', this.$modal);
        this.$iptTimeEnd = $('.ipt-timeend', this.$modal);

        this.$groupFast = $('[data-group="fast"]', this.$modal);
        this.$groupCustom = $('[data-group="custom"]', this.$modal);

        this.initValidator();
        // 添加事件
        this.attachEvents();
    };

    ModalDBHistory.prototype.initValidator = function () {
        var _this = this;
        this.validator = new Validator({
            elements: [{
                name: 'endTime',
                selector: this.$iptTimeEnd,
                rules: [{
                    valid: function (val) {
                        var startTimeVal = _this.$iptTimeStart.val();
                        if(val <= startTimeVal) {
                            this.fail();
                        } else {
                            this.success();
                        }
                    },
                    msg: 'the end time should later than start time.'
                }]
            }],
            icon: false
        });
    };

    ModalDBHistory.prototype.initTimePlugin = function (fmt) {
        var now = new Date();
        var formatStr;
        if (!fmt) {
            formatStr = timeFormatChange('yyyy-mm-dd hh:ii');
            fmt = {
                format: formatStr,
                showFormat: formatStr,
                minView: 'hour',
                startView: 'month',
                startTime: new Date(now.valueOf() - 60*60*24*1000)
            };
        } else {
            this.$iptTimeStart.datetimepicker('remove').val('');
            this.$iptTimeEnd.datetimepicker('remove').val('');
        }
        this.$iptTimeStart.datetimepicker({
            format: fmt.format,
            minView: fmt.minView,
            startView: fmt.startView,
            autoclose: true,
            todayBtn: true,
            forceParse: false,
            startDate: "2010-01-01 00:00",
            endDate: new Date(),
            initialDate: new Date(fmt.startTime)
        });
        //this.$iptTimeStart.datetime();
        this.$iptTimeStart.val( timeFormat(fmt.startTime,fmt.showFormat) );

        this.$iptTimeEnd.datetimepicker({
            format: fmt.format,
            minView: fmt.minView,
            startView: fmt.startView,
            autoclose: true,
            todayBtn: true,
            forceParse: false,
            startDate: "2010-01-01 00:00",
            endDate: new Date(),
            initialDate: now
        });
        //this.$iptTimeEnd.datetime();
        this.$iptTimeEnd.val( now.timeFormat(fmt.showFormat) );
    };

    ModalDBHistory.prototype.initChart = function () {
        if(!this.chart) {
            this.chart = echarts.init(this.$chartContainer[0], 'macarons');//不需要跟随皮肤切换
        }
    };

    // 设置
    ModalDBHistory.prototype.setOptions = function (options) {
        this.options = options;
    };

    ModalDBHistory.prototype.setModal = function (modal, chart) {
        this.modal = modal;
        this.refChart = chart;
    };

    ModalDBHistory.prototype.attachEvents = function () {
        var _this = this;

        this.$selMode.off('change').on('change', function (e) {
            var mode = $(this).val();

            if(mode === 'fast') {
                _this.$selTimerange.val('hour');
                _this.$groupFast.show();
                _this.$groupCustom.hide();
            } else {
                _this.$groupFast.hide();
                _this.$groupCustom.show();
                _this.$selInterval.trigger('change');
            }
            _this.showOptions.mode = mode;
        });

        this.$selInterval.off('change').on('change', function (e) {
            var interval = $(this).val();
            var fmt = {};
            var now = new Date(), nowTick = now.valueOf();
            var formatStr;
            fmt.endTime = now;

            switch (interval) {
                case 'm1':
                    formatStr = timeFormatChange("yyyy-mm-dd hh:ii");
                    fmt.startTime = new Date(nowTick - 60000); /* 60*1000 */
                    fmt.format = formatStr;
                    fmt.showFormat = formatStr;
                    fmt.minView = 'hour';
                    fmt.startView = 'month';
                    break;
                case 'm5':
                    formatStr = timeFormatChange("yyyy-mm-dd hh:ii");
                    fmt.startTime = new Date(nowTick - 300000); /* 5*60*1000 */
                    fmt.format = formatStr;
                    fmt.showFormat = formatStr;
                    fmt.minView = 'hour';
                    fmt.startView = 'month';
                    break;
                case 'h1':
                    formatStr = timeFormatChange("yyyy-mm-dd hh");
                    fmt.startTime = new Date(nowTick - 3600000); /* 60*60*1000 */
                    fmt.format = formatStr+":00";
                    fmt.showFormat = formatStr+":00";
                    fmt.minView = 'day';
                    fmt.startView = 'month';
                    break;
                case 'd1':
                    formatStr = timeFormatChange("yyyy-mm-dd");
                    fmt.startTime = new Date(nowTick - 86400000); /* 24*60*60*1000 */
                    fmt.format = formatStr;
                    fmt.showFormat = formatStr;
                    fmt.minView = 'month';
                    fmt.startView = 'month';
                    break;
                case 'M1':
                    formatStr = timeFormatChange("yyyy-mm");
                    fmt.startTime = new Date(nowTick - 2592000000); /* 30*24*60*60*1000 */
                    fmt.format = formatStr;
                    fmt.showFormat = formatStr;
                    fmt.minView = 'year';
                    fmt.startView = 'year';
                    break;
            }
            _this.initTimePlugin(fmt);
        });

        this.$btnSearch.off('click').on('click', function (e) {
            var startTime, endTime, timeFmt;
            var rangeTick;

            if(_this.showOptions.mode === 'fast') {
                switch(_this.$selTimerange.val()) {
                    case 'hour':
                        rangeTick = 3600000; // 60*60*1000
                        timeFmt = 'm5';
                        break;
                    case 'day':
                        rangeTick = 86400000; // 24*60*60*1000
                        timeFmt = 'h1';
                        break;
                    case 'week':
                        rangeTick = 604800000; // 7*24*60*60*1000
                        timeFmt = 'h1';
                        break;
                    case 'month':
                        rangeTick = 2592000000; // 30*24*60*60*1000
                        timeFmt = 'd1';
                        break;
                    case 'quarter':
                        rangeTick = 7776000000; // 90*24*60*60*1000
                        timeFmt = 'd1';
                        break;
                    default:
                        break;
                }
                endTime = new Date();
                startTime = new Date( endTime.valueOf() - rangeTick );
                _this.updateChart(startTime, endTime, timeFmt);
            } else {
                //因无法正确验证M, yyyy格式 暂时去掉
                //_this.validator.valid().done(function () {
                //    startTime = new Date( _this.$iptTimeStart.val() );
                //    endTime = new Date( _this.$iptTimeEnd.val() );
                //    timeFmt = _this.$selInterval.val();
                //    _this.updateChart(startTime, endTime, timeFmt);
                //});
                startTime = timeFormat( _this.$iptTimeStart.val() ).toDate();
                endTime = timeFormat( _this.$iptTimeEnd.val() ).toDate();
                timeFmt = _this.$selInterval.val();
                _this.updateChart(startTime, endTime, timeFmt);
            }
            e.stopPropagation();
        });

        this.$modal.off('hidden.bs.modal').on('hidden.bs.modal', function (e) {
            // 重置一下
            _this.reset();
            _this.$wrap.detach();
            e.preventDefault();
            e.stopPropagation();
        });

        this.$modal.off('shown.bs.modal').on('shown.bs.modal', function (e) {
            // 初始化图表
            _this.initChart();
            // 触发刷新
            _this.$btnSearch.trigger('click');
        });
    };

    ModalDBHistory.prototype.updateChart = function (start, end, timeFmt) {
        var _this = this;
        var startTick, endTick;
        var points = this.modal.points;

        // 如果没有 points, 界面显示无数据
        if(!points || !points.length) {
            this.chart.getOption().series = [];
            return;
        }

        // show loading
        this.chart.showLoading({
            text : 'Loading',
            effect: 'spin',
            textStyle : {
                fontSize : 20
            }
        });

        // 获取数据
        return WebAPI.post('/analysis/startWorkspaceDataGenHistogram', {
            dsItemIds: points,
            timeStart: start.format('yyyy-MM-dd HH:mm:ss'),
            timeEnd: end.format('yyyy-MM-dd HH:mm:ss'),
            // 1 小时数据默认间隔 5 分钟
            timeFormat: timeFmt
        }).then(function (rs) {
            var seriesData = [];
            var timeShaft = rs.timeShaft;
            var list = rs.list;
            var optionsFromType;
            
            // 如果没数据，直接不处理
            if(!rs.timeShaft || !rs.timeShaft.length) {
                _this.chart.setOption({
                    xAxis: {
                        data: []
                    },
                    yAxis: {}
                }, true);
                return;   
            }


            optionsFromType = _this.getOptionsByType(rs);

            // rendering
            _this.options.chartOptions.xAxis = [{
                boundaryGap: false,
                type: 'category',
                data: timeShaft
            }];

            _this.options.chartOptions = $.extend(false, _this.options.chartOptions, optionsFromType);

            _this.chart.setOption(_this.options.chartOptions, true);

        }, function () {
            // 如果接口返回错误，界面显示无数据
            _this.chart.setOption({
                series: []
            }, true);
        }).always(function () {
            _this.chart.hideLoading();
        });
    };

    ModalDBHistory.prototype.reset = function () {
        if(!!this.chart) {
            this.chart.clear();
            this.chart.dispose();
            this.chart = null;
        }
    };

    ModalDBHistory.prototype.close = function () {
        this.$wrap.remove();
        this.$wrap = null;
    };

    function getDefaultOption () {
        var i18nEcharts = I18n.resource.echarts;
        return {
            chartOptions: {
                toolbox: {
                    show : true,
                    feature : {
                        dataZoom: {
                            show: true,//这个为false会有bug 千万别~
                            title : {
                                zoom : i18nEcharts.DATAZOOM,
                                back : i18nEcharts.DATAZOOMRESET
                            }
                        },
                        dataView: {
                            show: true,
                            readOnly: false,
                            title : i18nEcharts.DATAVIEW,
                            lang: [i18nEcharts.DATAVIEW, i18nEcharts.CLOSE, i18nEcharts.REFRESH]
                        },
                        magicType: {
                            show: true,
                            type: ['line', 'bar'],
                            title : {
                                line : i18nEcharts.LINE,
                                bar : i18nEcharts.BAR
                            }
                        },
                        restore: {
                            show: true,
                            title: i18nEcharts.REDUCTION
                        },
                        saveAsImage: {
                            show: true,
                            title: i18nEcharts.SAVE_AS_PICTURE,
                            lang : i18nEcharts.SAVE
                        }
                    }
                },
                tooltip: {
                    trigger: 'axis'
                },
                dataZoom: {
                    show: true
                },
                grid: {
                    y: 50,
                    y2: 80
                },
                yAxis: [
                    {
                        type: 'value',
                        boundaryGap: [0.1, 0.1]
                    }
                ],
                series: []
            }
        };
    }

    this.ModalDBHistory = ModalDBHistory;
}).call(this, jQuery);

var ModalBase = (function () {

    function ModalBase(parent, entity, _funcRender, _funcUpdate,_funcConfigMode, configModalOpt, replacedElementId) {
        if (!parent) return;
        this.screen = parent;
        this.entity = entity;
        this.wikis = {};

        this.container = undefined;
        this.chart = undefined; //chart or other
        this.spinner = undefined;
        this.subEntity = undefined;

        this.executeRender = _funcRender;
        this.executeConfigMode = _funcConfigMode;
        this.executeUpdate = _funcUpdate;

        // this.modalWikiCtr = undefined;
        this.hasEdit = false;
        this.spanRange = {};

        if(this.configModalOptDefault)this.configModalOpt = $.extend(true,{},this.configModalOptDefault, configModalOpt);
        this.initContainer(replacedElementId);

        !AppConfig.datasource && (AppConfig.datasource = {
            getDSItemById: DataSource.prototype.getDSItemById.bind({
                m_parent: {
                    store: {
                        dsInfoList: []
                    }
                },
                m_arrCloudTableInfo: []
            })
        })
    };

    ModalBase.prototype = {
        UNIT_WIDTH: 100/12,   // 100/12 = 8.3 一行均分为12列,为了精确,保留3位小数
        UNIT_HEIGHT: 100/6,    // 100/6 = 16.5   一屏均分为6行
        initContainer: function (replacedElementId) {
            var divParent = document.getElementById('divContainer_' + this.entity.id);
            var isNeedCreateDivParent = false;
            var scrollClass = '';

            if ((!divParent) || replacedElementId) {
                isNeedCreateDivParent = true;
            }

            if (isNeedCreateDivParent) {
                divParent = document.createElement('div');
                divParent.id = 'divContainer_' + this.entity.id;
            }
            //get container
            if (replacedElementId) {
                var $old = $('#divContainer_' + replacedElementId);
                $(divParent).insertAfter($old);
                $old.remove();
            }
            else {
                isNeedCreateDivParent && this.screen.container.appendChild(divParent);
            }
            
            $(divParent).addClass('springContainer');
            if(AppConfig.isMobile || this.screen.isForMobile || (this.screen.options && this.screen.options.isForMobile) || (this.screen.screen && this.screen.screen.options && this.screen.screen.options.isForMobile)) {
                //this.spanRange = {
                //    minWidth: 1,
                //    maxWidth: 3,
                //    minHeight: 1,
                //    maxHeight: 10,
                //    yScale : 3/5,
                //    xScale : 4
                //};
                this.spanRange = {
                    minWidth: 1,
                    maxWidth: 3,
                    minHeight: 1,
                    maxHeight: 6,
                    yScale : 4/3,
                    xScale : 4
                };
            }else{
                this.spanRange = {
                    minWidth: this.optionTemplate.minWidth,
                    maxWidth: this.optionTemplate.maxWidth,
                    minHeight: this.optionTemplate.minHeight,
                    maxHeight: this.optionTemplate.maxHeight,
                    yScale : 1,
                    xScale : 1
                };
            }
            //adapt ipad 1024px
            if (AppConfig.isMobile || (this.screen.options && this.screen.options.isForMobile) || (this.screen.screen && this.screen.screen.options && this.screen.screen.options.isForMobile)) {
                var height = 100;
                $(divParent).addClass('forMobile');
                $(divParent).addClass('widget' + this.optionTemplate.type);
                if((this.optionTemplate.scroll === false || this.entity.scroll === false) && !(this.screen.options && this.screen.options.isConfig || this.screen.isConfigMode)){
                    divParent.className += ' noScroll';
                } else {
                    height = this.UNIT_HEIGHT * this.entity.spanR * this.spanRange.yScale;
                    height > 100 && (height = 100);
                    divParent.style.height = height + '%';
                }
                divParent.style.width = this.UNIT_WIDTH * this.entity.spanC * this.spanRange.xScale + '%';
                if (this.UNIT_WIDTH * this.entity.spanC * this.spanRange.xScale > 100){
                    divParent.style.width = '100%';
                }
                if (this.UNIT_HEIGHT * this.entity.spanR * this.spanRange.yScale > 100){
                    divParent.style.height = '100%';
                }
            } else {
                divParent.style.height = this.UNIT_HEIGHT * this.entity.spanR + '%';
                divParent.style.width = this.UNIT_WIDTH * this.entity.spanC + '%';
            }
            //便签和组合图高度超出部分要加滚动条样式
            if (['ModalNote', 'ModalMix'].indexOf(this.entity.modal.type) > -1) {
                scrollClass = ' gray-scrollbar scrollY'
            }
            if (this.entity.modal.title && this.entity.modal.title != '' && (!this.entity.isNotRender)) {
                divParent.innerHTML = '<div class="panel panel-default">\
                    <div class="panel-heading springHead">\
                        <h3 class="panel-title" style="font-weight: bold;">' + this.entity.modal.title + '</h3>\
                    </div>\
                    <div class="panel-body springContent' + scrollClass + '" style="position: relative;"></div>\
                </div>';
            } else {//为组合图里的小图添加标题
                divParent.innerHTML = '<div class="panel panel-default">\
                    <span class="springSeHead fontTemp6">' + (this.entity.modal.title ? this.entity.modal.title : '') + '</span>\
                    <div class="panel-body springContent' + scrollClass + '" style="position: relative;height:100%;"></div>\
                </div>';
            }
            //如果是移动端,背景设置为透明
            if (AppConfig.isMobile || (this.screen.options && this.screen.options.isForMobile) || (this.screen.screen && this.screen.screen.options && this.screen.screen.options.isForMobile)) {
                divParent.children[0].classList.add('transparent');
            }

            //按钮容器:锚链接,历史数据,wiki
            if(!(this instanceof ModalAnalysis)){
                var divBtnCtn = document.createElement('div');
                divBtnCtn.className = 'springLinkBtnCtn';

                var domPanel = divParent.getElementsByClassName('panel')[0];
                var lkHistory;

                // interact chart time config interface
                if ('ModalInteract' == this.entity.modal.type) {
                    var aInterCfg;
                    aInterCfg = document.createElement('a');
                    aInterCfg.className = 'springLinkBtn';
                    aInterCfg.title = 'Config time parameter';
                    aInterCfg.href = 'javascript:;';
                    aInterCfg.innerHTML = '<span class="glyphicon glyphicon-cog"></span>';
                    divBtnCtn.appendChild(aInterCfg);
                    aInterCfg.onclick = function() {
                        //var _hmt = _hmt || [];
                        new ModalInteractCfgPanel(_this).show();
                    }
                }
                _hmt.push(['_trackEvent', 'Dashboard加入数据源', 'click', 'user-' + AppConfig.userId +'/project-'+(AppConfig.projectId?AppConfig.projectId:0)]);
                if(['ModalHistoryChart','ModalHistoryChartNormal','ModalHistoryChartEnergyConsume','ModalHistoryCharYearOntYearLine','ModalHistoryCharYearOntYearBar'].indexOf(this.entity.modal.type) > -1){
                    //var _hmt = _hmt || [];
                    _hmt.push(['_trackEvent', 'Dashboard历史曲线-' + I18n.resource.toolBox.modal[this.optionTemplate.name.split('.').splice(-1)], 'create', 'user-' + AppConfig.userId +'/project-'+(AppConfig.projectId?AppConfig.projectId:0)]);
                }
                // jump button
                if (this.entity.modal.points && this.entity.modal.points.length > 0) {
                    var lkJump;
                    lkJump = document.createElement('a');
                    lkJump.className = 'springLinkBtn';
                    lkJump.title = 'Add to datasource';
                    lkJump.href = 'javascript:;';
                    lkJump.innerHTML = '<span class="glyphicon glyphicon-export"></span>';
                    divBtnCtn.appendChild(lkJump);
                    lkJump.onclick = function() {
                        new ModalAppendPointToDs(true, _this.entity.modal.points, null).show();
                    }
               }

                // '历史数据' 按钮逻辑开始
                if(['ModalHtml', 'ModalMix', 'ModalObserver', 'ModalRank', 'ModalRankNormal', 'ModalNone', 'ModalInteract'].indexOf(this.entity.modal.type) > -1
                    || !this.entity.modal.points || !this.entity.modal.points.length) {
                } else {
                    lkHistory = document.createElement('a');
                    lkHistory.className = 'springLinkBtn';
                    lkHistory.title = 'Show History';
                    lkHistory.href = 'javascript:;';
                    lkHistory.innerHTML = '<span class="glyphicon glyphicon-stats"></span>';
                    divBtnCtn.appendChild(lkHistory);
                    // 添加 "历史数据" 按钮事件
                    this.attachLkHistoryEvents( lkHistory );
                }
                // '历史数据' 按钮逻辑结束

                //锚链接 start
                var link = this.entity.modal.link;
                var _this = this;
                if(link && AppConfig.menu[link]){
                    var linkBtn = document.createElement('a');
                    linkBtn.className = 'springLinkBtn';
                    linkBtn.innerHTML = '<span class="glyphicon glyphicon-link"></span>';
                    linkBtn.setAttribute('pageid',link);
                    linkBtn.title = 'Link to ' + AppConfig.menu[link];
                    divBtnCtn.appendChild(linkBtn);
                    linkBtn.onclick = function(e){
                        var $ev =  $('#ulPages [pageid="'+ link +'"]');
                        if($ev[0].className != 'nav-btn-a'){
                            $ev = $ev.children('a');
                            $ev.closest('.dropdown').children('a').trigger('click');
                        }
                        $ev.trigger('click');
                    }
                }
                //锚链接 end

                //wiki start
                //var wiki = this.entity.modal.wiki;
                // var wikiId = this.entity.modal.wikiId;
                // if(wikiId){
                //     var wikiBtn = document.createElement('a');
                //     wikiBtn.className = 'springLinkBtn';
                //     wikiBtn.innerHTML = '<span class="glyphicon glyphicon-info-sign"></span>';
                //     wikiBtn.title = 'View detail info';
                //     wikiBtn.id = wikiId;
                //     divBtnCtn.appendChild(wikiBtn);
                //     wikiBtn.onclick = function(){
                //         // _this.getInstanceOfModalWiki().viewWikiInfo(wikiId);
                //     }
                // }
                //wiki end

                domPanel.appendChild(divBtnCtn);
            }

            //this.initToolTips(divParent.getElementsByClassName('springHead'));
            this.container = divParent.getElementsByClassName('springContent')[0];

            if(this.entity.modal.type !== 'ModalMix'&&this.entity.modal.type !== 'ModalAppBlind'&&this.entity.modal.type !== 'ModalAppPie'){
                this.spinner = new LoadingSpinner({color: '#00FFFF'});
                this.spinner.spin(this.container);
            }
            return this;
        },

        initToolTips: function(parent) {
            var _this = this;
            if (!parent) return;
            var descTip = new StringBuilder();
            descTip.append('<div class="tooltip" role="tooltip" style="z-index:10;position:fixed;max-width:300px;">');
            descTip.append('    <div class="tooltipTitle tooltip-inner" style="display:none">GeneralRegressor</div>');
            descTip.append('    <div class="tooltipContent" style="border:1px solid black">');
            descTip.append('        <p class="containerDesc" style="word-break:break-all;"><span style="font-weight:bold">').append(_this.entity.modal.desc).append('</span> ').append('</p>');
            descTip.append('    </div>');
            descTip.append('    <div class="tooltip-arrow"></div>');
            descTip.append('</div>');
            var options = {
                placement: 'bottom',
                title: _this.entity.modal.title,
                template: descTip.toString()
            };
            if (_this.entity.modal.desc && _this.entity.modal.desc !=''){
                $(parent).tooltip(options);
            }
        },

        render: function () {
            try {
                this.executeRender();
            } catch (e) {
                console.warn(e);
            }

            if (this.chart) {
                this.chart.on('resize', function (param) {
                    this.resize();
                });
            }
        },

        update: function (options) {
            var modal, dsChartConfig, accuracy;
            var num, specialCond;
            if ((!options) || options.length == 0) return;

            // 新增精度处理逻辑
            modal = this.entity.modal;
            dsChartConfig = modal.dsChartCog && modal.dsChartCog.length ? modal.dsChartCog[0] : {};
            accuracy = dsChartConfig.accuracy;

            // 将字符串转换成数字的方法: +str
            // +'12'      = 12
            // +'12.'     = 12
            // +'12..'    = NaN
            // +'.12'     = 0.12
            // +'..12'    = NaN
            // +'今天天气不错' = NaN
            // +'12号闸有问题' = NaN
            // 特殊情况需注意
            // +''        = 0
            // +null      = 0
            // +undefined = 0
            
            // 如果精度不为空，且为数字
            if( accuracy !== '' && !isNaN(accuracy) ) {
                specialCond = ['', null, undefined];
                options = options.map(function (row, i) {
                    // 排除特殊情况 ('', null, undefined)
                    // 和字符串文本的情况 ('今天天气不错'、'12号闸有问题'等)
                    if( specialCond.indexOf(row.data) > -1 || isNaN(row.data) ) {
                        // 特殊情况不做处理
                        return row;
                    } else {
                        // 如果不是，做进制转换
                        // 首先转换成数字，若本身就是数字，则不受影响
                        num = +row.data;
                        // 这边将数据统一返回成字符串格式，可能有风险
                        row.data = num.toFixed(accuracy);
                        return row;
                    }
                });
            }

            try {
                this.executeUpdate(options);
            } catch(e) {
                console.warn(e);                
            }
        },

        configure: function () {
            this.spinner && this.spinner.stop();
            var _this = this;

            if (this.chart) this.chart.clear();
            this.divResizeByMouseInit();

            var divMask = document.createElement('div');
            divMask.className = 'springConfigMask';
            divMask.draggable = 'true';
            if (this.entity.modal.type !='ModalAnalysis' || !this.screen.isForReport) {
                var btnConfig = document.createElement('span');
                btnConfig.className = 'glyphicon glyphicon-cog springConfigBtn grow';
                btnConfig.title = 'Options';
                btnConfig.onclick = btnConfig_clickEvent;
                divMask.appendChild(btnConfig);
            }
            var btnRemove = document.createElement('span');
            btnRemove.className = 'glyphicon glyphicon-remove-circle springConfigRemoveBtn grow';
            btnRemove.title = 'Remove';
            btnRemove.onclick = function (e,callback) {
                //TODO 测试confirm
                confirm('Are you sure you want to delete it ?', function () {
                    if (_this.chart) _this.chart.clear();
                    var oldIndex = _this.screen.arrEntityOrder.indexOf(_this.entity.id);
                    if (_this.screen.screen) {//兼容ModalMix
                        _this.screen.screen.removeEntity(_this.entity.id);
                    } else {
                        _this.screen.removeEntity(_this.entity.id);
                    }

                    //$('#divContainer_' + _this.entity.id).remove();
                    _this.screen.isScreenChange = true;
                    callback&&callback(true);

                    //重新生成窗口
                    var entity = new ModalNone(_this.screen, {
                        id: _this.entity.id,
                        spanC: _this.entity.spanC,
                        spanR: _this.entity.spanR,
                        modal: {type:"ModalNone"}
                    }, _this.entity.id);
                    _this.screen.arrEntityOrder.splice(oldIndex,0,entity.entity.id);
                    _this.screen.listEntity[entity.entity.id] = entity;
                    entity.render();
                    entity.configure();
                    entity.hasEdit = true;
                    _this = null;
                })
            };
            divMask.appendChild(btnRemove);

            var btnHeightResize = document.createElement('div');
            if(AppConfig.isMobile || this.screen.isForMobile || (this.screen.options && this.screen.options.isForMobile)){
                this.entity.spanC = this.optionTemplate.maxWidth = this.optionTemplate.minWidth = 3;//宽度固定
                this.optionTemplate.maxHeight = 4.5;//最大高度修改
                (this.entity.spanR > this.optionTemplate.maxHeight) && (this.entity.spanR = this.optionTemplate.maxHeight);
            }
            var maxHeight = this.spanRange.maxHeight;
            var maxWidth = this.spanRange.maxWidth;
            var minHeight = this.spanRange.minHeight;
            var minWidth = this.spanRange.minWidth;
            btnHeightResize.className = 'divResize divHeightResize';
            btnHeightResize.innerHTML = '<label for="heightResize" >H: </label>' +
            '<input type="range" class="inputResize" id="heightResize" name="points" step="0.5" min="' + minHeight + '" max="' + maxHeight + '" value="' + _this.entity.spanR + '"/>' +
            '<h5 class="rangeVal">' + _this.entity.spanR + ' /' + _this.spanRange.maxHeight + '</h5>' +
            '<input type="text" class="rangeChange" value="' + _this.entity.spanR + '"/>';
            divMask.appendChild(btnHeightResize);
            var btnWidthResize = document.createElement('div');
            btnWidthResize.className = 'divResize divWidthResize';
            btnWidthResize.innerHTML = '<label for="widthResize" >W: </label>' +
            '<input type="range" class="inputResize" id="widthResize" name="points" step="0.5" min="' + minWidth + '" max="' + maxWidth + '" value="' + _this.entity.spanC + '"/>' +
            '<h5 class="rangeVal">' + _this.entity.spanC + ' /' + _this.spanRange.maxWidth + '</h5>' +
            '<input type="text" class="rangeChange" value="' + _this.entity.spanC + '"/>';
            divMask.appendChild(btnWidthResize);
            var divTitleAndType = document.createElement('div');
            divTitleAndType.className = 'divTitleAndType';
            divMask.appendChild(divTitleAndType);


            var $divTitle = $('<div class="divResize chartTitle">');
            var $labelTitle = $('<label for="title">').text(I18n.resource.dashboard.show.TITLE);
            var inputChartTitle = document.createElement('input');
            inputChartTitle.id = 'title';
            inputChartTitle.className = 'form-control';
            inputChartTitle.value = this.entity.modal.title;
            inputChartTitle.setAttribute('placeholder',I18n.resource.dashboard.show.TITLE_TIP);
            if(this.entity.modal.title != ''){
                inputChartTitle.style.display = 'none';
            }
            inputChartTitle.setAttribute('type','text');
            $divTitle.append($labelTitle).append($(inputChartTitle));
            divTitleAndType.appendChild($divTitle[0]);

            var $divType = $('<div class="divResize chartType">');
            var $labelType = $('<label>').text(I18n.resource.dashboard.show.TYPE);
            var chartType = document.createElement('span');
            chartType.innerHTML = I18n.findContent(this.optionTemplate.name);
            $divType.append($labelType).append($(chartType));
            divTitleAndType.appendChild($divType[0]);

            //ModalAnalysis类型(来自数据分析)不需要link wiki pop功能
            if(!(this instanceof ModalAnalysis)){
                //link
                var $divLink = $('<div class="divResize chartLink">');
                var $labelLink = $('<label>').text(I18n.resource.dashboard.show.LINK_TO);
                var chartLink = document.createElement('select');
                chartLink.className = 'form-control';
                chartLink.options.add(new Option(I18n.resource.dashboard.show.SELECT_LINK,''));
                for(var i in AppConfig.menu){
                    var option = new Option(AppConfig.menu[i],i);
                    if(this.entity.modal.link == i){
                        option.selected = 'selected';
                    }
                    chartLink.options.add(option);
                }
                chartLink.onchange = function(){
                    _this.entity.modal.link = chartLink.value;
                    _this.screen.isScreenChange = true;
                };
                $divLink.append($labelLink).append($(chartLink));
                divMask.appendChild($divLink[0]);
            }

            var chartTitleShow = document.createElement('p');
            chartTitleShow.innerHTML = inputChartTitle.value;
            chartTitleShow.className = 'chartTitleShow';
            $divTitle[0].appendChild(chartTitleShow);
            if(this.entity.modal.title == '' || this.entity.modal.title == undefined){
                chartTitleShow.style.display = 'none';
            }
            chartTitleShow.onclick = function(){
                chartTitleShow.style.display = 'none';
                inputChartTitle.style.display = 'inline-block';
                inputChartTitle.focus();
            };
            inputChartTitle.onchange = function(){
                if (inputChartTitle.value != ''){
                    inputChartTitle.style.display = 'none';
                    chartTitleShow.style.display = 'inline';
                }
                chartTitleShow.innerHTML = inputChartTitle.value;
                _this.entity.modal.title = inputChartTitle.value;
                _this.screen.isScreenChange = true;
            };

            //如果entity的isRender为false,添加到chartsCt中
            this.container.parentNode.appendChild(divMask);
            this.divResizeByToolInit();
            if (this.entity.isNotRender) {//兼容ModalMix
                var parentId = undefined, subChartIds;
                if(this.screen.entity && this.screen.entity.id){//observer
                    parentId = this.screen.entity.id;
                }
                if(this.screen.store && this.screen.store.layout[0]){//factory
                    for(var i = 0, len = this.screen.store.layout[0].length, entity; i < len; i++){
                        entity = this.screen.store.layout[0][i];
                        if(entity.modal.type == 'ModalMix' && entity.modal.option.subChartIds &&  entity.modal.option.subChartIds.length > 0){
                            subChartIds = entity.modal.option.subChartIds;
                            for(var j = 0, l = subChartIds.length; j < l; j++){
                                if(subChartIds[j].id == this.entity.id){
                                    parentId = entity.id;
                                    break;
                                }
                            }
                        }
                        if(entity.modal.type == 'ModalAppBlind'){
                            if(!entity.modal.option) break;
                            if(entity.modal.option.arrItem.length>0 && entity.modal.option.arrItem[0].subChartIds.length>0) {
                                var opts = entity.modal.option.arrItem;
                                for (var m = 0; m < opts.length; m++) {
                                    if (opts[m].subChartIds[0].id === this.entity.id) {
                                        parentId = entity.id;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                if(parentId){
                    var $chartsCt = $(document.getElementById('divContainer_' + parentId)).find('.chartsCt');
                    if(this.container.parentNode.parentNode.parentNode.className.indexOf('chartsCt')>=0) return;
                    if($chartsCt && $chartsCt.length > 0){
                        $chartsCt[0].appendChild(this.container.parentNode.parentNode);
                    }
                }
            }

            function btnConfig_clickEvent(e) {
                $('.springSel').removeClass('springSel');
                $(e.target).closest('.springContainer').addClass('springSel');
                _this.modalInit();
            }

            //drag event of replacing entity
            var divContainer = $(this.container).closest('.springContainer')[0];
            divMask.ondragstart = function (e) {
                //e.preventDefault();
                e.dataTransfer.setData("id", $(e.target).closest('.springContainer').get(0).id.replace('divContainer_', ''));
            };
            divMask.ondragover = function (e) {
                e.preventDefault();
            };
            divMask.ondragleave = function (e) {
                e.preventDefault();
            };
            divContainer.ondrop = function (e) {
                e.stopPropagation();
                var sourceId = e.dataTransfer.getData("id");
                var $sourceParent, $targetParent;
                if (sourceId) {
                    var targetId = $(e.target).closest('.springContainer').get(0).id.replace('divContainer_', '');
                    $sourceParent = $('#divContainer_' + sourceId).parent();
                    $targetParent = $('#divContainer_' + targetId).parent();
                    //外部chart拖入组合图
                    if(!$sourceParent[0].classList.contains('chartsCt') && $targetParent[0].classList.contains('chartsCt')){
                        _this.screen.insertChartIntoMix(sourceId, $(e.target).closest('.chartsCt')[0])
                    }else{//平级之间交换
                        if(_this.screen.screen){//组合图内部交换
                            _this.screen.screen.replaceEntity(sourceId, targetId, _this.screen.entity.id);
                        }else{
                            _this.screen.replaceEntity(sourceId, targetId);
                        }
                    }
                }
                _this.screen.isScreenChange = true;
            }
            //五个控件
            var type = this.entity.modal.type;
            if(type === 'ModalColdHotAreaSummary' || type === 'ModalEquipmentPerfectRate' || type === 'ModalWorkOrderStatistics' || type === 'ModalPriorityHandlingFaultList' || type === 'ModalEnergyTrendAnalysis'){
                Spinner.stop();
                return;
            }
            this.executeConfigMode();
        },

        //interface
        modalInit: function() {
            var _this = this;
            var dataItem = [], option;
            var dataTypeUnit;
            var type = false;

            if (_this.entity.modal.points != undefined){
                if (_this.entity.modal.option && _this.entity.modal.option.paraType){
                    for (var i = 0; i < _this.entity.modal.option.paraType.length; i++) {
                        dataTypeUnit = {dsId: [], dsType: '', dsName: []};
                        dataTypeUnit.type = _this.entity.modal.option.paraType[i].type;

                        var arrId = [];
                        var arrItem = [];
                        for (var j = 0; j < _this.entity.modal.option.paraType[i].arrId.length;j++) {
                            arrId.push(_this.entity.modal.option.paraType[i].arrId[j]);
                        }
                        arrItem = AppConfig.datasource.getDSItemById(arrId);
                        for (var j = 0; j < _this.entity.modal.option.paraType[i].arrId.length;j++) {
                            var id = _this.entity.modal.option.paraType[i].arrId[j];
                            for (var m = 0; m < arrItem.length; m++) {
                                if (id == arrItem[m].id) {
                                    dataTypeUnit.dsId.push(id);
                                    dataTypeUnit.dsName.push(arrItem[m].alias);
                                    break;
                                }
                            }
                        }
                        dataItem.push(dataTypeUnit);
                    }
                }else {
                    dataTypeUnit = {dsId: [], dsType: '', dsName: []};
                    var arrId = [];
                    var arrItem = [];
                    for (var i = 0; i < _this.entity.modal.points.length; i++) {
                        arrId.push(_this.entity.modal.points[i]);
                    }
                    arrItem = AppConfig.datasource.getDSItemById(arrId);
                    for (var i = 0; i < _this.entity.modal.points.length; i++) {
                        var id = _this.entity.modal.points[i];
                        for (var m = 0; m < arrItem.length; m++) {
                            if (id == arrItem[m].id) {
                                dataTypeUnit.dsId.push(id);
                                dataTypeUnit.dsName.push(arrItem[m].alias===""?arrItem[m].value:arrItem[m].alias);
                                break;
                            }
                        }
                    }
                    dataItem.push(dataTypeUnit);
                }
            }
            // deal with 'custom' mode
            if(_this.optionTemplate.mode === 'custom') {
                _this.showConfigModal && _this.showConfigModal();
                return;
            }
            // deal with 不需要弹出的配置框的控件
            if(_this.optionTemplate.mode === 'noConfigModal') {
                return;
            }
            //deal with 图元 报表章节
            if(['ModalReportChapter', 'ModalReportFactory', 'ModalMix'].indexOf(_this.optionTemplate.type) > -1) {
                _this.showConfigModal();
                return;
            }
            // Monitor页面
            if(_this.optionTemplate.type === 'ModalMonitor') {
                _this.showConfigModal();
                return;
            }
            //APP button页面
            if (_this.optionTemplate.type === 'ModalAppButton') {
                _this.showConfigModal();
                return;
            }
            //APP KPI监视页面
            if (_this.optionTemplate.type === 'ModalAppKPICollect') {
                _this.showConfigModal();
                return;
            }
            //Factory的报表章节
            if(_this.optionTemplate.type === 'ModalReportFactory') {
                _this.showConfigModal();
                return;
            }
            //诊断面板 
            if(_this.optionTemplate.type === 'ModalDiagnosisPanelHtml') {
                //暂时不需要配置
                return;
            }
            var tempOptionPara;
            _this.entity.modal.option ? tempOptionPara = _this.entity.modal.option:tempOptionPara = {};
            tempOptionPara.dataItem = dataItem;
            //if(_this.entity.modal.option && _this.entity.modal.option.dsChartCog){
            //    tempDsChartCog = _this.entity.modal.option.dsChartCog;
            //}else{
            //    tempDsChartCog = null;
            //}
            option = {
                modeUsable: _this.optionTemplate.mode,
                allDataNeed: _this.optionTemplate.modelParams?_this.optionTemplate.modelParams.paraAnlysMode:true,
                rowDataType: _this.optionTemplate.modelParams?_this.optionTemplate.modelParams.paraName:[I18n.resource.analysis.paneConfig.DATA_TYPE_DEFAULT],
                rowDataTypeShowName: _this.optionTemplate.modelParams?_this.optionTemplate.modelParams.paraShowName:undefined,
                dataTypeMaxNum:[_this.optionTemplate.maxNum],
                templateType: _this.optionTemplate.type,
                dsChartCog: _this.entity.modal.dsChartCog?_this.entity.modal.dsChartCog:null,
                optionPara: tempOptionPara
            };

            if(dataItem.length == 0){
                type = true;
            }
            if(_this.screen.screen){
                _this.screen.screen.modalConfigPane.showModalInit(type, option, _this);
            } else {
                if (!_this.screen.modalConfigPane) {
                    _this.screen.initModalConfigPane();
                }
                _this.screen.modalConfigPane.showModalInit(type, option, _this);
            }
            _this.screen.isScreenChange = true;
        },

        showConfigModal:function(){
            this.toggleDataSource(true);
            this.initConfigModalOpt();
            this.configModalOpt.event = this.configModalOpt.event || {};
            var _this = this;
            this.configModalOpt.event.afterHide = function(){
                _this.hideConfigModal();
            };
            //if(!this.configModal) {
                var ctn ;
                try{
                    var ctn = this.screen.container.querySelector('.cfgModal');
                }catch(e){
                    var ctn = this.screen.shape.parentNode.parentNode.querySelector('.cfgModal')
                }
                if(!ctn){
                    if(this.screen.shape && this.screen.shape.parentNode.parentNode){
                        ctn = this.screen.shape.parentNode.parentNode;
                    }else if(this.screen.screen){
                        ctn = this.screen.screen.container;
                    }else{
                        ctn = this.screen.container;
                    }
                }
                this.configModal = new ConfigModal(this.configModalOpt, ctn, this);
                this.configModal.init();
            //}
            this.configModal.show();
        },
        hideConfigModal:function(){
            this.toggleDataSource(false);
        },
        initConfigModalOpt:function(){
            var _this = this;
            this.configModalOpt.result.func = function(option){
                _this.setModalOption(option);
                _this.render();
            }
        },
        setModalOption: function (option) {

        },
        divResizeByToolInit: function(){ 
            var _this = this;
            var $divContainer = $('#divContainer_' +  _this.entity.id);
            $divContainer.find('#heightResize').mousedown(function(e){
                $('.springConfigMask').attr('draggable','false');
                $('.springContent').attr('draggable','false');
                $(e.target).mousemove(function(e){
                    $(e.target).closest('.springContainer').css('height',$(e.target).val() * _this.UNIT_HEIGHT * _this.spanRange.yScale + '%');
                    _this.entity.spanR = Number($(e.target).val());
                    $(e.target).next().text($(e.target).val() + ' /' + _this.spanRange.maxHeight);
                    if(_this.screen.screen){//兼容ModalMix
                        _this.screen.screen.setEntity(_this.entity);
                    }else{
                        _this.screen.setEntity(_this.entity);
                    }
                });
            }).mouseup(function(e){
                $('.springConfigMask').attr('draggable','true');
                $('.springContent').attr('draggable','true');
                $(e.target).off('mousemove');
                if(_this.chart) _this.chart.resize();
                _this.screen.isScreenChange = true;
                _this.hasEdit = true;
            });
            $divContainer.find('#widthResize').mousedown(function(e){
                $('.springConfigMask').attr('draggable','false');
                $('.springContent').attr('draggable','false');
                $(e.target).mousemove(function(e){
                    $(e.target).closest('.springContainer').css('width',$(e.target).val() * _this.UNIT_WIDTH * _this.spanRange.xScale+ '%');
                    _this.entity.spanC = Number($(e.target).val());
                    $(e.target).next().text($(e.target).val() + ' /' + _this.spanRange.maxWidth);
                    if(_this.screen.screen) {//兼容ModalMix
                        _this.screen.screen.setEntity(_this.entity);
                    }else{
                        _this.screen.setEntity(_this.entity);
                    }
                });
            }).mouseup(function(e){
                $('.springConfigMask').attr('draggable','true');
                $('.springContent').attr('draggable','true');
                $(e.target).off('mousemove');
                if(_this.chart) _this.chart.resize();
                _this.screen.isScreenChange = true;
                _this.hasEdit = true;
            });
            $divContainer.find('.rangeVal').click(function(e){
                e.stopPropagation();
                var valueCurrent = Number($(e.target).prev().val());
                var valuePre = $(e.target).prev().val();
                var valueMax = Number($(e.target).prevAll('.inputResize').attr('max'));
                var valueMin = Number($(e.target).prevAll('.inputResize').attr('min'));
                $(e.target).nextAll('.rangeChange').css('display','inline-block').focus().off('blur').blur(function(e){
                    valueCurrent = Number($(e.target).val());
                    if(valueCurrent <= valueMax && valueCurrent >= valueMin) {
                        $(e.target).prevAll('.inputResize').val(valueCurrent.toString());
                        if ($(e.target).prevAll('.inputResize').attr('id') == 'widthResize') {
                            $(e.target).closest('.springContainer').css('width',$(e.target).val() * _this.UNIT_WIDTH * _this.spanRange.xScale + '%');
                            _this.entity.spanC = Number($(e.target).val());
                            _this.screen.setEntity(_this.entity);
                            $(e.target).prev().text($(e.target).val() + ' /' + _this.spanRange.maxWidth);
                            if(_this.chart) _this.chart.resize();
                            _this.hasEdit = true;
                        } else{
                            $(e.target).closest('.springContainer').css('height',$(e.target).val() * _this.UNIT_HEIGHT * _this.spanRange.yScale + '%');
                            _this.entity.spanR = Number($(e.target).val());
                            _this.screen.setEntity(_this.entity);
                            $(e.target).prev().text($(e.target).val() + ' /' + _this.spanRange.maxHeight);
                            if(_this.chart) _this.chart.resize();
                            _this.hasEdit = true;
                        }
                        $(e.target).css('display', 'none');
                    }else if(valueCurrent > valueMax){
                        new Alert($('#resizeAlert'), "danger", "<strong>" + I18n.resource.dashboard.resize.ERR1 + "</strong>").show().close();
                        $(e.target).val(valuePre).css('display', 'none');
                    }else if(valueCurrent < valueMin){
                        new Alert($('#resizeAlert'), "danger", "<strong>" + I18n.resource.dashboard.resize.ERR2 + "</strong>").show().close();
                        $(e.target).val(valuePre).css('display', 'none');
                    }else{
                        if($(e.target).val() != ""){
                                new Alert($('#resizeAlert'), "danger", "<strong>" + I18n.resource.dashboard.resize.ERR3 + "</strong>").show().close();
                            }
                        $(e.target).val(valuePre).css('display', 'none');
                    }
                    _this.hasEdit && (_this.screen.isScreenChange = true);
                })
            });
        },
        divResizeByMouseInit: function() {
            var _this = this;
            var $widthResize;
            var $heightResize;
            var divContainer = $('#divContainer_' +  _this.entity.id).get(0);
            var resizeOnRight = document.createElement('div');
            resizeOnRight.className = 'resizeOnRight';
            divContainer.appendChild(resizeOnRight);
            var resizeOnBottom = document.createElement('div');
            resizeOnBottom.className = 'resizeOnBottom';
            divContainer.appendChild(resizeOnBottom);
            var resizeOnCorner = document.createElement('div');
            resizeOnCorner.className = 'resizeOnCorner';
            divContainer.appendChild(resizeOnCorner);
            var mouseStart = {};
            var divStart = {};
            var rightStart = {};
            var bottomStart = {};
            var w, h,tempSpanR,tempSpanC;
            resizeOnRight.onmousedown =  function(e){
                e.stopPropagation();
                if (e.button != 0 )return;
                var $possibleParent = $(e.target).closest('.springConfigMask');
                if ($possibleParent.length > 0){
                    $possibleParent.attr('draggable',false)
                }
                $(e.target).prev().children(':last-child').attr('draggable',false);
                $widthResize = $(e.target).parent().find('#widthResize');
                var oEvent = e || event;
                mouseStart.x = oEvent.clientX;
                mouseStart.y = oEvent.clientY;
                rightStart.x = resizeOnRight.offsetLeft;
                doResizeOnRight(e);
                if(resizeOnRight.setCapture){
                    resizeOnRight.onmousemove = doResizeOnRight;
                    resizeOnRight.onmouseup = stopResizeOnRight;
                    resizeOnRight.setCapture();
                }else{
                    document.addEventListener("mousemove",doResizeOnRight,false);
                    document.addEventListener("mouseup",stopResizeOnRight,false);
                }
            };
            function doResizeOnRight(e){
                var oEvent = e || event;
                var l = oEvent.clientX - mouseStart.x + rightStart.x;
                w = l + resizeOnCorner.offsetWidth;
                if(w < resizeOnCorner.offsetWidth){
                    w = resizeOnCorner.offsetWidth;
                }
                else if( w > document.documentElement.clientWidth - divContainer.offsetLeft){
                    w = document.documentElement.clientWidth - divContainer.offsetLeft - 2;
                }
                //w = parseInt(w * 100 / (divContainer.parentNode.clientWidth * _this.UNIT_WIDTH)) * _this.UNIT_WIDTH;
                divContainer.style.width = w + "px";
            }
            function stopResizeOnRight(e){
                if (resizeOnRight.releaseCapture) {
                    tempSpanC = parseInt(w * 100 / (divContainer.parentNode.clientWidth * _this.UNIT_WIDTH));
                    rangeJudge();
                    $widthResize.val(tempSpanC.toString());
                    $widthResize.next().text(tempSpanC.toString() + ' /' + _this.spanRange.maxWidth);
                    $widthResize.next().next().val(tempSpanC.toString());
                    divContainer.style.width = tempSpanC * _this.UNIT_WIDTH * _this.spanRange.xScale + "%";
                    _this.entity.spanC = tempSpanC;
                    resizeOnRight.onmousemove = null;
                    resizeOnRight.onmouseup = null;
                    resizeOnRight.releaseCapture();
                    if (_this.chart) _this.chart.resize();
                    _this.hasEdit = true;
                } else {
                    tempSpanC = parseInt(w * 100 / (divContainer.parentNode.clientWidth * _this.UNIT_WIDTH));
                    rangeJudge();
                    $widthResize.val(tempSpanC.toString());
                    $widthResize.next().text(tempSpanC.toString() + ' /' + _this.spanRange.maxWidth);
                    $widthResize.next().next().val(tempSpanC.toString());
                    divContainer.style.width = tempSpanC * _this.UNIT_WIDTH * _this.spanRange.xScale+ "%";
                    _this.entity.spanC = tempSpanC;
                    document.removeEventListener("mousemove", doResizeOnRight, false);
                    document.removeEventListener("mouseup", stopResizeOnRight, false);
                    if (_this.chart) _this.chart.resize();
                    _this.hasEdit = true;
                }
                _this.screen.isScreenChange = true;
                $(e.target).prev().children(':last-child').attr('draggable',true);
                var $possibleParent = $(e.target).closest('.springConfigMask');
                if ($possibleParent.length > 0){
                    $possibleParent.attr('draggable',true)
                }
            }
            resizeOnBottom.onmousedown = function(e){
                e.stopPropagation();
                if (e.button != 0 )return;
                var $possibleParent = $(e.target).closest('.springConfigMask');
                if ($possibleParent.length > 0){
                    $possibleParent.attr('draggable',false)
                }
                $(e.target).prev().children(':last-child').attr('draggable',false);
                $heightResize = $(e.target).parent().find('#heightResize');
                var oEvent = e || event;
                mouseStart.x = oEvent.clientX;
                mouseStart.y = oEvent.clientY;
                bottomStart.y = resizeOnBottom.offsetTop;
                doResizeOnBottom(e);
                if(resizeOnBottom.setCapture){
                    resizeOnBottom.onmousemove = doResizeOnBottom;
                    resizeOnBottom.onmouseup = stopResizeOnBottom;
                    resizeOnBottom.setCapture();
                }else{
                    document.addEventListener("mousemove",doResizeOnBottom,false);
                    document.addEventListener("mouseup",stopResizeOnBottom,false);
                }
            };
            function doResizeOnBottom(e){
                var oEvent = e || event;
                var t = oEvent.clientY - mouseStart.y + bottomStart.y;
                h = t + resizeOnCorner.offsetHeight;
                if(h < resizeOnCorner.offsetHeight){
                    h = resizeOnCorner.offsetHeight;
                }else if(h > document.documentElement.clientHeight - divContainer.offsetTop){
                    h = document.documentElement.clientHeight - divContainer.offsetTop - 2;
                }
                //h = parseInt(h * 100 / (divContainer.parentNode.clientHeight * _this.UNIT_HEIGHT)) * _this.UNIT_HEIGHT;
                divContainer.style.height = h + "px";
            }
            function stopResizeOnBottom(e){
                if (resizeOnBottom.releaseCapture) {
                    tempSpanR = parseInt(h * 100 / (divContainer.parentNode.clientHeight * _this.UNIT_HEIGHT));
                    rangeJudge();
                    $heightResize.val(tempSpanR.toString());
                    $heightResize.next().text(tempSpanR.toString() + ' /' +_this.spanRange.maxHeight);
                    $heightResize.next().next().val(tempSpanR.toString());
                    divContainer.style.height = tempSpanR * _this.UNIT_HEIGHT* _this.spanRange.yScale + "%";
                    _this.entity.spanR = tempSpanR;
                    resizeOnBottom.onmousemove = null;
                    resizeOnBottom.onmouseup = null;
                    resizeOnBottom.releaseCapture();
                    if (_this.chart) _this.chart.resize();
                    _this.hasEdit = true;
                } else {
                    tempSpanR = parseInt(h * 100 / (divContainer.parentNode.clientHeight * _this.UNIT_HEIGHT));
                    rangeJudge();
                    $heightResize.val(tempSpanR.toString());
                    $heightResize.next().text(tempSpanR.toString() + ' /' + _this.spanRange.maxHeight);
                    $heightResize.next().next().val(tempSpanR.toString());
                    divContainer.style.height = tempSpanR * _this.UNIT_HEIGHT * _this.spanRange.yScale+ "%";
                    _this.entity.spanR = tempSpanR;
                    document.removeEventListener("mousemove", doResizeOnBottom, false);
                    document.removeEventListener("mouseup", stopResizeOnBottom, false);
                    if (_this.chart) _this.chart.resize();
                    _this.hasEdit = true;
                }
                _this.screen.isScreenChange = true;
                $(e.target).prev().children(':last-child').attr('draggable',true);
                var $possibleParent = $(e.target).closest('.springConfigMask');
                if ($possibleParent.length > 0){
                    $possibleParent.attr('draggable',true)
                }
            }
            resizeOnCorner.onmousedown = function(e){
                e.stopPropagation();
                if (e.button != 0 )return;
                var $possibleParent = $(e.target).closest('.springConfigMask');
                if ($possibleParent.length > 0){
                    $possibleParent.attr('draggable',false)
                }
                $(e.target).prev().children(':last-child').attr('draggable',false);
                $widthResize = $(e.target).parent().find('#widthResize');
                $heightResize = $(e.target).parent().find('#heightResize');
                var oEvent = e||event;
                mouseStart.x = oEvent.clientX;
                mouseStart.y = oEvent.clientY;
                divStart.x = resizeOnCorner.offsetLeft;
                divStart.y = resizeOnCorner.offsetTop;
                doResizeOnCorner(e);
                if(resizeOnCorner.setCapture){
                    resizeOnCorner.onmousemove = doResizeOnCorner;
                    resizeOnCorner.onmouseup = stopResizeOnCorner;
                    resizeOnCorner.setCapture();
                }else{
                    document.addEventListener("mousemove",doResizeOnCorner,false);
                    document.addEventListener("mouseup",stopResizeOnCorner,false);
                }
                //zhezhao.style.display='block';
            };
            function doResizeOnCorner(e){
                var oEvent = e||event;
                var l = oEvent.clientX - mouseStart.x + divStart.x;
                var t = oEvent.clientY - mouseStart.y + divStart.y;
                w = l + resizeOnCorner.offsetWidth;
                h = t + resizeOnCorner.offsetHeight;
                if(w < resizeOnCorner.offsetWidth){
                    w = resizeOnCorner.offsetWidth;
                }
                else if(w > document.documentElement.clientWidth - divContainer.offsetLeft){
                    w=document.documentElement.clientWidth - divContainer.offsetLeft - 2;
                }
                if(h < resizeOnCorner.offsetHeight){
                    h = resizeOnCorner.offsetHeight;
                }else if(h > document.documentElement.clientHeight - divContainer.offsetTop){
                    h = document.documentElement.clientHeight - divContainer.offsetTop - 2;
                }
                //w = parseInt(w * 100 / (divContainer.parentNode.clientWidth * _this.UNIT_WIDTH)) * _this.UNIT_WIDTH;
                divContainer.style.width = w + "px";
                //h = parseInt(h * 100 / (divContainer.parentNode.clientHeight * _this.UNIT_HEIGHT)) * _this.UNIT_HEIGHT;
                divContainer.style.height = h + "px";
            }
             function stopResizeOnCorner(e){
                 if (resizeOnCorner.releaseCapture) {
                     tempSpanC = parseInt(w * 100 / (divContainer.parentNode.clientWidth * _this.UNIT_WIDTH));
                     tempSpanR = parseInt(h * 100 / (divContainer.parentNode.clientHeight * _this.UNIT_HEIGHT));
                     rangeJudge();
                     $widthResize.val(tempSpanC.toString()).get(0).setAttribute('value', tempSpanC.toString());
                     $widthResize.next().text(tempSpanC.toString() + ' /' + _this.spanRange.maxWidth);
                     $widthResize.next().next().val(tempSpanC.toString());
                     $heightResize.val(tempSpanR.toString()).get(0).setAttribute('value', tempSpanR.toString());
                     $heightResize.next().text(tempSpanR.toString() + ' /' + _this.spanRange.maxHeight);
                     $heightResize.next().next().val(tempSpanR.toString());
                     divContainer.style.width = tempSpanC * _this.UNIT_WIDTH * _this.spanRange.xScale+ "%";
                     divContainer.style.height = tempSpanR * _this.UNIT_HEIGHT * _this.spanRange.yScale+ "%";
                     _this.entity.spanC = tempSpanC;
                     _this.entity.spanR = tempSpanR;
                     resizeOnCorner.onmousemove = null;
                     resizeOnCorner.onmouseup = null;
                     resizeOnCorner.releaseCapture();
                     if (_this.chart) _this.chart.resize();
                     _this.hasEdit = true;
                 } else {
                     tempSpanC = parseInt(w * 100 / (divContainer.parentNode.clientWidth * _this.UNIT_WIDTH));
                     tempSpanR = parseInt(h * 100 / (divContainer.parentNode.clientHeight * _this.UNIT_HEIGHT));
                     rangeJudge();
                     $widthResize.val(tempSpanC.toString());
                     $widthResize.next().text(tempSpanC.toString() + ' /' + _this.spanRange.maxWidth);
                     $widthResize.next().next().val(tempSpanC.toString());
                     $heightResize.val(tempSpanR.toString());
                     $heightResize.next().text(tempSpanR.toString() + ' /' + _this.spanRange.maxHeight);
                     $heightResize.next().next().val(tempSpanR.toString());
                     divContainer.style.width = tempSpanC * _this.UNIT_WIDTH * _this.spanRange.xScale+ "%";
                     divContainer.style.height = tempSpanR * _this.UNIT_HEIGHT * _this.spanRange.yScale+ "%";
                     _this.entity.spanC = tempSpanC;
                     _this.entity.spanR = tempSpanR;
                     document.removeEventListener("mousemove", doResizeOnCorner, false);
                     document.removeEventListener("mouseup", stopResizeOnCorner, false);
                     if (_this.chart) _this.chart.resize();
                     _this.hasEdit = true;
                 }
                 _this.screen.isScreenChange = true;
                 var $possibleParent = $(e.target).closest('.springConfigMask');
                 if ($possibleParent.length > 0){
                     $possibleParent.attr('draggable',true)
                 }
                 $(e.target).prev().children(':last-child').attr('draggable',true);
             //zhezhao.style.display='none';
             }
            function rangeJudge(){
                if (tempSpanC > _this.spanRange.maxWidth){
                    tempSpanC = _this.spanRange.maxWidth
                }else if(tempSpanC < _this.spanRange.minWidth){
                    tempSpanC = _this.spanRange.minWidth
                }
                if (tempSpanR > _this.spanRange.maxHeight){
                    tempSpanR = _this.spanRange.maxHeight
                }else if(tempSpanR < _this.spanRange.minHeight){
                    tempSpanR = _this.spanRange.minHeight
                }
            }
        },

        // 附加 "历史数据" 按钮事件
        attachLkHistoryEvents: function (domItem) {
            var _this = this;
            
            domItem.onclick = function (e) {
                _this.modalDBHistory.setModal(_this.entity.modal, _this.chart);
                _this.modalDBHistory.show();
                e.preventDefault();
                e.stopPropagation();
            };
        },

        modalDBHistory: new ModalDBHistory(),

        initPointAlias :function(arrPoints){
            var arrPointsAlias = [];
            var lastRepeatIndex = -1 ;
            var tempAlias;
            var repeatNum = 0;
            var tempIndex;

            var arrId = [];
            var arrItem = [];
            for (var i = 0; i< arrPoints.length; ++i){
                arrId.push(arrPoints[i].dsItemId);
            }
            arrItem = AppConfig.datasource.getDSItemById(arrId);
            for (var i = 0; i< arrPoints.length; ++i){
                for (var m = 0; m < arrItem.length; m++) {
                    if (arrPoints[i].dsItemId == arrItem[m].id) {
                        arrPointsAlias.push(arrItem[m].alias);
                        break;
                    }
                }
                //arrPointsAlias.push(AppConfig.datasource.getDSItemById(arrPoints[i].dsItemId).alias);
            }
            for (var i =0 ;i < arrPoints.length; ++i){
                lastRepeatIndex = arrPointsAlias.lastIndexOf(arrPointsAlias[i]);
                if (lastRepeatIndex > i){
                    repeatNum = 1;
                    tempAlias = arrPointsAlias[i];
                    arrPointsAlias[i] = tempAlias + '_No1';
                    tempIndex = i;
                    for (var j = tempIndex + 1; j < lastRepeatIndex + 1 ;j++){
                        repeatNum +=1;
                        tempIndex = arrPointsAlias.indexOf(tempAlias);
                        if(tempIndex == -1)break;
                        arrPointsAlias[tempIndex] = tempAlias + '_No' + repeatNum;
                    }
                }
            }
            return arrPointsAlias;
        },

        // close
        close: function () {
            if (this.chart) {
                //this.chart.clear();
                this.chart.dispose();
            }
            this.container = null;
            this.entity = null;
            this.executeConfigMode = null;
            this.executeRender = null;
            this.executeUpdate = null;
            // this.modalWikiCtr = null;
            this.screen = null;
            this.isConfigMode = null;
            this.reportScreen = null;
            typeof this._close === 'function' && this._close();
        },

        //pop
        renderPop: function(pop){
            if(!pop) return;
            var $target = $('#divContainer_' + this.entity.id).find('.panel');
            var $panePop = $target.find('.panePop');
            var tpl = '<div class="divMove"><span>{popMsg}</span></div>\
                <span class="glyphicon glyphicon-remove-circle btnClosePop" title="Close"></span>';
            if(!$panePop[0]){
                $panePop = $('<div class="panel-body panePop"></div>');
                $target.append($panePop);
            }
            $panePop.html(tpl.formatEL({
                popMsg: pop.data
            }));//pop.data
            var spanWidth = $panePop.find('span').width();
            var $divMove = $panePop.find('.divMove');
            if(spanWidth > $divMove.width()){
                var $marquee = $('<marquee direction="left" onmouseover="this.stop()" onmouseout="this.start()" scrollAmount="3" style="height: 40px; width: calc(100% - 28px);"></marquee>');
                $marquee.html($panePop.find('span').html());
                $marquee.appendTo($panePop);
                $divMove.remove();
            }

            //events
            $panePop.find('.btnClosePop').off().click(function(){
                $panePop.hide();
            });
        },
        toggleDataSource: function(bool){
            if(AppConfig.isFactory)return;
            var colCount = $('#paneContent')[0].classList.contains('col-sm-10');
            var ele = null;

            if(bool && colCount){
                ele = document.getElementById('rightCt');
                ele && ele.click();
            }
            if(!bool && !colCount){
                ele = document.getElementById('rightCt');
                ele && ele.click();
            }
        },

        getSiblingChart:function(){
            var arrChartId = Object.keys(this.screen.listEntity);
            var arrChart = [];
            for (var i = 0; i < arrChartId.length ;i++){
                if(arrChartId[i] == this.entity.id)continue;
                arrChart.push({
                    id:arrChartId[i],
                    title:this.screen.listEntity[arrChartId[i]].entity.modal.title,
                    name:this.screen.listEntity[arrChartId[i]].entity.modal.title
                })
            }
            return arrChart;
        },
        initSubEntity:function(ctn,entity,cls){
            var id = +new Date();
            ctn.id = 'divContainer_' + id;
            entity.id = id;
            if (!cls)cls = ModalHtml;
            this.subEntity = new cls(this,entity);
            //this.subEntity.render();
        },
        updateSubEntity:function(){
            this.subEntity.render()
        }
        // getInstanceOfModalWiki: function(){
        //     if(!this.modalWikiCtr){
        //         this.modalWikiCtr = new ModalWiki(this);
        //     }
        //     return this.modalWikiCtr;
        // }
    };
    return ModalBase;
})();

﻿var ModalNone = (function () {
    function ModalNone(screen, entityParams, replacedElementId) {
        ModalBase.call(this, screen, entityParams, this.renderModal, null, null, null, replacedElementId);
    }

    ModalNone.prototype = new ModalBase();
    ModalNone.prototype.optionTemplate = {
        name: '',
        //parent: 0,
        mode: ['realTime'],
        maxNum: 1,
        title: '',
        minHeight: 1,
        minWidth: 2,
        maxHeight: 6,
        maxWidth: 12,
        type:'ModalNone'
    };

    ModalNone.prototype.renderModal = function () {
        //this.container.innerHTML = template;
        I18n.fillArea($('#coalSaveName').parent());
        $(this.container).parent().css('visibility','hidden');
        this.spinner.stop();
    },

    ModalNone.prototype.configure = function () {
        this.spinner.stop();
        var _this = this;
        $(_this.container).parent().css('visibility','');
        var divAdd = document.createElement('span');
        divAdd.className = 'springConfigTips';
        divAdd.innerHTML = 'Drag data meta from left panel';
        this.container.appendChild(divAdd);
        var btnRemove = document.createElement('span');
        btnRemove.className = 'glyphicon glyphicon-remove-circle springConfigRemoveBtn grow';
        btnRemove.title = 'Remove';
        btnRemove.onclick = function (e) {
            if (_this.chart) _this.chart.clear();
            if(_this.screen.screen){//兼容ModalMix
                _this.screen.screen.removeEntity(_this.entity.id);
            }else{
                _this.screen.removeEntity(_this.entity.id);
            }

            $('#divContainer_' + _this.entity.id).remove();
            _this = null;
        };
        this.container.appendChild(btnRemove);
        var btnHeightResize = document.createElement('div');
        if(AppConfig.isMobile || this.screen.isForMobile || (this.screen.options && this.screen.options.isForMobile) || (this.screen.screen && this.screen.screen.options && this.screen.screen.options.isForMobile)){
            this.entity.spanC = this.optionTemplate.maxWidth = this.optionTemplate.minWidth = 3;//宽度固定
            this.optionTemplate.maxHeight = 4.5;//最大高度修改
            (this.entity.spanR > this.optionTemplate.maxHeight) && (this.entity.spanR = this.optionTemplate.maxHeight);
        }
        var maxHeight = this.optionTemplate.maxHeight;
        var maxWidth = this.optionTemplate.maxWidth;
        var minHeight = this.optionTemplate.minHeight;
        var minWidth = this.optionTemplate.minWidth;
        btnHeightResize.className = 'divResize divHeightResize';
        btnHeightResize.innerHTML = '<label for="heightResize" >H: </label>' +
        '<input type="range" class="inputResize" id="heightResize" name="points" step="0.5" min="' + minHeight + '" max="' + maxHeight + '" value="' + _this.entity.spanR + '"/>' +
        '<h5 class="rangeVal">' + _this.entity.spanR + ' /'+ maxHeight +'</h5>' +
        '<input type="text" class="rangeChange" value="' + _this.entity.spanR + '"/>';
        this.container.appendChild(btnHeightResize);
        var btnWidthResize = document.createElement('div');
        btnWidthResize.className = 'divResize divWidthResize';
        btnWidthResize.innerHTML = '<label for="widthResize" >W: </label>' +
        '<input type="range" class="inputResize" id="widthResize" name="points" step="0.5" min="' + minWidth + '" max="' + maxWidth + '" value="' + _this.entity.spanC + '"/>' +
        '<h5 class="rangeVal">' + _this.entity.spanC + ' /'+ maxWidth +'</h5>' +
        '<input type="text" class="rangeChange" value="' + _this.entity.spanC + '"/>';
        this.container.appendChild(btnWidthResize);
        this.divResizeByMouseInit();
        this.divResizeByToolInit();

        if (this.entity.isNotRender && this.screen.entity) {//兼容ModalMix
            $(document.getElementById('divContainer_' + this.screen.entity.id)).find('.chartsCt')[0].appendChild(this.container.parentNode.parentNode);
        }

        if (this.entity.isNotRender) {//兼容ModalMix
                var parentId = undefined, subChartIds;
                if(this.screen.entity && this.screen.entity.id){//observer
                    parentId = this.screen.entity.id;
                }
                if(this.screen.store && this.screen.store.layout[0]){//factory
                    for(var i = 0, len = this.screen.store.layout[0].length, entity; i < len; i++){
                        entity = this.screen.store.layout[0][i];
                        if(entity.modal.type == 'ModalMix' && entity.modal.option.subChartIds &&  entity.modal.option.subChartIds.length > 0){
                            subChartIds = entity.modal.option.subChartIds;
                            for(var j = 0, l = subChartIds.length; j < l; j++){
                                if(subChartIds[j].id == this.entity.id){
                                    parentId = entity.id;
                                    break;
                                }
                            }
                        }
                        if(entity.modal.type == 'ModalAppBlind'&& entity.modal.option && entity.modal.option.length>0 && entity.modal.option[0].subChartIds.length>0){
                            var opts = entity.modal.option;
                            for(var m = 0;m<opts.length;m++){
                                if(opts[m].subChartIds[0].id===this.entity.id){
                                    parentId = entity.id;
                                    break;
                                }
                            }
                        }
                    }
                }
                if(parentId){
                    //if(this.container.parentNode.parentNode.parentNode.className.indexOf('chartsCt')>=0) return;
                    $(document.getElementById('divContainer_' + parentId)).find('.chartsCt')[0].appendChild(this.container.parentNode.parentNode);
                }
            }

        var divParent = $(this.container).closest('.springContainer')[0];
        var divContent = $(divParent).find('.springContent')[0];
        divContent.draggable = 'true';
        divContent.ondragstart = function (e) {
            //e.preventDefault();
            e.dataTransfer.setData("id", $(e.target).closest('.springContainer').get(0).id.replace('divContainer_', ''));
        };
        divContent.ondragover = function (e) {
            e.preventDefault();
        };
        divContent.ondragleave = function (e) {
            e.preventDefault();
        };
        divParent.ondrop = function (e) {
            e.stopPropagation();
            if (e.dataTransfer.getData("type") && e.dataTransfer.getData("title")) {
                /*if(e.dataTransfer.getData("type") == "ModalPointKPI"){
                    alert(I18n.resource.toolBox.modal.MSG_KPI_NOT_ALLOW_TO_MIX);
                    return false;
                }*/
                if(_this.screen.screen){
                    var entity = _this.entity;
                    //Mixchart is not allow has sub Mixchart
                    if(_this.screen.entity.modal.type==='ModalAppBlind'){
                       if(e.dataTransfer.getData("type") == 'ModalMix'){
                            alert('百叶窗内不能拖入组合图');
                            return;
                        }if(e.dataTransfer.getData("type") == "ModalPointKPI"){// Mixchart is not allow to have modalPointKPI
                            alert('百叶窗内不能拖入KPI尊享版');
                            return false;
                        }
                        if(e.dataTransfer.getData("type") == "ModalReportFactory"){// Mixchart is not allow to have modalPointKPI
                            alert('百叶窗内不能拖入报表章节');
                            return false;
                        }
                        if(e.dataTransfer.getData("type") == "ModalAppBlind"){// Mixchart is not allow to have modalPointKPI
                            alert('百叶窗内不能拖入百叶窗');
                            return false;
                        }else{
                            _this.screen.screen.rebornEntity(entity, e.dataTransfer.getData("type"), e.dataTransfer.getData("title"));
                        }
                    }else {
                        if (e.dataTransfer.getData("type") == 'ModalMix') {
                            alert(I18n.resource.toolBox.modal.MSG_MIX_NOT_ALLOW_TO_MIX);
                            return;
                        }
                        if (e.dataTransfer.getData("type") == "ModalPointKPI") {// Mixchart is not allow to have modalPointKPI
                            alert(I18n.resource.toolBox.modal.MSG_KPI_NOT_ALLOW_TO_MIX);
                            return false;
                        } else {
                            _this.screen.screen.rebornEntity(entity, e.dataTransfer.getData("type"), e.dataTransfer.getData("title"));
                        }
                    }
                }else{
                    _this.screen.rebornEntity(_this.entity, e.dataTransfer.getData("type"), e.dataTransfer.getData("title"),_this.hasEdit);
                }

            }else if(e.dataTransfer.getData("id")){
                var targetId = $(e.target).closest('.springContainer').get(0).id.replace('divContainer_', '');
                if(_this.screen && _this.screen.replaceEntity){
                    _this.screen.replaceEntity(e.dataTransfer.getData("id"), targetId);
                }
            }
        }
    };

    return ModalNone;
})();
﻿var ModalAnalysis = (function () {
    var _this = undefined;

    function ModalAnalysis(screen, entityParams) {
        entityParams.spanR = 6;
        entityParams.spanC = 12;
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
        // 为了适配 Docker，这里包一层
        this.spinner.stop();
        this.container = $('<div style="padding: 20px;position: absolute;left:0;top:0;right:0;bottom:0; z-index: 102; overflow-y: auto;"></div>')
        .appendTo(this.container)[0];

        _this = this;

        this.curModal = this.entity.modal.option.option;
        this.entityAnalysis = undefined;
        this.saveModalJudge = $.Deferred();
    }

    ModalAnalysis.prototype = new ModalBase();

    ModalAnalysis.prototype.optionTemplate = {
        name: 'toolBox.modal.TRANSIT',
        parent: 2,
        mode: ['realTimeWithoutRange'],
        maxNum: 1,
        title: '',
        minHeight: 1,
        minWidth: 1,
        maxHeight: 6,
        maxWidth: 12,
        type: 'ModalAnalysis'
    };

    ModalAnalysis.prototype.renderModal = function () {
        var modalClass = this.screen.factoryIoCAnalysis.getModel(this.entity.modal.option.type);
        this.screen.curModal = this.curModal;
        this.entityAnalysis = new modalClass(this.container, this.curModal, this);
        this.entityAnalysis.isShareMode = 1;
        this.entityAnalysis.paneChart = null;//this.container;
        this.entityAnalysis.chartAnimationDuration = 500;
        this.entityAnalysis.animation = false;
        this.entityAnalysis.show();
    };

    ModalAnalysis.prototype.onresize = function () {
        if (this.entityAnalysis.chart) this.entityAnalysis.chart.resize();
    };

    ModalAnalysis.prototype.updateModal = function (points) { };

    ModalAnalysis.prototype.showConfigMode = function () { };

    ModalAnalysis.prototype.setModalOption = function (option) { };

    ModalAnalysis.prototype.alertNoData = function () { };

    ModalAnalysis.prototype.spinnerStop = function () { };
    
    ModalAnalysis.prototype.saveModal = function () { };

    return ModalAnalysis;
})();

var ModalConfig = (function ($, undefined) {

    var arrForEach = Array.prototype.forEach;

    //////////////////////////////////
    // ModalConfig CLASS DEFINITION //
    //////////////////////////////////
    function ModalConfig(options) {
        // parameters
        this.options = $.extend({}, this.DEFAULTS, options);
        // DOM
        this.$wrap = null;
    };

    //////////////////////////////////////
    // ModalConfig PROTOTYPE DEFINITION //
    //////////////////////////////////////
    ModalConfig.prototype = {
        constructor: ModalConfig,
        // 显示配置弹出框
        show: function () {
            var _this = this;
            var htmlUrl = this.options.htmlUrl;
            var matches = htmlUrl.match(/\/?(\w+)(?:\.html)/);
            var id, domPanelContent, $ele;
            var promise = $.Deferred();

            // url有误
            if(!matches || matches[1] === undefined) {
                console.error('the url of config modal is illigal: '+ htmlUrl);
                return false;
            }

            // 自动将 "文件名+Wrap" 作为 wrap 层的 DOM id
            // id rule: "文件名+Wrap"
            id = matches[1] + 'Wrap';
            domPanelContent = document.getElementById(this.options.container || 'paneContent');

            if( ($ele = $('#'+id)).length > 0) {
                if ( !$.contains(domPanelContent, $ele[0]) ) {
                    domPanelContent.appendChild($ele[0]);
                }
                promise.resolve();
            } else {
                Spinner.spin(domPanelContent);

                // get the template from server
                WebAPI.get(htmlUrl).then(function (html) {
                    var rs;
                    Spinner.stop();
                    _this.$wrap = $('<div class="modal-config-wrap" id="'+id+'">')
                        .appendTo(domPanelContent).html(html);
                    _this.$modal = _this.$wrap.children('.modal');
                    _this._attachEvents();
                    return _this.init();
                }).always(function () {
                    promise.resolve();
                });
            }

            return promise.done(function () {
                _this.$modal.modal('show');
            });
        },
        /**
         * 设置表单某个字段的值
         * 这个方法的目的主要是：方便 reset 和 recover 表单的操作
         * 调用方式：__setField(type, $ele [,value])
         * @param  {string} type  告诉方法当前处理的表单字段是什么类型的
         * @param  {object(jQuery Wrap)} $ele  当前表单字段对应的 DOM 对象
         * @param  {number|string} value 需要向当前表单字段中填充的数值，可缺省，缺省时默认使用''，
         *                               当需要重置某个表单字段时，缺省该参数即可
         */
        _setField: function (type, $ele, value) {
            var itemMap, name;
            var _this = this;
            switch(type) {
                // 下拉列表
                case 'dropdown':
                    itemMap = $ele.data('dropdown-items');
                    if(!itemMap) {
                        $ele.data('dropdown-items', 
                            // value-text 映射表 
                            itemMap = (function () {
                                var rs = {};
                                $ele.siblings('ul').find('a').each(function (i, item) {
                                    var $item = $(item);
                                    var value = $item.attr('data-value');
                                    var text  = $item.text();
                                    if(!rs[value]) rs[value] = text;
                                });
                                return rs;
                            } ())
                        );   
                    }
                    $ele.attr('data-value', value).children('span').eq(0).text(itemMap[value]);
                    break;
                // 文本框
                case 'input':
                // 文本域
                case 'textarea':
                    value = value || '';
                    $ele.val(value);
                    break;
                // 数据源拖拽区域
                case 'droparea':
                    // reset
                    if(!value || value.trim() === '') {
                        $ele.attr('data-value', '').html('<span class="glyphicon glyphicon-plus"></span>');
                    }
                    // recover
                    else {
                        // 获取数据源的名称
                        name = AppConfig.datasource.getDSItemById(value).alias;
                        $ele.attr({'data-value': value,
                            'title': name}).html('<span>'+name+'</span>');
                    }
                    break;
                case 'select':
                    $ele.val(value);
                    break;
                // some more...
                default:
                    break;
            }
        },
        /**
         * 初始化一些公共的事件
         */
        _attachEvents: function () {
            var _this = this;
            var $modal;
            /////////////////////////////////
            // all dropdown selected event //
            /////////////////////////////////
            $('.dropdown-menu', this.$wrap).off('click.selected').on('click.selected', 'a', function (e) {
                var $this = $(this);
                var $btn = $this.parents('.dropdown-wrap').children('button');
                var value = $this.attr('data-value');
                var text = $this.text();

                $btn.attr('data-value', value);
                $btn.children('span').eq(0).text(text);

                e.preventDefault();
            });

            ////////////////////////////
            // modal show/hide events //
            ////////////////////////////
            $modal = $('.modal', this.$wrap);
            $modal.off('show.bs.modal').on('show.bs.modal', function (e) {
                var $rightCt;
                if(e.namespace !== 'bs.modal') return true;
                $rightCt = $('#rightCt');
                // recover the form
                _this.recoverForm(_this.options.modalIns.entity.modal);
                // show the data soucre panel
                if(!$rightCt.hasClass('rightCtOpen')) $rightCt.click();
            });
            $modal.off('hide.bs.modal').on('hide.bs.modal', function (e) {
                var $rightCt;
                if(e.namespace !== 'bs.modal') return true;
                $rightCt = $('#rightCt');
                // reset the form state
                _this.reset();
                // hide the data soucre panel
                if($rightCt.hasClass('rightCtOpen')) $rightCt.click();
            });

            ///////////////////////
            // point Drop EVENTS //
            ///////////////////////
            this.$wrap.off('dragover').on('dragover', '.drop-area', function (e) {
                e.preventDefault();
            });
            this.$wrap.off('dragenter').on('dragenter', '.drop-area', function (e) {
                $(e.target).addClass('on');
                e.preventDefault();
                e.stopPropagation();
            });
            this.$wrap.off('dragleave').on('dragleave', '.drop-area', function (e) {
                $(e.target).removeClass('on');
                e.stopPropagation();
            });
            this.$wrap.off('drop').on('drop', '.drop-area', function (e) {
                _this.onDropActionPerformed(e);
            });
        },
        onDropActionPerformed: function (e) {
            var _this = this;
            var itemId = EventAdapter.getData().dsItemId;
            var $target = $(e.target);
            var name;
            if(!itemId) return;
            $target.removeClass('on');
            _this._setField('droparea', $target, itemId);
            e.stopPropagation();
        },
        setOptions: function (options) {
            this.options = $.extend({}, this.options, options);
        }
    };

    return ModalConfig;
} (jQuery));
﻿var ModalChart = (function () {
    function ModalChart(screen, entityParams) {
        if (!entityParams) return;
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
        this.dicPeriod = {
            '30s': 30000,
            'm1': 60000,
            'm5': 300000,
            '10m': 600000,
            '30m': 1800000,
            'h1': 3600000,
            'd1': 86400000,
            'M1': 2592000000
    }
    }
    ModalChart.prototype = new ModalBase();

    ModalChart.prototype.optionTemplate = {
        name:'toolBox.modal.REAL_TIME_CHART',
        parent:0,
        mode:['realTime'],
        maxNum: 10,
        title:'',
        minHeight:1,
        minWidth:1,
        maxHeight:6,
        maxWidth:12,
        type:'ModalChart'
    };

    ModalChart.prototype.optionDefault = {
        // 默认色板
        color: [
            '#E2583A','#FD9F08','#1D74A9','#04A0D6','#689C0F','#109d83','#FEC500'
        ],

        // 图表标题
        title: {
            textStyle: {
                fontWeight: 'normal',
                color: '#008acd'          // 主标题文字颜色
            }
        },
        legend: {
            textStyle: {
                fontFamily: "Microsoft YaHei",
                fontSize:10
            },
            top: '10',//单位:px
            left: 'center'
        },
        // 值域
        dataRange: {
            itemWidth: 15,
            color: ['#5ab1ef','#e0ffff']
        },

        // 工具箱
        toolbox: {
            x: 'right',
            y: 'center',
            feature: {
                mark: { show: true },
                magicType: { show: true, type: ['line', 'bar'] },
                restore: { show: true },
                saveAsImage: { show: true }
            },
            color : ['#1e90ff', '#1e90ff', '#1e90ff', '#1e90ff'],
            effectiveColor : '#ff4500'
        },

        // 提示框
        tooltip: {
            trigger: 'axis',
            //backgroundColor: 'rgba(50,50,50,0.5)',     // 提示背景颜色，默认为透明度为0.7的黑色
            axisPointer : {            // 坐标轴指示器，坐标轴触发有效
                type : 'line',         // 默认为直线，可选为：'line' | 'shadow'
                lineStyle : {          // 直线指示器样式设置
                    color: '#008acd'
                },
                crossStyle: {
                    color: '#008acd'
                },
                shadowStyle : {                     // 阴影指示器样式设置
                    color: 'rgba(200,200,200,0.2)'
                }
            }
        },

        // 区域缩放控制器
        dataZoom: {
            dataBackgroundColor: '#efefff',            // 数据背景颜色
            fillerColor: 'rgba(182,162,222,0.2)',   // 填充颜色
            handleColor: '#008acd'    // 手柄颜色
        },

        // 网格
        grid: (function(isMobile){//统一配置grid
            var grid = {
                    borderWidth: 0,
                    borderColor: '#eee',
                    left:50,
                    bottom:40,
                    right:50,
                    top:40
                }
            if(isMobile){
                grid.x = 40;
            }
            return grid;
        }(AppConfig.isMobile)),

        // 类目轴
        categoryAxis: {
            axisLine: {            // 坐标轴线
                lineStyle: {       // 属性lineStyle控制线条样式
                    color: '#008acd'
                }
            },
            splitLine: {           // 分隔线
                lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
                    color: ['#eee']
                }
            }
        },

        // 数值型坐标轴默认参数
        valueAxis: {
            axisLine: {            // 坐标轴线
                lineStyle: {       // 属性lineStyle控制线条样式
                    color: '#008acd'
                }
            },
            splitArea : {
                show : true,
                areaStyle : {
                    color: ['rgba(250,250,250,0.1)','rgba(200,200,200,0.1)']
                }
            },
            splitLine: {           // 分隔线
                lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
                    color: ['#eee']
                }
            }
        },

        polar : {
            axisLine: {            // 坐标轴线
                lineStyle: {       // 属性lineStyle控制线条样式
                    color: '#ddd'
                }
            },
            splitArea : {
                show : true,
                areaStyle : {
                    color: ['rgba(250,250,250,0.2)','rgba(200,200,200,0.2)']
                }
            },
            splitLine : {
                lineStyle : {
                    color : '#ddd'
                }
            }
        },

        timeline : {
            lineStyle : {
                color : '#008acd'
            },
            controlStyle : {
                normal : { color : '#008acd'},
                emphasis : { color : '#008acd'}
            },
            symbol : 'emptyCircle',
            symbolSize : 3
        },

        // 柱形图默认参数
        bar: {
            itemStyle: {
                normal: {
                    barBorderRadius: 5
                },
                emphasis: {
                    barBorderRadius: 5
                }
            },
            barMaxWidth: 80
        },

        // 折线图默认参数
        line: {
            smooth : true,
            symbol: 'none',  // 拐点图形类型
            symbolSize: 3           // 拐点图形大小
        },

        // K线图默认参数
        k: {
            itemStyle: {
                normal: {
                    color: '#d87a80',       // 阳线填充颜色
                    color0: '#2ec7c9',      // 阴线填充颜色
                    lineStyle: {
                        color: '#d87a80',   // 阳线边框颜色
                        color0: '#2ec7c9'   // 阴线边框颜色
                    }
                }
            }
        },

        // 散点图默认参数
        scatter: {
            symbol: 'circle',    // 图形类型
            symbolSize: 4        // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
        },

        // 雷达图默认参数
        radar : {
            symbol: 'emptyCircle',    // 图形类型
            symbolSize:3
            //symbol: null,         // 拐点图形类型
            //symbolRotate : null,  // 图形旋转控制
        },

        map: {
            itemStyle: {
                normal: {
                    areaStyle: {
                        color: '#ddd'
                    },
                    label: {
                        textStyle: {
                            color: '#d87a80'
                        }
                    }
                },
                emphasis: {                 // 也是选中样式
                    areaStyle: {
                        color: '#fe994e'
                    }
                }
            }
        },

        force : {
            itemStyle: {
                normal: {
                    linkStyle : {
                        color : '#1e90ff'
                    }
                }
            }
        },

        chord : {
            itemStyle : {
                normal : {
                    borderWidth: 1,
                    borderColor: 'rgba(128, 128, 128, 0.5)',
                    chordStyle : {
                        lineStyle : {
                            color : 'rgba(128, 128, 128, 0.5)'
                        }
                    }
                },
                emphasis : {
                    borderWidth: 1,
                    borderColor: 'rgba(128, 128, 128, 0.5)',
                    chordStyle : {
                        lineStyle : {
                            color : 'rgba(128, 128, 128, 0.5)'
                        }
                    }
                }
            }
        },

        gauge : {
            axisLine: {            // 坐标轴线
                lineStyle: {       // 属性lineStyle控制线条样式
                    color: [[0.2, '#2ec7c9'],[0.8, '#5ab1ef'],[1, '#d87a80']],
                    width: 10
                }
            },
            axisTick: {            // 坐标轴小标记
                splitNumber: 10,   // 每份split细分多少段
                length :15,        // 属性length控制线长
                lineStyle: {       // 属性lineStyle控制线条样式
                    color: 'auto'
                }
            },
            splitLine: {           // 分隔线
                length :22,         // 属性length控制线长
                lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
                    color: 'auto'
                }
            },
            pointer : {
                width : 5
            }
        },

        textStyle: {
            fontFamily: '微软雅黑, Arial, Verdana, sans-serif'
        }
    };
    ModalChart.prototype.renderModal = function () {
        this.chart = echarts.init(this.container, AppConfig.chartTheme);
        this.chart.setOption(this.options);
    },
    ModalChart.prototype.updateModal = function (pointName, pointValue) {
    },
    ModalChart.prototype.showConfigMode = function () {
    },
    ModalChart.prototype.dsChartCog = function (cog, option) {
        if(!cog) return;
        if(cog[0].upper) option.yAxis[0].max = cog[0].upper;
        if(cog[0].lower) option.yAxis[0].min = cog[0].lower;
        if(cog[0].unit) option.yAxis[0].name = cog[0].unit;
        if(cog[0].markLine){
            if(!option.series[0].markLine) {
                option.series[0].markLine = {};
                option.series[0].markLine.data = new Array();

            }
            for(var i in cog[0].markLine){
                var markLine = cog[0].markLine[i];
                if(!markLine.value) continue;
                var arr = [
                    {name: markLine.name, xAxis: -1, yAxis: markLine.value},
                    {name: markLine.name, xAxis: option.series[0].data.length, yAxis: markLine.value}
                ];
                option.series[0].markLine.data.push(arr);
            }
        }
    }
    ModalChart.prototype.coordinate = function (timeShaft){
        var arr = [], timeFormat = this.entity.modal.option.timeFormat, format;
        switch(timeFormat){
            case 'm5':
                format = 'HH:mm';
                break;
            case 'h1':
                format = 'HH:00';
                break;
            case 'd1':
                format = 'yyyy-MM-dd';
                break;
            case 'M1':
                format = 'yyyy-MM';
                break;
            default:
                format = 'yyyy-MM-dd HH:mm';
                break;
        }

        for(var i = 0, l = timeShaft.length; i < l; i++){
            arr.push(timeShaft[i].toDate().format(format));
        }
        return [{data: arr}];
    },
    ModalChart.prototype.resize = function(){
        this.chart && this.chart.resize();
    }
    ModalChart.prototype.getData = function(params){
        var startTime, endTime,timeFormat, unit, postData = {}, arrPoint;
        var now = new Date();

        //获取dsItemIds
        if(params && params.dsItemIds){
            arrPoint = params.dsItemIds;
        }else{
            arrPoint = this.entity.modal.points[0] instanceof Array ? this.entity.modal.points[0] : this.entity.modal.points;
        }

        //获取timeFormat
        if(params && params.timeFormat){
            timeFormat = params.timeFormat;
        }else{
            timeFormat = this.entity.modal.option.format;
        }

        //获取startTime endTime
        if(!params || !params.startTime || !params.endTime){
            if(this.entity.modal.option.mode == 0){
                switch (this.entity.modal.option.recentTime){
                    case 'today'://过去24小时,timeFormat:h1
                        startTime = new Date(now.getTime() - 86400000 + 3600000).format('yyyy-MM-dd HH:00:00');
                        endTime = now.format('yyyy-MM-dd HH:00:00');
                        break;
                    case 'threeDay'://过去72小时,timeFormat:h1
                        startTime = new Date(now.getTime() - 86400000*3 + 3600000).format('yyyy-MM-dd HH:00:00');
                        endTime = now.format('yyyy-MM-dd HH:00:00');
                        break;
                    case 'yesterday'://昨天,timeFormat:h1
                        endTime = now;
                        endTime.setHours(0);
                        endTime.setMinutes(0);
                        endTime.setSeconds(0);
                        startTime = new Date(endTime.getTime() - 86400000 + 3600000).format('yyyy-MM-dd HH:00:00');
                        endTime = endTime.format('yyyy-MM-dd HH:00:00');
                        break;
                    case 'thisWeek'://过去7天,timeFormat:d1
                        endTime = now.format('yyyy-MM-dd 00:00:00');
                        startTime = new Date(endTime);
                        startTime.setDate(startTime.getDate() - 6);
                        startTime = startTime.format('yyyy-MM-dd 00:00:00');
                        break;
                    case 'lastWeek'://上个星期,timeFormat:d1
                        endTime = new Date(now.getTime() - now.getDay()*86400000).format('yyyy-MM-dd 00:00:00');;//上周的最后一天,即周日
                        startTime = new Date(now.getTime() - (now.getDay()+6)*86400000).format('yyyy-MM-dd 00:00:00');;//上周的第一天,即周一
                        break;
                    case 'thisYear':
                        endTime = now.format('yyyy-MM-01 00:00:00');//本月的第一天
                        startTime = now;
                        startTime.setMonth(startTime.getMonth() -12);
                        startTime = startTime.format('yyyy-MM-01 00:00:00');
                        break;
                }

            }else if(this.entity.modal.option.mode == 1){
                if(this.entity.modal.option.startTime && this.entity.modal.option.endTime){
                    startTime = new Date(this.entity.modal.option.startTime).format('yyyy-MM-dd HH:mm:ss');
                    endTime = new Date(this.entity.modal.option.endTime).format('yyyy-MM-dd HH:mm:ss');

                }else{
                    alert('请配置开始时间/结束时间');
                    return;
                }
            }else if(this.entity.modal.option.mode == 2){

                if(this.entity.modal.option.unit === 'hour'){//时间周期为小时
                    unit = 3600000;
                    endTime = new Date();
                    //采样周期为5分钟或者1小时
                    if(timeFormat === 'h1'){
                        //结束时间设置为当前小时的00:00
                        endTime.setMinutes(0);
                        endTime.setSeconds(0);
                    }
                    startTime = new Date(endTime.getTime() - unit * parseInt(this.entity.modal.option.val) + 1000).format('yyyy-MM-dd HH:mm:ss');
                }else if(this.entity.modal.option.unit === 'day'){//时间周期为天
                    unit = 86400000;
                    endTime = new Date();
                    //结束时间设置为当天的00:00:00
                    endTime.setMinutes(0);
                    endTime.setSeconds(0);
                    if(timeFormat === 'h1'){
                        startTime = new Date(endTime.getTime() - unit * parseInt(this.entity.modal.option.val) + 3600000).format('yyyy-MM-dd HH:mm:ss');
                    }else if(timeFormat === 'd1'){
                        //endTime.setHours(0);
                        startTime = new Date(endTime.getTime() - unit * parseInt(this.entity.modal.option.val) + 1000).format('yyyy-MM-dd HH:mm:ss');
                    }
                }else if(this.entity.modal.option.unit === 'month'){//默认三十天
                    unit = 2592000000;//86400000*30
                    if(timeFormat === 'd1'){
                        endTime = now.format('yyyy-MM-dd 00:00:00');
                        startTime = new Date(now.getTime() - 86400000*30).format('yyyy-MM-dd 00:00:00');
                    }else if(timeFormat === 'M1'){
                        //todo
                        alert('开发中');
                        return;
                    }
                }

                endTime = endTime.format('yyyy-MM-dd HH:mm:ss');
            }


        }else{
            startTime = params.startTime;
            endTime = params.endTime;
        }

        //验证数据及格式是否正确
        if(!arrPoint || arrPoint.length === 0){
            postData.errorMsg = 'Data source is error';
        }
        if(!startTime || !endTime){
            postData.errorMsg = 'Start time or end time is error';
        }
        if(!timeFormat){
            postData.errorMsg = 'timeFormat is error';
        }

        if(postData.errorMsg) {
            alert(postData.errorMsg);
            return;
        }

        postData.dsItemIds = arrPoint;
        postData.timeStart = startTime;
        postData.timeEnd = endTime;
        postData.timeFormat = timeFormat;

        return WebAPI.post('/analysis/startWorkspaceDataGenHistogram', postData);
    }
    return ModalChart;
})();

/* 饼图 start */
var ModalRealtimePie = (function () {

    function ModalRealtimePie(screen, entityParams) {
        if (!entityParams) return;
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
    };
    ModalRealtimePie.prototype = new ModalBase();
    ModalRealtimePie.prototype.optionTemplate = {
        name:'',
        parent:0,
        mode:['realTimeDashboard'],
        maxNum: 10,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12
    };
    ModalRealtimePie.prototype.optionDefault = {
        tooltip: {
            trigger: 'item',
            formatter: "{a} <br/>{b} : {c} ({d}%)"
        },
        legend: {
            orient: 'vertical',
            x: 'left',
            y: 'center'
        },
        toolbox: {
            show: false,
            feature: {
                mark: { show: true },
                dataView: { show: true, readOnly: false },
                magicType: {
                    show: true,
                    type: ['pie', 'funnel'],
                    option: {
                        funnel: {
                            x: '25%',
                            width: '50%',
                            funnelAlign: 'center',
                            max: 1548
                        }
                    }
                },
                restore: { show: true },
                saveAsImage: { show: true }
            }
        },
        calculable: true,
        color: ['#E2583A','#FD9F08','#FEC500','#1D74A9','#04A0D6','#689C0F','#109d83'],
        series: [
            {
                type: 'pie',
                radius: ['50%', '70%'],
                center:['50%','50%'],
                labelLine: {
                    normal: {
                        show: true,
                        length:6,
                        length2:60,
                        lineStyle:{
                            width:[2]
                        }
                    }
                },
                itemStyle: {
                    normal: {
                        label: {
                            show: true,
                            formatter: '{d}%' //  '{b} : {c} ({d}%)'
                        },
                        labelLine: {
                            show: true
                        }
                    },
                    emphasis: {
                        label: {
                            show: true,
                            position: 'center',
                            textStyle: {
                                fontSize: '20',
                                fontWeight: 'bold'
                            }
                        }
                    }
                }
            }
        ]
    };
    ModalRealtimePie.prototype.renderModal = function () {
        this.chart = echarts.init(this.container, AppConfig.chartTheme);
        this.chart.setOption($.extend(true, {}, this.optionDefault, this.option));
    },
    ModalRealtimePie.prototype.updateModal = function (points) {
    },
    ModalRealtimePie.prototype.showConfigMode = function () {
    },
    ModalRealtimePie.prototype.dealWithData = function(points, len){
        var arr = [];
        var arrLegend = this.initPointAlias(points);
        var arrSeries = [];
        for(var i = 0; i < points.length; i++){
            var seriesData = {
                 value: tofixed(points[i].data),
                 name: arrLegend[i]
            };
            arrSeries.push(seriesData);
        }
        arr.push(arrLegend);
        arr.push(arrSeries);
        return arr;
    },

    ModalRealtimePie.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
    };

    return ModalRealtimePie;
})();
/* 饼图 end */

/* 折线图 start */
var ModalRealtimeLine = (function () {
    function ModalRealtimeLine(screen, entityParams) {
        if (!entityParams) return;
        ModalChart.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
    };
    ModalRealtimeLine.prototype = new ModalChart();
    ModalRealtimeLine.prototype.optionTemplate = {
        name:'',
        parent:0,
        mode:['realTimeDashboard'],
        maxNum: 10,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12
    };
    ModalRealtimeLine.prototype.optionDefault = $.extend(true,{}, {grid: ModalChart.prototype.optionDefault.grid, legend: ModalChart.prototype.optionDefault.legend}, {
        tooltip: {
            trigger: 'axis'
        },
        legend: {
            data: [],
            orient: 'horizontal'
        },
        //grid: {x: 70, y: 38, x2: 10, y2: 24},
        toolbox: {
            show: false,
            feature: {
                dataView: { show: true, readOnly: false },
                magicType: { show: true, type: ['line', 'bar'] }
            }
        },
        calculable: (function(){
            if(AppConfig.isMobile){
                return false;
            }else{
                return true;
            }
        }()),             
        color: ['#E2583A','#FEC500','#04A0D6','#FD9F08','#1D74A9','#689C0F','#109d83'],
        xAxis: [
            {
                type: 'category',
                boundaryGap: false,
                splitLine: {show: false},
                splitArea:{show:false},
                axisTick: {
                    show: false
                }
            }
        ],
        yAxis: [
            {
                type: 'value',
                scale: true,
                splitLine: {
                    show:(function(){
                        if(AppConfig.isMobile){
                            return false;
                        }else{
                            return true;
                        }
                    }())
                },
                splitArea:{show:false},
                axisLabel : {
                    formatter: function (value){
                        if(AppConfig.isMobile && value/1000 >= 1){
                            return value/1000 + 'k';
                        }else{
                            return value;
                        }
                    }
                }
            }
        ],
        series: [
            {
                type: 'line',
                symbol: 'none',
                smooth: true
            }
        ],
        animation: true
    });
    ModalRealtimeLine.prototype.renderModal = function () {
        this.chart = echarts.init(this.container, AppConfig.chartTheme);
        this.chart.setOption($.extend(true, {}, this.optionDefault, this.option));
    },
    ModalRealtimeLine.prototype.updateModal = function (points) {
    },
    ModalRealtimeLine.prototype.showConfigMode = function () {
    },
    ModalRealtimeLine.prototype.dealWithData = function (points,dsChartCog) {
        var arr = [], arrLegend = [],arrSeries = [], accuracy;
        if(!dsChartCog){
            accuracy = 2;
        }else{
            accuracy = parseInt(dsChartCog[0].accuracy);
        }
        arrLegend = this.initPointAlias(points.list);
        for (var i = 0; i < points.list.length; i++) {
            var dataList = [];
            for(var j in points.list[i].data){
                if(typeof (points.list[i].data[j]) === 'number'){
                    dataList.push(points.list[i].data[j].toFixed(accuracy));
                }
            }
            var series = {
                 name: arrLegend[i],
                 type: this.entity.modal.option.showType ? this.entity.modal.option.showType : 'line',//
                 symbol: 'none',
                 smooth: true,
                 data: dataList,
                 z:3,
                 itemStyle: {
                     normal: {
                         label: {
                             show: false,
                             position: 'top',
                             formatter: '{b}\n{c}'
                         },
                         barBorderRadius: [5, 5, 0, 0]
                     }
                 }
            }
            arrSeries.push(series);
        }
        arr.push(arrLegend);
        arr.push(arrSeries);
        return arr;
    },
    ModalRealtimeLine.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
    };
    return ModalRealtimeLine;
})();
/* 折线图 end */

/* 柱图 start*/
var modalRealtimeBar = (function () {
    function modalRealtimeBar(screen, entityParams) {
        if (!entityParams) return;
        ModalChart.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
    };
    modalRealtimeBar.prototype = new ModalChart();
    modalRealtimeBar.prototype.optionTemplate = {
        parent:0,
        mode:['realTimeDashboard'],
        maxNum: 10,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12
    };
    modalRealtimeBar.prototype.optionDefault = $.extend(true,{},{grid: ModalChart.prototype.optionDefault.grid, legend: ModalChart.prototype.optionDefault.legend}, {
        tooltip: {
            trigger: 'item'
        },
        calculable: (function(){
            if(AppConfig.isMobile){
                return false;
            }else{
                return true;
            }
        }()),
        //grid: {x: 70, y: 38, x2: 10, y2: 24},
        xAxis: [
            {
                type: 'category',
                show: true,
                splitLine: {show: false},
                splitArea:{show:false},
                axisTick: {
                    show: false
                }
            }
        ],
        yAxis: [
            {
                type: 'value',
                splitArea:{show:false},
                splitLine: {
                    show:(function(){
                        if(AppConfig.isMobile){
                            return false;
                        }else{
                            return true;
                        }
                    }())
                },
                axisLabel : {
                    formatter: function (value){
                        if(AppConfig.isMobile && value/1000 >= 1){
                            return value/1000 + 'k';
                        }else{
                            return value;
                        }
                    }
                }
            }
        ],
        animation: true
    });
    modalRealtimeBar.prototype.renderModal = function () {
        this.chart = echarts.init(this.container, AppConfig.chartTheme);
        this.chart.setOption($.extend(true, {}, this.optionDefault, this.option));
    },
    modalRealtimeBar.prototype.updateModal = function (points) {
    },
    modalRealtimeBar.prototype.showConfigMode = function () {
    },
    modalRealtimeBar.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
    };
    return modalRealtimeBar;
})();
/* 柱图 end*/


/* 横向比较 自定义柱图 start*/
var ModalRealtimeBarEnegBrkd = (function () {

    function ModalRealtimeBarEnegBrkd(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if(!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        modalRealtimeBar.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);

    };
    ModalRealtimeBarEnegBrkd.prototype = new modalRealtimeBar();

    ModalRealtimeBarEnegBrkd.prototype.optionTemplate = {
        name:'toolBox.modal.REAL_TIME_CHART_BAR_ENERGY',
        parent:0,
        mode:['realTimeDashboard'],
        maxNum: 10,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalRealtimeBarEnegBrkd',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalRealtimeBarEnegBrkd.prototype.renderModal = function () {

    },

    ModalRealtimeBarEnegBrkd.prototype.updateModal = function (points) {
        if(points.length < 1) return;

        var now = new Date();
        if(!this.lastRenderTime || now.getTime() - this.lastRenderTime > this.dicPeriod[_this.entity.modal.option.timeFormat]){
            this.lastRenderTime = now;
        var _this = this;
        var dsChartCog = this.entity.modal.dsChartCog;
        var entityItem = dealWithData(points,dsChartCog);
        var optionDefault = {
            tooltip: {
                trigger: 'item'
            },
            toolbox: {
                show: false
            },
            calculable: true,
            xAxis: [
                {
                    type: 'category',
                    show: true
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    show: true
                }
            ],
            series: [
                {
                    type: 'bar',
                    itemStyle: {
                        normal: {
                            color: function(params) {
                                // build a color map as your need.
                                var colorList = [
                                  '#C1232B','#B5C334','#FCCE10','#E87C25','#27727B',
                                   '#FE8463','#9BCA63','#FAD860','#F3A43B','#60C0DD',
                                   '#D7504B','#C6E579','#F4E001','#F0805A','#26C0C0'
                                ];
                                return colorList[params.dataIndex]
                            },
                            label: {
                                show: true,
                                position: 'top',
                                formatter: '{c}'
                            }
                        }
                    },
                    barMaxWidth: 80
                }
            ]
        };
            var entityData = {
                xAxis: [
                    {
                        data: entityItem[0]
                    }
                ],
                series: [
                    {
                        data: entityItem[1],
                        markPoint: {
                            data: entityItem[2]
                        }
                    }
                ]
            };
            this.dsChartCog(dsChartCog,entityData);
            !this.chart && (this.chart = echarts.init(this.container, AppConfig.chartTheme));
            this.chart.setOption($.extend(true, {},this.optionDefault, optionDefault,entityData));

        }/*else{
            this.chart.setSeries([
                    {
                        type: 'bar',
                        itemStyle: {
                            normal: {
                                color: function (params) {
                                    var colorList = [
                                     '#C1232B', '#B5C334', '#FCCE10', '#E87C25', '#27727B',
                                      '#FE8463', '#9BCA63', '#FAD860', '#F3A43B', '#60C0DD',
                                      '#D7504B', '#C6E579', '#F4E001', '#F0805A', '#26C0C0'
                                    ];
                                    return colorList[params.dataIndex]
                                }
                            }
                        },
                        data: entityItem[1],
                        markPoint: {
                            data: entityItem[2]
                        }
                    }
                ])
        }*/
        function dealWithData(points,dsChartCog){
            var arr = [], arrXAxis = [], arrData = [], arrMpData = [], accuracy;
            if(!dsChartCog){
                accuracy = 2;
            }else{
                accuracy = parseInt(dsChartCog[0].accuracy);
            };
            arrXAxis = _this.initPointAlias(points);
            for(var i = 0, temp; i < points.length; i++){
                temp = points[i];
                arrData.push(tofixed(temp.data, accuracy));
                arrMpData.push({xAxis: i, value: tofixed(temp.data, accuracy), name: arrXAxis[i], symbol: 'none'})
            }
            arr.push(arrXAxis);
            arr.push(arrData);
            arr.push(arrMpData);
            return arr;
        }
    },
    ModalRealtimeBarEnegBrkd.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
    };
    return ModalRealtimeBarEnegBrkd;
})();
/* 横向比较 自定义柱图 end*/

/* 横向比较 柱图 start*/
var ModalRealtimeBarSub = (function () {

    function ModalRealtimeBarSub(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if(!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        modalRealtimeBar.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);
        this.m_bIsGoBackTrace = false;
        this.m_traceData = undefined;
    };
    ModalRealtimeBarSub.prototype = new modalRealtimeBar();

    ModalRealtimeBarSub.prototype.optionTemplate = {
        name:'toolBox.modal.REAL_TIME_BAR',
        parent:0,
        mode:['realTimeDashboard'],
        maxNum: 10,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalRealtimeBarSub',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalRealtimeBarSub.prototype.renderModal = function () {
    },

    ModalRealtimeBarSub.prototype.updateModal = function (points) {
        if(points.length < 1) return;
        var _this = this;
        var now = new Date();
        //首次渲染 或则 上次刷新间隔时间大于 时间周期
        if(!this.lastRenderTime || now.getTime() - this.lastRenderTime > this.dicPeriod[_this.entity.modal.option.timeFormat]){
            var pointNameList = (function(points){
                var arr = [];
                for(var i = 0; i < points.length; i++){
                    arr.push(points[i].dsItemId)
                }
                return arr;
            })(points);
            var endTime;
            if (!_this.m_bIsGoBackTrace) {
                endTime = new Date();
                _this.optionDefault.animation = true;
            }
            else {
                this.m_bIsGoBackTrace = false;
                endTime = new Date(_this.m_traceData.currentTime);
                _this.optionDefault.animation = false;
            }
            if(!this.entity.modal.option) this.entity.modal.option = {};
            if (!this.entity.modal.option.timeFormat) { this.entity.modal.option.timeFormat = 'h1';}
            if (this.entity.modal.option.timeFormat === 'm1' || this.entity.modal.option.timeFormat === 'm5' || this.entity.modal.option.timeFormat === 'h1') {
                var startTime = new Date(endTime - 86400000);
            } else if (this.entity.modal.option.timeFormat === 'd1') {
                var startTime = new Date(endTime - 2592000000);
            } else if (this.entity.modal.option.timeFormat === 'M1') {
                var startTime = new Date(endTime - 31536000000);
            }
            this.lastRenderTime = now;
            WebAPI.post('/analysis/startWorkspaceDataGenHistogram', {
                dsItemIds: pointNameList,
                timeStart: startTime.format('yyyy-MM-dd HH:mm:ss'),
                timeEnd: endTime.format('yyyy-MM-dd HH:mm:ss'),
                timeFormat: _this.entity.modal.option.timeFormat
            }).done(function (dataSrc) {
                if (dataSrc == undefined || dataSrc.length <= 0) {
                    return;
                }
                var dsChartCog = _this.entity.modal.dsChartCog;
                var entityItem = _this.dealWithData(dataSrc,dsChartCog);
                var entityData = {
                    legend: {
                        data: entityItem[0],
                        icon:'circle',
                        itemWidth:22,
                        itemHeight:10
                    },
                    xAxis: _this.coordinate(dataSrc.timeShaft),
                    yAxis:[{}],
                    toolbox: {
                        show : false,
                        feature : {
                            dataView : {show: true, readOnly: false},
                            magicType : {show: true, type: ['line', 'bar']}
                        }
                    },
                    series: entityItem[1]
                };
                _this.dsChartCog(dsChartCog, entityData);
                !_this.chart && (_this.chart = echarts.init(_this.container, AppConfig.chartTheme));
                _this.chart.clear();
                _this.chart.setOption($.extend(true, {}, _this.optionDefault, entityData));
            }).error(function (e) {

            }).always(function (e) {

            });
            }
    },
    ModalRealtimeBarSub.prototype.dealWithData = function (points,dsChartCog) {
        var arr = [], arrLegend = [], arrSeries = [], accuracy;
        if(!dsChartCog){
            accuracy = 2;
        }else{
            accuracy = parseInt(dsChartCog[0].accuracy);
        }
        arrLegend = this.initPointAlias(points.list);
        for (var i = 0; i < points.list.length; i++) {
            var key = points.list[i].dsItemId, dataList = [];
            for(var j in points.list[i].data){
                dataList.push(points.list[i].data[j].toFixed(accuracy));
            }
            var series = {
                name: arrLegend[i],
                type: 'bar',
                symbol: 'none',
                smooth: true,
                data: dataList,
                itemStyle: {
                    normal: {
                        label: {
                            show: false,
                            position: 'top',
                            formatter: '{b}\n{c}'
                        },
                        barBorderRadius: [5, 5, 0, 0]
                    }
                }
            }
            arrSeries.push(series);
        }
        arr.push(arrLegend);
        arr.push(arrSeries);
        return arr;
    },
    ModalRealtimeBarSub.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
    };
    ModalRealtimeBarSub.prototype.goBackTrace = function (data) {
        this.m_bIsGoBackTrace = true;
        this.m_traceData = data;
        this.renderModal();
    };
    return ModalRealtimeBarSub;
})();
/* 横向比较 柱图 end*/


/* 主页 饼图 分项能耗 start*/
var ModalRealtimePieEnegBrkd = (function () {

    function ModalRealtimePieEnegBrkd(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        ModalRealtimePie.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);

    };

    ModalRealtimePieEnegBrkd.prototype = new ModalRealtimePie();

    ModalRealtimePieEnegBrkd.prototype.optionTemplate = {
        name:'toolBox.modal.REAL_TIME_CHART_PIE_ENERGY',
        parent:0,
        mode:['realTimeDashboard'],
        maxNum: 10,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalRealtimePieEnegBrkd',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalRealtimePieEnegBrkd.prototype.renderModal = function () {

    }

    ModalRealtimePieEnegBrkd.prototype.updateModal = function (points) {
        if(points.length < 1) return;
        var  _this = this;
        var now = new Date();
        if(!this.lastRenderTime || now.getTime() - this.lastRenderTime > this.dicPeriod[_this.entity.modal.option.timeFormat]){
            this.lastRenderTime = now;
            var entityItem = this.dealWithData(points,4);
            var entityData = {
                legend: {
                    data: entityItem[0],
                    icon: 'circle',
                    itemWidth:22,
                    itemHeight:10,
                    top:20
                },
                series: [
                    {
                        data: entityItem[1]
                    }
                ]
            };
            this.chart = echarts.init(this.container, AppConfig.chartTheme).setOption($.extend(true, {}, this.optionDefault, entityData));
        }
    },
    ModalRealtimePieEnegBrkd.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
    };
    return ModalRealtimePieEnegBrkd;
})();
/* 主页 饼图 分项能耗 end*/


/* 实时折线图 start*/
var ModalRealtimeLineOutdoor = (function () {

    function ModalRealtimeLineOutdoor(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        ModalRealtimeLine.call(this, screen, entityParams, renderModal, updateModal, null);
        this.m_bIsGoBackTrace = false;
        this.m_traceData = undefined;
        //兼容老数据
        !this.entity.modal.option && (this.entity.modal.option = {});
        !this.entity.modal.option.mode && (this.entity.modal.option.mode = 0);
        !this.entity.modal.option.recentTime && (this.entity.modal.option.recentTime = 'today');
        !this.entity.modal.option.format && (this.entity.modal.option.format = 'h1');
    };

    ModalRealtimeLineOutdoor.prototype = new ModalRealtimeLine();
    ModalRealtimeLineOutdoor.prototype.optionTemplate = {
        name:'toolBox.modal.REAL_TIME_CHART_LINE_OUTDOOR',
        parent:0,
        mode:['realTimeDashboard'],
        maxNum: 10,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalRealtimeLineOutdoor',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    },
    ModalRealtimeLineOutdoor.prototype.renderModal = function () {
        this.updateModal();
    }
    ModalRealtimeLineOutdoor.prototype.updateModal = function (points) {
        var pointNameList = [];
        if(this.screen.store){
            if(this.screen.store.model){//在page頁面作為htmlDashboard控件才有
                if(this.screen.store.model.option().bg === "whiteBg"){
                    this.optionDefault.tooltip = {
                        trigger: 'axis',
                        backgroundColor: 'rgba(0,0,0,0.7)',
                        textStyle:{
                            color:"#ffffff"
                        }
                    }
                }else{
                    this.optionDefault.tooltip = {
                        trigger: 'axis',
                        backgroundColor: 'rgba(255,255,255,0.9)',
                        textStyle:{
                            color:"#000000"
                        }
                    }
                }
            }
        }
        
        
        if(!points && this.entity.modal.points){
            if(this.entity.modal.points[0] instanceof Array){
                pointNameList = this.entity.modal.points[0];
            }else{
                pointNameList = this.entity.modal.points;
            }
        }else{
            points && points.length > 0 && (pointNameList = (function(points){
                var arr = [];
                for(var i = 0; i < points.length; i++){
                    arr.push(points[i].dsItemId)
                }
                return arr;
            })(points));
        }

        if(pointNameList.length < 1) return;
        var _this = this;
        var now = new Date();

        if(!this.lastRenderTime || now.getTime() - this.lastRenderTime > this.dicPeriod[_this.entity.modal.option.timeFormat]){

            var endTime, startTime;
            if (!_this.m_bIsGoBackTrace) {
                endTime = new Date();
                _this.optionDefault.animation = true;
            }
            else {
                this.m_bIsGoBackTrace = false;
                endTime = new Date(_this.m_traceData.currentTime);
                _this.optionDefault.animation = false;
            }
            if(!this.entity.modal.option) this.entity.modal.option = {};
            if (!this.entity.modal.option.timeFormat) { this.entity.modal.option.timeFormat = 'h1';}
            if (this.entity.modal.option.timeFormat === 'm1' || this.entity.modal.option.timeFormat === 'm5' || this.entity.modal.option.timeFormat === 'h1') {
                startTime = new Date(endTime - 86400000);
            } else if (this.entity.modal.option.timeFormat === 'd1') {
                startTime = new Date(endTime - 2592000000);
            } else if (this.entity.modal.option.timeFormat === 'M1') {
                startTime = new Date(endTime - 31536000000);
            }
            this.lastRenderTime = now;

        this.getData({dsItemIds:pointNameList, timeFormat: this.entity.modal.option.timeFormat}).done(function (dataSrc) {
                if (dataSrc == undefined || dataSrc.length <= 0) {
                    return;
                }
                var dsChartCog = _this.entity.modal.dsChartCog;
                var entityItem = _this.dealWithData(dataSrc,dsChartCog);
                var entityData = {
                    legend: {
                        data: entityItem[0],
                        icon: 'circle',
                        itemWidth:22,
                        itemHeight:10
                    },
                    xAxis: _this.coordinate(dataSrc.timeShaft),
                    yAxis: [{}],
                    series: entityItem[1]
                };

                _this.dsChartCog(dsChartCog, entityData);
                !_this.chart && (_this.chart = echarts.init(_this.container, AppConfig.chartTheme));
                _this.chart.clear();
                _this.chart.setOption($.extend(true, {}, _this.optionDefault, entityData));
            }).error(function (e) {

            }).always(function (e) {

            });
        }
    },
    ModalRealtimeLineOutdoor.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
    };
    ModalRealtimeLineOutdoor.prototype.goBackTrace = function (data) {
        this.m_bIsGoBackTrace = true;
        this.m_traceData = data;
        this.renderModal();
    };

    ModalRealtimeLineOutdoor.prototype.modalInit = function(){
        !this.entity.modal.option && (this.entity.modal.option = {});
        var _this = this;
        var configModalOpt = {
                "header" : {
                "needBtnClose" : true,
                "title" : "配置"
            },
            "area" : [
                {
                    module:'timeConfig',
                    data:{
                        mode: this.entity.modal.option.mode,
                        timeFormat: this.entity.modal.option.format,
                        timeRecent: this.entity.modal.option.recentTime,
                        timeStart: this.entity.modal.option.startTime,
                        timeEnd: this.entity.modal.option.endTime
                    }
                },
                {
                    "type": 'option',
                    "widget":[{id:'selChartType',type:'select',name:'图表类型',
                        opt:{
                            option:[
                                {val: 'bar', name: '柱图'},
                                {val: 'line', name: '折线图'}
                            ]
                        },
                        data:{val: this.entity.modal.option.showType}
                    }]
                },
                {
                    "module" : "dsDrag",
                    "data":[{
                        type:'point',name:'数据点位',data: this.entity.modal.points ? (this.entity.modal.points[0] instanceof Array ? this.entity.modal.points[0] : this.entity.modal.points) : [],forChart:false
                    }]
                },{
                    'type':'footer',
                    "widget":[{type:'confirm',opt:{needClose:true}},{type:'cancel'}]
                },
            ],
            result:{
                func: function(data) {
                    !_this.entity.modal.option && (_this.entity.modal.option = {});
                    _this.entity.modal.option.mode = data.mode;
                    _this.entity.modal.option.format = data.timeFormat;
                    if(data.mode === '1'){
                        _this.entity.modal.option.startTime = data.timeStart;
                        _this.entity.modal.option.endTime = data.timeEnd;
                    }else if(data.mode === '2'){
                        _this.entity.modal.option.unit = data.timeRecent.unit;
                        _this.entity.modal.option.val = data.timeRecent.val;
                    }
                    _this.entity.modal.option.recentTime = data.timeRecent;
                    _this.entity.modal.option.showType = data.selChartType.val;
                    _this.entity.modal.points = data.points[0];
                    _this.lastRenderTime = null;
                    _this.setModalOption();
                    _this.updateModal();
                }
            }
        };
        this.configModal = new ConfigModal(configModalOpt, this.screen.container ? this.screen.container : this.screen.page.painterCtn);
        this.configModal.init();
        this.configModal.show();
    };

    return ModalRealtimeLineOutdoor;
})();
/* 实时折线图 end*/


/*实时仪表盘 start */
var ModalRealtimeGauge = (function () {

    function ModalRealtimeGauge(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        ModalBase.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);
        this.entityOption = entityParams.modal.option;
    };
    ModalRealtimeGauge.prototype = new ModalBase();

    ModalRealtimeGauge.prototype.optionTemplate = {

        name:'toolBox.modal.REAL_TIME_CHART_GAUGE',
        parent:0,
        mode:['gauge'],
        maxNum: 1,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalRealtimeGauge',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalRealtimeGauge.prototype.optionDefault = {
        tooltip: {
            formatter: "{c}"
        },
        animation: true,
        animationDuration: 1000,
        animationDurationUpdate: 1000,
        series: [
            {
                name: 'PUE',
                type: 'gauge',
                splitNumber: 8,
                radius:'100%',
                axisLine: {
                    show: true,
                    lineStyle: {
                        width: 6
                    }
                },
                axisTick: {
                    show: true,
                    splitNumber: 5,
                    length: 10,
                    lineStyle: {
                        width: 1,
                        type: 'solid',
                        color:'auto'
                    }
                },
                axisLabel: {
                    textStyle: {
                        color: 'auto'
                    },
                    formatter: function (v){
                      return v.toFixed(0);
                    }
                },
                splitLine: {
                    show: true,
                    length :15,
                    lineStyle: {
                        color: 'auto',
                        width:3
                    }
                },
                pointer : {
                    width : 5
                },
                detail: { 
                    formatter: '{value}',
                    textStyle:{
                        fontSize:12
                    }
                }
            }
        ]
    };

    ModalRealtimeGauge.prototype.renderModal = function () {

    },

    ModalRealtimeGauge.prototype.updateModal = function (points) {
        if(points.length < 1) return;
        var _this = this;

        var scaleList = [];
        for (var i = 0 ; i < _this.entityOption.scaleList.length; i++){
            scaleList.push(_this.entityOption.scaleList[i]);
        }
        var colorList = ['#1abc9c','#3598db','#e84c3d'];

        if(scaleList[scaleList.length-1] < scaleList[0]){
            scaleList.reverse();
            colorList = ['#e84c3d','#3598db','#1abc9c'];
        }
        this.optionDefault.series[0].max = scaleList[scaleList.length-1];
        this.optionDefault.series[0].min = scaleList[0];
        this.optionDefault.series[0].data = [{value: parseFloat(points[0].data).toFixed(2)}];

        this.optionDefault.series[0].axisLine.lineStyle.color = function(option){
            var arr = [], colorIndex =0;
            for(var i = 0; i < option.length; i++){
                if(i == 0){
                    continue;
                }
                arr.push([((option[i] - option[0])/(_this.optionDefault.series[0].max - _this.optionDefault.series[0].min)).toFixed(3),colorList[colorIndex]]);
                colorIndex ++;
            }
            return arr;
        }(scaleList);

        !this.chart && (this.chart = echarts.init(this.container, AppConfig.chartTheme));
        this.chart.setOption(this.optionDefault);
    },

    ModalRealtimeGauge.prototype.showConfigMode = function () {

    },

    ModalRealtimeGauge.prototype.setModalOption = function (option) {
        this.entity.modal.option = {};
        this.entity.modal.option.scaleList = option.scaleList;
        this.entity.modal.interval = 5;
    };

    return ModalRealtimeGauge;
})();
/*实时仪表盘 start */

function tofixed(str, accuracy){
    if(!accuracy) accuracy = 2;
    return parseFloat(str).toFixed(accuracy);
}
var ModalHistoryChart = (function () {
    function ModalHistoryChart(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        this.m_bIsGoBackTrace = false;
        this.m_traceData = undefined;
        ModalChart.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);
    };

    ModalHistoryChart.prototype = new ModalChart();
    ModalHistoryChart.prototype.optionTemplate = {
        name:'toolBox.modal.HIS_CHART',//'ModalHistoryChart',        parent:1,
        parent:1,
        mode:['easyHistory'],
        maxNum: 5,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalHistoryChart'
    };

    ModalHistoryChart.prototype.optionDefault = {
        tooltip: {
            trigger: 'axis'
        },
        toolbox: {
            show: false,
            feature: {
                dataView : {show: false, readOnly: true},
                magicType : {show: true, type: ['line', 'bar']},
                restore : {show: true},
                saveAsImage : {show: true}
            }
        },
        calculable: false,
        dataZoom: {
            show: true
        },
        grid: (function(){//统一配置grid
            var grid = {
                    borderWidth: 0,
                    borderColor: '#eee',
                    left:50,
                    bottom:40,
                    right:40,
                    top:40
                }
            if(AppConfig.isMobile){
                grid.x = 40;
            }
            return grid;
        }()),
        xAxis: [
            {
                type: 'time',
                splitLine: {show : false},
                axisLine:{
                    show:true,
                    lineStyle:{
                        color:'#72647a'
                    }
                }
            }
        ],
        yAxis: [
            {
                type: 'value',
                splitArea: {show : false},
                splitLine: {
                    show:true,
                    lineStyle:{
                        color:'#72647a'
                    }
                },
                axisLine:{
                    show:true,
                    lineStyle:{
                        color:'#72647a'
                    }
                },
                axisLabel : {
                    formatter: function (value){
                        if(AppConfig.isMobile && value/1000 >= 1){
                            return value/1000 + 'k';
                        }else{
                            return value;
                        }
                    }
                }
            }
        ],
        animation: true
    };

    ModalHistoryChart.prototype.renderModal = function () {
        !this.chart && (this.chart = echarts.init(this.container, AppConfig.chartTheme));
        var _this = this;
        if (!_this.m_bIsGoBackTrace) {
            _this.optionDefault.animation = true;
        }
        this.getData().done(function (dataSrc) {
            if(_this.screen.store){
                if(_this.screen.store.model){//在page頁面作為htmlDashboard控件才有
                    if(_this.screen.store.model.option().bg === "whiteBg"){
                        _this.optionDefault.tooltip = {
                                trigger: 'axis',
                                backgroundColor: 'rgba(0,0,0,0.7)',
                                textStyle:{
                                    color:"#ffffff"
                                }
                            }
                    }else{
                        _this.optionDefault.tooltip = {
                            trigger: 'axis',
                            backgroundColor: 'rgba(255,255,255,0.9)',
                            textStyle:{
                                color:"#000000"
                            }
                        }
                    }
                }
            }
            
            if (!dataSrc || !dataSrc.list[0].data || !dataSrc.timeShaft || dataSrc.timeShaft.length <= 0) {
                return;
            }
            var option = _this.initOption(dataSrc);
            if (undefined == option || undefined == option.series[0].data || 0 == option.series[0].data.length) {
                return;
            }
            if(AppConfig.isMobile){
                if(option.xAxis){
                    option.xAxis[0].axisLabel={
                        textStyle:{
                            color:'#e2dfe4'
                        }
                    };
                }else{
                    option.xAxis = [{
                        axisLabel:{
                            textStyle:{
                                color:'#e2dfe4'
                            }
                        }
                    }]
                }
                option.axisLabel = {
                    textStyle:{
                        color:'#e2dfe4'
                    }
                };
                var yAxisList = option.yAxis;
                if(yAxisList) {
                    for (var i = 0; i < yAxisList.length; i++) {
                        yAxisList[i].axisLabel = {
                            textStyle: {
                                color: '#e2dfe4'
                            }
                        };
                    }
                }else{
                    option.yAxis = [{
                        axisLabel:{
                            textStyle:{
                                color:'#e2dfe4'
                            }
                        }
                    }]
                }
            }
            var optionTemp = {};
            $.extend(true,optionTemp,_this.optionDefault);
            _this.chart.clear();
            _this.chart.setOption($.extend(true, {}, optionTemp, option));
        }).error(function (e) {
        }).always(function (e) {
            _this.spinner && _this.spinner.stop();
        });
    },

    ModalHistoryChart.prototype.updateModal = function (options) {
    },
   
    ModalHistoryChart.prototype.showConfigMode = function () {
    },

    ModalHistoryChart.prototype.goBackTrace = function (data) {
        this.m_bIsGoBackTrace = true;
        this.m_traceData = data;
        this.renderModal();
        this.m_bIsGoBackTrace = false;
    }

    ModalHistoryChart.prototype.resize = function(){
        this.chart && this.chart.resize();
    }

    return ModalHistoryChart;
})();


// 历史柱状图-周/月/年
var ModalHistoryChartNormal = (function () {
    var m_color = ['#e74a37','#ff8050','#1abd9b','#3499da','#3e72ac'];
    var m_colorLen = m_color.length;

    function ModalHistoryChartNormal(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if(!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        ModalHistoryChart.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);
        this.spinner && this.spinner.spin(this.container);
        //兼容老数据
        !this.entity.modal.option && (this.entity.modal.option = {});
        !this.entity.modal.option.mode && (this.entity.modal.option.mode = 0);
        !this.entity.modal.option.recentTime && (this.entity.modal.option.recentTime = 'today');
        !this.entity.modal.option.format && (this.entity.modal.option.format = 'h1');
    };

    ModalHistoryChartNormal.prototype = new ModalHistoryChart();

    ModalHistoryChartNormal.prototype.optionTemplate = {
        name: 'toolBox.modal.HIS_CHART_ENERGY_LINE',
        parent:1,
        mode:['easyHistorySelect'],
        maxNum: 5,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalHistoryChartNormal',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    }

    ModalHistoryChartNormal.prototype.initOption = function(dataSrc){
        if (!dataSrc || !dataSrc.list[0].data) {
            return;
        }

        var xLen = dataSrc.timeShaft.length;
        var xAxis, format;
        var arrXAxis = [];
        if ('month' == this.entity.modal.option.timeType || this.entity.modal.option.format === 'd1') {
            format = "MM-dd"
        }
        else if ('week' == this.entity.modal.option.timeType) {
            format = "yyyy-MM-dd";
        }
        else if ('day' == this.entity.modal.option.timeType  || this.entity.modal.option.format === 'h1') {
            format = "MM-dd HH:00";
        }else if(this.entity.modal.option.format === 'm5'){
            format = "MM-dd HH:mm";
        }else if(this.entity.modal.option.format === 'M1'){
            format = "yyyy-MM";
        }

        for (var i=0; i<xLen; i++) {
            arrXAxis.push(dataSrc.timeShaft[i].toDate().format(format));
        }

        xAxis = [
            {
                type : 'category',
                axisLine:{
                show:true,
                lineStyle:{
                    color:'#4E5D77'
                }
            },
                data : arrXAxis
            }
        ]

        var dataName = this.initPointAlias(dataSrc.list);
        var arrSeries = [];

        var showColor = '#1abd9b';
        for (var i = 0; i < dataSrc.list.length; i++) {
            if (dataSrc.list.length > 1) {  // compatible design picture
                showColor = m_color[i % m_colorLen];
            }

            arrSeries.push(
                {
                    name: dataName[i],
                    type: this.entity.modal.option.showType,
                    data: dataSrc.list[i].data,
                    itemStyle: {
                        normal: {
                            //color: showColor,
                            //barBorderRadius: [5, 5, 0, 0]
                        },
                        emphasis: {
                            //color: showColor,
                            //barBorderRadius: [5, 5, 0, 0]
                        }
                    }
                }
            );
        }

        var dataOption = {
            title : {
                text: '',
                subtext: ''
            },
            legend: {
                data: dataName,
                icon: 'circle',
                itemWidth:20,
                itemHeight:10,
                left: 'center',
                top: '10'//单位px
            },
            dataZoom: {
                show: false
            },
            xAxis : xAxis,
            yAxis:{
                axisLine:{
                    show:false
                }
            },
            series : arrSeries
        };
        if(AppConfig.isMobile){
            dataOption.itemStyle = {
               normal:{
                   color:new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                      offset: 0, color: 'rgba(248,187,146,0.8)' // 0% 处的颜色
                    }, {
                      offset: 1, color: 'rgba(190,101,201,0.8)' // 100% 处的颜色10
                    }], false),
                   barBorderRadius: 0
               }
           };
        }
        return dataOption;
    };

    ModalHistoryChartNormal.prototype.setModalOption = function (option) {
        this.entity.modal.option = {};
        this.entity.modal.option.showType = option.showType;
        this.entity.modal.option.timeType = option.timeType;
    };

    ModalHistoryChartNormal.prototype.modalInit = function(){
        !this.entity.modal.option && (this.entity.modal.option = {});
        var _this = this;
        var configModalOpt = {
                "header" : {
                "needBtnClose" : true,
                "title" : "配置"
            },
            "area" : [
                {
                    module:'timeConfig',
                    data:{
                        mode: this.entity.modal.option.mode,
                        format: this.entity.modal.option.format,
                        recentTime: this.entity.modal.option.recentTime,
                        val: this.entity.modal.option.val,
                        unit: this.entity.modal.option.unit,
                        startTime: this.entity.modal.option.startTime,
                        endTime: this.entity.modal.option.endTime
                    }
                },
                {
                    "type": 'option',
                    "widget":[{id:'selChartType',type:'select',name:'图表类型',
                        opt:{
                            option:[
                                {val: 'bar', name: '柱图'},
                                {val: 'line', name: '折线图'}
                            ]
                        },
                        data:{val: this.entity.modal.option.showType}
                    }]
                },
                {
                    "module" : "dsDrag",
                    "data":[{
                        type:'point',name:'数据点位',data: this.entity.modal.points ? (this.entity.modal.points[0] instanceof Array ? this.entity.modal.points[0] : this.entity.modal.points) : [],forChart:false//为了兼容data数据
                    }]
                },{
                    'type':'footer',
                    "widget":[{type:'confirm',opt:{needClose:true}},{type:'cancel'}]
                },
            ],
            result:{func: function(data){
                !_this.entity.modal.option && (_this.entity.modal.option = {});
                _this.entity.modal.option.mode = data.mode;
                _this.entity.modal.option.format = data.format;
                if(data.mode === '1'){
                    _this.entity.modal.option.startTime = data.startTime;
                    _this.entity.modal.option.endTime = data.endTime;
                }else if(data.mode === '2'){
                    _this.entity.modal.option.unit = data.unit;
                    _this.entity.modal.option.val = data.val;
                }
                _this.entity.modal.option.showType = data.selChartType.val;
                _this.entity.modal.option.recentTime = data.recentTime;

                _this.entity.modal.points = data.points[0];
                _this.renderModal();
            }}
        };
        this.configModal = new ConfigModal(configModalOpt, this.screen.container ? this.screen.container : this.screen.page.painterCtn);
        this.configModal.init();
        this.configModal.show();
    };

    return ModalHistoryChartNormal;
})();


// 历史能耗图-周/月/年
var ModalHistoryChartEnergyConsume = (function () {
    function ModalHistoryChartEnergyConsume(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if(!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        ModalHistoryChart.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);
        this.spinner && this.spinner.spin(this.container);
        //兼容老数据
        !this.entity.modal.option && (this.entity.modal.option = {});
        !this.entity.modal.option.mode && (this.entity.modal.option.mode = 0);
        !this.entity.modal.option.recentTime && (this.entity.modal.option.recentTime = 'today');
        !this.entity.modal.option.format && (this.entity.modal.option.format = 'h1');
    };

    ModalHistoryChartEnergyConsume.prototype = new ModalHistoryChart();

    ModalHistoryChartEnergyConsume.prototype.optionTemplate = {
        name:'toolBox.modal.HIS_CHART_ENERGY_BAR',
        parent:1,
        mode:['easyHistory'],
        maxNum: 5,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalHistoryChartEnergyConsume',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    }

    ModalHistoryChartEnergyConsume.prototype.initOption = function(dataSrc){
        if (!dataSrc || !dataSrc.list || !dataSrc.list[0]) {
            return;
        }

        var xLen = dataSrc.timeShaft.length;
        /*var xAxis;
        var arrXAxis = [];
        var showColor;
        if ('week' == this.entity.modal.option.timeType) {
            for (var i=0; i<xLen -1; i++) {
                var dayNum = dataSrc.timeShaft[i].toDate().getDay();
                arrXAxis.push(i18n_resource.dataSource.WEEK[dayNum]);
            }
            showColor = '#3499da';
        }
        else if ('month' == this.entity.modal.option.timeType) {
            for (var i=0; i<xLen - 1; i++) {
                arrXAxis.push(dataSrc.timeShaft[i].toDate().format('MM-dd'));
            }
            showColor = m_color[0];
        }
        else if ('year' == this.entity.modal.option.timeType) {
            for (var i=0; i<xLen - 1; i++) {
                var monthNum = dataSrc.timeShaft[i].toDate().getMonth();
                arrXAxis.push(i18n_resource.dataSource.MONTH[monthNum]);
            }
            showColor = '#3e72ac';
        }
        else if ('day' == this.entity.modal.option.timeType || 'today' === this.entity.modal.option.timeType) {
            for (var i=0; i<xLen - 1; i++) {
                arrXAxis.push(dataSrc.timeShaft[i].toDate().format('MM-dd HH:00'));
            }
            showColor = '#3e72ac';
        }*/

        var xAxis, format;
        var arrXAxis = [];
        if ('month' == this.entity.modal.option.timeType || this.entity.modal.option.format === 'd1') {
            format = "MM-dd"
        }
        else if ('week' == this.entity.modal.option.timeType) {
            format = "yyyy-MM-dd";
        }
        else if ('day' == this.entity.modal.option.timeType  || this.entity.modal.option.format === 'h1') {
            format = "MM-dd HH:00";
        }else if(this.entity.modal.option.format === 'm5'){
            format = "MM-dd HH:mm";
        }else if(this.entity.modal.option.format === 'M1'){
            format = "yyyy-MM";
        }
        for (var i=0; i<xLen; i++) {
            arrXAxis.push(dataSrc.timeShaft[i].toDate().format(format));
        }

        xAxis = [
            {
                type : 'category',
                data : arrXAxis
            }
        ]

        var dataName = this.initPointAlias(dataSrc.list);
        var arrSeries = [];
        for (var i = 0; i < dataSrc.list.length; i++) {
            if (dataSrc.list.length > 1) {  // compatible design picture
                //showColor = m_color[i % m_colorLen];
            }

            var arrData = [];
            var hisLen = dataSrc.list[0].data.length;
            var defVal;
            var fixNum = 0;
            for (var j=1; j<hisLen; j++) {
                var preVal = dataSrc.list[0].data[j-1];
                if (0 == preVal) {
                    arrData.push(0);
                    continue;
                }
                defVal = dataSrc.list[0].data[j] - preVal;
                if (defVal < 100) {
                    fixNum = 2;
                }
                else {
                    fixNum = 0;
                }
                arrData.push(parseFloat(defVal.toFixed(fixNum)));
            }

            arrSeries.push(
                {
                    name: dataName[i],
                    type: this.entity.modal.option.showType,
                    data: arrData,
                    itemStyle: {
                        normal: {
                            //color: showColor,
                            barBorderRadius: [5, 5, 5, 5]
                        },
                        emphasis: {
                            //color: showColor,
                            barBorderRadius: [5, 5, 5, 5]
                        }
                    }
                }
            );

            i++;
        }

        var dataOption = {
            title : {
                text: '',
                subtext: ''
            },
            legend: {
                show: true,
                data: dataName,
                icon: 'circle',
                itemWidth:20,
                itemHeight:10,
                left: 'center',
                top: '10'
            },
            dataZoom: {
                show: false
            },
            xAxis : xAxis,
            series : arrSeries
        };

        return dataOption;
    };

    ModalHistoryChartEnergyConsume.prototype.setModalOption = function (option) {
        this.entity.modal.option = {};
        this.entity.modal.option.showType = 'bar';
        this.entity.modal.option.timeType = option.timeType;
    };

    ModalHistoryChartEnergyConsume.prototype.modalInit = function(){
        !this.entity.modal.option && (this.entity.modal.option = {})
        var _this = this;
        var configModalOpt = {
                "header" : {
                "needBtnClose" : true,
                "title" : "配置"
            },
            "area" : [
                {
                    module:'timeConfig',
                    data:{
                        mode: this.entity.modal.option.mode,
                        format: this.entity.modal.option.format,
                        recentTime: this.entity.modal.option.recentTime,
                        val: this.entity.modal.option.val,
                        unit: this.entity.modal.option.unit,
                        startTime: this.entity.modal.option.startTime,
                        endTime: this.entity.modal.option.endTime
                    }
                },
                {
                    "module" : "dsDrag",
                    "data":[{
                        type:'point',name:'数据点位',data: this.entity.modal.points ? (this.entity.modal.points[0] instanceof Array ? this.entity.modal.points[0] : this.entity.modal.points) : [],forChart:false
                    }]
                },{
                    'type':'footer',
                    "widget":[{type:'confirm',opt:{needClose:true}},{type:'cancel'}]
                },
            ],
            result:{func: function(data){
                !_this.entity.modal.option && (_this.entity.modal.option = {});
                _this.entity.modal.option.mode = data.mode;
                _this.entity.modal.option.format = data.format;
                if(data.mode === '1'){
                    _this.entity.modal.option.startTime = data.startTime;
                    _this.entity.modal.option.endTime = data.endTime;
                }else if(data.mode === '2'){
                    _this.entity.modal.option.unit = data.unit;
                    _this.entity.modal.option.val = data.val;
                }
                _this.entity.modal.option.recentTime = data.recentTime;
                _this.entity.modal.option.showType = 'bar';
                _this.entity.modal.points = data.points[0];
                _this.renderModal();
            }}
        };
        this.configModal = new ConfigModal(configModalOpt, this.screen.container ? this.screen.container : this.screen.page.painterCtn);
        this.configModal.init();
        this.configModal.show();
    };

    return ModalHistoryChartEnergyConsume;
})();


// 历史同比折线图
var ModalHistoryChartYearOnYearLine = (function () {
    var _this;
    function ModalHistoryChartYearOnYearLine(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigModal = _showConfigMode ? _showConfigMode : this.showConfigMode;
        ModalHistoryChart.call(this, screen, entityParams, renderModal, updateModal, showConfigModal);

        this.option = entityParams.option;
        this.spinner && this.spinner.spin(this.container);
        this.store = {};
        this.pointAlias = this.entity.modal.points?AppConfig.datasource.getDSItemById(this.entity.modal.points[0]).alias:'';
        this.m_bIsGoBackTrace = false;
        this.m_traceData = undefined;
        _this = this;

        //兼容老数据
        !this.entity.modal.option && (this.entity.modal.option = {});
        !this.entity.modal.option.mode && (this.entity.modal.option.mode = 0);
        !this.entity.modal.option.recentTime && (this.entity.modal.option.recentTime = 'today');
        !this.entity.modal.option.format && (this.entity.modal.option.format = 'h1');
    };

    ModalHistoryChartYearOnYearLine.prototype = new ModalHistoryChart();

    ModalHistoryChartYearOnYearLine.prototype.optionTemplate = {
        name:'toolBox.modal.HIS_CHART_YEAR_LINE',
        parent:1,
        mode:['easyCompareToggle'],
        maxNum: 1,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalHistoryChartYearOnYearLine',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }

    };

    ModalHistoryChartYearOnYearLine.prototype.optionDefault = {
        tooltip: {
            trigger: 'axis',
            formatter: function (params) {
                var tar0 = params[0];
                var tar1 = params[1];
                var pointAlias = _this.pointAlias;
                return pointAlias + ' : ' + tar0.name + '<br/>' + tar0.seriesName + ' : ' + tar0.value + '<br/>'
                     + tar1.seriesName + ' : ' + tar1.value;
            }
        },
        toolbox: {
            show: false,
            feature: {
                dataView : {show: false, readOnly: true},
                magicType : {show: true, type: ['line', 'bar']},
                restore : {show: true},
                saveAsImage : {show: true}
            }
        },
        calculable: false,
        dataZoom: {
            show: false
        },
        color:['#E2583A','#FD9F08','#FEC500','#1D74A9','#04A0D6','#689C0F','#109d83'],
        /*grid: {
            x: 70, y: 38, x2: 30, y2: 24
        },*/
        xAxis: [
            {
                type: 'time',
                splitLine: {show : false}
            }
        ],
        yAxis: [
            {
                type: 'value',
                splitArea: {show : false}
            }
        ],
        animation: true //TODO: the time is too short between rendering and updating.
    };

    ModalHistoryChartYearOnYearLine.prototype.renderModal = function () {
        var _this = this;
        !this.chart && (this.chart = echarts.init(this.container, AppConfig.chartTheme));
        var hourMilSec = 3600000;
        var dayMilSec = 86400000;

        var startDate = new Date();
        var endDate = new Date();
        var tmFlag = new Date();
        var timeType = _this.entity.modal.option.format ? _this.entity.modal.option.format : 'h1';

        if ('hour' == _this.entity.modal.option.timeType || 'm5' === timeType) {
            //timeType = 'm5';
            startDate.setTime(endDate.getTime() - hourMilSec);
            startDate.setMinutes(0);
            startDate.setSeconds(0);

            tmFlag.setTime(endDate.getTime());
            tmFlag.setMinutes(0);
            tmFlag.setSeconds(0);
            tmFlag.setMilliseconds(0);
        }else if ('day' == _this.entity.modal.option.timeType || 'h1' == timeType) {
            //timeType = 'h1';
            startDate.setTime(endDate.getTime() - dayMilSec);
            startDate.setHours(0);
            startDate.setMinutes(0);
            startDate.setSeconds(0);

            tmFlag.setTime(endDate.getTime());
            tmFlag.setHours(0);
            tmFlag.setMinutes(0);
            tmFlag.setSeconds(0);
            tmFlag.setMilliseconds(0);
        }
        else {
            return;
        }

        var curDate, startTime, endTime;
        if (!_this.m_bIsGoBackTrace) {  // normal show history data
            startTime = startDate.format('yyyy-MM-dd 00:00:00');
            endTime = endDate.format('yyyy-MM-dd HH:mm:ss');
            _this.optionDefault.animation = true;
        }
        else {  // for history data trace
            curDate = _this.m_traceData.currentTime;
            _this.optionDefault.animation = false;
            if ('hour' == _this.entity.modal.option.timeType) {
                timeType = 'm5';
                startDate.setTime(curDate.getTime() - hourMilSec);
                startDate.setMinutes(0);
                startDate.setSeconds(0);

                tmFlag.setTime(curDate.getTime());
                tmFlag.setMinutes(0);
                tmFlag.setSeconds(0);
                tmFlag.setMilliseconds(0);
            }
            else if ('day' == _this.entity.modal.option.timeType) {
                timeType = 'h1';
                startDate.setTime(curDate.getTime() - dayMilSec);
                startDate.setHours(0);
                startDate.setMinutes(0);
                startDate.setSeconds(0);

                tmFlag.setTime(curDate.getTime());
                tmFlag.setHours(0);
                tmFlag.setMinutes(0);
                tmFlag.setSeconds(0);
                tmFlag.setMilliseconds(0);
            }
            else {
                return;
            }
            startTime = startDate.format('yyyy-MM-dd HH:mm:ss');
            endTime = curDate.format('yyyy-MM-dd HH:mm:ss');
        }
        if(_this.screen.store){
            if(_this.screen.store.model){//在page頁面作為htmlDashboard控件才有
                if(_this.screen.store.model.option().bg === "whiteBg"){
                    _this.optionDefault.tooltip = {
                            trigger: 'axis',
                            backgroundColor: 'rgba(0,0,0,0.7)',
                            textStyle:{
                                color:"#ffffff"
                            }
                        }
                }else{
                    _this.optionDefault.tooltip = {
                        trigger: 'axis',
                        backgroundColor: 'rgba(255,255,255,0.9)',
                        textStyle:{
                            color:"#000000"
                        }
                    }
                }
            }
        }
        this.getData({startTime: startTime, endTime: endTime, timeFormat: timeType}).done(function (dataSrc) {
            if (!dataSrc || !dataSrc.list || !dataSrc.list[0] || !dataSrc.list[0].data || !dataSrc.timeShaft || dataSrc.timeShaft.length <= 0) {
                return;
            }
            var arrXAxis = [];
            var flagCount = 0;
            var len = dataSrc.timeShaft.length;
            tmFlag = tmFlag.format('yyyy-MM-dd HH:mm:ss');
            for (flagCount = 0; flagCount < len; flagCount++) {
                if (dataSrc.timeShaft[flagCount] >= tmFlag) {
                    break;
                }
            }
            _this.store.timeShaft = dataSrc.timeShaft.slice(0, flagCount);
            _this.store.deadline = dataSrc.timeShaft[flagCount - 1].toDate().valueOf();

            var fixNum = 0;
            var setVal;
            var dataName = [];
            var arrSeries = [];

            for (var k = 0, lenK = Math.min(flagCount, dataSrc.timeShaft.length); k < lenK; k++) {
                arrXAxis.push(dataSrc.timeShaft[k].toDate().format("HH:mm"));
            }
            var chartType = _this.entity.modal.option.showType?_this.entity.modal.option.showType:'line';

            var currentCount = 0;
            for (var n = 0; n < dataSrc.list.length; n++) {
                var key = dataSrc.list[n].dsItemId;
                var dataSrc1 = [];
                var dataSrc2 = [];
                var eachName = [];

                if (1 == dataSrc.list.length) {
                    dataName.push(I18n.resource.dataSource.TIME_YESTERDAY);
                    dataName.push(I18n.resource.dataSource.TIME_TODAY);
                    eachName.push(I18n.resource.dataSource.TIME_YESTERDAY);
                    eachName.push(I18n.resource.dataSource.TIME_TODAY);
                }
                else {
                    dataName.push(key + '_' + I18n.resource.dataSource.TIME_YESTERDAY);
                    dataName.push(key + '_' + I18n.resource.dataSource.TIME_TODAY);
                    eachName.push(key + '_' + I18n.resource.dataSource.TIME_YESTERDAY);
                    eachName.push(key + '_' + I18n.resource.dataSource.TIME_TODAY);
                }

                for (var j = 0, len = dataSrc.list[n].data.length; j < len; j++) {
                    setVal = dataSrc.list[n].data[j];
                    if (setVal < 100) {
                        fixNum = 2;
                    }
                    else {
                        fixNum = 0;
                    }
                    setVal = parseFloat(setVal.toFixed(fixNum));

                    if (j < flagCount) {
                        dataSrc1.push(setVal);
                    }
                    else {
                        dataSrc2.push(setVal);
                    }
                }

                var showColor;
                var showData;
                var showMark;
                for (var i = 0; i < 2; i++) {
                    if (0 == i) {
                        if (0 == currentCount) {
                            showColor = '#1abd9b';
                        }
                        else {
                            showColor = echarts.config.color[currentCount * 2];
                        }
                        showData = dataSrc1;
                        showMark = {
                            data : [
                                {type : 'max', name: I18n.resource.dashboard.modalHistoryChart.MAXIMUM},
                                {type : 'min', name: I18n.resource.dashboard.modalHistoryChart.MINIMUM}
                            ]
                        }
                    }
                    else if (1 == i) {
                        if (0 == currentCount) {
                            showColor = '#e74a37';
                        }
                        else {
                            showColor = echarts.config.color[currentCount * 2 + 1];
                        }
                        showData = dataSrc2;
                        var lastCntX = dataSrc2.length - 1;
                        var lastCntY = Number(dataSrc2[lastCntX]);
                        showMark = {
                            symbol : 'emptyCircle',
                            symbolSize : 10,
                            effect : {
                                show : true,
                                shadowBlur : 0
                            },
                            itemStyle : {
                                normal : {
                                    label : {
                                        show:false
                                    }
                                },
                                emphasis : {
                                    label : {
                                        position : 'top'
                                    }
                                }
                            },
                            data : [
                                {name : '', value : lastCntY, xAxis: lastCntX, yAxis: lastCntY}
                            ]
                        }
                    }

                    arrSeries.push(
                        {
                            name: eachName[i],
                            type: chartType,
                            data: showData,
                            itemStyle: {
                                normal: {
                                    color: showColor,
                                    barBorderRadius: [5, 5, 0, 0]
                                },
                                emphasis: {
                                    color: showColor,
                                    barBorderRadius: [5, 5, 0, 0]
                                }
                            },
                            symbolSize: 3
                        }
                    );
                    if (i === 1) {
                        arrSeries[1].symbol = 'rect';
                        var blingDot = $.extend(true, {}, arrSeries[1]);
                        var seriesOne = arrSeries[1];
                        seriesOne.type = 'effectScatter';
                        seriesOne.symbolSize = 10;
                        seriesOne.symbol = 'circle'
                        seriesOne.rippleEffect = {
                            brushType: 'stroke'
                        };
                        seriesOne.itemStyle.normal.shadowBlur = 10;
                        var blingDotData = $.extend(true, {}, showData);
                        for (var p = 0, lens = showData.length; p < lens; p++) {
                            if (p < lens - 1) {
                                showData[p] = '-';
                            }
                        }
                        //seriesOne.markLine = {
                        //    data: blingDotData
                        //}
                        var blingDotDataArr = [];
                        for (var item in blingDotData) {
                            blingDotDataArr.push(blingDotData[item]);
                        }
                        blingDot.data = showData;
                        arrSeries[1] = blingDot;
                        arrSeries[1].data = blingDotDataArr;
                        arrSeries.push(seriesOne);
                    }
                    showColor = '';
                }
                currentCount++;
            }

            var xAxis = [
                {
                    type : 'category',
                    boundaryGap : false,
                    data : arrXAxis
                }
            ]

            var option = {
                title : {
                    text: '',
                    subtext: ''
                },
                dataZoom: {
                    show: false
                },
                legend: {
                    data: dataName,
                    icon: 'circle',
                    itemWidth:20,
                    itemHeight:10,
                    left: 'center',
                    top: '10'
                },
                xAxis : xAxis,
                series : arrSeries
            };
            var optionTemp = {};
            $.extend(true,optionTemp,_this.optionDefault);
            if (_this.entity.modal.dsChartCog){
                if(_this.entity.modal.dsChartCog[0].upper != ''){
                    optionTemp.yAxis[0].max = Number(_this.entity.modal.dsChartCog[0].upper);
                }
                if(_this.entity.modal.dsChartCog[0].lower != ''){
                    optionTemp.yAxis[0].min = Number(_this.entity.modal.dsChartCog[0].lower);
                }
                if(_this.entity.modal.dsChartCog[0].unit != ''){
                    optionTemp.yAxis[0].name = _this.entity.modal.dsChartCog[0].unit;
                }
                if(_this.entity.modal.dsChartCog[0].accuracy != ''){
                    var n = Number(_this.entity.modal.dsChartCog[0].accuracy);
                    for (var i = 0; i < option.series.length; i++){
                        for (var j = 0; j < option.series[i].data.length; j++){
                            option.series[i].data[j] = option.series[i].data[j].toFixed(n);
                        }
                    }
                }
                var tempMarkLine;
                for(var k = 0;k < 4; k++){
                    if (_this.entity.modal.dsChartCog[0].markLine[k].value != ''){
                        if(!option.series[0].markLine){
                            option.series[0].markLine = {
                                data:[],
                                symbol: 'none',
                                itemStyle:{
                                    normal:{
                                        label: {
                                            show: false
                                        }
                                    }
                                }
                            }
                        }
                        tempMarkLine =[
                                        {
                                            name:_this.entity.modal.dsChartCog[0].markLine[k].name,
                                            value:_this.entity.modal.dsChartCog[0].markLine[k].value,
                                            xAxis: -1,
                                            yAxis:Number(_this.entity.modal.dsChartCog[0].markLine[k].value)
                                        },
                                        {
                                            //xAxis:option.series[0].data.length,
                                            xAxis:dataSrc.timeShaft.length,
                                            yAxis:Number(_this.entity.modal.dsChartCog[0].markLine[k].value)
                                        }
                                    ];
                        option.series[0].markLine.data.push(tempMarkLine);
                    }
                }
            }
            _this.chart.clear();
            _this.chart.setOption($.extend(true, {}, optionTemp, option));
        }).error(function (e) {

        }).always(function (e) {
            _this.spinner && _this.spinner.stop();
        });
    },

    ModalHistoryChartYearOnYearLine.prototype.updateModal = function (options) {
        var _this = this;
        var modalOptions = this.entity.modal.option;
        var lastIndex, lastTick, nowTick;
        if (undefined === options || options.length < 1 || undefined === options[0]) {
            return;
        }
        //lastIndex = this.chart.getSeries()[1].data.length - 1;
        lastIndex = this.chart.getOption().series[1].data.length - 1;
        lastTick = this.store.timeShaft[lastIndex].toDate().valueOf();
        nowTick = new Date().valueOf();

        // 达到时间上限时不再更新
        if (lastTick === undefined) return;
        // 新增刷新间隔需求
        if ('hour' === modalOptions.timeType) {
            // 因为当前的lastTick是上一时间段的，需要转变成现有时间段
            lastTick += 3600000; //60*60*1000
            refreshInterval = 300000; // 5*60*1000
        }
        if ('day' === modalOptions.timeType) {
            lastTick += 86400000; // 24*60*60*1000
            refreshInterval = 3600000; // 60*60*1000
        }
        else {
            return;
        }

        // 未到刷新时间，则不做任何处理
        if( nowTick < lastTick + refreshInterval) return;

        var opt = _this.chart.getOption();
        for (var i = 0, len = options.length; i < len; i++) {
            if (options[i].data !== null) {
                /*addParam.push([
                    1,
                    options[i].data,
                    false,
                    true
                ]);*/
                opt.series[1].data.push(options[i].data);//series[1]是今天
            }
        }
        //_this.chart.addData(addParam);
        //新版本的chart没有addData方法,只好setOption
        _this.chart.setOption(opt);

        // markPoint
        //_this.chart.delMarkPoint(1, '');

        var dataSeries = _this.chart.getOption().series;
        if (dataSeries.length < 2) {
            return;
        }

        var temp = dataSeries[1].data;
        var lastCntX = temp.length - 1;
        var lastCntY = Number(temp[lastCntX]);

        var showMark = {
            symbol : 'emptyCircle',
            symbolSize : 10,
            effect : {
                show : true,
                shadowBlur : 0
            },
            itemStyle : {
                normal : {
                    label : {
                        show:false
                    }
                },
                emphasis : {
                    label : {
                        position : 'top'
                    }
                }
            },
            data : [
                {name : '', value : lastCntY, xAxis: lastCntX, yAxis: lastCntY}
            ]
        }
        _this.chart.addMarkPoint(1, showMark);
    },

    ModalHistoryChartYearOnYearLine.prototype.showConfigMode = function () {

    },

    ModalHistoryChartYearOnYearLine.prototype.setModalOption = function (option) {
        this.entity.modal.option = {};
        this.entity.modal.option.showType = option.showType?option.showType:'line';
        this.entity.modal.option.timeType = option.timeType;
    };

    ModalHistoryChartYearOnYearLine.prototype.modalInit = function(){
        !this.entity.modal.option && (this.entity.modal.option = {});
        var _this = this;
        var configModalOpt = {
                "header" : {
                "needBtnClose" : true,
                "title" : "配置"
            },
            "area" : [
                {
                    module:'timeConfig',
                    data:{
                        mode: '0',
                        format: 'h1',
                        recentTime: 'yesterday'
                    }
                },
                {
                    "type": 'option',
                    "widget":[{id:'selChartType',type:'select',name:'图表类型',
                        opt:{
                            option:[
                                {val: 'bar', name: '柱图'},
                                {val: 'line', name: '折线图'}
                            ]
                        },
                        data:{val: this.entity.modal.option.showType}
                    }]
                },
                {
                    "module" : "dsDrag",
                    "data":[{
                        type:'point',name:'数据点位',data: this.entity.modal.points ? (this.entity.modal.points[0] instanceof Array ? this.entity.modal.points[0] : this.entity.modal.points) : [],forChart:false
                    }]
                },{
                    'type':'footer',
                    "widget":[{type:'confirm',opt:{needClose:true}},{type:'cancel'}]
                },
            ],
            result:{func: function(data){
                !_this.entity.modal.option && (_this.entity.modal.option = {});
                _this.entity.modal.option.mode = 0;
                _this.entity.modal.option.format = 'h1';

                _this.entity.modal.option.showType = data.selChartType.val;
                _this.entity.modal.option.recentTime = 'yesterday';

                _this.entity.modal.points = data.points[0];
                _this.renderModal();
            }}
        };
        this.configModal = new ConfigModal(configModalOpt, this.screen.container ? this.screen.container : this.screen.page.painterCtn);
        this.configModal.init();
        //模态框特殊处理
        this.configModal.modalBody.querySelector('.divMode select').disabled = true;
        this.configModal.modalBody.querySelector('.divRecentTime select').disabled = true;
        this.configModal.show();
    };

    return ModalHistoryChartYearOnYearLine;
})();


// 历史同比柱状图
var ModalHistoryChartYearOnYearBar = (function () {
    var m_color = ['#e74a37','#ff8050','#1abd9b','#3499da','#3e72ac'];

    function ModalHistoryChartYearOnYearBar(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigModal = _showConfigMode ? _showConfigMode : this.showConfigMode;
        ModalHistoryChart.call(this, screen, entityParams, renderModal, updateModal, showConfigModal);

        this.m_bIsGoBackTrace = false;
        this.m_traceData = undefined;
        this.option = entityParams.option;
        this.spinner && this.spinner.spin(this.container);

        //兼容老数据
        !this.entity.modal.option && (this.entity.modal.option = {});
        !this.entity.modal.option.mode && (this.entity.modal.option.mode = 0);
        !this.entity.modal.option.recentTime && (this.entity.modal.option.recentTime = 'today');
        !this.entity.modal.option.format && (this.entity.modal.option.format = 'h1');
    };

    ModalHistoryChartYearOnYearBar.prototype = new ModalHistoryChart();

    ModalHistoryChartYearOnYearBar.prototype.optionTemplate = {
        name: 'toolBox.modal.HIS_CHART_YEAR_BAR',
        parent:1,
        mode:['easyCompare'],
        maxNum: 1,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalHistoryChartYearOnYearBar',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }

    };

    ModalHistoryChartYearOnYearBar.prototype.optionDefault = {
        tooltip: {
            trigger: 'axis'
        },
        toolbox: {
            show: false,
            feature: {
                dataView : {show: false, readOnly: true},
                magicType : {show: true, type: ['line', 'bar']},
                restore : {show: true},
                saveAsImage : {show: true}
            }
        },
        calculable: false,
        dataZoom: {
            show: false
        },
        /*grid: {
            x: 70, y: 38, x2: 30, y2: 24
        },*/
        xAxis: [
            {
                type: 'category',
                splitLine: {show : false}
            }
        ],
        yAxis: [
            {
                type: 'value',
                splitArea: {show : false}
            }
        ],
        animation: true
    };

    ModalHistoryChartYearOnYearBar.prototype.renderModal = function () {
        var _this = this;
        !this.chart && (this.chart = echarts.init(this.container, AppConfig.chartTheme));

        var dayMilSec = 86400000;
        var startDate = new Date();
        var endDate = new Date();
        var startDateZero = new Date();
        var endDateZero = new Date();
        var timeType = _this.entity.modal.option.format ? _this.entity.modal.option.format : 'h1';
        if ('day' == _this.entity.modal.option.timeType || 'h1' == timeType) {
            startDate.setTime(endDate.getTime() - dayMilSec);
            startDateZero.setTime(startDate.getTime());
            startDateZero.setHours(0);
            startDateZero.setMinutes(0);
            startDateZero.setSeconds(0);

            endDateZero.setTime(endDate.getTime());
            endDateZero.setHours(0);
            endDateZero.setMinutes(0);
            endDateZero.setSeconds(0);
        }
        else {
            return;
        }

        var curDate;
        if (!_this.m_bIsGoBackTrace) {  // normal show history data
            _this.optionDefault.animation = true;
        }
        else {  // for history data trace
            curDate = _this.m_traceData.currentTime;
            _this.optionDefault.animation = false;
            if ('day' == _this.entity.modal.option.timeType) {
                timeType = 'h1';
                startDate.setTime(curDate.getTime() - dayMilSec);

                startDateZero.setTime(startDate.getTime());
                startDateZero.setHours(0);
                startDateZero.setMinutes(0);
                startDateZero.setSeconds(0);

                endDateZero.setTime(curDate.getTime());
                endDateZero.setHours(0);
                endDateZero.setMinutes(0);
                endDateZero.setSeconds(0);
            }
            else {
                return;
            }
        }
        if(_this.screen.store){
            if(_this.screen.store.model){//在page頁面作為htmlDashboard控件才有
                if(_this.screen.store.model.option().bg === "whiteBg"){
                    _this.optionDefault.tooltip = {
                            trigger: 'axis',
                            backgroundColor: 'rgba(0,0,0,0.7)',
                            textStyle:{
                                color:"#ffffff"
                            }
                        }
                }else{
                    _this.optionDefault.tooltip = {
                        trigger: 'axis',
                        backgroundColor: 'rgba(255,255,255,0.9)',
                        textStyle:{
                            color:"#000000"
                        }
                    }
                }
            }
        }
        this.getData({startTime: startDateZero.format('yyyy-MM-dd HH:mm:ss'), endTime: endDate.format('yyyy-MM-dd HH:mm:ss'), timeFormat: timeType}).done(function (dataSrc) {
            if (!dataSrc || !dataSrc.list[0].data || !dataSrc.timeShaft || dataSrc.timeShaft.length <= 0) {
                return;
            }

            var flag1, flag2;
            var len = dataSrc.timeShaft.length;
            for (var i = 0; i < len; i++) {
                if (dataSrc.timeShaft[i].toDate() >= startDate) {
                    flag1 = i;
                    break;
                }
            }
            for (var i = 0; i < len; i++) {
                if (dataSrc.timeShaft[i].toDate() >= endDateZero) {
                    flag2 = i;
                    break;
                }
            }
            var arrVal1 = [];
            var arrVal2 = [];
            var val1 = 0;
            var val2 = 0;
            var fixNum1 = 0;
            var fixNum2 = 0;
            var preVal = 0;
            for (var i = 0; i < dataSrc.list.length; i++) {
                for (var j = 0, len = dataSrc.list[i].data.length; j < len; j++) {
                    if (j == flag1) {
                        preVal = dataSrc.list[i].data[0];
                        if (0 == preVal) {
                            val1 = 0;
                        }
                        else {
                            val1 = dataSrc.list[i].data[j] - preVal;
                        }
                    }
                    else if (j == flag2) {
                        preVal = dataSrc.list[i].data[j];
                        if (0 == preVal) {
                            val2 = 0;
                        }
                        else {
                            val2 = dataSrc.list[i].data[len-1] - preVal;
                        }
                    }
                }
                if (val1 < 100) {
                    fixNum1 = 2;
                }
                else {
                    fixNum1 = 0;
                }
                if (val2 < 100) {
                    fixNum2 = 2;
                }
                else {
                    fixNum2 = 0;
                }
                arrVal1.push(parseFloat(val1.toFixed(fixNum1)));
                arrVal2.push(parseFloat(val2.toFixed(fixNum2)));
                break;
            }
            var tmFlag = new Date();
            var arrXAxis = [];
            tmFlag = tmFlag.format('yyyy-MM-dd HH:mm:ss');
            for (var flagCount = 0; flagCount < len; flagCount++) {
                if (dataSrc.timeShaft[flagCount] >= tmFlag) {
                    break;
                }
            }

            for (var k = 0, lenK = Math.min(flagCount, dataSrc.timeShaft.length); k < lenK; k++) {
                arrXAxis.push(dataSrc.timeShaft[k].toDate().format("HH:mm"));
            }
            var xAxis = [
                {
                    type : 'category',
                    boundaryGap : true,
                    data : arrXAxis
                }
            ];

            var chartType = _this.entity.modal.option.showType?_this.entity.modal.option.showType:'bar';
            var dataName = [];
            dataName.push(I18n.resource.dataSource.TIME_YESTERDAY);
            dataName.push(I18n.resource.dataSource.TIME_TODAY);

            var arrSeries = [
                {
                    name: dataName[0],
                    type: chartType,
                    data: arrVal1,
                    itemStyle: {
                        normal: {
                            color: m_color[2],
                            barBorderRadius: [5, 5, 0, 0]
                        },
                        emphasis: {
                            color: m_color[2],
                            barBorderRadius: [5, 5, 0, 0]
                        }
                    },
                    markPoint : {
                        data : [
                            {type : 'max', name: I18n.resource.dashboard.modalHistoryChart.EnergyConsumption}
                        ]
                    }
                },
                {
                    name: dataName[1],
                    type: chartType,
                    data: arrVal2,
                    itemStyle: {
                        normal: {
                            color: m_color[1],
                            barBorderRadius: [5, 5, 0, 0]
                        },
                        emphasis: {
                            color: m_color[1],
                            barBorderRadius: [5, 5, 0, 0]
                        }
                    },
                    markPoint : {
                        data : [
                            {type : 'max', name: I18n.resource.dashboard.modalHistoryChart.EnergyConsumption}
                        ]
                    }
                },
            ];

            var option = {
                title : {
                    text: '',
                    subtext: ''
                },
                dataZoom: {
                    show: false
                },
                legend: {
                    data: dataName,
                    icon: 'circle',
                    itemWidth:20,
                    itemHeight:10,
                    left: 'center',
                    top: '10'
                },
                xAxis : xAxis,
                series : arrSeries
            };
            var optionTemp = {};
            $.extend(true,optionTemp,_this.optionDefault);
            if (_this.entity.modal.dsChartCog){
                if(_this.entity.modal.dsChartCog[0].upper != ''){
                    optionTemp.yAxis[0].max = Number(_this.entity.modal.dsChartCog[0].upper);
                }
                if(_this.entity.modal.dsChartCog[0].lower != ''){
                    optionTemp.yAxis[0].min = Number(_this.entity.modal.dsChartCog[0].lower);
                }
                if(_this.entity.modal.dsChartCog[0].unit != ''){
                    optionTemp.yAxis[0].name = _this.entity.modal.dsChartCog[0].unit;
                }
                if(_this.entity.modal.dsChartCog[0].accuracy != ''){
                    var n = Number(_this.entity.modal.dsChartCog[0].accuracy);
                    for (var i = 0; i < option.series.length; i++){
                        for (var j = 0; j < option.series[i].data.length; j++){
                            option.series[i].data[j] = option.series[i].data[j].toFixed(n);
                        }
                    }
                }
                var tempMarkLine;
                for(var k = 0;k < 4; k++){
                    if (_this.entity.modal.dsChartCog[0].markLine[k].value != ''){
                        if(!option.series[0].markLine){
                            option.series[0].markLine = {
                                data:[],
                                symbol:'none',
                                itemStyle:{
                                    normal:{
                                        label: {
                                            show: false
                                        }
                                    }
                                }
                            }
                        }
                        tempMarkLine =[
                                        {
                                            name:_this.entity.modal.dsChartCog[0].markLine[k].name,
                                            value:_this.entity.modal.dsChartCog[0].markLine[k].value,
                                            xAxis: -1,
                                            yAxis:Number(_this.entity.modal.dsChartCog[0].markLine[k].value)
                                        },
                                        {
                                            //xAxis:option.series[0].data.length,
                                            xAxis:dataSrc.timeShaft.length,
                                            yAxis:Number(_this.entity.modal.dsChartCog[0].markLine[k].value)
                                        }
                                    ];
                        option.series[0].markLine.data.push(tempMarkLine);
                    }
                }
            }
            _this.chart.clear();
            _this.chart.setOption($.extend(true, {}, optionTemp, option));
        }).error(function (e) {
        }).always(function (e) {
            _this.spinner && _this.spinner.stop();
        });
    },

    ModalHistoryChartYearOnYearBar.prototype.updateModal = function (options) {

    },

    ModalHistoryChartYearOnYearBar.prototype.showConfigMode = function () {

    },

    ModalHistoryChartYearOnYearBar.prototype.setModalOption = function (option) {
        this.entity.modal.option = {};
        this.entity.modal.option.showType = 'bar';
        this.entity.modal.option.timeType = option.timeType;
    };

    ModalHistoryChartYearOnYearBar.prototype.modalInit = function(){
        !this.entity.modal.option && (this.entity.modal.option = {});
        var _this = this;
        var configModalOpt = {
                "header" : {
                "needBtnClose" : true,
                "title" : "配置"
            },
            "area" : [
                {
                    module:'timeConfig',
                    data:{
                        mode: '0',
                        format: 'h1',
                        recentTime: 'yesterday'
                    }
                },
                {
                    "module" : "dsDrag",
                    "data":[{
                        type:'point',name:'数据点位',data: this.entity.modal.points ? (this.entity.modal.points[0] instanceof Array ? this.entity.modal.points[0] : this.entity.modal.points) : [],forChart:false
                    }]
                },{
                    'type':'footer',
                    "widget":[{type:'confirm',opt:{needClose:true}},{type:'cancel'}]
                },
            ],
            result:{func: function(data){
                !_this.entity.modal.option && (_this.entity.modal.option = {});
                _this.entity.modal.option.mode = 0;
                _this.entity.modal.option.format = 'h1';
                _this.entity.modal.option.recentTime = 'yesterday';

                _this.entity.modal.points = data.points[0];
                _this.renderModal();
            }}
        };
        this.configModal = new ConfigModal(configModalOpt, this.screen.container ? this.screen.container : this.screen.page.painterCtn);
        this.configModal.init();
        //模态框特殊处理
        this.configModal.modalBody.querySelector('.divMode select').disabled = true;
        this.configModal.modalBody.querySelector('.divRecentTime select').disabled = true;
        this.configModal.show();
    };

    return ModalHistoryChartYearOnYearBar;
})();

/*拖拽分析历史数据*/
var ModalHistoryDataAnalyze = (function(){
    function ModalHistoryDataAnalyze(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        this.m_bIsGoBackTrace = false;
        this.m_traceData = undefined;
        ModalHistoryChart.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);
        this.store = [];
        !AppConfig.datasource && (AppConfig.datasource = {
            getDSItemById: DataSource.prototype.getDSItemById.bind({
                m_parent: {
                    store: {
                        dsInfoList: []
                    }
                },
                m_arrCloudTableInfo: []
            })
        })

    }
    ModalHistoryDataAnalyze.prototype = new ModalHistoryChart();
    ModalHistoryDataAnalyze.prototype.optionTemplate = {
        name:'toolBox.modal.HIS_CHART_ANALYSE',//'ModalHistoryChart',        parent:1,
        parent:1,
        mode:['easyHistory'],
        maxNum: 5,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalHistoryDataAnalyze',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };
    ModalHistoryDataAnalyze.prototype.renderModal = function(){
        this.container.innerHTML = '\
        <div class="ctnTimeConfig"><div class="divTimeConfig clearfix"></div>\
            <!--<div class="divDataConfig"></div>-->\
            <div class="btnTimeConfigGrp">\
            <div class="divConfigConfirm btn btn-primary" i18n="dashboard.modalHistoryDataAnalyze.DATE_CONFIRM">' + I18n.resource.dashboard.modalHistoryDataAnalyze.DATE_CONFIRM + '</div>\
            <div class="divConfigCancel btn btn-default" i18n="dashboard.modalHistoryDataAnalyze.DATE_CANCEL">'+I18n.resource.dashboard.modalHistoryDataAnalyze.DATE_CANCEL+'</div>\
            </div>\
        </div>\
        <div class="btnShowTimeConfig glyphicon glyphicon-cog"></div>\
        <div class="dragTip" i18n="dashboard.modalHistoryDataAnalyze.DRAG_TIP_FOR_CHART">'+I18n.resource.dashboard.modalHistoryDataAnalyze.DRAG_TIP_FOR_CHART+'</div>\
        <div class="divHistoryChart"></div>\
        ';
        this.container.parentNode.className += ' widgetHistoryAnalyze forDashboard';
        this.ctnTimeConfig = this.container.querySelector('.ctnTimeConfig');
        this.divTimeConfig = this.container.querySelector('.divTimeConfig');
        this.ctnChart = this.container.querySelector('.divHistoryChart');
        this.createTimeConfig();
        this.attachEvent();
        I18n.fillArea($(this.container));
    };
    ModalHistoryDataAnalyze.prototype.createTimeConfig = function(){
        var mode = document.createElement('div');
        //mode.className = 'divTimeMode col-sm-3 col-lg-2';
        mode.className = 'divTimeMode';
        mode.innerHTML = '\
        <label i18n="modalConfig.option.LABEL_MODE">'+I18n.resource.modalConfig.option.LABEL_MODE+'</label>\
        <select class="form-control iptTimeMode">\
            <option value="0" i18n="modalConfig.option.MODE_CURRENT">'+I18n.resource.modalConfig.option.MODE_CURRENT+'</option>\
            <option value="1" i18n="modalConfig.option.MODE_RECENT">'+I18n.resource.modalConfig.option.MODE_RECENT+'</option>\
            <option value="2" i18n="modalConfig.option.MODE_FIXED">'+I18n.resource.modalConfig.option.MODE_FIXED+'</option>\
        </select>';
        this.divTimeConfig.appendChild(mode);
        this.createTimeRange(0);
        I18n.fillArea($(this.ctnTimeConfig));
    };
    ModalHistoryDataAnalyze.prototype.createTimeRange = function(mode){
        $(this.divTimeConfig).find('.divTimeInterval').remove();
        $(this.divTimeConfig).find('.divTimeRange').remove();
        var divTimeRange = document.createElement('div');
        divTimeRange.className = 'divTimeRange form-group';
        switch (mode){
            case 0:
                //divTimeRange.className += 'col-xs-3 col-lg-4';
                this.divTimeConfig.appendChild(divTimeRange);
                divTimeRange.innerHTML ='\
                <label i18n="modalConfig.option.LABEL_TIME_RANGE">'+I18n.resource.modalConfig.option.LABEL_TIME_RANGE+'</label>\
                <select class="form-control selRecentTimeRange">\
                    <option value="today" i18n="modalConfig.option.PERIOD_DROP_DOWN_TODAY">'+I18n.resource.modalConfig.option.PERIOD_DROP_DOWN_TODAY+'</option>\
                    <option value="threeDay"  i18n="modalConfig.option.PERIOD_DROP_DOWN_THREE_DAY">'+I18n.resource.modalConfig.option.PERIOD_DROP_DOWN_THREE_DAY+'</option>\
                    <option value="yesterday" selected=""  i18n="modalConfig.option.PERIOD_DROP_DOWN_YESTERDAY">'+I18n.resource.modalConfig.option.PERIOD_DROP_DOWN_YESTERDAY+'</option>\
                    <option value="thisWeek" i18n="modalConfig.option.PERIOD_DROP_DOWN_THIS_WEEK">'+I18n.resource.modalConfig.option.PERIOD_DROP_DOWN_THIS_WEEK+'</option>\
                    <option value="lastWeek" i18n="modalConfig.option.PERIOD_DROP_DOWN_LAST_WEEK">'+I18n.resource.modalConfig.option.PERIOD_DROP_DOWN_LAST_WEEK+'</option>\
                    <option value="thisYear" i18n="modalConfig.option.PERIOD_DROP_DOWN_THIS_YEAR">'+I18n.resource.modalConfig.option.PERIOD_DROP_DOWN_THIS_YEAR+'</option>\
                </select>\
                ';
                break;
            case 1:
                //divTimeRange.className += 'col-sm-6 col-lg-8';
                this.divTimeConfig.appendChild(divTimeRange);
                divTimeRange.innerHTML ='\
                <label i18n="modalConfig.option.LABEL_TIME_RANGE">'+I18n.resource.modalConfig.option.LABEL_TIME_RANGE+'</label>\
                <div class="input-group" style="width:100%">\
                    <input class="iptRecentTimeVal form-control" style="width:60%">\
                    <select class="selRecentTimeUnit form-control" style="width:40%">\
                        <option value="minute" i18n="modalConfig.option.PERIOD_UNIT_MIN">'+I18n.resource.modalConfig.option.PERIOD_UNIT_MIN+'</option>\
                        <option value="hour" i18n="modalConfig.option.PERIOD_UNIT_HOUR">'+I18n.resource.modalConfig.option.PERIOD_UNIT_HOUR+'</option>\
                        <option value="day" i18n="modalConfig.option.PERIOD_UNIT_DAY">'+I18n.resource.modalConfig.option.PERIOD_UNIT_DAY+'</option>\
                        <option value="month" i18n="modalConfig.option.PERIOD_UNIT_MON">'+I18n.resource.modalConfig.option.PERIOD_UNIT_MON+'</option>\
                    </select>\
                </div>\
                ';
                this.divTimeConfig.insertBefore(this.createTimeInterval('minute'),divTimeRange);
                var _this = this;
                $(divTimeRange).find('.selRecentTimeUnit').off('change').on('change',function(e){
                    $(_this.divTimeConfig).find('.divTimeInterval').remove();
                    _this.divTimeConfig.insertBefore(_this.createTimeInterval(e.currentTarget.value),e.currentTarget.parentNode.parentNode);
                    I18n.fillArea($(_this.ctnTimeConfig));
                });
                break;
            case 2:
                //divTimeRange.className += 'col-sm-6 col-lg-8';
                this.divTimeConfig.appendChild(divTimeRange);
                divTimeRange.innerHTML ='\
                <label i18n="modalConfig.option.LABEL_TIME_RANGE">'+I18n.resource.modalConfig.option.LABEL_TIME_RANGE+'</label>\
                <div class="input-group">\
                    <input class="form-control form_datetime iptStartTime" size="16" type="text" data-format="yyyy-mm-dd hh:ii" datetimepicker>\
                    <span class="input-group-addon" i18n="modalConfig.option.TIP_RANGE_TO">${I18n.resource.modalConfig.option.TIP_RANGE_TO}</span>\
                    <input class="form-control form_datetime iptEndTime" size="16" type="text" data-format="yyyy-mm-dd hh:ii" datetimepicker>\
                </div>\
                ';
                this.divTimeConfig.insertBefore(this.createTimeInterval(),divTimeRange);
                break;
            default :break;
            I18n.fillArea($(this.ctnTimeConfig));
        }
    };
    ModalHistoryDataAnalyze.prototype.setFixedRangeInterval = function(interval){
        var iptStartTime = this.divTimeConfig.querySelector('.iptStartTime');
        var iptEndTime = this.divTimeConfig.querySelector('.iptEndTime');
        var format  = 'yyyy-MM-dd HH:mm';
        var datePikerFormat = 'yyyy-mm-dd hh:ii';
        $(iptStartTime).attr('value',new Date().format(format)).datetimepicker({
            todayBtn:'linked',
            endTime:new Date(),
            format:datePikerFormat,
            autoclose:true,
            initialDate:new Date().format(format)
        });
        $(iptEndTime).attr('value',new Date().format(format)).datetimepicker({
            todayBtn:'linked',
            endTime:new Date(),
            format:datePikerFormat,
            autoclose:true,
            initialDate:new Date().format(format)
        });
    };
    ModalHistoryDataAnalyze.prototype.getTimeConfig = function(){
        var mode = this.divTimeConfig.querySelector('.iptTimeMode').value;
        var dateTimeRange = this.divTimeConfig.querySelector('.divTimeRange');
        var dateInterval = $(this.divTimeConfig).find('.divTimeInterval>select')[0];
        var startTime,endTime,interval,range;
        var now = new Date();
        if (mode == 0 ){
            var timeRangeVal = dateTimeRange.querySelector('.selRecentTimeRange').value;
            switch (timeRangeVal){
                case 'today':
                    startTime = new Date(now.getTime() - 86400000).format('yyyy-MM-dd HH:mm:ss');
                    endTime = now.format('yyyy-MM-dd HH:mm:ss');
                    interval = 'h1';
                    break;
                case 'threeDay':
                    startTime = new Date(now.getTime() - 259200000).format('yyyy-MM-dd HH:mm:ss');
                    endTime = now.format('yyyy-MM-dd HH:mm:ss');
                    interval = 'h1';
                    break;
                case 'yesterday':
                    startTime = new Date(now.getTime() - 86400000).format('yyyy-MM-dd 00:00:00');
                    endTime = new Date(now.getTime() - 86400000).format('yyyy-MM-dd 23:59:59');
                    interval = 'h1';
                    break;
                case 'thisWeek':
                    startTime = new Date(now.getTime() - 604800000).format('yyyy-MM-dd HH:mm:ss');
                    endTime = now.format('yyyy-MM-dd HH:mm:ss');
                    interval = 'd1';
                    break;
                case 'lastWeek':
                    var weekVal = DateUtil.getWeekNumber(now);
                    var dateRange = DateUtil.getDateRangeOnWeekNumber(weekVal[0],weekVal[1]-1);
                    startTime = new Date(dateRange[0].getTime() - 604800000).format('yyyy-MM-dd 00:00:00');
                    endTime = new Date(dateRange[1].getTime() - 604800000).format('yyyy-MM-dd 23:59:59');
                    interval = 'd1';
                    break;
                case 'thisYear':
                    startTime = new Date(now.getTime() - 31536000000).format('yyyy-MM-dd HH:mm:ss');
                    endTime = now.format('yyyy-MM-dd HH:mm:ss');
                    interval = 'M1';
                    break;
            }
        }else if (mode == 1){
            var dateTimeUnit = dateTimeRange.querySelector('.selRecentTimeUnit').value;
            var unitTime = 0 ;
            var dataTimeVal = parseInt(dateTimeRange.querySelector('.iptRecentTimeVal').value);
            if (isNaN(dataTimeVal))return;
            switch (dateTimeUnit){
                case 'minute':
                    unitTime = 60000;
                    break;
                case 'hour':
                    unitTime = 3600000;
                    break;
                case 'day':
                    unitTime = 86400000;
                    break;
                case 'month':
                    unitTime = 2592000000;
                    break;
            }
            interval = dateInterval.value;
            startTime = new Date(now.getTime() - unitTime * dataTimeVal).format('yyyy-MM-dd HH:mm:ss');
            endTime = now.format('yyyy-MM-dd HH:mm:ss');
        }else if (mode == 2){
            interval = dateInterval.value;
            startTime = new Date(dateTimeRange.querySelector('.iptStartTime').value).format('yyyy-MM-dd HH:mm:ss');
            endTime = new Date(dateTimeRange.querySelector('.iptEndTime').value).format('yyyy-MM-dd HH:mm:ss');
        }
        return {
            startTime:startTime,
            endTime:endTime,
            interval:interval
        }
    };
    ModalHistoryDataAnalyze.prototype.createTimeInterval = function(unit){
        var interval = document.createElement('div');
        interval.className ='divTimeInterval';
        switch (unit){
            case 'minute':
                interval.innerHTML = '\
                <label i18n="modalConfig.option.LABEL_INTERVAL">'+I18n.resource.modalConfig.option.LABEL_INTERVAL+'</label>\
                <select class="form-control">\
                    <option value="m1" i18n="modalConfig.option.INTERVAL_MIN1">'+I18n.resource.modalConfig.option.INTERVAL_MIN1+'</option>\
                    <option value="m5" i18n="modalConfig.option.INTERVAL_MIN5">'+I18n.resource.modalConfig.option.INTERVAL_MIN5+'</option>\
                </select>\
                ';
                break;
            case 'hour':
                interval.innerHTML = '\
                <label i18n="modalConfig.option.LABEL_INTERVAL">'+I18n.resource.modalConfig.option.LABEL_INTERVAL+'</label>\
                <select class="form-control">\
                    <option value="m5" i18n="modalConfig.option.INTERVAL_MIN5">'+I18n.resource.modalConfig.option.INTERVAL_MIN5+'</option>\
                    <option value="h1" i18n="modalConfig.option.INTERVAL_HOUR1">'+I18n.resource.modalConfig.option.INTERVAL_HOUR1+'</option>\
                </select>\
                ';
                break;
            case 'day':
                interval.innerHTML = '\
                <label i18n="modalConfig.option.LABEL_INTERVAL">'+I18n.resource.modalConfig.option.LABEL_INTERVAL+'</label>\
                <select class="form-control">\
                    <option value="h1" i18n="modalConfig.option.INTERVAL_HOUR1">'+I18n.resource.modalConfig.option.INTERVAL_HOUR1+'</option>\
                    <option value="d1" i18n="modalConfig.option.INTERVAL_DAY1">'+I18n.resource.modalConfig.option.INTERVAL_DAY1+'</option>\
                </select>\
                ';
                break;
            case 'month':
                interval.innerHTML = '\
                <label i18n="modalConfig.option.LABEL_INTERVAL">'+I18n.resource.modalConfig.option.LABEL_INTERVAL+'</label>\
                <select class="form-control">\
                    <option value="d1" i18n="modalConfig.option.INTERVAL_DAY1">'+I18n.resource.modalConfig.option.INTERVAL_DAY1+'</option>\
                    <option value="M1" i18n="modalConfig.option.INTERVAL_MON1">'+I18n.resource.modalConfig.option.INTERVAL_MON1+'</option>\
                </select>\
                ';
                break;
            default :
                interval.innerHTML = '\
                <label i18n="modalConfig.option.LABEL_INTERVAL">${I18n.resource.modalConfig.option.LABEL_INTERVAL}</label>\
                <select class="form-control">\
                    <option value="m1" i18n="modalConfig.option.INTERVAL_MIN1">'+I18n.resource.modalConfig.option.INTERVAL_MIN1+'</option>\
                    <option value="m5" i18n="modalConfig.option.INTERVAL_MIN5">'+I18n.resource.modalConfig.option.INTERVAL_MIN5+'</option>\
                    <option value="h1" i18n="modalConfig.option.INTERVAL_HOUR1">'+I18n.resource.modalConfig.option.INTERVAL_HOUR1+'</option>\
                    <option value="d1" i18n="modalConfig.option.INTERVAL_DAY1">'+I18n.resource.modalConfig.option.INTERVAL_DAY1+'</option>\
                    <option value="M1" i18n="modalConfig.option.INTERVAL_MON1">'+I18n.resource.modalConfig.option.INTERVAL_MON1+'</option>\
                </select>\
                ';
                this.setFixedRangeInterval('m1');
                var _this = this;
                interval.getElementsByTagName('select')[0].onchange = function(e){
                    _this.setFixedRangeInterval(e.currentTarget.value)
                };
            break;
        }
        I18n.fillArea($(this.ctnTimeConfig));
        return interval;
    };
    ModalHistoryDataAnalyze.prototype.chartPreSet = function() {
        var _this = this;
        $(this.container).find('.dragTip').hide();
        var timeConfig = this.getTimeConfig();
        this.getData({startTime: timeConfig.startTime, endTime: timeConfig.endTime, timeFormat: timeConfig.interval, dsItemIds: _this.store.map(function(pt){return pt.id})}).done(function (dataSrc) {
            _this.renderChart(dataSrc,timeConfig.interval);
        });
    };
    ModalHistoryDataAnalyze.prototype.renderChart = function(data,interval){
        var formatDate = '';
        var formatTime = '';
        switch (interval){
            case 'm1':
                formatTime = 'HH:mm';
                break;
            case 'm5':
                formatTime = 'HH:mm';
                break;
            case 'h1':
                formatTime = 'HH:mm';
                break;
            case 'd1':
                formatDate = 'MM-dd';
                break;
            case 'M1':
                formatDate = 'yyyy-MM-dd';
                formatTime = '';
                break;
        }
        var timeInit = data.timeShaft;
        var timeShaft = [].concat(data.timeShaft);
        for(var i = 0; i < timeShaft.length ;i++) {
            if (formatDate && formatTime) {
                timeShaft[i] = new Date(timeShaft[i]).format(formatDate) + '\n\r' + new Date(timeShaft[i]).format(formatTime);
            }else if(formatDate){
                timeShaft[i] = new Date(timeShaft[i]).format(formatDate) ;
            }else{
                timeShaft[i] = new Date(timeShaft[i]).format(formatTime) ;
            }
        }
        var dsName = '';
        var legend = [];
        var series = [];
        for (var i = 0; i < data.list.length ; i++){
            if (data.list[i].data.length == 0)continue;
            dsName = AppConfig.datasource.getDSItemById(data.list[i].dsItemId).alias;
            this.store[i].name = dsName;
            legend.push(dsName);
            series.push({
                name:dsName,
                data:data.list[i].data,
                type:'line',
                itemStyle: {
                    normal: {
                        color: AppConfig.chartTheme.color[i%7]
                    }
                }
            })
        }
        var option = {
            title: {
                show:false,
                left: 'center',
                text: I18n.resource.dashboard.modalHistoryDataAnalyze.HISTORY_DATA,
                textStyle:{
                    color:'#fff'
                }
            },
            legend: {
                data:legend,
                padding:2,
                textStyle:{
                    color:'#fff',
                    fontSize:8,
                    fontWeight:'lighter'
                },
                formatter:function(opt){
                    var str = '';
                    if (opt.length > 10){
                        str = opt.slice(0,5) + '...' + opt.slice(opt.length -5)
                    }else{
                        str = opt;
                    }
                    return str;
                },
                orient:'horizontal',
                left: 'center',
                top: '10'
            },
            grid:{
                x:45,
                y:25,
                x2:25,
                y2:25
            },
            toolbox: {
            },
            tooltip:{
                trigger: 'axis',
                formatter:function(data){
                    var strTip = '';
                    strTip += new Date(timeInit[data[0].dataIndex]).format('yyyy-MM-dd HH:mm') + '</br>';
                    for (var i = 0 ; i< data.length ;i++){
                        strTip+=data[i].seriesName + ' : ' + data[i].data;
                        if(i != (data.length -1)) {
                            strTip += '</br>';
                        }
                    }
                    return strTip;
                }
            },
            xAxis: {
                type: 'category',
                boundaryGap: false,
                data: timeShaft,
                axisLine:{
                    lineStyle:{
                        color:'#fff'
                    }
                }
            },
            yAxis: {
                type: 'value',
                scale: true,
                axisLabel: {
                    formatter: function (value) {
                        var ret;
                        if (value < 1000) {
                            ret = value;
                        }
                        else if (value < 1000000) {
                            ret = value / 1000 + 'k';
                        }
                        else {
                            ret = value / 1000000 + 'M';
                        }
                        return ret;
                    }
                },
                splitLine:{
                    lineStyle:{
                        opacity:0.8
                    }
                },
                axisLine:{
                    lineStyle:{
                        color:'#fff'
                    }
                }
            },
            series: series
        };
        var _this = this;
        var hisChart = echarts.init(this.ctnChart,AppConfig.chartTheme);
        hisChart.setOption(option);
        hisChart.on('legendselectchanged', function (params) {
            for (var i =0 ;i < _this.store.length;i++){
                if(_this.store[i].name == params.name){
                    _this.store.splice(i,1);
                    series.splice(i,1);
                    legend.splice(i,1);
                    hisChart.setOption(option);
                    break;
                }
            }
        });
    };
    ModalHistoryDataAnalyze.prototype.attachEvent = function(){
        var _this = this;
        $(this.divTimeConfig).find('.divTimeMode>select').off('change').on('change',function(e){
            _this.createTimeRange(parseInt(e.currentTarget.value))
        });

        var $btnShowTimeConfig = $(this.container.querySelector('.btnShowTimeConfig'));
        $(_this.ctnTimeConfig).hide();
        $(this.container).find('.divConfigCancel').off('click').on('click',function(e){
            $(_this.ctnTimeConfig).hide();
            $btnShowTimeConfig.show();
        });
        $(this.container).find('.divConfigConfirm').off('click').on('click',function(e){
            $(_this.ctnTimeConfig).hide();
            $btnShowTimeConfig.show();
            _this.chartPreSet();
        });
        $(this.divTimeConfig).find('.divTimeMode>select').off('change').on('change',function(e){
            _this.createTimeRange(parseInt(e.currentTarget.value))
        });
        $('#paneCenter').off('dragstart').on('dragstart','[data-h5-draggable-node]',function(e){
            EventAdapter.setData({dsItemId:e.currentTarget.dataset.dsId})
        });
        var $ctnChart = $(this.ctnChart);
        $ctnChart.off('dragover').on('dragover',function(e){
            e.preventDefault();
        });
        $ctnChart.off('dragleave').on('dragleave',function(e){
            e.preventDefault();
        });
        $ctnChart.off('drop').on('drop',function(e){
            e.preventDefault();
            var id = EventAdapter.getData().dsItemId;
            for (var i = 0; i < this.store.length ;i++){
                if(this.store[i].id == id){
                    (typeof infoBox != 'undefined') && infoBox.alert(I18n.resource.dashboard.modalHistoryDataAnalyze.POINT_EXIST_TIP);
                    return;
                }
            }
            this.store.push({id:id});
            this.chartPreSet();
        });
        $btnShowTimeConfig.off('click').on('click',function(){
            $(_this.ctnTimeConfig).show();
            $btnShowTimeConfig.hide();
        });
    };
    ModalHistoryDataAnalyze.prototype.showConfigMode = function(){
    };
    return ModalHistoryDataAnalyze
})();
/*拖拽分析历史数据*/
﻿/// <reference path="../../lib/jquery-2.1.4.min.js" />
var ModalCarbonFootprint = (function () {
    function ModalCarbonFootprint(containerId, entityParams) {
        ModalBase.call(this, containerId, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
        this.isFirstTime = true;
        this.widthRuler = undefined;
        this.$elMask = undefined;
        this.elPaneValue = undefined;
        this.elPaneTitle = undefined;
        this.maxValue = undefined;
    };

    ModalCarbonFootprint.prototype = new ModalBase();
    ModalCarbonFootprint.prototype.optionTemplate = {
        name:'toolBox.modal.REAL_TIME_CARBON_FOOTPRINT',
        parent:0,
        mode:['realTimeDashboard'],
        maxNum: 1,
        title:'',
        minHeight:3,
        minWidth:4,
        maxHeight:6,
        maxWidth:12,
        type:'ModalCarbonFootprint'
    };


    ModalCarbonFootprint.prototype.renderModal = function () {
        if (this.isFirstTime) this.init();
    },

    ModalCarbonFootprint.prototype.init = function () {
        var _this = this;
        WebAPI.get('/static/scripts/spring/entities/modalCarbonFootprint.html').done(function (resultHTML) {
            _this.container.innerHTML = resultHTML;
            _this.initStandard();
            _this.isFirstTime = false;
            I18n.fillArea($('.divCFTitle').parent());
        });
    },

    ModalCarbonFootprint.prototype.initStandard = function () {
        $divMain = $(this.container);
        this.widthRuler = $divMain.find('.cfProcessScale').width();
        this.$elMask = $divMain.find('.cfProcessMask');
        this.elPaneValue = document.getElementById('cfFootprintDashboardCurrent');
        this.elPaneTitle = document.getElementById('divCFTitle');

        var unitValue = this.entity.modal.option.valueStandard / 4;
        this.maxValue = unitValue * 5;

        //init scale numbers of ruler
        var tdScaleNums = this.container.getElementsByClassName('cfProcessScaleNum');
        for (var i = 0, len = tdScaleNums.length; i < len; i++) {
            tdScaleNums[i].textContent = parseInt(unitValue * i).toString();
        }

        //init warning field
        $divMain.find('.cfLegendBarWarning').animate({ width: this.widthRuler * 0.2 + 'px' }, 1000);
        document.getElementById('cfFootprintDashboardStandard').textContent = this.entity.modal.option.valueStandard;
    },

    ModalCarbonFootprint.prototype.updateModal = function (points) {
        var value = parseFloat(points[0].data).toFixed(1).toString();
        this.elPaneValue.textContent = value;
        this.elPaneTitle.textContent = value;
        this.$elMask.animate({ width: this.widthRuler - value * this.widthRuler / this.maxValue + 'px' }, 1000);
    },

    ModalCarbonFootprint.prototype.showConfigMode = function () {
    };

    ModalCarbonFootprint.prototype.setModalOption = function (option) {
        this.entity.modal.option = {};
        //TODO
        this.entity.modal.option.valueStandard = 3500;
    };

    return ModalCarbonFootprint;
})();
var ModalAppChart = (function () {
    function ModalAppChart(screen, entityParams) {
        if (!entityParams) return;
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
        this.dicPeriod = {
            '30s': 30000,
            'm1': 60000,
            'm5': 300000,
            '10m': 600000,
            '30m': 1800000,
            'h1': 3600000,
            'd1': 86400000,
            'M1': 2592000000
    }
    }
    ModalAppChart.prototype = new ModalBase();

    ModalAppChart.prototype.optionTemplate = {
        name: 'toolBox.modal.APP_CHART',
        parent:3,
        mode:['realTime'],
        maxNum: 10,
        title:'',
        minHeight:1,
        minWidth:1,
        maxHeight:6,
        maxWidth:12,
        type: 'ModalAppChart'
    };

    ModalAppChart.prototype.optionDefault = {
        // 默认色板
        color: [
            '#E2583A','#FD9F08','#1D74A9','#04A0D6','#689C0F','#109d83','#FEC500'
        ],

        // 图表标题
        title: {
            textStyle: {
                fontWeight: 'normal',
                color: '#008acd'          // 主标题文字颜色
            }
        },
        legend: {
            textStyle: {
                fontFamily: "Microsoft YaHei",
                fontSize:10
            }
        },
        // 值域
        dataRange: {
            itemWidth: 15,
            color: ['#5ab1ef','#e0ffff']
        },

        // 工具箱
        toolbox: {
            x: 'right',
            y: 'center',
            feature: {
                mark: { show: true },
                magicType: { show: true, type: ['line', 'bar'] },
                restore: { show: true },
                saveAsImage: { show: true }
            },
            color : ['#1e90ff', '#1e90ff', '#1e90ff', '#1e90ff'],
            effectiveColor : '#ff4500'
        },

        // 提示框
        tooltip: {
            trigger: 'axis',
            axisPointer : {            // 坐标轴指示器，坐标轴触发有效
                type : 'line',         // 默认为直线，可选为：'line' | 'shadow'
                lineStyle : {          // 直线指示器样式设置
                    color: '#008acd'
                },
                crossStyle: {
                    color: '#008acd'
                },
                shadowStyle : {                     // 阴影指示器样式设置
                    color: 'rgba(200,200,200,0.2)'
                }
            }
        },

        // 区域缩放控制器
        dataZoom: {
            dataBackgroundColor: '#efefff',            // 数据背景颜色
            fillerColor: 'rgba(182,162,222,0.2)',   // 填充颜色
            handleColor: '#008acd'    // 手柄颜色
        },

        // 网格
        grid: (function(isMobile){//统一配置grid
            var grid = {
                    borderWidth: 0,
                    borderColor: '#eee',
                    left:50,
                    bottom:40,
                    right:50,
                    top:40
                }
            if(isMobile){
                grid.x = 40;
            }
            return grid;
        }(AppConfig.isMobile)),

        // 类目轴
        categoryAxis: {
            axisLine: {            // 坐标轴线
                lineStyle: {       // 属性lineStyle控制线条样式
                    color: '#008acd'
                }
            },
            splitLine: {           // 分隔线
                lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
                    color: ['#eee']
                }
            }
        },

        // 数值型坐标轴默认参数
        valueAxis: {
            axisLine: {            // 坐标轴线
                lineStyle: {       // 属性lineStyle控制线条样式
                    color: '#008acd'
                }
            },
            splitArea : {
                show : true,
                areaStyle : {
                    color: ['rgba(250,250,250,0.1)','rgba(200,200,200,0.1)']
                }
            },
            splitLine: {           // 分隔线
                lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
                    color: ['#eee']
                }
            }
        },

        polar : {
            axisLine: {            // 坐标轴线
                lineStyle: {       // 属性lineStyle控制线条样式
                    color: '#ddd'
                }
            },
            splitArea : {
                show : true,
                areaStyle : {
                    color: ['rgba(250,250,250,0.2)','rgba(200,200,200,0.2)']
                }
            },
            splitLine : {
                lineStyle : {
                    color : '#ddd'
                }
            }
        },

        timeline : {
            lineStyle : {
                color : '#008acd'
            },
            controlStyle : {
                normal : { color : '#008acd'},
                emphasis : { color : '#008acd'}
            },
            symbol : 'emptyCircle',
            symbolSize : 3
        },

        // 柱形图默认参数
        bar: {
            itemStyle: {
                normal: {
                    barBorderRadius: 5
                },
                emphasis: {
                    barBorderRadius: 5
                }
            },
            barMaxWidth: 80
        },

        // 折线图默认参数
        line: {
            smooth : true,
            symbol: 'none',  // 拐点图形类型
            symbolSize: 3           // 拐点图形大小
        },

        // K线图默认参数
        k: {
            itemStyle: {
                normal: {
                    color: '#d87a80',       // 阳线填充颜色
                    color0: '#2ec7c9',      // 阴线填充颜色
                    lineStyle: {
                        color: '#d87a80',   // 阳线边框颜色
                        color0: '#2ec7c9'   // 阴线边框颜色
                    }
                }
            }
        },

        // 散点图默认参数
        scatter: {
            symbol: 'circle',    // 图形类型
            symbolSize: 4        // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
        },

        // 雷达图默认参数
        radar : {
            symbol: 'emptyCircle',    // 图形类型
            symbolSize:3
            //symbol: null,         // 拐点图形类型
            //symbolRotate : null,  // 图形旋转控制
        },

        map: {
            itemStyle: {
                normal: {
                    areaStyle: {
                        color: '#ddd'
                    },
                    label: {
                        textStyle: {
                            color: '#d87a80'
                        }
                    }
                },
                emphasis: {                 // 也是选中样式
                    areaStyle: {
                        color: '#fe994e'
                    }
                }
            }
        },

        force : {
            itemStyle: {
                normal: {
                    linkStyle : {
                        color : '#1e90ff'
                    }
                }
            }
        },

        chord : {
            itemStyle : {
                normal : {
                    borderWidth: 1,
                    borderColor: 'rgba(128, 128, 128, 0.5)',
                    chordStyle : {
                        lineStyle : {
                            color : 'rgba(128, 128, 128, 0.5)'
                        }
                    }
                },
                emphasis : {
                    borderWidth: 1,
                    borderColor: 'rgba(128, 128, 128, 0.5)',
                    chordStyle : {
                        lineStyle : {
                            color : 'rgba(128, 128, 128, 0.5)'
                        }
                    }
                }
            }
        },

        gauge : {
            axisLine: {            // 坐标轴线
                lineStyle: {       // 属性lineStyle控制线条样式
                    color: [[0.2, '#2ec7c9'],[0.8, '#5ab1ef'],[1, '#d87a80']],
                    width: 10
                }
            },
            axisTick: {            // 坐标轴小标记
                splitNumber: 10,   // 每份split细分多少段
                length :15,        // 属性length控制线长
                lineStyle: {       // 属性lineStyle控制线条样式
                    color: 'auto'
                }
            },
            splitLine: {           // 分隔线
                length :22,         // 属性length控制线长
                lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
                    color: 'auto'
                }
            },
            pointer : {
                width : 5
            }
        },

        textStyle: {
            fontFamily: '微软雅黑, Arial, Verdana, sans-serif'
        }
    };
    ModalAppChart.prototype.renderModal = function () {
        this.chart = echarts.init(this.container, AppConfig.chartTheme);
        this.chart.setOption(this.options);
    },
    ModalAppChart.prototype.updateModal = function (pointName, pointValue) {
    },
    ModalAppChart.prototype.showConfigMode = function () {
    },
    ModalAppChart.prototype.dsChartCog = function (cog, option) {
        if(!cog) return;
        if(cog[0].upper) option.yAxis[0].max = cog[0].upper;
        if(cog[0].lower) option.yAxis[0].min = cog[0].lower;
        if(cog[0].unit) option.yAxis[0].name = cog[0].unit;
        if(cog[0].markLine){
            if(!option.series[0].markLine) {
                option.series[0].markLine = {};
                option.series[0].markLine.data = new Array();

            }
            for(var i in cog[0].markLine){
                var markLine = cog[0].markLine[i];
                if(!markLine.value) continue;
                var arr = [
                    {name: markLine.name, xAxis: -1, yAxis: markLine.value},
                    {name: markLine.name, xAxis: option.series[0].data.length, yAxis: markLine.value}
                ];
                option.series[0].markLine.data.push(arr);
            }
        }
    }
    ModalAppChart.prototype.coordinate = function (e) {
        var arr = [];
        var endTime = new Date().valueOf();
        if (e == 'm1') {
            var startTime = endTime - 21600000;//6*60*60*1000
            var interval = 60000;//一分钟
            while (startTime <= endTime) {
                arr.push(new Date(startTime).format('HH:mm'));
                startTime += interval;
            }
        } else if (e == 'm5'){
            var startTime = endTime - 86100000;//减去24个小时
            var interval = 300000;//五分钟
            while( startTime <= endTime ) {
            arr.push(new Date(startTime - startTime%300000).format('HH:mm'));
            startTime += interval;
            }
        }else if(e == 'h1') {
            var startTime = endTime - 82800000;//23*60*60*1000
            var interval = 3600000;//一个小时
            while( startTime <= endTime ) {
            arr.push(new Date(startTime).format('HH:00'));
            startTime += interval;
            }
        }else if(e == 'd1') {
            var startTime = endTime - 2592000000;//减去一个月
            var interval = 86400000;//一天
            while( startTime <= endTime ) {
                arr.push(new Date(startTime).format('yyyy-MM-dd'));
                startTime += interval;
            }
        }else if(e == 'M1'){
            var fullYear = new Date().getFullYear()-1;
            var month = new Date().getMonth() + 1;
            //var startTime = fullYear+ '-' + month;
            var interval = 1;//一个月
            for(var i=0;i<12;i++){
                var startTime = fullYear+ '-' + month;
                arr.push(startTime);
                month = month%12 + interval;
                if(month === 1){
                    fullYear +=1;
                }
            }
        }
        return [{data: arr}];
    }
    return ModalAppChart;
})();

/*PUE分析 仪表盘 PUE实时指标 start */
var ModalAppGauge = (function () {

    function ModalAppGauge(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        ModalBase.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);
        this.entityOption = entityParams.modal.option;
    };
    ModalAppGauge.prototype = new ModalBase();

    ModalAppGauge.prototype.optionTemplate = {
        name: 'toolBox.modal.APP_GAUGE_CHART',
        parent:3,
        mode: ['appGauge'],
        maxNum: 1,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type: 'ModalAppGauge',
        tooltip: {
            'imgPC': true,
            'imgMobile': true,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalAppGauge.prototype.optionDefault = {
        tooltip: {
            formatter: "{a} <br/>{b} : {c}"
        },
        backgroundColor: '#2f91e8',
        animation: true,
        animationDuration: 1000,
        animationDurationUpdate: 1000,
        //backgroundColor: '#2f91e8',
        toolbox: {
            show: false
        },
        title: {
            show: true,
            text: '项目实时评估得分',
            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
                fontWeight: '100',
                fontFamily: 'Microsoft Yahei',
                fontSize: 16,
                color: '#fff'
            },
            x: 'center'
        },
        series: [
            {
                //name: 'PUE',
                type: 'gauge',
                splitNumber: 4,
                center: ['50%', '55%'],
                radius: '75%',
                startAngle: -270,
                endAngle: 89.9999,
                axisLine: {
                    show: false,
                    lineStyle: {
                        width: 13,
                        opacity: 0
                    }
                },
                axisTick: {
                    splitNumber: 20,   // 每份split细分多少段
                    length: 12,        // 属性length控制线长
                    lineStyle: {       // 属性lineStyle控制线条样式
                        color: 'auto',
                        width: 2
                    }
                },
                axisLabel: {
                    show: true,
                    textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
                        color: '#eee'
                    }
                },
                splitLine: {
                    show: true,        // 默认显示，属性show控制显示与否
                    length: 12,         // 属性length控制线长
                    lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
                        width: 2,
                        color: 'auto'
                    }
                },
                pointer : {
                    show: false
                },
                itemStyle: {
                    normal: {
                        opacity: 0
                    }
                },
                title: {
                    show: true,
                    textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
                        fontWeight: 'bolder',
                        color: 'white'
                    },
                    offsetCenter: [0, '-40%']
                },
                detail: { 
                    formatter: '{value}',
                    offsetCenter: ['0%', '-5%'],
                    textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
                        color: '#fff',
                        fontSize: 36
                    }
                }
            }
        ]
    };
    ModalAppGauge.prototype.renderPercentPlane=function(points){
    	if(points.length < 1) return;
		var c = document.getElementById('gaugeTop'),
	    d=document.getElementById('gaugeBottom'),
	    circleLength,rotDegree,
	    ctx = c.getContext('2d'),
	    ctd=d.getContext('2d'),
	    containerWidth=$(this.container).width(),
	    containerHeight=$(this.container).height(),
	    circleRadius=containerWidth < containerHeight ? containerWidth : containerHeight,
	    dw=d.width=cw = c.width=containerWidth,
	    dh=d.height=ch = c.height=containerHeight,
		data=points[0].data,
		guageOption={
			'guageTitle':points[1].guageTitle ? points[1].guageTitle : '',
			'guageFixed': points[1].guageFixed ? points[1].guageFixed : 0,
			'guageUnit': points[1].guageUnit ? points[1].guageUnit : '',
			'guageMax':points[1].guageMax ? points[1].guageMax : ''
		},
		optionData={
			startData:0,
			totalTime:200,
		},animFrame=null,
	    dToR = function(degrees){
	        return degrees * (Math.PI / 180);
	    },
	    minRadiusValue=(parseInt(circleRadius/3)+20)<(parseInt(circleRadius/2))?(parseInt(circleRadius/3)+20):(parseInt(circleRadius/2)),
	    circle = {
	        x: (cw / 2),
	        y: parseInt(circleRadius/3)+50,
	        radius:minRadiusValue,
	        speed: parseInt(data/(optionData.totalTime/16.7)),
	        rotation: 0,
	        angleEnd: 360,
	        hue: 200,
	        blur: 10
	    };

		(function() {
		    var lastTime = 0;
		    var vendors = ['ms', 'moz', 'webkit', 'o'];
		    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
		        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
		        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
		    }
		    if (!window.requestAnimationFrame) window.requestAnimationFrame = function(callback, element) {
		        var currTime = new Date().getTime();
		        var timeToCall = Math.max(0, 16 - (currTime - lastTime));
		        var id = window.setTimeout(function() {
		            callback(currTime + timeToCall);
		        }, timeToCall);
		        lastTime = currTime + timeToCall;
		        return id;
		    };
		    if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function(id) {
		        clearTimeout(id);
		    };
		}());
	    function setOption(){
	    	if(data>100){
	    		if(guageOption.guageUnit=='%'&&guageOption.guageMax!=''){
		    		data=parseFloat(data/guageOption.guageMax).toFixed(guageOption.guageFixed);
		    	}else if(guageOption.guageUnit=='%'&&guageOption.guageMax==''){

		    	}else if(guageOption.guageUnit!='%'&&guageOption.guageMax!=''){

		    	}
		    	else{
		    		data=100;
		    	}
	    	}

	    	rotDegree=data*3.6;
	    	!data &&(data=0);
	    	circleLength=120;
	    	data<=25 && (circleLength=90);
	    	data<=15 && (circleLength=50);
	    	data<=8 && (circleLength=25);
	    	data<=2 && (circleLength=1);
	    };
	    function updateCircle(){
	        circle.rotation < circle.angleEnd?circle.rotation += circle.speed:circle.rotation = 0; 
	    };
	    function renderStaticCanvas(){
	    	var fontSize=15;
	    	ctd.shadowColor='rgba(240, 240, 240, 0.3)';
			ctd.shadowBlur = 2;
			ctd.shadowoffsetx=5;
			ctd.shadowoffsety=5;
		    ctd.beginPath();
		    ctd.arc(circle.x, circle.y, circle.radius ,0, Math.PI *2, true);
		    ctd.lineWidth = 4;
		    ctd.strokeStyle = 'rgba(240, 240, 240, 0.3)';
		    ctd.stroke();
		    /*标题*/
		    var titleWidth=Math.sqrt(circle.radius*circle.radius-70*70)*2;
	        ctd.font = '20px 微软雅黑';
	        ctd.fillStyle = '#9ea0ba';
	        ctd.textBaseline = 'middle';
	        ctd.textAlign = 'center';
	        if (titleWidth && ctd.measureText(guageOption.guageTitle).width < titleWidth) {
	            ctd.fillText(guageOption.guageTitle, circle.x-5, circle.y+40);
	        } else {
	            StringTools.wordWrap(ctd, circle.x, circle.y+40,titleWidth, guageOption.guageTitle, null);
	        }
	        
	    };
	    function renderProgressBar(){
	    	ctd.clearRect(0,0,cw,ch);
	    	renderStaticCanvas();
		    ctd.beginPath();
		    ctd.shadowBlur = 2;
			ctd.shadowoffsetx=5;
			ctd.shadowoffsety=5;
            ctd.lineWidth = 4;
            ctd.strokeStyle = 'rgba(222,222,222,0.8)';
            ctd.lineCap="round";
            ctd.arc(circle.x, circle.y, circle.radius,-90 * Math.PI / 180, -(optionData.startData+90)*Math.PI/180,true);
            ctd.stroke();

	    };
	    function renderPercentCircle(){
       		renderText();
          	if(optionData.startData<=rotDegree){
          		animFrame=window.requestAnimationFrame(renderPercentCircle);
          		renderProgressBar();
                optionData.startData+=circle.speed;
                clear();
		        updateCircle();
		        renderText();
		        renderCircle();
		        for(var i=0;i<circleLength;i+=1){
		       		renderCircleFlare(i,circleLength);
		        }
		    }
          else{
                window.cancelAnimationFrame(animFrame);
            }
	    };
	    /*渲染百分比文字*/
	    function renderText(){
	        var percentText=optionData.startData>rotDegree?parseInt(data)+guageOption.guageUnit:parseInt(optionData.startData/3.6)+guageOption.guageUnit;	        
		    ctx.shadowColor = 'rgba(0, 0, 0, 0.6)';
			ctx.shadowOffsetX = 5;
			ctx.shadowOffsetY = 4;
			ctx.shadowBlur = 8;
	        ctx.font = parseInt(circle.radius*1/2)+'px 微软雅黑';
	        ctx.fillStyle = '#fff';
	        ctx.textBaseline = 'middle';
	        ctx.textAlign = 'center';
	        var textWidth=ctx.measureText(percentText).width+20;
	        ctx.clearRect(circle.x-textWidth/2,circle.y-55,textWidth,110);
	        ctx.fillText(percentText, circle.x, circle.y-10);
	    };
	    /*刷新时间*/
	    function renderRefreshText(){
	    	var refreshTime=new Date().format('yyyy-MM-dd HH:mm');
	    	ctd.clearRect(0,0,100,30);
	    	ctd.font='10px 微软雅黑';
	    	ctd.fillStyle='rgba(255,255,255,0.6)';
	    	ctd.fillText(refreshTime,5,15);
	    };
	    /*将画布逆时针旋转*/
		function renderCircleFlare(i,circleLength){
			var count=1-parseFloat(i/circleLength);
	        ctx.save();
	        ctx.translate(circle.x, circle.y);
	        ctx.rotate(-dToR(circle.rotation+180-i));
        	ctx.scale(1,1);
	        ctx.beginPath();
	        ctx.arc(0, circle.radius, 10*count, 0, Math.PI *2, false);
	        ctx.closePath();
	        ctx.shadowColor = 'rgba(255, 255, 255, 0)';
	        var gradient3 = ctx.createRadialGradient(0, circle.radius, 0, 0, circle.radius, 12);
	        gradient3.addColorStop(0, 'rgba(255, 255, 255, '+parseFloat(0.06*count)+')');
	        gradient3.addColorStop(1, 'rgba(255, 255, 255, 0)');
	        ctx.fillStyle = gradient3;
	        ctx.fill();     
	        ctx.restore();
	    };
	    function renderCircle(){
	        ctx.save();
	        ctx.translate(circle.x, circle.y);
	        ctx.rotate(-dToR(circle.rotation+180));
        	ctx.scale(1,1);
	        ctx.beginPath();
	        ctx.arc(0, circle.radius, 10, 0, Math.PI *2, false);
	        ctx.closePath();
	        ctx.shadowColor = 'rgba(255, 255, 255, 0)';
	        var gradient4 = ctx.createRadialGradient(0, circle.radius, 0, 0, circle.radius, 12);
	        gradient4.addColorStop(0, 'rgba(255, 255, 255, '+0.08+')');
	        gradient4.addColorStop(1, 'rgba(255, 255, 255, 0)');
	        ctx.fillStyle = gradient4;
	        ctx.fill();     
	        ctx.restore();
	    };
	    clear = function(){
	        ctx.globalCompositeOperation = 'destination-out';
	        ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';
	        ctx.fillRect(0, 0, cw, ch);
	        ctx.globalCompositeOperation = 'lighter';
	    };
	    setOption();
	    renderPercentCircle();
	    //renderRefreshText();
		ctd.shadowColor='rgba(222,222,222,0.3)';
		ctd.shadowBlur = 3;
		ctd.shadowoffsetx=5;
		ctd.shadowoffsety=5;
	    ctx.shadowColor = 'hsla('+circle.hue+', 80%, 60%, 1)';
		ctx.lineCap = 'round';
		this.spinner.stop();
    }
    ModalAppGauge.prototype.renderModal = function () {
    	var canvasModal='<canvas id="gaugeTop"></canvas><canvas id="gaugeBottom"></canvas>';
    	$(this.container).append(canvasModal);
    	$('#gaugeTop',this.container).css({'display':'block','position':'absolute','top':'0','left':'0','zIndex':'11'});
    	$('#gaugeBottom',this.container).css({'display':'block','position':'absolute','top':'0','left':'0','zIndex':'10','background':'rgba(0,0,0,0)'});
    },

    ModalAppGauge.prototype.updateModal = function (points) {
	    if(!AppConfig.isMobile){
	        if(points.length < 1) return;
	        var _this = this;
	        var dataSeries;

	        if(parseFloat(points[0].data)>100){
	            this.optionDefault.series[0].max = parseFloat(points[0].data).toFixed(0);
	            this.optionDefault.series[0].formatter = function (v) {
	                    switch (v + '') {
	                        case (parseFloat(points[0].data)/4).toFixed(0): return (parseFloat(points[0].data)/4).toFixed(0);
	                        case (parseFloat(points[0].data)/2).toFixed(0): return (parseFloat(points[0].data)/2).toFixed(0);
	                        case (parseFloat(points[0].data)*3/4).toFixed(0): return (parseFloat(points[0].data)*3/4).toFixed(0);
	                        case parseFloat(points[0].data).toFixed(0): return parseFloat(points[0].data).toFixed(0);
	                        default: return '';
	                    }
	                }
	        }else{
	            this.optionDefault.series[0].max = 100;
	            this.optionDefault.series[0].formatter = function (v) {
	                    switch (v + '') {
	                            case '25': return '25';
	                            case '50': return '50';
	                            case '75': return '75';
	                            case '0': return '0';
	                            default: return '';
	                    }
	                }
	        }
				if(points[1]){
	            //var guageTitle = points[1].guageTitle ? points[1].guageTitle : '';
	            if(points[1].guageTitle){
	                this.optionDefault.title.text = points[1].guageTitle;
	            }
	            var guageFulTitle = points[1].guageFulTitle ? points[1].guageFulTitle : '';
	            //var guageFixed = points[1].guageFixed ? points[1].guageFixed : 2;

	            if(points[1].guageFixed===0||points[1].guageFixed){
	                dataSeries = parseFloat(points[0].data).toFixed(points[1].guageFixed);
	            }else{
	                dataSeries = parseFloat(points[0].data).toFixed(2);
	            }
	            if(parseFloat(points[0].data)>100){
	                this.optionDefault.series[0].max = parseFloat(points[0].data).toFixed(0);
	                this.optionDefault.series[0].formatter = function (v) {
	                        switch (v + '') {
	                            case (parseFloat(points[0].data)/4).toFixed(0): return (parseFloat(points[0].data)/4).toFixed(0);
	                            case (parseFloat(points[0].data)/2).toFixed(0): return (parseFloat(points[0].data)/2).toFixed(0);
	                            case (parseFloat(points[0].data)*3/4).toFixed(0): return (parseFloat(points[0].data)*3/4).toFixed(0);
	                            case parseFloat(points[0].data).toFixed(0): return parseFloat(points[0].data).toFixed(0);
	                            default: return '';
	                        }
	                    }
	            }else{
	                this.optionDefault.series[0].max = 100;
	                this.optionDefault.series[0].formatter = function (v) {
	                        switch (v + '') {
	                                case '25': return '25';
	                                case '50': return '50';
	                                case '75': return '75';
	                                case '0': return '0';
	                                default: return '';
	                        }
	                    }
	            }
	            //var guageUnit = points[1].guageUnit ? points[1].guageUnit : '';
	           if(points[1].guageUnit){
	                this.optionDefault.series[0].detail.formatter = '{value}'+points[1].guageUnit;
	            }

	            var guageDirect = points[1].guageDirect ? points[1].guageDirect : '';
	            if(guageDirect==='antiClockwise'){
	                //逆时针
	                this.optionDefault.series[0].startAngle = -270;
	                this.optionDefault.series[0].endAngle = 89.9999;
	            }else{
	                this.optionDefault.series[0].startAngle = 90;
	                this.optionDefault.series[0].endAngle = -269.9999;
	            }
	            if(points[1].guageBgColor){
	                this.optionDefault.backgroundColor = points[1].guageBgColor;
	            }
	            if(points[1].transDataDot){
	                var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
	                String.prototype.colorRgb = function () {
	                    var sColor = this.toLowerCase();
	                    if (sColor && reg.test(sColor)) {
	                        if (sColor.length === 4) {
	                            var sColorNew = "#";
	                            for (var i = 1; i < 4; i += 1) {
	                                sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));
	                            }
	                            sColor = sColorNew;
	                        }
	                        //处理六位的颜色值
	                        var sColorChange = [];
	                        for (var i = 1; i < 7; i += 2) {
	                            sColorChange.push(parseInt("0x" + sColor.slice(i, i + 2)));
	                        }
	                        return "RGB(" + sColorChange.join(",") + ")";
	                    } else {
	                        return sColor;
	                    }
	                };
	                var currentRGB = points[1].guageBgColor.colorRgb();
	                var rgb = currentRGB.split("(")[1].split(")")[0];
	                var r = rgb.split(",")[0];
	                var g = rgb.split(",")[1];
	                var b = rgb.split(",")[2];
	                var finalRGB = 'rgba('+r+','+g+','+b+','+points[1].transDataDot+')';
	                this.optionDefault.backgroundColor = finalRGB;
	            }
	        }
	        this.optionDefault.series[0].data = [{ value: dataSeries, name: guageFulTitle }];

	        this.optionDefault.series[0].axisLine.lineStyle.color = function () {
	            var arrColor = ['tomato', '#f7ba49', '#11fff1', '#89dd4b'];
	            var seriesDataInt = parseInt(dataSeries);
	            var numCount = dataSeries.toString().length;
	            var numCount1 = numCount-2<=0?1:(numCount-2);
	            var numFinally = Math.pow(10,numCount1);
	            var kpiColor;
	            if(seriesDataInt>100){
	                //kpiColor = arrColor[Math.floor(Math.abs(seriesDataInt - 1) / (25*numFinally))];
	                kpiColor = '#89dd4b';
	            }else{
	                kpiColor = arrColor[Math.floor(Math.abs(seriesDataInt - 1) / 25)];
	            }
	            return [[seriesDataInt / 100, kpiColor], [1, '#87a8c5']];
	        }();

	        !this.chart && (this.chart = echarts.init(this.container, AppConfig.chartTheme));
	        this.chart.setOption(this.optionDefault);
	        var spanTime = '<span class="spanTime" style="position:absolute;color:#fff">'+new Date().format('yyyy-MM-dd')+'</span>'
	        $(this.container).find('.spanTime').empty().remove();
	        $(this.container).append(spanTime);
	        var timeLocal = points[1].timeLocal ? points[1].timeLocal : 'leftTop';
	        if(timeLocal){
	            var $spanTimeDom = $(this.container).find('.spanTime');
	            if(timeLocal==='leftTop'){
	                $spanTimeDom.css({'top':'10px','left':'10px'});
	            }else if(timeLocal==='rightTop'){
	                $spanTimeDom.css({'top':'10px','right':'10px'});
	            }else if(timeLocal==='leftBottom'){
	                $spanTimeDom.css({'bottom':'10px','left':'10px'});
	            }else{
	                $spanTimeDom.css({'bottom':'10px','right':'10px'});
	            }
	        }
	    }else{
			this.renderPercentPlane(points);
	    }
    },

    ModalAppGauge.prototype.showConfigMode = function () {

    },

    ModalAppGauge.prototype.setModalOption = function (option) {
        this.entity.modal.option = {};
        //this.entity.modal.option.scaleList = option.scaleList;
        //this.entity.modal.option.appGuageList = option.appGuageList;
        this.entity.modal.option.guageTitle = option.guageTitle;
        this.entity.modal.option.guageFulTitle = option.guageFulTitle;
        this.entity.modal.option.guageFixed = option.guageFixed;
        this.entity.modal.option.guageUnit = option.guageUnit;
        this.entity.modal.option.guageMax = option.guageMax;
        this.entity.modal.option.timeLocal = option.timeLocal;
        this.entity.modal.option.guageDirect = option.guageDirect;
        this.entity.modal.option.guageBgColor = option.guageBgColor;
        this.entity.modal.option.transDataDot = option.transDataDot;
        this.entity.modal.interval = 5;
    };

    return ModalAppGauge;
})();
/*PUE分析 仪表盘 PUE实时指标 start */

/*APP 按钮*/
var ModalAppButton = (function () {
    var _this;
    function ModalAppButton(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        _this = this;
        if (!screen) return;
        this.screen = screen;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        ModalBase.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);
        this.entityOption = entityParams.modal.option;
    };
    ModalAppButton.prototype = new ModalBase();

    ModalAppButton.prototype.optionTemplate = {
        name: 'toolBox.modal.APP_BUTTON',
        parent: 3,
        mode: ['appGauge'],
        maxNum: 10,
        title: '',
        //defaultHeight: 4.5,
        //defaultWidth: 3,
        minHeight: 1.5,
        minWidth: 3,
        maxHeight: 6,
        maxWidth: 12,
        type: 'ModalAppButton',
        tooltip: {
            'imgPC': false,
            'imgMobile': true,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalAppButton.prototype.show = function () {
        this.init();
    };

    ModalAppButton.prototype.init = function () {
        this.container.style.overflowX = 'hidden';
        this.container.style.overflowY = 'auto';
    };

    ModalAppButton.prototype.configure = function () {
        this.spinner && this.spinner.stop();
        var _this = this;

        if (this.chart) this.chart.clear();
        this.divResizeByMouseInit();

        var divMask = document.createElement('div');
        divMask.className = 'springConfigMask';
        divMask.draggable = 'true';

        var btnRemove = document.createElement('span');
        btnRemove.className = 'glyphicon glyphicon-remove-circle springConfigRemoveBtn grow';
        btnRemove.title = 'Remove';
        btnRemove.onclick = function (e) {
            //TODO 测试confirm
            confirm('Are you sure you want to delete it ?', function () {
                if (_this.chart) _this.chart.clear();
                var oldIndex = _this.screen.arrEntityOrder.indexOf(_this.entity.id);
                if (_this.screen.screen) {//兼容ModalMix
                    _this.screen.screen.removeEntity(_this.entity.id);
                } else {
                    _this.screen.removeEntity(_this.entity.id);
                }
                _this.screen.isScreenChange = true;

                //重新生成窗口
                var entity = new ModalNone(_this.screen, {
                    id: _this.entity.id,
                    spanC: _this.entity.spanC,
                    spanR: _this.entity.spanR,
                    modal: {type:"ModalNone"}
                }, _this.entity.id);
                _this.screen.arrEntityOrder.splice(oldIndex,0,entity.entity.id);
                _this.screen.listEntity[entity.entity.id] = entity;
                entity.render();
                entity.configure();
                entity.hasEdit = true;
                _this = null;
            })
        };
        divMask.appendChild(btnRemove);

        if (this.entity.modal.type != 'ModalAnalysis' || !this.screen.isForReport) {
            var btnConfig = document.createElement('span');
            btnConfig.className = 'glyphicon glyphicon-cog springConfigBtn grow';
            btnConfig.title = 'Options';
            btnConfig.onclick = btnConfig_clickEvent;
            divMask.appendChild(btnConfig);
        }
        function btnConfig_clickEvent(e) {
            $('.springSel').removeClass('springSel');
            $(e.target).closest('.springContainer').addClass('springSel');
            _this.modalInit();
            //$('#energyModal').modal('show');
        }

        var btnHeightResize = document.createElement('div');
        var maxHeight = this.spanRange.maxHeight;
        var maxWidth = this.spanRange.maxWidth;
        var minHeight = this.spanRange.minHeight;
        var minWidth = this.spanRange.minWidth;
        btnHeightResize.className = 'divResize divHeightResize';
        btnHeightResize.innerHTML = '<label for="heightResize" >H: </label>' +
        '<input type="range" class="inputResize" id="heightResize" name="points" step="0.5" min="' + minHeight + '" max="' + maxHeight + '" value="' + _this.entity.spanR + '"/>' +
        '<h5 class="rangeVal">' + _this.entity.spanR + ' /' + _this.spanRange.maxHeight + '</h5>' +
        '<input type="text" class="rangeChange" value="' + _this.entity.spanR + '"/>';
        divMask.appendChild(btnHeightResize);
        var btnWidthResize = document.createElement('div');
        btnWidthResize.className = 'divResize divWidthResize';
        btnWidthResize.innerHTML = '<label for="widthResize" >W: </label>' +
        '<input type="range" class="inputResize" id="widthResize" name="points" step="0.5" min="' + minWidth + '" max="' + maxWidth + '" value="' + _this.entity.spanC + '"/>' +
        '<h5 class="rangeVal">' + _this.entity.spanC + ' /' + _this.spanRange.maxWidth + '</h5>' +
        '<input type="text" class="rangeChange" value="' + _this.entity.spanC + '"/>';
        divMask.appendChild(btnWidthResize);
        var divTitleAndType = document.createElement('div');
        divTitleAndType.className = 'divTitleAndType';
        divMask.appendChild(divTitleAndType);


        var $divTitle = $('<div class="divResize chartTitle">');
        var $labelTitle = $('<label for="title">').text(I18n.resource.dashboard.show.TITLE);
        var inputChartTitle = document.createElement('input');
        inputChartTitle.id = 'title';
        inputChartTitle.className = 'form-control';
        inputChartTitle.value = this.entity.modal.title;
        inputChartTitle.setAttribute('placeholder', I18n.resource.dashboard.show.TITLE_TIP);
        if (this.entity.modal.title != '') {
            inputChartTitle.style.display = 'none';
        }
        inputChartTitle.setAttribute('type', 'text');
        $divTitle.append($labelTitle).append($(inputChartTitle));
        divTitleAndType.appendChild($divTitle[0]);

        var $divType = $('<div class="divResize chartType">');
        var $labelType = $('<label>').text(I18n.resource.dashboard.show.TYPE);
        var chartType = document.createElement('span');
        chartType.innerHTML = I18n.findContent(this.optionTemplate.name);
        $divType.append($labelType).append($(chartType));
        divTitleAndType.appendChild($divType[0]);

        var chartTitleShow = document.createElement('p');
        chartTitleShow.innerHTML = inputChartTitle.value;
        chartTitleShow.className = 'chartTitleShow';
        $divTitle[0].appendChild(chartTitleShow);
        if (this.entity.modal.title == '' || this.entity.modal.title == undefined) {
            chartTitleShow.style.display = 'none';
        }
        chartTitleShow.onclick = function () {
            chartTitleShow.style.display = 'none';
            inputChartTitle.style.display = 'inline-block';
            inputChartTitle.focus();
        };
        inputChartTitle.onchange = function () {
            if (inputChartTitle.value != '') {
                inputChartTitle.style.display = 'none';
                chartTitleShow.style.display = 'inline';
            }
            chartTitleShow.innerHTML = inputChartTitle.value;
            _this.entity.modal.title = inputChartTitle.value;

            _this.screen.isScreenChange = true;
        };

        _this.entity.modal.interval = '300000';//设置请求间隔

        //如果entity的isRender为false,添加到chartsCt中
        this.container.parentNode.appendChild(divMask);
        if (this.entity.isNotRender && this.screen.listEntity) {//兼容ModalMix
            var parentId = undefined, subChartIds;
                if(this.entity && this.entity.id){//observer
                    parentId = this.entity.id;
                }
                if(this.screen.store && this.screen.store.layout[0]){//factory
                    for(var i = 0, len = this.screen.store.layout[0].length, entity; i < len; i++){
                        entity = this.screen.store.layout[0][i];
                        if(entity.modal.type == 'ModalMix' && entity.modal.option.subChartIds &&  entity.modal.option.subChartIds.length > 0){
                            subChartIds = entity.modal.option.subChartIds;
                            for(var j = 0, l = subChartIds.length; j < l; j++){
                                if(subChartIds[j].id == this.entity.id){
                                    parentId = entity.id;
                                    break;
                                }
                            }
                        }
                        if(entity.modal.type == 'ModalAppBlind'&& entity.modal.option && entity.modal.option.length>0&&entity.modal.option[0].subChartIds.length>0){
                            var opts = entity.modal.option;
                            for(var m = 0;m<opts.length;m++){
                                if(opts[m].subChartIds[0].id===this.entity.id){
                                    parentId = entity.id;
                                    break;
                    }
                }
                        }
                    }
                }
                if(parentId){
                    $(document.getElementById('divContainer_' + parentId)).find('.chartsCt')[0].appendChild(this.container.parentNode.parentNode);
                }
        }

        this.divResizeByToolInit();

        //drag event of replacing entity

        this.executeConfigMode();
    };
    ModalAppButton.prototype.renderModal = function (e) {
        this.spinner && this.spinner.stop();
        var divAppButton, divIcon, divDetail, spName, spValue, spUnit;
        var $springContentCur = $(this.container);
        $springContentCur.css("overflow", "auto");
        var appButtonArr = _this.entity.modal.option.appButton;
        var len = appButtonArr.length;
        //默认颜色组
        var staticColor = ['#5A95F7', '#FBDE54', '#89D164', '#89D164', '#5A95F7', '#23D29C'];
        for (var i = 0 ; i < len; i++) {
            divAppButton = document.createElement('div');
            divAppButton.className = 'divAppButton';
            if (appButtonArr[i].link !== '') {
                divAppButton.setAttribute('data-link-to', appButtonArr[i].link);
            }
            if(appButtonArr[i].linkType !== ''){
                divAppButton.setAttribute('data-type', appButtonArr[i].linkType);
            }
            $(divAppButton).on('tap',function(){
                var triggerId = $(this).attr('data-link-to');
                var dataType =$(this).attr('data-type');
                var linkName = $(this).find('.divMonitorInfo .spName').text();
                if (!triggerId) return;

                if(!AppConfig.isMobile) {
                    ScreenManager.show(EnergyScreen, triggerId);
                }else{
                    var isIndex = dataType == 'EnergyScreen_M';
                    router.to({
                        typeClass: ProjectDashboard,
                        data: {
                            menuId:triggerId,
                            isIndex:isIndex,
                            name:linkName
                        }
                    })
                }
            });
            switch (len) {
                case 1:
                    divAppButton.className += ' divAppButtonOne col-xs-6 zepto-ev';
                    break;
                case 2:
                    divAppButton.className += ' divAppButtonTwo col-xs-6 zepto-ev';
                    break;
                case 3:
                    divAppButton.className += ' divAppButtonThree col-xs-4 zepto-ev';
                    break;
                case 4:
                    divAppButton.className += ' divAppButtonFour col-xs-6 zepto-ev';
                    break;
                case 5:
                    divAppButton.className += ' divAppButtonFive col-xs-4 zepto-ev';
                    break;
                case 6:
                    divAppButton.className += ' divAppButtonSix col-xs-4 zepto-ev';
                    break;
                default:
                    divAppButton.className += ' divAppButtonSix col-xs-4 zepto-ev';
                    break;
            }

            divIcon = document.createElement('div');
            var curType = appButtonArr[i].iconType?appButtonArr[i].iconType:'bootIcon';
            if(curType==='image'){
                divIcon.className = 'divIcon glyphicon';
                var imgDom = appButtonArr[i].icon.split('@*')[1];
                if(AppConfig.isMobile){
                    $(divIcon).html(imgDom);
                }else{
                    imgDom = appButtonArr[i].icon.split('@*')[1].split('=')[0]+'='+appButtonArr[i].icon.split('@*')[1].split('=')[1].replace(/(.{1})/,'"/');
                    $(divIcon).html(imgDom);
                }
            }else if(curType==='svg'){
                divIcon.className = 'divIcon glyphicon';
                $(divIcon).html(appButtonArr[i].icon.split('@*')[1]);
            }else{
                divIcon.className = 'divIcon ' + appButtonArr[i].icon;
            }
            if (appButtonArr[i].icon) divIcon.style.color = appButtonArr[i].iconColor;

            divDetail = document.createElement('div');
            divDetail.className = 'divMonitorInfo';

            spName = document.createElement('span');
            spName.className = 'spName';
            spName.textContent = appButtonArr[i].name;

            if (appButtonArr[i].backColor == "") {
                divIcon.style.background = 'transparent'//staticColor[i];//"-webkit-gradient(radial, 184 -25, 161, 220 -257, 465, from(#fabd3e), to(#f4ae32))";
            } else {
                divIcon.style.background = appButtonArr[i].backColor;
            }

            divDetail.appendChild(spName);

            divAppButton.appendChild(divIcon);
            divAppButton.appendChild(divDetail);

            _this.container.appendChild(divAppButton);

        }
        $(_this.container).addClass('backOperate');
        if($springContentCur.height()<200){
            $springContentCur.find('.divIcon').addClass('divIconLittle');
            $springContentCur.find('.divMonitorInfo').addClass('divMonitorInfoLit');
        }else{
            $springContentCur.find('.divIcon').removeClass('divIconLittle');
            $springContentCur.find('.divMonitorInfo').removeClass('divMonitorInfoLit');
        }
    };
    ModalAppButton.prototype.showConfigMode = function () {
    };

    ModalAppButton.prototype.showConfigModal = function () {
        _this.tempOpt = $.extend(true, {}, this.entity.modal);
        var configModalTpl = '\
                <div id="ModalAppButtonConfig" class="modal fade"  role="dialog" aria-labelledby="ttlNodeTool">\
                    <div class="modal-dialog">\
                        <div class="modal-content">\
                            <div class="modal-header">\
                                <span id="btnMonitorAdd" class="glyphicon glyphicon-plus-sign btnMonitorAdd grow"></span>\
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>\
                                <h4 class="modal-title" id="ttlNodeTool">Diagnosis Edit</h4>\
                            </div>\
                            <div class="modal-body gray-scrollbar" id="ctnMonitor">\
                            </div>\
                            <div class="modal-footer">\
                                <input type ="color">\
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\
                                <button type="button" class="btn btnSure btn-primary">Save</button>\
                            </div>\
                        </div>\
                    </div>\
                </div>';
        _this.$configModal = $('#ModalAppButtonConfig');
        if (_this.$configModal.length == 0) _this.$configModal = $(configModalTpl);
        _this.$configModal.appendTo($(_this.container).parentsUntil('.springContainer').parent().parent());
        var $ctnMonitor = _this.$configModal.find('#ctnMonitor').html('');

        var btnAdd = _this.$configModal.find('#btnMonitorAdd')[0];
        btnAdd.title = 'Monitor Type Add';
        btnAdd.onclick = function () {
            //if (_this.entity.modal.option && _this.entity.modal.option.appButton && _this.entity.modal.option.appButton.length === 6) {
            //    alert('最多添加6项！');
            //    return;
            //}
            $ctnMonitor.append(_this.createDivMonitor());
            _this.attachMonitorEvent();
        };
        if (this.entity.modal.option && this.entity.modal.option.appButton && this.entity.modal.option.appButton.length > 0) {
            for (var i = 0; i < this.entity.modal.option.appButton.length ; i++) {
                if(this.entity.modal.option.appButton[i].entityId===this.entity.id){
                	$ctnMonitor[0].appendChild(_this.createDivMonitor(this.entity.modal.option.appButton[i]));
				}
            }
        } else {
            $ctnMonitor[0].appendChild(_this.createDivMonitor());
        }
        _this.$configModal.modal('show');
        _this.$configModal.find('.btnSure').off('click').on('click', function () {
            if(_this.tempOpt.option.appButton&&_this.tempOpt.option.appButton.length>0){
                var appButtonArr = _this.tempOpt.option.appButton;
                for(var i = 0;i<appButtonArr.length;i++){
                    if(!appButtonArr[i].entityId){
                        appButtonArr[i].entityId = _this.entity.id;
                    }
                }
            }
            _this.entity.modal = $.extend(true, {}, _this.tempOpt);
            _this.$configModal.modal('hide');
        });

        _this.attachMonitorEvent();
    };

    ModalAppButton.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
    };
    ModalAppButton.prototype.close = function(){
        _this.entity = null;
        this.entity = null;
    }
    ModalAppButton.prototype.createDivMonitor = function (opt) {
        var divMonitor = document.createElement('div');
        divMonitor.className = 'divMonitor';
        var $divMonitor = $(divMonitor);
        //<span class="spLink"></span>\
        //<input class="iptLink form-control"></input>\
        divMonitor.innerHTML =
            '\
            <div class="divIcon"></div>\
            <div class="divMonitorInfo">\
                <div class="divName">\
                    <label>name:</label>\
                    <span class="spName"></span>\
                    <input class="iptName form-control" ></input>\
                </div>\
                <div class="divLink">\
                    <label>link:</label>\
                    <select class="form-control linkList"></select>\
                </div>\
            </div>\
            <div class="divMonitorDel glyphicon glyphicon-remove-circle"></div>';


        var $linkList = $divMonitor.find('select.linkList');
        $linkList[0].options.add(new Option(I18n.resource.dashboard.show.SELECT_LINK, ''));
        if(AppConfig.menu.length>0){
            for (var i in AppConfig.menu) {
                var option = new Option(AppConfig.menu[i], i);
                if (opt && opt.link && opt.link == i) {
                    option.selected = 'selected';
                }
                $linkList[0].options.add(option);
            }
        }else{
            if(_this.screen.facScreen) {
                var pageDataMenus = _this.screen.facScreen.pagePanel.getPageList();//getPagesData.serialize()
                for(var i = 0;i<pageDataMenus.length;i++){
                   var option = new Option(pageDataMenus[i].text, pageDataMenus[i]._id);
                    $(option).attr('data-type',pageDataMenus[i].type);
                    if (opt && opt.link && opt.link == pageDataMenus[i]._id) {
                        option.selected = 'selected';
                    }
                    $linkList[0].options.add(option);
                }
            }

        }
        $linkList[0].onchange = function () {
            //opt.link = $linkList[0].value;
            var index = $('#ctnMonitor').children().index($divMonitor);
            _this.tempOpt.option.appButton[index].link = $linkList[0].value;
            _this.tempOpt.option.appButton[index].linkType = $(this).find('option:selected').attr('data-type');
        };

        if (opt && opt.icon) {
            var curType = opt.iconType?opt.iconType:'bootIcon';
            if(curType==='image'||curType==='svg'){
                 $divMonitor.find('.divIcon').addClass('glyphicon');
                $divMonitor.find('.divIcon').html(opt.icon.split('@*')[1]);
            }else{
                $divMonitor.find('.divIcon').addClass(opt.icon);
            }
            if (opt.iconColor) $divMonitor.find('.divIcon').css({
                'color': opt.iconColor,
                'box-shadow': '0 0 15px ' + opt.iconColor
            })
        } else {
            $divMonitor.find('.divIcon').addClass('glyphicon glyphicon-plus').css('color', 'black');
        }

        if (opt && opt.name) {
            $divMonitor.find('.spName').show().text(opt.name);
            $divMonitor.find('.iptName').hide().val(opt.name)
        } else {
            $divMonitor.find('.spName').hide();
            $divMonitor.find('.iptName').show();
        }

        if(opt && opt.backColor){
            $divMonitor.css('background',opt.backColor);
        }

        //if (opt && opt.link) {
        //    $divMonitor.find('.spLink').show().text(opt.link);
        //    $divMonitor.find('.iptLink').hide().val(opt.link)
        //} else {
        //    $divMonitor.find('.spLink').hide();
        //    $divMonitor.find('.iptLink').show();
        //}

        if (!opt) {
            if ( !_this.tempOpt.option) {
                _this.tempOpt.option = {};
            }
            if (!_this.tempOpt.option.appButton) { 
                _this.tempOpt.option.appButton = [];
            }
            
            _this.tempOpt.option.appButton.push(
                {
                    icon: 'glyphicon glyphicon-plus',
                    iconColor: '#000000',
                    name: '',
                    link: '',
                    backColor: '',
                    linkType:''
                })
        }
        return divMonitor
    };

    ModalAppButton.prototype.attachMonitorEvent = function () {
        var $ctnMonitor = _this.$configModal.find('#ctnMonitor');
        var $iptColor;
        //选中状态
        var indexDivMonitor;
        $ctnMonitor.find(".divMonitor").off('click').on('click', function () {
            var currentBg = $(this).css('background');
            $ctnMonitor.find(".divMonitor").css("border", "1px dotted");

            indexDivMonitor = $ctnMonitor.find(".divMonitor").index($(this));

            $(this).css("border", "1px solid black");
            //var $modalFoot = $('#ModalAppButtonConfig').find('.modal-footer');
            //$modalFoot .find('input').empty().remove();
            //$modalFoot.prepend('<input type="color" value="'+currentBg+'"/>');
            //_this.attachMonitorEvent();
        })

        $(".modal-footer").find("input").off("change").on("change", function () {
            var colorVal = $(this).val();

            var rgb = colorVal.colorRgb().split("(")[1].split(")")[0];

            var r = rgb.split(",")[0];
            var g = rgb.split(",")[1];
            var b = rgb.split(",")[2];
            var hsl = rgbToHsl(r, g, b);
            var hslEndL = hsl[2] + 0.05;



            var rgbStartColor = hslToRgb(hsl[0], hsl[1], hsl[2]);
            var rgbEndColor = hslToRgb(hsl[0], hsl[1], hslEndL);

            var backColor = '-webkit-gradient(radial, 184 -25, 161, 220 -257, 465, from(rgb(' + rgbStartColor[0] + ',' + rgbStartColor[1] + ',' + rgbStartColor[2] + ')), to(rgb(' + rgbEndColor[0] + ',' + rgbEndColor[1] + ',' + rgbEndColor[2] + '))';
            if (indexDivMonitor!==0){
                if(!indexDivMonitor) return;
            }
            _this.tempOpt.option.appButton[indexDivMonitor].backColor = colorVal;
            $ctnMonitor.find(".divMonitor").eq(indexDivMonitor).css("background", colorVal);
        })
        //十六进制颜色值的正则表达式
        var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
        String.prototype.colorRgb = function () {
            var sColor = this.toLowerCase();
            if (sColor && reg.test(sColor)) {
                if (sColor.length === 4) {
                    var sColorNew = "#";
                    for (var i = 1; i < 4; i += 1) {
                        sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));
                    }
                    sColor = sColorNew;
                }
                //处理六位的颜色值
                var sColorChange = [];
                for (var i = 1; i < 7; i += 2) {
                    sColorChange.push(parseInt("0x" + sColor.slice(i, i + 2)));
                }
                return "RGB(" + sColorChange.join(",") + ")";
            } else {
                return sColor;
            }
        };
        function rgbToHsl(r, g, b) {
            r /= 255, g /= 255, b /= 255;
            var max = Math.max(r, g, b), min = Math.min(r, g, b);
            var h, s, l = (max + min) / 2;

            if (max == min) {
                h = s = 0; // achromatic
            } else {
                var d = max - min;
                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                switch (max) {
                    case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                    case g: h = (b - r) / d + 2; break;
                    case b: h = (r - g) / d + 4; break;
                }
                h /= 6;
            }

            return [h, s, l];
        }
        function hslToRgb(h, s, l) {
            var r, g, b;

            if (s == 0) {
                r = g = b = l; // achromatic
            } else {
                var hue2rgb = function hue2rgb(p, q, t) {
                    if (t < 0) t += 1;
                    if (t > 1) t -= 1;
                    if (t < 1 / 6) return p + (q - p) * 6 * t;
                    if (t < 1 / 2) return q;
                    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
                    return p;
                }

                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                var p = 2 * l - q;
                r = hue2rgb(p, q, h + 1 / 3);
                g = hue2rgb(p, q, h);
                b = hue2rgb(p, q, h - 1 / 3);
            }

            return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
        }
        //选择icon
        $(".divMonitor").on('click', '.divIcon', function (e) {
            e.stopPropagation();
            $('#ctnMonitor .divMonitor.selected').removeClass('selected');
            var $divMonitor = $(e.currentTarget).parentsUntil('.ctnMonitor', '.divMonitor').addClass('selected');
            var index = $ctnMonitor.children().index($divMonitor);
            var currentEntityId = _this.entity.id;
            var thisEntity = _this.tempOpt.option.appButton[index];
            new ModalIconManage().show(thisEntity,currentEntityId,callback);
            function callback(icon,color,iconType){
                if(iconType ==='svg'||iconType ==='image'){
                    $divMonitor.find('.divIcon').eq(0).html(icon.split('@*')[1]);
                    $divMonitor.find('.divIcon').eq(0).attr('class','divIcon glyphicon');
                }else{
                    $divMonitor.find('.divIcon').eq(0).html('');
                    $divMonitor.find('.divIcon')[0].className = 'divIcon ' + icon;
                    $divMonitor.find('.divIcon').css({
                        'color': color,
                        'box-shadow': '0 0 15px ' + color
                    });
                }
            }
        });
        //删除
        $(".divMonitor").on('click', '.divMonitorDel', function (e) {
            var index = $ctnMonitor.children().index($(e.currentTarget).parentsUntil('.ctnMonitor', '.divMonitor'));
            $ctnMonitor.children().eq(index).remove();
            _this.tempOpt.option.appButton.splice(index, 1);
            _this.tempOpt.points = [];
            for (var i = 0 ; i < $ctnMonitor.find('.divValue').length; i++) {
                _this.tempOpt.points.push($ctnMonitor.find('.divValue')[i].dataset.dsId);
            }
        });

        $(".divMonitor").on('click', '.spName', function (e) {
            $(e.currentTarget).hide();
            $(e.currentTarget).parentsUntil('.ctnMonitor', '.divMonitor').find('.iptName').show().focus();
        });

        //$(".divMonitor").on('click', '.spLink', function (e) {
        //    $(e.currentTarget).hide();
        //    $(e.currentTarget).parentsUntil('.ctnMonitor', '.divMonitor').find('.iptLink').show().focus();
        //});
        $ctnMonitor.off('blur').on('blur', 'input', function (e) {
            var $divMonitor = $(e.currentTarget).parentsUntil('.ctnMonitor', '.divMonitor');
            var index = $ctnMonitor.children().index($divMonitor);
            var value = $(e.currentTarget).val();
            if ($(e.currentTarget).hasClass('iptName')) {
                _this.tempOpt.option.appButton[index].name = value;
                if (!value) return;
                $(e.currentTarget).hide();
                $divMonitor.find('.spName').text(value).show();
            }
            _this.tempOpt.option.appButton[index].entityId = _this.entity.id;
            //else if ($(e.currentTarget).hasClass('iptLink')) {
            //    _this.tempOpt.option.appButton[index].link = value;
            //    if (!value) return;
            //    $(e.currentTarget).hide();
            //    $divMonitor.find('.spLink').text(value).show();
            //}
        });
        $ctnMonitor.find('.linkList').off('change').on('change', function (e) {
            var $divMonitor = $(e.currentTarget).parentsUntil('.ctnMonitor', '.divMonitor');
            var index = $ctnMonitor.children().index($divMonitor);
            var value = $(e.currentTarget).val();
            _this.tempOpt.option.appButton[index].entityId = _this.entity.id;
            if ($(e.currentTarget).hasClass('linkList')) {
                _this.tempOpt.option.appButton[index].link = value;
                if (!value) return;
            }
        })

    };
    return ModalAppButton;
})();
/*APP 按钮*/
/*app history start */
var ModalAppHistory = (function () {
    function ModalAppHistory(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        ModalBase.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);

        this.attachEvent();

        this.echarShowName = [];
        this.echarShowData = [];
        this.echarShowTime = undefined;

        this.dataInfo = [];
    };
    ModalAppHistory.prototype = new ModalBase();
    ModalAppHistory.prototype.showConfigMode = function () {

    },
    ModalAppHistory.prototype.updateModal = function (points) {
        
    },
    ModalAppHistory.prototype.optionTemplate = {
        name: 'toolBox.modal.APP_HISTORY_QUERY',
        parent:3,
        mode: ['appGauge'],
        maxNum: 1,
        title:'',
        minHeight:4,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type: 'ModalAppHistory',
        scroll:false,
        tooltip: {
            'imgPC': false,
            'imgMobile': true,
            'isSpecData':false,
            'desc': ''
        }
    };
    ModalAppHistory.prototype.echarsShow = function(data,time){
        var option = {
            
            tooltip : {
                trigger: 'axis',
                axisPointer : {            // 坐标轴指示器，坐标轴触发有效
                    type : 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
                },
                position: function (point, params, dom) {
                      // 固定在左部
                    return [50, point[1]];
                }
            },
            toolbox:{
                show:true,
                feature: {
                    magicType: {
                        type: ['line', 'bar', 'stack', 'tiled']
                    },
                    // dataView: {}
                },
                top:15,
                showTitle:true
            },
            grid: {
                left: '3%',
                right: '4%',
                bottom: '3%',
                top:50,
                containLabel: true
            },
            axisLabel:{
                formatter: function(value){
                    if(value >= 1000||value <= -1000){
                        return value/1000 + 'k';
                    }else{
                        return value;
                    }
                }
            },
            xAxis : [
                {
                    type : 'category',
                    axisTick: {
                        alignWithLabel: true
                    },
                    data : time
                }
            ],
            yAxis : [
                {
                    type : 'value'
                }
            ],
            series : data
        }
        if(this.chart){
            this.chart.clear();
        }
        var $chartContainer = $(this.container).find("#chartBox");
        var pWidth = $(this.container).width();
        $chartContainer.css('width',pWidth+'px');
        !this.chart && (this.chart = echarts.init($chartContainer[0], AppConfig.chartTheme));
        this.chart.setOption(option);
        this.spinner && this.spinner.stop();
    };

    ModalAppHistory.prototype.layoutStyle = function (points) {
        var _this = this;

        var $chartBox = $('<div id="chartBox" style="height:235px;"></div>');
        $chartBox.appendTo(this.container);

        var btnCtn = '<div class="switchBtnCtn">\
                            <div class="switch">\
                                <div class="circle"></div>\
                            </div>\
                            <button type="button" class="btn btn-default configBtn" i18n="toolBox.APP_HISTORY_QUERY.CONFIG_BTN"></button>\
                        </div>';
        $(btnCtn).appendTo(this.container);

        var $middlePointers = $('<div class="middlePointers gray-scrollbar"><div class="listDataBox"></div></div>');
        $middlePointers.appendTo(this.container);

        var $bottomBox = $('<div class="bottomBox" style="display:none;"></div>');
        $bottomBox.appendTo(this.container);
     //底部选择时间的容器
        var content = '<div id="bottomPoints">\
                    </div>\
                    <div id="bottomAppHistory">\
                        <div class="bottomAppHistoryTitle" i18n="toolBox.APP_HISTORY_QUERY.TITLE"></div>\
                        <span class="glyphicon glyphicon-remove closeBtn"></span>\
                        <div class="bottomAppHistoryContent">\
                            <div class="clearfix hisCommenBox">\
                                <div class="col-xs-4 hisCommen" i18n="toolBox.APP_HISTORY_QUERY.PERIOD">采样周期</div>\
                                <select class="col-xs-6 hisCommen" id="timePeriod" value="h1">\
                                    <option value="m5" i18n="toolBox.APP_HISTORY_QUERY.MINUTE">5分钟</option>\
                                    <option value="h1" i18n="toolBox.APP_HISTORY_QUERY.HOUR">1小时</option>\
                                    <option value="d1" i18n="toolBox.APP_HISTORY_QUERY.DAY">1天</option>\
                                    <option value="M1" i18n="toolBox.APP_HISTORY_QUERY.MONTH">1月</option>\
                                </select>\
                            </div>\
                            <div class="clearfix hisCommenBox">\
                                <div class="col-xs-4 hisCommen" i18n="toolBox.APP_HISTORY_QUERY.START_TIME">开始时间</div>\
                                <div class="input-append date col-xs-8">\
                                    <input id="datetimepickerStarts" class="form_datetime hisCommen" data-date="12-02-2012" type="text" readonly />\
                                    <span class="add-on"><i class="icon-th"></i></span>\
                                </div>\
                            </div>\
                            <div class="clearfix hisCommenBox">\
                                <div class="col-xs-4 hisCommen" i18n="toolBox.APP_HISTORY_QUERY.END_TIME">结束时间</div>\
                                <div class="input-append date col-xs-8">\
                                    <input id="datetimepickerEnds" class="form_datetime hisCommen" data-date="12-02-2012" type="text" readonly />\
                                    <span class="add-on"><i class="icon-th"></i></span>\
                                </div>\
                            </div>\
                            <div class="text-center">\
                                <button class="btnQuery" id="btnQuery"><span i18n="toolBox.APP_HISTORY_QUERY.SEARCH">查询</span></button>\
                            </div>\
                        </div>\
                    </div>';
        $(_this.container).find(".bottomBox").html(content);
        var nowDate = new Date();
        var endTime = nowDate.timeFormat(timeFormatChange('yyyy-mm-dd hh:00'));
        var startTime = nowDate.timeFormat(timeFormatChange("yyyy-mm-dd"))+' 00:00';
        var $datetimepickerStart = $(_this.container).find('#datetimepickerStarts');
        var $datetimepickerEnd = $(_this.container).find('#datetimepickerEnds');
        $datetimepickerStart.val(startTime);
        $datetimepickerEnd.val(endTime);

        $datetimepickerStart.datetimepicker({
            format: 'yyyy-mm-dd hh:00',
            pickerPosition: 'bottom-right',
            pickerReferer: 'input',
            startView: 2,
            minView: 2,
            autoclose: true,
            forceParse: false
        });
        $datetimepickerEnd.datetimepicker({
            format: 'yyyy-mm-dd hh:00',
            pickerPosition: 'bottom-right',
            pickerReferer: 'input',
            startView: 2,
            minView: 2,
            autoclose: true,
            forceParse: false
        });

        //拿到数据源的备注
        WebAPI.post('/analysis/datasource/getDsItemsById',points).done(function(result){
            for(var j=0,jLength=result.length;j<jLength;j++){
                var name = result[j].alias===''?result[j].value:result[j].alias;
                var singlePointer='<div class="singleContent activeSingle row" data-id='+result[j].id+'>\
                                        <div class="singleTitle col-xs-12">'+name+'</div>\
                                        <i class="iconfont icon-xuanze"></i>\
                                    </div>';
                
                $(singlePointer).appendTo($(_this.container).find(".listDataBox"));
                var obj={
                    id:result[j].id,
                    name:name
                }
                _this.echarShowName.push(obj);
            }
            var $allSingleContent = $(_this.container).find(".singleContent");
        })

    };

    ModalAppHistory.prototype.renderChart = function (id,startTime,endTime,tPeriod) {
        var _this = this;
        //当天
        var todayEndTime = new Date().format('yyyy-MM-dd HH:00:00');
        var todayStartTime = new Date().format("yyyy-MM-dd 00:00:00");

        var id = id === undefined?this.entity.modal.points:id;
        var startTime = startTime === undefined?todayStartTime:startTime;
        var endTime = endTime === undefined?todayEndTime:endTime;
        var tPeriod = tPeriod === undefined?'h1':tPeriod;
        WebAPI.post('/analysis/startWorkspaceDataGenHistogram', {
            dsItemIds: id,
            timeStart: startTime,
            timeEnd: endTime,
            timeFormat: tPeriod
        }).done(function (dataSrc) {
            var dataArr = dataSrc.list;
            var time = dataSrc.timeShaft;
            var datas = [];
            for(var i=0,length=dataArr.length;i<length;i++){
                for(var j=0,jLength=_this.echarShowName.length;j<jLength;j++){
                    if(dataArr[i].dsItemId === _this.echarShowName[j].id){
                        var obj = {
                            name: _this.echarShowName[j].name,
                            type:'bar',
                            data:dataArr[i].data,
                            itemStyle: {
                                 normal: {
                                    barBorderRadius: [5, 5, 0, 0]
                                 }
                            }
                        }
                        var info = {
                            id:_this.echarShowName[j].id,
                            name:_this.echarShowName[j].name
                        }
                        _this.echarShowData.push(obj);
                        datas.push(obj);
                        _this.dataInfo.push(info);
                    }   
                }
            }
            _this.echarShowTime = time;
            _this.echarsShow(datas,_this.echarShowTime);
        })
    };

    ModalAppHistory.prototype.renderModal = function () {
        var idsArr = this.entity.modal.points;

        this.layoutStyle(idsArr);

        I18n.fillArea($('.springContent'));

        this.renderChart(idsArr);
    };
    
    ModalAppHistory.prototype.attachEvent = function () {
        var _this = this;
        //查询按钮
       $(this.container).off('click').on("click","#btnQuery",function () {
            var tPeriod = $(_this.container).find("#timePeriod").val();
            var startTime = $(_this.container).find("#datetimepickerStarts").val().toDate().timeFormat('yyyy-mm-dd hh:ii:ss');
            var endTime = $(_this.container).find("#datetimepickerEnds").val().toDate().timeFormat('yyyy-mm-dd hh:ii:ss');
            var idArr = [];
            $(_this.container).find('.singleContent.activeSingle').each(function(){
                idArr.push($(this).attr('data-id'));
            })
            _this.renderChart(idArr,startTime,endTime,tPeriod);
            $(_this.container).find('.bottomBox').hide();
        })
       //中间各项点击事件
        $(this.container).off('click.singleContent').on("click.singleContent",".singleContent",function () {
            var activeId = $(this).attr('data-id');
            var data=[],time=[];
            if($(this).hasClass('activeSingle')){//取消选中
                $(this).removeClass('activeSingle');
            }else{//选中
                $(this).addClass('activeSingle');
            }
            if ($(_this.container).find('.singleContent.activeSingle').length !== 0) {
                $(_this.container).find('.circle').css('margin-left','0px');
                $(_this.container).find('.circle').closest('.switch').css('background','#5a96f9');
            }else{
                $(_this.container).find('.circle').css('margin-left','25px');
                $(_this.container).find('.circle').closest('.switch').css('background','#cccccc');
            }
            $(_this.container).find('.singleContent.activeSingle').each(function(){
                var id = $(this).attr('data-id');
                _this.echarShowName
                for(var i=0,length=_this.dataInfo.length;i<length;i++){
                    if(id === _this.dataInfo[i].id){
                       data.push(_this.echarShowData[i]);
                    }
                }
            })
            _this.echarsShow(data,_this.echarShowTime);
        });
        //配置按钮 
        $(this.container).off('click.configBtn').on("click.configBtn",".configBtn",function () {
            $(_this.container).find('.bottomBox').show();
        });
        $(this.container).off('click.closeBtn').on("click.closeBtn",".closeBtn",function () {
            $(_this.container).find('.bottomBox').hide();
        });
        //点击开关
        $(this.container).off('click.circle').on('click.circle','.circle',function(){
            if($(this).css('margin-left') === '0px'){
                $(this).css('margin-left','25px');
                $(this).closest('.switch').css('background','#cccccc');

                $(_this.container).find('.singleContent').removeClass('activeSingle');
                _this.echarsShow([],_this.echarShowTime);
            }else{
                $(this).css('margin-left','0px');
                $(this).closest('.switch').css('background','#5a96f9');

                $(_this.container).find('.singleContent').addClass('activeSingle');
                _this.echarsShow(_this.echarShowData,_this.echarShowTime);
            }
        })
    };

    return ModalAppHistory;
})();
/*app history end  */
/*APP Diagnostic Ranking start*/
var ModalAppDiagRanking = (function(){
     function ModalAppDiagRanking(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        ModalBase.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);
    };
    
    ModalAppDiagRanking.prototype = new ModalBase();

    ModalAppDiagRanking.prototype.optionTemplate = {
        name: 'toolBox.modal.APP_DIAGNOSTIC_RANKING',
        parent:3,
        mode: ['appDiagRanking'],
        maxNum: 1,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type: 'ModalAppDiagRanking',
        scroll:false,
        tooltip: {
            'imgPC': true,
            'imgMobile': true,
            'isSpecData':true,
            'desc': '#DiagStatics'
        }
    };
   
    ModalAppDiagRanking.prototype.updateModal = function (points) {
        
    },

    ModalAppDiagRanking.prototype.renderModal = function () {
        var _this =this;
        var dsItemIds = this.entity.modal.points;
        var diagType = this.entity.modal.option.diagType?this.entity.modal.option.diagType:'fault';
        var rankName;
        if(diagType==='equipment'){//设备
            rankName = I18n.resource.modalConfig.modalApp.EQUIPMENT_NAME;
        }else if(diagType==='zone'){
            rankName = I18n.resource.modalConfig.modalApp.ZONE_NAME;
        }else{
            rankName = I18n.resource.modalConfig.modalApp.FAULT_NAME;
        }
        
        WebAPI.post('/analysis/startWorkspaceDataGenPieChart',{dsItemIds: dsItemIds}).done(function(result){
            if($(_this.container).find(".alertError") || $(_this.container).find(".diagRanking")){
                $(_this.container).find(".alertError").remove();
                $(_this.container).find(".diagRanking").remove();
            }  
            var dataArr = result.dsItemList;
            if(result.dsItemList[0].data.indexOf('MonthRankList') !== -1){
                var data = JSON.parse(result.dsItemList[0].data).MonthRankList;
                var str = '<div class=" diagnosisBg gray-scrollbar scrollY"><table class="diagRanking" data-type="'+diagType+'">\
                        <thead class="bgColorTemp2 diagnosisThead">\
                            <tr>\
                                <th width="15%" title="'+I18n.resource.modalConfig.modalApp.RANKING+'">'+I18n.resource.modalConfig.modalApp.RANKING+'</th>\
                                <th title="'+rankName+'">'+rankName+'</th>\
                                <th title="'+I18n.resource.modalConfig.modalApp.MOTH_TIME+'">'+I18n.resource.modalConfig.modalApp.TIMES+'</th>\
                                '+(function(){
                                    if(data[0].energy !== undefined){
                                        return '<th title="'+I18n.resource.modalConfig.modalApp.ENERGY_SAVEING+'">'+I18n.resource.modalConfig.modalApp.ENERGY_SAVEING+'</th>';
                                    }else{
                                        return '';
                                    }
                                })()
                            +'</tr>\
                        </thead>\
                        <tbody>\
                        </tbody>\
                    </table><div>';
                $(_this.container).append($(str));
                for(var j=0,jLength=data.length;j<jLength;j++){
                    var sonContent = '<tr class="diagnosisTr borderColorTemp3 diagnosisStyle">\
                                    <td>'+(j+1)+'</td>\
                                    <td class="disgnosisName">'+data[j].name+'</td>\
                                    <td>'+data[j].count+'</td>\
                                    '+(function(){
                                        if(data[j].energy!== undefined){
                                            return '<td>'+data[j].energy+'</td>';
                                        }else{
                                            return '';
                                        }
                                    })()
                                +'</tr>';
                    $(_this.container).find(".diagRanking").find("tbody").append($(sonContent));
                }
                _this.spinner && _this.spinner.stop();
                function initDefaultDate(n,timeUnit) {
                    var curr_date = new Date();
                    if (timeUnit === 'd') {
                    curr_date.setDate(curr_date.getDate() + n);
                    } else if (timeUnit === 'M') {
                        curr_date.setMonth(curr_date.getMonth() + n);
                    } else if (timeUnit === 'y') {
                        curr_date.setFullYear(curr_date.getFullYear() + n);
                    }
                    var strYear = curr_date.getFullYear();
                    var strMonth = curr_date.getMonth()+1;
                    var strDay = curr_date.getDate();
                    var strHours = curr_date.getHours();
                    var strMinutes = curr_date.getMinutes();

                    var datastr = strYear + '-' + formatNumber(strMonth) + '-'
                        + formatNumber(strDay) +' '+ formatNumber(strHours) + ':' + formatNumber(strMinutes);
                    return datastr;
                }
                function formatNumber(value){
                    return (value < 10 ? '0' : '') + value;
                }
                $(_this.container).find('.diagnosisTr').off('click').click(function(){
                    var faultName = $(this).find('.disgnosisName').text().trim();
                    var diagType = $(this).parents('table.diagRanking').attr('data-type');
                    var faultInfos ={};
                    var postData = {
                        value:faultName,
                        type:diagType,
                        //faultName:faultName,
                        startTime:initDefaultDate(-1,'M')+':00',
                        endTime: new Date().format('yyyy-MM-dd HH:mm:ss'),
                        projId: AppConfig.projectId
                    }
                    if($(_this.container).parents('.indexContent').length === 0){
                        Spinner.spin($(_this.container)[0]);
                        var containerScreen = $(_this.container).closest('.html-layer');
                    }else{
                        Spinner.spin($(_this.container).parents('.indexContent')[0]);
                        var containerScreen = $(_this.container).parents('.indexContent');
                    }
                    WebAPI.post('/diagnosis/getFaultDetails',postData).done(function(faultDetail){
                        var faultDetailData = faultDetail.data;
                        faultInfos['faultName'] = faultName;
                        faultInfos['faultDetailData'] = faultDetailData;
                        faultInfos['containerScreen'] = containerScreen;
                        faultInfos['diagType'] = diagType;
                        new DiagnosisInfo().show(faultInfos);
                    })
                });
            }else{
                var alertError = '<div class="alertError" style="width:40%;height:12%;position:absolute;top:0;left:0;right:0;bottom:0;margin:auto;z-index:1200;background:#eee;color:#aaa;border-radius:6px;padding:10px;">所填数据点的格式不符合该控件所需的数据格式</div></div>'
                $(_this.container).append($(alertError))
            }
        })
    };
    
    ModalAppDiagRanking.prototype.showConfigMode = function () {

    },

    ModalAppDiagRanking.prototype.setModalOption = function (option) {
        this.entity.modal.option.diagType = option.diagType;
    };

    return ModalAppDiagRanking;
})()
/*APP Diagnostic Ranking end*/
/*APP Month History start*/
var ModalAPPMonthHistory = (function(){
    function ModalAPPMonthHistory(screen, entityParams, _renderModal) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        ModalBase.call(this, screen, entityParams, renderModal);
        this.entityOption = entityParams.modal.option;
        this.dsItems = undefined;

        this.layout();
        this.attachEvent();
    };
    ModalAPPMonthHistory.prototype = new ModalBase();

    ModalAPPMonthHistory.prototype.optionTemplate = {
        name: 'toolBox.modal.APP_MONTH_HISTORY_QUERY',
        parent:3,
        mode: ['appMonthHistory'],
        maxNum: 1,
        title:'',
        minHeight:2.5,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type: 'ModalAPPMonthHistory',
        tooltip: {
            'imgPC': false,
            'imgMobile': true,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalAPPMonthHistory.prototype.optionDefault = {
        title:{
            left:'center',
            textStyle:{
                color:'#000000'
            }
        },
        // color: ['rgb(194,53,49)'],
        tooltip : {
            trigger: 'axis',
            axisPointer : {            // 坐标轴指示器，坐标轴触发有效
                type : 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
            },
            backgroundColor:'rgba(0,0,0,0.6)',
            textStyle:{
                color:'#ffffff'
            }
        },
        legend:{
            data:[]
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '4%',
            containLabel: true
        },
        xAxis : [
            {
                type : 'category',
                axisTick: {
                    alignWithLabel: true
                },
                data : ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
            }
        ],
        yAxis : [
            {
                type : 'value'
            }
        ],
        series : []
    };

    ModalAPPMonthHistory.prototype.layout = function () {
        var showMonth = '<div id="topMonthShow" style="height:9%">\
                            <div class="col-xs-4 leftButton">\
                                <span class="glyphicon glyphicon-arrow-left"></span>\
                            </div>\
                            <div class="col-xs-4 month">\
                            </div>\
                            <div class="col-xs-4 rightButton">\
                                <span class="glyphicon glyphicon-arrow-right"></span>\
                            </div>\
                        </div>';
        var chartContainer = '<div id="chartContainer" style="height:91%"></div>';
        $(this.container).append(showMonth);
        $(this.container).append(chartContainer);
    };

    ModalAPPMonthHistory.prototype.getDsItemsById = function () {
        var ids = this.entity.modal.points;
        var _this = this;
        WebAPI.post('/analysis/datasource/getDsItemsById',ids).done(function(result){
            _this.dsItems = result;
        });;
    };

    ModalAPPMonthHistory.prototype.renderModal = function (start,end,month) {
        this.getDsItemsById();
        //显示的上一个月的数据
        var nowYear = Number(new Date().format("yyyy"));
        var nowMonth = Number(new Date().format('yyyy-MM-dd').split("-")[1]);
        var showYear,showMonth,startTime,endTime;
        if(1 < nowMonth&&nowMonth <= 10){
            showYear = nowYear;
            showMonth = '0'+(nowMonth - 1);
        }else if(10 < nowMonth && nowMonth <= 12){
            showYear = nowYear;
            showMonth = nowMonth - 1;
        }else if(nowMonth === 1){//就显示上一年12月份的时间
            showYear= nowYear - 1;
            showMonth = 12;
        }
        startTime = new Date().format(showYear+"-"+showMonth+"-01 00:00:00");
        var days = DateUtil.daysInMonth(new Date(startTime));
        endTime = new Date().format(showYear+"-"+showMonth+"-"+days+" 23:59:59");
        //日期显示上一个月的
        var topMonth = month === undefined?showMonth:month;
        $(this.container).find(".month").html(topMonth+" 月");
        //传送的数据
        var id = this.entity.modal.points;
        var tPeriod = 'd1';
        var timeStart = start === undefined?startTime:start;
        var timeEnd = end === undefined?endTime:end;

        WebAPI.post('/analysis/startWorkspaceDataGenHistogram', {
            dsItemIds: id,
            timeStart: timeStart,
            timeEnd: timeEnd,
            timeFormat: tPeriod
        }).done(function (result) {
            this.optionDefault.xAxis[0].data = [];
            this.optionDefault.series = [];
            this.optionDefault.title.text = [];
            this.optionDefault.legend.data = [];
            var dataList = result.list;
            var timeData = result.timeShaft;
            var timeArr = [];
            var datas = [];
            var ids = [];
            var obj = {
                name:'1',
                type:'bar',
                data:[]
            }
            for(var i=0,length=dataList.length;i<length;i++){
                datas.push(dataList[i].data);
                ids.push(dataList[i].dsItemId);
            }
            for(var j=0,jLength=datas.length;j<jLength;j++){
                for(var k=0,kLength=this.dsItems.length;k<kLength;k++){
                    if(this.dsItems[k].id === ids[j]){
                        obj.data = datas[j];
                        obj.name = this.dsItems[k].alias;
                        this.optionDefault.series.push(obj);
                        this.optionDefault.title.text = this.dsItems[k].alias;
                        this.optionDefault.legend.data.push(this.dsItems[k].alias);
                    }
                }
            }
            for(var t=0,tLength=timeData.length;t<tLength;t++){
                timeArr.push(timeData[t].split(" ")[0].split("-")[2])
            }

            this.optionDefault.xAxis[0].data = timeArr;

            
            var $chartContainer = $(this.container).find("#chartContainer");
            !this.chart && (this.chart = echarts.init($chartContainer[0], AppConfig.chartTheme));
            this.chart.setOption(this.optionDefault);
            this.spinner && this.spinner.stop();
        }.bind(this))
    };

    ModalAPPMonthHistory.prototype.attachEvent = function () {
        var _this = this;
        var leftCount = 0,rightCount = 0;
        var nowYear = Number(new Date().format("yyyy"));
        var current;
        $(this.container).find(".leftButton").click(function(){
            leftCount = leftCount+1;
            if(leftCount === 1){
                current = Number($(_this.container).find(".month").html().split(" ")[0]);//当前显示的
            }
            var value = (leftCount-current)/12;
            var yearNums,showYear,showMonth;
            if(value > 0){
                yearNums = parseInt(value)+1;
            }else if(value === 0){
                yearNums = 1;
            }else{
                yearNums = 0;
            }
            
            showYear = nowYear - yearNums;

            var showCurrentMonth = Number($(_this.container).find(".month").html().split(" ")[0]);//点击时 显示的时间
            if(1 < showCurrentMonth&&showCurrentMonth <= 10){
                showMonth = '0'+(showCurrentMonth - 1);
            }else if(10 < showCurrentMonth && showCurrentMonth <= 12){
                showMonth = showCurrentMonth - 1;
            }else if(showCurrentMonth === 1){//就显示上一年12月份的时间
                showMonth = 12;
            }
            $(_this.container).find(".month").html(showMonth);
            timeStart = new Date().format(showYear+"-"+showMonth+"-01 00:00:00");
            var days = DateUtil.daysInMonth(new Date(timeStart));
            timeEnd = new Date().format(showYear+"-"+showMonth+"-"+days+" 23:59:59");
            _this.renderModal(timeStart,timeEnd,showMonth);
        })
        $(this.container).find(".rightButton").click(function(){
            rightCount = rightCount+1;
            if(rightCount === 1){
                current = Number($(_this.container).find(".month").html().split(" ")[0]);//当前显示的
            }
            var value = (rightCount-(12-current))/12;
            var yearNums,showYear,showMonth;
            if(value > 0){
                yearNums = parseInt(value)+1;
            }else if(value === 0){
                yearNums = 1;
            }else{
                yearNums = 0;
            }
            showYear = nowYear - yearNums;

            var showCurrentMonth = Number($(_this.container).find(".month").html().split(" ")[0]);//点击时 显示的时间
            if(showCurrentMonth>=1&&showCurrentMonth < 9){
                showMonth = '0'+(showCurrentMonth + 1);
            }else if(showCurrentMonth >= 9){
                showMonth = showCurrentMonth + 1;
            }else if(showCurrentMonth === 12){//就显示上一年12月份的时间
                showMonth = '01';
            }
            $(_this.container).find(".month").html(showMonth);
            timeStart = new Date().format(showYear+"-"+showMonth+"-01 00:00:00");
            var days = DateUtil.daysInMonth(new Date(timeStart));
            timeEnd = new Date().format(showYear+"-"+showMonth+"-"+days+" 23:59:59");
            _this.renderModal(timeStart,timeEnd,showMonth);
        })
    };
    return ModalAPPMonthHistory;
})()
/*APP APP Month History end*/
/*app 百叶窗*/
var ModalAppBlind = (function(){

    function ModalAppBlind(screen, entityParams) {
        if (!screen) return;
        if (!entityParams) return;
        this.screen = screen;
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
        this.tempOpt = undefined;
    };
    ModalAppBlind.prototype = new ModalBase();
    ModalAppBlind.prototype.optionTemplate = {
        name: 'toolBox.modal.APP_BLIND',
        parent: 3,//图例的父级的index如
        mode: ['appGauge'],
        maxNum: 10,
        title: '',
        //defaultHeight: 4.5,
        //defaultWidth: 3,
        minHeight: 2,
        minWidth: 3,
        maxHeight: 6,
        maxWidth: 3,
        type: 'ModalAppBlind',
        scroll:false,
        tooltip: {
            'imgPC': false,
            'imgMobile': true,
            'isSpecData':false,
            'desc': ''
        }
    };
    ModalAppBlind.prototype.show = function(){
        this.init();
    }
    ModalAppBlind.prototype.init = function(){
        this.container.style.overflowX = 'hidden';
        this.container.style.overflowY = 'auto';
    }
    ModalAppBlind.prototype.renderModal = function (){
        var _this = this;
        //兼容数据
        if(this.entity.modal.option && this.entity.modal.option instanceof Array){
            var arrItem = this.entity.modal.option;
            this.entity.modal.option = {};
            this.entity.modal.option.arrItem = arrItem;
        }
        var blindOpt = undefined;
        _this.entity.modal.option && (blindOpt = _this.entity.modal.option.arrItem);

        if(!blindOpt||blindOpt.length===0) return;
        var $currentContainer = $(_this.container);
        var blindDivBox = '<div id="blindDivBox" class="gray-scrollbar"></div>';
        $currentContainer.append(blindDivBox);
        var $blindDivBox = $currentContainer.find('#blindDivBox');
        //去除重复的id
        function unique(arr) {
              var result = [], isRepeated;
              for (var i = 0, len = arr.length; i < len; i++) {
                  isRepeated = false;
                  for (var j = 0, len1 = result.length; j < len1; j++) {
                      if (arr[i].id === result[j].id) {
                          isRepeated = true;
                          break;
                      }
                 }
                 if (!isRepeated) {
                     result.push(arr[i]);
                 }
             }
             return result;
        }
        for(var m = 0;m<blindOpt.length;m++){
            var isExist = false;
            var classNameFlag;
            if(m%2 ===0){
                classNameFlag = 'blindContainerOdd';
            }else{
                classNameFlag = 'blindContainerEven';
            }
            for (var i = 0, item; i < _this.screen.store.layout.length; i++) {
                $currentContainer.css({ 'display': 'flex', 'overflow-y': 'hidden', 'flex-flow': 'wrap' });
                var currentLayout = _this.screen.store.layout[i];
                currentLayout = unique(currentLayout);
                for (var j = 0; j < currentLayout.length; j++) {
                    item = currentLayout[j];
                    if (blindOpt[m].subChartIds[0].id != item.id) continue;
                    isExist = true;
                    var modelClass, entity;
                    var blindContainerSin = '<div class="blindContainerSin '+classNameFlag+'">\
                                        <div class="blindConTitle bgColorTemp1 borderColorTemp1 blindConTitleCover" style="border-radius:0"><!--<span class="glyphicon glyphicon-align-justify" style="color:#ca2929;padding-right:10px;"></span>-->'+blindOpt[m].blindTitle+'<span class="iconfont icon-xiala rotArrow" style="display:block;float:right;margin-right:10px;font-size: 12px;"></span></div>\
                                        <div class="blindConContent gray-scrollbar blindConContentCover" style="width:100%;overflow-y:auto"></div>\
                                    </div>';
                    $blindDivBox.append(blindContainerSin);
                    $currentContainer.find('.blindConTitle').off('click').click(function(){
                        var $this = $(this);
                        if($this.siblings('.blindConContent').hasClass('showSibling')) return;
                        $currentContainer.find('.blindConContent').removeClass('showSibling').hide();
                        $currentContainer.find('.rotArrow').removeClass('rotArrowCur');
                        $this.find('.rotArrow').addClass('rotArrowCur');
                        $this.siblings('.blindConContent').addClass('showSibling').show().css({maxHeight: $blindDivBox.parent().height() - $('.blindContainerSin',$currentContainer).length*$('.blindContainerSin',$currentContainer).height()});
                    });
                    if (item.modal.type && item.modal.type != 'ModalNone') {
                        //regist IoC
                        modelClass = _this.screen.factoryIoC.getModel(item.modal.type);
                        if (!modelClass) continue;
                        if (item.isNotRender && _this.entity.modal.type == 'ModalAppBlind') {
                            //_this.screen.container = document.getElementById('divContainer_' + _this.entity.id);
                            item.scroll = false;
                            entity = new modelClass(_this, item);
                            _this.screen.listEntity[item.id] = entity;
                            if(item.modal.type==='ModalAppButton'){
                                entity.container.style.overflowY  = "auto";
                                entity.render();
                                var $currentBlindCon = $blindDivBox.find('.blindContainerSin').eq(m).children('.blindConContent');
                                $currentBlindCon.height($currentContainer.children('.springContainer').height());
                                $currentBlindCon.append($currentContainer.children('.springContainer'));
                                continue;
                            }
                            if ($.inArray(item.id, _this.screen.arrEntityOrder) < 0) {
                                _this.screen.arrEntityOrder.push(item.id);
                            }
                            if (item.modal.interval && item.modal.interval >= 0) {
                                for (var k = 0, point, kLen = item.modal.points.length; k < kLen; k++) {
                                    point = item.modal.points[k];
                                    if (_this.screen.requestPoints.indexOf(point) < 0) {
                                        _this.screen.requestPoints.push(point);
                                    }
                                }
                            }
                            if (item.modal.popId) {
                                if (!_this.screen.dictPopToEntity[item.modal.popId]) _this.screen.dictPopToEntity[item.modal.popId] = [];
                                _this.screen.dictPopToEntity[item.modal.popId].push(item.id);
                                if (_this.screen.requestPoints.indexOf(item.modal.popId) < 0) {
                                    _this.screen.requestPoints.push(item.modal.popId);
                                }
                            }
                            if(entity.optionTemplate.scroll !== false) {
                                //设置echart的高度
                                if (AppConfig.isMobile) {
                                    entity.container.style.height = ElScreenContainer.offsetHeight * entity.entity.spanR * 2/9  + 'px';
                                } else {
                                    entity.container.style.height = $blindDivBox.height() * entity.entity.spanR/6 + 'px';
                                }
                            }
                            entity.container.style.width = $(entity.container).parent().parent('.springContainer').width()+'px';
                            entity.container.style.overflowY  = "auto";
                            entity.render();
                        }
                    } else if (item.modal.type == 'ModalNone') {
                        modelClass = _this.screen.factoryIoC.getModel(item.modal.type);
                        //_this.screen.container = $('#divContainer_' + _this.entity.id).find('.springContent')[0];
                        entity = new modelClass(_this, item);
                        _this.screen.listEntity[item.id] = entity;
                        _this.screen.arrEntityOrder.push(item.id);
                        entity.render();
                        _this.screen.isForReport && entity.configure();
                    }

                    var $currentBlindCon = $blindDivBox.find('.blindContainerSin').eq(m).children('.blindConContent');
                    if(entity.optionTemplate.scroll !== false) {
                        if (!AppConfig.isMobile) {
                            $currentBlindCon.height($currentContainer.children('.springContainer').height());
                        }
                    }
                    $currentBlindCon.append($currentContainer.children('.springContainer'));
                }
            }
        }
        $currentContainer.find('#blindDivBox').find('.blindContainerSin:first-child .rotArrow').addClass('rotArrowCur');
        $currentContainer.find('#blindDivBox').find('.blindContainerSin').find('.blindConContent').hide();
        $currentContainer.find('#blindDivBox').find('.blindContainerSin:first-child').find('.blindConContent').addClass('showSibling').show();
        Spinner&&Spinner.stop();
    }
    ModalAppBlind.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
    }
    ModalAppBlind.prototype.configureModalNone = function($chartsCt,opt){
        //创建一个modalNone
        var spanC = 12, spanR = 3;
        //height width 和最后一个节点一样
        //if ($chartsCt.children().length > 0) {
        //    //return;
        //    var lastDiv = $chartsCt.children()[$chartsCt.children().length - 1];
        //    spanC = Math.round(parseInt(lastDiv.style.width.split('%')[0]) / 10) * 12 / 10;
        //    spanR = Math.round(parseInt(lastDiv.style.height.split('%')[0]) / 10) * 6 / 10;
        //}


        if (!this.container.classList.contains('chartsCt')) { 
            this.container = this.container.parentElement.getElementsByClassName('chartsCt')[0];
        }
        var entity = new ModalNone(this, {
            id: (+new Date()).toString(),
            spanC: spanC,
            spanR: spanR,
            modal: {type: "ModalNone"},
            isNotRender: true
        });
        this.screen.arrEntityOrder.push(entity.entity.id);
        this.screen.listEntity[entity.entity.id] = entity;


        opt.subChartIds = new Array();
        opt.subChartIds.push({id: entity.entity.id});
        entity.render();
        entity.configure();
        this.entity.modal = this.tempOpt;
    }
    ModalAppBlind.prototype.showConfigMode = function(){

    }
    ModalAppBlind.prototype.configure = function () {
        var _this = this;
        if(this.spinner) this.spinner.stop();
        if (this.chart) this.chart.clear();
        this.divResizeByMouseInit();

        //更改数据结构option原来是数组,改为对象
        if(this.entity.modal.option && this.entity.modal.option instanceof Array){
            var arrItem = this.entity.modal.option;
            this.entity.modal.option = {};
            this.entity.modal.option.arrItem = arrItem;
        }

        var divMask = document.createElement('div');
        divMask.className = 'springConfigMask';
        divMask.draggable = 'true';

        var btnRemove = document.createElement('span');
        btnRemove.className = 'glyphicon glyphicon-remove-circle springConfigRemoveBtn grow';
        btnRemove.title = 'Remove';
        btnRemove.onclick = function (e) {
            confirm('Are you sure you want to delete it ?', function () {
                if (_this.chart) _this.chart.clear();
                _this.tempOpt = _this.tempOpt?_this.tempOpt:_this.entity.modal;
                if(_this.tempOpt.option && _this.tempOpt.option.arrItem && _this.tempOpt.option.arrItem.length>0){
                    //先删除百叶窗内部子元素
                    for(var i = 0;i<_this.tempOpt.option.arrItem.length;i++){
                        for(var j = 0;j<_this.screen.arrEntityOrder.length;j++){
                            if(_this.tempOpt.option.arrItem[i].subChartIds.length===0) continue;
                            if(_this.tempOpt.option.arrItem[i].subChartIds[0].id===_this.screen.arrEntityOrder[j]){
                                _this.screen.removeEntity(_this.screen.arrEntityOrder[j]);
                            }
                        }
                    }
                    _this.tempOpt.option = [];
                }
                var oldIndex = _this.screen.arrEntityOrder.indexOf(_this.entity.id);
                _this.screen.removeEntity(_this.entity.id);

                //重新生成窗口
                var entity = new ModalNone(_this.screen, {
                    id: _this.entity.id,
                    spanC: _this.entity.spanC,
                    spanR: _this.entity.spanR,
                    modal: {type:"ModalNone"}
                }, _this.entity.id);
                _this.screen.arrEntityOrder.splice(oldIndex,0,entity.entity.id);
                _this.screen.listEntity[entity.entity.id] = entity;
                entity.render();
                entity.configure();
                entity.hasEdit = true;
                //_this = null;
            })
            
        };
        divMask.appendChild(btnRemove);
        //install button for mix
        var btnInstall = document.createElement('span');
        btnInstall.className = 'glyphicon glyphicon-cog springBlindConfigInstallBtn grow';
        btnInstall.title = 'config';
        
        //配置按钮
        btnInstall.onclick = function (e) {
            _this.showConfigModal();
        }
        divMask.appendChild(btnInstall);


        var btnHeightResize = document.createElement('div');
        var maxHeight = this.optionTemplate.maxHeight;
        var maxWidth = this.optionTemplate.maxWidth;
        var minHeight = this.optionTemplate.minHeight;
        var minWidth = this.optionTemplate.minWidth;
        btnHeightResize.className = 'divResize divHeightResize';
        btnHeightResize.innerHTML = '<label for="heightResize" >H: </label>' +
        '<input type="range" class="inputResize" id="heightResize" name="points" step="0.5" min="' + minHeight + '" max="' + maxHeight + '" value="' + _this.entity.spanR + '"/>' +
        '<h5 class="rangeVal">' + _this.entity.spanR + ' /6</h5>' +
        '<input type="text" class="rangeChange" value="' + _this.entity.spanR + '"/>';
        divMask.appendChild(btnHeightResize);
        var btnWidthResize = document.createElement('div');
        btnWidthResize.className = 'divResize divWidthResize';
        btnWidthResize.innerHTML = '<label for="widthResize" >W: </label>' +
        '<input type="range" class="inputResize" id="widthResize" name="points" step="0.5" min="' + minWidth + '" max="' + maxWidth + '" value="' + _this.entity.spanC + '"/>' +
        '<h5 class="rangeVal">' + _this.entity.spanC + ' /3</h5>' +
        '<input type="text" class="rangeChange" value="' + _this.entity.spanC + '"/>';
        divMask.appendChild(btnWidthResize);
        var divTitleAndType = document.createElement('div');
        divTitleAndType.className = 'divTitleAndType';
        divMask.appendChild(divTitleAndType);

        //chartCt
        var $chartCt = $('<div class="divResize chartsCt gray-scrollbar">');
        divMask.appendChild($chartCt[0]);


        var $divTitle = $('<div class="divResize chartTitle">');
        var $labelTitle = $('<label for="title">').text(I18n.resource.dashboard.show.TITLE);
        var inputChartTitle = document.createElement('input');
        inputChartTitle.id = 'title';
        inputChartTitle.className = 'form-control';
        inputChartTitle.value = this.entity.modal.title;
        inputChartTitle.setAttribute('placeholder',I18n.resource.dashboard.show.TITLE_TIP);
        if(this.entity.modal.title != ''){
            inputChartTitle.style.display = 'none';
                    }
        inputChartTitle.setAttribute('type','text');
        $divTitle.append($labelTitle).append($(inputChartTitle));
        divTitleAndType.appendChild($divTitle[0]);

        var $divType = $('<div class="divResize chartType">');
        var $labelType = $('<label>').text(I18n.resource.dashboard.show.TYPE);
        var chartType = document.createElement('span');
        chartType.innerHTML = I18n.findContent(this.optionTemplate.name);
        $divType.append($labelType).append($(chartType));
        divTitleAndType.appendChild($divType[0]);



        var chartTitleShow = document.createElement('p');
        chartTitleShow.innerHTML = inputChartTitle.value;
        chartTitleShow.className = 'chartTitleShow';
        $divTitle[0].appendChild(chartTitleShow);
        if(this.entity.modal.title == '' || this.entity.modal.title == undefined){
            chartTitleShow.style.display = 'none';
                }
        chartTitleShow.onclick = function(){
            chartTitleShow.style.display = 'none';
            inputChartTitle.style.display = 'inline-block';
            inputChartTitle.focus();
        };
        inputChartTitle.onblur = function(){
            if (inputChartTitle.value != ''){
                inputChartTitle.style.display = 'none';
                chartTitleShow.style.display = 'inline';
            }
            chartTitleShow.innerHTML = inputChartTitle.value;
            _this.entity.modal.title = inputChartTitle.value;
        };


        this.container.parentNode.appendChild(divMask);
        this.divResizeByToolInit();

        //drag event of replacing entity
        divMask.ondragstart = function (e) {
            //e.preventDefault();
            e.dataTransfer.setData("id", $(e.target).closest('.springContainer').get(0).id.replace('divContainer_', ''));
        };
        divMask.ondragover = function (e) {
            e.preventDefault();
        };
        divMask.ondragleave = function (e) {
            e.preventDefault();
        };
        this.showConfigMode();
    }
    ModalAppBlind.prototype.attBlindEvent = function(){
        //标题框失去焦点事件
        var _this = this;
        $('.blindNameEnter').off('blur').blur(function(){
            var $this = $(this);
            var currentTitle = $this.val().trim();
            if(currentTitle ==='') return;
            var $currentBlind = $this.parents('.divBlind');
            $this.hide();
            $this.siblings('.blindNameShow').text(currentTitle).css('display','inline-block');
            var index = $('.divBlind').index($currentBlind);
            _this.tempOpt.option.arrItem[index].blindTitle = currentTitle;
        });
        $('.blindNameShow').off('click').click(function(){
            var $this = $(this);
            var currentTitle = $this.text();
            $this.hide();
            $this.siblings('.blindNameEnter').val(currentTitle).css('display','inline-block').focus();
        });
        $('.deleteBlind').off('click').click(function(){
            var $this = $(this);
            var $parents =  $this.parents('.divBlind');
            var parentId = $parents.attr('data-id');
            for(var i = 0;i<_this.tempOpt.option.arrItem.length;i++){
                var currentOpt ;
                if(_this.tempOpt.option.arrItem[i].domDataId.toString()===parentId){
                    currentOpt = _this.tempOpt.option.arrItem[i];
                    if(currentOpt&&currentOpt.subChartIds.length!==0){
                        for(var j = 0;j<_this.screen.arrEntityOrder.length;j++ ){
                            if(currentOpt.subChartIds[0].id===_this.screen.arrEntityOrder[j]){
                                //处理modalNone的情况
                                var isNotModalNone = false;
                                if($('#divContainer_'+_this.screen.arrEntityOrder[j]).length>0&&$('#divContainer_'+_this.screen.arrEntityOrder[j]).find('.divTitleAndType').length>0){
                                    isNotModalNone = true;
                                }
                                if(!isNotModalNone){
                                    if (_this.chart) _this.chart.clear();
                                    _this.tempOpt.option.arrItem.splice(i,1);
                                    $parents.empty().remove();
                                    i = i-1;
                                }
                                var num = i;
                                $('#divContainer_'+_this.screen.arrEntityOrder[j]).find('span.springConfigRemoveBtn').trigger('click',callback);
                                function callback(isDelete){
                                    if(isDelete){
                                        if (_this.chart) _this.chart.clear();
                                        _this.tempOpt.option.arrItem.splice(num,1);
                                        $parents.empty().remove();
                                    }
                                }
                            }
                        }
                    }else{
                        _this.tempOpt.option.arrItem.splice(i,1);
                        $parents.empty().remove();
                        i = i-1;
                    }
                }
            }
            _this.entity.modal.option = _this.tempOpt.option;
        });
    }
    ModalAppBlind.prototype.createDivBlind = function(opt){
        var divBlind = document.createElement('div');
        divBlind.className = 'divBlind';
        if(opt&&opt.domDataId){
            divBlind.setAttribute('data-id',opt.domDataId);
        }else{
           var nowValue = new Date().valueOf();
            divBlind.setAttribute('data-id',nowValue);
        }
        var $divBlind = $(divBlind);

        divBlind.innerHTML =
            '<label class="blindName">标题：</label>\
            <span class="blindNameShow"></span>\
            <input type="text" class="blindNameEnter"/>\
            <span class="deleteBlind glyphicon glyphicon-remove-circle"></span>\
            ';
        //当有数据时填充数据
        if(opt&&opt.blindTitle){
            $divBlind.find('.blindNameShow').text(opt.blindTitle).css('display','inline-block');
            $divBlind.find('.blindNameEnter').hide();
        }
        if(!opt){
            if(!this.tempOpt.option){
                this.tempOpt.option = {};
                this.tempOpt.option.arrItem = [];
            }else if(this.tempOpt.option instanceof Array){//为了兼容老数据
                var arrItem = this.tempOpt.option;
                this.tempOpt.option = {};
                this.tempOpt.option.arrItem = arrItem;
            }
            this.tempOpt.option.arrItem.push(
                {
                    id: '',
                    domDataId:nowValue,
                    title: '',
                    blindTitle: '',
                    modalType: '',
                    subChartIds: []
                })
    };
        return divBlind;
    }
    ModalAppBlind.prototype.showConfigModal = function(){
        var _this = this;
        var $blindChartShow = $('#blindChartShow');
        $blindChartShow.empty().remove();
        if ($blindChartShow.length===0) {
            $blindChartShow = $('<div class="modal fade" id="blindChartShow"></div>');
        }
        $('#paneContent').append($blindChartShow);
        var blindChartCon = '<div class="modal-dialog"><div class="modal-content">' +
                            '<div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>' +
                            '<h4 class="modal-title">APP百叶窗</h4><span class="glyphicon glyphicon-plus-sign blindAddBtn grow" style=""></span></div>' +
                            '<div class="modal-body gray-scrollbar">' +
                            '</div>' +
                            '<div class="modal-footer"><button type="button" class="btn btn-primary" data-dismiss="modal" id="btnBlindListShow">确定</button></div>' +
                            '</div></div>';
        $blindChartShow.append(blindChartCon);
        _this.tempOpt =_this.tempOpt?_this.tempOpt: $.extend(true, {}, _this.entity.modal);
        $blindChartShow.find('.modal-body').html('<div class="row" style="margin:15px 0;">\
                        <div class="col-xs-3">背景颜色</div>\
                        <div class="col-xs-2">\
                        <select id="selBgColor">\
                        <option value="transparent">无</option>\
                        <option value="#ffffff">白</option>\
                        <option value="#000000">黑</option>\
                        <option value="#337ab7">蓝</option>\
                        <option value="#5cb85c">绿</option>\
                        <option value="custom">自定义</option>\
                        </select>\
                        </div>\
                        <div class="col-xs-2"><input type="input" id="iptBgColor" placeholder="#ffffff" style="width:60px;display:none;"/></div>\
                        <div class="col-xs-2"><input type="color" class="" id="bgColorView" style="display:none;"/></div>\
                        </div>');
        if(!_this.tempOpt.option || !_this.tempOpt.option.arrItem || _this.tempOpt.option.arrItem.length===0) {
            $blindChartShow.find('.modal-body').append(_this.createDivBlind());
        }else{
            for (var i = 0; i < _this.tempOpt.option.arrItem.length; i++) {
                var item = _this.tempOpt.option.arrItem[i];
                var isExist = false;
                for (var j in _this.screen.listEntity) {
                    if(item.subChartIds.length===0){continue;}
                    if (item.subChartIds[0].id === j) {
                        isExist = true;
                        break;
                    }
                }
                if (!isExist) {
                    _this.tempOpt.option.arrItem.splice(i, 1);
                    i = i-1;
                } else {
                    $blindChartShow.find('.modal-body').append(_this.createDivBlind(_this.tempOpt.option.arrItem[i]));
                }
            }
        }
        $blindChartShow.modal('show');
        $blindChartShow.find('.blindAddBtn').off('click').click(function(e){
            $blindChartShow.find('.modal-body').append(_this.createDivBlind());
            _this.attBlindEvent();
        });
        _this.attBlindEvent();

        var $iptBgColor = $('#iptBgColor', $blindChartShow);
        var $bgColorView = $('#bgColorView', $blindChartShow);
        var $selBgColor = $('#selBgColor', $blindChartShow);
        //确定按钮
        $('#btnBlindListShow').off('click').click(function(){
            var opts = _this.tempOpt.option.arrItem;
            if(opts) {
                var $chartsCt = _this.container.classList.contains('chartsCt') ? $(_this.container) : $(_this.container).siblings().find('.chartsCt');
                if (opts[0].subChartIds.length === 0) {
                    $chartsCt.children().empty().remove();
                    for (var i = 0; i < opts.length; i++) {
                        _this.configureModalNone($chartsCt,opts[i]);
                    }
                }else {
                    var $containerChartsCt = $(_this.container);
                    if(_this.screen.arrEntityOrder.length===1){
                        _this.tempOpt.option = [];
                        return;
                    }
                    for (var i = 0; i <opts.length; i++){
                        var isExist = false;
                        var currentOption =$containerChartsCt.children('.springContainer').length>0?$containerChartsCt.children('.springContainer'): $containerChartsCt.siblings('.springConfigMask').find('.chartsCt').find('.springContainer') ;
                        for (var j = 0; j <  currentOption.length; j++) {
                            var currentId = currentOption[j].id.split('_')[1];
                            if(opts[i].subChartIds.length!==0) {
                                if (currentId === opts[i].subChartIds[0].id) {
                                    isExist = true;
                                    continue;
                                }
                            }
                        }
                        if(!isExist){
                            _this.configureModalNone($chartsCt,opts[i]);
                        }
                    }
                }
                _this.entity.modal.option.bgColor = $iptBgColor.val();//背景颜色
            }
        });

        _this.entity.modal.option && setShow(_this.entity.modal.option.bgColor);

        $selBgColor.off('change').on('change', function(e){
            setShow(this.value,e);
        });

        $iptBgColor.off('input').on('input', function(){
            $bgColorView.val(this.value);
        });


        $blindChartShow.children('.modal').modal();

        function setShow(selected, event){
            if(selected === 'transparent'){
                $bgColorView.hide();
            }else{
                $bgColorView.val(selected);
                $bgColorView.show();
            }

            if(selected === 'custom'){
                $iptBgColor.show();
                $iptBgColor.val('').focus();
            }else{
                $iptBgColor.hide();
                $iptBgColor.val(selected);
            }

            if(!event){
                $selBgColor.val(selected);
                if(!$selBgColor.val()){
                    $selBgColor.val('custom');
                    $iptBgColor.val(selected).show().focus();
                }
            }
        }
    }
    return ModalAppBlind;
})()
/*app 百叶窗*/

/*app饼图*/
var ModalAppPie = (function(){
    function ModalAppPie(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if (!screen) return;
        this.screen = screen;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        ModalBase.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);
        this.entityOption = entityParams.modal.option;
    };
    ModalAppPie.prototype = new ModalBase();

    ModalAppPie.prototype.optionTemplate = {
        name: 'toolBox.modal.APP_PIE',
        parent: 3,
        mode: ['appGauge'],
        maxNum: 10,
        title: '',
        //defaultHeight: 4.5,
        //defaultWidth: 3,
        minHeight: 2,
        minWidth: 3,
        maxHeight: 6,
        maxWidth: 12,
        type: 'ModalAppPie',
        tooltip: {
            'imgPC': true,
            'imgMobile': true,
            'isSpecData':true,
            'desc': '#EnergyStruct'
        }
    };

    ModalAppPie.prototype.show = function () {
        this.init();
    };

    ModalAppPie.prototype.init = function () {
        this.container.style.overflowX = 'hidden';
        this.container.style.overflowY = 'auto';
    };
    ModalAppPie.prototype.renderModal = function () {
        this.entity.modal.interval = 5;
        var $appPieTotalBox = $(this.container).find('.appPieTotalBox');
        if($appPieTotalBox.length > 0) return;
         var appPieTotalBox = '<div class="appPieTotalBox"><div class="appPieTextShow">\
                <div class="appPieTotalBoxTitle"><span>能耗统计</span></div>\
                <div class="leftAppChartLegend divAppChartTip row">\
                </div>\
                <div class="divAppEnergyLabel">\
                    <div class="ctnRealVal">\
                        <div class="divRealVal">\
                            <span class="spLabelName">今日能耗：</span></br>\
                            <span class="spRealVal spTodayEnergy"></span>\
                        </div>\
                        <div class="divRealVal">\
                            <span class="spLabelName">昨日能耗：</span></br>\
                            <span class="spRealVal spYestEnergy"></span>\
                        </div>\
                        <div class="divRealVal">\
                            <span class="spLabelName">今日费用：</span></br>\
                            <span class="spRealVal spAppTodayCost"></span>\
                        </div>\
                        <div class="divRealVal">\
                            <span class="spLabelName">昨日费用：</span></br>\
                            <span class="spRealVal spAppYestCost"></span>\
                        </div>\
                    </div>\
                    <div class="ctnPercentage">\
                        <div class="divPercentage">\
                            <span class="spPercentVal spTodayEnergyPercent">\
                            </span>\
                            <span class="spPercentIcon">\
                            </span>\
                        </div>\
                        <div class="divPercentage">\
                            <span class="spPercentVal spYestEnergyPercent">\
                            </span>\
                            <span class="spPercentIcon">\
                            </span>\
                        </div>\
                        <div class="divPercentage">\
                            <span class="spPercentVal spAppTodayCostPercent">\
                            </span>\
                            <span class="spPercentIcon">\
                            </span>\
                        </div>\
                        <div class="divPercentage">\
                            <span class="spPercentVal spAppYestCostPercent">\
                            </span>\
                            <span class="spPercentIcon">\
                            </span>\
                        </div>\
                    </div>\
                </div>\
            </div>\
            <div class="divAppChart " id="divEnergyChart">\
                <div class="divAppChildChart divAppItemEnergy"></div>\
                <div class="divAppChildChart divAppTotalEnergy"></div>\
            </div>\
            </div>';

        $(this.container).append(appPieTotalBox);
        $(this.container).find('.divAppItemEnergy').css({width: $(this.container).width()*0.6, height: $(this.container).height()});
        $(this.container).find('.divAppTotalEnergy').css({width: $(this.container).width()*0.37, height: $(this.container).height()});
    };

    ModalAppPie.prototype.updateModal = function (point) {

        var $currentContainer = $(this.container);

        $currentContainer.find('.panel-default').css('background-color','#fff')

        var data = JSON.parse(point[0].data);

        //左侧对应
        var nameList = [];
        var pointList = [];
        var spIconColor = ['#6dbef3', '#008ae2', '#028f68', '#00a045', '#6cc332', '#eeed00'];
        var colorJ = 0;
        var $leftAppChartLegend = $currentContainer.find('.leftAppChartLegend');
        $leftAppChartLegend.children().empty().remove();
        var projectId = data.EnergyList[0].projectId;
        if(!projectId){
            if(AppConfig.project && AppConfig.project.bindId){
                projectId = AppConfig.project.bindId;
            }else{
                projectId = AppConfig.projectId;
            }
        }
        for(var i = 0;i<data.EnergyList[0].children.length;i++){
            var item = data.EnergyList[0].children[i];
            nameList.push(item.name);
            pointList.push('@'+projectId+'|'+item.accumEnergyPoint);//AppConfig.projectId
            var singleLegendDiv = '<div class="spAppChartLegend col-xs-6">\
                                <span class="spIcon" style="background-color:'+spIconColor[colorJ]+'"></span>\
                                <span class="spName">\
                                </span>\
                            </div>'
            $leftAppChartLegend.append(singleLegendDiv);
            if(colorJ===spIconColor.length-1) colorJ = 0;
            $currentContainer.find('.appPieTotalBox').find('.spAppChartLegend').eq(i).find('.spName').text(item.name);
            colorJ++;
        }
        var accumPostData = {
            dsItemIds: pointList,//数组
            timeEnd: new Date().format('yyyy-MM-dd HH:mm:ss'),
            timeFormat: 'm5',
            timeStart: new Date().format('yyyy-MM-dd') + ' 00:00:00'
        }
        WebAPI.post('/analysis/startWorkspaceDataGenHistogram',accumPostData ).done(function (result) {
            if (result&&result.list&&result.list.length!==0) {
                var dataArr = [];
                for(var i = 0;i<result.list.length;i++){
                    if(result.list[i].data&&result.list[i].data.length>0){
                        dataArr.push({value:(result.list[i].data[result.list[i].data.length-1]-result.list[i].data[0]).toFixed(2),name:nameList[i]});
                    }else{
                        dataArr.push({value:0,name:nameList[i]});
                    }

                }
                var $divAppItemEnergy = $currentContainer.find('.divAppItemEnergy');
                var leftOption = {
					color:['#6dbef3', '#008ae2', '#028f68', '#00a045', '#6cc332', '#eeed00'],
                    tooltip : {
                        trigger: 'item'
                    },
                    calculable : false,
                    legend: {
                        show:false,
                        data:nameList
                    },
                    toolbox: {
                        show : false
                    },
                    series : [
                        {
                            name:'能耗(kWh)',
                            type:'pie',
                            radius:['40%','60%'],
                            clockWise:false,
                            center:['48%','33%'],
                            label:{
                                normal:{
                                    textStyle:{
                                        color:'#fff'
                                    }
                                }
                            },
                            labelLine :{
                                normal :{
                                    length :3,
                                    length2:3
                                }
                            },
                            itemStyle : {
                                normal : {
                                    borderColor:'transparent',
                                    shadowBlur: 40,
                                    shadowColor: 'rgba(51, 51, 51, 0.5)',//'rgba(200, 200, 200, 0.5)'
                                    label : {
                                        show : true,
                                        formatter : function (params){
                                            return params.percent.toFixed(1) + '%'
                                        },
                                        textStyle:{
                                            color:'#dbeafe',
                                            fontFamily:'Microsoft Yahei'
                                        }
                                    },
                                    labelLine : {
                                        show : true,
                                        length:0
                                    }
                                }},

                            data:dataArr
                        }
                    ]
                }
                //if(dataArr.length>1){
                //    leftOption.color = ['#e6b560','#6aa0f1','#8259ce','#d374d7'];
                //}
                 var chart = echarts.init($divAppItemEnergy[0]);
                chart.setOption(leftOption);
            }
        });
        //右侧数据
        var dsItemIds = [];
        dsItemIds.push('@'+projectId+'|'+data.EnergyList[0].accumCostPoint);
        dsItemIds.push('@'+projectId+'|'+data.EnergyList[0].accumEnergyPoint);
        var postData = {
            dsItemIds: dsItemIds,//数组
            timeEnd: new Date().format('yyyy-MM-dd HH:mm:ss'),
            timeFormat: 'm5',
            timeStart: new Date().format('yyyy-MM-dd') + ' 00:00:00'
        }
        var yestodayEnergy,yestodayCost,todayEnergy,todayCost,todayEnergyEnd,todayCostEnd;
        WebAPI.post('/analysis/startWorkspaceDataGenHistogram', postData).done(function (resultData){
            //console.log(resultData);
            if(resultData.list.length>0){
                var todayEnergyDataAll = resultData.list[1].data;
                var todayCostDataAll = resultData.list[0].data;
                if(point.length===2){
                    todayEnergyEnd = point[1].data;
                    todayCostEnd =  point[1].data;
                }else if(point.length===3){
                    todayEnergyEnd = point[2].data;
                    todayCostEnd =  point[1].data;
                }else{
                    todayEnergyEnd = todayEnergyDataAll[todayEnergyDataAll.length-1];
                    todayCostEnd = todayCostDataAll[todayCostDataAll.length-1];
                }
                if(todayEnergyDataAll.length!==0){
                    //todayEnergy = todayEnergyDataAll[todayEnergyDataAll.length-1] - todayEnergyDataAll[0];
                    todayEnergy = todayEnergyEnd - todayEnergyDataAll[0];
                }else{
                    todayEnergy=0;
                }
                if(todayCostDataAll.length!==0){
                    //todayCost = todayCostDataAll[todayCostDataAll.length-1] - todayCostDataAll[0];
                    todayCost = todayCostEnd - todayCostDataAll[0];
                }else{
                    todayCost=0;
                }
            }
            var $divAppEnergyLabel = $currentContainer.find('.divAppEnergyLabel');
            $divAppEnergyLabel.find('.spTodayEnergy').text(kIntSeparate(todayEnergy)+' kwh');
            $divAppEnergyLabel.find('.spAppTodayCost').text('￥ '+ kIntSeparate(todayCost));
            var postDataYes = {
                dsItemIds: dsItemIds,//数组
                timeEnd: new Date(new Date().valueOf()-86400000).format('yyyy-MM-dd') + ' 23:59:59',//new Date().format('yyyy-MM-dd')+' 00:00:00',
                timeFormat: 'm5',
                timeStart: new Date(new Date().valueOf()-86400000).format('yyyy-MM-dd') + ' 00:00:00'
            }
            WebAPI.post('/analysis/startWorkspaceDataGenHistogram', postDataYes).done(function (resultDataYes){
                 //console.log(resultDataYes);
                if(resultDataYes.list.length>0){
                    var yestodayEnergyDataAll = resultDataYes.list[1].data;
                    var yestodayCostDataAll = resultDataYes.list[0].data;
                    if(yestodayEnergyDataAll.length!==0){
                        yestodayEnergy = yestodayEnergyDataAll[yestodayEnergyDataAll.length-1] - yestodayEnergyDataAll[0];
                    }else{
                        yestodayEnergy=0;
                    }
                    if(yestodayCostDataAll.length!==0){
                        yestodayCost = yestodayCostDataAll[yestodayCostDataAll.length-1] - yestodayCostDataAll[0];
                    }else{
                        yestodayCost=0;
                    }
                    $divAppEnergyLabel.find('.spYestEnergy').text(kIntSeparate(yestodayEnergy)+' kwh');
                    $divAppEnergyLabel.find('.spAppYestCost').text('￥ '+kIntSeparate(yestodayCost));
                    $divAppEnergyLabel.find('.spTodayEnergyPercent').text((todayEnergy*100/(todayEnergy+yestodayEnergy)).toFixed(0)+'%');
                    $divAppEnergyLabel.find('.spYestEnergyPercent').text((yestodayEnergy*100/(todayEnergy+yestodayEnergy)).toFixed(0)+'%');
                    $divAppEnergyLabel.find('.spAppTodayCostPercent').text((todayCost*100/(todayCost+yestodayCost)).toFixed(0)+'%');
                    $divAppEnergyLabel.find('.spAppYestCostPercent').text((yestodayCost*100/(todayCost+yestodayCost)).toFixed(0)+'%');
                    var labelTop = {
                        normal : {
                            color:'#6aa7fd',
                            label : {
                                show : false,
                                position : 'center',
                                formatter : '{b}',
                                textStyle: {
                                    baseline : 'bottom'
                                }
                            },
                            labelLine : {
                                show : false
                            }
                        }
                    };
                    var labelFromatter = {
                        normal : {
                            label : {
                                show: false,
                                formatter : function (params){
                                    return 100 - params.value + '%'
                                },
                                textStyle: {
                                    baseline : 'top'
                                }
                            }
                        }
                    };
                    var labelBottom = {
                        normal : {
                            color: 'white',
                            label : {
                                show : false,
                                position : 'center'
                            },
                            labelLine : {
                                show : false
                            }
                        },
                        emphasis: {
                            color: 'rgba(0,0,0,0)'
                        }
                    };
                    var borderItemStyle ={
                        normal : {
                            color: '#6aa7fd',
                            label : {
                                show : false
                            },
                            labelLine : {
                                show : false
                            }
                        }
                    };
                    var radius = [0, '16%'];
                    var borderRadius = ['17%','21%'];
                    var rightOption = {
                        legend: {
                            show:false,
                            data:['今日能耗','昨日能耗','今日费用','昨日费用']
                        },
                        title : {
                            text: 'The App World',
                            show:false
                        },
                        toolbox: {
                            show : false
                        },
                        series : [
                            {
                                type : 'pie',
                                center : ['75%', '15%'],
                                radius : radius,
                                x: '0%', // for funnel
                                itemStyle : labelFromatter,
                                data : [
                                    {name:'other', value:yestodayEnergy, itemStyle : labelBottom},
                                    {name:'今日能耗', value:todayEnergy,itemStyle : labelTop}
                                ]
                            },
                            {
                                type : 'pie',
                                center : ['75%', '15%'],
                                radius : borderRadius,
                                x: '0%', // for funnel
                                itemStyle : labelFromatter,
                                data : [
                                    {name:'border', value:1, itemStyle : borderItemStyle}
                                ]
                            },
                            {
                                type : 'pie',
                                center : ['75%', '35%'],
                                radius : radius,
                                x:'20%', // for funnel
                                itemStyle : labelFromatter,
                                data : [
                                    {name:'other', value:todayEnergy, itemStyle : labelBottom},
                                    {name:'昨日能耗', value:yestodayEnergy,itemStyle : labelTop}
                                ]
                            },
                            {
                                type : 'pie',
                                center : ['75%', '35%'],
                                radius : borderRadius,
                                x: '0%', // for funnel
                                itemStyle : labelFromatter,
                                data : [
                                    {name:'border', value:1, itemStyle : borderItemStyle}
                                ]
                            },
                            {
                                type : 'pie',
                                center : ['75%', '55%'],
                                radius : radius,
                                x:'40%', // for funnel
                                itemStyle : labelFromatter,
                                data : [
                                    {name:'other', value:yestodayCost, itemStyle : labelBottom},
                                    {name:'今日费用', value:todayCost,itemStyle : labelTop}
                                ]
                            },
                            {
                                type : 'pie',
                                center : ['75%', '55%'],
                                radius : borderRadius,
                                x: '0%', // for funnel
                                itemStyle : labelFromatter,
                                data : [
                                    {name:'border', value:1, itemStyle : borderItemStyle}
                                ]
                            },
                            {
                                type : 'pie',
                                center : ['75%', '75%'],
                                radius : radius,
                                x:'60%', // for funnel
                                itemStyle : labelFromatter,
                                data : [
                                    {name:'other', value:todayCost, itemStyle : labelBottom},
                                    {name:'昨日费用', value:yestodayCost,itemStyle : labelTop}
                                ]
                            },
                            {
                                type : 'pie',
                                center : ['75%', '75%'],
                                radius : borderRadius,
                                x: '0%', // for funnel
                                itemStyle : labelFromatter,
                                data : [
                                    {name:'border', value:1, itemStyle : borderItemStyle}
                                ]
                            }
                        ]
                    };
                    var $divAppTotalEnergy = $currentContainer.find('.divAppTotalEnergy');
                     var chart = echarts.init($divAppTotalEnergy[0]);
                    chart.setOption(rightOption);
                }
            }).always(function(){
                this.spinner && this.spinner.stop();
            })
        })




    };

    ModalAppPie.prototype.showConfigMode = function () {
    }
    //ModalAppGauge.prototype.setModalOption = function (option) {
    //    this.entity.modal.interval = 5;
    //};
    return ModalAppPie;
})()
/*app饼图*/
function tofixed(str, accuracy){
    if(!accuracy) accuracy = 2;
    return parseFloat(str).toFixed(accuracy);
}
/**
 * Created by RNBtech on 2015/6/18.
 */
var ModalKPIStruct = (function(){
    function ModalKPIStruct(screen, entityParams) {
        this.$configModal = undefined;
        this.$modal = undefined;
        this.tempOpt = undefined;
        this.subEntity = undefined;
        this.isInit = false;
        this.store = {};
        if (!entityParams) return;
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
    }
    ModalKPIStruct.prototype = new ModalBase();
    ModalKPIStruct.prototype.optionTemplate = {
        name:'toolBox.modal.KPI_STRUCT',
        parent:3,
        mode:'custom',
        maxNum: 10,
        title:'',
        defaultHeight:4.5,
        defaultWidth:3,
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type: 'ModalKPIStruct',
        scroll:false,
        tooltip: {
            'imgPC': true,
            'imgMobile': true,
            'isSpecData':true,
            'desc': '#KPIStruct'
        }
    };
    ModalKPIStruct.prototype.configModalOptDefault= {
        "header" : {
            "needBtnClose" : true,
            "title" : "配置"
        },
        "area" : [
            {
                "type": 'option',
                "widget":[{id:'needDetail',type:'checkbox',name:'是否显示细节'}]
            },
            {
                "module" : "dsDrag",
                "data":[{
                    type:'point',name:'KPI分项统计来源',data:[],forChart:false
                }]
            },
            {
                'type':'footer',
                "widget":[{type:'confirm',opt:{needClose:false}},{type:'cancel'}]
            }
        ],
        result:{}
    };

    ModalKPIStruct.prototype.show = function(){
        this.init();
    };
    ModalKPIStruct.prototype.initConfigModalOpt = function(){
        var _this = this;
        //this.configModalOpt.area[0].widget[0].option = [];
        //this.configModalOpt.area[0].widget[0].option.push({
        //    type:'chart',
        //    name:'图表',
        //    link:this.getSiblingChart()
        //});
        if(this.entity.modal.option){
            if(this.entity.modal.option.needDetail)this.configModalOpt.area[0].widget[0].data = this.entity.modal.option.needDetail;
            if(this.entity.modal.option.structPoint)this.configModalOpt.area[1].data[0].data = this.entity.modal.option.structPoint;
        }
        this.configModalOpt.result.func = function(option){
            _this.setModalOption(option); //.done(function(resultData){
            //    _this.entity.modal.points = [];
            //    if(!(resultData.dsItemList && resultData.dsItemList[0] && resultData.dsItemList[0].data))return;
            //    var structList;
            //    try{
            //        structList = JSON.parse(resultData.dsItemList[0].data).KPIList;
            //    }catch(e){
            //        return;
            //    }
            //    _this.getRealTimePoint(structList,_this.entity.modal.points)
            //}).always(function(){
                _this.configModal.hide();
            //});
        }
    };
    ModalKPIStruct.prototype.getRealTimePoint = function(list,arr){
        var _this = this;
        if(!arr)arr = [];
        list.forEach(function(item){
            if(item.point) {
                arr.push(_this.entity.modal.option.prefix + item.point);
            }
            if(item.pointRoot) {
                arr.push(_this.entity.modal.option.prefix + item.pointRoot +'_va');
                arr.push(_this.entity.modal.option.prefix + item.pointRoot +'_st');
                arr.push(_this.entity.modal.option.prefix + item.pointRoot +'_state');
            }
            if(item.children instanceof Array && item.children.length > 0){
                _this.getRealTimePoint(item.children,arr)
            }
        });
        return arr;
    };
    ModalKPIStruct.prototype.init = function(){
    };

    ModalKPIStruct.prototype.renderModal = function (e) {
        $(this.container).addClass('widgetKPIItemEval');
        var _this = this;
        //var postData = {'dsItemIds': this.entity.modal.option.structPoint};
        //WebAPI.post('/analysis/startWorkspaceDataGenPieChart',postData).done(function(resultData){
        //    if(!(resultData.dsItemList && resultData.dsItemList[0] && resultData.dsItemList[0].data))return;
        //    var structList;
        //    try{
        //        structList = JSON.parse(resultData.dsItemList[0].data).KPIList;
        //    }catch(e){
        //        return;
        //    }
        //    structList.forEach(function(struct){
        //        _this.initStruct(struct);
        //    });
        //    _this.attachEvent();
        //});
        if(AppConfig.isMobile){
            this.container.innerHTML = '<div class="divKPIIndex gray-scrollbar"></div>';
        }else {
            this.container.innerHTML = '<div class="divKPIIndex gray-scrollbar"></div><div class="divKPIDetail"></div>';
            if (this.entity.modal.option.needDetail) {
                _this.renderDetailContainer();
                $(_this.container).addClass('showSubContainer');
            }
        }
        this.indexSpinner = new LoadingSpinner({ color: '#00FFFF' });
        this.indexSpinner.spin(this.container.querySelector('.divKPIIndex'));
        _this.attachEvent();
    };
    ModalKPIStruct.prototype.renderDetailContainer = function(){
        var containerDetail = this.container.querySelector('.divKPIDetail');
        var item = {
            modal:{
                type:'ModalHtml',
                interval:60000,
                option:{
                    html:this.setSubEntityHTML()
                },
                points:[],
                title:''
            },
            spanC:9,
            spanR:6
        };
        this.initSubEntity(containerDetail,item)
    };
    ModalKPIStruct.prototype.setSubEntityHTML =  function(){
        var html = '\
        <style>\
            .divChart{position:relative}\
            .divChart_1_1 {\n\
                display:block;\n\
                height:70%;\n\
            }\n\
            .divChart_2_1,.divChart_2_2,.divChart_2_3 {\n\
                display:inline-block;\n\
                height:30%;\n\
                width:33.33%;\n\
                float:left;\n\
            }\n\
        </style>\n\
        <div class="divChart divChart_1_1" data-default-chart="line"></div>\n\
        <div class="divChart divChart_2_1" data-default-chart="gauge"></div>\n\
        <div class="divChart divChart_2_2" data-default-chart="gauge"></div>\n\
        <div class="divChart divChart_2_3" data-default-chart="gauge"></div>\n\
        <script>\n\
            var _this = this;\n\
            var defaultChartOpt = {\n\
                title:{textStyle:{color:"#eee"}},\n\
                legend:{textStyle:{color:"#eee"}},\n\
                tooltip : {\n\
                    trigger: "axis"\n\
                },\n\
                xAxis:{\n\
                    type:"category",\n\
                    axisLine:{show:false,lineStyle:{color:"#eee"}},\n\
                    axisLabel:{textStyle:{color:"#eee"}},\n\
                    axisTick:{show:false}\n\
                },\n\
                yAxis:{\n\
                    type:"value",\n\
                    axisLine:{show:false,lineStyle:{color:"#eee"}},\n\
                    axisLabel:{textStyle:{color:"#eee"}},\n\
                    splitLine:{show:false},\n\
                    axisTick:{show:false}\n\
                }\n\
            };\n\
            var realTimeData = {};\n\
            var promiseRealtime;\n\
            //debugger;\n\
            this.onRenderComplete = function(){\n\
                promiseRealtime = $.Deferred();\n\
                getRealTimeData();\n\
                initChart(_this._wrapContainer.querySelector(".divChart_1_1"),_this.widgetModal.focusDetail["chart-1-1"]);\n\
                initChart(_this._wrapContainer.querySelector(".divChart_2_1"),_this.widgetModal.focusDetail["chart-2-1"]);\n\
                initChart(_this._wrapContainer.querySelector(".divChart_2_2"),_this.widgetModal.focusDetail["chart-2-2"]);\n\
                initChart(_this._wrapContainer.querySelector(".divChart_2_3"),_this.widgetModal.focusDetail["chart-2-3"]);\n\
            }\n\
            function getRealTimeData(){\n\
                var points = [].concat(\n\
                    _this.widgetModal.focusDetail["chart-2-1"].point,\n\
                    _this.widgetModal.focusDetail["chart-2-2"].point,\n\
                    _this.widgetModal.focusDetail["chart-2-3"].point\n\
                )\n\
                if(points.length == 0){promiseRealtime.reject();return;}\
                WebAPI.post("/analysis/startWorkspaceDataGenPieChart", {\n\
                    dsItemIds: points\n\
                }).done(function(result){\n\
                    if(!(result.dsItemList instanceof Array))return\n\
                    result.dsItemList.forEach(function(pt){realTimeData[pt.dsItemId] = pt.data})\n\
                    promiseRealtime.resolve();\n\
                }).fail(function(){promiseRealtime.reject()})\n\
            }\n\
            function initChart(container,option){\n\
                var type = container.dataset.defaultChart;\n\
                if(option.type){\n\
                    type = option.type;\n\
                }\n\
                var chartOption = {}\n\
                switch(type){\n\
                    case "line":\n\
                        chartOption = initLineChart(container,option);\n\
                        break;\n\
                    case "bar":\n\
                        chartOption = initBarChart(container,option);\n\
                        break;\n\
                    case "gauge":\n\
                        chartOption = initGaugeChart(container,option);\n\
                        break;\n\
                    default:\n\
                        return;\n\
                }\n\
            }\n\
            function initLineChart(container,option){\n\
                if(!(option.point instanceof Array && option.point.length > 0))return\n\
                var spinner = new LoadingSpinner({ color: "#00FFFF" })\n\
                spinner.spin(container)\n\
                var opt = {}\n\
                var series = [];\n\
                var timeShaft,startTime,endTime,interval\n\
                var now = new Date();\n\
                switch(option.time){\n\
                    case "today":\n\
                        startTime = new Date(now - 86400000).format("yyyy-MM-dd HH:00:00");\n\
                        endTime = now.format("yyyy-MM-dd HH:00:00");\n\
                        interval = "h1";\n\
                        break;\n\
                    case "today":\n\
                        startTime = new Date(now - 86400000).format("yyyy-MM-dd HH:00:00");\n\
                        endTime = now.format("yyyy-MM-dd HH:00:00");\n\
                        interval = "h1";\n\
                        break;\n\
                    case "today":\n\
                        startTime = new Date(now - 86400000).format("yyyy-MM-dd HH:00:00");\n\
                        endTime = now.format("yyyy-MM-dd HH:00:00");\n\
                        interval = "h1";\n\
                        break;\n\
                    default:\n\
                        startTime = new Date(now - 86400000).format("yyyy-MM-dd HH:00:00");\n\
                        endTime = now.format("yyyy-MM-dd HH:00:00");\n\
                        interval = "h1";\n\
                        break;\n\
                };\n\
                WebAPI.post("/analysis/startWorkspaceDataGenHistogram", {\n\
                    dsItemIds: option.point.map(function(pt){return pt.point}),\n\
                    timeStart: startTime,\n\
                    timeEnd: endTime,\n\
                    timeFormat: interval\n\
                }).done(function(result){\n\
                    if(!(result.list && (result.list instanceof Array)))return;\n\
                    for (var i = 0; i < result.list.length;i++){\n\
                        series.push({\n\
                            type:"line",\n\
                            data:result.list[i].data,\n\
                            name:option.point[i].name\n\
                        })\n\
                    }\n\
                    opt = {\n\
                        title:{text:option.name?option.name:""},\n\
                        legend:{data:option.point.map(function(pt){return pt.name})},\n\
                        xAxis:{\n\
                            data:result.timeShaft\n\
                        },\n\
                        series:series\n\
                    }\n\
                    var chart = echarts.init(container);\n\
                    chart.setOption($.extend(true,{},defaultChartOpt,opt));\n\
                }).always(function(){spinner.stop()})\n\
            }\n\
            function initBarChart(container,option){\n\
                if(!(option.point instanceof Array && option.point.length > 0))return\n\
                var spinner = new LoadingSpinner({ color: "#00FFFF" })\n\
                spinner.spin(container)\n\
                var opt = {}\n\
                var series = [];\n\
                var timeShaft,startTime,endTime,interval\n\
                var now = new Date();\n\
                switch(option.time){\n\
                    case "today":\n\
                        startTime = new Date(now - 86400000).format("yyyy-MM-dd HH:00:00");\n\
                        endTime = now.format("yyyy-MM-dd HH:00:00");\n\
                        interval = "h1";\n\
                        break;\n\
                    case "today":\n\
                        startTime = new Date(now - 86400000).format("yyyy-MM-dd HH:00:00");\n\
                        endTime = now.format("yyyy-MM-dd HH:00:00");\n\
                        interval = "h1";\n\
                        break;\n\
                    case "today":\n\
                        startTime = new Date(now - 86400000).format("yyyy-MM-dd HH:00:00");\n\
                        endTime = now.format("yyyy-MM-dd HH:00:00");\n\
                        interval = "h1";\n\
                        break;\n\
                    default:\n\
                        startTime = new Date(now - 86400000).format("yyyy-MM-dd HH:00:00");\n\
                        endTime = now.format("yyyy-MM-dd HH:00:00");\n\
                        interval = "h1";\n\
                        break;\n\
                };\n\
                WebAPI.post("/analysis/startWorkspaceDataGenHistogram", {\n\
                    dsItemIds: option.point.map(function(pt){return pt.point}),\n\
                    timeStart: startTime,\n\
                    timeEnd: endTime,\n\
                    timeFormat: interval\n\
                }).done(function(result){\n\
                    if(!(result.list && (result.list instanceof Array)))return;\n\
                    for (var i = 0; i < result.list.length;i++){\n\
                        series.push({\n\
                            type:"bar",\n\
                            data:result.list[i].data,\n\
                            name:option.point[i].name\n\
                        })\n\
                    }\n\
                    opt = {\n\
                        title:{text:option.name?option.name:""},\n\
                        legend:{data:option.point.map(function(pt){return pt.name})},\n\
                        xAxis:{\n\
                            data:result.timeShaft\n\
                        },\n\
                        series:series\n\
                    }\n\
                    var chart = echarts.init(container);\n\
                    chart.setOption($.extend(true,{},defaultChartOpt,opt));\n\
                }).always(function(){spinner.stop()})\n\
            }\n\
            function initGaugeChart(container,option){\n\
                if(!(option.point instanceof Array && option.point.length > 0))return\n\
                var spinner = new LoadingSpinner({ color: "#00FFFF" })\n\
                spinner.spin(container)\n\
                var opt = {}\n\
                var series = [];\n\
                var timeShaft,startTime,endTime,interval\n\
                promiseRealtime.done(function(){\n\
                    if(typeof realTimeData[option.point[0]] == null)return;\n\
                    series=[{\n\
                        type:"gauge",\n\
                        data:realTimeData[option.point[0]],\n\
                        radius:"100%",\n\
                        center:["50%","75%"],\n\
                        max:option.max?option.max:10,\n\
                        name:option.point[0],\n\
                        startAngle:"180",\n\
                        endAngle:"0",\n\
                        axisLine:{lineStyle:{width:10,color:[[1, "#4488bb"]]}},\
                        splitLine:{length:15},\n\
                        detail:{offsetCenter:[0,"20%"]}\n\
                    }]\n\
                    opt = {\n\
                        title:{text:option.name?option.name:""},\n\
                        legend:{show:false,data:[option.point[0]]},\n\
                        xAxis:"",\n\
                        yAxis:"",\n\
                        series:series\n\
                    }\n\
                    var chart = echarts.init(container);\n\
                    chart.setOption($.extend(true,{},defaultChartOpt,opt));\n\
                }).always(function(){spinner.stop()})\n\
            }\n\
        </script>';
        return html
    };
    ModalKPIStruct.prototype.attachEvent = function(){
        var _this = this;
        var clickEvent = AppConfig.isMobile?'tap':'click';
        $(this.container).off(clickEvent).on(clickEvent,'.divStructTtl',function(e){
            $(e.currentTarget).parent().toggleClass('focus');
        });
        $(this.container).on(clickEvent,'.divStructItem',function(e){
            var $target = $(e.currentTarget);
            $target.siblings().removeClass('focus');
            $target.toggleClass('focus');
            if($target.children('.pointDetail').length == 0 || !$target.hasClass('focus'))return;
            _this.subEntity && _this.refreshSubEntity($target)
        });
    };
    ModalKPIStruct.prototype.refreshSubEntity = function($target){
        if(!this.store.KPIList)return;
        var parents = $target.parentsUntil('.divKPIIndex','.divStructCtn');
        var childIndex = $target[0].dataset.itemChildIndex;
        var arrPoint = [];
        var store = this.store.KPIList[parents[0].dataset.itemIndex];
        var level = 1;
        while (level != parents.length){
            store = store.children[parents[level].dataset.itemIndex];
            level++;
        }
        store = store.children[childIndex].param;
        var _this = this;
        Object.keys(store).forEach(function(chart){
            arrPoint = arrPoint.concat(store[chart].point)
        });
        this.subEntity.entity.modal.points = arrPoint.map(function(point){return (_this.entity.modal.option.prefix + point.id)});
        var clone = $.extend(true,{},store);
        Object.keys(clone).forEach(function(key){
            if(clone[key].point instanceof Array){
                clone[key].point.forEach(function(pt,index,self){
                    if(typeof pt == 'string'){
                        self[index] = _this.entity.modal.option.prefix + pt;
                    }else {
                        pt.point = _this.entity.modal.option.prefix + pt.point;
                    }
                })
            }
        });
        this.subEntity.entity.modal.focusDetail = clone;
        this.updateSubEntity();
    };
    ModalKPIStruct.prototype.initPointMap = function(points){
        var _this = this;
        var $dom;
        points.forEach(function(point){
            _this.initPointDetail(point.dsItemId,point.data)
        })
    };
    ModalKPIStruct.prototype.initPointDetail = function(id,data){
        var $dom = $('[data-point="' + id +'"]');
        if ($dom.length == 0)return;

        if($dom.hasClass('spItemKPIRs')){
            var status = '';
            switch (parseInt(data)){
                case 0:
                    status = 'success';
                    break;
                case 1:
                    status = 'danger';
                    break;
                case 5:
                    status = 'default';
                    break;
                default :
                    status = 'none';
                    break;
            }
            $dom.removeClass('success danger default none').addClass(status);
        }else{
            if(isNaN(Number(data))){
                $dom.text(data);
            }else {
                var arrPt = id.split('_');
                if(arrPt[arrPt.length - 1] == 'Score'){
                    $dom.text(parseFloat(data).toFixed(2) +'%');
                }else {
                    $dom.text(parseFloat(data).toFixed(2));
                }
            }
        }
    };
    ModalKPIStruct.prototype.initStruct = function(parent,index,container){
        var _this = this;
        var struct = parent[index];
        var itemName;
        if(!parent){
            itemName = struct.name;
        }else{
            itemName = parent.name + '-' + struct.name
        }
        var structDom = this.container.querySelector('[data-item="' + struct.name +'"]');
        var kpiIndexDom = this.container.querySelector('.divKPIIndex');
        if(!structDom) {
            structDom = document.createElement('div');
            structDom.className = 'divStructCtn focus divStructCtnCover';
            structDom.dataset.item = struct.name;
            structDom.dataset.itemIndex = index;

            var defaultSvg = '<svg version="1.1" id="图形" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="1024px" height="1024px" viewBox="0 0 1024 1024" enable-background="new 0 0 1024 1024" xml:space="preserve">\
                    <path class="svgpath" data-index="path_0" fill="#272636" d="M1002.496 414.208c-5.44-28.672-22.592-47.04-43.456-46.528l-4.352 0c-71.808 0-130.24-58.432-130.24-130.24 0-23.68 11.264-49.6 11.328-49.792 11.072-24.96 2.56-55.616-19.84-71.232l-1.216-0.832-125.248-69.568-1.28-0.576c-7.424-3.2-15.552-4.864-24.192-4.864-17.856 0-35.328 7.104-46.784 19.008-15.296 15.808-63.488 56.768-102.4 56.768-39.296 0-87.808-41.792-103.168-57.856-11.52-12.16-29.12-19.392-47.168-19.392-8.448 0-16.448 1.6-23.744 4.672L339.2 44.224 209.536 115.456l-1.28 0.896C185.792 131.968 177.216 162.56 188.288 187.52c0.128 0.256 11.328 26.24 11.328 49.856 0 71.808-58.432 130.24-130.24 130.24L65.024 367.616c-20.928-0.512-38.08 17.92-43.456 46.528C21.12 416.448 11.072 470.144 11.072 512.384c0 42.304 10.048 95.936 10.496 98.176 5.376 28.288 22.08 46.592 42.688 46.592 0.256 0 0.512 0 0.768 0l4.352 0c71.808 0 130.24 58.432 130.24 130.24 0 23.68-11.264 49.6-11.328 49.792-11.072 24.96-2.56 55.616 19.776 71.232l1.216 0.832 122.88 68.736 1.28 0.576c7.424 3.264 15.488 4.928 24.128 4.928 18.048 0 35.648-7.424 47.04-19.84 14.4-15.68 64.576-60.352 104.704-60.352 40.448 0 89.792 44.416 105.408 61.504 11.456 12.608 29.184 20.16 47.36 20.16l0 0 0 0c8.448 0 16.384-1.6 23.68-4.736l1.344-0.576 127.36-70.4 1.28-0.896c22.4-15.616 30.976-46.272 19.904-71.168-0.128-0.256-11.328-26.24-11.328-49.856 0-71.808 58.432-130.24 130.24-130.24l4.352 0c20.928 0.448 38.08-17.92 43.456-46.528 0.448-2.24 10.496-55.936 10.496-98.176C1012.928 470.144 1002.88 416.448 1002.496 414.208L1002.496 414.208zM509.824 685.248c-95.68 0-173.504-77.824-173.504-173.504 0-95.68 77.824-173.504 173.504-173.504 95.68 0 173.504 77.824 173.504 173.504C683.264 607.424 605.44 685.248 509.824 685.248L509.824 685.248zM509.824 685.248"></path>\
                    <path class="svgpath" data-index="path_1" fill="#272636" d="M509.824 397.248 509.824 397.248c-63.104 0-114.496 51.328-114.496 114.496 0 63.104 51.328 114.496 114.496 114.496 63.104 0 114.496-51.328 114.496-114.496C624.256 448.64 572.928 397.248 509.824 397.248L509.824 397.248zM509.824 397.248"></path>\
                </svg>';

            var structTtl = document.createElement('div');
            structTtl.className = 'divStructTtl divStructCover';
            if(container)structTtl.className += ' forSubIndex';
            structTtl.innerHTML = '\
            <!--<span class="spStructIcon">' + defaultSvg + '</span>-->\
            <span class="spStructName spStructNameCover">' + struct.name + '</span>\
            <span class="spStructValue spStructValueCover">综合达标率：<span class="spStructPt" data-point="' + (struct.point ? _this.entity.modal.option.prefix + struct.point : '') + '">Loading</span></span>\
            <!--<span class="pointDetail" data-detail="' + (struct.point ? _this.entity.modal.option.prefix + struct.point : '') + '">Loading</span>-->';
            var structBody = document.createElement('div');
            structBody.className = 'divStructBody divStuctBodyCover';
            var structItemTtl = this.createStructItemTtl();

            //var structItemList = document.createElement('div');
            //structItemList.className = 'divStructItemList';
            //
            //structBody.appendChild(structItemList);
            if ((struct.children instanceof Array) && struct.children.length > 0) {
                struct.children.forEach(function (item, index) {
                    if(item.children instanceof Array && item.children.length > 0){
                        _this.initStruct(struct.children,index,structBody);
                    }else {
                        structBody.appendChild(_this.createStructItem(item, index));
                        //structBody.appendChild(_this.createPointDetail(item))
                    }
                })
            }
            var firstItem = $(structBody).find('>.divStructItem')[0];
            if(firstItem)structBody.insertBefore(structItemTtl,firstItem);

            structDom.appendChild(structTtl);
            //structBody.appendChild(_this.createPointDetail(struct));
            structDom.appendChild(structBody);
            if(!container){
                kpiIndexDom.appendChild(structDom);
            }else{
                container.appendChild(structDom);
            }
        }else{
            var structBody = $(structDom).children('.structBody')[0];
            if ((struct.children instanceof Array) && struct.children.length > 0) {
                struct.children.forEach(function (item, index) {
                    if(item.children instanceof Array && item.children.length > 0){
                        _this.initStruct(struct.children,index,structBody);
                    }
                })
            }
        }
    };
    ModalKPIStruct.prototype.createStructItemTtl = function(){
        var structItemTtl = document.createElement('div');
        structItemTtl.className = 'divStructItemTtl clearfix divStructItemTtlCover';
        structItemTtl.innerHTML = '\
            <span class="spStructItemTtl spStructItemTtlCover">考核项</span>\
            <span class="spStructItemTtl">当前值</span>\
            <span class="spStructItemTtl">标准</span>\
            <span class="spStructItemTtl">考核结果</span>\
            ';
        return structItemTtl
    };
    ModalKPIStruct.prototype.createPointDetail = function(item){
        var structDetail = document.createElement('tr');
        structDetail.className = 'rowPointDetail';
        if(item.desc){
            structDetail.innerHTML = '<td class="divPointDetail" colspan="5"><span class="pointDetail" data-detail="' + (item.point?this.entity.modal.option.prefix + item.point:'') +'">' + item.desc + '</span></td>'
        }else{
            structDetail.innerHTML = '<td class="divPointDetail" colspan="5"><span class="pointDetail" data-detail="' + (item.point?this.entity.modal.option.prefix + item.point:'') +'">'+I18n.resource.dashboard.modalKPIStruct.NO_DATA_TEMP+'</span></td>';
        }
        return structDetail;
    };
    ModalKPIStruct.prototype.createStructItem = function(item,index){
        var _this = this;
        var structItem = document.createElement('div');
        structItem.dataset.itemChildIndex = index;
        structItem.className = 'divStructItem divStructItemCover';

        var name = document.createElement('span');
        name.className = 'spItemInfo spItemInfoCover';
        name.dataset.type = 'name';
        name.innerHTML =  item.name?item.name:'';
        structItem.appendChild(name);

        var info,itemAttr = ['va','st'];
        itemAttr.forEach(function(attr){
            info = document.createElement('span');
            info.className = 'spItemInfo';
            info.dataset.type = attr;
            info.dataset.point = _this.entity.modal.option.prefix + item.pointRoot + '_' + attr;
            structItem.appendChild(info);
        });

        var resultInfo = document.createElement('span');
        resultInfo.className = 'spItemInfo spItemKPIRs';
        resultInfo.dataset.point = _this.entity.modal.option.prefix + item.pointRoot + '_state';
        resultInfo.innerHTML = '\
                <span class="label label-success">达&nbsp;&nbsp;&nbsp;标</span>\
                <span class="label label-danger">不达标</span>\
                <span class="label label-default">未开启</span>\
                <span class="label label-none">无数据</span>';
        structItem.appendChild(resultInfo);

        //structItem.innerHTML = '\
        //    <span class="spItemInfo">' + (item.name?item.name:'') + '</span>\
        //    <span class="spItemInfo" data-point="'+ (item.point?this.entity.modal.option.prefix + item.point:'') +'">Loading</span>\
        //    <span class="spItemInfo spItemKPIRs">\
        //        <span class="label label-success">达&nbsp;&nbsp;&nbsp;标</span>\
        //        <span class="label label-danger">不达标</span>\
        //        <span class="label label-default">未开启</span>\
        //    </span>';
        if(item.desc){
            var detail = document.createElement('span');
            detail.className = 'pointDetail';
            detail.innerHTML = item.desc;
            structItem.appendChild(detail);
        }
        //else{
        //    structItem.innerHTML += '<span class="pointDetail" data-detail="' + (item.point?this.entity.modal.option.prefix + item.point:'') +'">'+I18n.resource.dashboard.modalKPIStruct.NO_DATA_TEMP+'</span>';
        //}
        return structItem;
    };
    ModalKPIStruct.prototype.setPointItem = function(dom,item){
        var itemDom = document.createElement('span');
        itemDom.className = 'spItemInfo';
        itemDom.dataset.type = item;
        itemDom.dataset.point = this.entity.modal.option.prefix + item;
        dom.appendChild(itemDom);
    };

    ModalKPIStruct.prototype.updateModal = function (points) {
        if(!(points[0] && points[0].data))return;
        var structList;
        var _this = this;
        try{
            structList = JSON.parse(points[0].data).KPIList;
        }catch(e){
            return;
        }
        this.store.KPIList = structList;
        structList.forEach(function(struct,index,self){
            _this.initStruct(self,index);
        });
        if(!this.isInit)this.afterInitStruct();
        this.isInit = true;
        var arrPoint = this.getRealTimePoint(structList);
        WebAPI.post('/analysis/startWorkspaceDataGenPieChart',{dsItemIds:arrPoint}).done(function(result){
            if(!result.dsItemList)return;
            _this.initPointMap(result.dsItemList);
        }).always(function(){
            _this.indexSpinner.stop();
        });
    };
    ModalKPIStruct.prototype.afterInitStruct = function(){
        var $ptDetail = $('.pointDetail');
        if($ptDetail.length > 0 ){
            $ptDetail.eq(0).parent().addClass('focus');
            this.subEntity && this.refreshSubEntity($ptDetail.eq(0).parent())
        }
    };
    ModalKPIStruct.prototype.showConfigMode = function () {

    };
    ModalKPIStruct.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
        this.entity.modal.option = {
            structPoint:option.points[0],
            needDetail:option.needDetail
        };
        this.entity.modal.points = option.points[0];
        var projectId = 1;
        if(AppConfig.project && AppConfig.project.bindId){
            projectId = AppConfig.project.bindId;
        }else{
            projectId = AppConfig.projectId
        }
        this.entity.modal.option.prefix = '@' + projectId + '|';
        //this.entity.modal.option.prefix = '@72|';
        //return WebAPI.post('/analysis/startWorkspaceDataGenPieChart',{dsItemIds:this.entity.modal.option.structPoint})
    };


    return ModalKPIStruct;
})();


var ModalEnergySaveRate = (function () {
    function ModalEnergySaveRate(screen, entityParams) {
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
    }

    ModalEnergySaveRate.prototype = new ModalBase();
    ModalEnergySaveRate.prototype.optionTemplate = {
        name: 'toolBox.modal.REAL_TIME_ENERGY_SAVE_RATE',
        parent: 0,
        mode: ['realTimeDashboard'],
        maxNum: 1,
        title: '',
        minHeight: 1,
        minWidth: 2,
        maxHeight: 6,
        maxWidth: 12,
        type: 'ModalEnergySaveRate'
    };

    ModalEnergySaveRate.prototype.renderModal = function () {
        var _this = this;

        WebAPI.get('/static/scripts/spring/entities/modalEnergySaveRate.html').done(function (resultHtml) {
            _this.container.innerHTML = resultHtml;
            I18n.fillArea($('#energySaveName').parent());
        });
    },

    ModalEnergySaveRate.prototype.updateModal = function (points) {
        var show = parseFloat(points[0].data).toFixed(1).toString() + '%';
        $('#energySavePerVal').text(show);
        $('#progressItem').css('width', show);
    },

    ModalEnergySaveRate.prototype.showConfigMode = function () {
        var _this = this;
    },

    ModalEnergySaveRate.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
    };

    return ModalEnergySaveRate;
})();
var ModalCoalSaveTotal = (function () {
    function ModalCoalSaveTotal(screen, entityParams) {
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
    }

    ModalCoalSaveTotal.prototype = new ModalBase();
    ModalCoalSaveTotal.prototype.optionTemplate = {
        name:'toolBox.modal.REAL_TIME_COAL_SAVE_TOTAL',
        parent:0,
        mode:['realTimeDashboard'],
        maxNum: 1,
        title:'',
        minHeight:1,
        minWidth:2,
        maxHeight:6,
        maxWidth:12,
        type:'ModalCoalSaveTotal'
    };

    ModalCoalSaveTotal.prototype.renderModal = function () {
        this.container.innerHTML = template;
        I18n.fillArea($('#coalSaveName').parent());
    },

    ModalCoalSaveTotal.prototype.updateModal = function (points) {
        var show = parseFloat(points[0].data).toFixed(1).toString() + ' Ton';
        $('#coalSaveVal').text(show);
    },

    ModalCoalSaveTotal.prototype.showConfigMode = function () {
        var _this = this;
    },

    ModalCoalSaveTotal.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
    };

    var template = '<style type="text/css">\
        .frameCtl {position: relative;height: 100%;}\
        .imgBackground {position: absolute;width: 100%;height: 100%;right: 0;bottom: 0;top: 0;left: 0;z-index: -1;}\
        #coalSaveVal {position: absolute;left: 60px;top: 40px;width: 220px;font-size: 25px;font-weight: 500;color: #eeeeee;}\
        #coalSaveName {position: absolute;left: 60px;top: 80px;width: 220px;font-size: 25px;font-weight: 500;color: #eeeeee;}\
    </style>\
    <div class="frameCtl">\
        <img src="/static/images/spring/entities/modalCoalSaveTotal.png" class="imgBackground" alt="Background image">\
        <div id="coalSaveVal"> Ton</div>\
        <div id="coalSaveName" i18n="dashboard.carbonFootprint.STANDARD_COAL_SAVING"></div>\
    </div>';

    return ModalCoalSaveTotal;
})();
var ModalCo2SaveTotal = (function () {
    function ModalCo2SaveTotal(screen, entityParams) {
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
    }

    ModalCo2SaveTotal.prototype = new ModalBase();

    ModalCo2SaveTotal.prototype.optionTemplate = {
        name: 'toolBox.modal.REAL_TIME_CO2_SAVE_TOTAL',
        parent:0,
        mode:['realTimeDashboard'],
        maxNum: 1,
        title:'',
        minHeight:1,
        minWidth:2,
        maxHeight:6,
        maxWidth:12,
        type:'ModalCo2SaveTotal'
    };

    ModalCo2SaveTotal.prototype.renderModal = function() {
        this.container.innerHTML = template;
        I18n.fillArea($('#co2Name').parent());
    },

    ModalCo2SaveTotal.prototype.updateModal= function (points) {
        var show = parseFloat(points[0].data).toFixed(1).toString() + ' Ton';
        $('#co2SaveVal').text(show);
    },

    ModalCo2SaveTotal.prototype.showConfigMode = function() {
        var _this = this;
    };

    ModalCo2SaveTotal.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
    };

    var template = '<style type="text/css">\
        .frameCtl {position: relative;height: 100%;}\
        .imgBackground {position: absolute;width: 100%;height: 100%;right: 0;bottom: 0;top: 0;left: 0;z-index: -1;}\
        #co2SaveVal {position: absolute;left: 60px;top: 40px;width: 220px;font-size: 25px;font-weight: 500;color: #eeeeee;}\
        #co2Name {position: absolute;left: 60px;top: 80px;width: 220px;font-size: 25px;font-weight: 500;color: #eeeeee;}\
    </style>\
    <div class="frameCtl">\
        <img src="/static/images/spring/entities/modalCo2SaveTotal.png" class="imgBackground" alt="Background image">\
        <div id="co2SaveVal"></div>\
        <div id="co2Name" i18n="dashboard.carbonFootprint.CO2_SAVING"></div>\
    </div>';

    return ModalCo2SaveTotal;
})();

// ModalKPIConfig CLASS DEFINITION
var ModalKPIConfig = (function ($, window, undefined) {
    var _this;
    function ModalKPIConfig(options) {
        _this = this;
        // parameters
        this.options = $.extend({}, DEFAULTS, options);

        // DOM
        this.$wrap = null;

    }

    ModalKPIConfig.prototype.show = function () {
        var domPanelContent = document.getElementById('paneContent');
        // if there already has one "KPI Config" modal, do not load another one
        if($('#modalKPIConfigWrap').length > 0) {
            this.$modal.modal('show');
            return;
        }

        Spinner.spin(domPanelContent);
        // get the template from server
        WebAPI.get('/static/views/observer/widgets/modalKPIConfig.html').done(function (html) {
            Spinner.stop();
            _this.$wrap = $('<div class="modal-kpi-config-wrap" id="modalKPIConfigWrap">')
                .appendTo(domPanelContent).html(html);
            _this.$modal = _this.$wrap.children('.modal');
            _this.init();
            _this.$modal.modal('show');
        });
    };
    
    ModalKPIConfig.prototype.init = function () {
        // DOM
        this.$formWrap                 = $("#formWrap", this.$wrap);
        this.$btnClose                 = $('.close', this.$wrap);
        this.$btnWarnMode              = $('#btnWarnMode', this.$formWrap);
        this.$ulWarnMode               = $('#ulWarnMode', this.$formWrap);
        this.$btnWarnTimeMode          = $('#btnWarnTimeMode', this.$formWrap);
        this.$ulWarnTimeMode           = $('#ulWarnTimeMode', this.$formWrap);
        this.$btnPreWarnMode           = $('#btnPreWarnMode', this.$formWrap);
        this.$ulPreWarnMode            = $('#ulPreWarnMode', this.$formWrap);
        this.$btnPreWarnTimeMode       = $('#btnPreWarnTimeMode', this.$formWrap);
        this.$ulPreWarnTimeMode        = $('#ulPreWarnTimeMode', this.$formWrap);
        this.$btnDataCycleMode         = $('#btnDataCycleMode', this.$formWrap);
        this.$ulDataCycleMode          = $('#ulDataCycleMode', this.$formWrap);
        this.$btnStartMonth            = $('#btnStartMonth', this.$formWrap);
        this.$ulStartMonth             = $('#ulStartMonth', this.$formWrap);
        this.$btnHistoryValUsage       = $('#btnHistoryValUsage', this.$formWrap);
        this.$btnPreHistoryValUsage    = $('#btnPreHistoryValUsage', this.$formWrap);
        // form groups
        this.$fgWarnRange              = $('#fgWarnRange', this.$formWrap);
        this.$fgWarnTime               = $('#fgWarnTime', this.$formWrap);
        this.$fgWarnTimeRange          = $('#fgWarnTimeRange', this.$formWrap);
        this.$fgPreWarnRange           = $('#fgPreWarnRange', this.$formWrap);
        this.$fgPreWarnTime            = $('#fgPreWarnTime', this.$formWrap);
        this.$fgPreWarnTimeRange       = $('#fgPreWarnTimeRange', this.$formWrap);
        // form group items
        this.$fgiStartMonth            = $('#fgiStartMonth', this.$formWrap);
        // form field
        this.$iptChartName             = $('#iptChartName', this.$formWrap);
        this.$iptChartLowerLimit       = $('#iptChartLowerLimit', this.$formWrap);
        this.$iptChartUpperLimit       = $('#iptChartUpperLimit', this.$formWrap);
        this.$divTargetPoint           = $('#divTargetPoint', this.$formWrap);
        this.$divReferencePoint        = $('#divReferencePoint', this.$formWrap);
        this.$btnCondition             = $('#btnCondition', this.$formWrap);
        this.$iptConditionVal          = $('#iptConditionVal', this.$formWrap);
        this.$btnIsShowRC              = $('#btnIsShowRC', this.$formWrap);
        this.$iptLowerWarnVal          = $('#iptLowerWarnVal', this.$formWrap);
        this.$iptUpperWarnVal          = $('#iptUpperWarnVal', this.$formWrap);
        this.$iptPreGreaterThan        = $('#iptPreGreaterThan', this.$formWrap);
        this.$iptPreLessThan           = $('#iptPreLessThan', this.$formWrap);
        this.$iptWarnTimeRangeStart    = $('#iptWarnTimeRangeStart', this.$formWrap);
        this.$iptPreWarnTimeRangeStart = $('#iptPreWarnTimeRangeStart', this.$formWrap);
        // drop area
        this.$dropArea                 = $('.drop-area', this.$formWrap);
        // submit button
        this.$btnSubmit                = $('#btnSubmit', this.$wrap);

        this.attachEvents();
        this.initValidator();

        // initialize the datetimepicker
        /*$(".datetime").datetimepicker({
            format: 'yyyy-mm-dd',
            autoclose: true,
            todayBtn: true,
            startView: 'year',
            minView: 'year',
            pickerPosition: 'top-right'
        });*/
        $(".datetime").datetimepicker('remove');
        $(".datetime").datetime({pickerPosition: 'top-right'});
    };

    ModalKPIConfig.prototype.initValidator = function () {

    };

    ModalKPIConfig.prototype.displayField = function (animArr, doAnim) {
        // every object in array is like: {$ele: [jQuery Object], action: 'show'/'hide'}
        var $animWrap = animArr[0].$ele.parent('.optional');
        var actionGroup = {$show: $(), $hide: $()};
        var showLen, curShowLen = $animWrap.children('.on').length;
        var $all;
        if(doAnim === undefined) doAnim = true;
        // group by 'action'
        for (var i = 0, len = animArr.length; i < len; i++) {
            actionGroup['$'+animArr[i].action] = actionGroup['$'+animArr[i].action].add(animArr[i].$ele);
        }
        showLen = actionGroup.$show.length;
        if(!doAnim) {
            actionGroup.$hide.removeClass('on').css('display', 'none');
            actionGroup.$show.addClass('on').css('display', '');
            $animWrap.height(49*showLen);
            return;
        }

        $all = actionGroup.$hide.add(actionGroup.$show).filter('.on');

        $all.filter('.on').eq(0).one('transitionend', function (e) {
            e = e.originalEvent;
            if(e.propertyName === 'opacity') {
                $all.css('display', 'none');
                if(showLen !== curShowLen) {
                    // do expend/collapse animation
                    $animWrap.height(49*showLen);
                    $animWrap.off('transitionend').on('transitionend', function (e) {
                        e = e.originalEvent;
                        if(e.propertyName === 'height') {
                            actionGroup.$show.css('display', '');
                            // use setTimeout to prevent the influence from 'display'
                            window.setTimeout(function () {
                                actionGroup.$show.addClass('on');
                            }, 0);
                        }
                        e.stopPropagation();
                    });
                } else {
                    actionGroup.$show.css('display', '');
                    // use setTimeout to prevent the influence from 'display'
                    window.setTimeout(function () {
                        actionGroup.$show.addClass('on');
                    }, 0);
                }
            }
            e.stopPropagation();
        });
        // do hide animation
        $all.removeClass('on');
    };

    // reset the modal
    ModalKPIConfig.prototype.reset = function (name) {
        var animArr = [];
        name = typeof name === 'string' ? [name] : name;

        if(!name) {
            this.$iptChartName.val('');
            this.$iptChartLowerLimit.val('');
            this.$iptChartUpperLimit.val('');
            this.$divTargetPoint.attr('data-value', '').html('<span class="glyphicon glyphicon-plus"></span>');
            this.$divReferencePoint.attr('data-value', '').html('<span class="glyphicon glyphicon-plus"></span>');
            this.$btnCondition.attr('data-value', 0).children('span').eq(0).text('Equal To (=)');
            this.$iptConditionVal.val('');

            this.$btnWarnMode.attr('data-value', 0).children('span').eq(0).text('From User Input');
            this.$btnHistoryValUsage.attr('data-value', 0).children('span').eq(0).text('Use As Lower Limit');
            this.$iptWarnTimeRangeStart.val('');
            this.$iptLowerWarnVal.val('');
            this.$iptUpperWarnVal.val('');

            this.$btnPreWarnMode.attr('data-value', 0).children('span').eq(0).text('From User Input');
            this.$iptPreGreaterThan.val('');
            this.$iptPreLessThan.val('');

            animArr = [];
            animArr.push({$ele: this.$fgWarnRange, action: 'show'});
            animArr.push({$ele: this.$fgWarnTime, action: 'hide'});
            animArr.push({$ele: this.$fgWarnTimeRange, action: 'hide'});
            this.displayField(animArr, false);

            animArr = [];
            animArr.push({$ele: this.$fgPreWarnRange, action: 'show'});
            animArr.push({$ele: this.$fgPreWarnTime, action: 'hide'});
            animArr.push({$ele: this.$fgPreWarnTimeRange, action: 'hide'});
            this.displayField(animArr, false);
        }
        

        // reset 'warn time' filed
        if(!name || name.indexOf('warn-time') > -1 ) {
            this.$btnWarnTimeMode.attr('data-value', 0);
            this.$btnWarnTimeMode.children('span').eq(0).text('From User Input');
            this.$btnHistoryValUsage.attr('data-value', 0);
            this.$btnHistoryValUsage.children('span').eq(0).text('Use As Lower Limit');
        }

        if(!name || name.indexOf('start-month') > -1 ) {
            this.$btnStartMonth.attr('data-value', '');
            this.$btnStartMonth.children('span').eq(0).text('Start Month');
        }

        if(!name || name.indexOf('pre-warn-time') > -1 ) {
            this.$btnPreWarnTimeMode.attr('data-value', 0);
            this.$btnPreWarnTimeMode.children('span').eq(0).text('From User Input');
        }
    };

    ModalKPIConfig.prototype.recoverForm = function (form) {
        var name, animArr = [], animArr2 = [];
        var _this = this;
        if(!form) return;
        this.$iptChartName.val(form.chartName);
        this.$iptChartLowerLimit.val(form.chartLowerLimit);
        this.$iptChartUpperLimit.val(form.chartUpperLimit);
        name = AppConfig.datasource.getDSItemById(form.targetPointId).alias;
        this.$divTargetPoint.attr({'data-value': form.targetPointId, 
                'title': name}).html('<span>'+name+'</span>');
        name = AppConfig.datasource.getDSItemById(form.referencePointId).alias;
        if(name) {
            this.$divReferencePoint.attr({'data-value': form.referencePointId, 
                'title': name}).html('<span>'+name+'</span>');
        }
        
        this.$btnCondition.attr('data-value', form.referenceCondition).children('span').eq(0).text(form.referenceConditionName);
        this.$iptConditionVal.val(form.referenceConditionVal);
        this.$btnDataCycleMode.attr('data-value', form.dataCycleMode).children('span').eq(0).text(form.dataCycleModeName);

        this.$btnWarnMode.attr('data-value', form.warnMode).children('span').eq(0).text(form.warnModeName);
        this.$btnWarnTimeMode.attr('data-value', form.warnTimeMode).children('span').eq(0).text(form.warnTimeModeName);
        this.$btnHistoryValUsage.attr('data-value', form.historyValUsage).children('span').eq(0).text(form.historyValUsageName);
        this.$iptWarnTimeRangeStart.val(form.warnTimeRangeStart);
        if(form.warnMode === 1) {
            animArr.push({$ele: this.$fgWarnRange, action: 'hide'});
            animArr.push({$ele: this.$fgWarnTime, action: 'show'});
            if(form.warnTimeMode === 0) {
                animArr.push({$ele: this.$fgWarnTimeRange, action: 'show'});
            } else {
                animArr.push({$ele: this.$fgWarnTimeRange, action: 'hide'});
            }
            window.setTimeout(function () {
                _this.displayField(animArr);
            }, 1200);
        }

        this.$iptLowerWarnVal.val(form.warnLowerLimit);
        this.$iptUpperWarnVal.val(form.warnUpperLimit);
        this.$btnPreWarnMode.attr('data-value', form.preWarnMode).children('span').eq(0).text(form.preWarnModeName);
        this.$iptPreGreaterThan.val(form.preGreaterThan);
        this.$iptPreLessThan.val(form.preLessThan);
        this.$btnPreWarnTimeMode.attr('data-value', form.preWarnTimeMode).children('span').eq(0).text(form.preWarnTimeModeName);
        this.$btnPreHistoryValUsage.attr('data-value', form.preHistoryValUsage).children('span').eq(0).text(form.preHistoryValUsageName);
        this.$iptPreWarnTimeRangeStart.val(form.preWarnTimeRangeStart);
        if(form.preWarnMode === 1) {
            animArr2.push({$ele: this.$fgPreWarnRange, action: 'hide'});
            animArr2.push({$ele: this.$fgPreWarnTime, action: 'show'});
            if(form.preWarnTimeMode === 0) {
                animArr2.push({$ele: this.$fgPreWarnTimeRange, action: 'show'});
            } else {
                animArr2.push({$ele: this.$fgPreWarnTimeRange, action: 'hide'});
            }
            window.setTimeout(function () {
                _this.displayField(animArr2);
            }, 1200);
        }
    };

    // update this.options by the specified options
    ModalKPIConfig.prototype.setOptions = function (options) {
        this.options = $.extend({}, this.options, options);
    };

    ModalKPIConfig.prototype.attachEvents = function () {
        /////////////////////////////////
        // all dropdown selected event //
        /////////////////////////////////
        $('.dropdown-menu', this.$wrap).off('click.selected').on('click.selected', 'a', function (e) {
            var $this = $(this);
            var $btn = $this.parents('.dropdown-wrap').children('button');
            var value = $this.attr('data-value');
            var text = $this.text();

            $btn.attr('data-value', value);
            $btn.children('span').eq(0).text(text);

            e.preventDefault();
        });

        ////////////////////////////
        // modal show/hide events //
        ////////////////////////////
        this.$modal.off('show.bs.modal').on('show.bs.modal', function (e) {
            var $rightCt;
            if(e.namespace !== 'bs.modal') return true;
            $rightCt = $('#rightCt');
            // recover the form
            _this.recoverForm(_this.options.modalIns.entity.modal.option);
            // show the data soucre panel
            if(!$rightCt.hasClass('rightCtOpen')) $rightCt.click();
        });
        this.$modal.off('hide.bs.modal').on('hide.bs.modal', function (e) {
            var $rightCt;
            if(e.namespace !== 'bs.modal') return true;
            $rightCt = $('#rightCt');
            // reset the form state
            _this.reset();
            // hide the data soucre panel
            if($rightCt.hasClass('rightCtOpen')) $rightCt.click();
        });

        ////////////////////////////
        // field hide/show EVENTS //
        ////////////////////////////
        this.$ulWarnMode.find('a').off().on('click', function (e) {
            var value = parseInt($(this).attr('data-value'));
            var lastValue = parseInt(_this.$btnWarnMode.attr('data-value'));
            var animArr = [];

            // if current value equal to last value, do not do anything
            if(value === lastValue) return;
            _this.$btnWarnMode.attr('data-value', value);

            // display hiden/shown field
            if(value === 0) {
                animArr.push({$ele: _this.$fgWarnRange, action: 'show'});
                animArr.push({$ele: _this.$fgWarnTime, action: 'hide'});
                animArr.push({$ele: _this.$fgWarnTimeRange, action: 'hide'});
            } else {
                // reset
                _this.reset(['warn-time']);
                animArr.push({$ele: _this.$fgWarnRange, action: 'hide'});
                animArr.push({$ele: _this.$fgWarnTime, action: 'show'});
                animArr.push({$ele: _this.$fgWarnTimeRange, action: 'show'});
            }
            _this.displayField(animArr);
        });
        this.$ulWarnTimeMode.find('a').off().on('click', function (e) {
            var value = parseInt($(this).attr('data-value'));
            var lastValue = parseInt(_this.$btnWarnTimeMode.attr('data-value'));
            var animArr = [];

            // if current value equal to last value, do not do anything
            if(value === lastValue) return;
            _this.$btnWarnTimeMode.attr('data-value', value);

            // display hiden/shown field
            if(value === 0) {
                animArr.push({$ele: _this.$fgWarnRange, action: 'hide'});
                animArr.push({$ele: _this.$fgWarnTime, action: 'show'});
                animArr.push({$ele: _this.$fgWarnTimeRange, action: 'show'});
            } else {
                animArr.push({$ele: _this.$fgWarnRange, action: 'hide'});
                animArr.push({$ele: _this.$fgWarnTime, action: 'show'});
                animArr.push({$ele: _this.$fgWarnTimeRange, action: 'hide'});
            }
            _this.displayField(animArr);
        });
        this.$ulPreWarnMode.find('a').off().on('click', function (e) {
            var value = parseInt($(this).attr('data-value'));
            var lastValue = parseInt(_this.$btnPreWarnMode.attr('data-value'));
            var animArr = [];

            // if current value equal to last value, do not do anything
            if(value === lastValue) return;
            _this.$btnPreWarnMode.attr('data-value', value);

            // display hiden/shown field
            if(value === 0) {
                animArr.push({$ele: _this.$fgPreWarnRange, action: 'show'});
                animArr.push({$ele: _this.$fgPreWarnTime, action: 'hide'});
                animArr.push({$ele: _this.$fgPreWarnTimeRange, action: 'hide'});
            } else {
                // reset
                _this.reset('pre-warn-time');
                animArr.push({$ele: _this.$fgPreWarnRange, action: 'hide'});
                animArr.push({$ele: _this.$fgPreWarnTime, action: 'show'});
                animArr.push({$ele: _this.$fgPreWarnTimeRange, action: 'show'});
            }
            _this.displayField(animArr);
        });
        this.$ulPreWarnTimeMode.find('a').off().on('click', function (e) {
            var value = parseInt($(this).attr('data-value'));
            var lastValue = parseInt(_this.$btnPreWarnTimeMode.attr('data-value'));
            var animArr = [];

            // if current value equal to last value, do not do anything
            if(value === lastValue) return;
            _this.$btnPreWarnTimeMode.attr('data-value', value);

            // display hiden/shown field
            if(value === 0) {
                animArr.push({$ele: _this.$fgPreWarnRange, action: 'hide'});
                animArr.push({$ele: _this.$fgPreWarnTime, action: 'show'});
                animArr.push({$ele: _this.$fgPreWarnTimeRange, action: 'show'});
            } else {
                animArr.push({$ele: _this.$fgPreWarnRange, action: 'hide'});
                animArr.push({$ele: _this.$fgPreWarnTime, action: 'show'});
                animArr.push({$ele: _this.$fgPreWarnTimeRange, action: 'hide'});
            }
            _this.displayField(animArr);
        });
        this.$ulDataCycleMode.find('a').off().on('click', function (e) {
            var value = parseInt($(this).attr('data-value'));
            var lastValue = parseInt(_this.$btnDataCycleMode.attr('data-value'));
            var lastMonth, lastMonth2, nowMonth, lang, arrHtml = [];
            var liTmpl = '<li><a href="javascript:;" data-value="{0}">{1}</a></li>';
            
            // if current value equal to last value, do not do anything
            if(value === lastValue) return;
            _this.$btnDataCycleMode.attr('data-value', value);


            if(value === 0) _this.$fgiStartMonth.removeClass('on');
            else {
                lang = I18n.type
                // get "start months" options
                nowMonth = DateUtil.getNextMonth(new Date().getMonth());
                lastMonth = DateUtil.getLastMonth(nowMonth);
                lastMonth2 = DateUtil.getLastMonth(lastMonth);
                // get html
                arrHtml.push(liTmpl.format(lastMonth2, DateUtil.getMonthNameShort(lastMonth2-1, lang)));
                arrHtml.push(liTmpl.format(lastMonth, DateUtil.getMonthNameShort(lastMonth-1, lang)));
                arrHtml.push(liTmpl.format(nowMonth, DateUtil.getMonthNameShort(nowMonth-1, lang)));
                _this.$ulStartMonth.html(arrHtml.join(''));
                // reset button value and text
                _this.reset('start-month');

                _this.$fgiStartMonth.addClass('on');
            }
        });

        ///////////////////////
        // point Drop EVENTS //
        ///////////////////////
        this.$dropArea.off('dragover').on('dragover', function (e) {
            e.preventDefault();
        });
        this.$dropArea.off('dragenter').on('dragenter', function (e) {
            $(e.target).addClass('on');
            e.preventDefault();
            e.stopPropagation();
        });
        this.$dropArea.off('dragleave').on('dragleave', function (e) {
            $(e.target).removeClass('on');
            e.stopPropagation();
        });
        this.$dropArea.off('drop').on('drop', function (e) {
            var itemId = EventAdapter.getData().dsItemId;
            var $target = $(e.target);
            var name;
            if(!itemId) return;
            $target.removeClass('on');
            name = AppConfig.datasource.getDSItemById(itemId).alias;
            $target.attr({'data-value': itemId, 'title': name});
            $target.html('<span>'+name+'</span>');
            e.stopPropagation();
        });

        //////////////////
        // submit EVENT //
        //////////////////
        this.$btnSubmit.off().click(function () {
            // validation
            var form = {};

            //////////////////
            // Base Options //
            //////////////////
            form.chartName              = _this.$iptChartName.val();
            form.chartLowerLimit        = parseFloat(_this.$iptChartLowerLimit.val());
            form.chartUpperLimit        = parseFloat(_this.$iptChartUpperLimit.val());
            ///////////////////
            // Point Options //
            ///////////////////
            form.targetPointId          = _this.$divTargetPoint.attr('data-value');
            form.referencePointId       = _this.$divReferencePoint.attr('data-value');
            form.referenceCondition     = parseInt(_this.$btnCondition.attr('data-value'));
            form.referenceConditionName = _this.$btnCondition.children('span').eq(0).text();
            form.referenceConditionVal  = parseFloat(_this.$iptConditionVal.val());
            ////////////////
            // Data Cycle //
            ////////////////
            // 0-Monthly, 1-Quarterly
            form.dataCycleMode          = parseInt(_this.$btnDataCycleMode.attr('data-value'));
            form.dataCycleModeName      = _this.$btnDataCycleMode.children('span').eq(0).text();
            form.btnStartMonth          = _this.$btnStartMonth.attr('data-value');
            ////////////////
            // Warn Range //
            ////////////////
            // 0-user input, 1-history
            form.warnMode               = parseInt(_this.$btnWarnMode.attr('data-value'));
            form.warnModeName           = _this.$btnWarnMode.children('span').eq(0).text();
            // 0-show, 1-hide
            form.isShowRC               = parseInt(_this.$btnIsShowRC.attr('data-value'));
            form.isShowRCName           = _this.$btnIsShowRC.children('span').eq(0).text();
            form.warnLowerLimit         = parseFloat(_this.$iptLowerWarnVal.val());
            form.warnUpperLimit         = parseFloat(_this.$iptUpperWarnVal.val());
            // 0-user input, 1-history
            form.warnTimeMode           = parseInt(_this.$btnWarnTimeMode.attr('data-value'));
            form.warnTimeModeName       = _this.$btnWarnTimeMode.children('span').eq(0).text();
            // 0-use as lower, 1-use as upper
            form.historyValUsage        = parseInt(_this.$btnHistoryValUsage.attr('data-value'));
            form.historyValUsageName    = _this.$btnHistoryValUsage.children('span').eq(0).text();
            // start date
            form.warnTimeRangeStart     = _this.$iptWarnTimeRangeStart.val();
            
            ////////////////////
            // Pre-Warn Range //
            ////////////////////
            // 0-user input, 1-history
            form.preWarnMode            = parseInt(_this.$btnPreWarnMode.attr('data-value'));
            form.preWarnModeName        = _this.$btnPreWarnMode.children('span').eq(0).text();
            form.preGreaterThan         = parseFloat(_this.$iptPreGreaterThan.val());
            form.preLessThan            = parseFloat(_this.$iptPreLessThan.val());
            // 0-user input, 1-history
            form.preWarnTimeMode        = parseInt(_this.$btnPreWarnTimeMode.attr('data-value'));
            form.preWarnTimeModeName    = _this.$btnPreWarnTimeMode.children('span').eq(0).text();
            // 0-use as lower, 1-use as upper
            form.preHistoryValUsage     = parseInt(_this.$btnPreHistoryValUsage.attr('data-value'));
            form.preHistoryValUsageName = _this.$btnPreHistoryValUsage.children('span').eq(0).text();
            // start date
            form.preWarnTimeRangeStart  = _this.$iptPreWarnTimeRangeStart.val();

            // save to modal
            _this.options.onSubmit.call(_this.options.modalIns, form);

            // close
            _this.$btnClose.trigger('click');
        });
    };

    ModalKPIConfig.prototype.detachEvents = function () { };

    ModalKPIConfig.prototype.destroy = function () {
        this.detachEvents();
        this.$wrap.remove();
    };

    //////////////
    // DEFAULTS //
    //////////////
    var DEFAULTS = {};

    return ModalKPIConfig;
} (jQuery, window));

// ModalKPIChart CLASS DEFINITION
var ModalKPIChart = (function ($) {

    var PRECISION = 2;

    function ModalKPIChart (screen, entityParams) {
        ModalBase.call(this, screen, entityParams, this._render, null, this._showConfig);
        
        // options
        this.options = $.extend(true, {}, DEFAULTS);
        this.historyChartOptions = $.extend(true, {}, HISTORY_CHART_DEFAULTS);

        // params
        this.startline = null;
        this.endline = null;
        this.targetPointData = null;
        this.referencePointData = null;
        this.refreshTimesInOneHour = 1;
        this.period = null;

        // indicators
        this.indicators = {};
        this.samplingPeriod = {
            format: 'h1',
            value2ms: 3600000
        };

        // chart
        this.historyChart = null;

        // DOM
        this.$lkUpdateTime = null;

        // trace
        this.m_bIsGoBackTrace = false;
        this.m_traceData = undefined;
    }

    // all I need is ModalBase.prototype
    ModalKPIChart.prototype = Object.create(ModalBase.prototype);
    // recover the constructor
    ModalKPIChart.prototype.constructor = ModalKPIChart;

    ModalKPIChart.prototype.optionTemplate = {
        name: 'toolBox.modal.REAL_TIME_KPI_CHART',
        parent: 0,
        mode: 'custom',
        maxNum: 1,
        title: '',
        minHeight: 2,
        minWidth: 3,
        maxHeight: 6,
        maxWidth: 12,
        type: 'ModalKPIChart',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalKPIChart.prototype.init = function () {
        var $panel = $(this.container).closest('.panel');
        // add 'update time' info
        this.$lkUpdateTime = $('<div class="lk-update-time" title="Last Update Time"><span class="glyphicon glyphicon-time"></span><span>updating...</span></div>')
            .appendTo($panel);
    };

    // render the chart
    ModalKPIChart.prototype._render = function () {
        var _this = this;
        var option = this.entity.modal.option;
        // chart options
        var min = option.chartLowerLimit || 0;
        var max = option.chartUpperLimit || 100;
        var warnMode = option.warnMode;
        var warnLower = option.warnLowerLimit;
        var warnUpper = option.warnUpperLimit;
        var preWarnMode = option.preWarnMode;
        var preWarnLower = warnLower + option.preGreaterThan;
        var preWarnUpper = warnUpper - option.preLessThan;
        var historyValUsage = option.historyValUsage;
        // point options
        var targetPointId = option.targetPointId;
        var referencePointId = option.referencePointId;
        // data cycle mode
        var dataCycleMode = option.dataCycleMode;
        var period = this.period = this.getTimePeriod();

        var postData;
        var ids = referencePointId ? [targetPointId, referencePointId] : [targetPointId];
        
        postData = [{
            dsItemIds: ids,
            timeStart: period.nowStart,
            timeEnd: period.nowEnd,
            timeFormat: this.samplingPeriod.format
        }];

        if(warnMode === 1) {
            postData.push({
                dsItemIds: ids,
                timeStart: period.refStart,
                timeEnd: period.refEnd,
                timeFormat: this.samplingPeriod.format
            });
        }

        this.init();

        // initialize series
        this.options.series[0].data[0].value = min;
        this.options.series[0].min = min;
        this.options.series[0].max = max;
        this.historyChartOptions.yAxis[0].min = min;
        this.historyChartOptions.yAxis[0].max = max;
        // initialize tooltip
        this.options.tooltip.formatter = function (p) {
            return p.seriesName+': <strong>'+p.value+'</strong><br/>From: '+ 
                _this.store.timeShaft[0] + '<br/>To: '+ _this.store.timeShaft[_this.store.timeShaft.length-1];
        };

        this.spinner.spin(this.container);
        WebAPI.post('/analysis/startWorkspaceDataGenHistogramMulti', postData)
            .done(function (rs) {
                var axisColor = _this.options.series[0].axisLine.lineStyle.color;
                var range = max - min;
                var maxIndex;
                _this.store = {list: {}, timeShaft: rs[0].timeShaft};

                // format the array to map
                for (var i = 0, len = rs[0].list.length; i < len; i++) {
                    _this.store.list[rs[0].list[i].dsItemId] = rs[0].list[i].data;
                }

                if(rs[1] !== undefined) {
                    _this.store2 = {list: {}, timeShaft: rs[1].timeShaft};
                    for (i = 0, len = rs[1].list.length; i < len; i++) {
                        _this.store2.list[rs[1].list[i].dsItemId] = rs[1].list[i].data;
                    }
                }

                // filter target point data by reference point data
                _this.filterPointData();
                _this.initIndicators();
                _this.setTimeParams();

                maxIndex = _this.store.fullTimeShaft.length - 1;
                if(warnMode === 0) {
                    if(warnLower !== undefined && (warnLower-min) > 0){
                        axisColor.push([(warnLower-min)/range, '#ff4500']);
                        _this.historyChartOptions.series[0].markLine.data.push([
                            {name: 'Lower Warn Line', value: warnLower, xAxis: 0, yAxis: warnLower, itemStyle:{normal:{color:'#ff4500', lineStyle:{type:'solid'}}}},
                            {xAxis: _this.store.deadline, yAxis: warnLower}
                        ]);
                    } 
                    if(preWarnLower !== undefined && (preWarnLower-min) > 0) {
                        axisColor.push([(preWarnLower-min)/range, 'orange']);
                        _this.historyChartOptions.series[0].markLine.data.push([
                            {name: 'Lower Pre-Warn Line', value: preWarnLower, xAxis: 0, yAxis: preWarnLower, itemStyle:{normal:{color:'orange', lineStyle:{type:'solid'}}}},
                            {xAxis: _this.store.deadline, yAxis: preWarnLower}
                        ]);
                    }
                    if(preWarnUpper !== undefined && (preWarnUpper-min) > 0) {
                        axisColor.push([(preWarnUpper-min)/range, 'lightgreen']);
                        _this.historyChartOptions.series[0].markLine.data.push([
                            {name: 'Upper Pre-Warn Line', value: preWarnUpper, xAxis: 0, yAxis: preWarnUpper, itemStyle:{normal:{color:'orange', lineStyle:{type:'solid'}}}},
                            {xAxis: maxIndex, yAxis: preWarnUpper}
                        ]);
                    } 
                    if(warnUpper !== undefined && (warnUpper-min) > 0) {
                        axisColor.push([(warnUpper-min)/range, 'orange']);
                        _this.historyChartOptions.series[0].markLine.data.push([
                            {name: 'Upper Warn Line', value: warnUpper, xAxis: 0, yAxis: warnUpper, itemStyle:{normal:{color:'#ff4500', lineStyle:{type:'solid'}}}},
                            {xAxis: maxIndex, yAxis: warnUpper}
                        ]);
                    }
                    axisColor.push([1, '#ff4500']);
                }
                // if use history, calculate the markLine position
                else {
                    // use as warn lower limit
                    if(historyValUsage === 0) {
                        axisColor.push([(_this.indicators.average2-min)/range, '#ff4500']);

                        if(preWarnMode === 0) {
                            preWarnLower = _this.indicators.average2 + option.preGreaterThan;
                            if( preWarnLower !== undefined && (preWarnLower-min) > 0 ) {
                                axisColor.push([(preWarnLower-min)/range, 'orange']);
                                _this.historyChartOptions.series[0].markLine.data.push([
                                    {name: 'Lower Pre-Warn Line', value: preWarnLower.toFixed(PRECISION), xAxis: 0, yAxis: preWarnLower, itemStyle:{normal:{color:'orange', lineStyle:{type:'solid'}}}},
                                    {xAxis: _this.store.deadline, yAxis: preWarnLower}
                                ]);
                            }
                        } else if(preWarnMode === 1 && _this.indicators.preWarnValue > _this.indicators.average2) {
                            axisColor.push([(_this.indicators.preWarnValue-min)/range, 'orange']);
                            _this.historyChartOptions.series[0].markLine.data.push([
                                {name: 'Lower Pre-Warn Line', value: _this.indicators.preWarnValue.toFixed(PRECISION), xAxis: 0, yAxis: _this.indicators.preWarnValue, itemStyle:{normal:{color:'orange', lineStyle:{type:'solid'}}}},
                                {xAxis: _this.store.deadline, yAxis: _this.indicators.preWarnValue}
                            ]);
                        }
                        axisColor.push([1, 'lightgreen']);

                        _this.historyChartOptions.series[0].markLine.data.push([
                            {name: 'Lower Warn Line', value: _this.indicators.average2.toFixed(PRECISION), xAxis: 0, yAxis: _this.indicators.average2, itemStyle:{normal:{color:'#ff4500', lineStyle:{type:'solid'}}}},
                            {xAxis: _this.store.deadline, yAxis: _this.indicators.average2}
                        ]);

                    }
                    // use as upper limit
                    else {
                        // from user input
                        if(preWarnMode === 0) {
                            preWarnUpper = _this.indicators.average2 - option.preLessThan;
                            if(preWarnUpper !== undefined && (preWarnUpper-min) > 0) {
                                axisColor.push([(preWarnUpper-min)/range, 'lightgreen']);
                                axisColor.push([(_this.indicators.average2-min)/range, 'orange']);
                                _this.historyChartOptions.series[0].markLine.data.push([
                                    {name: 'Upper Pre-Warn Line', value: preWarnUpper.toFixed(PRECISION), xAxis: 0, yAxis: preWarnUpper, itemStyle:{normal:{color:'orange', lineStyle:{type:'solid'}}}},
                                    {xAxis: _this.store.deadline, yAxis: preWarnUpper}
                                ]);
                            }
                        } else if(preWarnMode === 1 && _this.indicators.preWarnValue < _this.indicators.average2) {
                            axisColor.push([(_this.indicators.preWarnValue-min)/range, 'lightgreen']);
                            axisColor.push([(_this.indicators.average2-min)/range, 'orange']);
                            _this.historyChartOptions.series[0].markLine.data.push([
                                {name: 'Upper Pre-Warn Line', value: _this.indicators.preWarnValue.toFixed(PRECISION), xAxis: 0, yAxis: _this.indicators.preWarnValue, itemStyle:{normal:{color:'orange', lineStyle:{type:'solid'}}}},
                                {xAxis: _this.store.deadline, yAxis: _this.indicators.preWarnValue}
                            ]);
                        } else {
                            axisColor.push([(_this.indicators.average2-min)/range, 'lightgreen']);
                        }
                        
                        axisColor.push([1, '#ff4500']);
                        _this.historyChartOptions.series[0].markLine.data.push([
                            {name: 'Upper Warn Line', value: _this.indicators.average2.toFixed(PRECISION), xAxis: 0, yAxis: _this.indicators.average2, itemStyle:{normal:{color:'#ff4500', lineStyle:{type:'solid'}}}},
                            {xAxis: _this.store.deadline, yAxis: _this.indicators.average2}
                        ]);
                    }
                }

                // 自适应
                _this.fitContainer();
                _this.chart = echarts.init(_this.container, AppConfig.chartTheme);
                _this.chart.clear();
                _this.chart.setOption(_this.options);
                _this.reloadChart();

                // _this.chart.hideLoading();

            }).always(function () {
                _this.spinner.stop();
            });
    };

    ModalKPIChart.prototype.filterPointData = function () {
        var option = this.entity.modal.option;
        var warnMode = option.warnMode;
        var cond = option.referenceCondition;
        var condVal = option.referenceConditionVal;
        var tPoints = null, rPoints = null;

        // don't filter if the referencePointId is not specified
        if(!option.referencePointId) return;

        tPoints = this.store.list[option.targetPointId];
        rPoints = this.store.list[option.referencePointId];
        // if the tPoints.length !== rPoints.length, we can't deal with this suitation :-(
        if(tPoints.length !== rPoints.length) return;
        for (var i = 0, len = rPoints.length; i < len; i++) {
            // turn int to float
            tPoints[i] = parseFloat(tPoints[i]);
            rPoints[i] = parseFloat(rPoints[i]);
            if(!this.isPointRuled(rPoints[i], condVal, cond)) {
                tPoints[i] = '-';
            }
        }
        // reference point data only used once, so we delete it to save memories
        // delete this.store.list[option.referencePointId];

        // filter history data
        if(warnMode === 1) {
            tPoints = this.store2.list[option.targetPointId];
            rPoints = this.store2.list[option.referencePointId];
            if(tPoints.length !== rPoints.length) return;
            for (var i = 0, len = rPoints.length; i < len; i++) {
                // turn int to float
                tPoints[i] = parseFloat(tPoints[i]);
                rPoints[i] = parseFloat(rPoints[i]);
                if(!this.isPointRuled(rPoints[i], condVal, cond)) {
                    tPoints[i] = '-';
                }
            }
            // delete this.store2.list[option.referencePointId];
        }
        
    };

    ModalKPIChart.prototype.isPointRuled = function (pointVal, condVal, cond) {
        if(condVal === null) return true;
        switch(cond) {
            // '==='
            case 0:
                return pointVal === condVal;
            // '<'
            case 1:
                return pointVal < condVal;
            // '>'
            case 2:
                return pointVal > condVal;
            default:
                return true;
        }
    };

    ModalKPIChart.prototype.setAnimation = function () {
        var option = this.entity.modal.option;
        var warnMode = option.warnMode;
        var historyValUsage = option.historyValUsage;
        var warnLower = option.warnLowerLimit;
        var warnUpper = option.warnUpperLimit;
        var preWarnLower = warnLower + option.preGreaterThan;
        var preWarnUpper = warnUpper - option.preLessThan;
        var $parent = $(this.container).parents('.panel');
        var curVal = this.indicators.average;
        // reset
        $parent.removeClass('warn-anim pre-warn-anim');
        if(warnMode === 1) {
            if( (historyValUsage === 0 && curVal < this.indicators.average2) ||
                (historyValUsage === 1 && curVal > this.indicators.average2)) {
                $parent.addClass('warn-anim');
            }
        } else {
            switch (true) {
                case curVal < preWarnLower:
                    $parent.addClass('pre-warn-anim');
                    break;
                case curVal  < warnLower:
                    $parent.addClass('warn-anim');
                    break;
                case curVal  < preWarnUpper: break;
                case curVal  < warnUpper:
                    $parent.addClass('pre-warn-anim');
                    break;
                default:
                    $parent.addClass('warn-anim');
                    break;
            }
        }
        
    };

    // update the chart
    ModalKPIChart.prototype.update = function (rs) {
        var option = this.entity.modal.option;
        var targetPointId = option.targetPointId;
        var referencePointId = option.referencePointId;
        var targetPointData, referencePointData;

        var lastTick, nowTick;

        // if store object is null, the first load is pending or failed
        // do not do anything
        if(!this.store) return;

        // get the last tick, and move after 5 minutes
        lastTick = this.store.timeShaft[this.store.timeShaft.length-1];
        lastTick = lastTick.toDate().valueOf() + 60000;
        nowTick = new Date().valueOf();
        // only now time greater than lastTick time, we do update
        if( nowTick < lastTick) {
            return;
        }

        for (var i = 0, len = rs.length; i < len; i++) {
            if(targetPointId === rs[i].dsItemId) {
                targetPointData = parseFloat(rs[i].data);
            }
            if(referencePointId === rs[i].dsItemId) {
                referencePointData = parseFloat(rs[i].data);
            }
        }

        if(isNaN(targetPointData)) return;

        this.appendData(targetPointData, referencePointData);

        // reload the chart
        this.reloadChart();
    };

    ModalKPIChart.prototype.reloadChart = function () {
        this.options.series[0].data[0].value = this.indicators.average.toFixed(PRECISION);
        //this.chart.setSeries(this.options.series, true);
        var opt = this.chart.getOption();
        opt.series = this.options.series;
        this.chart.setOption(opt);
        this.setAnimation();

        // set update time
        this.$lkUpdateTime.children('span').eq(1).text(new Date().format('HH:mm'));
    };

    // show config mode
    ModalKPIChart.prototype._showConfig = function () {
        // this.chart.dispose();
    };

    ModalKPIChart.prototype.showConfigModal = function (container, options) {
        this.configModal.setOptions({modalIns: this});
        this.configModal.show();
    };

    ModalKPIChart.prototype.setOptions = function (options) {
        this.options = $.extend({}, this.opitons, options);
    };

    ModalKPIChart.prototype.destroy = function () {
    };

    ModalKPIChart.prototype.saveConfig = function (form) {
        this.entity.modal.title = form.chartName;
        this.entity.modal.points = [form.targetPointId];
        if(form.referencePointId) this.entity.modal.points.push(form.referencePointId);
        this.entity.modal.option = form;
        this.entity.modal.interval = 60000;
    };

    ModalKPIChart.prototype.configModal = new ModalKPIConfig({onSubmit: function (form) { this.saveConfig(form); }});

    ModalKPIChart.prototype.getTimePeriod = function () {
        var now;
        var period = {};
        var option = this.entity.modal.option;
        var warnMode = option.warnMode;
        var historyValUsage = option.historyValUsage;
        var warnStart = option.warnTimeRangeStart;
        var warnTimeMode = option.warnTimeMode;
        var startDate = option.warnTimeRangeStart;
        var circleMode = option.dataCycleMode;
        var startMonth;

        if (!this.m_bIsGoBackTrace) {
            now = new Date();
            this.DEFAULTS = true;
            this.HISTORY_CHART_DEFAULTS = true;
        }
        else {
            now = this.m_traceData.currentTime;
            this.DEFAULTS = false;
            this.HISTORY_CHART_DEFAULTS = false;
        }

        // monthly
        if(circleMode === 0) {
            period.nowStart = now.format('yyyy-MM-01 00:00:00');
            period.nowEnd = now.format('yyyy-MM-dd HH:mm:ss');
            
            // if warnMode is 0, we need not to continue
            if(warnMode === 0) return period;

            // calculate history start date
            if(warnTimeMode === 0) {
                period.refStart = warnStart.toDate().format('yyyy-MM');
                period.refEnd = period.refStart + '-' + DateUtil.daysInMonth(period.refStart.toDate()) + ' 23:59:59';
                period.refStart += '-01 00:00:00';
            } else {
                period.refStart = (now.format('yyyy')-1) + now.format('-MM');
                // deal with leap year
                period.refEnd = period.refStart + '-' + DateUtil.daysInMonth(period.refStart.toDate()) + ' 23:59:59';
                period.refStart += '-01 00:00:00';
            }
            period.lag = period.nowStart.toDate().valueOf() - period.refStart.toDate().valueOf();
        }
        // quarterly
        else {

        }

        return period;
    };

    ModalKPIChart.prototype.initIndicators = function () {
        var option = this.entity.modal.option;
        var warnMode = option.warnMode;
        var preWarnMode = option.preWarnMode;
        var dsId = option.targetPointId;
        var data = this.store.list[dsId];
        var average = 0, sum = 0;
        var list1, list2;

        // AVERAGE INDICATOR
        for (var i = 0, len = data.length; i < len; i++) {
            if(isNaN(data[i])) continue;
            average += data[i]*1;
        };
        // if average is NaN
        if(isNaN(average)) this.indicators.average = this.entity.modal.option.chartLowerLimit;
        else this.indicators.average = average / len;

        // history data
        if(warnMode === 1) {
            average = 0;
            data = this.store2.list[dsId];
            for (var i = 0, len = data.length; i < len; i++) {
                if(isNaN(parseFloat(data[i]))) continue;
                average += data[i]*1;
            };
            // if average is NaN
            if(isNaN(average)) this.indicators.average2 = this.entity.modal.option.chartLowerLimit;
            else this.indicators.average2 = average / len;
        }

        if(preWarnMode === 1) {
            this.setPreWarnValue();
        }
    };

    ModalKPIChart.prototype.setPreWarnValue = function () {
        var option = this.entity.modal.option;
        var targetPointId = option.targetPointId;
        var warnMode = option.warnMode;
        var preHistoryValUsage = option.preHistoryValUsage;
        var list1 = this.store.list[targetPointId];
        var list2 = this.store2.list[targetPointId];
        var average = 0;
        var sum = 0;
        var validNum = 0;
        for (var i = 0, len1 = list1.length, len2 = list2.length; i < len2; i++) {
            if(i >= len1) {
                if(isNaN(list2[i])) continue;
                sum += list2[i];
            } else {
                if(isNaN(list1[i])) continue;
                sum += list1[i];
            }
            validNum += 1;
        }
        if(warnMode === 1) {
            this.indicators.preWarnValue = this.indicators.average + this.indicators.average2 - sum/validNum;
        } else {
            if(preHistoryValUsage === 0) {
                this.indicators.preWarnValue = this.indicators.average + option.warnLowerLimit - sum/validNum;
            } else {
                this.indicators.preWarnValue = this.indicators.average + option.warnUpperLimit - sum/validNum;
            }
        }
    };

    ModalKPIChart.prototype.appendData = function (tValue, rValue) {
        var lastTick = this.store.timeShaft[this.store.timeShaft.length-1];
        var option = this.entity.modal.option;
        var preWarnMode = option.preWarnMode;
        var targetPointId = option.targetPointId;
        var targetPointList = this.store.list[targetPointId];
        var cond = option.referenceCondition;
        var condVal = option.referenceConditionVal;
        var len = this.store.list[targetPointId].length;
        var nowStr = new Date().format('yyyy-MM-dd HH:00:00')
        var lastValue, newLastValue;
        var timeStamp;

        if(isNaN(rValue) || this.isPointRuled(rValue, condVal, cond)) {
            // here, don not care about the precision
            tValue = tValue.toFixed(3) * 1;
            if(lastTick !== nowStr) {
                timeStamp = lastTick.toDate().valueOf();
                // deal with the suitation when there is no data in last hour
                if ((nowStr.toDate().valueOf() - timeStamp) > 3600000) {
                    this.store.timeShaft.push(new Date(timeStamp+3600000).format('yyyy-MM-dd HH:00:00'));
                }

                this.store.timeShaft.push(nowStr);
                this.refreshTimesInOneHour = 0;
                // push new value
                this.indicators.average = (this.indicators.average*len+tValue) / (len+1);
                targetPointList.push(tValue);

            } else {
                lastValue = targetPointList[targetPointList.length-1]
                newLastValue =
                    (lastValue*this.refreshTimesInOneHour+tValue) / (this.refreshTimesInOneHour+1);
                targetPointList[targetPointList.length-1] = newLastValue.toFixed(3)*1;
                this.indicators.average = (this.indicators.average*len-lastValue+newLastValue) / len;
                this.refreshTimesInOneHour += 1;
            }
            
            if(preWarnMode === 1) {
               this.setPreWarnValue();
            }
        }
    };

    ModalKPIChart.prototype.setTimeParams = function () {
        if(this.store.timeShaft.length == 0) return;
        var lastTick = this.store.timeShaft[this.store.timeShaft.length-1].toDate().valueOf();
        var option = this.entity.modal.option;
        var tick = lastTick + this.samplingPeriod.value2ms;
        var now = new Date();

        // copy array
        this.store.fullTimeShaft = this.store.timeShaft.concat();
        // monthly
        if(option.dataCycleMode === 0) {
            this.store.deadline = now.format('yyyy-MM-' + DateUtil.daysInMonth(now) + ' 23:55:00').toDate();
            // get the last day of current month
            while(tick <= this.store.deadline) {
                tick += this.samplingPeriod.value2ms;
                this.store.fullTimeShaft.push(tick.toDate().format('yyyy-MM-dd HH:mm:ss'));
            }
        }
        // quarterly
        else {

        }
    };

    ModalKPIChart.prototype.fitContainer = function () {
        var row = this.entity.spanR;
        var column = this.entity.spanC;

        if(Math.min(row, column) < 3) {
            this.options.series[0].splitLine.length = 15;
            this.options.series[0].axisLine.lineStyle.width = 6;
            this.options.series[0].axisTick.length = 12;
            this.options.series[0].pointer.width = 4;
            this.options.series[0].detail.textStyle.fontSize = 16;
        }

    };

    ModalKPIChart.prototype.goBackTrace = function (data) {
        this.m_bIsGoBackTrace = true;
        this.m_traceData = data;
        this._render();
        this.m_bIsGoBackTrace = false;
    };

    var DEFAULTS = {
        tooltip: {},
        visualMap: {
            show: false
        },
        series: [{
            name: 'KPI Indicator',
            type: 'gauge',
            precision: 2,
            splitNumber: 10,
            axisTick: {
                show: true,
                splitNumber: 5,
                length :20,
                lineStyle: {
                    color: 'auto',
                    width: 1,
                    type: 'solid'
                }
            },
            axisLine:{ // 坐标轴线  外围一圈
                show: true,
                lineStyle: {
                    color:[],
                    width:1
                }
            },
            axisLabel: {//刻度标签  字体
                textStyle: {
                    color: '#a2adbc'
                }
            },
            splitLine: { //分割线
                show: true,
                length :30,
                lineStyle: {
                    color: 'auto',
                    width: 2,
                    type: 'solid'
                }
            },
            pointer : {
                length : '80%',
                width : 4
            },
            detail : {
                offsetCenter:['0', '-30%'],
                textStyle: {
                    color: '#ccc',
                    fontSize : 20
                }
            },
            data: [{name: ''}]
        }
        ],
        animation: true
    };

    var HISTORY_CHART_DEFAULTS = {
        title : {
            text : 'History Data'
        },
        legend: {data: ['Target Point']},
        tooltip : {
            trigger: 'axis'
        },
        dataZoom: {
            show: false,
            realtime : true,
            start : 0,
            end : 100
        },
        grid: {
            y2: 80
        },
        xAxis : [
            {
                type: 'category'
            }
        ],
        yAxis : [
            {
                type : 'value'
            }
        ],
        series : [
            {
                name: 'Target Point',
                type: 'line',
                symbolSize: 0,
                markLine: {
                    precision: 3,
                    symbol: 'none',
                    data: []
                },
                markPoint: {
                    symbol:'emptyCircle',
                    effect : {
                        show: true,
                        shadowBlur : 0
                    },
                    data: []
                }
            }
        ],
        animation: true
    };

    return ModalKPIChart;

} (jQuery));
// ModalObserverConfig CLASS DEFINITION
var ModalObserverConfig = ( function ($, window, undefined) {
    var _this;

    function ModalObserverConfig(options) {
        _this = this;
        // parameters
        this.options = $.extend({}, DEFAULTS, options);
        // DOM
        this.$wrap = null;
    }

    ModalObserverConfig.prototype.show = function () {
        var domPanelContent = document.getElementById('paneContent');
        if($('#modalObserverConfigWrap').length > 0) {
            this.$modal.modal('show');
            return;
        }

        Spinner.spin(domPanelContent);
        // get the template from server
        WebAPI.get('/static/views/observer/widgets/modalObserverConfig.html').done(function (html) {
            _this.$wrap = $('<div class="modal-observer-config-wrap" id="modalObserverConfigWrap">')
                .appendTo(domPanelContent).html(html);
            _this.$modal = _this.$wrap.children('.modal');

            WebAPI.get("/get_s3db_pages/" + AppConfig.projectId + "/" + AppConfig.userId).done(function (result) {
                _this.init(result.pages);
                _this.$modal.modal('show');
            }).always(function (msg) {
                Spinner.stop();
            });
            
        });
    };

    ModalObserverConfig.prototype.init = function (data) {
        // DOM
        this.$formWrap      = $('#obFormWrap', '#modalObserverConfigWrap');
        this.$btnClose      = $('.close', '#modalObserverConfigWrap');
        this.$sltObserverId = $('#sltObserverId', '#obFormWrap');
        this.$btnSubmit     = $('#btnObSubmit', '#modalObserverConfigWrap');

        var sb = new StringBuilder();
        for (var i = 0, item, len = data.length; i < len; i++) {
            item = data[i];
            sb.append('<option value="').append(item.id).append('">')
                .append(item.name + ' (width: ' + item.width + ', height: ' + item.height + ')</option>');
        }

        this.$sltObserverId.html(sb.toString());

        this.attachEvents();
    };

    ModalObserverConfig.prototype.attachEvents = function () {
        this.$btnSubmit.off().click( function (e) {
            var form = {};
            form.id = _this.$sltObserverId.val().trim();

            // save to modal
            _this.options.onSubmit.call(_this.options.modalIns, form);
            // close modal
            _this.$btnClose.trigger('click');
            e.preventDefault();
        } );
    };

    ModalObserverConfig.prototype.setOptions = function (options) {
        this.options = $.extend({}, this.options, options);
    };

    var DEFAULTS = {};

    return ModalObserverConfig;

}(jQuery, window) );


// ModalObserver CLASS DEFINITION
var ModalObserver = (function ModalObserver($, window, undefined) {
    
    function ModalObserver(screen, entityParams) {
        ModalBase.call(this, screen, entityParams, this._render, null, this._showConfig);
        this.options = $.extend(true, {}, DEFAULTS);
        this.obScreen = null;
    };

    ModalObserver.prototype = Object.create(ModalBase.prototype);
    ModalObserver.prototype.constructor = ModalObserver;

    ModalObserver.prototype.optionTemplate = {
        name: 'toolBox.modal.OBSERVER',
        parent: 0,
        mode: 'custom',
        maxNum: 1,
        title: '',
        minHeight: 2,
        minWidth: 3,
        maxHeight: 6,
        maxWidth: 12,
        type: 'ModalObserver',
        tooltip: {
            'imgPC': false,
            'imgMobile': false,
            'desc': ''
        }
    };

    ModalObserver.prototype._render = function () {
        var options = this.entity.modal.option;
        var id = options.id || '200000360';

        this.obScreen = new ObserverScreen(id);
        this.container = $(this.container).html('<div class="divMain" style="width: 100%; height: 100%;">\
                <div class="div-canvas-ctn" style="padding: 0; margin: 0 auto; height: 100%; width: 100%;">\
                    <canvas class="canvas-ctn" style="width: 100%; height: 100%;">浏览器不支持</canvas>\
                </div>\
                <div id="divObserverTools" style="height: 0"></div>\
            </div>')[0];
        this.obScreen.isInDashBoard = true;
        this.obScreen.show(this.container);
    };

    ModalObserver.prototype._showConfig = function () {};

    ModalObserver.prototype.showConfigModal = function () {
        this.configModal.setOptions({modalIns: this});
        this.configModal.show();
    };

    ModalObserver.prototype.saveConfig = function (form) {
        this.entity.modal.option = form;
        this.entity.modal.points = [];
    };

    ModalObserver.prototype.configModal = new ModalObserverConfig({onSubmit: function (form) { this.saveConfig(form); }});

    ModalObserver.prototype._close = function () {
        if(this.obScreen) this.obScreen.close();
    };

    // DEFAULTS OPTION
    var DEFAULTS = {
    };

    return ModalObserver;

} (jQuery, window));

var ModalMultiple = (function () {
    function ModalMultiple(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        ModalRealtimeLine.call(this, screen, entityParams, renderModal, updateModal, null);
        this.m_bIsGoBackTrace = false;
        this.m_traceData = undefined;
    };

    ModalMultiple.prototype = new ModalRealtimeLine();

    ModalMultiple.prototype.optionTemplate = {
        name: 'toolBox.modal.MULTIPLE',
        parent: 0,
        mode: ['multiple'],
        maxNum: 10,
        title: '',
        minHeight: 2,
        minWidth: 3,
        maxHeight: 6,
        maxWidth: 12,
        type: 'ModalMultiple',
        modelParams: {
            paraName:['line','bar','area','cumulativeBar'],
            paraShowName: {'line': 'Line Chart Parameters',/*I18n.resource.modalConfig.data.DASHBOARD_MULTI_LINE,*/
                'bar': "Bar Chart Parameters",/*I18n.resource.modalConfig.data.DASHBOARD_MULTI_BAR,*/
                'area': "Area Chart Parameters",/*I18n.resource.modalConfig.data.DASHBOARD_MULTI_AREA,*/
                'cumulativeBar': "Cumulative Bar Chart Parameters"/*I18n.resource.modalConfig.data.DASHBOARD_MULTI_CUMULATIVE_BAR*/
            },
            paraAnlysMode:'part'
        },
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };
    ModalMultiple.prototype.renderModal = function () {

    };
    ModalMultiple.prototype.updateModal = function (points) {
        if(points.length < 1) return;
        var _this = this;
        var now = new Date();
        if(!this.lastRenderTime || now.getTime() - this.lastRenderTime > this.dicPeriod[_this.entity.modal.option.timeFormat]){
            var pointNameList = (function(points){
                var arr = [];
                for(var i = 0; i < points.length; i++){
                    arr.push(points[i].dsItemId)
                }
                return arr;
            })(points);
            var endTime;
            if (!_this.m_bIsGoBackTrace) {
                endTime = new Date().format('yyyy-MM-dd HH:mm:ss');
                _this.optionDefault.animation = false;
            }
            else {
                this.m_bIsGoBackTrace = false;
                endTime = new Date(_this.m_traceData.currentTime).format('yyyy-MM-dd HH:mm:ss');
                _this.optionDefault.animation = false;
            }
            var startTime = endTime.split(' ')[0] + ' 00:00:00';
            this.lastRenderTime = now;
            WebAPI.post('/analysis/startWorkspaceDataGenHistogram', {
                //dataSourceId: '',  //_this.screen.store.datasources[0].id,
                dsItemIds: pointNameList,
                timeStart: startTime,
                timeEnd: endTime,
                timeFormat: 'h1'
            }).done(function (dataSrc) {
                if (dataSrc == undefined || dataSrc.length <= 0) {
                    return;
                }
                var entityItem = _this.dealWithData(dataSrc,2);
                var option = {
                    tooltip:{
                        extraCssText: 'text-align: left;'
                    },
                    legend: (function(){
                            if(AppConfig.isMobile){
                                return {data: entityItem.arrLegend,top:25}
                            }else{
                                return {data: entityItem.arrLegend}
                            }
                        })(),
                    //grid: {x: 70, y: 34, x2: 50, y2: 24},
                    grid: (function(){
                        if(AppConfig.isMobile){
                            return {x2: 40,top:80}
                        }else{
                            return {x2: 50}
                        }
                    }()),
                    xAxis: [
                        {
                            data: ['00:00', '01:00', '02:00', '03:00', '04:00', '05:00', '06:00', '07:00', '08:00', '09:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
                            boundaryGap: true
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value',
                            scale: false,
                            splitArea:{show:false}
                        },
                        {
                            type: 'value',
                            scale: false,
                            splitArea:{show:false},
                            //splitLine: {show: (function(){
                                //if(AppConfig.isMobile){
                                //    return false;
                                //}else{
                                //    return true;
                                //}
                            //}())}
                            splitLine:{show:false}
                        }
                    ],
                    series: entityItem.arrSeries
                };

                if(option.series instanceof Array){
                    var lastType = -1;
                    option.series.forEach(function(item){
                        if(lastType == -1){
                            lastType = item.yAxisIndex
                        }else {
                            if (item.yAxisIndex != lastType) {
                                lastType = 'multi'
                            }
                        }
                    });
                    if(lastType != 'multi'){
                        option.series.forEach(function(item,index,self){
                            self[index].yAxisIndex = 0
                        });
                        option.yAxis = [option.yAxis[0]]
                    }
                }
                if(AppConfig.isMobile){
                    option.legend = {
                        data: entityItem.arrLegend,
                        itemWidth:15,
                        itemHeight:10,
                        textStyle:{
                            fontSize:12
                        }
                    };
                    option.xAxis[0].axisLabel = {
                        textStyle: {
                            color: '#e2dfe4'
                        }
                    };
                    var yAxisList = option.yAxis;
                    for(var i = 0;i<yAxisList.length;i++){
                        yAxisList[i].axisLabel = {
                            textStyle:{
                                color:'#e2dfe4'
                            }
                        };
                    }
                }
                /*var optionTemp = {};
                $.extend(true,optionTemp,_this.optionDefault);*/
                if (_this.entity.modal.dsChartCog){
                    //var ptIndex = 0;
                    //if(_this.entity.modal.dsChartCog[0].upper != null && _this.entity.modal.dsChartCog[0].upper != ''){
                    //    option.yAxis[0].max = Number(_this.entity.modal.dsChartCog[0].upper);
                    //}
                    //if(_this.entity.modal.dsChartCog[0].lower != null && _this.entity.modal.dsChartCog[0].lower != ''){
                    //    option.yAxis[0].min = Number(_this.entity.modal.dsChartCog[0].lower);
                    //}
                    //if(_this.entity.modal.dsChartCog[0].unit != '' && _this.entity.modal.dsChartCog[0].unit != ''){
                    //    option.yAxis[0].name = _this.entity.modal.dsChartCog[0].unit;
                    //}
                    //if(_this.entity.modal.dsChartCog[0].accuracy != ''){
                    //    var n = Number(_this.entity.modal.dsChartCog[0].accuracy);
                    //    for (var i = 0;i < _this.entity.modal.option.paraType[0].arrId.length;i++) {
                    //        for (var j = 0; j < option.series[ptIndex].data.length; j++) {
                    //            //option.series[i].data[j] = Math.round( option.series[i].data[j] * Math.pow(10, n) ) / Math.pow(10, n)
                    //            option.series[ptIndex].data[j] = Number(option.series[ptIndex].data[j]).toFixed(n);
                    //        }
                    //        ptIndex += 1;
                    //    }
                    //}
                    var ptIndex = 0;
                    var tempChartMax,tempChartMin;
                    var targetAxis;
                    tempChartMax = null;
                    tempChartMin = null;
                    for (var m = 0; m < 4; ++m ) {
                        if(!_this.entity.modal.option.paraType[m].arrId.length)continue
                        if(lastType == 'multi' && (m == 1)){
                            targetAxis = option.yAxis[1]
                        }else{
                            targetAxis = option.yAxis[0]
                        }
                        if (_this.entity.modal.dsChartCog[m].upper != '') {
                            if (tempChartMax == null || tempChartMax < Number(_this.entity.modal.dsChartCog[m].upper)) {
                                tempChartMax = Number(_this.entity.modal.dsChartCog[m].upper);
                            }
                        }
                        if (_this.entity.modal.dsChartCog[m].lower != '') {
                            if (tempChartMin == null || tempChartMin > Number(_this.entity.modal.dsChartCog[m].lower)) {
                                tempChartMin = Number(_this.entity.modal.dsChartCog[m].lower);
                            }
                        }
                        if (_this.entity.modal.dsChartCog[m].unit != '') {
                            targetAxis.name = _this.entity.modal.dsChartCog[m].unit;
                        }
                        if (_this.entity.modal.dsChartCog[m].accuracy != '') {
                            var n = Number(_this.entity.modal.dsChartCog[m].accuracy);
                            for (var i = 0;i < _this.entity.modal.option.paraType[m].arrId.length;i++) {
                                for (var j = 0; j < option.series[ptIndex].data.length; j++) {
                                    //option.series[i].data[j] = Math.round( option.series[i].data[j] * Math.pow(10, n) ) / Math.pow(10, n)
                                    option.series[ptIndex].data[j] = Number(option.series[ptIndex].data[j]).toFixed(n);
                                }
                                ptIndex += 1;
                            }
                        }
                        if(tempChartMax != null && targetAxis){
                            targetAxis.max = Number(tempChartMax);
                        }
                        if(tempChartMin != null && targetAxis){
                            targetAxis.min = Number(tempChartMin);
                        }
                    }
                    var tempMarkLine;
                    var seriesNum = 0;
                    for (var l = 0; l < 4; l++){
                        for(var index = 0;index < _this.entity.modal.option.paraType[l].arrId.length;++index) {
                            for (var k = 0; k < 4; k++) {
                                if (_this.entity.modal.dsChartCog[l].markLine[k].value) {
                                    if (!option.series[seriesNum].markLine) {
                                        option.series[seriesNum].markLine = {
                                            data: [],
                                            symbol: 'none',
                                            itemStyle:{
                                                normal:{
                                                    label: {
                                                        show: false
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    tempMarkLine = [
                                        {
                                            name: _this.entity.modal.dsChartCog[l].markLine[k].name,
                                            value: _this.entity.modal.dsChartCog[l].markLine[k].value,
                                            xAxis: -1,
                                            yAxis: Number(_this.entity.modal.dsChartCog[l].markLine[k].value)
                                        },
                                        {
                                            //xAxis: option.series[l + index].data.length,
                                            xAxis:dataSrc.timeShaft.length,
                                            yAxis: Number(_this.entity.modal.dsChartCog[l].markLine[k].value)
                                        }
                                    ];
                                    option.series[seriesNum].markLine.data.push(tempMarkLine);
                                }
                            }
                            seriesNum++;
                        }
                    }
                }
                !_this.chart && (_this.chart = echarts.init(_this.container, AppConfig.chartTheme));
                _this.chart.clear();
                _this.chart.setOption($.extend(true, {}, _this.optionDefault, option));
            }).error(function (e) {

            }).always(function (e) {

            });
        }
    };
    ModalMultiple.prototype.dealWithData = function (points) {
        if(points.error) {
            this.container.innerHTML = '<div id="dataAlert" ></div>';
            new Alert($("#dataAlert"), "danger", "<strong>" + points.error + "</strong>").show();
            return;
        }

        var arr = {
            arrLegend:{},
            arrSeries:{}
        };
        arr.arrLegend = [];
        arr.arrSeries = [];
        var arrTempPoints = [];
        var dataType = this.entity.modal.option.paraType;
        for (var i = 0 ; i < dataType.length; ++i){
            for (var j = 0 ;j < dataType[i].arrId.length;++j)
            arrTempPoints.push({dsItemId:dataType[i].arrId[j]})
        }
        var arrPointAlias = this.initPointAlias(arrTempPoints);
        var tempNum = 0;
        for (var i = 0;i < dataType.length;i++){
            switch (dataType[i].type) {
                case 'bar':
                    for (var j = 0; j < dataType[i].arrId.length; j++) {
                        for (var k = 0; k < points.list.length; ++k) {
                            if (dataType[i].arrId[j] == points.list[k].dsItemId) {
                                if(!AppConfig.isMobile) {
                                    var series = {
                                        name: arrPointAlias[tempNum],
                                        type: 'bar',
                                        symbol: 'none',
                                        itemStyle: {normal: {areaStyle: {type: 'default'}}},
                                        smooth: true,
                                        data: points.list[k].data,
                                        yAxisIndex: 0
                                    };
                                }else{
                                    var series = {
                                        name: arrPointAlias[tempNum],
                                        type: 'bar',
                                        symbol: 'none',
                                        barGap: 0.1,
                                        barCategoryGap: 0.01,
                                        itemStyle: {normal: {shadowBlur: 40,shadowColor: 'rgba(0, 0, 0, 0.5)',areaStyle: {type: 'default'}}},
                                        smooth: true,
                                        data: points.list[k].data,
                                        yAxisIndex: 0
                                    };
                                }
                                arr.arrLegend.push(arrPointAlias[tempNum]);
                                arr.arrSeries.push(series);
                                tempNum +=1;
                                break;
                            }
                        }
                    }
                    break;
                case 'line':
                    for (var j = 0; j < dataType[i].arrId.length; j++) {
                        for (var k = 0; k < points.list.length; ++k) {
                            if (dataType[i].arrId[j] == points.list[k].dsItemId) {
                                var series = {
                                    name: arrPointAlias[tempNum],
                                    type: 'line',
                                    symbol: 'none',
                                    //itemStyle: {normal: {areaStyle: {type: 'default'}}},
                                    smooth: true,
                                    data: points.list[k].data,
                                    yAxisIndex: 1,
                                    z:3
                                }
                                arr.arrLegend.push(arrPointAlias[tempNum]);
                                arr.arrSeries.push(series);
                                tempNum +=1;
                                break;
                            }
                        }
                    }
                    break;
                case 'area':
                    for (var j = 0; j < dataType[i].arrId.length; j++) {
                        for (var k = 0; k < points.list.length; ++k) {
                            if (dataType[i].arrId[j] == points.list[k].dsItemId) {
                                var series = {
                                    name: arrPointAlias[tempNum],
                                    type: 'line',
                                    symbol: 'none',
                                    itemStyle: {normal: {}},//areaStyle: {type: 'default'}
                                    smooth: true,
                                    data: points.list[k].data,
                                    yAxisIndex: 0,
                                    z:3
                                };
                                arr.arrLegend.push(arrPointAlias[tempNum]);
                                arr.arrSeries.push(series);
                                tempNum +=1 ;
                                break;
                            }
                        }
                    }
                    break;
                case 'cumulativeBar':
                    for (var j = 0; j < dataType[i].arrId.length; j++) {
                        for (var k = 0; k < points.list.length; ++k) {
                            if (dataType[i].arrId[j] == points.list[k].dsItemId) {
                                if(!AppConfig.isMobile) {
                                    var series = {
                                        name: arrPointAlias[tempNum],
                                        type: 'bar',
                                        stack: '实时累计图',
                                        symbol: 'none',
                                        itemStyle: {normal: {areaStyle: {type: 'default'}}},
                                        smooth: true,
                                        data: points.list[k].data,
                                        yAxisIndex: 0
                                    };
                                }else{
                                    var series = {
                                        name: arrPointAlias[tempNum],
                                        type: 'bar',
                                        stack:'实时累计图',
                                        barGap: 0.1,
                                        barCategoryGap: 0.01,
                                        symbol: 'none',
                                        itemStyle: {normal: {shadowBlur: 40,shadowColor: 'rgba(0, 0, 0, 0.5)',areaStyle: {type: 'default'}}},
                                        smooth: true,
                                        data: points.list[k].data,
                                        yAxisIndex: 0
                                    };
                                }
                                arr.arrLegend.push(arrPointAlias[tempNum]);
                                arr.arrSeries.push(series);
                                tempNum +=1;
                                break;
                            }
                        }
                    }
                    break;
            }
        }
        return arr;
    }
    ModalMultiple.prototype.setModalOption = function(option){
        this.entity.modal.option = {};
        this.entity.modal.interval = 5;
        this.entity.modal.option.paraType = option.paraType
    };
    ModalMultiple.prototype.goBackTrace = function (data) {
        this.m_bIsGoBackTrace = true;
        this.m_traceData = data;
        this.renderModal();
    };
    return ModalMultiple;
})();

// 单点预测折线图配置 start
var ModalPredictPointLineConfig = (function ($, window, undefined) {
    var _this;

    function ModalPredictPointLineConfig(options) {
        _this = this;
        ModalConfig.call(this, options);
    }

    ModalPredictPointLineConfig.prototype = Object.create(ModalConfig.prototype);
    ModalPredictPointLineConfig.prototype.constructor = ModalPredictPointLineConfig;


    ModalPredictPointLineConfig.prototype.DEFAULTS = {
        htmlUrl: '/static/views/observer/widgets/modalPredictPointLineConfig.html'
    };

    ModalPredictPointLineConfig.prototype.init = function () {
        // DOM
        this.$formWrap             = $('.form-wrap', this.$wrap);
        this.$iptChartYaxisMin     = $('.ipt-chart-y-axis-min', this.$formWrap);
        this.$iptChartYaxisMax     = $('.ipt-chart-y-axis-max', this.$formWrap);
        this.$iptChartValUnits     = $('.ipt-chart-val-units', this.$formWrap);
        this.$iptChartValPrecision = $('.ipt-chart-val-precision', this.$formWrap);
        
        this.$btnOptionMode        = $('.btn-option-mode', this.$formWrap);
        this.$btnTimeMode          = $('.btn-time-mode', this.$formWrap);
        this.$btnPredictMode       = $('.btn-predict-mode', this.$formWrap);
        this.$divTargetPoint       = $('.div-target-point', this.$formWrap);
        this.$divPredictPoint      = $('.div-predict-point', this.$formWrap);
        this.$btnSubmit            = $('.btn-submit', this.$wrap);
        
        // drop area
        this.$dropArea             = $('.drop-area', this.$formWrap);

        this.attachEvents();
    };

    ModalPredictPointLineConfig.prototype.recoverForm = function (modal) {
        var name, form, dsChartConfig;
        if(!modal) return;
        form = modal.option;
        dsChartConfig = (modal.dsChartCog && modal.dsChartCog.length) ? modal.dsChartCog[0] : {};
        if(!form) return;
        this._setField('input', this.$iptChartYaxisMin, dsChartConfig.lower);
        this._setField('input', this.$iptChartYaxisMax, dsChartConfig.upper);
        this._setField('input', this.$iptChartValUnits, dsChartConfig.unit);
        this._setField('input', this.$iptChartValPrecision, dsChartConfig.accuracy);

        this._setField('droparea', this.$divTargetPoint, form.targetPointId);
        this._setField('droparea', this.$divPredictPoint, form.predictPointId);

        this._setField('dropdown', this.$btnOptionMode, form.optionsMode);
        this._setField('dropdown', this.$btnTimeMode, form.timeMode);
        this._setField('dropdown', this.$btnPredictMode, form.predictMode);
    };

    ModalPredictPointLineConfig.prototype.reset = function () {
        this._setField('input', this.$iptChartYaxisMin);
        this._setField('input', this.$iptChartYaxisMax);
        this._setField('input', this.$iptChartValUnits);
        this._setField('input', this.$iptChartValPrecision);

        this._setField('droparea', this.$divTargetPoint);
        this._setField('droparea', this.$divPredictPoint);

        this._setField('dropdown', this.$btnOptionMode);
        this._setField('dropdown', this.$btnTimeMode);
        this._setField('dropdown', this.$btnPredictMode);
    };

    ModalPredictPointLineConfig.prototype.attachEvents = function () {
        ///////////////////
        // submit EVENTS //
        ///////////////////
        this.$btnSubmit.off().click( function (e) {
            var modalIns = _this.options.modalIns;
            var modal = modalIns.entity.modal;
            var dsChartConfig = {}, form = {};
            var val;

            // Y轴下限值
            val = parseFloat( _this.$iptChartYaxisMin.val() );
            dsChartConfig.lower = !isNaN(val) ? val : '';
            // Y轴上限值
            val = parseFloat( _this.$iptChartYaxisMax.val() );
            dsChartConfig.upper = !isNaN(val) ? val : '';
            // 数值显示精度, 默认值2
            val = parseInt( _this.$iptChartValPrecision.val() );
            dsChartConfig.accuracy = !isNaN(val) ? val : '';
            // 数值单位
            dsChartConfig.unit = _this.$iptChartValUnits.val();

            form.optionMode     = parseInt(_this.$btnOptionMode.attr('data-value'));
            form.timeMode       = parseInt(_this.$btnTimeMode.attr('data-value'));
            form.predictMode    = parseInt(_this.$btnPredictMode.attr('data-value'));
            form.targetPointId  = _this.$divTargetPoint.attr('data-value');
            form.predictPointId = _this.$divPredictPoint.attr('data-value');

            // save to modal
            modal.dsChartCog = [dsChartConfig];
            modal.option = form;
            modal.points = form.predictMode === 0 ?
                [form.targetPointId, form.predictPointId] : [form.targetPointId];
            modal.interval = 60000;

            // close modal
            _this.$modal.modal('hide');
            e.preventDefault();
        } );
    };

    return ModalPredictPointLineConfig;

} (jQuery, window));
// 单点预测折线图配置 end

// 单点预测折线图 start
var ModalPredictPointLine = (function ($, window, undefined) {

    function ModalPredictPointLine(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        var _this = this;
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;

        ModalRealtimeLine.call(this, screen, entityParams, renderModal, updateModal, null);

        this.chart = null;
        this.chartOptions = $.extend(true, {}, this.optionDefault, DEFAULTS_CHARTS_OPTIONS);
        this.period = null;
        this.firstload = $.Deferred();

        this.m_bIsGoBackTrace = false;
        this.m_traceData = undefined;
    };

    ModalPredictPointLine.prototype = Object.create(ModalRealtimeLine.prototype);
    ModalPredictPointLine.prototype.constructor = ModalPredictPointLine;

    ModalPredictPointLine.prototype.optionTemplate = {
        name:'toolBox.modal.REAL_TIME_PREDICT_POINT_LINE',
        parent:0,
        mode:'custom',
        maxNum: 10,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalPredictPointLine',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
            
        }
    };

    ModalPredictPointLine.prototype.renderModal = function () {
        var _this             = this;
        var modal             = this.entity.modal;
        var dsChartOption     = (modal.dsChartCog && modal.dsChartCog.length) ? modal.dsChartCog[0] : {};
        var option            = modal.option;
        // CHART OPTIONS
        var chartYaxisMin     = dsChartOption.lower;
        var chartYaxisMax     = dsChartOption.upper;
        var chartValUnits     = dsChartOption.unit;
        var chartValPrecision = dsChartOption.accuracy;
        
        var timeMode          = option.timeMode;
        var targetPointId     = this.entity.modal.points[0];
        var predictPointId    = option.predictPointId;
        var predictMode       = option.predictMode;
        var period            = this.period = this.getPeriod(timeMode);
        var params            = [];

        var dsName            = [];

        // 默认为单点预测
        if(predictMode === undefined) predictMode = option.predictMode = 0;

        params.push({
            dsItemIds: [targetPointId],
            timeStart: period.startTime,
            timeEnd: period.endTime,
            timeFormat: period.tmFmt
        });

        // 初始化 legend
        dsName = AppConfig.datasource.getDSItemById(targetPointId).alias || targetPointId;
        this.chartOptions.legend.data =  [dsName];
        this.chartOptions.series[0].name = dsName;

        // 如果是多点预测模式
        if(predictMode === 1 && period.endTime < period.rangeEndTime) {
            params.push({
                dsItemIds: [predictPointId],
                timeStart: period.endTime,
                timeEnd: period.rangeEndTime,
                timeFormat: period.tmFmt
            });
            // 添加预测点的 legend
            this.chartOptions.legend.data.push('Predict Line');
        }

        // USE THE CHART OPTIONS
        if(chartYaxisMin !== '') this.chartOptions.yAxis[0].min = chartYaxisMin;    
        if(chartYaxisMax !== '') this.chartOptions.yAxis[0].max = chartYaxisMax;
        this.chartOptions.yAxis[0].name = chartValUnits;
        // default precision is 2
        if(chartValPrecision === '') chartValPrecision = 2;

        WebAPI.post('/analysis/startWorkspaceDataGenHistogramMulti', params).done(function (rsList) {
            var predictData;
            var i, t, leni, lent;

            // deal with precision
            for (i = 0, leni = rsList.length; i < leni; i++) {
                rsList[i].list[0].data = rsList[i].list[0].data.map(function (row, i) {
                    return row.toFixed(chartValPrecision);
                });
            }

            _this.chartOptions.xAxis[0].data = _this.period.timeShaft;
            predictData = rsList[0].list[0].data;
            predictData[0] = rsList[0].list[0].data[rsList[0].list[0].data.length - 1];
            predictData =predictData.concat( new Array(_this.period.timeShaft.length - predictData.length + 1)
                    .join('-').split(''));
            _this.chartOptions.series[0].data = predictData;


            // 初始化 echart
            if(_this.chart) { _this.chart.clear(); _this.chart = null; }
            _this.chart = echarts.init(_this.container, AppConfig.chartTheme);

            // 如果是多点预测模式，则再增加一条曲线
            if (predictMode === 1 && rsList[1]) {
                // 新增 legend
                _this.chartOptions.legend.data.push()
                predictData = rsList[1].list[0].data;
                // 将 predictData 的第一个数据用实时值的最后一个替代，从而使整条曲线连贯
                predictData[0] = rsList[0].list[0].data[rsList[0].list[0].data.length - 1];
                // 给 rsList 补充数据
                predictData = new Array(_this.period.timeShaft.length - predictData.length + 1)
                    .join('-').split('').concat(predictData);
                _this.chartOptions.series.push({
                    type: 'line',
                    name: 'Predict Line',
                    symbol: 'none',
                    itemStyle: {
                        normal: {
                            lineStyle: {
                                type: 'dotted'
                            },
                            color: '#6495ed',
                            label: { position: 'right' }
                        }
                    },
                    data: predictData
                });
                _this.chart.clear();
                _this.chart.setOption(_this.chartOptions);

                return;
            } 

            _this.firstload.done(function (points) {
                _this.updateModal(points, true);
            });
        });

    };

    // force 标记主要是处理第一次加载预测点的情况
    ModalPredictPointLine.prototype.updateModal = function (points, force) {
        // 屏蔽掉第一次的加载，因为和 render 几乎是同时发生的，没必要掉一次
        if(this.firstload.state() === 'pending') return this.firstload.resolve(points);

        if(!points || points.length === 0) return;
        var _this = this;
        var data = this.chartOptions.series[0].data, predictData;
        var timeShaft = this.chartOptions.xAxis[0].data;
        var modal = this.entity.modal;
        var predictMode = modal.option.predictMode;
        var pointVal, predictPointVal;
        var pointId = modal.points[0], predictPointId = modal.points[1];
        var timeInterval = this.period.tmInterval;
        var dataLen = data.indexOf('-')-1, timeLen = timeShaft.length;
        var lastTickVal = timeShaft[dataLen].toDate().valueOf();
        var nowTick = new Date().valueOf();
        var row, i, len;

        force = force === undefined ? false : force;

        // 判断当前是否达到时间间隔
        // 注释掉该行可以使图表 1 分钟(刷新间隔取决于拉接口的时间间隔)更新一次
        if( (nowTick - lastTickVal) < this.period.tmInterval && !force ) return;
        for (i = 0, len = points.length; i < len; i++) {
            row = points[i];
            if(row.dsItemId === pointId) {
                pointVal = parseFloat(row.data);
            }
            if(row.dsItemId === predictPointId) {
                predictPointVal = parseFloat(row.data);
            }
        }

        // 进入到下一个周期
        // if(nowTick >= this.period.deadlineTick) {
        //     this.period = this.getPeriod(this.entity.modal.option.timeMode);
        //     timeShaft  = this.period.timeShaft;
        //     data.splice(0, data.length);
        // }

        if(pointVal !== undefined && !force) {
            // 保留 3 位小数
            pointVal = Math.round(pointVal*1000)/1000
            data.push( pointVal );
        }

        // 多点预测
        if(predictMode === 1) {
            // 当这个周期更完之后，此时 series[1] 是被 pop 掉了
            // 如果这时候继续更新，会出错，这里处理下这种情况
            if( !this.chartOptions.series[1] ) return;

            predictData = this.chartOptions.series[1].data;

            // 如果没有值了，删除这个 series
            if( predictData[predictData.length-1] === '-' ) {
                this.chartOptions.series.pop();
            }
            // 将下一个数据点用 '-' 代替
            // 因为预测点的数据是 ['-', '-', ..., '1', '2']
            // 前面的 '-' 都是占位用的，因为 echart 不支持从某个点开始渲染数据
            else {
                predictData.splice( predictData.lastIndexOf('-')+1, 1, '-' );
            }

            // 如果预测数据还没有达到周期边界，则将预测的下一个值置为实时值的最新值
            if( predictData[predictData.length-1] !== '-' ) {
                predictData.splice( predictData.lastIndexOf('-')+1, 1,  pointVal);
            }
        }
        // 单点预测
        else if(predictPointVal !== undefined) {
            dataLen = data.indexOf('-') - 1;
            // 针对最后一个点做特殊处理
            if(dataLen === timeLen ) {
                timeShaft.push( new Date(lastTickVal + timeInterval).format('yyyy-MM-dd HH:00:00') );
            }

            this.chartOptions.series[0].markPoint.data = [
                {name: 'Predict Value', value: predictPointVal, xAxis: dataLen+1, yAxis: predictPointVal}
            ];

            // 当前的最后一个有效数据
            lastVal = data[data.indexOf('-')-1];//data[data.length-1];
            //this.chartOptions.series[0].markLine.data = [
            //    [
            //        {xAxis: dataLen-1, yAxis: lastVal},
            //        { value: predictPointVal, xAxis: dataLen, yAxis: predictPointVal }
            //    ]
            //];
            var seriesRepeat = $.extend(true,{}, this.chartOptions.series[0]);//预测series虚线
            var seriesOne = this.chartOptions.series[0];
            seriesRepeat.data[dataLen + 1] = predictPointVal;
            for (var i = 0; i <= dataLen; i++) {
                seriesRepeat.data[i] = '-';
            }
            seriesRepeat['lineStyle'] = {
                normal: {
                    color:'#81a9f0',
                    type: 'dotted'
                }
            };
            seriesRepeat.type='effectScatter';
            seriesRepeat.markLine.data = [
                [
                    {xAxis: dataLen, yAxis: lastVal},
                    {  xAxis: dataLen+1, yAxis: predictPointVal }
                ]
            ];
            seriesRepeat.markLine.label.normal.show = false;
            seriesRepeat.showEffectOn= 'render';
            seriesRepeat.rippleEffect = {
                    brushType: 'stroke'
            };

            seriesRepeat.itemStyle= {
                normal: {
                color: '#6898ed',
                shadowBlur: 10,
                shadowColor: '#333'
                }
            };
            seriesRepeat.symbol = 'circle'
            seriesRepeat.symbolSize= 10;
            seriesOne['lineStyle'] = {
                normal: {
                    color: '#e84c3d'
                }
            };
            this.chartOptions.series.push(seriesRepeat);
        }
        // repaint
        this.chart.setOption(this.chartOptions);
    };

    ModalPredictPointLine.prototype.getPeriod = function (timeMode) {
        var _this = this;
        var now, tmFmt, tmInterval, tick, endTick;
        var start, end;
        var timeShaft  = [];

        if (!this.m_bIsGoBackTrace) {
            now = new Date();
            _this.optionDefault.animation = true;
        }
        else {
            now = this.m_traceData.currentTime;
            _this.optionDefault.animation = false;
        }

        switch(timeMode) {
            // daily
            case 0:
                tmFmt = 'h1';
                tmInterval = 3600000; // 60*60*1000
                start = now.format('yyyy-MM-dd') + ' 00:00:00';
                end = now.format('yyyy-MM-dd HH:00:00');
                endTick = end.toDate().valueOf();
                // 至少保留 8 小时的时间
                deadlineTick = Math.max(start.toDate().valueOf()+86400000, endTick+28800000/*--8*60*60*1000--*/);
                break;
            // monthly
            case 1:
            default:
                tmFmt = 'd1';
                tmInterval = 86400000; // 24*60*60*1000
                start = now.format('yyyy-MM') + '-01 00:00:00';
                end = now.format('yyyy-MM-dd 00:00:00');
                endTick = end.toDate().valueOf();

                if(this.entity.modal.option.predictMode === 1) {
                    // 始终向后预测 7 天
                    // 仅针对多点预测
                    deadlineTick = now.valueOf() + 604800000;/*--7*24*60*60*1000--*/
                } else {
                    // 至少保留 7 天
                    deadlineTick = Math.max(start.toDate().valueOf()+DateUtil.daysInMonth(now)*86400000, endTick+604800000/*--7*24*60*60*1000--*/);
                }
                
                break;
            // weekly
            case 2:
                tmFmt = 'h1';
                tmInterval = 3600000; // 60*60*1000
                // 定位到这一周的起始时间
                // getDay 默认是从周日开始的，这里转换成从周一开始
                start = new Date( now.valueOf()-( (now.getDay()+6)%7 )*86400000/*--24*60*60*1000--*/ ).format('yyyy-MM-dd 00:00:00');
                end = now.format('yyyy-MM-dd HH:00:00');
                endTick = end.toDate().valueOf();
                // 至少保留 40 小时的时间空余
                deadlineTick = Math.max(start.toDate().valueOf()+604800000/*--7*24*60*60*1000--*/, endTick+144000000/*--40*60*60*1000--*/);
                break;
        };

        tick = start.toDate().valueOf();

        while(tick < deadlineTick) {
            timeShaft.push(tick.toDate().format('yyyy-MM-dd HH:00:00'));
            tick += tmInterval;
        };

        return {
            startTime: start,
            endTime: end,
            rangeStartTime: start,
            rangeEndTime: timeShaft[timeShaft.length-1],
            tmFmt: tmFmt,
            tmInterval: tmInterval,
            timeShaft: timeShaft,
            deadlineTick: deadlineTick
        }
    };

    ModalPredictPointLine.prototype.showConfigModal = function (container, options) {
        this.configModal.setOptions({modalIns: this});
        this.configModal.show();
    };

    ModalPredictPointLine.prototype.setOptions = function (options) {
        this.options = $.extend({}, this.opitons, options);
    };

    ModalPredictPointLine.prototype.setModalOption = function (option) { };

    ModalPredictPointLine.prototype.configModal = new ModalPredictPointLineConfig();

    ModalPredictPointLine.prototype.goBackTrace = function (data) {
        this.m_bIsGoBackTrace = true;
        this.m_traceData = data;
        this.renderModal();
        this.m_bIsGoBackTrace = false;
    };

    var DEFAULTS_CHARTS_OPTIONS = {
        tooltip: {
            formatter: function (p) {
                var arrHtml = [p[0].name];
                p.forEach(function (row) {
                    if(row.value === '-') return;
                    arrHtml.push(row.seriesName + ': ' + row.value);
                });
                return arrHtml.join('<br/>');
            }
        },
        //grid: {x: 50, y: 38, x2: 25, y2: 45},
        series: [{
            markPoint: {
                symbol:'emptyCircle',
                symbolSize : 5,
                effect: {
                    show: true,
                    shadowBlur : 0
                },
                itemStyle: {
                    normal: {
                        color: '#6495ed',
                        label: {position:'top'}
                    }
                },
                data: []
            },
            markLine: {
                symbol: 'circle',
                symbolSize: 1.5,
                itemStyle: {
                    normal: {
                        lineStyle: {
                            type: 'dotted'
                        },
                        color: '#6495ed',
                        label: {position:'right'}
                    }
                },
                label: {
                    normal:
                        {
                            show: true
                        }
                },
                tooltip: {
                    show: false
                },
                data: []
            }
        }],
        toolbox: { show: false }
    };

    return ModalPredictPointLine;
}(jQuery, window) );
// 单点预测折线图 end
/**
 * Created by RNBtech on 2015/6/18.
 */
var ModalNote = (function(){
    function ModalNote(screen, entityParams) {
        if (!entityParams) return;
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
    };
    ModalNote.prototype = new ModalBase();
    ModalNote.prototype.optionTemplate = {
        name:'toolBox.modal.NOTE',
        parent:0,
        mode:['realTimeDashboard'],
        maxNum: 30,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type: 'ModalNote',
        tooltip: {
            'imgPC': false,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalNote.prototype.show = function(){
        this.init();
    }

    ModalNote.prototype.init = function(){

    }

    ModalNote.prototype.renderModal = function (e) {
        this.spinner && this.spinner.stop();
        if(!this.entity.modal.modalText) return;
        var temp = this.entity.modal.modalText;
        temp = temp.replace(/&lt;%\S+\.*\S+%&gt;/g,'--');
        this.container.style.padding = '8px';
        this.container.innerHTML = temp;
    }

    ModalNote.prototype.showConfigMode = function () {
    }
    ModalNote.prototype.updateModal = function (points) {
        var arrId = [];
        for(var i = 0; i < points.length; i++){
            var data = points[i].data;
            if(!isNaN(data)){
                data = parseFloat(data).toFixed(2);
            }else if(['Null', 'null', 'undefined'].indexOf(data) > -1){
                data = '--'
            }
            var $target = $('#divContainer_' + this.entity.id).find('#'+points[i].dsItemId);
            var textUrl = this.entity.modal.modalTextUrl?this.entity.modal.modalTextUrl:undefined;
            var index = $target.closest('.springContent').find('.pointValue').index($target);
            $target.html(data);
            arrId.push('');
            if (textUrl && textUrl.length > 0){
                for(var j = 0; j < textUrl[index].ptTextUrl.length; ++j){
                    if (textUrl[index].ptTextUrl[j].value == parseInt(data)) {
                        arrId[index] = textUrl[index].ptTextUrl[j].url;
                        if (arrId[index] != '') {
                            $target.css({
                                'cursor': 'pointer',
                                'text-decoration': 'underline'
                            });
                            if (textUrl[index].ptTextUrl[j].name && textUrl[index].ptTextUrl[j].name !='') {
                                $target.html(textUrl[index].ptTextUrl[j].name);
                            }
                        }
                        break;
                    }

                }
            }
        }
        var _this = this;
        arrId.forEach(function(value,index){
            if(arrId[index] == '')return;
            var $target = $('#ulPages').find('[pageId="' + arrId[index] + '"]');
            var ScreenType;
            for (var i = 0 ; i < AppConfig.navItems.length;i++){
                if(AppConfig.navItems[i].id == arrId[index]){
                    ScreenType = AppConfig.navItems[i].type;
                    break;
                }
            }
            if (!ScreenType){
                $('#divContainer_' + _this.entity.id).find('.pointValue').eq(index).off('click').on('click',function(e){
                    ScreenManager.show(ScreenType,arrId[index]);
                })
            }else{
                if(ScreenType == 'ReportScreen'){
                    $('#divContainer_' + _this.entity.id).find('.pointValue').eq(index).off('click').on('click',function(e){
                        var $ev =  $('#ulPages [pageid="'+ arrId[index] +'"]');
                        if($ev[0].className != 'nav-btn-a'){
                            $ev = $ev.children('a');
                            $ev.closest('.dropdown').children('a').trigger('click');
                        }
                        $ev.trigger('click');
                    })
                }else if(ScreenType == 'EnergyScreen'){
                    $('#divContainer_' + _this.entity.id).find('.pointValue').eq(index).off('click').on('click',function(e){
                        ScreenManager.show(EnergyScreen,arrId[index]);
                    })
                }
            }
        })
    }
    ModalNote.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
    }
    return ModalNote;
})();
var ModalRankConfig = (function ($, window, undefined) {

    function ModalRankConfig(options) {
        ModalConfig.call(this, options);
    }

    ModalRankConfig.prototype = Object.create(ModalConfig.prototype);
    ModalRankConfig.prototype.constructor = ModalRankConfig;


    ModalRankConfig.prototype.DEFAULTS = {
        htmlUrl: '/static/views/observer/widgets/modalRank.html'
    };

    ModalRankConfig.prototype.init = function () {
        this.$dropArea = $('.drop-area', this.$wrap);
        this.$btnSubmit = $('.btn-submit', this.$wrap);
        this.$rankPointList = $('#rankPointList', this.$wrap);
        this.$radioRankAsc = $('#radioRankAsc', this.$wrap);
        this.$radioRankDesc = $('#radioRankDesc', this.$wrap);
        //this.$btnChoosePt = $('#btnRankChoPt', this.$wrap);

        this.attachEvents();
    };

    ModalRankConfig.prototype.recoverForm = function (modal) {
    	this._setField('input', this.$rankPointList, modal.points);
        if (0 == modal.desc || null == modal.desc) {
            this.$radioRankAsc.prop('checked', true);
            this.$radioRankDesc.prop('checked', false);
        }
        else {
            this.$radioRankAsc.prop('checked', false);
            this.$radioRankDesc.prop('checked', true);
        }
    };

    ModalRankConfig.prototype.reset = function () {
		this._setField('input', this.$rankPointList);
    };

    ModalRankConfig.prototype.attachEvents = function () {
        var _this = this;

        // submit EVENTS
        _this.$btnSubmit.off().click( function (e) {
            var modalIns = _this.options.modalIns;
            var modal = modalIns.entity.modal;

            // save to modal
            var ptList = _this.$rankPointList.val();
            modal.points = ptList.split(',');

            var radioVal = 0;
            if ($('#radioRankAsc')[0].checked) {
                radioVal = 0;
            }
            else {
                radioVal = 1;
            }
            modal.desc = radioVal;

            // close modal
            _this.$modal.modal('hide');
            e.preventDefault();
        } );
/*
        _this.$btnChoosePt.click(function(){
            WebAPI.get('/static/views/observer/dataSourceAdd.html').done(function (result) {
                _this.m_cfgPanel = new DataSourceConfigure(_this, 0, true, '', '', '', -1);
                _this.m_cfgPanel.show();
            }).error(function (result) {
            }).always(function (e) {
            });
        });*/
    };

    return ModalRankConfig;
} (jQuery, window));


var ModalRank = (function(){
    function ModalRank(screen, entityParams) {
        if (!entityParams) return;
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this._showConfig);
        this.modal = entityParams.modal;
        this.chart = echarts.init(this.container, AppConfig.chartTheme);
        this.m_langFlag = ('zh' == localStorage['language']) ? 0 : 1;   // 0：zh，1：en
        this.spinner.spin(this.container);
    };
    ModalRank.prototype = new ModalBase();
    ModalRank.prototype.optionTemplate = {
        name:'toolBox.modal.WHIRLWIND_CHART',
        parent:0,
        mode:'custom',
        maxNum: 10,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalRank'
    };

    ModalRank.prototype.show = function() {
        this.init();
    }

    ModalRank.prototype.init = function() {
    }

    ModalRank.prototype.renderModal = function (e) {
        var _this = this;
        var arrPrjId = [];
        for (var i= 0,len=AppConfig.projectList.length; i< len; i++) {
            arrPrjId.push(AppConfig.projectList[i].id);
        }
        var arrRankPt = _this.modal.points;
        var rankDesc = _this.modal.desc;
        var postData = {'projectIds':arrPrjId, 'points':arrRankPt, 'desc':rankDesc};

        var showlist = {list: []};
        var descFlag = 0;
        if (AppConfig.benchMark != undefined) {
            for (var i= 0,len=arrRankPt.length; i<len; i++) {
                for (var j= 0,len2=AppConfig.benchMark.length; j<len2; j++) {
                    for (var k= 0, len3=AppConfig.benchMark[j].points.length; k<len3; k++) {
                        if (arrRankPt[i] == AppConfig.benchMark[j].points[k]) {
                            showlist.list = AppConfig.benchMark[j].list;
                            descFlag = AppConfig.benchMark[j].desc;
                            break;
                        }
                    }
                }
            }
        }
        if (showlist.list.length > 0) {
            var flag = true;
            if (rankDesc != descFlag) {
                flag = false;
            }
            _this.drawRankChart(showlist, arrRankPt.length, flag);
        }
        else {
            WebAPI.post('/benchmark/getListByPointsAndProjectIds', postData).done(function (result) {
                _this.drawRankChart(result, arrRankPt.length, true);
            }).always(function (e) {
            });
        }
        _this.spinner.stop();
    }

    ModalRank.prototype.updateModal = function () {
    }

    ModalRank.prototype.showConfigModal = function () {
        this.configModal.setOptions({modalIns: this});
        this.configModal.show();
    }
    ModalRank.prototype._showConfig = function () {};

    ModalRank.prototype.setModalOption = function (option) {
    }

    ModalRank.prototype.drawRankChart = function (dataSrc, ptLen, sortFlag) {
        // dataSrc:画图数据
        // ptLen:点数量
        // sortFlag:排序标签，true：默认，false：反序
        var _this = this;
        var showValue = [];
        var yAxis = [];
        var prjId, prjName, ptVal;
        var curPrjId = AppConfig.projectId;
        if (sortFlag) {
            for (var i= dataSrc.list.length-1; i>=0; i--) {
                ptVal = dataSrc.list[i].value;
                if (-1 == ptVal) {
                    continue;
                }

                prjId = dataSrc.list[i].projectId;
                if (prjId == curPrjId) {
                    showValue.push({value:ptVal, itemStyle:{normal:{color:'#ff6347'}}});
                }
                else {
                    showValue.push(ptVal);
                }

                var findName = false;
                for (var j= 0,len2=AppConfig.projectList.length; j<len2; j++) {
                    if (prjId == AppConfig.projectList[j].id) {
                        findName = true;
                        break;
                    }
                }

                if (1 == ptLen) {
                    if (0 == _this.m_langFlag) {
                        yAxis.push(AppConfig.projectList[j].name_cn);
                    }
                    else {
                        yAxis.push(AppConfig.projectList[j].name_english);
                    }
                }
                else {
                    if (findName) {
                        if (0 == _this.m_langFlag) {
                            prjName = AppConfig.projectList[j].name_cn;
                        }
                        else {
                            prjName = AppConfig.projectList[j].name_english;
                        }
                        yAxis.push(prjName + '-' + dataSrc.list[i].name);
                    }
                    else {
                        yAxis.push(dataSrc.list[i].name);
                    }
                }
            }
        }
        else {
            for (var i= 0,len=dataSrc.list.length; i<len; i++) {
                ptVal = dataSrc.list[i].value;
                if (-1 == ptVal) {
                    continue;
                }

                prjId = dataSrc.list[i].projectId;
                if (prjId == curPrjId) {
                    showValue.push({value:ptVal, itemStyle:{normal:{color:'#ff6347'}}});
                }
                else {
                    showValue.push(ptVal);
                }

                var findName = false;
                for (var j= 0,len2=AppConfig.projectList.length; j<len2; j++) {
                    if (prjId == AppConfig.projectList[j].id) {
                        findName = true;
                        break;
                    }
                }

                if (1 == ptLen) {
                    if (0 == _this.m_langFlag) {
                        yAxis.push(AppConfig.projectList[j].name_cn);
                    }
                    else {
                        yAxis.push(AppConfig.projectList[j].name_english);
                    }
                }
                else {
                    if (findName) {
                        if (0 == _this.m_langFlag) {
                            prjName = AppConfig.projectList[j].name_cn;
                        }
                        else {
                            prjName = AppConfig.projectList[j].name_english;
                        }
                        yAxis.push(prjName + '-' + dataSrc.list[i].name);
                    }
                    else {
                        yAxis.push(dataSrc.list[i].name);
                    }
                }
            }
        }

        var chartOption = {
			title : {
					subtext: ''
				},
			tooltip : {
				trigger : 'axis',
				axisPointer : {
					type : 'shadow'
				}
			},
			legend: {
				data : ['value'],
                show : false
			},
			calculable : false,
            grid: {
                x: 100,
                y: 10,
                x2: 20,
                y2: 60
            },
			xAxis : [
				{
					type : 'value'
				}
			],
			yAxis : [
				{
					type : 'category',
					axisTick : {show: false},
                    axisLabel : {
                        show: true,
                        rotate: 45
                    },
                    data : yAxis
				}
			],
			series : [
				{
					name : 'value',
					type : 'bar',
					data : showValue,
					itemStyle: {
						normal: {
							label : {show: true, position: 'inside'},
							barBorderRadius: [0, 5, 5, 0]
						},
						emphasis: {
							barBorderRadius: [0, 5, 5, 0]
						}
					}
				}
			]
        };
        _this.chart.setOption(chartOption);
    }

    ModalRank.prototype.configModal = new ModalRankConfig();

    return ModalRank;
})();
var ModalRankNormal = (function(){
    function ModalRankNormal(screen, entityParams) {
        if (!entityParams) return;
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this._showConfig);
        this.modal = entityParams.modal;
        this.chart = echarts.init(this.container, AppConfig.chartTheme);
        this.m_langFlag = ('zh' == localStorage['language']) ? 0 : 1;   // 0：zh，1：en
        this.spinner.spin(this.container);
    };
    ModalRankNormal.prototype = new ModalBase();
    ModalRankNormal.prototype.optionTemplate = {
        name:'toolBox.modal.RANK_CHART',
        parent:0,
        mode:['modalRankNormal'],
        maxNum:10,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalRankNormal',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalRankNormal.prototype.show = function() {
        this.init();
    }

    ModalRankNormal.prototype.init = function() {
    }

    ModalRankNormal.prototype.renderModal = function (e) {
        var _this = this;

        var arrPoint = _this.modal.points;
        var postData = {'dataSourceId':0,'dsItemIds':arrPoint};
        WebAPI.post('/analysis/startWorkspaceDataGenPieChart', postData).done(function (data) {
            _this.drawRankChart(data.dsItemList);
        }).always(function (e) {
            _this.spinner.stop();
        });
    }

    ModalRankNormal.prototype.updateModal = function () {
    }
    ModalRankNormal.prototype.showConfigModal = function () {
    }
    ModalRankNormal.prototype._showConfig = function () {
    }
    ModalRankNormal.prototype.setModalOption = function (option) {
    }

    ModalRankNormal.prototype.drawRankChart = function (dataSrc) {
        var _this = this;
        var yAxis = [];
        var showValue = [];
        var arrId = [];
        var arrItem = [];
        for (var i= dataSrc.length-1; i>=0; i--) {
            arrId.push(dataSrc[i].dsItemId);
        }
        arrItem = AppConfig.datasource.getDSItemById(arrId);
        for (var i = 0, len = arrItem.length; i < len; i++) {
            var item = arrItem[i];
            yAxis.push(item.alias);
            for (var j = 0, len2 = dataSrc.length; j < len2; j++) {
                if (item.id == dataSrc[j].dsItemId) {
                    showValue.push(parseInt(dataSrc[j].data));
                    break;
                }
            }
        }


        for (var i= dataSrc.length-1; i>=0; i--) {
            for (var m = 0; m < arrItem.length; m++) {
                if (dataSrc[i].dsItemId == arrItem[m].id) {
                    var itemName = arrItem[m].alias;
                    yAxis.push(itemName);
                    showValue.push(parseInt(dataSrc[i].data));
                    break;
                }
            }
        }

        var chartOption = {
			title : {
					subtext: ''
				},
			tooltip : {
				trigger : 'axis',
				axisPointer : {
					type : 'shadow'
				}
			},
			legend: {
				data : [],
                show : false
			},
			calculable : false,
            grid: {
                x: 100,
                y: 10,
                x2: 20,
                y2: 40
            },
			xAxis : [
				{
					type : 'value'
				}
			],
			yAxis : [
				{
					type : 'category',
					axisTick : {show: false},
                    axisLabel : {
                        show: true,
                        rotate: 45
                    },
                    data : yAxis
				}
			],
			series : [
				{
					name : 'value',
					type : 'bar',
					data : showValue,
					itemStyle: {
						normal: {
							label : {show: true, position: 'inside'},
							barBorderRadius: [0, 5, 5, 0]
						},
						emphasis: {
							barBorderRadius: [0, 5, 5, 0]
						}
					}
				}
			]
        };
        _this.chart.setOption(chartOption);
    }

    return ModalRankNormal;
})();
/**
 * Created by RNBtech on 2015/6/18.
 */
var ModalMix = (function(){
    function ModalMix(screen, entityParams) {
        if (!entityParams) return;
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
        !this.entity.modal.option && (this.entity.modal.option = {});
        !this.entity.modal.option.subChartIds && (this.entity.modal.option.subChartIds = []);
        !this.entity.modal.option.displayInterval && (this.entity.modal.option.displayInterval = 20);
    };
    ModalMix.prototype = new ModalBase();
    ModalMix.prototype.optionTemplate = {
        name:'toolBox.modal.MIX',
        parent:0,
        mode:['realTimeDashboard'],
        maxNum: 10,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type: 'ModalMix',
        tooltip: {
            'imgPC': true,
            'imgMobile': true,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalMix.prototype.show = function(){
        this.init();
    }

    ModalMix.prototype.init = function(){
        this.container.style.overflowX = 'hidden';
        this.container.style.overflowY = 'auto';
    }

    ModalMix.prototype.initContainer = function (replacedElementId) {
        var divParent = document.getElementById('divContainer_' + this.entity.id);
        var isNeedCreateDivParent = false;
        var scrollClass = ' gray-scrollbar scrollY';

        if ((!divParent) || replacedElementId) {
            isNeedCreateDivParent = true;
        }

        if (isNeedCreateDivParent) {
            divParent = document.createElement('div');
            divParent.id = 'divContainer_' + this.entity.id;
        }
        //get container
        if (replacedElementId) {
            var $old = $('#divContainer_' + replacedElementId);
            $(divParent).insertAfter($old);
            $old.remove();
        }else {
            isNeedCreateDivParent && this.screen.container.appendChild(divParent);
        }

        $(divParent).addClass('springContainer');
        if(AppConfig.isMobile || this.screen.isForMobile || (this.screen.options && this.screen.options.isForMobile) || (this.screen.screen && this.screen.screen.options && this.screen.screen.options.isForMobile)) {
            this.spanRange = {
                minWidth: 1,
                maxWidth: 3,
                minHeight: 1,
                maxHeight: 4.5,
                yScale : 4/3,
                xScale : 4
            };
        }else{
            this.spanRange = {
                minWidth: this.optionTemplate.minWidth,
                maxWidth: this.optionTemplate.maxWidth,
                minHeight: this.optionTemplate.minHeight,
                maxHeight: this.optionTemplate.maxHeight,
                yScale : 1,
                xScale : 1
            };
        }
        //adapt ipad 1024px
        //var styleHeight = '';
        //if(!this.entity.modal.title){
        //    styleHeight = 'height:100%;';
        //}else{
        //    styleHeight = 'height:calc(100% - 38px);';
        //}
        if (AppConfig.isMobile || (this.screen.options && this.screen.options.isForMobile) || (this.screen.screen && this.screen.screen.options && this.screen.screen.options.isForMobile)) {
            var height = 100;
            //if((this.optionTemplate.scroll === false || this.entity.scroll === false) && !(this.screen.options && this.screen.options.isConfig)){
            //    divParent.className += ' noScroll';
            //} else {
                height = this.UNIT_HEIGHT * this.entity.spanR * this.spanRange.yScale;
                height > 100 && (height = 100);
                divParent.style.height = height + '%';
            //}
            divParent.style.width = this.UNIT_WIDTH * this.entity.spanC * this.spanRange.xScale + '%';
            if (this.UNIT_WIDTH * this.entity.spanC * this.spanRange.xScale > 100){
                divParent.style.width = '100%';
            }
            if (this.UNIT_HEIGHT * this.entity.spanR * this.spanRange.yScale > 100){
                divParent.style.height = '100%';
            }
        } else {
            divParent.style.height = this.UNIT_HEIGHT * this.entity.spanR + '%';
            divParent.style.width = this.UNIT_WIDTH * this.entity.spanC + '%';
        }

        if (this.entity.modal.title && this.entity.modal.title != '' && (!this.entity.isNotRender)) {
            divParent.innerHTML = '<div class="panel panel-default">\
                <div class="panel-heading springHead">\
                    <h3 class="panel-title" style="font-weight: bold;">' + this.entity.modal.title + '</h3>\
                </div>\
                <div class="panel-body springContent' + scrollClass + '" style="position: relative;"></div>\
            </div>';
        } else {//为组合图里的小图添加标题
            divParent.innerHTML = '<div class="panel panel-default">\
                <span class="springSeHead fontTemp6">' + (this.entity.modal.title ? this.entity.modal.title : '') + '</span>\
                <div class="panel-body springContent' + scrollClass + '" style="position: relative;height:100%;"></div>\
            </div>';
        }
        //如果是移动端,背景设置为透明
        if (AppConfig.isMobile || (this.screen.options && this.screen.options.isForMobile) || (this.screen.screen && this.screen.screen.options && this.screen.screen.options.isForMobile)) {
            divParent.children[0].classList.add('transparent');
        }

        //按钮容器:锚链接,历史数据,wiki
        if(!(this instanceof ModalAnalysis)){
            var divBtnCtn = document.createElement('div');
            divBtnCtn.className = 'springLinkBtnCtn';

            var domPanel = divParent.getElementsByClassName('panel')[0];

            // jump button
            if (this.entity.modal.points && this.entity.modal.points.length > 0) {
                var lkJump;
                lkJump = document.createElement('a');
                lkJump.className = 'springLinkBtn';
                lkJump.title = 'Add to datasource';
                lkJump.href = 'javascript:;';
                lkJump.innerHTML = '<span class="glyphicon glyphicon-export"></span>';
                divBtnCtn.appendChild(lkJump);
                lkJump.onclick = function() {
                    new ModalAppendPointToDs(true, _this.entity.modal.points, null).show();
                }
           }

            //锚链接 start
            var link = this.entity.modal.link;
            var _this = this;
            if(link && AppConfig.menu[link]){
                var linkBtn = document.createElement('a');
                linkBtn.className = 'springLinkBtn';
                linkBtn.innerHTML = '<span class="glyphicon glyphicon-link"></span>';
                linkBtn.setAttribute('pageid',link);
                linkBtn.title = 'Link to ' + AppConfig.menu[link];
                divBtnCtn.appendChild(linkBtn);
                linkBtn.onclick = function(e){
                    var $ev =  $('#ulPages [pageid="'+ link +'"]');
                    if($ev[0].className != 'nav-btn-a'){
                        $ev = $ev.children('a');
                        $ev.closest('.dropdown').children('a').trigger('click');
                    }
                    $ev.trigger('click');
                }
            }

            domPanel.appendChild(divBtnCtn);
        }

        this.container = divParent.getElementsByClassName('springContent')[0];

        return this;
    }

    ModalMix.prototype.renderModal = function (e) {
        var _this = this;
        var $sliderCont;
        var $sliderDiv = $('.sliderDiv');
        //是否以slider形式显示判断字段
        //兼容老数据,默认播放间隔为5s
        if(_this.entity.modal.option.displaySlider && !_this.entity.modal.option.displayInterval){
            _this.entity.modal.option.displayInterval = 5;
        }
        var displaySlider = _this.entity.modal.option.displayInterval;
        var carouselTime = new Date();

        this.container.classList.add('modalMix');
        if (displaySlider && displaySlider != '0') {
            $sliderDiv = $('\
                                <div id="carousel_' + carouselTime.getTime() + '" class="carousel slide sliderDiv" data-ride="carousel">' +
                                 '<ol class="carousel-indicators" style="bottom:-6px;">' +
                                 '</ol><div class="carousel-inner" role="listbox">' +
                                 '</div>' +
                                 '<a class="left carousel-control" href="#carousel_' + carouselTime.getTime() + '" role="button" data-slide="prev">' +
                                 '<span class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="transform: scale(1,1.3)"></span><span class="sr-only">Previous</span></a>' +
                                 '<a class="right carousel-control" href="#carousel_' + carouselTime.getTime() + '" role="button" data-slide="next">' +
                                 '<span class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="transform: scale(1,1.3)"></span><span class="sr-only">Next</span></a>' +
                                 '</div>');
            $(_this.container).append($sliderDiv);
            if(AppConfig.isMobile){
                $(_this.container).append('<style>.carousel-indicators .active{background-color: rgb(242,199,83);border: none;width: 12px;height: 3px;border-radius: 0;}.carousel-indicators li{background-color: rgba(228, 228, 228,0.5);border-width: 0;width: 12px;height: 3px;margin:1.5px!important;}</style>');
                $('.carousel-control', _this.container).addClass('hidden');
                //绑定左右滑动事件
                this.attachEventSlider();
            }
        }
        if (!this.entity.modal.option || !this.entity.modal.option.subChartIds) return;
        var index = 0;
        this.entity.modal.option.subChartIds.forEach(function (obj) {
            for (var i = 0, item; i < _this.screen.store.layout.length; i++) {
                if (displaySlider && displaySlider != '0') {
                    $(_this.container).css({ 'display': 'block', 'overflow-y': 'hidden' });
                    for (var z = 0; z < _this.screen.store.layout[i].length; z++) {
                        item = _this.screen.store.layout[i][z];
                        if (obj.id != item.id) continue;
                        var modelClass, entity;
                        _this.screen.store.layout[i][z].spanC = 12;
                        
                        var $sliderIner = $('<div class="item sliderIner"><div class="carousel-caption" style="height:100%;width:100%;right:0;left:0;padding-bottom:0;bottom:0px;padding-top:0px;"></div></div>');
                        var $sliderDot = $('<li data-target="#carousel_' + carouselTime.getTime() + '" data-slide-to="' + index + '" style="border-color:#aaa;margin:1.5px 3px;"></li>')
                        if (item.modal.type && item.modal.type != 'ModalNone') {
                            //regist IoC
                            modelClass = _this.screen.factoryIoC.getModel(item.modal.type);
                            if (!modelClass) continue;
                            if (item.isNotRender && _this.entity.modal.type == 'ModalMix') {
                                //_this.screen.container = document.getElementById('divContainer_' + _this.entity.id);
                                entity = new modelClass(_this, item);
                                _this.screen.listEntity[item.id] = entity;
                                if(item.modal.type==='ModalAppButton'){
                                    if (entity) {
                                        $(entity.container).height($(_this.container).height() - 30);
                                        $(entity.container).width($(_this.container).width());
                                    }
                                    entity.render();
                                    $sliderCont = $(_this.container).children('.springContainer');
                                    $sliderIner.children('.carousel-caption').append($sliderCont);
                                    $sliderIner.height($(_this.container).height());
                                    $sliderDiv.children('.carousel-inner').append($sliderIner);
                                    $sliderDiv.children('.carousel-indicators').append($sliderDot);
                                    ++index;
                                    continue;
                                }
                                if ($.inArray(item.id, _this.screen.arrEntityOrder) < 0) {
                                    _this.screen.arrEntityOrder.push(item.id);
                                }
                                if (item.modal.interval && item.modal.interval >= 0) {
                                    for (var k = 0, point, kLen = item.modal.points.length; k < kLen; k++) {
                                        point = item.modal.points[k];
                                        if (_this.screen.requestPoints.indexOf(point) < 0) {
                                            _this.screen.requestPoints.push(point);
                                        }
                                    }
                                }
                                if (item.modal.popId) {
                                    if (!_this.screen.dictPopToEntity[item.modal.popId]) _this.screen.dictPopToEntity[item.modal.popId] = [];
                                    _this.screen.dictPopToEntity[item.modal.popId].push(item.id);
                                    if (_this.screen.requestPoints.indexOf(item.modal.popId) < 0) {
                                        _this.screen.requestPoints.push(item.modal.popId);
                                    }
                                }

                                if (entity) {
                                    if(AppConfig.isMobile ||( _this.screen.options && _this.screen.options.isForMobile)){
                                        $(entity.container).height($(_this.container).height()-40);//App上slider点在图下面
                                    }else{
                                        if(entity.entity.modal.title!==''){
                                            $(entity.container).height($(_this.container).height()-60);
                                        }else{
                                            $(entity.container).height($(_this.container).height()-30);
                                        }
                                    }
                                    $(entity.container).width($(_this.container).width());
                                }
                                entity.render();
                            }
                        } else if (item.modal.type == 'ModalNone') {
                            modelClass = _this.screen.factoryIoC.getModel(item.modal.type);
                            entity = new modelClass(_this, item);
                            _this.screen.listEntity[item.id] = entity;
                            _this.screen.arrEntityOrder.push(item.id);
                            if (entity) {
                                $(entity.container).height($(_this.container).height() - 30);
                                $(entity.container).width($(_this.container).width());
                            }
                            entity.render();
                            _this.screen.isForReport && entity.configure();
                        }
                        $sliderCont = $(_this.container).children('.springContainer'); 
                        $sliderIner.children('.carousel-caption').append($sliderCont);
                        $sliderIner.height($(_this.container).height()-6);
                        $sliderDiv.children('.carousel-inner').append($sliderIner);
                        $sliderDiv.children('.carousel-indicators').append($sliderDot);
                        ++index;
                    }
                } else {
                    $(_this.container).css({ 'display': 'flex', 'overflow-y': 'auto', 'flex-flow': 'wrap' });
                    for (var j = 0; j < _this.screen.store.layout[i].length; j++) {
                        item = _this.screen.store.layout[i][j];
                        if (obj.id != item.id) continue;
                       // _this.screen.store.layout[i][j].spanC = 6;
                        var modelClass, entity;
                        if (item.modal.type && item.modal.type != 'ModalNone') {
                            //regist IoC
                            modelClass = _this.screen.factoryIoC.getModel(item.modal.type);
                            if (!modelClass) continue;
                            if (item.isNotRender && _this.entity.modal.type == 'ModalMix') {
                                //_this.screen.container = document.getElementById('divContainer_' + _this.entity.id);
                                entity = new modelClass(_this, item);
                                _this.screen.listEntity[item.id] = entity;
                                if(item.modal.type==='ModalAppButton'){
                                    entity.render();
                                    continue;
                                }
                                if ($.inArray(item.id, _this.screen.arrEntityOrder) < 0) {
                                    _this.screen.arrEntityOrder.push(item.id);
                                }
                                if (item.modal.interval && item.modal.interval >= 0) {
                                    for (var k = 0, point, kLen = item.modal.points.length; k < kLen; k++) {
                                        point = item.modal.points[k];
                                        if (_this.screen.requestPoints.indexOf(point) < 0) {
                                            _this.screen.requestPoints.push(point);
                                        }
                                    }
                                }
                                if (item.modal.popId) {
                                    if (!_this.screen.dictPopToEntity[item.modal.popId]) _this.screen.dictPopToEntity[item.modal.popId] = [];
                                    _this.screen.dictPopToEntity[item.modal.popId].push(item.id);
                                    if (_this.screen.requestPoints.indexOf(item.modal.popId) < 0) {
                                        _this.screen.requestPoints.push(item.modal.popId);
                                    }
                                }
                                entity.render();
                            }
                        } else if (item.modal.type == 'ModalNone') {
                            modelClass = _this.screen.factoryIoC.getModel(item.modal.type);
                            entity = new modelClass(_this, item);
                            _this.screen.listEntity[item.id] = entity;
                            _this.screen.arrEntityOrder.push(item.id);
                            entity.render();
                            _this.screen.isForReport && entity.configure();
                        }
                    }
                }
            }
        });
        if (displaySlider) {
            if ($(_this.container).find('.item:first')) {
                $(_this.container).find('.item:first').addClass('active');
            }
            if ($(_this.container).find('.carousel-indicators').children(':first')) {
                $(_this.container).find('.carousel-indicators').children(':first').addClass('active');
            }
            $(_this.container).find('.sliderDiv').carousel({interval: this.entity.modal.option.displayInterval * 1000});
        }
        if(this.entity.modal.option.bgColor){//背景颜色
            this.container.style.backgroundColor = this.entity.modal.option.bgColor;
            $(this.container).find('.panel.panel-default').css('cssText', 'background-color:transparent !important')
        }
    }

    ModalMix.prototype.showConfigMode = function () {}

    ModalMix.prototype.updateModal = function (points) {
        for(var i in points){
            var data = points[i].data;
            if(!isNaN(data)){
                data = parseFloat(data).toFixed(2);
            }
            $('#'+points[i].dsItemId).html(data);
        }
    }

    ModalMix.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
    }

    ModalMix.prototype.configure = function () {
        if(this.spinner) this.spinner.stop();
        var _this = this;
        if (this.chart) this.chart.clear();
        this.divResizeByMouseInit();

        var divMask = document.createElement('div');
        divMask.className = 'springConfigMask';
        divMask.draggable = 'true';

        var btnRemove = document.createElement('span');
        btnRemove.className = 'glyphicon glyphicon-remove-circle springConfigRemoveBtn grow';
        btnRemove.title = 'Remove';
        btnRemove.onclick = function (e) {
            confirm('Are you sure you want to delete it ?', function () {
                if (_this.chart) _this.chart.clear();
                if(_this.entity.modal.option.subChartIds.length>0){
                    var subChartsIdsMix = _this.entity.modal.option.subChartIds;
                    for(var i = 0;i<subChartsIdsMix.length;i++){
                        var item = subChartsIdsMix[i];
                        for(var j = 0;j<_this.screen.arrEntityOrder.length;j++){
                            if(item.id===_this.screen.arrEntityOrder[j]){
                                _this.screen.removeEntity(_this.screen.arrEntityOrder[j]);
                            }
                        }
                    }
                   _this.entity.modal.option.subChartIds = [];
                }
                var oldIndex = _this.screen.arrEntityOrder.indexOf(_this.entity.id);
                _this.screen.removeEntity(_this.entity.id);

                //重新生成窗口
                var entity = new ModalNone(_this.screen, {
                    id: _this.entity.id,
                    spanC: _this.entity.spanC,
                    spanR: _this.entity.spanR,
                    modal: {type:"ModalNone"}
                }, _this.entity.id);
                _this.screen.arrEntityOrder.splice(oldIndex,0,entity.entity.id);
                _this.screen.listEntity[entity.entity.id] = entity;
                entity.render();
                entity.configure();
                entity.hasEdit = true;
                _this = null;
            })
        };
        divMask.appendChild(btnRemove);

        //add button for mix
        var btnAdd = document.createElement('span');
        btnAdd.className = 'glyphicon glyphicon-plus-sign springConfigAddBtn grow';
        btnAdd.title = 'Add';
        btnAdd.onclick = function (e) {
            //创建一个modalNone
            var spanC = 6, spanR = 6;
            //height width 和最后一个节点一样
            var $chartsCt =_this.container.classList.contains('chartsCt') ? $(_this.container) : $(_this.container).siblings().find('.chartsCt');
            if($chartsCt.children().length > 0){
                var lastDiv = $chartsCt.children()[$chartsCt.children().length - 1];
                spanR = Number(lastDiv.querySelector('#heightResize').value);
                spanC = Number(lastDiv.querySelector('#widthResize').value);
            }

            if(!_this.container.classList.contains('chartsCt')){
                //_this.container = _this.container.nextElementSibling.children[6];
                _this.container = _this.container.parentElement.getElementsByClassName('chartsCt')[0];
            }
            var entity = new ModalNone(_this, {
                    id: (+new Date()).toString(),
                    spanC: spanC,
                    spanR: spanR,
                    modal: { type: "ModalNone" },
                    isNotRender: true
                });
                _this.screen.arrEntityOrder.push(entity.entity.id);
                _this.screen.listEntity[entity.entity.id] = entity;

                if(!_this.entity.modal.option){
                    _this.entity.modal.option = {};
                    _this.entity.modal.option.subChartIds = new Array();
                }
                _this.entity.modal.option.subChartIds.push({ id: entity.entity.id });
                entity.render();
                entity.configure();
        };
        divMask.appendChild(btnAdd);
        //install button for mix
        var btnInstall = document.createElement('span');
        btnInstall.className = 'glyphicon glyphicon-cog springConfigInstallBtn grow';
        btnInstall.title = 'config';

        btnInstall.onclick = function (e) {
            _this.showConfigModal();
        }
        divMask.appendChild(btnInstall);

        var btnHeightResize = document.createElement('div');

        if(AppConfig.isMobile || this.screen.isForMobile || (this.screen.options && this.screen.options.isForMobile)){
            this.entity.spanC = this.optionTemplate.maxWidth = this.optionTemplate.minWidth = 3;//宽度固定
            this.optionTemplate.maxHeight = 4.5;//最大高度修改
            (this.entity.spanR > this.optionTemplate.maxHeight) && (this.entity.spanR = this.optionTemplate.maxHeight);
        }
        var maxHeight = this.optionTemplate.maxHeight;
        var maxWidth = this.optionTemplate.maxWidth;
        var minHeight = this.optionTemplate.minHeight;
        var minWidth = this.optionTemplate.minWidth;
        btnHeightResize.className = 'divResize divHeightResize';
        btnHeightResize.innerHTML = '<label for="heightResize" >H: </label>' +
        '<input type="range" class="inputResize" id="heightResize" name="points" step="0.5" min="' + minHeight + '" max="' + maxHeight + '" value="' + _this.entity.spanR + '"/>' +
        '<h5 class="rangeVal">' + _this.entity.spanR + ' /'+ maxHeight + '</h5>' +
        '<input type="text" class="rangeChange" value="' + _this.entity.spanR + '"/>';
        divMask.appendChild(btnHeightResize);
        var btnWidthResize = document.createElement('div');
        btnWidthResize.className = 'divResize divWidthResize';
        btnWidthResize.innerHTML = '<label for="widthResize" >W: </label>' +
        '<input type="range" class="inputResize" id="widthResize" name="points" step="0.5" min="' + minWidth + '" max="' + maxWidth + '" value="' + _this.entity.spanC + '"/>' +
        '<h5 class="rangeVal">' + _this.entity.spanC + ' /'+ maxWidth +'</h5>' +
        '<input type="text" class="rangeChange" value="' + _this.entity.spanC + '"/>';
        divMask.appendChild(btnWidthResize);
        var divTitleAndType = document.createElement('div');
        divTitleAndType.className = 'divTitleAndType';
        divMask.appendChild(divTitleAndType);

        //chartCt
        var $chartCt = $('<div class="divResize chartsCt gray-scrollbar">');
        divMask.appendChild($chartCt[0]);


        var $divTitle = $('<div class="divResize chartTitle">');
        var $labelTitle = $('<label for="title">').text(I18n.resource.dashboard.show.TITLE);
        var inputChartTitle = document.createElement('input');
        inputChartTitle.id = 'title';
        inputChartTitle.className = 'form-control';
        inputChartTitle.value = this.entity.modal.title;
        inputChartTitle.setAttribute('placeholder',I18n.resource.dashboard.show.TITLE_TIP);
        if(this.entity.modal.title != ''){
            inputChartTitle.style.display = 'none';
        }
        inputChartTitle.setAttribute('type','text');
        $divTitle.append($labelTitle).append($(inputChartTitle));
        divTitleAndType.appendChild($divTitle[0]);

        var $divType = $('<div class="divResize chartType">');
        var $labelType = $('<label>').text(I18n.resource.dashboard.show.TYPE);
        var chartType = document.createElement('span');
        chartType.innerHTML = I18n.findContent(this.optionTemplate.name);
        $divType.append($labelType).append($(chartType));
        divTitleAndType.appendChild($divType[0]);



        var chartTitleShow = document.createElement('p');
        chartTitleShow.innerHTML = inputChartTitle.value;
        chartTitleShow.className = 'chartTitleShow';
        $divTitle[0].appendChild(chartTitleShow);
        if(this.entity.modal.title == '' || this.entity.modal.title == undefined){
            chartTitleShow.style.display = 'none';
        }
        chartTitleShow.onclick = function(){
            chartTitleShow.style.display = 'none';
            inputChartTitle.style.display = 'inline-block';
            inputChartTitle.focus();
        };
        inputChartTitle.onblur = function(){
            if (inputChartTitle.value != ''){
                inputChartTitle.style.display = 'none';
                chartTitleShow.style.display = 'inline';
            }
            chartTitleShow.innerHTML = inputChartTitle.value;
            _this.entity.modal.title = inputChartTitle.value;
        };


        this.container.parentNode.appendChild(divMask);
        this.divResizeByToolInit();


        //drag event of replacing entity
        var divContainer = $(this.container).closest('.springContainer')[0];
        divMask.ondragstart = function (e) {
            //e.preventDefault();
            e.dataTransfer.setData("id", $(e.target).closest('.springContainer').get(0).id.replace('divContainer_', ''));
        };
        divMask.ondragover = function (e) {
            e.preventDefault();
        };
        divMask.ondragleave = function (e) {
            e.preventDefault();
        };
        divContainer.ondrop = function (e) {
            e.stopPropagation();
            var sourceId = e.dataTransfer.getData("id");
            var $sourceParent, $targetParent, $chartsCt;
            if (sourceId) {
                var targetId = $(e.target).closest('.springContainer').get(0).id.replace('divContainer_', '');
                $sourceParent = $('#divContainer_' + sourceId).parent();
                $targetParent = $('#divContainer_' + targetId).parent();
                $chartsCt = e.target.classList.contains('chartsCt') ? $(e.target) : $(e.target).closest('.chartsCt');
                //外部非组合图拖入组合图
                // 1.非组合图：!$sourceParent[0].classList.contains('chartsCt')
                // 2.source Chart可能ondrop在target chart的chartsCt,也可能是ondrop在chartsCt里面的某个chart,所以
                if(!$sourceParent[0].classList.contains('chartsCt') && ($targetParent[0].classList.contains('chartsCt') || $chartsCt.length == 1)){
                    if($targetParent[0].classList.contains('chartsCt')){
                        _this.insertChartIntoMix(sourceId, $targetParent[0])
                    }else if($chartsCt.length == 1){
                        _this.insertChartIntoMix(sourceId, $chartsCt[0])
                    }
                }else{//平级之间交换
                    if(_this.screen.screen){//组合图内部交换
                        _this.screen.screen.replaceEntity(sourceId, targetId, _this.screen.entity.id);
                    }else{
                        _this.screen.replaceEntity(sourceId, targetId);
                    }
                }
            }
        }
        this.executeConfigMode();
    },

    ModalMix.prototype.insertChartIntoMix = function(sourceId, container){
        if (sourceId) {
            if(this.screen.listEntity[sourceId].entity.modal.type == 'ModalMix'){
                alert(I18n.resource.toolBox.modal.MSG_MIX_NOT_ALLOW_TO_MIX);
                return false;
            }
            var modelClass, item, entity = this.screen.listEntity[sourceId].entity;
            $('#divContainer_'+ sourceId).remove();
            entity.isNotRender = true;
            if(!this.entity.modal.option){
                this.entity.modal.option = {};
            }
            if(!this.entity.modal.option.subChartIds){
                this.entity.modal.option.subChartIds = [];
            }
            modelClass = this.screen.factoryIoC.getModel(entity.modal.type);
            this.screen.container = container;
            if(container.children.length > 0){
                var lastDiv = container.children[container.children.length - 1];
                entity.spanC = Math.round(parseInt(lastDiv.style.width.split('%')[0])/10) * 12/ 10;
                entity.spanR = Math.round(parseInt(lastDiv.style.height.split('%')[0])/10) * 6/ 10;
            }else{
                entity.spanC = 6;
                entity.spanR = 6;
            }
            item = new modelClass(this.screen, entity);
            item.configure()
            this.entity.modal.option.subChartIds.push({id: entity.id});
        }
    }

    ModalMix.prototype.showConfigModal = function(){
        var _this = this;
        var $mixChartShow = $('#mixChartShow');
        if ($mixChartShow.length===0) {
            $mixChartShow = $('\
                            <style>.mixChartShow .row{margin-top: 15px;margin-bottom: 15px;}</style>\
                            <div id="mixChartShow" class="mixChartShow"><div class="modal fade"  style="position:absolute;"><div class="modal-dialog"><div class="modal-content">\
                            <div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>\
                            <h4 class="modal-title">组合图显示模式</h4></div>\
                            <div class="modal-body">\
                            <div class="row">\
                            <div class="col-xs-3">组合图轮播</div>\
                            <div class="col-xs-6"><input type="number" id="iptInterval" placeholder="时间间隔" style="width:100px"/>s(0或者不填写表示不轮播)</div>\
                            </div>\
                            <div class="row">\
                            <div class="col-xs-3">背景颜色</div>\
                            <div class="col-xs-2">\
                            <select id="selBgColor">\
                            <option value="transparent">无</option>\
                            <option value="#ffffff">白</option>\
                            <option value="#000000">黑</option>\
                            <option value="#337ab7">蓝</option>\
                            <option value="#5cb85c">绿</option>\
                            <option value="custom">自定义</option>\
                            </select>\
                            </div>\
                            <div class="col-xs-2"><input type="input" id="iptBgColor" placeholder="#ffffff" style="width:60px"/></div>\
                            <div class="col-xs-2"><input type="color" class="" id="bgColorView"/></div>\
                            </div>\
                            <div class="modal-footer"><button type="button" class="btn btn-primary" data-dismiss="modal" id="btnSaveConfig">确定</button></div>\
                            </div></div></div></div>');
        }
        var $paneContent = $('#paneContent');
        var $konvajsContent = $('.konvajs-content');
        if($paneContent.length === 1){
            $paneContent.append($mixChartShow);
        }else if($konvajsContent.length === 1){
            $konvajsContent.append($mixChartShow);
        }

        var $iptBgColor = $('#iptBgColor', $mixChartShow);
        var $bgColorView = $('#bgColorView', $mixChartShow);
        var $selBgColor = $('#selBgColor', $mixChartShow);
        var $iptInterval = $('#iptInterval', $mixChartShow);


        $iptInterval.val(_this.entity.modal.option.displayInterval ? _this.entity.modal.option.displayInterval : 20);
        setShow(_this.entity.modal.option.bgColor ? _this.entity.modal.option.bgColor : 'transparent');


        $selBgColor.off('change').on('change', function(e){
            setShow(this.value,e);
        });

        $iptBgColor.off('input').on('input', function(){
            $bgColorView.val(this.value);
        });

        $bgColorView.off('change').on('change', function(e){
            $iptBgColor.val(this.value);
        });

        $('#btnSaveConfig', $mixChartShow).off('click').click(function () {
            _this.entity.modal.option.displayInterval = $iptInterval.val();//轮播时间间隔
            _this.entity.modal.option.bgColor = $iptBgColor.val();//背景颜色
        });

        $mixChartShow.children('.modal').modal();

        function setShow(selected, event){
            if(selected === 'transparent'){
                $bgColorView.hide();
            }else{
                $bgColorView.val(selected);
                $bgColorView.show();
            }

            if(selected === 'custom'){
                $iptBgColor.show();
                $iptBgColor.val('').focus();
            }else{
                $iptBgColor.hide();
                $iptBgColor.val(selected);
            }

            if(!event){
                $selBgColor.val(selected);
                if(!$selBgColor.val()){
                    $selBgColor.val('custom');
                    $iptBgColor.val(selected).show().focus();
                }
            }
        }
    }

    ModalMix.prototype.attachEventSlider = function(){
        var startPos, isScrolling, endPos, _this = this;
        this.container.addEventListener('touchstart',function(e){
            e.preventDefault();
            //touches数组对象获得屏幕上所有的touch，取第一个touch
            var touch = event.targetTouches[0];
            //取第一个touch的坐标值
            startPos = {x:touch.pageX,y:touch.pageY,time:+new Date};
            //这个参数判断是垂直滚动还是水平滚动
            isScrolling = 0;
            _this.container.addEventListener('touchmove',move,false);
            _this.container.addEventListener('touchend',end,false);
        },false);
        function move(){
            //当屏幕有多个touch或者页面被缩放过，就不执行move操作
            if(event.targetTouches.length > 1 || event.scale && event.scale !== 1) return;
            var touch = event.targetTouches[0];
            endPos = {x:touch.pageX - startPos.x,y:touch.pageY - startPos.y};
            //isScrolling为1时，表示纵向滑动，0为横向滑动
            isScrolling = Math.abs(endPos.x) < Math.abs(endPos.y) ? 1:0;
            if(isScrolling === 1){
             //阻止触摸事件的默认行为，即阻止滚屏
             event.preventDefault();
            }
        }
        function end(){
            //滑动的持续时间
            var duration = +new Date - startPos.time;
            var i = 0;
            if(Number(duration) > 10){
                if(isScrolling === 1){
                    //判断是上移还是下移，当偏移量大于10时执行
                    if(endPos.y < -10){
                     i = 1;
                    }else if(endPos.y > 10){
                     i = 3;
                    }
                }else if(isScrolling === 0){
                    //判断是左移还是右移，当偏移量大于10时执行
                    if(endPos.x > 10){
                        i = 2;
                    }else if(endPos.x < -10){
                        i = 4;
                    }
                }
                callback(i);
                startPos = endPos = null;
                return false;
            }
            //解绑事件
            _this.container.removeEventListener('touchmove',this,false);
            _this.container.removeEventListener('touchend',this,false);
        }
        function callback(direction){
            switch(direction){
                case 1://上
                    break;
                case 2://右
                    $('.left.carousel-control',_this.container).click();
                    break;
                case 3://下
                    break;
                case 4://左
                    $('.right.carousel-control',_this.container).click()
                    break;
                default:
                    break;
            };
        }
    }

    /*
    ModalMix.prototype.modalInit = function(){
        var configModalOpt = {
                "header" : {
                "needBtnClose" : true,
                "title" : "配置"
            },
            "area" : [
                {
                    "type": 'option',
                    "widget":[{type:'text',name:'组合图轮播(s)', opt:{data: this.entity.modal.option.displayInterval, attr:{class:'inlineBlock iptInterval',placeholder:'时间间隔'}}}]
                },{
                    "module" : "colorConfig",
                    "data": [{color: this.entity.modal.option.bgColor}]
                },
                {
                    'type':'footer',
                    "widget":[{type:'confirm',opt:{needClose:true}},{type:'cancel'}]
                }
            ],
            result:{func: data => {
                this.entity.modal.option.displayInterval = data.text.val;//轮播时间间隔
                this.entity.modal.option.bgColor = data.color;//背景颜色
                this.renderModal();
            }}
        }
        this.configModal = new ConfigModal(configModalOpt, this.screen.container ? this.screen.container : this.screen.page.painterCtn);
        this.configModal.init();
        this.configModal.show();
    }*/

    return ModalMix;
})();
/**
 * Created by RNBtech on 2015/6/18.
 */
var ModalMonitor = (function(){
    var _this;
    function ModalMonitor(screen, entityParams) {
        _this = this;
        _this.$configModal = undefined;
        _this.$modal = undefined;
        _this.tempOpt = undefined;
        if (!entityParams) return;
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
    }
    ModalMonitor.prototype = new ModalBase();
    ModalMonitor.prototype.optionTemplate = {
        name:'toolBox.modal.Monitor',
        parent:0,
        mode:['realTimeDashboard'],
        maxNum: 10,
        title:'',
        defaultHeight:4.5,
        defaultWidth:3,
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        scroll:false,
        type: 'ModalMonitor',
        tooltip: {
            'imgPC': false,
            'imgMobile': true,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalMonitor.prototype.show = function(){
        this.init();
    };

    ModalMonitor.prototype.init = function(){
        this.container.style.overflowX = 'hidden';
        this.container.style.overflowY = 'auto';
    };

    ModalMonitor.prototype.configure = function(){
        this.spinner && this.spinner.stop();
        var _this = this;

        if (this.chart) this.chart.clear();
        this.divResizeByMouseInit();

        var divMask = document.createElement('div');
        divMask.className = 'springConfigMask';
        divMask.draggable = 'true';

        var btnRemove = document.createElement('span');
        btnRemove.className = 'glyphicon glyphicon-remove-circle springConfigRemoveBtn grow';
        btnRemove.title = 'Remove';
        btnRemove.onclick = function (e) {
            //TODO 测试confirm
            confirm('Are you sure you want to delete it ?', function () {
                if (_this.chart) _this.chart.clear();
                if (_this.screen.screen) {//兼容ModalMix
                    _this.screen.screen.removeEntity(_this.entity.id);
                } else {
                    _this.screen.removeEntity(_this.entity.id);
                }

                $('#divContainer_' + _this.entity.id).remove();
                _this.screen.isScreenChange = true;
                _this = null;
            })
        };
        divMask.appendChild(btnRemove);

        if (this.entity.modal.type !='ModalAnalysis' || !this.screen.isForReport) {
            var btnConfig = document.createElement('span');
            btnConfig.className = 'glyphicon glyphicon-cog springConfigBtn grow';
            btnConfig.title = 'Options';
            btnConfig.onclick = btnConfig_clickEvent;
            divMask.appendChild(btnConfig);
        }
        function btnConfig_clickEvent(e) {
            $('.springSel').removeClass('springSel');
            $(e.target).closest('.springContainer').addClass('springSel');
            _this.modalInit();
            //$('#energyModal').modal('show');
        }

        var btnHeightResize = document.createElement('div');
        var maxHeight = this.spanRange.maxHeight;
        var maxWidth = this.spanRange.maxWidth;
        var minHeight = this.spanRange.minHeight;
        var minWidth = this.spanRange.minWidth;
        btnHeightResize.className = 'divResize divHeightResize';
        btnHeightResize.innerHTML = '<label for="heightResize" >H: </label>' +
        '<input type="range" class="inputResize" id="heightResize" name="points" step="0.5" min="' + minHeight + '" max="' + maxHeight + '" value="' + _this.entity.spanR + '"/>' +
        '<h5 class="rangeVal">' + _this.entity.spanR + ' /' + _this.spanRange.maxHeight + '</h5>' +
        '<input type="text" class="rangeChange" value="' + _this.entity.spanR + '"/>';
        divMask.appendChild(btnHeightResize);
        var btnWidthResize = document.createElement('div');
        btnWidthResize.className = 'divResize divWidthResize';
        btnWidthResize.innerHTML = '<label for="widthResize" >W: </label>' +
        '<input type="range" class="inputResize" id="widthResize" name="points" step="0.5" min="' + minWidth + '" max="' + maxWidth + '" value="' + _this.entity.spanC + '"/>' +
        '<h5 class="rangeVal">' + _this.entity.spanC + ' /' + _this.spanRange.maxWidth + '</h5>' +
        '<input type="text" class="rangeChange" value="' + _this.entity.spanC + '"/>';
        divMask.appendChild(btnWidthResize);
        var divTitleAndType = document.createElement('div');
        divTitleAndType.className = 'divTitleAndType';
        divMask.appendChild(divTitleAndType);


        var $divTitle = $('<div class="divResize chartTitle">');
        var $labelTitle = $('<label for="title">').text(I18n.resource.dashboard.show.TITLE);
        var inputChartTitle = document.createElement('input');
        inputChartTitle.id = 'title';
        inputChartTitle.className = 'form-control';
        inputChartTitle.value = this.entity.modal.title;
        inputChartTitle.setAttribute('placeholder',I18n.resource.dashboard.show.TITLE_TIP);
        if(this.entity.modal.title != ''){
            inputChartTitle.style.display = 'none';
        }
        inputChartTitle.setAttribute('type','text');
        $divTitle.append($labelTitle).append($(inputChartTitle));
        divTitleAndType.appendChild($divTitle[0]);

        var $divType = $('<div class="divResize chartType">');
        var $labelType = $('<label>').text(I18n.resource.dashboard.show.TYPE);
        var chartType = document.createElement('span');
        chartType.innerHTML = I18n.findContent(this.optionTemplate.name);
        $divType.append($labelType).append($(chartType));
        divTitleAndType.appendChild($divType[0]);

        var chartTitleShow = document.createElement('p');
        chartTitleShow.innerHTML = inputChartTitle.value;
        chartTitleShow.className = 'chartTitleShow';
        $divTitle[0].appendChild(chartTitleShow);
        if(this.entity.modal.title == '' || this.entity.modal.title == undefined){
            chartTitleShow.style.display = 'none';
        }
        chartTitleShow.onclick = function(){
            chartTitleShow.style.display = 'none';
            inputChartTitle.style.display = 'inline-block';
            inputChartTitle.focus();
        };
        inputChartTitle.onchange = function(){
            if (inputChartTitle.value != ''){
                inputChartTitle.style.display = 'none';
                chartTitleShow.style.display = 'inline';
            }
            chartTitleShow.innerHTML = inputChartTitle.value;
            _this.entity.modal.title = inputChartTitle.value;

            _this.screen.isScreenChange = true;
        };

        _this.entity.modal.interval = '300000';//设置请求间隔

        //如果entity的isRender为false,添加到chartsCt中
        this.container.parentNode.appendChild(divMask);
        if (this.entity.isNotRender && this.screen.entity) {//兼容ModalMix
            $(document.getElementById('divContainer_' + this.screen.entity.id)).find('.chartsCt')[0].appendChild(this.container.parentNode.parentNode);
        }
        if (this.entity.isNotRender && this.screen.listEntity) {//兼容ModalMix
            var parentId = undefined, subChartIds;
                if(this.entity && this.entity.id){//observer
                    parentId = this.entity.id;
                }
                if(this.screen.store && this.screen.store.layout[0]){//factory
                    for(var i = 0, len = this.screen.store.layout[0].length, entity; i < len; i++){
                        entity = this.screen.store.layout[0][i];
                        if(entity.modal.type == 'ModalMix' && entity.modal.option.subChartIds &&  entity.modal.option.subChartIds.length > 0){
                            subChartIds = entity.modal.option.subChartIds;
                            for(var j = 0, l = subChartIds.length; j < l; j++){
                                if(subChartIds[j].id == this.entity.id){
                                    parentId = entity.id;
                                    break;
                                }
                            }
                        }
                        if(entity.modal.type == 'ModalAppBlind'&&entity.modal.option&&entity.modal.option.length>0&&entity.modal.option[0].subChartIds.length>0){
                            var opts = entity.modal.option;
                            for(var m = 0;m<opts.length;m++){
                                if(opts[m].subChartIds[0].id===this.entity.id){
                                    parentId = entity.id;
                                    break;
                                }
                            }
                        }
                    }
                }
                if(parentId){
                    $(document.getElementById('divContainer_' + parentId)).find('.chartsCt')[0].appendChild(this.container.parentNode.parentNode);
                }
        }

        this.divResizeByToolInit();

        //drag event of replacing entity

        this.executeConfigMode();
    };
    ModalMonitor.prototype.renderModal = function (e) {
        this.spinner && this.spinner.stop();
        var divMonitor,divIcon,divDetail,spName,spValue,spUnit;
        var isSemi = false;
        $(_this.container).addClass('clearfix');
        $(".springContent").css("overflow","auto");
        for (var i = 0 ; i < _this.entity.modal.option.length; i++){
            divMonitor = document.createElement('div');
            divMonitor.className = 'divMonitor';
            isSemi = false;
            (_this.entity.modal.option[i].col == '1') && (isSemi = true);
            isSemi && (divMonitor.className += ' semiCol');
            divMonitor.setAttribute("type",_this.entity.modal.option[i].type);

            divIcon = document.createElement('div');
            divIcon.className = 'divIcon';
            divIcon.innerHTML = '<span class="' + _this.entity.modal.option[i].icon + '"></span>';
            if (_this.entity.modal.option[i].icon){
                divIcon.style.color = _this.entity.modal.option[i].iconColor;
                if(isSemi) {
                    divIcon.querySelector('span').style.border = '2px solid ' + _this.entity.modal.option[i].iconColor;
                }
            }

            divDetail = document.createElement('div');
            divDetail.className = 'divMonitorInfo';

            divValue=document.createElement('div');
            divValue.className='divValue';

            spName = document.createElement('span');
            spName.className = 'spName';
            spName.textContent = _this.entity.modal.option[i].name;

            spValue = document.createElement('span');
            spValue.dataset.dsId = _this.entity.modal.option[i].dsId;
            spValue.className = 'spValue';

            spUnit = document.createElement('span');
            spUnit.className = 'spUnit';
            spUnit.textContent = _this.entity.modal.option[i].unit;

            divValue.appendChild(spUnit);
            divValue.appendChild(spValue);
            
            if(_this.entity.modal.option[i].backColor == ""){
                //!isSemi && (divMonitor.style.background = "-webkit-gradient(radial, 184 -25, 161, 220 -257, 465, from(#fabd3e), to(#f4ae32))");
            }else{
                divMonitor.style.background = _this.entity.modal.option[i].backColor;
            }
            /*当前选择是移动端且选项是一行的时候*/
            if(!isSemi){
                //divDetail.appendChild(spValue);
                //divDetail.appendChild(spUnit);
                spUnit.className+=' spUnitCover';
                spValue.className+=' spValueCover';
                spName.className+=' spNameCover';
                divIcon.className='divIconCover';
                divDetail.className+= ' divMonitorInfoCover'
                divMonitor.className+=' divMonitorCover';
                divDetail.appendChild(divIcon);
                divDetail.appendChild(spName);
                divDetail.appendChild(divValue);

            }else {
                divDetail.appendChild(spValue);
                divDetail.appendChild(spUnit);
                divDetail.appendChild(spName);
                divMonitor.appendChild(divIcon);
            }

            
            divMonitor.appendChild(divDetail);
            //(!isSemi) && (divMonitor.style.height = 100 / Math.ceil(_this.entity.spanR) + '%');
           
            if(!isSemi){
                if(AppConfig.isMobile){
                    divMonitor.style.height = '3.5rem';
                }else{
                    divMonitor.style.height = 100 / Math.ceil(_this.entity.spanR) + '%';
                }
            }
            _this.container.appendChild(divMonitor);

        }
    };
    ModalMonitor.prototype.showConfigMode = function () {
    };

    ModalMonitor.prototype.showConfigModal = function () {
        _this.tempOpt = $.extend(true,{},_this.entity.modal);
        var configModalTpl = '\
                <div id="modalMonitorConfig" class="modal fade"  role="dialog" aria-labelledby="ttlNodeTool">\
                    <div class="modal-dialog">\
                        <div class="modal-content">\
                            <div class="modal-header">\
                                <span id="btnMonitorAdd" class="glyphicon glyphicon-plus-sign btnMonitorAdd grow"></span>\
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>\
                                <h4 class="modal-title" id="ttlNodeTool">Diagnosis Edit</h4>\
                            </div>\
                            <div class="modal-body gray-scrollbar" id="ctnMonitor">\
                            </div>\
                            <div class="modal-footer">\
                                <input type ="color">\
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\
                                <button type="button" class="btn btnSure btn-primary">Save</button>\
                            </div>\
                        </div>\
                    </div>\
                </div>';
        _this.$configModal = $('#modalMonitorConfig') ;
        if(_this.$configModal.length == 0){
            _this.$configModal = $(configModalTpl);
        }else{
            _this.$configModal.modal('show');
            return;
        }
        _this.$configModal.appendTo($(_this.container).parentsUntil('.springContainer').parent().parent());
        var $ctnMonitor = _this.$configModal.find('#ctnMonitor').html('');

        var btnAdd = _this.$configModal.find('#btnMonitorAdd')[0];
        btnAdd.title = 'Monitor Type Add';
        btnAdd.onclick = function(){
            $ctnMonitor.append(_this.createDivMonitor())
        };
        if (_this.entity.modal.option && _this.entity.modal.option.length > 0){
            for (var i = 0; i < _this.entity.modal.option.length ;i++){
                $ctnMonitor[0].appendChild(_this.createDivMonitor(_this.entity.modal.option[i]));
            }
        }else {
            $ctnMonitor[0].appendChild(_this.createDivMonitor());
        }
        _this.$configModal.modal('show');
        _this.$configModal.find('.btnSure').off('click').on('click',function(){

            _this.entity.modal = $.extend(true,{},_this.tempOpt);
            _this.$configModal.modal('hide');
        });
        
        _this.attachMonitorEvent();
    };


    ModalMonitor.prototype.updateModal = function (points) {
        this.spinner && this.spinner.stop();
        var MonitorInfoS = $(_this.container).find('.divMonitor');
        var arrSpVal = $(_this.container).find('.spValue');

        for (var i = 0 ; i < arrSpVal.length; i++){
            for(var j in points){
                var data = points[j].data;
                if(!isNaN(data)){
                    /*默认保存小数0位*/
                    var decmialPoint = _this.entity.modal.option[i].dpoint ? _this.entity.modal.option[i].dpoint : 0;
                    data = parseFloat(data).toFixed(decmialPoint);
                }
                if(points[j].dsItemId == arrSpVal[i].dataset.dsId){
                    
                    if(MonitorInfoS[i].getAttribute("type") == "数值型"){
                        arrSpVal[i].textContent = data;
                    }else{//报警型
                        if(!data == "" || !data == 0){
                            arrSpVal[i].textContent = data;
                        }else{
                            $(MonitorInfoS[i]).css("background","-webkit-gradient(radial, 184 -25, 161, 220 -257, 465, from(#D31212), to(#FC1B1B))");
                            arrSpVal[i].textContent = data;
                        }
                    }
                    break;
                }
            }

        }
    };

    ModalMonitor.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
    };

    ModalMonitor.prototype.createDivMonitor = function(opt){
        var divMonitor = document.createElement('div');
        divMonitor.className ='divMonitor';
        var $divMonitor = $(divMonitor);
        divMonitor.innerHTML =
            '\
            <div class="divIcon"></div>\
            <div class="divMonitorInfo">\
                <div class="divName">\
                    <label>name:</label>\
                    <span class="spName"></span>\
                    <input class="iptName form-control" ></input>\
                </div>\
                <div class="divValue">\
                    <label>value:</label>\
                    <span class="spValueTip glyphicon glyphicon-plus"></span>\
                    <span class="spValue"></span>\
                </div>\
                <div class="divUnit">\
                    <label>unit:</label>\
                    <span class="spUnit"></span>\
                    <input class="iptUnit form-control"></input>\
                </div>\
                <div class="divType">\
                    <label>type:</label>\
                    <span class="spTypeShow"></span>\
                    <select class="spType">\
                        <option>数值型</option>\
                        <option>报警型</option>\
                    </select>\
                </div>\
                <div class="divCol">\
                    <label>col:</label>\
                    <select class="iptCol form-control" value="1">\
                        <option value="0">一行</option>\
                        <option value="1">半行</option>\
                    </select>\
                </div>\
                <div class="divPoint">\
                    <label>decimal:</label>\
                    <span class="spPoint"></span>\
                    <input class="iptPoint form-control"></input>\
                </div>\
            </div>\
            <div class="divMonitorDel glyphicon glyphicon-remove-circle"></div>';

        if(opt && opt.icon){
            $divMonitor.find('.divIcon').addClass(opt.icon);
            if(opt.iconColor)$divMonitor.find('.divIcon').css({
                'color':opt.iconColor,
                'box-shadow':'0 0 15px '+ opt.iconColor
            })
        }else{
            $divMonitor.find('.divIcon').addClass('glyphicon glyphicon-plus').css('color','#f6c700');
        }

        if(opt && opt.name){
            $divMonitor.find('.spName').show().text(opt.name);
            $divMonitor.find('.iptName').hide().val(opt.name)
        }else{
            $divMonitor.find('.spName').hide();
            $divMonitor.find('.iptName').show();
        }

        if(opt && opt.dsId){
            $divMonitor.find('.spValue').show().text(AppConfig.datasource.getDSItemById(opt.dsId).alias)[0]
            $divMonitor.find('.divValue')[0].dataset.dsId = opt.dsId;
            $divMonitor.find('.spValueTip').hide()
        }else{
            $divMonitor.find('.spValue').hide();
            $divMonitor.find('.spValueTip').show()
        }

        if(opt && opt.unit){
            $divMonitor.find('.spUnit').show().text(opt.unit);
            $divMonitor.find('.iptUnit').hide().val(opt.unit)
        }else{
            $divMonitor.find('.spUnit').hide();
            $divMonitor.find('.iptUnit').show();
        }

        if(opt && opt.type){
            $divMonitor.find('.spTypeShow').show().text(opt.type);
            $divMonitor.find('.spType').hide();
        }else{
            $divMonitor.find('.spTypeShow').hide();
            $divMonitor.find('.spType').show();
        }
        if(opt && opt.col){
            $divMonitor.find('.iptCol').val(opt.col);
        }

        if(opt && opt.backColor){
            $divMonitor.css("background",opt.backColor);
        }else{
            $divMonitor.css("background","#fff");
        }
        if(opt && opt.dpoint){
            $divMonitor.find('.spPoint').show().text(opt.dpoint);
            $divMonitor.find('.iptPoint').hide().val(opt.dpoint)
        }else{
            $divMonitor.find('.spPoint').hide();
            $divMonitor.find('.iptPoint').show();
        }
        if(!opt ){
            if(!_this.tempOpt.option) {
                _this.tempOpt.option = [];
            }
            _this.tempOpt.option.push(
                {
                    icon: 'glyphicon glyphicon-plus',
                    iconColor:'#f6c700',
                    name: '',
                    unit: '',
                    dsId: '',
                    type: '',
                    backColor: '',
                    col:'6',
                    dpoint:'' /*小数点*/
                })
        }
        return divMonitor
    };

    ModalMonitor.prototype.attachMonitorEvent = function(){
        var $ctnMonitor = _this.$configModal.find('#ctnMonitor');
        var $iptColor;
        //选中状态
        var indexDivMonitor;
        $ctnMonitor.off('click').on('click','.divMonitor',function(){
            $ctnMonitor.find(".divMonitor").css("border","1px dotted");

            indexDivMonitor = $ctnMonitor.find(".divMonitor").index($(this));

            $(this).css("border","1px solid black");
        })

        $(".modal-footer").find("input").off("change").on("change",function(){
            var colorVal = $(this).val();

            var rgb = colorVal.colorRgb().split("(")[1].split(")")[0];

            var r = rgb.split(",")[0];
            var g = rgb.split(",")[1];
            var b = rgb.split(",")[2];
            var hsl = rgbToHsl(r, g, b);
            var hslEndL = hsl[2]+0.05;

           

            var rgbStartColor = hslToRgb(hsl[0],hsl[1],hsl[2]);
            var rgbEndColor = hslToRgb(hsl[0],hsl[1],hslEndL);

            var backColor = '-webkit-gradient(radial, 184 -25, 161, 220 -257, 465, from(rgb('+rgbStartColor[0]+','+rgbStartColor[1]+','+rgbStartColor[2]+')), to(rgb('+rgbEndColor[0]+','+rgbEndColor[1]+','+rgbEndColor[2]+'))';
            _this.tempOpt.option[indexDivMonitor].backColor = backColor;
            $ctnMonitor.find(".divMonitor").eq(indexDivMonitor).css("background",backColor);
        })
        //十六进制颜色值的正则表达式
        var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
        String.prototype.colorRgb = function(){
            var sColor = this.toLowerCase();
            if(sColor && reg.test(sColor)){
                if(sColor.length === 4){
                    var sColorNew = "#";
                    for(var i=1; i<4; i+=1){
                        sColorNew += sColor.slice(i,i+1).concat(sColor.slice(i,i+1));   
                    }
                    sColor = sColorNew;
                }
                //处理六位的颜色值
                var sColorChange = [];
                for(var i=1; i<7; i+=2){
                    sColorChange.push(parseInt("0x"+sColor.slice(i,i+2)));  
                }
                return "RGB(" + sColorChange.join(",") + ")";
            }else{
                return sColor;  
            }
        };
        function rgbToHsl(r, g, b){
            r /= 255, g /= 255, b /= 255;
            var max = Math.max(r, g, b), min = Math.min(r, g, b);
            var h, s, l = (max + min) / 2;

            if(max == min){
                h = s = 0; // achromatic
            }else{
                var d = max - min;
                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                switch(max){
                    case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                    case g: h = (b - r) / d + 2; break;
                    case b: h = (r - g) / d + 4; break;
                }
                h /= 6;
            }

            return [h, s, l];
        }
        function hslToRgb(h, s, l){
            var r, g, b;

            if(s == 0){
                r = g = b = l; // achromatic
            }else{
                var hue2rgb = function hue2rgb(p, q, t){
                    if(t < 0) t += 1;
                    if(t > 1) t -= 1;
                    if(t < 1/6) return p + (q - p) * 6 * t;
                    if(t < 1/2) return q;
                    if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
                    return p;
                }

                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                var p = 2 * l - q;
                r = hue2rgb(p, q, h + 1/3);
                g = hue2rgb(p, q, h);
                b = hue2rgb(p, q, h - 1/3);
            }

            return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
        }
        //选择icon
        $ctnMonitor.on('click','.divIcon',function(e){
            e.stopPropagation();
            $('#ctnMonitor .divMonitor.selected').removeClass('selected');
            var $divMonitor = $(e.currentTarget).parentsUntil('.ctnMonitor','.divMonitor').addClass('selected');
            var index = $ctnMonitor.children().index($divMonitor);
            if(_this.$modal){
                _this.$modal.modal('show');
                $iptColor = _this.$modal.find('#iptColorSel');
                if(_this.tempOpt.option[index].iconColor) {
                    $iptColor.val(_this.tempOpt.option[index].iconColor);
                }
                if (_this.tempOpt.option[index].icon) {
                    _this.$modal.find('.bs-glyphicons-list .' + _this.tempOpt.option[index].icon.split(' ')[1]).parent().addClass('selected');
                }
            }else{
                WebAPI.get('static/scripts/spring/entities/modalMonitor.html').done(function(resultHTML){
                    _this.$modal = $(resultHTML);
                    $iptColor = _this.$modal.find('#iptColorSel');
                    _this.$modal.modal('show');
                    if(_this.tempOpt.option[index].iconColor) {
                        _this.$modal.find('#iptColorSel').val(_this.tempOpt.option[index].iconColor);
                    }
                    if (_this.tempOpt.option[index].icon) {
                        _this.$modal.find('.bs-glyphicons-list .' + _this.tempOpt.option[index].icon.split(' ')[1]).parent().addClass('selected');
                    }
                    _this.$modal.find('.bs-glyphicons-list>li').click(function(e){
                        if($(e.currentTarget).hasClass('selected'))return;
                        $('.bs-glyphicons-list>li.selected').removeClass('selected');
                        $(e.currentTarget).addClass('selected');
                    });
                    //icon里面的确认button
                    _this.$modal.find('.btnSure').click(function(e){
                        var $divMonitor = $('#ctnMonitor .divMonitor.selected');
                        var index = $ctnMonitor.children().index($divMonitor);
                        var icon = $('.bs-glyphicons-list>li.selected>.glyphicon-class').text();
                        _this.tempOpt.option[index].icon = icon;
                        _this.tempOpt.option[index].iconColor = $iptColor.val();
                        $divMonitor.find('.divIcon')[0].className = 'divIcon '+ icon;
                        $divMonitor.find('.divIcon').css({
                            'color':$iptColor.val(),
                            'box-shadow':'0 0 15px ' + $iptColor.val()
                        });
                        _this.$modal.modal('hide');
                    })
                })
            }
        });
        //删除
         $ctnMonitor.on('click','.divMonitorDel',function(e){
             e.stopPropagation();
            var index = $ctnMonitor.children().index($(e.currentTarget).parentsUntil('.ctnMonitor','.divMonitor'));
            $ctnMonitor.children().eq(index).remove();
            _this.tempOpt.option.splice(index,1);
            _this.tempOpt.points = [];
            for (var i= 0 ;i < $ctnMonitor.find('.divValue').length; i++){
                _this.tempOpt.points.push($ctnMonitor.find('.divValue')[i].dataset.dsId);
            }
         });

         $ctnMonitor.on('click','.spName',function(e){
             e.stopPropagation();
            $(e.currentTarget).hide();
            $(e.currentTarget).parentsUntil('.ctnMonitor','.divMonitor').find('.iptName').show().focus();
         });

        $ctnMonitor.on('click','.spUnit',function(e){
            e.stopPropagation();
            $(e.currentTarget).hide();
            $(e.currentTarget).parentsUntil('.ctnMonitor','.divMonitor').find('.iptUnit').show().focus();
        });
         $ctnMonitor.on('click','.spPoint',function(e){
             e.stopPropagation();
            $(e.currentTarget).hide();
            $(e.currentTarget).parentsUntil('.ctnMonitor','.divMonitor').find('.iptPoint').show().focus();
         });        
        $ctnMonitor.off('blur').on('blur','input',function(e){
            var $divMonitor = $(e.currentTarget).parentsUntil('.ctnMonitor','.divMonitor');
            var index = $ctnMonitor.children().index($divMonitor);
            var value = $(e.currentTarget).val();
            if($(e.currentTarget).hasClass('iptName')){
                _this.tempOpt.option[index].name = value;
                if(!value)return;
                $(e.currentTarget).hide();
                $divMonitor.find('.spName').text(value).show();
            }else if($(e.currentTarget).hasClass('iptUnit')){
                _this.tempOpt.option[index].unit = value;
                if(!value)return;
                $(e.currentTarget).hide();
                $divMonitor.find('.spUnit').text(value).show();
            }else if($(e.currentTarget).hasClass('iptPoint')){
                _this.tempOpt.option[index].dpoint = value;
                if(!value)return;
                $(e.currentTarget).hide();
                $divMonitor.find('.spPoint').text(value).show();
            }
        });
        //类型判断
        $ctnMonitor.off('blur').on('blur','select',function(e){
            var $divMonitor = $(e.currentTarget).parentsUntil('.ctnMonitor','.divMonitor');
            var index = $ctnMonitor.children().index($divMonitor);
            var type = this.value;

            if($(e.currentTarget).hasClass('iptCol')){
                if(!type)return;
                _this.tempOpt.option[index].col = type;
            }else {
                _this.tempOpt.option[index].type = type;
                $(this).hide();
                $divMonitor.find(".spTypeShow").show().html(type);
            }
        });
        $ctnMonitor.on('click','.spTypeShow',function(e){
            var $divMonitor = $(this).parentsUntil('.ctnMonitor','.divMonitor');
            $(this).hide();
            $divMonitor.find(".spType").show();
        });

        $ctnMonitor[0].ondragenter = function(e){
            e.preventDefault();
        };
        $ctnMonitor[0].ondragover = function(e){
            e.preventDefault();
        };
        $ctnMonitor[0].ondragleave= function(e){
            e.preventDefault();
        };
        $ctnMonitor[0].ondrop= function(e){
            e.preventDefault();
            var dsItemId = EventAdapter.getData().dsItemId;
            if(!dsItemId)return;
            var $divValue = $(e.target).parentsUntil('.ctnMonitor','.divValue');
            if($divValue.length > 0){
                var index = $ctnMonitor.children().index($divValue.parentsUntil('.ctnMonitor','.divMonitor'));
                _this.tempOpt.option[index].dsId = dsItemId;
                $divValue[0].dataset.dsId = dsItemId;
                $divValue.find('.spValue').text(AppConfig.datasource.getDSItemById(dsItemId).alias).show();
                $divValue.find('.spValueTip').hide();
                _this.tempOpt.points = [];
                for (var i= 0 ;i < $ctnMonitor.find('.divValue').length; i++){
                    _this.tempOpt.points.push($ctnMonitor.find('.divValue')[i].dataset.dsId);
                }
            }
        };

    };

    return ModalMonitor;
})();



/**
 * dashboard html 图元模块
 * @description 
 * 在这个图元中，可以使用正常的 html、css 和 js 功能，
 * 除此之外，还有自定义的标签可以使用
 * @history
 * 2015-08-07 新增自定义标签 <LinkTo />
 * 2015-08-06 新增自定义标签 <DataSource />
 * 2015-08-05 初版完成，提供执行 htlm、css 和 js 的功能
 * 细节更改见 SVN
 */
(function() {
    // 自定义标签集合
    var tags = {};
    // 在这里定义需要的自定义标签按钮
    // 需要/不需要 某个自定义标签，在这里直接 增加/删除 即可
    var TOOLBOX = ['DataSource', 'LinkTo'];
    var PATTERN_STR = '<('+TOOLBOX.join('|')+').*?(/|'+TOOLBOX.join('|')+')>';
    // 存储图元需要的数据
    window.__spring_html_modal = {};
    
    // 运行指定的 js 脚本
    function runScript(content) {
        var done = false;
        var script = document.createElement("script");
        var head = document.getElementsByTagName("head")[0];
        script.type = "text\/javascript";
        script.text = content;
        head.appendChild(script);
        head.removeChild(script);
    } 

    // 空标签，仅作继承用
    tags.Base = (function() {
        function Base(modal) {
            // 放 toolBtn 的容器
            this.$textarea = modal.$textarea;
            this.$modalCt  = modal.$modalCt;
            this.$toolBtn  = null;
            this.init();
        }

        Base.prototype.init = function() {
            throw new Error('init 方法未被实现，不可直接调用');
        };

        Base.prototype.render = function($container) {
            throw new Error('render 方法未被实现，不可直接调用');
        };

        return Base;
    }() );

    // DataSource 标签
    // 用法
    // <DataSource [AttributeName=Value][ ,AttributeName=Value] />
    // 属性
    // data-id: 数据源的 id
    tags.DataSource = (function() {
        var _this;
        // 自定义 DataSource
        function DataSource(modal) {
            _this = this;
            tags.Base.call(this, modal);
        }

        DataSource.prototype = Object.create(tags.Base.prototype);
        DataSource.prototype.constructor = DataSource;

        DataSource.prototype.insertTpl = '<DataSource data-id="{id}"{linkTo}/>';

        /*-- @override --*/
        DataSource.prototype.init = function() {
            var arrHtml = [];

            this.$toolBtn = $('<button type="button" class="btn btn-default" data-toggle="collapse" data-target="#panelDataSourceConfig" aria-expanded="false">\
                DataSource\
                </button>');
            this.$toolConfig = $('#panelDataSourceConfig', this.$modalCt);

        };

        /*-- @override --*/
        DataSource.prototype.render = function($btnCtn) {
            $btnCtn.append(this.$toolBtn);
            this.attachEvents();
        };

        DataSource.prototype.attachEvents = function() {
        };

        /*-- @static --*/
        DataSource.save = function(dataset, modal) {
            var id;
            if(!dataset) return;

            id = dataset.id;
            if( id && modal.points.indexOf(id) === -1 ) modal.points.push(id);
        };

        DataSource.getStaticRender = function(dom) {
            var dataset = dom.dataset;
            var menuId = dataset.linkTo;
            var $ele;
            if(menuId) {
                $ele = $('<a href="javascript:;" data-is="DataSource" data-id="'+dataset.id+'">Loading</a>');
                $ele.click(function(e) {
                    var $ev =  $('#ulPages [pageid="'+ menuId +'"]');
                    if($ev[0].className !== 'nav-btn-a'){
                        $ev = $ev.children('a');
                        $ev.closest('.dropdown').children('a').trigger('click');
                    }
                    $ev.trigger('click');
                });
                return $ele;
            }
            else return $('<span data-is="DataSource" data-id="'+dataset.id+'">Loading</span>');
        };

        DataSource.getRealTimeRender = function($ele, map) {
            var dataset = $ele[0].dataset;
            if (isNaN(map[dataset.id])) {
                $ele.html( map[dataset.id] );
            } else {
                $ele.html( parseFloat(map[dataset.id]) );
            }
        };

        return DataSource;
    }() );

    tags.LinkTo = (function() {
        var _this;
        // 自定义标签 LinkTo
        function LinkTo(modal) {
            _this = this;
            tags.Base.call(this, modal);
        }

        LinkTo.prototype = Object.create(tags.Base.prototype);
        LinkTo.prototype.constructor = LinkTo;

        LinkTo.prototype.insertTpl = '<LinkTo data-id="{id}" ></LinkTo>';

        /*-- @override --*/
        LinkTo.prototype.init = function() {
            var arrHtml = [];

            this.$toolBtn = $('<button type="button" class="btn btn-default" data-parent="#collapseList" data-toggle="collapse" data-target="#panelLinkToConfig" aria-expanded="false">LinkTo</button>');
            this.$toolConfig = $('#panelLinkToConfig', this.$modalCt);
        };

        /*-- @override --*/
        LinkTo.prototype.render = function($btnCtn) {
            $btnCtn.append(this.$toolBtn);
            this.attachEvents();
        };

        LinkTo.prototype.attachEvents = function() {
        };

        /*-- @static --*/
        LinkTo.save = function(dataset, modal) {
            // 不需要做任何事
        };
        LinkTo.getStaticRender = function(dom, doc) {
            var dataset = dom.dataset;
            var menuId = dataset.id;

            doc = doc || window.document;
            $ele = $('<a href="javascript:;">'+(dom.innerHTML||'Link To')+'</a>', doc);
            $ele.click(function () {
                var $ev = $('#ulPages [pageid="' + menuId + '"]');
                if ($ev.length > 0) {
                    if ($ev[0].className !== 'nav-btn-a') {
                        $ev = $ev.children('a');
                        $ev.closest('.dropdown').children('a').trigger('click');
                    }
                    $ev.trigger('click');
                }
            });
            return $ele;
        };

        return LinkTo;
    }() );

    /*--------------------------------
     * ModalHtml 图元配置类定义
     --------------------------------*/
    var ModalHtmlConfig = (function() {
        var _this;

        // 存储当前页面所有可链接的menu的html
        var gMenusHtml;

        function ModalHtmlConfig(options) {
            _this = this;

            ModalConfig.call(this, options);

            this.toolbox = [];
        }

        ModalHtmlConfig.prototype = Object.create(ModalConfig.prototype);
        ModalHtmlConfig.prototype.constructor = ModalHtmlConfig;

        ModalHtmlConfig.prototype.DEFAULTS = {
            htmlUrl: '/static/views/observer/widgets/modalHtmlConfig.html'
        };

        // @override
        ModalHtmlConfig.prototype.init = function() {
            this.$modal          = $('.modal', this.$wrap);
            this.$modalCt        = $('.modal-content', this.$wrap);
            this.$formWrap       = $('.form-wrap', this.$wrap);
            this.$dsGroupList    = $('.form-horizontal', '#panelDataSourceConfig');
            this.$linkGroupList  = $('.form-horizontal', '#panelLinkToConfig');
            this.$textarea       = $('.form-textarea', this.$formWrap);
            this.$btnSubmit      = $('.btn-submit', this.$wrap);
            this.$toolboxCtn     = $('.toolbox-ctn', this.$formWrap);
            
            this.$btnResizeFull  = $('.btn-resize-full', this.$wrap);
            this.$btnResizeSmall = $('.btn-resize-small', this.$wrap);

            this.attachEvents();

            // 初始化 toolbox
            this.initToolbox();
        };

        ModalHtmlConfig.prototype.initToolbox = function() {
            // 这里可以添加 分组逻辑
            var $toolboxGroup = $('<div class="btn-group" role="group">')
                .appendTo(this.$toolboxCtn);
            TOOLBOX.forEach(function(row) {
                var labelClass = tags[row];
                var labelIns;
                // 验证自定义标签类是否可用
                if (typeof labelClass !== 'function') {
                    console.warn(I18n.resource.dashboard.modalJumpPages.NO_LABLE + row);
                    return;
                }

                labelIns = new labelClass(_this);
                labelIns.render($toolboxGroup);
            });

            var $tools = $('.btn', $toolboxGroup);
            $toolboxGroup.on('click', '.btn', function() {
                $(this).toggleClass('btn-primary');
            });
        };

        // @override
        ModalHtmlConfig.prototype.recoverForm = function(form) {
            var _this = this;
            var options;
            if(!form || !form.option) {
                // 额外新增一行空白行
                this.addDsFormGroup();
                return;
            }
            options = form.option;

            // 设置用户数据源配置
            var arrId = [];
            form.points.forEach(function (row) {
                arrId.push(row);
            });
            var arrItem = AppConfig.datasource.getDSItemById(arrId);
            form.points.forEach(function (row) {
                for (var m = 0; m < arrItem.length; m++) {
                    if (row == arrItem[m].id) {
                        var $ele = _this.addDsFormGroup({
                            id: row,
                            cls: ' dropped',
                            value: row,
                            name: arrItem[m].alias || '未找到名称',
                            display: 'inline'
                        });
                        break;
                    }
                }
            });
            // 额外新增一行空白行
            this.addDsFormGroup();

            // 设置 html 文本
            this._setField('textarea', this.$textarea, options.html);
        };

        // @override
        ModalHtmlConfig.prototype.reset = function () {
            this.$dsGroupList.empty();
            this._setField('textarea', this.$textarea);
        };

        ModalHtmlConfig.prototype.addDsFormGroup = function (data) {
            if(data === undefined) {
                data = {
                    id: I18n.resource.dashboard.modalJumpPages.PARAM_INTRO,
                    cls: '',
                    value: '',
                    name: '<span class="glyphicon glyphicon-plus"></span>'
                }
            }
            return $('<div class="form-group{cls}">\
                <label class="col-md-2 control-label" for="">Point</label>\
                <div class="col-md-4">\
                    <div class="label-area div-ds-id">{id}</div>\
                </div>\
                <div class="col-md-4">\
                    <div class="drop-area div-ds-point" data-value="{value}">\
                        {name}\
                    </div>\
                </div>\
                <div class="col-md-2">\
                    <div class="opt-icon-area">\
                        <span class="glyphicon glyphicon-remove"></span>\
                    </div>\
                </div>\
            </div>'.formatEL(data)).appendTo(_this.$dsGroupList);
        };

        ModalHtmlConfig.prototype.initLinkFormGroup = function () {
            var arrHtml = [];
            // 填充 "链接到" 列表
            for (var i in AppConfig.menu) {
                if (!AppConfig.menu.hasOwnProperty(i)) continue;
                
                arrHtml.push('<div class="form-group">\
                    <label class="col-md-2 control-label" for="">Link</label>\
                    <div class="col-md-4">\
                        <div class="label-area">{id}</div>\
                    </div>\
                    <div class="col-md-4"><div class="label-area">{name}</div></div>\
                </div>'.formatEL({
                    id: i,
                    name: AppConfig.menu[i]
                }));
            }

            return this.$linkGroupList.html(arrHtml.join(''));
        };

        ModalHtmlConfig.prototype.onDropActionPerformed = function (e) {
            $(e.target).removeClass('on');
            var itemId = EventAdapter.getData().dsItemId;
            var isNotShowMsg = true;
            if (Object.prototype.toString.call(itemId) === '[object Array]') {
                var len = itemId.length;
                for (var i = 0; i < len; i++) {
                    addPointDrag(itemId[i]);
                }
            } else {
                addPointDrag(itemId);
            }
            if (isNotShowMsg) {
                alert(I18n.resource.dashboard.modalJumpPages.DATA_EXIST);
                return false;
            }
            function addPointDrag(itemId) {
                var $target = $('.drop-area[data-value=""]');
                _this._setField('droparea', $target, itemId);
                var dsId = $target[0].dataset.value;
                var $formGroup = $target.closest('.form-group');
                if (_this.$dsGroupList.find('[data-value="' + dsId + '"]').length > 1) {
                    _this._setField('droparea', $formGroup.find('.drop-area'));
                    //if (isNotShowMsg) {
                    //    alert(I18n.resource.dashboard.modalJumpPages.DATA_EXIST);
                    //}
                    //return false;
                } else {
                    // 显示删除按钮
                    $formGroup.addClass('dropped');
                    // 显示引用变量名
                    $formGroup.find('.label-area').text(dsId);
                    isNotShowMsg = false;
                    _this.addDsFormGroup();
                }
            }

            e.stopPropagation();
        };

        ModalHtmlConfig.prototype.attachEvents = function () {
            var _this = this;

            ///////////////////////
            // modal show EVENTS //
            ///////////////////////
            this.$modal.on('show.bs.modal', function () {
                _this.initLinkFormGroup();
            });

            /////////////////
            // drop EVENTS //
            /////////////////
            //this.$wrap.on('drop', '.drop-area', function (e, isNotShowMsg) {
            //    var $this = $(this);
            //    var dsId = $this[0].dataset.value;
            //    var $formGroup = $this.closest('.form-group');

            //    if (_this.$dsGroupList.find('[data-value="'+dsId+'"]').length > 1) {
            //        _this._setField('droparea', $formGroup.find('.drop-area'));
            //        if(!isNotShowMsg){
            //            alert(I18n.resource.dashboard.modalJumpPages.DATA_EXIST);
            //        }
            //        return false;
            //    } else {
            //        // 显示删除按钮
            //        $formGroup.addClass('dropped');
            //        // 显示引用变量名
            //        $formGroup.find('.label-area').text(dsId);
            //    }

            //    _this.addDsFormGroup();

            //    e.stopPropagation();
            //});

            //////////////////////////////
            // datasource delete EVENTS //
            //////////////////////////////
            this.$wrap.on('click', '.opt-icon-area', function (e) {
                $(this).closest('.form-group').remove();
            });

            ///////////////////
            // resize EVENTS //
            ///////////////////
            this.$btnResizeFull.off().click(function() {
                var height = _this.$modal.height();
                _this.$modal.addClass('maxium-screen');
                _this.$textarea.height(height-208);
            });

            this.$btnResizeSmall.off().click(function() {
                _this.$modal.removeClass('maxium-screen');
                _this.$textarea.height('auto');
            });

            ///////////////////
            // submit EVENTS //
            ///////////////////
            this.$btnSubmit.off().click( function(e) {
                var modalIns = _this.options.modalIns;
                var modal = modalIns.entity.modal;
                var form = {};
                var html;
                var toolboxStr, pattern, match;

                html = form.html = _this.$textarea.val();

                // 初始化 points
                modal.points = [];

                // 获取用户配置的数据源 id 列表
                _this.$dsGroupList.find('.dropped .drop-area').each(function () {
                    modal.points.push($(this)[0].dataset.value);
                });

                // 开始对文本进行处理
                // 复杂的逻辑要开始了 w(ﾟДﾟ)w 伸爪
                // 匹配自定义标签
                toolboxStr = TOOLBOX.join('|');
                // 该正则表达式存在的问题
                // 1、未处理空格
                // 2、会出现自定义标签的穿插匹配，如匹配到 <custom1></custom2>
                // 3、欢迎补充
                pattern = new RegExp(PATTERN_STR, 'ig');
                while ( (match = pattern.exec(html)) !== null ) {
                    // match[0] - tagStr
                    // match[1] - tagName
                    try {
                        // 如果匹配到了自定义标签
                        var dom = $(match[0])[0];
                    } catch(e) {
                        // 如果不是一个合法的自定义标签
                        // 则不处理
                        continue;
                    }

                    // 自定义标签的 save 行为处理
                    tags[match[1]].save(dom.dataset, modal);
                }

                // 以上是老版本的数据源提取逻辑，下面是新版本的数据源提取逻辑
                // 为 <%数据源id%> 的形式添加数据源提取逻辑
                pattern = new RegExp('<%([^,<>%]+).*?%>', 'mg');
                while ( (match = pattern.exec(html)) !== null ) {
                    if (modal.points.indexOf(match[1]) === -1) {
                        modal.points.push(match[1]);
                    }
                }

                // save to modal
                modal.option = form;
                modal.dsChartCog = [{accuracy: 2}];
                modal.interval = 60000;

                // close modal
                _this.$modal.modal('hide');
                // preview the modification
                modalIns.preview();

                e.preventDefault();
            } );

            this.$textarea[0].addEventListener("dragover", function(event) {
                event.preventDefault();
            });
            this.$textarea[0].addEventListener("drop", function(event) {
                event.preventDefault();
                var itemId = EventAdapter.getData().dsItemId;
                if (Object.prototype.toString.call(itemId) === '[object Array]') {
                    var len = itemId.length;
                    for (var i = 0; i < len; i++) {
                        dotIsExist(itemId[i]);
                    }
                } else {
                    dotIsExist(itemId);
                }
                function dotIsExist(itemId) {
                    var dropAreaList = $('.drop-area', _this.$wrap);
                    var lens = dropAreaList.length;
                    var isExist = false;
                    for (var j = 0; j < lens; j++) {
                        if (dropAreaList.eq(j).attr('data-value') === itemId) {
                            isExist = true;
                        }
                    }
                    if (!isExist) {
                        var text = '<%' + itemId + '%>';
                        insertText(event.target, text);
                    } else {
                        return false;
                    }
                }
                _this.$wrap.find('.drop-area[data-value=""]').trigger('drop', true);
            });

            //在光标位置插入拖入的数据源
            function insertText(obj,str) {
                if (typeof obj.selectionStart === 'number' && typeof obj.selectionEnd === 'number') {
                    var startPos = obj.selectionStart,
                        endPos = obj.selectionEnd,
                        cursorPos = startPos,
                        tmpStr = obj.value;
                    obj.value = tmpStr.substring(0, startPos) + str + tmpStr.substring(endPos, tmpStr.length);
                    cursorPos += str.length;
                    obj.selectionStart = obj.selectionEnd = cursorPos;
                } else {
                    obj.value += str;
                }
            }

        };

        return ModalHtmlConfig;
    } ());

    /*--------------------------------
     * ModalHtml 图元类定义
     --------------------------------*/
    this.ModalHtml = (function(ToolTipMixin) {
        function ModalHtml(screen, entityParams) {
            ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
            // 用于使 update 方法始终运行于 render 之后
            // firstUpdateData 用于存储第一次 update 时，传递过来的数据（如果 update 先执行的话）
            this.promise = $.Deferred();
            this.firstUpdateData = null;
            // 用于记录上一次的更新时间
            this.lastUpdateTimeTick = null;
            // 自定义标签 map
            // 例：{'DataSource': ..., 'LinkTo': ...}
            this.customTags = {};

            this.initCustomVaribles();
        }

        ModalHtml.prototype = Object.create(ModalBase.prototype);
        ModalHtml.prototype.constructor = ModalHtml;

        // 扩展
        ModalHtml.prototype = Mixin(ModalHtml.prototype, ToolTipMixin);

        ModalHtml.prototype.optionTemplate = {
            name:'toolBox.modal.MODAL_HTML',
            parent:0,
            mode:'custom',
            maxNum: 10,
            title:'',
            minHeight:1,
            minWidth:2,
            maxHeight:6,
            maxWidth:12,
            defaultHeight:4.5,
            defaultWidth:3,
            type:'ModalHtml',
            tooltip: {
                'imgPC': false,
                'imgMobile': false,
                'isSpecData':false,
                'desc': ''
            }
        };

        ModalHtml.prototype.initCustomVaribles = function () {
            var container = this.container;
            var screen;
            // 自定义回调事件
            window.__spring_html_modal[this.entity.id] = this.customVaribles = {};
            // 将 modal 数据存入
            this.customVaribles.widgetModal = this.entity.modal;
            // 将被包裹的容器对象存入
            this.customVaribles._wrapContainer = document.querySelector('#divContainer_'+this.entity.id);
            // 初始化一些自定义变量
            this.customVaribles.dataMap = {};
            // 点击的data-link-params的值保存到this.customVaribles
            var arrParams = window.location.hash.split('&');
            if(arrParams && arrParams.length> 0){//arrParams.indexOf('response=') > -1
                for(var i = 0; i < arrParams.length; i++){
                    if(arrParams[i].indexOf('response=') > -1){
                        this.customVaribles.dataParams = arrParams[i];
                    }
                }
            }
            // 初始化一些内置方法
            // linkTo: 跳转到指定页面
            this.customVaribles.linkTo = function (menuId, ctnSelector, linkType, linkName, linkParams) {
                var $ev, ctn;

                // 兼容以往的跳转方式
                if (!ctnSelector && !linkType) {
                    $ev =  $('#ulPages [pageid="'+ menuId +'"]');
                    if ($ev.length > 0) {
                        if ($ev[0].className !== 'nav-btn-a'){
                            $ev = $ev.children('a');
                            $ev.closest('.dropdown').children('a').trigger('click');
                        }
                        if (linkParams) {
                            $ev.trigger('click', [{response:linkParams}]);
                        } else {
                            $ev.trigger('click');
                        }
                        return;
                    }
                }

                // 如果是链接到容器
                if(ctnSelector) {
                    // 如果需要限制为在本容器中查找，写成如下方式即可
                    // container.querySelector(ctnSelector);
                    ctn = document.querySelector(ctnSelector);
                    // 不存在此容器，不做任何事
                    if(!ctn) return;

                    // 初始化 dashboard
                    ctn.innerHTML = '';
                    if(screen) {
                        screen.close();
                        screen = null;
                    }
                }

                linkType = linkType || 'EnergyScreen';
                switch(linkType) {
                    case 'EnergyScreen_M':
                    case 'EnergyScreen':
                        if(!ctn) {
                            if(!AppConfig.isMobile) {
                                ScreenManager.show(EnergyScreen, menuId);
                            }else{
                                var isIndex = linkType == 'EnergyScreen_M';
                                router.to({
                                    typeClass: ProjectDashboard,
                                    data: {
                                        menuId:menuId,
                                        isIndex:isIndex,
                                        name:linkName
                                    }
                                })
                            }
                        } else {
                            screen = new EnergyScreen();
                            screen.id = menuId;
                            screen.container = ctn;
                            screen.isForBencMark = true;
                            screen.init();
                        }
                        break;
                    case 'ObserverScreen':
                        if(!ctn) {
                            ScreenManager.goTo({
                                page: linkType,
                                id: menuId
                            });
                        } else {
                            screen = new ObserverScreen(menuId);
                            ctn.innerHTML = '<div class="divMain" style="width: 100%; height: 100%;">\
                                    <div class="div-canvas-ctn" style="padding: 0; margin: 0 auto; height: 100%; width: 100%;">\
                                        <canvas class="canvas-ctn" style="width: 100%; height: 100%;">浏览器不支持</canvas>\
                                    </div>\
                                    <div id="divObserverTools" style="height: 0"></div>\
                                </div>';
                            screen.isInDashBoard = true;
                            screen.show(ctn);
                        }
                        break;
                    case 'FacReportScreen':
                        if (!ctn) {
                            ScreenManager.goTo({
                                page: 'observer.screens.FacReportScreen',
                                options: {
                                    id: menuId
                                },
                                container: 'indexMain'
                            });
                        }
                        break;
                    case 'FacReportWrapScreen':
                        if (!ctn) {
                            if(AppConfig.isMobile){
                                router.to(
                                    {
                                        typeClass: MessageFactoryReport,
                                        data: {
                                        }
                                    }
                                )
                            }else {
                                ScreenManager.goTo({
                                    page: 'observer.screens.FacReportWrapScreen',
                                    options: {
                                        id: menuId
                                    },
                                    container: 'indexMain',
                                    response: linkParams
                                });
                            }
                        }
                        break;
                    // 系统诊断
                    case 'DiagnosisScreen':
                        // 系统诊断目前不支持在特定容器中显示
                        if (!ctn) {
                            ScreenManager.goTo({
                                page: linkType,
                                options: {
                                    defaultMenuId: menuId
                                }
                            });
                        }
                        break;
                    // 不识别的类型不做处理
                    default: return;
                }
            };
        };

        ModalHtml.prototype.initCustomTags = function(doc) {
            var _this = this;
            doc = doc || document;
            // 处理自定义标签
            TOOLBOX.forEach(function(row, i) {
                var $tagEle = $(row, doc);
                var thisTags = [];
                var staticHtmlRender;

                if(!$tagEle.length) return;
                if( typeof (staticHtmlRender = tags[row].getStaticRender) !== 'function' ) return;

                ([]).forEach.call($tagEle, function(rowt, t) {
                    var $rs = staticHtmlRender(rowt);
                    if(!$rs) return;
                    thisTags.push($rs);
                    $(rowt).replaceWith($rs);
                });

                if(thisTags.length) _this.customTags[row] = thisTags;
            });
        };

        ModalHtml.prototype.initCustomAttrs = function () {
            var _this = this;
            var $container = $(this.container);

            $container.on('click', '[data-link-to]', function (e) {
                var linkType = this.dataset['linkType'];
                var ctnSelector = this.dataset['linkTarget'];
                var menuId = this.dataset['linkTo'];
                var linkName = this.dataset['linkName'];
                var linkParams = this.dataset['linkParams'];
                try{
                    linkParams = JSON.parse(linkParams);
                }catch (e){}
                // 跳转
                _this.customVaribles.linkTo(menuId, ctnSelector, linkType, linkName, linkParams);
                e.preventDefault();
            });
        };

        ModalHtml.prototype._parseOptionStr = function (optionStr) {
            var arr = optionStr.split(',');
            var opt = {};

            arr.forEach(function (kv) {
                var kvArr = kv.split('=');
                if( kvArr.length === 1 ) {
                    opt[kv] = 'true';
                } else {
                    opt[kvArr[0]] = kvArr[1];
                }
            });

            return opt;
        };

        ModalHtml.prototype._formatNumber = function (num, options) {
            var rs = '';
            var toString = Object.prototype.toString;
            var decimalPortion;
            var numstr, isNegative;

            if( isNaN(num) ) return num;
            num = parseFloat(num);
            isNegative = num < 0;
            // 去除负号
            num = Math.abs(num);

            // 处理小数精度
            if( !isNaN(options.p) ) {
                options.p = parseInt(options.p);
                num = num.toFixed(options.p);
            }

            // 小数部分不考虑
            decimalPortion = (num + '').split('.')[1] || '';
            num = parseInt(num);

            // 处理千分位字符
            if(options.ts === 'true') {
                numstr = num + '';
                while( numstr.length > 3 ) {
                    rs = ',' + numstr.substr(-3, 3) + rs;
                    numstr = numstr.substr(0, numstr.length - 3);
                }
                rs = numstr + rs;
            } else {
                rs = num + '';
            }

            rs = decimalPortion === '' ? rs : (rs + '.' + decimalPortion);
            // 结果为0，不管是否负数，不需要返回负号
            if (parseFloat(rs) === 0) { return rs; }

            // 处理负号
            return (isNegative ? '-' : '') + rs;
        };

        ModalHtml.prototype._formatNode = function (node, options, params) {
            var domWrap;

            // 如果已经包裹过，则不再包裹
            if (options.draggable && !node.parentNode.dataset.h5DraggableNode) {
                domWrap = document.createElement('span');
                domWrap.draggable = 'true';
                domWrap.dataset.h5DraggableNode = 'true';
                domWrap.dataset.dsId = params.dsId || '';
                node.parentNode.insertBefore(domWrap, node);
                domWrap.appendChild(node);
            }
        };

        ModalHtml.prototype.setToolTip = function (node, params){
            var domWrap;
            if (node.parentNode.dataset.h5DraggableNode === 'true'){
                domWrap =  node.parentNode;
            } else {
                domWrap = document.createElement('span');
                domWrap.dataset.dsId = params.dsId || '';
                domWrap.dataset.h5DraggableNode = 'true';
                node.parentNode.insertBefore(domWrap, node);
                domWrap.appendChild(node);
            }
            this.initTooltip({
                shape: domWrap,
                ds: params.dsId,
                container: this.screen.container,
                clickable: AppConfig.isFactory === 0
            });
        };

        ModalHtml.prototype.buildDsBinding = function() {
            var _this = this;
            var dataMap = this.customVaribles.dataMap = {};
            var $container = $(this.container);
            var ds = dataMap;
            var textNodeMap = {}, attrNodeMap = {};
            var dsNameList = this.entity.modal.points;
            var $textNodes = $container.find('.text-node-placeholder');
            var $attrNodes = $container.find('[data-inner-ds-info]');

            dsNameList.forEach(function(name) {
                var $nodes;

                /** 数据源在文本节点中使用 */
                if( ($nodes = $textNodes.filter('[data-name^="'+name+'"]')).length ) {
                    $nodes.each(function () {
                        var nodeDataName = $(this).attr('data-name');
                        if (nodeDataName.split(',')[0] !== name) return;
                        var text = document.createTextNode('');
                        if(!textNodeMap[name]) {
                            textNodeMap[name] = [{
                                name: this.getAttribute('data-name'),
                                node: text
                            }];   
                        } else {
                            textNodeMap[name].push({
                                name: this.getAttribute('data-name'),
                                node: text
                            });
                        }
                        this.parentNode.replaceChild(text, this);
                    });
                } else {
                    textNodeMap[name] = [];
                }

                /** 数据源在属性节点中使用 */
                if( ($nodes = $attrNodes.filter('[data-inner-ds-info*="'+name+'"]')).length ) {
                    $nodes.each(function () {
                        var $this = $(this);
                        var attr = $this.data('ds.attr');
                        var info = $this.data('ds.info');

                        if(attr === undefined) {
                            $this.data('ds.attr', (attr = this.getAttribute('data-inner-ds-attr')) );
                        }
                        if(info === undefined) {
                            info = window.decodeURIComponent(this.getAttribute('data-inner-ds-info') );
                            $this.data('ds.info', (info = JSON.parse(info)) );
                        }

                        if(!attrNodeMap[name]) {
                            attrNodeMap[name] = [{
                                node: this.getAttributeNode(attr),
                                info: info
                            }]
                        } else {
                            attrNodeMap[name].push({
                                node: this.getAttributeNode(attr),
                                info: info
                            });
                        }
                    });
                } else {
                    attrNodeMap[name] = [];
                }

                if(!ds.__observerProps) ds.__observerProps = {};
                if(!ds.__observerProps.hasOwnProperty(name)) {
                    ds.__observerProps[name] = null;
                    Object.defineProperty(ds, name, {
                        get: function () {
                            return this.__observerProps[name];
                        },
                        set: function (value) {
                            if(value === this.__observerProps[name]) return;
                            this.__observerProps[name] = value;
                            // 更新对应的 text node
                            textNodeMap[name].forEach(function (row) {
                                var content = row.name;
                                var node = row.node;
                                var idx = content.indexOf(',');
                                var options;

                                if(idx > -1) {
                                    options = _this._parseOptionStr( content.substr(idx+1) );
                                    node.data = _this._formatNumber(value, options);
                                    _this._formatNode(node, options, {
                                        dsId: content.substr(0, idx)
                                    });
                                } else {
                                    node.data =  isNaN(value) ? _this._decodeHtml(value) : parseFloat(value).toString();
                                }

                                if(!isNaN(value) && !AppConfig.isMobile) {
                                    _this.setToolTip(node, {
                                        dsId: idx > -1 ? content.substr(0, idx) : content
                                    });
                                }
                            });
                            attrNodeMap[name].forEach(function (row) {
                                var info = row.info;
                                var str = '';

                                info.forEach(function (row) {
                                    var idx;

                                    if(row.type === TextTemplateParser.types.text) {
                                        str += row.value;
                                    } else if(row.type === TextTemplateParser.types.binding) {
                                        if( row.value.indexOf(name) > -1 ) {
                                            idx = row.value.indexOf(',');
                                            if(idx > -1) {
                                                row.content = _this._formatNumber( value, _this._parseOptionStr(row.value.substr(idx+1)) );
                                            } else {
                                                row.content = isNaN(value) ? value : parseFloat(value).toString();
                                            }
                                        }
                                        str += row.content;
                                    }
                                });
                                row.node.value = str;
                            });
                        }
                    });
                }
            });

            // 删除不需要的属性
            $attrNodes.each(function () {
                this.removeAttribute('data-inner-ds-info');
                this.removeAttribute('data-inner-ds-attr');
            });
        };

        ModalHtml.prototype._decodeHtml = function (html) {
            var txt = document.createElement("textarea");
            txt.innerHTML = html;
            return txt.value;
        };

        // 需要实例化的接口
        ModalHtml.prototype.renderModal = function() {
            var _this = this;
            var options = this.entity.modal.option;
            var info;
            var parser = TextTemplateParser;

            if(!options) {
                $(this.container).html('');
                this.spinner.stop();
                return;
            }
            info = this.getFormatHtml(options.html);

            // $0: 属性+值
            // $1: 属性名
            // $2: 属性值
            info.html = info.html.replace(/([\w-]+?)="([^"]*<%[^<>]+?%>[^"]*)"/mg, function ($0, $1, $2) {
                var tokens = parser.parse($2, ['<%', '%>']);
                var infoStr;
                tokens.forEach(function (row) {
                    if(row.type === parser.types.binding) {
                        row.content = '';
                    }
                });
                infoStr = window.encodeURIComponent(JSON.stringify(tokens));

                return $1+'="" data-inner-ds-info="'+infoStr+'" data-inner-ds-attr="'+$1+'"';
            });
            // 整理出数据源的数据
            info.html = info.html.replace(/<%(.+?)%>/mg, function($0, $1) {
                return '<span class="text-node-placeholder" data-name="'+$1+'">'+$1+'</span>';
            });

            $(this.container).html( info.html );
            runScript(info.scriptContent);

            // 初始化自定义标签
            _this.initCustomTags();
            _this.initCustomAttrs();
            _this.buildDsBinding();

            // onRenderComplete
            if( typeof _this.customVaribles.onRenderComplete === 'function' ) {
                _this.customVaribles.onRenderComplete.call(null);
            }

            // 开始执行 update 方法
            _this.promise.done(function(data) {
                if(!data) return;
                _this.updateModal(data);
            });
            _this.promise.resolve(_this.firstUpdateData);

            _this.spinner.stop();
        };

        // 需要实例化的接口
        ModalHtml.prototype.updateModal = function(data) {
            var _this = this;
            var modal, updateInterval, options, now;
            var thisTags;
            var dataMap = this.customVaribles.dataMap;
            var customEventHandlers;
            
            // 如果 render 方法没有执行完，则不执行
            if( this.promise.state() === 'pending') {
                this.firstUpdateData = data;
                return;
            }

            modal = this.entity.modal;
            updateInterval = modal.interval;
            options = this.entity.options;
            nowTick = new Date().valueOf();
            
            // 判断是否到达更新时间
            //if( this.lastUpdateTimeTick && (nowTick - this.lastUpdateTimeTick) < updateInterval ) return;
            //this.lastUpdateTimeTick = nowTick;

            // 将 data 转换成 map 格式
            data.forEach(function(row) {
                dataMap[row.dsItemId] = row.data;
            });

            // 开始更新自定义标签
            for(var tagName in this.customTags) {
                if( !this.customTags.hasOwnProperty(tagName) ) continue;
                thisTags = this.customTags[tagName];

                thisTags.forEach(function($row, i) {
                    var handler = tags[tagName].getRealTimeRender;
                    if( typeof handler !== 'function' ) return;
                    handler($row, dataMap);
                });
            }

            // 回调处理
            // onUpdateComplete
            if( typeof this.customVaribles.onUpdateComplete === 'function' ) {
                this.customVaribles.onUpdateComplete.call(null, dataMap);
            }

        };

        // 需要实例化的接口
        ModalHtml.prototype.showConfigMode = function() {};

        ModalHtml.prototype.showConfigModal = function(container, options) {
            this.configModal.setOptions({modalIns: this});
            this.configModal.show();
        };
        
        // 放在 prototype 中的原因是：所有的同类型模块公用一个配置模块
        ModalHtml.prototype.configModal = new ModalHtmlConfig();

        ModalHtml.prototype.getFormatHtml = function(html) {
            var _this = this;
            var patternScript = /(<script\b[^>]*>)([\s\S]*?)(<\/script>)/img;
            // var patternStyle = /<style\b[^>]*>([\s\S]*?)<\/style>/img;
            // var patternLink = /<link\b[^>]*?>/img;
            var scriptContent = [];
            // var styleTags = [];
            // var linkTags = [];

            var wrapTpl = '(function() { |code| }).call(window.__spring_html_modal[\''+_this.entity.id+'\'])';
            // script 标签处理
            var formatHtml = html.replace(patternScript, function($0, $1, $2, $3) {
                if( $2.trim() !== '') scriptContent.push( $2 );
                return '';
            });

            return {
                scriptContent: wrapTpl.replace( '|code|', scriptContent.join(';\n') ),
                html: formatHtml
            };
            // style 标签处理
            // html.replace(patternStyle, function($0, $1) {
            //     styleTags.push();
            //     return '';
            // });
        };

        ModalHtml.prototype.preview = function () {};

        ModalHtml.prototype.close = function() {
            this.container.innerHTML = '';
        };

        return ModalHtml;
    }(namespace('mixins.TooltipMixin')));

    var TextTemplateParser = (function() {
        function TextTemplateParser() {}

        TextTemplateParser.types = {
            text: 0,
            binding: 1
        };

        TextTemplateParser.parse = function(template, delimiters) {
            var index, lastIndex, lastToken, length, substring, tokens, value;
            tokens = [];
            length = template.length;
            index = lastIndex = 0;

            while (lastIndex < length) {
                index = template.indexOf(delimiters[0], lastIndex);
                if (index < 0) {
                    tokens.push({
                        type: this.types.text,
                        value: template.slice(lastIndex)
                    });
                    break;
                } else {
                    if (index > 0 && lastIndex < index) {
                        tokens.push({
                            type: this.types.text,
                            value: template.slice(lastIndex, index)
                        });
                    }
                    lastIndex = index + delimiters[0].length;
                    index = template.indexOf(delimiters[1], lastIndex);
                    if (index < 0) {
                        substring = template.slice(lastIndex - delimiters[0].length);
                        lastToken = tokens[tokens.length - 1];
                        if ((lastToken !== undefined ? lastToken.type : void 0) === this.types.text) {
                            lastToken.value += substring;
                        } else {
                            tokens.push({
                                type: this.types.text,
                                value: substring
                            });
                        }
                        break;
                    }
                    value = template.slice(lastIndex, index).trim();
                    tokens.push({
                        type: this.types.binding,
                        value: value
                    });
                    lastIndex = index + delimiters[1].length;
                }
            }
            return tokens;
        };

        return TextTemplateParser;
    }());

}).call(this);
var ModalChartCustomConfig = (function ($, window, undefined) {

    function ModalChartCustomConfig(options) {
        ModalConfig.call(this, options);
        this.m_bIsRealTime = true;
        this.m_bIsHisFixCycle = true;
    }

    ModalChartCustomConfig.prototype = Object.create(ModalConfig.prototype);
    ModalChartCustomConfig.prototype.constructor = ModalChartCustomConfig;

    ModalChartCustomConfig.prototype.DEFAULTS = {
        htmlUrl: '/static/views/observer/widgets/modalChartCustom.html'
    };

    ModalChartCustomConfig.prototype.init = function () {
        var _this = this;
        _this.$btnSubmit = $('#btnSubmit', _this.$wrap);
        _this.$editor = $('#editor', _this.$wrap);
        _this.$selectMode = $('#inputMode', _this.$wrap);
        _this.$selRealInterval = $('#selRealInterval', _this.$wrap);
        _this.$tmStart = $('#timeStart', _this.$wrap);
        _this.$tmEnd = $('#timeEnd', _this.$wrap);
        _this.$tmGroup = $('#rangeSel', _this.$wrap);

        _this.$divRealtmCycle = $('#divRealTimeCycle', _this.$wrap);
        _this.$selectHisCycleMode = $('#hisCycleMode', _this.$wrap);
        _this.$selectHisInterval = $('#selHisInterval', _this.$wrap);
        _this.$divHisTmRange = $('#historyTmRange', _this.$wrap);
        _this.$divHisTmCycle = $('#historyTmCycle', _this.$wrap);
        _this.$inputPeriodVal = $('#inputPeriodValue', _this.$wrap);
        _this.$selPeriUnit = $('#inputPeriodUnit', _this.$wrap);

        var modal = _this.options.modalIns.entity.modal;

        EventAdapter.on($(_this.$editor[0]), 'drop', function(e) {
            e.preventDefault();
            this.focus();
            var itemId = EventAdapter.getData().dsItemId;
            if (Boolean(itemId)) {
                 if (Object.prototype.toString.call(itemId) === '[object Array]') {
                    var len = itemId.length;
                    for (var i = 0; i < len; i++) {
                        var itemName = AppConfig.datasource.getDSItemById(itemId[i]).alias;
                        //var spanCtl = $('<span id="' + itemId[i] + '" title="' + itemName + '" class="pointValue"></span>');
                        //spanCtl.text('"<%' + itemName + '%>"');
                        dropTextInter(itemId[i], itemName);
                    }
                } else {
                    var itemName = AppConfig.datasource.getDSItemById(itemId).alias;
                    //var spanCtl = $('<span id="' + itemId + '" title="' + itemName + '" class="pointValue"></span>');
                    //spanCtl.text('"<%' + itemName + '%>"');
                    dropTextInter(itemId, itemName);
                }
                function dropTextInter(itemId, itemName) {
                    var spanCtl = $('<span id="' + itemId + '" title="' + itemName + '" class="pointValue"></span>');
                    spanCtl.text('"<%' + itemName + '%>"');

                    var sel, range;
                    if (window.getSelection) {
                        sel = window.getSelection();
                        if (sel.getRangeAt && sel.rangeCount) {
                            range = sel.getRangeAt(0);
                            range.deleteContents();

                            var insertDiv = $('<div>');
                            insertDiv.append('&nbsp;');
                            insertDiv.append(spanCtl);
                            insertDiv.append('&nbsp;');
                            var el = insertDiv[0];
                            var frag = document.createDocumentFragment(), node, lastNode;
                            while ((node = el.firstChild)) {
                                lastNode = frag.appendChild(node);
                            }
                            range.insertNode(frag);
                            if (lastNode) {
                                range = range.cloneRange();
                                range.setStartAfter(lastNode);
                                range.collapse(true);
                                sel.removeAllRanges();
                                sel.addRange(range);
                            }
                        }
                    }
                    _this.$editor.append('&nbsp;');
                }
            }
        });
        EventAdapter.on($(_this.$editor[0]), 'dragover', function (e) {
            e.preventDefault();
        });

        if (Boolean(modal.option)) {
            if (!modal.option.isRealTime) {
                _this.m_bIsRealTime = false;
                _this.$selectMode.val('history');
                _this.$tmGroup.css('display', 'block');
                _this.$divRealtmCycle.css('display', 'none');
            }
            else {
                _this.m_bIsRealTime = true;
                _this.$selectMode.val('realTime');
                _this.$tmGroup.css('display', 'none');
                _this.$divRealtmCycle.css('display', 'block');
            }

            if (!modal.option.isHisFixCycle) {
                _this.m_bIsHisFixCycle = false;
                _this.$selectHisCycleMode.val('recent');
                _this.$divHisTmRange.css('display', 'none');
                _this.$divHisTmCycle.css('display', 'block');
            }
            else {
                _this.m_bIsHisFixCycle = true;
                _this.$selectHisCycleMode.val('fixed');
                _this.$divHisTmRange.css('display', 'block');
                _this.$divHisTmCycle.css('display', 'none');
            }

            switch (modal.interval) {
                case 'm1':
                case 'm5':
                case 'h1':
                case 'd1':
                case 'M1':
                    _this.$selRealInterval.val(modal.interval);
                    _this.$selectHisInterval.val(modal.interval);
                    break;
                default :
                    _this.$selRealInterval.val('h1');
                    _this.$selectHisInterval.val('h1');
                    break;
            }

            _this.$tmStart.val(modal.option.timeStart);
            _this.$tmEnd.val(modal.option.timeEnd);
            _this.$inputPeriodVal.val(modal.option.timeCycleValue);
            if (!modal.option.timeCycleUnit) {
                _this.$selPeriUnit.val(modal.option.timeCycleUnit);
            }
            else {
                _this.$selPeriUnit.val('hour');
            }
        }
        else {
            _this.$selectMode.val('realTime');
            _this.$tmGroup.css('display', 'none');
        }
        _this.$selectMode.change(function (e) {
            var flag = $(e.currentTarget).val();
            if ('history' == flag) {
                _this.$tmGroup.css('display', 'block');
                _this.m_bIsRealTime = false;
                _this.$divRealtmCycle.css('display', 'none');
            }
            else {
                _this.m_bIsRealTime = true;
                _this.$tmGroup.css('display', 'none');
                _this.$divRealtmCycle.css('display', 'block');
            }
        });
        _this.$selectHisCycleMode.change(function (e) {
            var $opt = _this.$selectHisInterval.children('option');
            var flag = $(e.currentTarget).val();
            if ('fixed' == flag) {  // fixed cycle
                _this.m_bIsHisFixCycle = true;
                $opt.eq(0).css('display', 'block');
                $opt.eq(1).css('display', 'block');
                $opt.eq(2).css('display', 'block');
                $opt.eq(3).css('display', 'block');
                $opt.eq(4).css('display', 'block');
                _this.$divHisTmRange.css('display', 'block');
                _this.$divHisTmCycle.css('display', 'none');
            }
            else {  // recent cycle
                _this.m_bIsHisFixCycle = false;
                _this.$selPeriUnit.change();
                _this.$divHisTmRange.css('display', 'none');
                _this.$divHisTmCycle.css('display', 'block');
            }
        });
        _this.$selPeriUnit.change(function (e) {
            var $opt = _this.$selectHisInterval.children('option');
            $opt.eq(0).css('display', 'none');
            var flag = $(e.currentTarget).val();
            switch (flag) {
                case 'hour':
                    $opt.eq(1).css('display', 'block');
                    $opt.eq(2).css('display', 'block');
                    $opt.eq(3).css('display', 'none');
                    $opt.eq(4).css('display', 'none');
                    _this.$selectHisInterval.val('m5');
                    break;
                case 'day':
                    $opt.eq(1).css('display', 'none');
                    $opt.eq(2).css('display', 'block');
                    $opt.eq(3).css('display', 'block');
                    $opt.eq(4).css('display', 'none');
                    _this.$selectHisInterval.val('h1');
                    break;
                case 'month':
                    $opt.eq(1).css('display', 'none');
                    $opt.eq(2).css('display', 'none');
                    $opt.eq(3).css('display', 'block');
                    $opt.eq(4).css('display', 'block');
                    _this.$selectHisInterval.val('d1');
                    break;
                default :
                    break;
            }
        });
        if (!_this.m_bIsHisFixCycle) {
            _this.$selPeriUnit.change();
        }

        /*$(".form_datetime").datetimepicker({
            format: "yyyy-mm-dd HH:mm:ss",
            minView: "hour",
            autoclose: true,
            todayBtn: false,
            pickerPosition: "bottom-right",
            initialDate: new Date()
        }).off('changeDate').on('changeDate',function(ev){
            var selectTime = (ev.date.valueOf().toDate().toUTCString().replace(' GMT', '')).toDate().getTime();
            var time = selectTime- selectTime%(5*60*1000).toDate().format('yyyy-MM-dd HH:mm:ss');
            $('#tabFrames .td-frame[title="'+ time +'"]').click();
        });*/
        $(".form_datetime").datetimepicker('remove');
        $(".form_datetime").datetime();

        _this.attachEvents();
        I18n.fillArea($('#modalCustom'));
    };

    ModalChartCustomConfig.prototype.recoverForm = function (modal) {
        if (Boolean(modal.modalText)) {
            this.$editor.html(modal.modalText);
        }
    };

    ModalChartCustomConfig.prototype.reset = function () {
    };

    ModalChartCustomConfig.prototype.attachEvents = function () {
        var _this = this;

        _this.$btnSubmit.off().click( function (e) {
            var modal = _this.options.modalIns.entity.modal;

            var customOption = $('#modalCustom').find('#editor');
            modal.modalText = customOption.html();
            modal.modalTextUrl = customOption.text();
            modal.option = new Object();
            modal.option.list = [];
            modal.points = [];
            var arraySpan = customOption.find('.pointValue');
            for (var i = 0, len = arraySpan.length; i < len; i++) {
                modal.option.list.push({dsItemId:arraySpan[i].id, name:arraySpan[i].title, data:0});
                modal.points.push(arraySpan[i].id);
            }
            modal.interval = _this.m_bIsRealTime ? _this.$selRealInterval.val() : _this.$selectHisInterval.val();
            modal.option.isRealTime = _this.m_bIsRealTime;
            modal.option.isHisFixCycle = _this.m_bIsHisFixCycle;
            if (_this.m_bIsHisFixCycle) {
                modal.option.timeStart = _this.$tmStart.val();
                modal.option.timeEnd = _this.$tmEnd.val();
            }
            else {
                var tmStart = new Date();
                var tmEnd = new Date();
                var periodVal = parseInt(_this.$inputPeriodVal.val());
                var periodUnit = _this.$selPeriUnit.val();
                switch (periodUnit) {
                    case 'hour':
                        var time = tmEnd.getTime() - 3600000 * periodVal;
                        tmStart.setTime(time);
                        break;
                    case 'day':
                        var time = tmEnd.getTime() - 86400000 * periodVal;
                        tmStart.setTime(time);
                        break;
                    case 'month':
                        var month = tmEnd.getMonth();
                        if (0 == month) {
                            tmStart.setFullYear(tmEnd.getFullYear() - 1);
                            tmStart.setMonth(11);
                        }
                        else {
                            tmStart.setMonth(month - 1);
                        }
                        break;
                    default :
                        break;
                }
                modal.option.timeStart = tmStart.format('yyyy-MM-dd HH:mm:ss');
                modal.option.timeEnd = tmEnd.format('yyyy-MM-dd HH:mm:ss');
                modal.option.timeCycleValue = _this.$inputPeriodVal.val();
                modal.option.timeCycleUnit = _this.$selPeriUnit.val();
            }

            // close modal
            _this.$modal.modal('hide');
            e.preventDefault();
        } );
    };

    return ModalChartCustomConfig;
} (jQuery, window));


var ModalChartCustom = (function(){
    function ModalChartCustom(screen, entityParams) {
        if (!entityParams) return;
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this._showConfig);
        this.modal = entityParams.modal;
        this.chart = echarts.init(this.container, AppConfig.chartTheme);
        this.m_langFlag = ('zh' == localStorage['language']) ? 0 : 1;   // 0：zh，1：en
        this.spinner.spin(this.container);
    };
    ModalChartCustom.prototype = new ModalBase();
    ModalChartCustom.prototype.optionTemplate = {
        name:'toolBox.modal.CUSTOM_CHART',
        parent:0,
        mode:'custom',
        maxNum:10,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalChartCustom',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalChartCustom.prototype.show = function() {
        this.init();
    }

    ModalChartCustom.prototype.init = function() {
    }

    ModalChartCustom.prototype.renderModal = function (e) {
        var _this = this;
        var optList = _this.modal.option.list;
        if (!optList) {
            _this.spinner.stop();
            return;
        }
        var len = optList.length;
        if (len > 0) {
            if (_this.modal.option.isRealTime) {
                var postData = {'dataSourceId': 0, 'dsItemIds': _this.modal.points};
                WebAPI.post('/analysis/startWorkspaceDataGenPieChart', postData).done(function (res) {
                    var data = res.dsItemList;
                    if (!data) {
                        return;
                    }
                    if (data.length > 0) {
                        for (var i = 0, len = data.length; i < len; i++) {
                            for (var j = 0, len2 = optList.length; j < len2; j++) {
                                if (optList[j].dsItemId == data[i].dsItemId) {
                                    optList[j].data = parseFloat(parseFloat(data[i].data).toFixed(2));
                                    break;
                                }
                            }
                        }
                        _this.updateModal(data);
                    }
                }).always(function (e) {
                    _this.spinner.stop();
                });
            }
            else {
                WebAPI.post('/analysis/startWorkspaceDataGenHistogram', {
                    dsItemIds: _this.modal.points,
                    timeStart: new Date(_this.modal.option.timeStart).format('yyyy-MM-dd HH:mm:00'),
                    timeEnd: new Date(_this.modal.option.timeEnd).format('yyyy-MM-dd HH:mm:00'),
                    timeFormat: 'm5'
                }).done(function (dataSrc) {
                    if (!dataSrc || dataSrc.timeShaft.length <= 0) {
                        return;
                    }
                    _this.updateHistoryChart(dataSrc.list, dataSrc.timeShaft);
                }).error(function (e) {
                }).always(function (e) {
                    _this.spinner.stop();
                });
            }
        }
        else {
            try {
                var showOption = eval('({' + _this.modal.modalTextUrl + '})');
                _this.drawChart(showOption);
                _this.spinner.stop();
            }
            catch (e) {
                _this.spinner.stop();
                return;
            }
        }
    }

    ModalChartCustom.prototype.updateModal = function (src) {
        if (this.modal.option.isRealTime) {
            this.updateRealTimeChart(src);
        }
    }
    ModalChartCustom.prototype.showConfigModal = function () {
        this.configModal.setOptions({modalIns: this});
        this.configModal.show();
    }
    ModalChartCustom.prototype._showConfig = function () {
    }
    ModalChartCustom.prototype.setModalOption = function (option) {
    }
    ModalChartCustom.prototype.drawChart = function (chartOption) {
        this.chart.setOption(chartOption);
    }
    ModalChartCustom.prototype.close = function () {
    }
    ModalChartCustom.prototype.updateRealTimeChart = function (src) {
        var _this = this;
        if (!src) {
            return;
        }
        if (src.length > 0) {
            var optList = _this.modal.option.list;
            for (var m= 0, lenM=optList.length; m<lenM; m++) {
                for (var n= 0, lenN=src.length; n<lenN; n++) {
                    if (optList[m].dsItemId == src[n].dsItemId) {
                        optList[m].data = src[n].data;
                        break;
                    }
                }
            }

            var showOption = _this.modal.modalTextUrl;
            var arr = showOption.split('<%');
            for (var j = 1, len2 = arr.length; j < len2; j++) {
                var name = arr[j].split('%>')[0];
                if ('' == name) {
                    continue;
                }
                var data = -1;
                for (var k = 0, len3 = optList.length; k < len3; k++) {
                    if (optList[k].name == name) {
                        data = optList[k].data;
                        break;
                    }
                }
                if (-1 != data && Boolean(data)) {
                    if ('object' == typeof(data)) {
                        var temp;
                        for (var p= 0, lenP=data.length; p<lenP; p++) {
                            temp += data[p] + ',';
                        }
                        showOption = showOption.replace(name, temp);
                    }
                    else {
                        showOption = showOption.replace(name, data);
                    }
                }
            }
            showOption = showOption.replace(/"<%/g, '');
            showOption = showOption.replace(/%>"/g, '');
            try {
                showOption = eval('({' + showOption + '})');
                _this.drawChart(showOption);
            }
            catch (e) {
                _this.spinner.stop();
                return;
            }
        }
    }
    ModalChartCustom.prototype.updateHistoryChart = function (list, timeShaft) {
        var _this = this;
        if (!list) {
            return;
        }
        if (list.length > 0) {
            var infoList = [];

            var arrId = [];
            for (var i= 0, len=list.length; i<len; i++) {
                arrId.push(list[i].dsItemId);
            }
            var arrItem = AppConfig.datasource.getDSItemById(arrId);
            for (var i= 0, len=list.length; i<len; i++) {
                var id = list[i].dsItemId;
                for (var m = 0; m < arrItem.length; m++) {
                    if (id == arrItem[m].id) {
                        var itemName = arrItem[m].alias;
                        var item = {id:id, name:itemName, data:list[i].data};
                        infoList.push(item);
                        break;
                    }
                }
            }
            //for (var i= 0, len=list.length; i<len; i++) {
            //    var itemId = list[i].dsItemId;
            //    var itemName = AppConfig.datasource.getDSItemById(itemId).alias;
            //    var item = {id:itemId, name:itemName, data:list[i].data};
            //    infoList.push(item);
            //}

            var showOption = _this.modal.modalTextUrl;
            var arr = showOption.split('<%');
            for (var j = 1, len2 = arr.length; j < len2; j++) {
                var name = arr[j].split('%>')[0];
                if ('' == name) {
                    continue;
                }
                var data;
                for (var k = 0, len3 = infoList.length; k < len3; k++) {
                    if (infoList[k].name == name) {
                        data = infoList[k].data;
                        break;
                    }
                }
                if (Boolean(data)) {
                    if ('object' == typeof(data)) {
                        var temp = '';
                        for (var p= 0, lenP=data.length-1; p<lenP; p++) {
                            temp += data[p] + ',';
                        }
                        temp += data[lenP - 1];
                        showOption = showOption.replace(name, temp);
                    }
                    else {
                        showOption = showOption.replace(name, data);
                    }
                }
            }
            showOption = showOption.replace(/"<%/g, '');
            showOption = showOption.replace(/%>"/g, '');
            try {
                showOption = eval('({' + showOption + '})');
                if (!showOption.xAxis || 0 == showOption.xAxis.length) {
                    var arrAxis = [{
                        type : 'category',
                        boundaryGap : false,
                        data : timeShaft
                    }];
                    showOption.xAxis = arrAxis;
                }
                else if (!showOption.xAxis[0].data || 0 == showOption.xAxis[0].data.length) {
                    showOption.xAxis[0].data = timeShaft;
                }
                _this.drawChart(showOption);
            }
            catch (e) {
                _this.spinner.stop();
                return;
            }
        }
    }

    ModalChartCustom.prototype.configModal = new ModalChartCustomConfig();

    return ModalChartCustom;
})();
/**
 * Created by RNBtech on 2015/8/13.
 */
/**
 * Created by RNBtech on 2015/6/18.
 */
var ModalPointKPI = (function(){
    function ModalPointKPI(screen, entityParams) {
        if (!entityParams) return;
        this.isConfigMode = false;
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
    };
    ModalPointKPI.prototype = new ModalBase();
    ModalPointKPI.prototype.optionTemplate = {
        name:'toolBox.modal.POINT_KPI',
        parent:0,
        mode:['realTimeDashboard'],
        maxNum: 30,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type: 'ModalPointKPI'
    };

    ModalPointKPI.prototype.show = function(){
        this.init();
    }

    ModalPointKPI.prototype.init = function(){
        this.pointKPIWiki = undefined;
    }

    ModalPointKPI.prototype.renderModal = function (e) {
        var _this = this, tempHtml = '', level = 1, rootId;//节点在树的第几层,根节点是0层
        this.spinner && this.spinner.stop();
        if(!(this.entity.modal.option && this.entity.modal.option.kpiList)) return
        this.entity.modal.option.kpiList.forEach(function(kpiItem){
                traverseTree(kpiItem);
            });
        $(this.container).append(tempHtml);
        //遍历树结构,渲染每一个PointKPI
        function traverseTree(tree) {
            //渲染根节点
            new PointKPIItem(tree, _this, 0);
            rootId = tree.id;
            traverse(tree, 0);
        }
        function traverse(node, i) {//广度优先遍历
            var children = node.list;
            node.pointPassData = [];
            node.show = true;
            if (children != null && children.length > 0) {
                //渲染子节点
                if(node.parentId == rootId){
                    level = 2;//重置level
                }
                new PointKPIItem(children[i], _this, level);

                if (i == children.length - 1) {//如果孩子节点已遍历完
                    for(var j = 0; j < children.length; j++){
                        j == 0 && level++;
                        traverse(children[j], 0);//第i个孩子节点作为父节点
                    }
                } else {//遍历父节点的i+1个孩子节点
                    traverse(node, i + 1);
                }
            }
        }
    }

    ModalPointKPI.prototype.showConfigMode = function () {
    }

    ModalPointKPI.prototype.updateModal = function (points) {

    }

    ModalPointKPI.prototype.configure = function(){
        var _this = this;
        this.spinner && this.spinner.stop();
        this.isConfigMode = true;

        if (this.chart) this.chart.clear();
        this.divResizeByMouseInit();

        var divMask = document.createElement('div');
        divMask.className = 'springConfigMask';
        divMask.draggable = 'true';

        var btnHeightResize = document.createElement('div');
        var maxHeight = this.optionTemplate.maxHeight;
        var maxWidth = this.optionTemplate.maxWidth;
        var minHeight = this.optionTemplate.minHeight;
        var minWidth = this.optionTemplate.minWidth;
        btnHeightResize.className = 'divResize divHeightResize';
        btnHeightResize.innerHTML = '<label for="heightResize" >H: </label>' +
        '<input type="range" class="inputResize" id="heightResize" name="points" step="0.5" min="' + minHeight + '" max="' + maxHeight + '" value="' + _this.entity.spanR + '"/>' +
        '<h5 class="rangeVal">' + _this.entity.spanR + ' /6</h5>' +
        '<input type="text" class="rangeChange" value="' + _this.entity.spanR + '"/>';
        divMask.appendChild(btnHeightResize);
        var btnWidthResize = document.createElement('div');
        btnWidthResize.className = 'divResize divWidthResize';
        btnWidthResize.innerHTML = '<label for="widthResize" >W: </label>' +
        '<input type="range" class="inputResize" id="widthResize" name="points" step="0.5" min="' + minWidth + '" max="' + maxWidth + '" value="' + _this.entity.spanC + '"/>' +
        '<h5 class="rangeVal">' + _this.entity.spanC + ' /12</h5>' +
        '<input type="text" class="rangeChange" value="' + _this.entity.spanC + '"/>';
        divMask.appendChild(btnWidthResize);

        var divTitleAndType = document.createElement('div');
        divTitleAndType.className = 'divTitleAndType';
        divMask.appendChild(divTitleAndType);

        var $divTitle = $('<div class="divResize chartTitle">');
        var $labelTitle = $('<label for="title">').text(I18n.resource.dashboard.show.TITLE);
        var inputChartTitle = document.createElement('input');
        inputChartTitle.id = 'title';
        inputChartTitle.className = 'form-control';
        inputChartTitle.value = this.entity.modal.title;
        inputChartTitle.setAttribute('placeholder',I18n.resource.dashboard.show.TITLE_TIP);
        if(this.entity.modal.title != ''){
            inputChartTitle.style.display = 'none';
        }
        inputChartTitle.setAttribute('type','text');
        $divTitle.append($labelTitle).append($(inputChartTitle));
        divTitleAndType.appendChild($divTitle[0]);

        var $divType = $('<div class="divResize chartType">');
        var $labelType = $('<label>').text(I18n.resource.dashboard.show.TYPE);
        var chartType = document.createElement('span');
        chartType.innerHTML = I18n.findContent(this.optionTemplate.name);
        $divType.append($labelType).append($(chartType));
        divTitleAndType.appendChild($divType[0]);

        var chartTitleShow = document.createElement('p');
        chartTitleShow.innerHTML = inputChartTitle.value;
        chartTitleShow.className = 'chartTitleShow';
        $divTitle[0].appendChild(chartTitleShow);
        if(this.entity.modal.title == '' || this.entity.modal.title == undefined){
            chartTitleShow.style.display = 'none';
        }
        chartTitleShow.onclick = function(){
            chartTitleShow.style.display = 'none';
            inputChartTitle.style.display = 'inline-block';
            inputChartTitle.focus();
        };
        inputChartTitle.onblur = function(){
            if (inputChartTitle.value != ''){
                inputChartTitle.style.display = 'none';
                chartTitleShow.style.display = 'inline';
            }
            chartTitleShow.innerHTML = inputChartTitle.value;
            _this.entity.modal.title = inputChartTitle.value;
        };

        //var $btnConfig = $('<span class="glyphicon glyphicon-cog springConfigBtn"></span>');
        var $btnRemove = $('<span class="glyphicon glyphicon-remove-circle springConfigRemoveBtn"></span>');
        var $btnAdd = $('<span class="glyphicon glyphicon-remove-circle springConfigRemoveBtn addTree" style="transform: rotateZ(45deg);color: #333;right: 50px !important;"></span>');
        divMask.appendChild($btnAdd[0]);
        //divMask.appendChild($btnConfig[0]);
        divMask.appendChild($btnRemove[0]);

        this.container.parentNode.appendChild(divMask);
        this.divResizeByToolInit();


        //drag event of replacing entity
        var divContainer = $(this.container).closest('.springContainer')[0];
        divMask.ondragstart = function (e) {
            //e.preventDefault();
            e.dataTransfer.setData("id", $(e.target).closest('.springContainer').get(0).id.replace('divContainer_', ''));
        };
        divMask.ondragover = function (e) {
            e.preventDefault();
        };
        divMask.ondragleave = function (e) {
            e.preventDefault();
        };
        divContainer && (divContainer.ondrop = function (e) {
            e.stopPropagation();
            var sourceId = e.dataTransfer.getData("id");
            var $sourceParent, $targetParent;
            if (sourceId) {
                var targetId = $(e.target).closest('.springContainer').get(0).id.replace('divContainer_', '');
                if(sourceId == targetId) return;
                $sourceParent = $('#divContainer_' + sourceId).parent();
                $targetParent = $('#divContainer_' + targetId).parent();
                //外部chart拖入组合图
                if(!$sourceParent[0].classList.contains('chartsCt') && $targetParent[0].classList.contains('chartsCt')){
                    _this.screen.insertChartIntoMix(sourceId, $(e.target).closest('.chartsCt')[0])
                }else{//平级之间交换
                    if(_this.screen.screen){//组合图内部交换
                        _this.screen.screen.replaceEntity(sourceId, targetId, _this.screen.entity.id);
                    }else{
                        _this.screen.replaceEntity(sourceId, targetId);
                    }
                }
            }
            _this.screen.isScreenChange = true;
        })
         //选择周期
        var $select = '<div class="form-group" style="position: absolute;top: 5px;left: 5px;">\
            <label for="inputEmail3" class="col-sm-2 control-label" style="height: 34px;line-height: 34px;">Cycle</label>\
            <div class="col-sm-8" style="display:inline-block;">\
                <select id="selectCycle" class="form-control" style="width: 100px;padding: 0;"> \
                    <option value="month">'+ I18n.resource.dashboard.modalPointKPI.MONTH +'</option> \
                    <option value="season">'+ I18n.resource.dashboard.modalPointKPI.QUARTER +'</option> \
                    </select>\
            </div>\
            </div>';
        $(this.container).append($select);
        var $selectCycle = $(this.container).find('#selectCycle');
        if(_this.entity.modal.option && _this.entity.modal.option.dateCycle && _this.entity.modal.option.dateCycle == 'season'){
            $selectCycle.find('option:nth-of-type(2)')[0].selected = 'selected';
        }else{
            $selectCycle.find('option:nth-of-type(1)')[0].selected = 'selected';
        }
        $selectCycle[0].onchange = function(){
            _this.entity.modal.option.dateCycle = $selectCycle[0].value;
        }
        var $chartCt = $('<div class="divResize chartsCt gray-scrollbar" style="overflow:auto;">');
        $chartCt.append($(this.container));
        divMask.appendChild($chartCt[0]);

        //如果domTree的宽度超出显示范围的宽度,
        if($('.level_2').width() > ($chartCt.width() - 320)){
            $('.domTree', $chartCt).width($('.level_2').width() + 40);
        }
        //如果存在根节点,则$btnAdd disabled
        if($(this.container).find('.domTree').length == 1){
           $btnAdd.attr('title','Already exists a root').addClass('btnDisabled');
        }

        this.executeConfigMode();

        $btnRemove.off('click').on('click',function(){
            if (_this.chart) _this.chart.clear();
            if(_this.screen.screen){//兼容ModalMix
                _this.screen.screen.removeEntity(_this.entity.id);
            }else{
                _this.screen.removeEntity(_this.entity.id);
            }

            $('#divContainer_' + _this.entity.id).remove();
            _this = null;
        });
        $btnAdd.off('click').on('click',function(){
            if($(_this.container).find('.domTree').length == 0){
                new PointKPIItem({parentId: ''}, _this, 0);
                $('#divContainer_'+ _this.entity.id).find('.addTree').attr('title','Already exists a root').addClass('btnDisabled');
                _this.screen.isScreenChange = true;
            }
        });
    }

    ModalPointKPI.prototype.initContainer = function(replacedElementId){
        var _this = this;
        var divParent = document.getElementById('divContainer_' + this.entity.id);
        var isNeedCreateDivParent = false;
        var scrollClass = ' gray-scrollbar';

        if ((!divParent) || replacedElementId) {
            isNeedCreateDivParent = true;
        }

        if (isNeedCreateDivParent) {
            divParent = document.createElement('div');
            divParent.id = 'divContainer_' + this.entity.id;
        }
        //get container
        if (replacedElementId) {
            var $old = $('#divContainer_' + replacedElementId);
            $(divParent).insertAfter($old);
            $old.remove();
        }
        else {
            isNeedCreateDivParent && this.screen.container.appendChild(divParent);
        }

        divParent.className = 'springContainer';
        //adapt ipad 1024px
        if (AppConfig.isMobile) {
            divParent.style.height = this.UNIT_HEIGHT * this.entity.spanR * 2 + '%';
            divParent.style.width = this.UNIT_WIDTH * this.entity.spanC * 2 + '%';
        } else {
            divParent.style.height = this.UNIT_HEIGHT * this.entity.spanR + '%';
            divParent.style.width = this.UNIT_WIDTH * this.entity.spanC + '%';
        }

        if (this.entity.modal.title && this.entity.modal.title != '' && (!this.entity.isNotRender)) {
            divParent.innerHTML = '<div class="panel panel-default">\
                <div class="panel-heading springHead">\
                    <h3 class="panel-title" style="font-weight: bold;">' + this.entity.modal.title + '</h3>\
                </div>\
                <div class="panel-body springContent' + scrollClass + '" style="overflow:auto;"></div>\
            </div>';
        } else {
            divParent.innerHTML = '<div class="panel panel-default" style="background: none;">\
                <div class="panel-body springContent' + scrollClass + '" style="height:100%;overflow:auto;"></div>\
            </div>';
        }
        //如果是移动端,背景设置为透明
        if (AppConfig.isMobile || (this.screen.options && this.screen.options.isForMobile) || (this.screen.screen && this.screen.screen.options && this.screen.screen.options.isForMobile)) {
            divParent.children[0].classList.add('transparent');
        }

        //按钮容器:锚链接,历史数据,wiki
        var divBtnCtn = document.createElement('div');
        divBtnCtn.className = 'springLinkBtnCtn';

        var domPanel = divParent.getElementsByClassName('panel')[0];
        //show history start

        var lkHistory = document.createElement('a');
        lkHistory.className = 'springLinkBtn';
        lkHistory.title = 'Show History';
        lkHistory.href = 'javascript:;';
        lkHistory.innerHTML = '<span class="glyphicon glyphicon-stats"></span>';
        divBtnCtn.appendChild(lkHistory);

        lkHistory.onclick = function(){
            var dataTree = _this.entity.modal.option.kpiList[0];
            var dateCycle = !_this.entity.modal.option.dateCycle ? 'month' : _this.entity.modal.option.dateCycle;
            if (Boolean(dataTree)) {
                new ModalPointKpiGrid(dataTree, dateCycle).show();
            }
        };

        //show history end

        domPanel.appendChild(divBtnCtn);

        this.initToolTips(divParent.getElementsByClassName('springHead'));
        this.container = divParent.getElementsByClassName('springContent')[0];
    }

    ModalPointKPI.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
    }

    return ModalPointKPI;
})();

var PointKPIItem = (function(){
    function PointKPIItem(item, entity, i){//i 树结构的第i层, 从0开始,0代表根节点
        this.parentArgt = entity;
        this.entity = entity.entity;
        this.container = entity.container;

        this.kpiItem = {
            id: !item.id ? new Date().getTime() : item.id,
            parentId: !item.parentId ? '': item.parentId,
            name: !item.name ? 'Unaming': item.name,
            pointKPI: !item.pointKPI ? '': item.pointKPI,
            pointGrade: !item.pointGrade ? '': item.pointGrade,
            pointPass: !item.pointPass ? '': item.pointPass,
            rule: !item.rule ? '': item.rule,
            weight: !item.weight ? '': item.weight,
            wikiId: !item.wikiId ? '': item.wikiId,
            list: !item.list ? []: item.list
        };
        if(i === 0 && !item.id && item.parentId == ''){
            !this.entity.modal.option && (this.entity.modal.option = {});
            !this.entity.modal.option.kpiList && (this.entity.modal.option.kpiList = []);
            this.entity.modal.option.kpiList.push(this.kpiItem);
        }
        this.addItemDom(this.kpiItem, i)
        this.attachEventsItem(this.kpiItem);
    }

    PointKPIItem.prototype.addItem = function(id){//id-->该id节点下降增加子节点
        var _this = this;
        var level = 1;
        var pointKPIItem;

        this.entity.modal.option.kpiList.forEach(function(kpiItem){
            traverseTree(kpiItem);
        });
        function traverseTree(tree) {
            traverse(tree, 0);
        }
        function traverse(node, i) {
            var children = node.list;
            if(id == node.id){
                pointKPIItem = new PointKPIItem({parentId: id}, _this.parentArgt, level);
                node.list.push(pointKPIItem.kpiItem);
                return;
            }
            if (children != null && children.length > 0) {
                if (i == children.length - 1) {
                    for(var j = 0; j < children.length; j++){
                        j == 0 && level++;
                        traverse(children[j], 0);
                    }
                } else {
                    traverse(node, i + 1);
                }
            }
        }
    }

    var btn_tpl =  '\
            <div class="btnGroup">\
                <span class="glyphicon glyphicon-remove-circle btnAddItem" style="transform: rotateZ(45deg);"></span>\
                <span class="glyphicon glyphicon-cog btnConfigItem"></span>\
                <span class="glyphicon glyphicon-info-sign btnConfigWiki"></span>\
                <span class="glyphicon glyphicon-remove-circle btnRemoveItem"></span>\
                <span class="glyphicon glyphicon-info-sign btnViewWiki{isShow}" wikiId="{wikiId}"></span>\
            </div>';

    PointKPIItem.prototype.tpl = {
        treeWrap: '<div class="domTree"></div>',
        level_1_Tpl: '\
            <div class="totalLevel">\
                <div class="itemWrap" id="kpi_{id}">\
                    <div class="hrLine"></div>\
                    <span class="pointName">{name}</span>\
                    <span class="glyphicon glyphicon-pencil"></span>\
                    <div class="circle {bgColor}">\
                        <div class="active-border active-border_{bgColor}" data-value=""></div>\
                        <span>{pointPassVal}</span>\
                    </div>'+ btn_tpl +
                '</div>\
            </div>',
        level_2_Ctn: '\
            <div class="level_2">\
                <div class="hrLine1"></div>\
                <ul></ul>\
            </div>',
        level_2_Tpl: '<li class="level_3" parentId="{parentId}" id="item_{id}">\
            	<div class="thirdCon1">\
                	<div class="itemWrap" id="kpi_{id}">\
                	    <div class="circle {bgColor}">\
                	        <div class="active-border active-border_{bgColor}" data-value=""></div>\
                	        <span>{pointPassVal}</span>\
                	    </div>\
                	    <span class="pointName">{name}</span><span class="glyphicon glyphicon-pencil"></span><br class="clear"><div class="hrLine2"></div>'+ btn_tpl +'</div>\
                </div>\
                <ul class="childLevel">\
                </ul>\
            </li>',
        level_3_Tpl: '<li parentId="{parentId}" id="item_{id}">\
                <div class="hrLine3"></div>\
                <div class="itemWrap" id="kpi_{id}">\
                    <div class="smCircle {bgColor}">\
                        <div class="active-border active-border_{bgColor}" data-value=""></div>\
                        <span>{pointPassVal}</span>\
                    </div>\
                    <span class="pointName">{name}</span>\
                    <span class="glyphicon glyphicon-pencil"></span><br class="clear">\
                    <div class="hrLine4"></div>'+ btn_tpl +
                '</div>\
                <ul class="childLevel">\
                </ul>\
            </li>'
    }

    PointKPIItem.prototype.addItemDom = function(kpiItem, i){
        var kpiItemForEl = {
            id: kpiItem.id,
            parentId: kpiItem.parentId,
            name: kpiItem.name,
            isShow: kpiItem.wikiId != '' ? ' showWiki': '',
            pointPassVal: kpiItem.pointPass != '' ? I18n.resource.dashboard.modalPointKPI.UNPASS : I18n.resource.dashboard.modalPointKPI.PASS,
            bgColor: kpiItem.pointPass != '' ? 'unpass': 'pass'
        }
        //根节点
        var $domTree = $(this.container).children('.domTree'), $level_2_ul, $level_3_ul;
        $domTree && ($level_2_ul = $domTree.find('.level_2>ul'));
        $level_2_ul && ($level_3_ul = $level_2_ul.find('#item_' + kpiItem.parentId + ' > .childLevel'));

        if(kpiItem.parentId == ''){//level 0
            $(this.container).append(this.tpl.treeWrap);
            $domTree = $(this.container).children('.domTree');
            $domTree.html(this.tpl.level_1_Tpl.formatEL(kpiItemForEl));
        }else if(i == 1 && $domTree){//level 1
            if($level_2_ul.length == 0){
                $domTree.append(this.tpl.level_2_Ctn);
                $level_2_ul = $domTree.find('.level_2>ul');
            }
            //当二级KPI长度超出显示区域后增加domTree的长度,显示滚动条
            if($domTree.parent().width() - $level_2_ul.width() < 270){
                $domTree.width($domTree.width() + 255);
            }
            $level_2_ul.append(this.tpl.level_2_Tpl.formatEL(kpiItemForEl))

        }else if($level_2_ul){//
            $level_3_ul.append(this.tpl.level_3_Tpl.formatEL(kpiItemForEl));
            if($level_3_ul.find('.itemWrap').width() < 140){//隐藏添加下级item功能
                $level_3_ul.find('.btnAddItem').hide();
            }
        }
    }

    PointKPIItem.prototype.removeItem = function(id){
        var _this = this;
        this.entity.modal.option.kpiList.forEach(function(kpiItem, index){
            if(kpiItem.id == id && kpiItem.parentId == ''){//如果是根节点直接删除
                _this.entity.modal.option.kpiList.splice(index, 1);
                $('#kpi_' + id).closest('.domTree').remove();
                $('#divContainer_'+ _this.entity.id).find('.addTree').removeClass('btnDisabled').attr('title','');
            }else{
                traverseTree(kpiItem);
            }
        });
        function traverseTree(tree) {
            traverse(tree, 0);
        }
        function traverse(node, i) {
            var children = node.list;
            if (children != null && children.length > 0) {
                if(id == children[i].id){
                    node.list.splice(i, 1);
                    $('#kpi_' + id).closest('li').remove();
                    return;
                }else{
                    if (i == children.length - 1) {
                        for(var j = 0; j < children.length; j++){
                            traverse(children[j], 0);
                        }
                    } else {
                        traverse(node, i + 1);
                    }
                }
            }
        }
    }

    PointKPIItem.prototype.showConfigModal = function(){
        var _this = this, $modalConfig = $('#modalConfig');
        var tempHtml = '\
            <div class="modal-body" id="pointKPI">\
                <div class="form-horizontal">\
                    <div class="form-group">\
                        <label class="col-md-3 control-label" for="divKPI">KPI</label>\
                        <div class="col-md-4">\
                            <div class="drop-area" id="divKPI">\
                                <span class="glyphicon glyphicon-plus"></span>\
                            </div>\
                        </div>\
                    </div>\
                    <div class="form-group">\
                        <label class="col-md-3 control-label" for="divGrade">Grade</label>\
                        <div class="col-md-4">\
                            <div class="drop-area" id="divGrade">\
                                <span class="glyphicon glyphicon-plus"></span>\
                            </div>\
                        </div>\
                    </div>\
                    <div class="form-group">\
                        <label class="col-md-3 control-label" for="divIsPass">Is pass</label>\
                        <div class="col-md-4">\
                            <div class="drop-area" id="divIsPass">\
                                <span class="glyphicon glyphicon-plus"></span>\
                            </div>\
                        </div>\
                    </div>\
                    <div class="form-group">\
                        <label class="col-md-3 control-label" for="divDashboard">Config dashboard</label>\
                        <div class="col-md-4">\
                            <button type="button" id="btnDashboard" class="btn btn-default">Config</button>\
                        </div>\
                    </div>\
                </div>\
            </div>';

        $modalConfig.off('show.bs.modal').on('show.bs.modal', function (e) {
            var pointKPIAlias = AppConfig.datasource.getDSItemById(_this.kpiItem.pointKPI).alias;
            var pointGradeAlias = AppConfig.datasource.getDSItemById(_this.kpiItem.pointGrade).alias;
            var pointPassAlias = AppConfig.datasource.getDSItemById(_this.kpiItem.pointPass).alias;
            $modalConfig.find('.modal-body').hide();
            $modalConfig.find('.modal-footer').before(tempHtml);
            $modalConfig.find('#divKPI').attr('data-value', _this.kpiItem.pointKPI).attr('title',pointKPIAlias).html(pointKPIAlias);
            $modalConfig.find('#divGrade').attr('data-value', _this.kpiItem.pointGrade).attr('title',pointKPIAlias).html(pointGradeAlias);
            $modalConfig.find('#divIsPass').attr('data-value', _this.kpiItem.pointPass).attr('title',pointKPIAlias).html(pointPassAlias);
            if(pointPassAlias){
                $modalConfig.find('#startConfig').removeClass('disabled');
            }
            _this.parentArgt.screen.modalConfigPane.toggleDataSource(true);
            _this.attachEventsConfig($modalConfig)
        });
        $modalConfig.off('hidden.bs.modal').on('hidden.bs.modal', function () {
            $modalConfig.find('#pointKPI').remove();
            _this.parentArgt.screen.modalConfigPane.toggleDataSource(false);
        });
        $modalConfig.modal('show');
    }

    PointKPIItem.prototype.viewDetail = function(){
        var $dialog = $('#dialogModal');
        var energyScreen = new EnergyScreen();
        var $dialogContent = $dialog.find('#dialogContent').css({height: '90%', width: '90%', margin: 'auto', marginTop: '2.5%', backgroundColor: '#fff'});
        $dialog.off('hidden.bs.modal').on('hidden.bs.modal', function (e) {
            $dialogContent.removeAttr('style').html('');
            energyScreen.workerUpdate && energyScreen.workerUpdate.terminate();
        }).modal({});

        energyScreen.id = this.kpiItem.id + '_' + AppConfig.userId;
        energyScreen.container = $dialogContent[0];
        energyScreen.isForBencMark = true;
        energyScreen.init();
    }

    PointKPIItem.prototype.attachEventsItem = function(kpiItem){
        var $kpiWrap = $('#kpi_' + kpiItem.id), _this = this;

        $('.btnAddItem', $kpiWrap).off().on('click', function(e){
            e.stopPropagation();
            _this.addItem(_this.kpiItem.id);
            _this.parentArgt.screen.isScreenChange = true;
        });
        $('.btnRemoveItem', $kpiWrap).off().on('click', function(e){
            e.stopPropagation();
            _this.removeItem(_this.kpiItem.id);
            //第一层子节点remove时判断是否需要重置宽度
            var $domTree = $('.domTree');
            if($(this).closest('.thirdCon1').length == 1 && $domTree.width() - $('.level_2').width() > 260){
                $domTree.width($domTree.width() - 255);
            }
            _this.parentArgt.screen.isScreenChange = true;
        });
        $('.btnConfigItem', $kpiWrap).off().on('click', function(e){
            e.stopPropagation();
            _this.showConfigModal();
        });
        $('.btnConfigWiki', $kpiWrap).off().on('click', function(e){
            e.stopPropagation();
            //if exist wiki,show wiki editor page
            if(_this.kpiItem.wikiId){
                _this.showWikiEditModal();
            }else{
                _this.showWikiSearchModal();
            }
        });
        $('.btnViewWiki', $kpiWrap).off().on('click', function(e){
            e.stopPropagation();
            _this.viewWikiInfoModal();
        });
        $('.glyphicon-pencil', $kpiWrap).off().on('click', function(e){
             e.stopPropagation();
            if(_this.parentArgt.isConfigMode == true){
                _this.editPointKPIName();
            }
        });
        $kpiWrap.off().on('click', function(e){
            e.stopPropagation();
            if(_this.parentArgt.isConfigMode == false){
                _this.viewDetail(_this.kpiItem.id);
            }
        });

    }

    PointKPIItem.prototype.attachEventsConfig = function($modalConfig){
        var _this = this;
        var $dropArea = $modalConfig.find('.drop-area');
        var $btnConfig = $modalConfig.find('#startConfig');
        var $btnDashboard = $modalConfig.find('#btnDashboard');
        $dropArea.off('dragover').on('dragover', function (e) {
            e.preventDefault();
        });
        $dropArea.off('dragenter').on('dragenter', function (e) {
            $(e.target).addClass('on');
            e.preventDefault();
            e.stopPropagation();
        });
        $dropArea.off('dragleave').on('dragleave', function (e) {
            $(e.target).removeClass('on');
            e.stopPropagation();
        });
        $dropArea.off('drop').on('drop', function (e) {
            var itemId = EventAdapter.getData().dsItemId;
            var $target = $(e.target);
            var name;
            if(!itemId) return;
            $target.removeClass('on');
            name = AppConfig.datasource.getDSItemById(itemId).alias;
            $target.attr({'data-value': itemId, 'title': name});
            $target.html('<span>'+name+'</span>');
            e.stopPropagation();

            if($target.attr('id') == 'divIsPass'){
                $btnConfig.removeClass('disabled');
            }
            _this.parentArgt.screen.isScreenChange = true;
        });

        $btnConfig.off().on('click', function(){
            var KPI = $('#divKPI').attr('data-value');
            var grade = $('#divGrade').attr('data-value');
            var pass = $('#divIsPass').attr('data-value');
            _this.kpiItem.pointKPI = !KPI ? '': KPI;
            _this.kpiItem.pointGrade = !grade ? '': grade;
            _this.kpiItem.pointPass = !pass ? '': pass;

            _this.entity.modal.option.kpiList.forEach(function(kpiItem){
                traverseTree(kpiItem);
            });
            function traverseTree(tree) {
                traverse(tree, 0);
            }
            function traverse(node, i) {
                var children = node.list;
                if(node.id == _this.kpiItem.id){
                    node.pointKPI = _this.kpiItem.pointKPI;
                    node.pointGrade = _this.kpiItem.pointGrade;
                    node.pointPass = _this.kpiItem.pointPass;
                    return;
                }
                if (children != null && children.length > 0) {
                    if (i == children.length - 1) {
                        for(var j = 0; j < children.length; j++){
                            traverse(children[j], 0);
                        }
                    } else {
                        traverse(node, i + 1);
                    }
                }
            }
            $('#modalConfig').modal('hide');
        });

        $btnDashboard.off('click').on('click', function(){
            ScreenManager.show(EnergyScreen, _this.kpiItem.id + '_' + AppConfig.userId);
        });
    }

    PointKPIItem.prototype.showWikiSearchModal = function(){
        if(!(this.pointKPIWiki && this.pointKPIWiki.parent.kpiItem.id == this.kpiItem.id)){
            this.pointKPIWiki = new ModalWiki(this);
        }
        this.pointKPIWiki.showWikiSearch();
    }

    PointKPIItem.prototype.showWikiEditModal = function(){
        if(!(this.pointKPIWiki && this.pointKPIWiki.parent.kpiItem.id == this.kpiItem.id)){
            this.pointKPIWiki = new ModalWiki(this);
        }
        this.pointKPIWiki.getWikiById();
    }

    PointKPIItem.prototype.viewWikiInfoModal = function(){
        if(!(this.pointKPIWiki && this.pointKPIWiki.parent.kpiItem.id == this.kpiItem.id)){
            this.pointKPIWiki = new ModalWiki(this);
        }
        this.pointKPIWiki.viewWikiInfo(this.kpiItem.wikiId);
    }

    PointKPIItem.prototype.editPointKPIName = function(){
        var _this = this, $divKPI = $('#kpi_' + this.kpiItem.id), $input = $divKPI.find('.pointNameInput'),$springConfigMask;
        if($input.length == 0){
            var $input = $('<input type="text" class="form-control pointNameInput"/>').val(_this.kpiItem.name);
            var $spanName = $('.pointName','#kpi_' + this.kpiItem.id).hide().after($input);
            $springConfigMask = $divKPI.closest('.springConfigMask[draggable="true"]').attr('draggable',false);
            $input.blur(function(){
                savePointName(this);
            }).keyup(function(e){
                if(e.keyCode == 13){
                    savePointName(this);
                }
            });

        }else{
            savePointName($input[0]);
        }

        function savePointName(divInput){
            _this.kpiItem.name = $(divInput).val();
            $(divInput).remove();
            $spanName.html(_this.kpiItem.name).show();
            $springConfigMask.attr('draggable',true);
            _this.parentArgt.entity.modal.option.kpiList.forEach(function(kpiItem){
                traverseTree(kpiItem);
            });
            _this.parentArgt.screen.isScreenChange = true;
            function traverseTree(tree) {
                traverse(tree, 0);
            }
            function traverse(node, i) {
                var children = node.list;
                if(node.id == _this.kpiItem.id){
                    node.name = _this.kpiItem.name;
                    return;
                }
                if (children != null && children.length > 0) {
                    if (i == children.length - 1) {
                        for(var j = 0; j < children.length; j++){
                            traverse(children[j], 0);
                        }
                    } else {
                        traverse(node, i + 1);
                    }
                }
            }
        }
    }

    return PointKPIItem;
})();
var ModalPointKpiGrid = (function () {
	var _this;
    function ModalPointKpiGrid(data, dateCycle) {
        if (Boolean(data)) {
            this.m_kpiDataTree = data;
            this.m_dateCycle = dateCycle;
            this.m_selectYear = 0;
            this.m_htmlPage;
            this.m_htmlTreeTemp;
            this.m_htmlGridTemp;
            this.m_bIsCurrentYear = false;
            this.m_nCurrentSeason = 0;
            this.m_nCurrentMonth = 0;
            this.m_strGood = '达标';
            this.m_strBad = '未达标';
            this.m_strCurrentGood = '当前达标';
            this.m_strCurrentBad = '当前超标';
            this.m_strCurrentWarn = '警戒';
            this.m_nStartYear = 0;
            this.m_nEndYear = 0;
            _this = this;
        }
    }

    ModalPointKpiGrid.prototype = new ModalPointKpiGrid();

    ModalPointKpiGrid.prototype.show = function() {
        this.init();
    }
    ModalPointKpiGrid.prototype.init = function () {
        WebAPI.get('/static/views/observer/widgets/modalPointKpiGrid.html').done(function (resultHtml) {
            _this.m_htmlPage = $(resultHtml);

            // time control
            var timeControl = _this.m_htmlPage.find('#timeSelect');
            var tmNow = new Date();
            var tmStart = new Date();
            tmStart.setFullYear(tmNow.getFullYear() - 10);
            _this.m_nStartYear = tmStart.getFullYear();
            _this.m_nEndYear = tmNow.getFullYear();
            timeControl.val(tmNow.format('yyyy'));
            timeControl.datetimepicker({
                format: 'yyyy',
                startView: 'decade',
                minView: 'decade',
                autoclose: true,
                todayBtn: false,
                pickerPosition: 'bottom-right',
                initialDate: tmNow,
                startDate: tmStart,
                endDate: tmNow,
                keyboardNavigation: false
            }).off('changeDate').on('changeDate',function(ev){
                //var selectTime = (ev.date.valueOf().toDate().toUTCString().replace(' GMT', '')).toDate().getTime();
                //var time = selectTime- selectTime%(5*60*1000).toDate().format('yyyy');
                //$('#tabFrames .td-frame[title="'+ time +'"]').click();

                _this.m_selectYear = timeControl.val();
                var tmNow = new Date();
                var nCurYear = tmNow.getFullYear();
                if (nCurYear == _this.m_selectYear) {
                    _this.m_nCurrentMonth = tmNow.getMonth();
                    _this.m_nCurrentSeason = Math.floor(_this.m_nCurrentMonth / 3);
                    _this.m_bIsCurrentYear = true;
                }
                else {
                    _this.m_bIsCurrentYear = false;
                }
                _this.postDataShow(false);
            });

            var yearPre = _this.m_htmlPage.find('#btnYearPre');
            if (Boolean(yearPre)) {
                yearPre.click(function (e) {
                    var year = parseInt(timeControl.val());
                    if (year <= _this.m_nStartYear) {
                        year = _this.m_nStartYear;
                        return;
                    }
                    else {
                        year -= 1;
                    }
                    timeControl.val(year);
                    _this.timeSetting(timeControl.val());
                    _this.postDataShow(false);
                });
            }

            var yearNext = _this.m_htmlPage.find('#btnYearNext');
            if (Boolean(yearNext)) {
                yearNext.click(function (e) {
                    var year = parseInt(timeControl.val());
                    if (year >= _this.m_nEndYear) {
                        year = _this.m_nEndYear;
                        return;
                    }
                    else {
                        year += 1;
                    }
                    timeControl.val(year);
                    _this.timeSetting(timeControl.val());
                    _this.postDataShow(false);
                });
            }

            var tmNow = new Date();
            _this.m_selectYear = tmNow.getFullYear();
            _this.m_nCurrentMonth = tmNow.getMonth();
            _this.m_nCurrentSeason = Math.floor(_this.m_nCurrentMonth / 3);
            _this.m_bIsCurrentYear = true;
            _this.postDataShow(true);
            //_this.m_htmlPage.modal('show');

        }).always(function () {});
    }
    ModalPointKpiGrid.prototype.postDataShow = function (bIsFirst) {
        var ptPassArray = [];   // 从树中获取id放入该数组中
        ptPassArray = _this.recursiveTreeGetPointPassId(_this.m_kpiDataTree);
        var tmStart = new Date();
        tmStart.setMonth(0);
        tmStart.setDate(1);
        tmStart.setHours(0);
        tmStart.setMinutes(0);
        tmStart.setSeconds(0);
        var tmEnd = new Date();
        if (!bIsFirst && tmStart.getFullYear() != _this.m_selectYear) {
            tmStart.setFullYear(_this.m_selectYear);
            tmEnd.setFullYear(_this.m_selectYear);
            tmEnd.setMonth(11);
            tmEnd.setDate(31);
            tmEnd.setHours(23);
            tmEnd.setMinutes(59);
            tmEnd.setSeconds(59);
        }
        var postData = {};
        postData.dataSourceId = '';
        postData.dsItemIds = ptPassArray;
        postData.timeStart = tmStart.format('yyyy-MM-dd hh:mm:ss');
        postData.timeEnd = tmEnd.format('yyyy-MM-dd hh:mm:ss');
        postData.timeFormat = 'M1';

        if (bIsFirst) {
            Spinner.spin($('#paneCenter')[0]);
        }
        else {
            Spinner.spin(_this.m_htmlPage[2]);
        }

        var tree = _this.m_htmlPage.find('#treeCtl');
        tree.html('');
        var table = _this.m_htmlPage.find('#tableCtl');
        table.html('');
        WebAPI.post('/analysis/startWorkspaceDataGenHistogram', postData).done(function (res) {
            if (!res || !res.list) {
                return;
            }

            for (var i= 0,len=res.list.length;i<len;i++) {
                _this.recursiveTreeSetPointPassData(_this.m_kpiDataTree, res.list[i].dsItemId, res.list[i].data);
            }

            var divContain = $('<div style="cursor:pointer"></div>');
            divContain.append('<ul class="kpiGridHeader" style="height:32px;margin-bottom:0px"></ul>');
            tree.append(divContain);

            var head = $('<thead class="kpiGridHeader"></thead>');
            var headTr = $('<tr></tr>');
            if ('season' == _this.m_dateCycle) {
                for (var i= 0; i<4; i++) {
                    var headTh = $('<th colspan="3" class="colSeason">' + (i+1) + '季度</th>');
                    headTr.append(headTh);
                }
                head.append(headTr);
            }
            else if ('month' == _this.m_dateCycle) {
                headTr = $('<tr></tr>');
                for (var i= 0; i<12; i++) {
                    var headTh = $('<th class="colMonth">' + (i+1) + '月</th>');
                    headTr.append(headTh);
                }
                head.append(headTr);
            }
            table.append(head);
            _this.showControlInfo();
            if (bIsFirst) {
                _this.m_htmlPage.modal('show');
            }
        }).always(function () {
            Spinner.stop();
        });
    }
    ModalPointKpiGrid.prototype.showControlInfo = function () {
        _this.m_htmlTreeTemp = $('<div style="cursor:pointer"></div>');
        _this.m_htmlGridTemp = $('<tbody class="kpiGridBody"></tbody>');
        _this.recursiveTreeSetting(_this.m_kpiDataTree);
        _this.m_htmlPage.find('#treeCtl').append(_this.m_htmlTreeTemp);
        _this.m_htmlPage.find('#tableCtl').append(_this.m_htmlGridTemp);
    }
    ModalPointKpiGrid.prototype.recursiveTreeSetting = function (item) {
        // draw tree
        var parentNode;
        if ('' == item.parentId) {  // root
            parentNode = _this.m_htmlTreeTemp;
        }
        else {
            parentNode = _this.m_htmlTreeTemp.find('#tree_' + item.parentId).find('.rows').eq(0);
        }
        if (parentNode.length > 0) {
            var bLeaf = (0 == item.list.length) ? true : false;
            _this.insertTreeCtrl(item.id, item.name, parentNode, bLeaf);
        }

        // draw grid
        var nLen = item.pointPassData.length;
        if (nLen < 12) {
            for (var i= nLen,len=12-nLen; i<12; i++) {
                item.pointPassData.push(-1);  // append data
            }
        }
        nLen = 12;

        var gridTr1 = $('<tr class="kpiGridRow" id="grid1_' + item.id + '"></tr>');
        var gridTd1 = '';
        var nLen = item.pointPassData.length;
        var bIsCurrent = false;
        var strShow;
        if ('season' == _this.m_dateCycle) {
            var arrSeason = [item.pointPassData[0], item.pointPassData[3], item.pointPassData[6], item.pointPassData[9]];
            for (var i= 0; i<4; i++) {
                if (_this.m_bIsCurrentYear && i==_this.m_nCurrentSeason) {
                    bIsCurrent = true;
                }
                else {
                    bIsCurrent = false;
                }

                if (-1 == arrSeason[i]) {
                    gridTd1 += '<td colspan=3></td>';
                }
                else if (Boolean(arrSeason[i])) {
                    strShow = bIsCurrent ? _this.m_strCurrentGood : _this.m_strGood;
                    gridTd1 += '<td colspan=3 class="kpiGridGood">' + strShow + '</td>';
                }
                else {
                    strShow = bIsCurrent ? _this.m_strCurrentGood : _this.m_strGood;
                    gridTd1 += '<td colspan=3 class="kpiGridBad">' + strShow + '</td>';
                }
            }
        }
        else if ('month' == _this.m_dateCycle) {
            for (var i= 0; i<nLen; i++) {
                if (_this.m_bIsCurrentYear && i==_this.m_nCurrentMonth) {
                    bIsCurrent = true;
                }
                else {
                    bIsCurrent = false;
                }

                if (-1 == item.pointPassData[i]) {
                    gridTd1 += '<td colspan=1></td>';
                }
                else if (Boolean(item.pointPassData[i])) {
                    strShow = bIsCurrent ? _this.m_strCurrentGood : _this.m_strGood;
                    gridTd1 += '<td colspan=1 class="kpiGridGood">' + strShow + '</td>';
                }
                else {
                    strShow = bIsCurrent ? _this.m_strCurrentBad : _this.m_strBad;
                    gridTd1 += '<td colspan=1 class="kpiGridBad">' + strShow + '</td>';
                }
            }
        }
        gridTr1.append($(gridTd1));
        _this.m_htmlGridTemp.append(gridTr1);

/*
        var nLen = item.pointPassData.length;
        if (nLen < 12) {
            for (var i= nLen,len=12-nLen; i<len; i++) {
                item.pointPassData.push(-1);  // append data
            }
        }
        nLen = 12;

        var monthVal = [];
        for (var i= 0; i<nLen; i++) {
            monthVal.push((item.pointPassData[i] > 0) ? 1 : 0);
        }
        var season1 = monthVal[0] + monthVal[1] + monthVal[2];
        var season2 = monthVal[3] + monthVal[4] + monthVal[5];
        var season3 = monthVal[6] + monthVal[7] + monthVal[8];
        var season4 = monthVal[9] + monthVal[10] + monthVal[11];
        var arrSeason = [];
        arrSeason.push(season1);
        arrSeason.push(season2);
        arrSeason.push(season3);
        arrSeason.push(season4);

        var gridTr1 = $('<tr class="kpiGridRow" id="grid1_' + item.id + '"></tr>');
        var gridTd1 = '';
        for (var i= 0; i<4; i++) {
            if (arrSeason[i] >= 2) {
                if (_this.m_bIsCurrentYear) {
                    if (_this.m_nCurrentSeason == i) {
                        gridTd1 += '<td colspan="3" class="kpiGridGood">' + _this.m_strCurrentGood + '</td>';
                    }
                    else if (i < _this.m_nCurrentSeason) {
                        gridTd1 += '<td colspan="3" class="kpiGridGood">' + _this.m_strGood + '</td>';
                    }
                    else {
                        gridTd1 += '<td colspan="3"></td>';
                    }
                }
                else {
                    gridTd1 += '<td colspan="3" class="kpiGridGood">' + _this.m_strGood + '</td>';
                }
            }
            else {
                if (0 == arrSeason[i] && -1 == item.pointPassData[i*3] && -1 == item.pointPassData[i*3+1] && -1 == item.pointPassData[i*3+2]) {
                    gridTd1 += '<td colspan="3"></td>';
                }
                else {
                    if (_this.m_bIsCurrentYear) {
                        if (_this.m_nCurrentSeason == i) {
                            gridTd1 += '<td colspan="3" class="kpiGridBad">' + _this.m_strCurrentBad + '</td>';
                        }
                        else if (i < _this.m_nCurrentSeason) {
                            gridTd1 += '<td colspan="3" class="kpiGridBad">' + _this.m_strBad + '</td>';
                        }
                        else {
                            gridTd1 += '<td colspan="3"></td>';
                        }
                    }
                    else {
                        gridTd1 += '<td colspan="3" class="kpiGridBad">' + _this.m_strBad + '</td>';
                    }
                }
            }
        }
        gridTr1.append($(gridTd1));
        _this.m_htmlGridTemp.append(gridTr1);

        //
        var gridTr2 = $('<tr class="kpiGridRow" id="grid2_' + item.id + '"></tr>');
        var gridTd2 = '';
        for (var i= 0; i<nLen; i++) {
            var val = item.pointPassData[i];
            if (1 == val) {
                if (_this.m_bIsCurrentYear) {
                    if (_this.m_nCurrentMonth == i) {
                        gridTd2 += '<td class="kpiGridGood">' + _this.m_strCurrentGood + '</td>';
                    }
                    else if (i < _this.m_nCurrentMonth) {
                        gridTd2 += '<td class="kpiGridGood">' + _this.m_strGood + '</td>';
                    }
                    else {
                        gridTd2 += '<td></td>';
                    }
                }
                else {
                    gridTd2 += '<td class="kpiGridGood">' + _this.m_strGood + '</td>';
                }
            }
            else if (0 == val) {
                if (_this.m_bIsCurrentYear) {
                    if (_this.m_nCurrentMonth == i) {
                        gridTd2 += '<td class="kpiGridBad">' + _this.m_strCurrentBad + '</td>';
                    }
                    else if (i < _this.m_nCurrentMonth) {
                        gridTd2 += '<td class="kpiGridBad">' + _this.m_strBad + '</td>';
                    }
                    else {
                        gridTd2 += '<td></td>';
                    }
                }
                else {
                    gridTd2 += '<td class="kpiGridBad">' + _this.m_strBad + '</td>';
                }
            }
            else if (-1 == val) {
                gridTd2 += '<td></td>';
            }
            else {}
        }
        gridTr2.append($(gridTd2));
        _this.m_htmlGridTemp.append(gridTr2);
*/
        // recursive
        var nChildNum = item.list.length;
        if (0 == nChildNum) {   // leaf
        }
        else {  // node
            for (var i= 0; i<nChildNum; i++) {
                arguments.callee(item.list[i]);
            }
        }
    }
    ModalPointKpiGrid.prototype.recursiveTreeSetShow = function (item, nFindId, bIsShow) {
        if (nFindId == item.id) {
            for (var i= 0,len=item.list.length; i<len; i++) {
                item.list[i].show = bIsShow;
            }
            return;
        }
        else {
            for (var i= 0,len=item.list.length; i<len; i++) {
                arguments.callee(item.list[i], nFindId, bIsShow);
            }
        }
    }
    ModalPointKpiGrid.prototype.recursiveTreeGetShow = function (item) {
        var arr = [];
        var nLen = item.list.length;
        if (nLen > 0) { // node
            if (item.show) {
                arr.push(item.id);
                for (var i= 0; i<nLen; i++) {
                    var temp = arguments.callee(item.list[i]);
                    arr = arr.concat(temp);
                }
            }
        }
        else {  // leaf
            if (item.show) {
                return [item.id];
            }
        }
        return arr;
    }
    ModalPointKpiGrid.prototype.recursiveTreeGetPointPassId = function (item) {
        var arr = [];
        var nLen = item.list.length;
        if (nLen > 0) { // node
            if (item.show) {
                arr.push(item.pointPass);
                for (var i= 0; i<nLen; i++) {
                    var temp = arguments.callee(item.list[i]);
                    arr = arr.concat(temp);
                }
            }
        }
        else {  // leaf
            if (item.show) {
                return [item.pointPass];
            }
        }
        return arr;
    }
    ModalPointKpiGrid.prototype.recursiveTreeSetPointPassData = function (item, nPtPassId, ptPassData) {
        if (nPtPassId == item.pointPass) {
            item.pointPassData = ptPassData;
            return;
        }
        else {
            for (var i= 0,len=item.list.length; i<len; i++) {
                arguments.callee(item.list[i], nPtPassId, ptPassData);
            }
        }
    }
    ModalPointKpiGrid.prototype.insertTreeCtrl = function (groupId, groupName, parentNode, bIsLeaf) {
        var $ul = $('<ul class="nav nav-list kpiTreeGroup" id="tree_' + groupId + '">');
        var $liHd;
        if (bIsLeaf) {
            $liHd = $('<li class="kpiTreeHeader"><span style="margin-left:40px"></span></li>');
        }
        else {
            $liHd = $('<li class="kpiTreeHeader"><img src="/static/images/dataSource/group_head_sel.png" alt="png" class="dsTreeHeaderIcon"></li>');
        }
        var spanName = $('<span class="dsGroupName">' + groupName + '</span>');
        $liHd.append(spanName);

        $liHd.click(function (e) {
            var tar = $(e.currentTarget);
            if (Boolean(tar)) {
                var treeItemId = tar.closest('.kpiTreeGroup')[0].id;
                var num = treeItemId.substring(5);

                //
                var bindRow = tar.next('.rows');
                if (Boolean(bindRow)) {
                    var bIsShow = true;
                    var showFlag = bindRow.eq(0).css('display');
                    if ('block' == showFlag) {  // set none, show = false
                        bIsShow = false;
                    }
                    else {  // set block, show = true
                        bIsShow = true;
                    }

                    _this.recursiveTreeSetShow(_this.m_kpiDataTree, num, bIsShow);
                    var arr = _this.recursiveTreeGetShow(_this.m_kpiDataTree);
                    var arrGrid = [];
                    for (var k= 0,len3=arr.length; k<len3; k++) {
                        arrGrid.push('grid1_' + arr[k]);
                        arrGrid.push('grid2_' + arr[k]);
                    }

                    // arrGrid 存放仅显示的id
                    // 右侧Grid仅显示arrGrid中的行，其余隐藏
                    var body = _this.m_htmlPage.find('#tableCtl tbody tr');
                    for (var i= 0,len=body.length; i<len; i++) {
                        var trFind = false;
                        for (var j= 0,len2=arrGrid.length; j<len2; j++) {
                            if (body[i].id == arrGrid[j]) {
                                trFind = true;
                                break;
                            }
                        }
                        if (!trFind) {
                            $(body[i]).css('display', 'none');
                        }
                        else {
                            $(body[i]).css('display', '');
                        }
                    }

                    // tree action
                    bindRow.slideToggle();
                }
            }
        });
        $ul.prepend($liHd);

        var divLiRow = $('<li class="rows"></li>');
        $ul.append(divLiRow);

        parentNode.append($ul);
    }
    ModalPointKpiGrid.prototype.timeSetting = function (selYear) {
        _this.m_selectYear = selYear;
        var tmNow = new Date();
        var nCurYear = tmNow.getFullYear();
        if (nCurYear == _this.m_selectYear) {
            _this.m_nCurrentMonth = tmNow.getMonth();
            _this.m_nCurrentSeason = Math.floor(_this.m_nCurrentMonth / 3);
            _this.m_bIsCurrentYear = true;
        }
        else {
            _this.m_bIsCurrentYear = false;
        }
    }

    return ModalPointKpiGrid;
}) ();
/**
 * Created by vicky on 2015/9/21.
 */
var ModalReportChapter = (function(){
    function ModalReportChapter(screen, entityParams) {
        if (!entityParams) return;
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
    };
    ModalReportChapter.prototype = new ModalBase();
    ModalReportChapter.prototype.optionTemplate = {
        name:'toolBox.modal.REPORT_CHAPTER',
        parent:0,
        mode:['realTimeDashboard'],
        maxNum: 30,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type: 'ModalReportChapter',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalReportChapter.prototype.show = function(){
        this.init();
    }

    ModalReportChapter.prototype.init = function(){

    }

    ModalReportChapter.prototype.renderModal = function (e) {
        var _this = this;
        var postData = {
            projectId: AppConfig.projectId,
            menuId: this.entity.modal.option.menuId,
            chapter: this.entity.modal.option.chapter,
            unit: this.entity.modal.option.unit
        };
        WebAPI.post('/report/getReportHtml/', postData).done(function(result){
            if(result.success){
                _this.spinner && _this.spinner.stop();
                _this.container.innerHTML = result.data;
                _this.reportScreen = new ReportScreen();
                _this.reportScreen.renderCharts($('#beopReport .report-unit'))
            }else{
                alert(result.msg);
            }
        }).always(function(){
            _this.spinner && _this.spinner.stop();
        });
    }

    ModalReportChapter.prototype.showConfigMode = function () {

    }
    ModalReportChapter.prototype.updateModal = function (points) {

    }
    ModalReportChapter.prototype.setModalOption = function (option) {

    }
    ModalReportChapter.prototype.modalDialog = '\
        <div class="modal-content">\
            <div class="modal-header">\
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>\
                <h4 class="modal-title" id="">Config</h4>\
            </div>\
            <div class="modal-body">\
                <div class="row" style="margin-bottom: 15px;">\
                    <div class="col-xs-4">\
                        <label>Type</label>\
                    </div>\
                    <div class="col-xs-4">\
                        <select id="typeList" class="form-control type"></select>\
                    </div>\
                </div>\
                <div class="row" style="margin-bottom: 15px;">\
                    <div class="col-xs-4">\
                        <label>Chapter</label>\
                    </div>\
                    <div class="col-xs-4" id="chapterList">\
                    </div>\
                </div>\
                <div class="row" style="margin-bottom: 15px;">\
                    <div class="col-xs-4">\
                        <label>Section</label>\
                    </div>\
                    <div class="col-xs-4" id="unitList">\
                    </div>\
                </div>\
            </div>\
            <div class="modal-footer">\
                <div id="configAlert"></div>\
                <button type="button" class="btn btn-primary" id="confirm">Confirm</button>\
            </div>\
        </div>';

    ModalReportChapter.prototype.showConfigModal = function () {
        var _this = this;
        var $dialogModal = $('#dialogModal');
        var $dialogContent = $dialogModal.find('#dialogContent').html(this.modalDialog);
        var $modalBody = $dialogContent.find('.modal-body');
        var $confirm = $dialogContent.find('#confirm');
        $dialogModal.modal('show');
        Spinner.spin($dialogContent.find('.modal-content')[0]);
        WebAPI.get('/report/getReportMenu/' + AppConfig.projectId)
            .done(function(result){
                var $typeList = $modalBody.find('#typeList').empty();
                var $chapterList = $modalBody.find('#chapterList').empty();
                var $unitList = $modalBody.find('#unitList').empty();
                //把数据处理成下拉框
                var typeTemp = '', $firstUnitSelect, $firstChapterSelect;

                if(result.data && result.data.length > 0){
                    for(var i = 0; i < result.data.length; i++){
                        var type = result.data[i];
                        typeTemp += ('<option value="'+ type._id +'" id="'+ i +'">'+ type.text +'</option>');
                        var $selectChapter = $('<select id="chapter_'+ i +'" class="form-control chapter" style="display: none;"></select>');
                        if(type.structure && type.structure.data && type.structure.data.length > 0){
                            $selectChapter.append('<option value="all" class="type">All Chapter</option>')
                            for(var j = 0; j < type.structure.data.length; j++){
                                var chapter = type.structure.data[j];
                                $selectChapter.append('<option value="'+ chapter.name +'" id="'+ j +'" parentId="'+ i +'">'+ chapter.name +'</option>');
                                var $selectUnit = $('<select id="unit_'+ i + '_' + j +'" class="form-control unit" style="display: none;"></select>');
                                if(chapter.units && chapter.units.length > 0){
                                    $selectUnit.append('<option value="all">All Section</option>');
                                    for(var k = 0; k < chapter.units.length; k++){
                                        var unit = chapter.units[k];
                                        $selectUnit.append('<option value="'+ unit.unitName +'" id="'+ k +'" parentId="'+ j +'">'+ unit.unitName +'</option>');
                                    }
                                }else{
                                    $selectUnit.append('<option value="no">No Section</option>');
                                }
                                $unitList.append($selectUnit);
                            }
                        }else{
                           $selectChapter.append('<option value="no" class="type">No Chapter</option>')
                        }
                         $chapterList.append($selectChapter);
                    }
                }else{
                    typeTemp += '<option value="no" class="type">No type</option>';
                }

                $typeList.html(typeTemp);
                $firstChapterSelect = $chapterList.find('select:eq(0)').show();
                $firstUnitSelect = $unitList.find('select:eq(0)').show();
                if($firstChapterSelect.length == 0){
                    $chapterList.append('<select class="form-control chapter no"><option value="no" class="type">No Section</option></select>');
                }
                if($firstUnitSelect.length == 0){
                    $unitList.append('<select class="form-control unit no"><option value="no" class="type">No Section</option></select>');
                }

                //如果是编辑模式,显示已选择选项
                if(_this.entity.modal.option && result.data && result.data.length > 0){
                    var $selectedChapter = undefined;//编辑状态时选择的章对应的下拉框
                    var $selectedUnit = undefined;
                    var $typeOption = undefined;
                    var $chapterOption = undefined;
                    if(_this.entity.modal.option.menuId){
                        $typeList.val(_this.entity.modal.option.menuId);
                        $typeOption = $typeList.find('option[value="'+ _this.entity.modal.option.menuId +'"]');
                    }
                    if(_this.entity.modal.option.chapter != undefined){
                        $chapterList.children().hide();
                        $selectedChapter = $chapterList.find('#chapter_' + $typeOption.attr('id'));
                        $selectedChapter.show()
                        if(_this.entity.modal.option.chapter != ''){//all
                            $selectedChapter.val(_this.entity.modal.option.chapter);
                            $chapterOption = $selectedChapter.find('option[value="'+ _this.entity.modal.option.chapter +'"]');
                        }
                    }
                    if(_this.entity.modal.option.unit != undefined && $chapterOption != undefined && $chapterOption.length > 0){
                        $unitList.children().hide();
                        $selectedUnit = $unitList.find('#unit_'+ $chapterOption.attr('parentId') +'_'+ $chapterOption.attr('id'));
                        $selectedUnit.show()
                        if(_this.entity.modal.option.unit != ''){//all
                            $selectedUnit.val(_this.entity.modal.option.unit)
                        }
                    }
                }


                //attach event
                $modalBody.off('change').on('change','select',function(){
                    //删除累赘dom
                    $modalBody.find('select.no').remove();
                   //如果有下一级选项,显示下一级选项,隐藏不相干选项
                    if($(this).hasClass('type')){//第一级下拉框发生change
                        //第二级下拉框
                        var typeId = $(this).find('option[value="'+ this.value +'"]')[0].id;
                        var $chapterSelect = $('#chapter_'+ typeId);
                        $chapterList.children().hide();
                        $chapterSelect.show();
                        //第三级下拉框
                        var chapterId = $chapterSelect.find('option[value="'+ $chapterSelect[0].value +'"]').attr('id');
                        $unitList.children().hide();
                        if(chapterId){
                             var $unitSelect = $('#unit_' + typeId + '_' + chapterId);
                            $unitSelect.show();
                        }else if($chapterSelect[0].value == 'all'){
                            $unitList.append('<select class="form-control unit no"><option value="all">All Section</option></select>');
                        }else{
                            $unitList.append('<select class="form-control unit no"><option value="no" class="type">No Section</option></select>');
                        }
                    }
                    if($(this).hasClass('chapter')){
                        var $typeList = $('#typeList');
                        var typeId = $typeList.find('option[value="'+ $typeList[0].value +'"]')[0].id;
                        var $chapterSelect = $('#chapter_'+ typeId);
                        var chapterId = $chapterSelect.find('option[value="'+ this.value +'"]').attr('id');
                        $unitList.children().hide();
                        if(chapterId){
                             var $unitSelect = $('#unit_' + typeId + '_' + chapterId);
                            $unitSelect.show();
                        }else if($chapterSelect[0].value == 'all'){
                            $unitList.append('<select class="form-control unit no"><option value="all">All Section</option></select>');
                        }else{
                            $unitList.append('<select class="form-control unit no"><option value="no">No Section</option></select>');
                        }
                    }
                });
                $dialogModal.off('shown.bs.modal').on('shown.bs.modal', function () {

                });
                $dialogModal.off('hidden.bs.modal').on('hidden.bs.modal', function () {
                    $dialogContent.empty();
                });
                $confirm.off('click').on('click', function(){
                    var chapterVal = $chapterList.find('select:not(:hidden)')[0].value;
                    var unitVal = $unitList.find('select:not(:hidden)')[0].value;
                    var menuId = $typeList[0].value;
                    !_this.entity.modal.option && (_this.entity.modal.option = {});
                    _this.entity.modal.option.menuId = menuId == 'no' ? '' : menuId;
                    _this.entity.modal.option.chapter = (chapterVal == 'no' || chapterVal == 'all') ? '' : chapterVal;
                    _this.entity.modal.option.unit = (unitVal == 'no' || unitVal == 'all') ? '' : unitVal;
                    $dialogModal.modal('hide');
                    if(_this.entity.modal.option.menuId && _this.entity.modal.option.menuId != ''){
                        _this.screen.isScreenChange = true;
                    }
                });

            }).fail(function(){

            }).always(function(){
                 Spinner.stop();
            });
    };
    return ModalReportChapter;
})();

/**
 * Created by vicky on 2015/9/21.
 */
var ModalReportFactory = (function(FacReportScreen){

    function ModalReportFactory(screen, entityParams, configModalOpt) {
        if (!entityParams) return;

        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode, configModalOpt);
        this.reportList = [];
        this.getReportWrap();
    };

    ModalReportFactory.prototype = new ModalBase();

    ModalReportFactory.prototype.optionTemplate = {
        name:'toolBox.modal.REPORT_CHAPTER',
        parent:0,
        mode:['realTimeDashboard'],
        maxNum: 30,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type: 'ModalReportFactory',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalReportFactory.prototype.show = function(){
        this.init();
    }

    ModalReportFactory.prototype.init = function(){

    }

    ModalReportFactory.prototype.renderModal = function (e) {
        var _this = this;
        var arr = this.entity.modal.option.arrReport;
        var domWrap = this.container;

        domWrap.style.overflowY = 'auto';

        //todo 支持换肤
        domWrap.innerHTML = '';
        arr.forEach(function (row) {
            var container = document.createElement('div');
            container.style.width = '100%';
            container.style.position = 'relative';
            //TODO 字体颜色
            //container.className = '';//container的背景可能的值:transparent(图片),#fff
            domWrap.appendChild(container);

            // 渲染
            namespace('api.report').renderReport(container, row.pageId, row.chapterId, {
                onlySummary: row.isSummary === 1
            }).done(function(){
                //"查看更多"按钮
                var a = document.createElement('a');
                a.href = '/factory/preview/report/' + row.pageId + '/' + AppConfig.isFactory + '?projectId=' + AppConfig.projectId;
                a.innerText = '查看更多';
                a.target="_blank";
                if(container.offsetHeight > 20){//在PageScreen有固定的高度,按钮固定在左下角
                    a.style.position = 'absolute';
                    a.style.bottom = '20px';
                    a.style.left = '35px';
                }else{//dashboard, 高度自适应
                    a.style.marginTop = '10px';
                    a.style.marginBottom = '30px';
                    a.style.marginLeft = '35px';
                    a.style.color = '#fff';
                }

                a.className = 'btn btn-primary';
                container.appendChild(a);

                var reportName, report, date, title;
                //标题
                for(var i = 0,l = _this.reportList.length; i < l; i++){
                    if(row.pageId === _this.reportList[i].reportId){
                        report = _this.reportList[i];
                        break;
                    }
                }

                if(report){
                    reportName = report.reportName;
                    if(report.period === 'day'){
                        date = new Date().format('MM月dd日')
                    }else if(report.period === 'month'){
                        date = new Date().format('MM月')
                    }
                    title = document.createElement('h4');
                    title.style.marginLeft = '35px';
                    title.innerText = reportName + '-' + date;
                    $(container).prepend(title);
                }
            });
        });

        this.spinner && _this.spinner.stop();
    }

    ModalReportFactory.prototype.showConfigMode = function () {

    };
    ModalReportFactory.prototype.updateModal = function (points) {

    };
    ModalReportFactory.prototype.setModalOption = function (option) {

    };

    ModalReportFactory.prototype.getReportWrap = function () {
        var _this = this, projectId;
        _this.reportList = [];
        //获取项目所有的报表(第一级目录)
        if(AppConfig.project && AppConfig.project.id){
            projectId = AppConfig.project.id;
        }else if(this.entity.modal.option.facProjectId){
            projectId = this.entity.modal.option.facProjectId;
        }

        if(!projectId){
            return;
        }

        WebAPI.get('/factory/getFirstLevelReports/' + projectId).done(function(result){
            if(!result.data || result.data.length == 0) return;
            result.data.forEach(function(item){
                if(item.list && item.list.length > 0){
                    item.list.forEach(function(report){
                        _this.reportList.push(report);
                    });
                }
            });
        })
    };
    ModalReportFactory.prototype.modalDialog = '\
                <style>.btnRemove{height: 34px;line-height: 34px;font-size: 16px;}</style>\
                <div style="position: absolute;top: 0;right: 10px;z-index: 1;padding: 15px 10px;font-size: 24px;">\
                    <span class="glyphicon glyphicon-plus-sign" id="btnAddSummary"></span>\
                </div>\
                <div class="row" style="margin-bottom: 15px;"><div class="col-xs-4 col-xs-offset-1"><input class="form-control" id="title" type="text" placeholder="标题"/></div></div>';

    ModalReportFactory.prototype.showConfigModal = function () {
        var _this = this;
        //this.$dialogModal = $('#modalConfig');
        this.configModal = new ConfigModal(this.configModalOptDefault, this.screen.container, this);
        this.configModal.init();
        this.configModal.modalBody.innerHTML = this.modalDialog;
        this.attachEvents();
        if(this.entity.modal.option && this.entity.modal.option.arrReport){
            this.entity.modal.option.arrReport.forEach(function(report){
                _this.createItem(report);
            });
        }else{
            $('#btnAddSummary', this.configModal.modal).click();
        }

        if(this.entity.modal.title){
            $('#title', this.configModal.modal).val(this.entity.modal.title);
        }

        this.configModal.show();
    };
    ModalReportFactory.prototype.attachEvents = function () {
        var _this = this;
        $('#btnAddSummary', this.configModal.modal).off('click').on('click',function(){
            _this.createItem();
        });

        $('.btnConfirm', this.configModal.modal).off('click').on('click',function(){
            var title = $('#title', _this.configModal.modal).val();
            _this.configModal.hide();

            if(!_this.entity.modal.option) _this.entity.modal.option = {};
            if(!_this.entity.modal.option.arrReport) _this.entity.modal.option.arrReport = [];
            var arrParams = [];
            $('.summaryRow', _this.configModal.modal).each(function(){
                arrParams.push({
                    pageId: $(this).find('.pageList').val(),
                    //chapterId: $(this).find('.typeList').val(),
                    isSummary: $(this).find('.isSummary').prop('checked') ? 1 : 0
                });
            });
            _this.entity.modal.option.arrReport = arrParams;
            _this.entity.modal.option.facProjectId = AppConfig.project.id;
            _this.entity.modal.title = title;

            _this.render();
        });
    };

    ModalReportFactory.prototype.configModalOptDefault= {
        "header" : {
            "needBtnClose" : true,
            "title" : "配置"
        },
        "area" : [
            {
                'type':'footer',
                "widget":[{type:'confirm',opt:{needClose:false}},{type:'cancel'}]
            }
        ],
        result:{}
    };

    // 根据报表id，获取报表的章节列表
    ModalReportFactory.prototype.getChapterListByReportId = function (reportId) {
        // 做深度搜索，从而控制拿到章节的顺序
        return WebAPI.get("/spring/get/" + reportId + '/' + AppConfig.isFactory).then(function (rs) {
            var list = [];
            var data = rs.layout;
            var layouts = rs.layout[0];
            var layout, modal, path = [1];

            while(layout = layouts.shift()) {
                modal = layout.modal;

                // 处理章节号
                if (layout === 'end') {
                    path.pop();
                    path[path.length-1] += 1;
                    continue;
                }

                // 如果是报表，则添加一条记录“全部”
                if (modal.type === 'ReportContainer') {
                    list.push({
                        name: '全部',
                        value: layout.id
                    });
                    // 将当前容器的子控件追加到 layouts 数组的前面
                    // 加个标记位，用于做章节编号的计算
                    layouts.unshift('end');
                    // 追加到前面相当于 DFS，追加到后面相当于 BFS，这里做 DFS
                    layouts = modal.option.layouts.concat(layouts);
                } else if (modal.type === 'ChapterContainer') {
                    list.push({
                        name: '第' + path.join('.') + '章 - ' + (modal.option.chapterTitle || '未命名'),
                        value: layout.id
                    });
                    layouts.unshift('end');
                    layouts = modal.option.layouts.concat(layouts);
                    path.push(1);
                }
            }

            return list;
        });
    };


    ModalReportFactory.prototype.initOption = function($row, report){
        var _this = this;
        var strHtml = '';
        var $pageList = $('.pageList', $row), $isSummary = $('.isSummary', $row);
        if(!report){ report = {}}
        if(report.isSummary == 0){
            $isSummary.prop('checked', false);
        }
        if(this.reportList && this.reportList.length > 0){
            this.reportList.forEach(function(item){
                strHtml += ('<option value="'+ item.reportId +'">'+ item.reportName +'</option>');
            });
            $pageList.append(strHtml);
            setValue($pageList, report.pageId);
        }

        //page更改后,对应的章节数据显示
        $pageList.change(function(){
            var pageVal = this.value;
            var $typeList = $(this).closest('.row').find('.typeList');
            $typeList.children().hide();
            $typeList.children('[parent-id="'+ pageVal +'"]').show();
            $typeList.val($typeList.children('[parent-id="'+ pageVal +'"]:eq(0)').val());
        });

        $('.btnRemove',$row).off('click').on('click', function(){
            for(var i = 0, l = _this.entity.modal.option.arrReport.length; i < l; i++){
                if(_this.entity.modal.option.arrReport[i].pageId === report.pageId){
                    _this.entity.modal.option.arrReport.splice(i,1);
                    break;
                }
            }
            $(this).closest('.summaryRow').remove();
        });

        function setValue($select ,val){
            if(!!val){
                $select.val(val);
            }
        }

        /*function renderType(item){
            var tempStr = '', isShow = '';
            //根据当前pageList的值决定是否显示option
            ($pageList.val() ? $pageList.val(): $pageList.children('option:eq(0)').val())== item._id ? isShow = 'inline-block' : isShow = 'none';

            _this.dictChapter[item._id].forEach(function(i){
                tempStr += ('<option value="'+ i.value +'" parent-id="'+ item._id +'" style="display:'+ isShow +'">'+ i.name +'</option>');
            });
            $typeList.append(tempStr);
            setValue($typeList, report.chapterId);
        }*/
    };

    ModalReportFactory.prototype.createItem = function(report){
        $('.modal-body', this.configModal.modal).append('<div class="row summaryRow" style="margin-bottom: 15px;">\
            <div class="col-xs-4 col-xs-offset-1">\
                <select class="form-control pageList"></select>\
            </div>\
            <div class="col-xs-4">\
                <label class="checkbox-inline form-control" style="border: none;box-shadow: none;"> <input type="checkbox" class="isSummary" checked disabled> 仅显示摘要 </label>\
            </div>\
            <div class="col-xs-2">\
                <span class="glyphicon glyphicon-remove-sign btnRemove"></span>\
            </div>\
        </div>');
        this.initOption($('.modal-body .summaryRow', this.configModal.modal).last(), report);
    };

    return ModalReportFactory;
})();

var ModalInteractConfig = (function ($, window, undefined) {
    var _this;
    function ModalInteractConfig(options) {
        _this = this;
        ModalConfig.call(_this, options);
    }

    ModalInteractConfig.prototype = Object.create(ModalConfig.prototype);
    ModalInteractConfig.prototype.constructor = ModalInteractConfig;

    ModalInteractConfig.prototype.DEFAULTS = {
        htmlUrl: '/static/views/observer/widgets/modalInteract.html'
    };

    ModalInteractConfig.prototype.init = function () {
        this.$contain = $('#modalInteract', this.$wrap);
        this.$btnSubmit = $('.btn-submit', this.$wrap);
        this.$divCfgData = $('.divConfigData', this.$wrap);
        this.$divDataGrid = $('#divDataGrid', this.$wrap);
        this.$divDataTip = $('.dataDragTip', this.$wrap);
        I18n.fillArea(this.$contain);
        this.attachEvents();
    };

    ModalInteractConfig.prototype.recoverForm = function (modal) {
        // clear first
        var item = _this.$divDataGrid.children('.item');
        if (item.length > 0) {
            item.remove();
        }
        if (modal.points) {
            // insert second
            var dictPtStat = modal.option.dictPtStatus;
            if (dictPtStat) {
                var num = 1;
                for (var id in dictPtStat) {
                    this.insertItem(id, dictPtStat[id].unit, num, dictPtStat[id].name, dictPtStat[id].projName);
                    num++;
                }
            }
        }
    };

    ModalInteractConfig.prototype.reset = function () {
    };

    ModalInteractConfig.prototype.attachEvents = function () {
        // init drag
        this.$divCfgData.on('dragover', function (e) {
            e.preventDefault();
            $(e.currentTarget).find('.dataDragTip').addClass('addData');
        });
        this.$divCfgData.on('dragleave', function (e) {
            e.preventDefault();
            $(e.currentTarget).find('.dataDragTip').removeClass('addData');
        });
        this.$divCfgData.on('drop', function(e, arg) {
            $('.addData').removeClass('addData');

            var dragItemId = EventAdapter.getData().dsItemId;
            if (!dragItemId) {
                return;
            }
            var item = _this.$divDataGrid.find('.divDsGridItem');
            var len = item.length;
            if (Object.prototype.toString.call(dragItemId) === '[object Array]') {
                var lens = dragItemId.length;
                for (var j = 0; j < lens; j++) {
                    var isExist = false;
                    for (var i = 0; i < len; i++) {
                        if (dragItemId[j] == item.eq(i).attr('dsid')) {
                            dragItemId.splice(j, 1);
                            lens = lens - 1;
                            j = j - 1;
                            isExist = true;
                            continue;
                        } 
                    }
                    if (!isExist) { 
                        dotAdd(dragItemId[j], 'array');
                    }
                }
                if (lens < 1) { return;}
            } else {
                // check if repeat
                var bFind = false;
                for (var i = 0; i < len; i++) {
                    if (dragItemId == item.eq(i).attr('dsid')) {
                        bFind = true;
                        break;
                    } 
                }
                if (bFind) {
                    return;
                }
                dotAdd(dragItemId);
            }
            function dotAdd(dragItemId, isArray) {
                // num less equal than 20
                if (len >= 20) {
                    return;
                }
                
                if (dragItemId) {
                    var item = AppConfig.datasource.getDSItemById(dragItemId);
                    if (item && item.alias) {
                        var parent = _this.options.modalIns;
                        var prjName;
                        if (parent) {
                            var temp = parent.getProjectNameFromId(item.projId, parent.m_langFlag);
                            if (0 == parent.m_langFlag) {
                                prjName = '项目名：' + temp;
                            }
                            else {
                                prjName = 'Project Name:' + temp;
                            }
                        }
                        _this.insertItem(dragItemId, '', len + 1, item.alias, prjName);
                        len = _this.$divDataGrid.find('.divDsGridItem').length;
                    }
                }
            }
        });

        // submit EVENTS
        this.$btnSubmit.off().click(function (e) {
            var modalIns = _this.options.modalIns;
            var modal = modalIns.entity.modal;

            // save to modal
            modal.points = [];
            if (!modal.option) {
                modal.option = {}
                modal.option.dictPtStatus = {};
            }
            if (modal.option) {
                modal.option.dictPtStatus = {};
            }
            var arrGrid = _this.$divDataGrid.find('.grow');
            for (var i = 0, len = arrGrid.length; i < len; i++) {
                var item = arrGrid.eq(i);
                var id = item.attr('dsid');
                var name = item.find('input').val();
                var proName = item.find('.contentDS').attr('title');
                modal.points.push(id);
                modal.option.dictPtStatus[id] = {show:((0 == i) ? true : false), count:i, unit:'', name:name, projName:proName};
            }
            if (!modal.option.timeMode) {
                // set default values
                var tmEnd = new Date();
                tmEnd.setHours(23);
                tmEnd.setMinutes(59);
                var tmStart = new Date();
                tmStart.setTime(tmEnd.getTime() - 172800000);
                tmStart.setHours(0);
                tmStart.setMinutes(0);
                modal.option.timeMode = 'recent';
                modal.option.interval = 'h1';
                modal.option.timeStart = tmStart.format('yyyy-MM-dd HH:mm:00');
                modal.option.timeEnd = tmEnd.format('yyyy-MM-dd HH:mm:00');
                modal.option.periodVal = 3;
                modal.option.periodUnit = 'day';
                modal.interval = 3;
            }

            // close modal
            _this.$modal.modal('hide');
            e.preventDefault();
        });
    };

    ModalInteractConfig.prototype.insertItem = function(id, unit, num, name, projName) {
        if (name == undefined) {
            name = AppConfig.datasource.getDSItemById(id).alias;
        }
        if (!projName) {
            projName = '';
        }
        var $item = $('<div class="col-lg-3 col-xs-4 divDsGrid item">\
            <span class="divDsGridNum">' + num + '</span>\
            <span class="divDsGridItem grow" dsid="' + id + '">\
                <span class="contentDS" title="' + projName + '">' + name + '</span>\
                <input type="text" value="' + name + '" style="display:none">\
                <span class="glyphicon glyphicon-remove btnRemoveDS" aria-hidden="true"></span>\
            </span></div>');
                //<input type="text" class="form-control dsUnit" value="' + unit + '">
        $item.click(function (e) {
            var $tar = $(e.currentTarget);
            var $name = $tar.find('.contentDS');
            var $input = $tar.find('input');
            $name.hide();
            $input.show();
            $input.focus();
            $input.select();
            $input.keyup(function (e) {
                if (13 == e.keyCode) {
                    var newVal = $input.val();
                    $name.text(newVal);
                    $input.blur();
                }
            });
            $input.blur(function (e) {
                $input.val($name.text());
                $name.show();
                $input.hide();
            });
        })
        _this.$divDataTip.before($item);

        _this.$divDataGrid.find('.btnRemoveDS').last().click(function (e) {
            var $dsGrid = $(e.currentTarget).closest('.divDsGrid');
            if ($dsGrid) {
                $dsGrid.remove();
            }
            var gridNum = _this.$divDataGrid.find('.divDsGridNum');
            if (gridNum) {
                for (var i = 0; i < gridNum.length; i++) {
                    gridNum.eq(i).text(i+1);
                }
            }
        });
        _this.$divDataGrid.find('.contentDS').last().dblclick(function (e) {
            var $spanTar = $(e.currentTarget);
            var name = $spanTar.text();
            var $inputName = $spanTar.next('input');
            $inputName.keydown(function (e) {
                if (13 == e.keyCode) {
                    var $inputTar = $(e.currentTarget);
                    var newName = $inputTar.val();
                    $inputTar.hide();
                    $spanTar.text(newName);
                    $spanTar.show();
                }
            });
            $inputName.blur(function (e) {
                var $inputTar = $(e.currentTarget);
                var newName = $inputTar.val();
                $inputTar.hide();
                $spanTar.text(newName);
                $spanTar.show();
            });
            $spanTar.hide();
            $inputName.show();
            $inputName.focus();
            $inputName.select();
        });
    };

    ModalInteractConfig.prototype.destroy = function () {
        this.detachEvents();
        this.$wrap.remove();
    };

    return ModalInteractConfig;
} (jQuery, window));


var ModalInteract = (function(){
    var _this;
    var g_dictChart = {};
    function ModalInteract(screen, entityParams) {
        _this = this;
        if (!entityParams) return;
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this._showConfig);
        this.modal = entityParams.modal;
        this.modalId = entityParams.id;
        this.chart = echarts.init(this.container, AppConfig.chartTheme);
        this.m_langFlag = ('zh' == localStorage['language']) ? 0 : 1;   // 0：zh，1：en
        this.m_lang = I18n.resource.dataSource;
        this.screen = screen;
        this.init();
        this.arrColor = echarts.config.color;
        //this.arrColor = ['#03d5c6', '#288add', '#95f31c', '#fbef31', '#fbbf05', '#d06e0f', '#f34704', '#d60609', '#f903d9', '#a505d9', '#c088f9', '#6421cb', '#7575fa', '#2609d1', '#1671fb', '#18a0a3', '#5bbcd2', '#00bdfb', '#00fd44', '#00febe'];
        this.timeFlag = undefined;
        this.arrModal = screen.store.layout[0];
        g_dictChart[this.modalId] = {chart:this.chart, contain:this.container};
        this.spinner.spin(this.container);
    };
    ModalInteract.prototype = new ModalBase();
    ModalInteract.prototype.optionTemplate = {
        name:'toolBox.modal.INTERACT_CHART',
        parent:0,
        mode:'custom',
        maxNum: 10,
        title:'',
        minHeight:3,
        minWidth:9,
        maxHeight:12,
        maxWidth:12,
        type:'ModalInteract',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalInteract.prototype.defaultOptions = {
        title : {
            text: ''
        },
        tooltip : {
            trigger: 'axis'
        },
        toolbox: {
            show : false,
            feature : {
                dataView : {show: true, readOnly: false},
                magicType : {show: true, type: ['line', 'bar']},
                restore : {show: true},
                saveAsImage : {show: true}
            }
        },
        dataZoom: {
            show: true
        },
        yAxis : [
            {
                type : 'value',
                axisLabel : {
                    textStyle: {
                        color: '#777'
                    }
                },
                splitLine: {
                    show: true,
                    lineStyle: {
                        color: '#777',
                        width: 1,
                        type: 'dashed'
                    }
                }
            }
        ],
        animation: false,
        grid: [{
             bottom: 70
         }]
    };

    ModalInteract.prototype.init = function() {
        var containWidth = $(this.container).width();
        var containHeight = $(this.container).height();
        var $divLeftPart = $('<div style="display:inline-block;height:100%"></div>');
        $divLeftPart.css('width', containWidth-220 + 'px');
        var $divChartCtrl = $('<div id="chartShow"></div>');
        $divChartCtrl.css('height', containHeight-10 + 'px');

        //var $divTimeCtrl = $('<div style="height:100px;margin:20px 0 0 20px;"></div>');
        //this.initInteractTime($divTimeCtrl);
        $divLeftPart.append($divChartCtrl);
        //$divLeftPart.append($divTimeCtrl);

        var $divDataCtrl = $('<div id="dataList" style="display:inline-block;position:absolute;top:10px;right:0;width:220px;height:100%;overflow-y:auto"><div class="form-group"></div></div>');
        if (this.modal.points && this.modal.option.dictPtStatus) {
            var arrId = []
            for (var id in this.modal.option.dictPtStatus) {
                arrId.push(id);
            }
            var arrItem = AppConfig.datasource.getDSItemById(arrId);
            for (var id in this.modal.option.dictPtStatus) {
                for (var m = 0; m < arrItem.length; m++) {
                    if (id == arrItem[m].id) {
                        var name = this.modal.option.dictPtStatus[id].name;     // arrItem[m].alias;
                        var unit = this.modal.option.dictPtStatus[id].unit;
                        this.insertInteractData($divDataCtrl, id, name, unit);

                        //var prjName = _this.getProjectNameFromId(arrItem[m].projId, _this.m_langFlag);
                        var target = $divDataCtrl.find('.form-inline').last();
                        if (0 == arrItem[m].type) {
                            //this.setToolTips(target, name, prjName, arrItem[m].value, arrItem[m].note);
                        }
                        else if (1 == arrItem[m].type) {
                            var showFormula = AppConfig.datasource.getShowNameFromFormula(arrItem[m].value);
                            this.setFormulaToolTips(target, name, showFormula, arrItem[m].note);
                        }
                        break;
                    }
                }
                //var name = AppConfig.datasource.getDSItemById(id).alias;
                //var unit = this.modal.option.dictPtStatus[id].unit;
                //this.insertInteractData($divDataCtrl, id, name, unit);
            }
        }

        $(this.container).empty();
        $(this.container).append($divLeftPart);
        $(this.container).append($divDataCtrl);
    }

    ModalInteract.prototype.renderModal = function (e) {
        this.drawCharts();
        this.spinner.stop();
    }

    ModalInteract.prototype.updateModal = function (e) {
        // update chart
        var dsId = e[0].dsItemId;
        var modeName;
        for (var i = 0; i < _this.arrModal.length; i++) {
            var arrPt = _this.arrModal[i].modal.points;
            for (var j = 0; j < arrPt.length; j++) {
                if (dsId == arrPt[j]) {
                    modeName = _this.arrModal[i].modal.option.timeMode;
                    break;
                }
            }
            if (modeName) {
                break;
            }
        }
        if ('recent' == modeName) {
            var newOption = _this.chart.getOption();
            //var newOption = (g_dictChart[modeId].chart).getOption();
            var newSeries = newOption.series;
            var arrId = [];
            for (var i = 0, len = e.length; i < len; i++) {
                arrId.push(e[i].dsItemId);
            }
            var arrItem = AppConfig.datasource.getDSItemById(arrId);
            for (var i = 0, len = e.length; i < len; i++) {
                var id = e[i].dsItemId;
                for (var m = 0; m < arrItem.length; m++) {
                    if (id == arrItem[m].id) {
                        var name = arrItem[m].alias;
                        var bFind = false;
                        var j = 0;
                        for (var len2 = newSeries.length; j < len2; j++) {
                            if (name == newSeries[j].name) {
                                bFind = true;
                                break;
                            }
                        }
                        if (bFind) {    // append new data
                            var flag = false;
                            for (var k = 0; k < newSeries[j].data.length; k++) {
                                if (undefined == newSeries[j].data[k]) {
                                    newSeries[j].data[k] = e[i].data;
                                    flag = true;
                                    break;
                                }
                            }
                            if (!flag) {
                                newSeries[j].data.push(e[i].data);
                            }
                        }
                        break;
                    }
                }
            }
            _this.chart.setOption(newOption);
            _this.chart.refresh();
        }

        // update data list
        var spanReal = $('#dataList').find('.frontCtrl');
        if (spanReal) {
            for (var j = 0, len2 = e.length; j < len2; j++) {
                var id = e[j].dsItemId;
                for (var k = 0, len3 = spanReal.length; k < len3; k++) {
                    if (id == spanReal.eq(k).attr('pId')) {
                        spanReal.eq(k).find('.interactRealVal').text(e[j].data);
                        break;
                    }
                }
            }
        }
    }

    ModalInteract.prototype.showConfigModal = function () {
        this.configModal.setOptions({modalIns: this});
        this.configModal.show();
    }
    ModalInteract.prototype._showConfig = function () {};

    ModalInteract.prototype.setModalOption = function (option) {
    }

    ModalInteract.prototype.drawCharts = function (parmOption, parmChart, parmContain) {
        if (!parmOption) {
            parmOption = _this.modal.option;
        }
        if (!parmChart) {
            parmChart = _this.chart;
        }
        if (!parmContain) {
            parmContain = _this.container;
        }
        if (parmOption) {
            // filter points
            var arrPoints = [];
            for (var itemId in parmOption.dictPtStatus) {
                if (parmOption.dictPtStatus[itemId].show) {
                    arrPoints.push(itemId);
                }
            }
            if (0 == arrPoints.length) {
                parmChart.clear();
                _this.setDataListColor();
                return;
            }
            if ('recent' == parmOption.timeMode) {
                var tmEnd = new Date();
                tmEnd.setHours(23);
                tmEnd.setMinutes(59);
                var tmTemp = tmEnd.getTime() - 86400000 * (parmOption.periodVal - 1);
                var tmStart = new Date();
                tmStart.setTime(tmTemp);
                tmStart.setHours(0);
                tmStart.setMinutes(0);
                parmOption.timeStart = tmStart.format('yyyy-MM-dd HH:mm:00');
                parmOption.timeEnd = tmEnd.format('yyyy-MM-dd HH:mm:00');
            }

            WebAPI.post('/analysis/startWorkspaceDataGenHistogram', {
                dsItemIds: arrPoints,
                timeStart: new Date(parmOption.timeStart).format('yyyy-MM-dd HH:mm:00'),
                timeEnd: new Date(parmOption.timeEnd).format('yyyy-MM-dd HH:mm:00'),
                timeFormat: parmOption.interval
            }).done(function (result) {
                if (result.timeShaft.length <= 0) {
                    parmChart = echarts.init($(parmContain, AppConfig.chartTheme).find('#chartShow')[0]).clear();
                    return;
                }
                var arrName = [];
                var series = [];
                var arrId = [];
                var arrItem = [];
                for (var i = 0, len = result.list.length; i < len; i++) {
                    arrId.push(result.list[i].dsItemId);
                }
                arrItem = AppConfig.datasource.getDSItemById(arrId);
                var cntNow = (new Date()).getTime();
                var dictLastData = {};
                for (var i = 0, len = result.list.length; i < len; i++) {
                    var id = result.list[i].dsItemId;
                    for (var m = 0; m < arrItem.length; m++) {
                        if (id == arrItem[m].id) {
                            var showData = [];
                            var lastData;
                            var flag = false;
                            if ('recent' == parmOption.timeMode) {  // recent cycle
                                var n = 0;
                                for (; n < result.timeShaft.length; n++) {
                                    if (Date.parse(result.timeShaft[n]) > cntNow) {
                                        //break;
                                        if (!flag) {
                                            lastData = result.list[i].data[n];
                                            flag = true;
                                        }
                                        showData.push(undefined);
                                    }
                                    else {
                                        showData.push(result.list[i].data[n]);
                                    }
                                }
                                //showData = (result.list[i].data).slice(0, n);
                                dictLastData[id] = lastData;
                            }
                            else {  // fixed cycle
                                showData = result.list[i].data;
                            }
                            var name = arrItem[m].alias;
                            arrName.push(name);
                            var count = parmOption.dictPtStatus[id].count;
                            var color = _this.arrColor[count];
                            series.push({
                                name: name,
                                type: 'line',
                                data: showData,
                                itemStyle: {
                                    normal: {
                                        color: color
                                    }
                                }
                            });
                            break;
                        }
                    }
                }
                //for (var i = 0, len = arrItem.length; i < len; i++) {
                //    var item = arrItem[i];
                //    var name = item.alias;
                //    arrName.push(name);
                //    var count = _this.modal.option.dictPtStatus[id].count;
                //    var color = _this.arrColor[count];
                //    series.push({
                //        name: name,
                //        type: 'line',
                //        data: result.list[i].data,
                //        itemStyle: {
                //            normal : {
                //                color: color
                //            }
                //        }
                //    });
                //}
                var options = {
                    legend: {
                        show: false,
                        data: arrName
                    },
                    xAxis: [{
                        type : 'category',
                        boundaryGap : false,
                        data : result.timeShaft,
                        axisLabel: {
                            textStyle: {
                                color: '#777'
                            }
                        },
                        splitLine: {
                            show: true,
                            lineStyle: {
                                color: '#777',
                                width: 1,
                                type: 'dashed'
                            }
                        }
                    }],
                    series : series
                }
                var drawOptions = {}
                jQuery.extend(drawOptions, ModalInteract.prototype.defaultOptions, options);
                parmChart = echarts.init($(parmContain).find('#chartShow')[0], AppConfig.chartTheme);
                parmChart.setOption(drawOptions);
                _this.chart = parmChart;
                _this.setDataListColor(parmContain);

                // set last data in recent mode
                if ('recent' == parmOption.timeMode) {
                    var spanReal = $(parmContain).find('.frontCtrl');
                    if (spanReal) {
                        for (var p = 0; p < spanReal.length; p++) {
                            var $item = spanReal.eq(p);
                            var id = $item.attr('pid');
                            $item.find('.interactRealVal').text(dictLastData[id]);
                        }
                    }
                }
                else {
                    var spanReal = $(parmContain).find('.frontCtrl');
                    if (spanReal) {
                        for (var p = 0; p < spanReal.length; p++) {
                            var $item = spanReal.eq(p);
                            var id = $item.attr('pid');
                            $item.find('.interactRealVal').text('');
                        }
                    }
                }
            });
        }
    }

    ModalInteract.prototype.drawChartsEx = function (parmOption, modalId) {
        _this.drawCharts(parmOption, g_dictChart[modalId].chart, g_dictChart[modalId].contain);
    }

    ModalInteract.prototype.insertInteractData = function ($divDst, ptId, ptName, ptUnit) {
        $divDst.append('\
            <form class="form-inline">\
                <span class="form-control frontCtrl interactDsFrame" pId="' + ptId + '" style="cursor:pointer;width:200px;border-radius: 0em 0em 0em 0em;margin-right: -4px;border-width: 0;color: #ccc;border-bottom:1px solid #465b85;">\
                    <span class="interactSpanDsName" style="display:inline-block;width:100px;overflow: hidden;text-overflow:ellipsis;white-space: nowrap;vertical-align: bottom;">' + ptName + '</span>\
                    <span class="interactRealVal" style="display:inline-block;width:70px;overflow: hidden;text-overflow:ellipsis;white-space:nowrap;vertical-align:bottom;"></span>\
                </span>\
            </form>\
        ');
        //<input type="text" class="form-control" value="' + ptUnit + '" style="cursor:pointer;width:40px;border-radius: 0 0.5em 0.5em 0;background-color:#465b85;color: #ccc;border:1px solid #465b85;" readonly>\
        var $front = $divDst.find('.frontCtrl');
        $front.off().click(function (e) {
            if (_this.modal.option && _this.modal.option.dictPtStatus) {
                var $tar = $(e.currentTarget);
                var id = $tar.attr('pId');

                var $contain = $tar.closest('.springContainer');
                var modalId;
                if ($contain) {
                    var temp = $contain.attr('id');
                    modalId = temp.split('_')[1];
                    for (var i = 0; i < _this.arrModal.length; i++) {
                        var item = _this.arrModal[i];
                        if (modalId == item.id) {
                            item.modal.option.dictPtStatus[id].show = !item.modal.option.dictPtStatus[id].show;
                            break;
                        }
                    }
                }
                //_this.modal.option.dictPtStatus[id].show = !_this.modal.option.dictPtStatus[id].show;
                _this.screen.saveLayoutOnly();
                _this.drawCharts(item.modal.option, g_dictChart[modalId].chart, g_dictChart[modalId].contain);
            }
        })
    }

    ModalInteract.prototype.initInteractTime = function ($divDst) {
        $divDst.append('\
            <form class="form-inline" style="margin-top: 3px;font-family:Microsoft YaHei;font-size:14px">\
                <div class="form-group" style="width:140px">\
                    <label for="selMode" style="display:block;color:#fafcfd">' + I18n.resource.modalConfig.option.LABEL_MODE + '</label>\
                    <select class="form-control" id="selMode" style="background-color:#f4f6f8;border:1px solid #465b85;color:#646464;width:inherit">\
                        <option value="fixed">' + I18n.resource.modalConfig.option.MODE_FIXED + '</option>\
                        <option value="recent">' + I18n.resource.modalConfig.option.MODE_RECENT + '</option>\
                    </select>\
                </div>\
                <div class="form-group" style="width:120px">\
                    <label for="selInterval" style="display:block;color:#fafcfd">' + I18n.resource.modalConfig.option.LABEL_INTERVAL + '</label>\
                    <select class="form-control" id="selInterval" style="background-color:#f4f6f8;border:1px solid #465b85;color:#646464;width:inherit">\
                        <option value="m1">' + I18n.resource.modalConfig.option.INTERVAL_MIN1 + '</option>\
                        <option value="m5">' + I18n.resource.modalConfig.option.INTERVAL_MIN5 + '</option>\
                        <option value="h1">' + I18n.resource.modalConfig.option.INTERVAL_HOUR1 + '</option>\
                        <option value="d1">' + I18n.resource.modalConfig.option.INTERVAL_DAY1 + '</option>\
                        <option value="M1">' + I18n.resource.modalConfig.option.INTERVAL_MON1 + '</option>\
                    </select>\
                </div>\
                <div class="form-group" id="divTmRange" style="width:380px">\
                    <label for="divRange" style="display:block;color:#fafcfd">' + I18n.resource.modalConfig.option.LABEL_TIME_RANGE + '</label>\
                    <div id="divRange" style="display:inline">\
                        <input class="form-control" type="text" id="tmStart" style="width:165px;cursor:pointer;text-align:center" readonly>\
                        <span class="input-group-addon" style="display: inline;padding-top:6px;padding-bottom:7px;text-align:center;border:1px solid rgb(39, 51, 75);color:#646464;margin-right:-6px;background-color:#f4f6f8;">' + I18n.resource.modalConfig.option.TIP_RANGE_TO + '</span>\
                        <input class="form-control" type="text" id="tmEnd" style="width:165px;cursor:pointer;text-align:center" readonly>\
                    </div>\
                </div>\
                <div class="form-group" id="divTmLast" style="width:340px;display:none">\
                    <label for="divLast" style="display:block;color:#fafcfd">' + I18n.resource.modalConfig.option.LABEL_PERIOD + '</label>\
                    <div id="divLast">\
                        <input class="form-control" type="text" id="inputPeriodValue" style="width:165px;background-color:#f4f6f8;border:1px solid #27334b;border-radius:0.5em 0 0 0.5em;margin-right:-5px;color:#646464">\
                        <select class="form-control" id="selPeriodUnit" style="width:165px;background-color:#f4f6f8;border:1px solid #27334b;border-radius:0 0.5em 0.5em 0;color:#646464">\
                            <option value="hour">' + I18n.resource.modalConfig.option.PERIOD_UNIT_HOUR + '</option>\
                            <option value="day">' + I18n.resource.modalConfig.option.PERIOD_UNIT_DAY + '</option>\
                            <option value="month">' + I18n.resource.modalConfig.option.PERIOD_UNIT_MON + '</option>\
                        </select>\
                    </div>\
                </div>\
                <button class="btn" type="button" id="btnOk" modalId="' + _this.modalId + '" style="width:70px;vertical-align:bottom;color:#f4f6f8;background-color:#288add;">' + I18n.resource.observer.widgets.YES + '</button>\
            </form>\
        ');

        var $selMode = $divDst.find('#selMode');
        var $selInter = $divDst.find('#selInterval');
        var $divTmRange = $divDst.find('#divTmRange');
        var $divTmLast = $divDst.find('#divTmLast');
        $selMode.change(function (e) {
            var $opt = $selInter.children('option');
            var flag = $(e.currentTarget).val();
            switch(flag) {
                case 'fixed':
                    $opt.eq(0).css('display', 'block');
                    $opt.eq(1).css('display', 'block');
                    $opt.eq(2).css('display', 'block');
                    $opt.eq(3).css('display', 'block');
                    $opt.eq(4).css('display', 'block');
                    $divTmRange.css('display', 'inline-block');//
                    $divTmLast.css('display', 'none');
                    break;
                case 'recent':
                    $opt.eq(0).css('display', 'block');
                    $opt.eq(1).css('display', 'block');
                    $opt.eq(2).css('display', 'block');
                    $opt.eq(3).css('display', 'block');
                    $opt.eq(4).css('display', 'none');
                    $divTmRange.css('display', 'none');
                    $divTmLast.css('display', 'inline-block');//
                    break;
                default:
                    break;
            }
        });

        var tmNow = new Date();
        var tmStart = new Date();
        tmStart.setFullYear(tmNow.getFullYear() - 10);
        var $inputStart = $divDst.find('#tmStart');
        $inputStart.val(tmNow.format('yyyy-MM-dd HH:mm:00'));
        $inputStart.css('background-color', '#f4f6f8');
        $inputStart.css('border', '1px solid #27334b');
        $inputStart.css('color', '#646464');
        $inputStart.css('border-radius', '0.5em 0 0 0.5em');
        $inputStart.css('margin-right', '-5px');
        $inputStart.datetimepicker({
            format: 'yyyy-mm-dd hh:mm:00',
            startView: 'month',
            minView: 'hour',
            autoclose: true,
            todayBtn: false,
            pickerPosition: 'top-right',
            initialDate: tmNow,
            startDate: tmStart,
            endDate: tmNow,
            keyboardNavigation: false
        }).off('changeDate').on('changeDate',function(ev){
        });
        var $inputEnd = $divDst.find('#tmEnd');
        $inputEnd.val(tmNow.format('yyyy-MM-dd HH:mm:00'));
        $inputEnd.css('background-color', '#f4f6f8');
        $inputEnd.css('border', '1px solid #27334b');
        $inputEnd.css('color', '#646464');
        $inputEnd.css('border-radius', '0 0.5em 0.5em 0');
        $inputEnd.datetimepicker({
            format: 'yyyy-mm-dd hh:mm:00',
            startView: 'month',
            minView: 'hour',
            autoclose: true,
            todayBtn: false,
            pickerPosition: 'top-right',
            initialDate: tmNow,
            startDate: tmStart,
            endDate: tmNow,
            keyboardNavigation: false
        }).off('changeDate').on('changeDate',function(ev){
        });

        var $inputPerVal = $divDst.find('#inputPeriodValue');
        var $selPerUnit = $divDst.find('#selPeriodUnit');
        var $btnOk = $divDst.find('#btnOk');
        $btnOk.off().click(function (e) {
            var tmMode = $selMode.val();
            var strStart, strEnd;
            if ('fixed' == tmMode) {
                strStart = $inputStart.val();
                strEnd = $inputEnd.val();
            }
            else if ('recent' == tmMode) {
                var tmStart = new Date();
                var periodVal = parseInt($inputPerVal.val());
                if (!periodVal) {
                    alert('Please input time !');
                    return;
                }
                var periodUnit = $selPerUnit.val();
                switch (periodUnit) {
                    case 'hour':
                        var time = tmNow.getTime() - 3600000 * periodVal;
                        tmStart.setTime(time);
                        break;
                    case 'day':
                        var time = tmNow.getTime() - 86400000 * periodVal;
                        tmStart.setTime(time);
                        break;
                    case 'month':
                        var month = tmNow.getMonth();
                        if (0 == month) {
                            tmStart.setFullYear(tmNow.getFullYear() - 1);
                            tmStart.setMonth(11);
                        }
                        else {
                            tmStart.setMonth(month - 1);
                        }
                        break;
                    default :
                        break;
                }
                strStart = tmStart.format('yyyy-MM-dd HH:mm:00');
                strEnd = tmNow.format('yyyy-MM-dd HH:mm:00');
            }
            else {
                alert('Please select mode !');
                return;
            }

            var modalId = $(e.currentTarget).attr('modalId');
            if (modalId) {
                for (var i = 0; i < _this.arrModal.length; i++) {
                    var item = _this.arrModal[i];
                    if (item) {
                        if (modalId == item.id) {
                            if (!item.modal.option) {
                                item.modal.option = {};
                                item.modal.option.dictPtStatus = {};
                            }
                            item.modal.option.timeMode = tmMode;
                            item.modal.option.interval = $selInter.val();
                            item.modal.option.timeStart = strStart;
                            item.modal.option.timeEnd = strEnd;
                            item.modal.option.periodVal = periodVal;
                            item.modal.option.periodUnit = periodUnit;
                            if ('recent' == tmMode) {
                                item.interval = 1000;
                            }
                            else {
                                item.interval = null;
                            }
                            break;
                        }
                    }
                }
            }
            _this.screen.saveLayoutOnly();
            _this.drawCharts(item.modal.option, g_dictChart[modalId].chart, g_dictChart[modalId].contain);
        });

        if (_this.modal.option) {
            $selMode.val(_this.modal.option.timeMode);
            $selInter.val(_this.modal.option.interval);
            $inputStart.val(_this.modal.option.timeStart);
            $inputEnd.val(_this.modal.option.timeEnd);
            $inputPerVal.val(_this.modal.option.periodVal);
            $selPerUnit.val(_this.modal.option.periodUnit);
            if ('recent' == _this.modal.option.timeMode) {
                $selMode.change();
            }
        }
    }

    ModalInteract.prototype.setDataListColor = function (contain) {
        var dataListName;
        if (!contain) {
            dataListName = $('#dataList').find('.frontCtrl');
        }
        else {
            dataListName = $(contain).find('.frontCtrl');
        }
        if (dataListName) {
            for (var j = 0, len = dataListName.length; j < len; j++) {
                var $item = dataListName.eq(j);
                var id = $item.attr('pId');

                var $contain = $item.closest('.springContainer');
                var modalId;
                if ($contain) {
                    var temp = $contain.attr('id');
                    modalId = temp.split('_')[1];
                    for (var i = 0; i < _this.arrModal.length; i++) {
                        var item = _this.arrModal[i];
                        if (modalId == item.id) {
                            //item.modal.option.dictPtStatus[id].show = !item.modal.option.dictPtStatus[id].show;
                            var count = item.modal.option.dictPtStatus[id].count;
                            var bShow = item.modal.option.dictPtStatus[id].show;
                            var $spanDsName = $item.find('.interactSpanDsName');
                            if ($spanDsName) {
                                if (bShow) {
                                    $spanDsName.css('color', _this.arrColor[count]);
                                }
                                else {
                                    $spanDsName.css('color', '');
                                }
                            }
                            //$item.attr('class', 'form-control frontCtrl interactDsFrame');
                            break;
                        }
                    }
                }
            }
        }
    }

    ModalInteract.prototype.setToolTips = function (target, customName, projectName, pointName, pointDesc) {
        var show = new StringBuilder();
        show.append('<div class="tooltip" role="tooltip" style="z-index:10;position:fixed;max-width:300px">');
        show.append('    <div class="tooltipContent interactTipsBackground">');
        show.append('        <p class="customName interactTipsStyle"><span class="interactTipsTitleStyle">').append(_this.m_lang.CUSTOM_NAME).append('</span>: ').append(customName).append('</p>');
        show.append('        <p class="projectName interactTipsStyle"><span class="interactTipsTitleStyle">').append(_this.m_lang.PROJECT_NAME).append('</span>: ').append(projectName).append('</p> ');
        show.append('        <p class="pointName interactTipsStyle"><span class="interactTipsTitleStyle">').append(_this.m_lang.POINT_NAME).append('</span>: ').append(pointName).append('</p> ');
        show.append('        <p class="pointDesc interactTipsStyle"><span class="interactTipsTitleStyle">').append(_this.m_lang.POINT_DESC).append('</span>: ').append(pointDesc).append('</p> ');
        show.append('    </div>');
        show.append('    <div class="tooltip-arrow"></div>');
        show.append('</div>');
        var options = {
            placement: 'left',
            title: _this.m_lang.PARAM,
            template: show.toString()
        };
        target.tooltip(options);
    }

    ModalInteract.prototype.setFormulaToolTips = function (target, customName, formula, desc) {
        var show = new StringBuilder();
        show.append('<div class="tooltip" role="tooltip" style="z-index:10;position:fixed;max-width:400px;">');
        show.append('    <div class="tooltipContent interactTipsBackground">');
        show.append('        <p class="customName interactTipsStyle"><span class="interactTipsTitleStyle">').append(_this.m_lang.CUSTOM_NAME).append('</span>: ').append(customName).append('</p>');
        show.append('        <p class="formula interactTipsStyle" style="word-break:normal;"><span class="interactTipsTitleStyle">').append(_this.m_lang.FORMULA_NAME).append('</span>: ').append('</p>');
        show.append('        <p class="pointDesc interactTipsStyle"><span class="interactTipsTitleStyle">').append(_this.m_lang.POINT_DESC).append('</span>: ').append(desc).append('</p>');
        show.append('    </div>');
        show.append('    <div class="tooltip-arrow"></div>');
        show.append('</div>');

        var showFormula = $('<span>' + formula + '</span>');
        var showObj = $(show.toString());
        showFormula.appendTo(showObj.find('.formula')).mathquill();

        var options = {
            placement: 'left',
            title: _this.m_lang.PARAM,
            template: showObj
        };
        target.tooltip(options);
    }

    ModalInteract.prototype.getProjectNameFromId = function (id, langFlag) {
       var name;
       var len = AppConfig.projectList.length;
       var item;
       for (var i = 0; i < len; i++) {
           item = AppConfig.projectList[i];
           if (id == item.id) {
               if (0 == langFlag) {
                   name = item.name_cn;
               }
               else {
                   name = item.name_en;
               }
               break;
           }
       }

       return name;
    }

    ModalInteract.prototype.configModal = new ModalInteractConfig();

    return ModalInteract;
})();
var ModalMobile = (function () {
    function ModalMobile(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        this.m_bIsGoBackTrace = false;
        this.m_traceData = undefined;
        ModalChart.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);
    };

    ModalMobile.prototype = new ModalChart();
    ModalMobile.prototype.optionTemplate = {
        name:'toolBox.modal.MOBILE_CHART',//'ModalHistoryChart',        parent:1,
        parent:1,
        mode:['easyHistory'],
        maxNum: 5,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalMobile'
    };

    ModalMobile.prototype.optionDefault = {
        tooltip: {
            trigger: 'axis'
        },
        toolbox: {
            show: false,
            feature: {
                dataView : {show: false, readOnly: true},
                magicType : {show: true, type: ['line', 'bar']},
                restore : {show: true},
                saveAsImage : {show: true}
            }
        },
        calculable: false,
        dataZoom: {
            show: true
        },
        grid: (function(){//统一配置grid
            var grid = {
                    borderWidth: 0,
                    borderColor: '#eee',
                    left:50,
                    bottom:40,
                    right:40,
                    top:40
                }
            if(AppConfig.isMobile){
                grid.x = 40;
            }
            return grid;
        }()),
        xAxis: [
            {
                type: 'time',
                splitLine: {show : false}
            }
        ],
        yAxis: [
            {
                type: 'value',
                splitArea: {show : false},
                splitLine: {
                    show:(function(){
                        if(AppConfig.isMobile){
                            return false;
                        }else{
                            return true;
                        }
                    }())
                },
                axisLabel : {
                    formatter: function (value){
                        if(AppConfig.isMobile && value/1000 >= 1){
                            return value/1000 + 'k';
                        }else{
                            return value;
                        }
                    }
                }
            }
        ],
        animation: true
    };

    ModalMobile.prototype.renderModal = function () {

    },

    ModalMobile.prototype.updateModal = function (options) {
    },

    ModalMobile.prototype.showConfigMode = function () {
    },

    ModalMobile.prototype.goBackTrace = function (data) {

    }

    return ModalMobile;
})();



// var ModalMobileWorkDiagnosis = (function () {
//     function ModalMobileWorkDiagnosis(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
//         if (!screen) return;
//         var renderModal = _renderModal ? _renderModal : this.renderModal;
//         var updateModal = _updateModal ? _updateModal : this.updateModal;
//         var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
//         this.m_bIsGoBackTrace = false;
//         this.m_traceData = undefined;
//         ModalMobile.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);
//     };

//     ModalMobileWorkDiagnosis.prototype = new ModalChart();
//     ModalMobileWorkDiagnosis.prototype.optionTemplate = {
//         name:'toolBox.modal.MOBILE_CHART',//'ModalHistoryChart',        parent:1,
//         parent:3,
//         mode:['easyHistory'],
//         maxNum: 5,
//         title:'',
//         minHeight:2,
//         minWidth:3,
//         maxHeight:6,
//         maxWidth:12,
//         type:'ModalMobileWorkDiagnosis'
//     };

//     ModalMobileWorkDiagnosis.prototype.optionDefault = {
//         tooltip: {
//             trigger: 'axis'
//         },
//         toolbox: {
//             show: false,
//             feature: {
//                 dataView : {show: false, readOnly: true},
//                 magicType : {show: true, type: ['line', 'bar']},
//                 restore : {show: true},
//                 saveAsImage : {show: true}
//             }
//         },
//         calculable: false,
//         dataZoom: {
//             show: true
//         },
//         grid: (function(){//统一配置grid
//             var grid = {
//                     borderWidth: 0,
//                     borderColor: '#eee',
//                     left:50,
//                     bottom:40,
//                     right:40,
//                     top:40
//                 }
//             if(AppConfig.isMobile){
//                 grid.x = 40;
//             }
//             return grid;
//         }()),
//         xAxis: [
//             {
//                 type: 'time',
//                 splitLine: {show : false}
//             }
//         ],
//         yAxis: [
//             {
//                 type: 'value',
//                 splitArea: {show : false},
//                 splitLine: {
//                     show:(function(){
//                         if(AppConfig.isMobile){
//                             return false;
//                         }else{
//                             return true;
//                         }
//                     }())
//                 },
//                 axisLabel : {
//                     formatter: function (value){
//                         if(AppConfig.isMobile && value/1000 >= 1){
//                             return value/1000 + 'k';
//                         }else{
//                             return value;
//                         }
//                     }
//                 }
//             }
//         ],
//         animation: true
//     };

//     ModalMobileWorkDiagnosis.prototype.renderModal = function () {
//         this.container.innerHTML = `
//         <div class="panel-heading springHead" style="padding-top:12px;border-bottom-color:#ddd;"><h3 class="panel-title" style="font-weight: bold;">运行诊断概况</h3></div>
//             <div class="operationGuideZone">
//                     <div class="runDiaDetail">
//                         <div class="panel-group" id="accordions">
//                             <div class="panel panel-default">
//                                 <div class="panel-heading zepto-ev active" data-toggle="collapse" data-parent="#accordions" href="#collapseOne">
//                                     <h4 class="panel-title">
//                                         <div>主机系统</div>
//                                     </h4>
//                                 </div>
//                                 <div id="collapseOne" class="panel-collapse collapse in">
//                                     <div class="panel-body collapseTab borderColorTemp4">
//                                         <div class="collapseCells borderColorTemp3">
//                                             <div class="fDD-Detail" style="width:20%;">主机效率</div>
//                                             <div class="fDD-Detail" style="width:15%;" id='fddStr01'></div>
//                                             <div class="fDD-Detail fDD-DetailThr" id='fddStr02'></div>
//                                         </div>
//                                         <div class="collapseCells borderColorTemp3">
//                                             <div class="fDD-Detail" style="width:20%;">负载率</div>
//                                             <div class="fDD-Detail" style="width:15%;" id='fddStr11'></div>
//                                             <div class="fDD-Detail fDD-DetailThr" id='fddStr12'></div>
//                                         </div>
//                                         <div class="collapseCells borderColorTemp3">
//                                             <div class="fDD-Detail" style="width:20%;">趋近温差</div>
//                                             <div class="fDD-Detail" style="width:15%;" id='fddStr21'></div>
//                                             <div class="fDD-Detail fDD-DetailThr" id='fddStr22'></div>
//                                         </div>
//                                         <div class="collapseCells borderColorTemp3">
//                                             <div class="fDD-Detail" style="width:20%;">主机传感器</div>
//                                             <div class="fDD-Detail" style="width:15%;" id='fddStr31'></div>
//                                             <div class="fDD-Detail fDD-DetailThr" id='fddStr32'></div>
//                                         </div>
//                                     </div>
//                                 </div>
//                             </div>
//                             <div class="panel panel-default">
//                                 <div class="panel-heading zepto-ev" data-toggle="collapse" data-parent="#accordions" href="#collapseTwo">
//                                     <h4 class="panel-title">
//                                         <div>冷冻/冷却水系统</div>
//                                     </h4>
//                                 </div>
//                                 <div id="collapseTwo" class="panel-collapse collapse">
//                                     <div class="panel-body collapseTab borderColorTemp4">
//                                         <div class="collapseCells borderColorTemp3">
//                                             <div class="fDD-Detail" style="width:20%;">板换温差</div>
//                                             <div class="fDD-Detail" style="width:15%;" id='fddStr41'></div>
//                                             <div class="fDD-Detail fDD-DetailThr" id='fddStr42'></div>
//                                         </div>
//                                         <div class="collapseCells borderColorTemp3">
//                                             <div class="fDD-Detail" style="width:20%;">冷冻供回水温差</div>
//                                             <div class="fDD-Detail" style="width:15%;" id='fddStr51'></div>
//                                             <div class="fDD-Detail fDD-DetailThr" id='fddStr52'></div>
//                                         <div class="collapseCells borderColorTemp3">
//                                             <div class="fDD-Detail" style="width:20%;">VAV</div>
//                                             <div class="fDD-Detail" style="width:15%;" id='fddStr61'></div>
//                                             <div class="fDD-Detail fDD-DetailThr" id='fddStr62'></div>
//                                         </div>
//                                         <div class="collapseCells borderColorTemp3">
//                                             <div class="fDD-Detail" style="width:20%;">传感器</div>
//                                             <div class="fDD-Detail" style="width:15%;" id='fddStr71'></div>
//                                             <div class="fDD-Detail fDD-DetailThr" id='fddStr72'></div>
//                                         </div>
//                                     </div>
//                                 </div>
//                             </div>
//                             <div class="panel panel-default">
//                                 <div class="panel-heading zepto-ev" data-toggle="collapse" data-parent="#accordions" href="#collapseThree">
//                                     <h4 class="panel-title">
//                                         <div>冰蓄冷/冰槽系统</div>
//                                     </h4>
//                                 </div>
//                                 <div id="collapseThree" class="panel-collapse collapse" style="font-size:16px">
//                                     <div class="panel-body collapseTab borderColorTemp4">
//                                         <div class="collapseCells borderColorTemp3">
//                                             <div class="fDD-Detail" style="width:20%;">制冰效率</div>
//                                             <div class="fDD-Detail" style="width:15%;" id='fddStr81'></div>
//                                             <div class="fDD-Detail fDD-DetailThr" id='fddStr82'></div>
//                                         </div>
//                                         <div class="collapseCells borderColorTemp3">
//                                             <div class="fDD-Detail" style="width:20%;">融冰策略</div>
//                                             <div class="fDD-Detail" style="width:15%;" id='fddStr91'></div>
//                                             <div class="fDD-Detail fDD-DetailThr" id='fddStr92'></div>
//                                         </div>
//                                         <div class="collapseCells borderColorTemp3">
//                                             <div class="fDD-Detail" style="width:20%;">设备状态</div>
//                                             <div class="fDD-Detail" style="width:15%;" id='fddStr101'></div>
//                                             <div class="fDD-Detail fDD-DetailThr" id='fddStr102'></div>
//                                         </div>
//                                         <div class="collapseCells borderColorTemp3">
//                                             <div class="fDD-Detail" style="width:20%;">融释冰传感器</div>
//                                             <div class="fDD-Detail" style="width:15%;" id='fddStr111'></div>
//                                             <div class="fDD-Detail fDD-DetailThr" id='fddStr112'></div>
//                                         </div>
//                                     </div>
//                                 </div>
//                             </div>
//                         </div>
//                     </div>
//                 </div>
//                 `;
//         var $fDD_Detail = $(".fDD-Detail");
//         var $fDD_DetailThr = $(".fDD-DetailThr");
//         var $fDDB = $(".fDDB");
//         var $titleText = $(".titleText");
//         var $collapseTab = $(".collapseTab");
//         var $collapseCells = $(".collapseCells");
//         var $runDiaDetail = $(".runDiaDetail");
//         $fDD_Detail.css({
//             "display": "inline-block",
//             "width": "20%",
//             "margin": "5px",
//             "font-size": "14px",
//             "text-align": "left",
//             "vertical-align": "middle"
//             });
//         $fDD_DetailThr.css("width","50%");
//         $fDDB.css({
//             "display":"none"
//         });
//         $titleText.css({
//             "height":"30px",
//             "font-size":"18px",
//             "width":"98%",
//             "left":"16px"
//         });
//         $collapseTab.css("background","#f0f0f0");
//         $collapseCells.css({
//             "width":"100%",
//             "margin":"5px",
//             "margin-top":"0",
//             "color":"#646464"
//             // "border-bottom":"1px #646464 solid"
//         });
        
//         $runDiaDetail.css({
//             "width":"100%",
//             "overflow-y":"auto"
//         });

//         // 获取历史数据API;
//         // WebAPI.post('/analysis/startWorkspaceDataGenHistogram', {
//         //     //dataSourceId: '',  //_this.screen.store.datasources[0].id,
//         //     dsItemIds: optPtName,//[id1,id2]
//         //     timeStart: startTime,//'2013-11-11 11:11:11'
//         //     timeEnd: endTime,//'2013-11-11 11:11:11'
//         //     timeFormat: timeType//h1:m1:m5:d1:M1
//         // }).done(function (dataSrc) {
//         //     //TODO
//         // }),
//         // this.container.innerHTML = '<div>1111s</div>';
//     },
//     ModalMobileWorkDiagnosis.prototype.updateModal = function (options) {
//         // if(options.length < 1) return;
//         var diagList = [];
//         for(var i = 0;i<options.length;i++){
//             diagList.push(options[i].data);
//         };
//         console.log(diagList);

//         for (var j = 0;j<diagList.length;j++) {
//             if(!diagList[j]) continue;
//             var diagStr= diagList[j].split(']');
//             for (var n = 1;n<diagStr.length;n++) {
//             $('#fddStr'+j+n).text(diagStr[n]);
//             };
//             if (diagStr[0]==1) {
//                 $('#fddStr'+j+'1').css('color', '#EB4F3B');
//             }else {$('#fddStr'+j+'1').css('color', '#11CD6E');
//                 };    
//         };              
//     },

//     ModalMobileWorkDiagnosis.prototype.showConfigModal = function () { 
//         var _this = this;
//         var option = {
//             header:{
//                 'title':'配置',
//                 'needBtnClose':true
//             },
//             area:[{
//                 'module':'multiDataConfig'
//             }],
//             result:{
//                 'func':function(data){
//                     _this.saveData(data);
//                 }
//             }
//         }
//         new ConfigModal(option,document.getElementById('paneCenter')).init().show();
//     },
//     ModalMobileWorkDiagnosis.prototype.saveData = function(data){
//         for(var i = 0;i<data.dataInfoList.length;i++){
//             this.entity.modal.points = [data.dataInfoList[i].param.data];
//         }
        
//         this.entity.modal.interval = 5;
//     },
//     ModalMobileWorkDiagnosis.prototype.goBackTrace = function (data) {

//     }
//     return ModalMobileWorkDiagnosis;
// })();
var ModalAppKPICollect = (function(){
	function ModalAppKPICollect(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        this.m_bIsGoBackTrace = false;
        this.m_traceData = undefined;
        ModalBase.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);
    };

    ModalAppKPICollect.prototype = new ModalBase();
    ModalAppKPICollect.prototype.optionTemplate = {
        name:'toolBox.modal.APP_KPI_COLLECT',
        parent:3,
        mode:'custom',
        maxNum: 5,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalAppKPICollect',
		scroll:true,
		tooltip: {
            'imgPC': false,
            'imgMobile': true,
            'isSpecData':false,
            'desc': ''
        }
    };
	ModalAppKPICollect.prototype.configModalOptDefault= {
		header:{
			'title':'配置',
			'needBtnClose':true
		},
		area:[{
			'module':'multiDataConfig',
			'data':{
				'variable':[],
				'param':[{'type':'name','name':'数据标题'},{'type':'data','name':'数据点位'},{'type':'unit','name':'数据单位'},{'type':'scale','name':'小数点位'}]
			}
		}],
		result:{}
    };

    ModalAppKPICollect.prototype.renderModal = function () {
    	this.spinner.stop();
		var _this = this;
		var divAppKPi = document.createElement('div');
		var divKpiList = document.createElement('div');
		divAppKPi.className= 'appKpi';
		divKpiList.className = 'divKPIList';
		this.container.appendChild(divAppKPi);
		divAppKPi.appendChild(divKpiList);
		divKpiList.innerHTML = '';
		var optTitle = _this.entity.modal.option.title;
		if(optTitle){
			if(optTitle.text || optTitle.data){
				divKpiList.innerHTML = '\
				<div class="divSingleType divListTitle">\
	                <div class="divTypeTitle ">'+ _this.entity.modal.option.title.text +'</div>\
	                <div class="divKPIListRight">\
						<div class="divTypeVal divKPINow" data-pt="'+ _this.entity.modal.option.title.data +'" data-scale="' + _this.entity.modal.option.title.scale + '"></div>\
	               		<div class="divTypeUnit divKPIUnit">'+ (_this.entity.modal.option.title.unit?_this.entity.modal.option.title.unit:'') +'</div>\
	                </div>\
	            </div>';
			}
		}
		for(var i = 0;i<_this.entity.modal.option.param.length;i++) {
			divKpiList.innerHTML += '\
	        	<div class="divSingleType">\
	                <div class="divTypeTitle ">' + _this.entity.modal.option.param[i].name + '</div>\
	                <div class="divKPIListRight">\
						<div class="divTypeVal" data-scale="' + _this.entity.modal.option.param[i].scale + '" data-pt="' + _this.entity.modal.option.param[i].data + '"></div>\
	               		<div class="divTypeUnit ">' + _this.entity.modal.option.param[i].unit + '</div>\
	                </div>\
	            </div>\
			';
		}
		this.container.appendChild(divAppKPi);

    };

    ModalAppKPICollect.prototype.updateModal = function (points) {
		var data;
		for (var i = 0; i < points.length ;i++){
			var dom = this.container.querySelector('[data-pt="'+ points[i].dsItemId +'"]');
			if(dom){
				if(!isNaN(Number(points[i].data))) {
					if(dom.dataset.scale && !isNaN(parseInt(dom.dataset.scale))) {
						if (parseInt(dom.dataset.scale) > 10) {
							data = parseFloat(points[i].data).toFixed(10);
						} else {
							data = parseFloat(points[i].data).toFixed(parseInt(dom.dataset.scale));
						}
					}else{
						data = parseFloat(points[i].data).toFixed(2);
					}
				}else{
					data = 'No Data';
				}
				dom.innerText = data;
			}
		}
        //拖入数据的页面渲染;
    };	
    ModalAppKPICollect.prototype.showConfigMode = function () {
    };
	ModalAppKPICollect.prototype.initConfigModalOpt = function () {
		var _this = this;
		if(this.entity.modal.option)this.configModalOpt.area[0].data.variable = [this.entity.modal.option];
		this.configModalOpt.result.func = function(option){
			_this.setModalOption(option);
		}
    };
	ModalAppKPICollect.prototype.setModalOption = function(option){
    	//配置框中各项数据的保存；
    	this.entity.modal.points = [];
		this.entity.modal.option = {};
		for(var i = 0;i< option.dataInfoList.length;i++){
			option.dataInfoList[i].title.data && this.entity.modal.points.push(option.dataInfoList[i].title.data);
			this.entity.modal.option = option.dataInfoList[i];
			for (var j = 0; j < option.dataInfoList[i].param.length ;j++){
				if(option.dataInfoList[i].param[j].data)this.entity.modal.points.push(option.dataInfoList[i].param[j].data);
			}
		}
    	this.entity.modal.interval = 5;
	};
    ModalAppKPICollect.prototype.goBackTrace = function (data) {

    };
    
    return ModalAppKPICollect;

})();
var ModalDataMonitorList = (function(){
    function ModalDataMonitorList(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        this.m_bIsGoBackTrace = false;
        this.m_traceData = undefined;
        ModalBase.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);
    };

    ModalDataMonitorList.prototype = new ModalBase();
    ModalDataMonitorList.prototype.optionTemplate = {
        name:'toolBox.modal.DATA_MONITOR_LIST',
        parent:0,
        mode:['dataMonitorList'],
        maxNum: 5,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalDataMonitorList',
        scroll:false,
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':true,
            'desc': '#Proj_ParaQueyInfo'
        }

    };
    ModalDataMonitorList.prototype.configModalOpt= {
        
    };
    ModalDataMonitorList.prototype.initLeftMonitorList = function(monitorList,data){
        var _this = this;
        var _value;
        var listLeft = document.createElement('div');
        listLeft.className = 'monitorListLeft gray-scrollbar';

        var listLeftContentGroup = document.createElement('div');
            listLeftContentGroup.className = 'listLeftContentGroup';
        
        for(var i = 0;i<monitorList.content.length;i++){
            var item = monitorList.content[i];
            var listLeftContent = document.createElement('div');
            listLeftContent.className = 'panel panel-default';

            var listLeftTitle = document.createElement('div');
            listLeftTitle.className = 'listLeftTitle';

            var listLeftContentList = document.createElement('div');
            listLeftContentList.className = 'listLeftContentList';
            
            listLeftTitle.innerHTML += '\
                    <div class="panel-title">\
                        <table class="table table-hover">\
                            <tbody>\
                                <tr class="kpi-tr-index show-detail">\
                                    <td>' + item.system + '</td>\
                                </tr>\
                            </tbody>\
                        </table>\
                    </div>\
                    ';
            listLeftContentList.innerHTML = '\
                <table>\
                    <tbody>\
                        <tr>\
                            <td>参数</td>\
                            <td>当前值</td>\
                            <td>选择</td>\
                        </tr>\
                    </tbody>\
                </table>\
                ';
            listLeftContent.appendChild(listLeftTitle);
            for(var j = 0; j < item.parameter.length;j++){
                for(var m = 0;m < data.length;m++){
                    if(item.parameter[j].point != data[m].name){
                             continue;
                        }else{
                            _value = data[m].value;
                        }
                };    
                listLeftContentList.innerHTML += '\
                    <div id="para-collapse" class="">\
                        <div class="bodyPn borderColorTemp4">\
                            <table class="table table-hover">\
                                <tbody>\
                                    <tr class="kpi-tr-index show-detail">\
                                        <td>' + item.parameter[j].legend + '</td>\
                                        <td>' + Number(_value).toFixed(1) + '</td>\
                                        <td>\
                                            <form>\
                                                <input type="checkbox" id="selectedCheckbox" value="'+ item.parameter[i].point +'" name="'+ item.parameter[j].legend +'">\
                                            </form>\
                                       </td>\
                                    </tr>\
                                </tbody>\
                            </table>\
                        </div>\
                    </div>\
                ';
            listLeftContent.appendChild(listLeftContentList);
            };
            listLeftContentGroup.appendChild(listLeftContent);
        };
        listLeft.appendChild(listLeftContentGroup);
        this.container.appendChild(listLeft);
        this.attachEvent();
        if($._data($('#selectedCheckbox')[0],"events") && $._data($('.table tr'),"events")){
            $('.monitorListLeft').css("width","24%");
        }else{
            $('.monitorListLeft').css("width","100%");
        }
    };
    ModalDataMonitorList.prototype.renderModal = function () {
        this.spinner.stop();
        var _this = this;
        var _pId = 393;
        var postData = this.entity.modal.points;
        WebAPI.post('/analysis/startWorkspaceDataGenPieChart',{dsItemIds: postData}).done(function(result){
            if($(_this.container).find(".alertErrorInfo")){
                $(_this.container).find(".alertErrorInfo").remove();
            }
            if(!(result.dsItemList[0] && result.dsItemList[0].data))return;
            if(result.dsItemList[0].data.indexOf('content')!==-1){
                var monitorList = JSON.parse(result.dsItemList[0].data);
                    var pArr = [];
                    for(var i = 0;i<monitorList.content.length;i++){
                        var arr = monitorList.content[i].parameter;
                        for(var j = 0;j<arr.length;j++){
                            pArr.push(arr[j].point);
                        }
                    }
                    var opt1= { pointList: pArr , proj: _pId  }
                    console.log(opt1);
                    WebAPI.post('/get_realtimedata', opt1).done(function (data){
                        console.log(data);
                        _this.initLeftMonitorList(monitorList,data);
                    })
            }else{
                var alertErrorInfo = document.createElement('div');
                alertErrorInfo.className = 'alertErrorInfo';
                alertErrorInfo.innerHTML = '所拖入数据点的格式不符合该控件所需的数据格式,数据点格式参考上海来福士的Proj_ParaQueyInfo';
                _this.container.appendChild(alertErrorInfo);
            }
        });
    }; 
    ModalDataMonitorList.prototype.updateModal = function (points) {
        var _this = this;
    };
    ModalDataMonitorList.prototype.attachEvent = function(){
        $('.listLeftTitle').on('click',function(e){
            var index = $(".listLeftTitle").index($(this));
            $('.listLeftContentList').eq(index).toggle('slow');
        })
    }
    ModalDataMonitorList.prototype.showConfigMode = function () {

    };
    ModalDataMonitorList.prototype.initConfigModalOpt = function () {

    };
    ModalDataMonitorList.prototype.setModalOption = function(option){

    };
    
    return ModalDataMonitorList;

})();
﻿var ModalDiagnosisPanel = (function () {
    var _this = undefined;
    
    function ModalDiagnosisPanel(dom) {
        this.ElScreenContainer = window.ElScreenContainer || $('body')[0];
        this.parent = dom||this.ElScreenContainer;
        this.dictZone = undefined;
        this.dictEquipment = undefined;
        this.dictObserverText = undefined;
        this.arrLastNotice = [];

        this.workerUpdate = undefined;
        this.tabelModelData = undefined;
        this.tableModelUpdate = undefined;
        this.floorCount = 0;
        this.dialog = undefined;
        this.langCfg = I18n.resource.diagnosis.config;
        this.noticeId = 0;
        this.faId = 0;
        this.faUserId = 0;

        this.obScreen = undefined;
        this.$obContainer = undefined;
        this.urgentCount = 0;
        this.criticalCount = 0;
        this.result = undefined;
        _this = this;
    }
    ModalDiagnosisPanel.prototype = {
        show: function () {
            Spinner.spin(this.ElScreenContainer);
            WebAPI.get("/static/views/observer/widgets/modalDiagnosisPanel.html").done(function (resultHtml) {
                $(_this.parent).html(resultHtml);
                I18n.fillArea($(_this.parent));
                _this.init();
            }).always(function () {
                    Spinner.stop();
                }
            );
        },
        optionTemplate: {
            name: 'toolBox.modal.DIAGNOSIS_PANEL',
            parent: 0,
            mode: [''],
            maxNum: 1,
            title: '',
            //defaultHeight: 4.5,
            //defaultWidth: 3,
            minHeight: 2,
            minWidth: 4,
            maxHeight: 6,
            maxWidth: 12,
            type: 'ModalDiagnosisPanel'
        },
        initStructData: function (data) {
            var item, arr;
            this.dictZone = new Object();
            this.dictEquipment = new Object();
            this.buildings = [];

            arr = data.equipments;
            for (var i = 0, len = arr.length; i < len; i++) {
                item = arr[i];
                item.faultIds = new Array();
                this.dictEquipment[item.id] = item;
            }

            arr = data.zones;
            this.floorCount = arr.length;
            var index = -1, tempBuildingId = undefined;


            for (var i = 0, len = arr.length; i < len; i++) {
                item = arr[i];
                var equipments = [];

                for (var j = 0; j < data.equipments.length; j++) {
                    if (data.equipments[j].zoneId == item.id) {
                        equipments.push({equipmentId: data.equipments[j].id, equipmentName: data.equipments[j].name})
                    }
                }
                this.dictZone[item.id] = item;

                if (tempBuildingId != item.buildingId) {
                    tempBuildingId = item.buildingId;
                    index++;
                    var building = {
                        buildId: item.buildingId,
                        buildName: item.buildingName,
                        subBuilds: [{
                            subBuildId: item.subBuildingId,
                            subBuildName: item.subBuildingName,
                            equipments: equipments
                        }]
                    }
                    this.buildings.push(building)
                } else {
                    var subBuilding = {
                        subBuildId: item.subBuildingId,
                        subBuildName: item.subBuildingName,
                        equipments: equipments
                    }
                    this.buildings[index].subBuilds.push(subBuilding);
                }
            }
        },
        close: function () {
            this.dictZone = null;
            this.dictEquipment = null;
            this.dictObserverText = null;
            this.tabelModelData = null;

            this.arrLastNotice = null;
            this.floorCount = null;
            if (this.workerUpdate) this.workerUpdate.terminate();
            this.workerUpdate = null;
            if (this.tableModelUpdate) this.tableModelUpdate.terminate();
            this.tableModelUpdate = null;
            if (this.dialog) this.dialog.close();
            if (this.obScreen) this.obScreen.close();

            if (ToolCurrent) ToolCurrent.close();
        },

        onresize: function () {
            ScreenCurrent.obScreen.resize();
        },

        init: function () {
            this.$obContainer = $('#obContainer');
            this.dictObserverText = {};

            WebAPI.get('/diagnosis/getStruct/' + AppConfig.projectId).done(function (result) {
                _this.initStructData(result);
                _this.initPaneNav();
                _this.result = result;
                // 加载默认楼层
                $('.subBuildingBtn', '#paneIcon').eq(0).trigger('click');
                $('.div-nav-row', '#paneIcon').eq(0).children('span:first').trigger('click');

                //切换到故障历史页面
                /*$('#btnShowFaultHist').on('click', function(e){
                    e.stopPropagation();
                    WebAPI.get('/static/scripts/observer/faultHistoryModal.html').done(function(resultHTML){
                        $('body').append(resultHTML);
                        $('#modalFaultHist').modal('show');
                        $('#modalFaultHist').on('hide.bs.modal', function(){
                            $(this).remove();
                        });
                    })
                });*/
            });


            //关闭tableModal页面并关闭线程
            function tabelModelClose() {
                $('#panelIconNew').hide();
                if (_this.tableModelUpdate) _this.tableModelUpdate.terminate();
                _this.tableModelUpdate = null;
            }

            $("#btnNoticeHistory").off().click(function (e) {
                ScreenModal = new DiagnosisLogHistory(_this);
                ScreenModal.setIsModal(true);
                ScreenModal.show();
            });

            
            //左侧导航显示隐藏事件
            var $flootCt = $('#floorCt');
            var $floorPB = $flootCt.find('.showCont'); //$('#floorCt .showCont');
            var $floorPH = $flootCt.find('.panel-default');//$('#floorCt .panel-default');
            $flootCt.find('.panel-heading').off('click').click(function () {
                $floorPH.hide();
                $floorPB.show();
            });
            $floorPB.off('click').click(function () {
                $(this).hide();
                $floorPH.show();
            });
        },
        initWorkerForUpdating: function () {
            if (this.workerUpdate) {
                this.workerUpdate.terminate();
            }
            Spinner.spin(this.parent);
            this.workerUpdate = new Worker("/static/views/js/worker/workerUpdate.js");
            this.workerUpdate.self = this;
            this.workerUpdate.addEventListener("message", this.refreshData, true);
            this.workerUpdate.addEventListener("error", function (e) {
                console.log(e)
            }, true);
            //获取全部数据
            //this.workerUpdate.postMessage({
            //    projectId: AppConfig.projectId,
            //    type: "allDiagnosisScreen"
            //});
            //获取层级数据
            this.workerUpdate.postMessage({
                projectId: AppConfig.projectId,
                type: "diagnosisScreen",
                zoneId: AppConfig.zoneId
            });
            
        },

        initObScreen: function () {
            this.obScreen.isInDiagnosis = true;
            this.obScreen.diagScreen = this;
        },

        //切换左侧导航条选择zone后执行
        resetFloor: function () {
            this.refreshData({data: {notice: this.arrLastNotice}}, true);
        },
        clearNullArr: function (arr) {
            for (var i = 0, len = arr.length; i < len; i++) {
                if (arr[i] == "" || typeof (arr[i]) == "undefined") {
                    arr.splice(i, 1);
                    len--;
                    i--;
                }
            }
            return arr;
        },
        gradientColors: function (colorArr, $gradientDom, valueCurrent, max, min) {
            //根据传入数据值和想要几种渐变色进行颜色渐变
            //说明：colorArr为颜色数组，模式固定rgb()可扩展，max和min是整体数的渐变范围
            var valueMark = (max - min) / (colorArr.length - 1);//获得取色范围间隔
            //var valueCurrent = (max + min) / 2;//获取当前值
            var regexp = /[0-9]{0,3}/g;//为提取rgb数字
            for (var i = 0; i < colorArr.length - 1; i++) {
                var colorMaxValue = min + (i + 1) * valueMark;//每个间隔的最大值
                if (valueCurrent > colorMaxValue) continue;
                var colorSelPre = colorArr[i];//获得当前渐变范围开始颜色
                var colorSelTo = colorArr[i + 1];//获得当前渐变范围结束颜色
                var colorValPreArr = [];
                colorValPreArr = colorSelPre.match(regexp);//获得当前渐变范围开始颜色rgb色值组
                _this.clearNullArr(colorValPreArr);
                var colorValToArr = [];
                colorValToArr = colorSelTo.match(regexp);//获得当前渐变范围结束颜色rgb色值组
                _this.clearNullArr(colorValToArr);
                var colorMinValue = min + i * valueMark;//每个间隔的最小值
                if (i == colorArr.length - 2) {
                    colorMaxValue = max;//防止除不尽时，最后个间隔不全的情况
                }
                if (valueCurrent <= colorMaxValue) {
                    $gradientDom.css('background', 'rgb(' + (parseInt((parseInt(colorValToArr[0] - colorValPreArr[0]) * (valueCurrent - colorMinValue) / (colorMaxValue - colorMinValue)).toFixed(0)) + parseInt(colorValPreArr[0])) + ',' + (parseInt((parseInt(colorValToArr[1] - colorValPreArr[1]) * (valueCurrent - colorMinValue) / (colorMaxValue - colorMinValue)).toFixed(0)) + parseInt(colorValPreArr[1])) + ',' + (parseInt((parseInt(colorValToArr[2] - colorValPreArr[2]) * (valueCurrent - colorMinValue) / (colorMaxValue - colorMinValue)).toFixed(0)) + parseInt(colorValPreArr[2])) + ')');
                    i = colorArr.length - 1;
                }
            }
        },
        
        refreshData: function (e, isOnlyRenderDictFault) {
            if (!e.data || $.isEmptyObject(e.data) || e.data.error) {
                Spinner.stop();
            }
            _this = this.self ? this.self : this;
            if (e.data.notice && e.data.notice[0]) {
                _this.arrLastNotice = e.data.notice;

                var existedIds = [];
                for (var i in _this.arrLastNotice) {
                    existedIds.push(_this.arrLastNotice[i].id);
                }
                if ($.inArray(e.data.notice[0].id, existedIds) < 0) {
                    Array.prototype.push.apply(e.data.notice, _this.arrLastNotice);
                    _this.arrLastNotice = e.data.notice;
                }

                for (var key in _this.dictEquipment) {
                    _this.dictEquipment[key].faultIds = new Array();
                }

                try {
                    var dictFaultHighestGrade = {};
                    for (var i = 0; i < e.data.notice.length; i++) {
                        var faultId = e.data.notice[i].faultId, equipmentId = e.data.notice[i].equipmentId;
                        var grade;
                        var eq = _this.dictEquipment[equipmentId];
                        eq.faultIds.push(faultId);

                        grade = dictFaultHighestGrade[eq.modalTextId];
                        if (!grade || e.data.notice[i].grade > grade)
                            dictFaultHighestGrade[eq.modalTextId] = e.data.notice[i].grade;
                    }

                    for (var key in dictFaultHighestGrade) {
                        if (_this.dictObserverText[key])
                            _this.dictObserverText[key].updateDiagnosisGrade(dictFaultHighestGrade[key]);
                    }
                } catch (e) {
                    console.log(e)
                }

            } else {
                $('#spinnerLoadingNotice').remove();
                //new Alert(ElScreenContainer, Alert.type.danger, I18n.resource.code[e.data.error]).showAtTop(5000);
            }
            $('#spinnerLoadingNotice').remove();
            $('#btnWarningLog').fadeIn();
            $('#navigation').fadeIn();
            $('#diagnosisLogCt').slideDown();
            Spinner.stop();

            if (isOnlyRenderDictFault) return; //如果是resetFloor调用refreshData, 只需渲染页面的缺陷高亮, 诊断缺陷个数及诊断信息面板无需渲染,故return

            //渲染诊断缺陷个数
            $('.badge.warningCount', '#paneIcon').empty();//渲染之前清空个数
            $('.badge.alertCount', '#paneIcon').empty();
            if (e.data.count && e.data.count instanceof Array) {
                e.data.count.forEach(function (obj) {
                    for (var i in obj) {
                        var warningCount = parseInt(obj[i].warning);
                        var alertCount = parseInt(obj[i].alert);
                        var $targetWarning = $('#navFloor-' + i).next('.warningCount');
                        var $targetAlert = $('#navFloor-' + i).siblings('.alertCount');
                        if (warningCount > 0) {
                            $targetWarning.html(warningCount);
                        } else {
                            $targetWarning.html('');
                        }
                        if(alertCount > 0){
                            $targetAlert.html(alertCount);
                        }else{
                            $targetAlert.html('');
                        }
                    }
                });
            }


            // 缺陷个数统计
            _this.statisticFaultCount();

            // 更新诊断信息显示
            _this.renderPaneNoticeGroup();
        },
        //默认目录
        initPaneNav: function () {
            var pane = document.createElement('div');
            var div, zoneItem, itemI, itemJ;
            var zoneItemList = [];
            var $buildingBox, $subBuilding = $('.subBuilding'), $subBuildingList, countHtml;
            var $dropdownBtn = $('#dropdownBtn');
            for (var zoneId in this.dictZone) {
                zoneItem = this.dictZone[zoneId];
                zoneItemList.push(zoneItem);
            }
            var paneIcon = document.getElementById('paneIcon');
            paneIcon.innerHTML = "";
            paneIcon.appendChild(pane);
            for (var i = 0; i < zoneItemList.length; i++) {
                countHtml = '';
                var isSameBuild = false;
                itemI = zoneItemList[i];
                for (var j = 0; j < zoneItemList.length; j++) {
                    itemJ = zoneItemList[j];
                    if (itemI.buildingId == itemJ.buildingId) {
                        isSameBuild = true;
                        break;
                    }
                }
                if (isSameBuild) {
                    $buildingBox = $('.div-nav-box' + itemI.buildingId);
                    if ($buildingBox.length === 0) {
                        $buildingBox = $('<div class="div-nav-box' + itemI.buildingId + '"><span id="building_' + itemI.buildingId + '" class="grow subBuildingBtn"></span><span class="badge warningCount"></span><span class="badge alertCount"></span></div>');
                        $buildingBox.find('#building_' + itemI.buildingId).html(itemI.buildingName);
                        $subBuildingList = $('<div class="subBuildingList" id="subList_' + itemI.buildingId + '"></div>');
                        $buildingBox.append($subBuildingList);
                        $(pane).append($buildingBox);
                    }
                    // 显示诊断缺陷个数
                    if (itemI.count && itemI.count > 0) {
                        countHtml = '<span class="badge warningCount">' + itemI.count + '</span><span class="badge alertCount"></span>';
                    } else {
                        countHtml = '<span class="badge warningCount"></span><span class="badge alertCount"></span>';
                    }
                    var $subBuildings = $('#subList_' + itemI.buildingId).children('.subBuilding');
                    var countArry = [];
                    for(var k= 0;k<$subBuildings.length;k++){
                        countArry.push(parseInt($subBuildings.eq(k).attr('count')));
                    }
                    if((countArry.length === 0) || (itemI.count>countArry[countArry.length-1])){
                        $subBuilding = $('<div class="div-nav-row subBuilding" count="' + itemI.count + '"><span class="div-row-icon-badge grow subBuildingItem" pageId="' + itemI.pageId + '" id="navFloor-' + itemI.id + '"></span>' + countHtml + '</div>');
                        $subBuilding.find('.subBuildingItem').html(itemI.subBuildingName);
                        $('#subList_' + itemI.buildingId).append($subBuilding);
                    }else{
                        for(var q = 0;q<countArry.length;q++){
                            if(itemI.count<countArry[q]){
                                $subBuilding = $('<div class="div-nav-row subBuilding" count="' + itemI.count + '"><span class="div-row-icon-badge grow subBuildingItem" pageId="' + itemI.pageId + '" id="navFloor-' + itemI.id + '"></span>' + countHtml + '</div>');
                                $subBuilding.find('.subBuildingItem').html(itemI.subBuildingName);
                                $($subBuildings[q]).before($subBuilding);
                                break;
                            }else if(itemI.count===countArry[q]){
                                if(countArry[q] === countArry[countArry.length-1]){
                                    $subBuilding = $('<div class="div-nav-row subBuilding" count="' + itemI.count + '"><span class="div-row-icon-badge grow subBuildingItem" pageId="' + itemI.pageId + '" id="navFloor-' + itemI.id + '"></span>' + countHtml + '</div>');
                                    $subBuilding.find('.subBuildingItem').html(itemI.subBuildingName);
                                    $('#subList_' + itemI.buildingId).append($subBuilding);
                                    break;
                                }else{
                                    for(var p = q;p<countArry.length;p++){
                                        if(itemI.count<countArry[p]){
                                            $subBuilding = $('<div class="div-nav-row subBuilding" count="' + itemI.count + '"><span class="div-row-icon-badge grow subBuildingItem" pageId="' + itemI.pageId + '" id="navFloor-' + itemI.id + '"></span>' + countHtml + '</div>');
                                            $subBuilding.find('.subBuildingItem').html(itemI.subBuildingName);
                                            $($subBuildings[p]).before($subBuilding);
                                            break;
                                        }
                                    }
                                break;
                                }
                            }
                        }
                    }
                    $dropdownBtn.off('click').on('click', function () {
                        $(this).siblings('.dropdownList').toggleClass('hidden');
                    });
                    $subBuilding.find('.subBuildingItem').off('click').click(function () {
                        var $this = $(this);
                        var id = $this.attr('pageId');

                        AppConfig.zoneId = this.id.split('-')[1];
                        //增加选中样式
                        $('.subBuildingItem.selected').removeClass('selected');
                        $this.addClass('selected');
                        $dropdownBtn.html($this.text()+'<span class="caret"></span>');

                        ////加载当前楼层的诊断信息
                        _this.arrLastNotice.length = 0;
                        _this.initWorkerForUpdating();
                        //导航隐藏
                        $this.closest('.dropdownList').addClass('hidden');
                    });
                }
            }

            // 缺陷个数统计
            this.statisticFaultCount();

            $('.subBuildingBtn').off('click').click(function () {
                $(this).toggleClass('selected');
                var $subBuildListCur = $(this).siblings('.subBuildingList');
                if ($subBuildListCur.is(':visible')) {
                    $subBuildListCur.hide();
                } else {
                    $subBuildListCur.show();
                }
            });

        },

        // 缺陷个数统计
        statisticFaultCount: function () {
            var allCount = 0;
            $('[class ^="div-nav-box"]').each(function () {
                var warningCount = 0,alertCount = 0;
                $(this).children('.subBuildingList').find('.warningCount').not(':empty').each(function () {
                    var text = $(this).text();
                    if (Number(text).toString() != 'NaN') {
                        warningCount += parseInt(text);
                    }
                });
                if (warningCount > 0) {
                    $(this).children('.warningCount').html(warningCount);
                } else {
                    $(this).children('.warningCount').html('');
                }
                $(this).children('.subBuildingList').find('.alertCount').not(':empty').each(function () {
                    var text = $(this).text();
                    if (Number(text).toString() != 'NaN') {
                        alertCount += parseInt(text);
                    }
                });
                if (alertCount > 0) {
                    $(this).children('.alertCount').html(alertCount);
                } else {
                    $(this).children('.alertCount').html('');
                }
                allCount += (warningCount + alertCount);
            });
            $('#logWrap #toolBar #btnWarningLog .badge').html(allCount);
        },

        createWorkflowOrder: function (notice) {
            var wiInstance;
            var momentTime = notice.time.toDate();
            var back = function () {
                wiInstance = null;
            };
            var insertCallback = function (taskModelInfo) {
                var taskTitle = (taskModelInfo && taskModelInfo.fields) ? taskModelInfo.fields.title : '';
                Alert.success(ElScreenContainer, I18n.resource.workflow.main.THE_WORK_ORDER + ' ' + taskTitle + ' ' + I18n.resource.workflow.main.IS_CREATED_SUCCESSFULLY).showAtTop(2000);
                //TODO 这个需要确认一下
                var $faultCount = $('#btnWarningLog .badge');
                var faultCount = (function (txt) {
                    if (parseInt(txt).toString() != "NaN") {
                        return parseInt(txt);
                    }
                    return 0;
                }($faultCount.text()));
                //诊断故障信息个数减一, 同时楼层导航的故障个数减一
                if (faultCount > 0) {
                    var count = faultCount - 1;
                    count = count > 0 ? count : '';
                    $faultCount.text(count);
                    //诊断故障信息remove
                    $('[noticeid="' + notice.id + '"]').remove();
                    //楼层故障个数更新
                    if (notice.grade === 1) {
                        var $warningCount = $('#navFloor-' + AppConfig.zoneId).next('.warningCount');
                        $warningCount.text($warningCount.text() - 1);
                    } else if (notice.grade === 2) {
                        var $alertCount = $('#navFloor-' + AppConfig.zoneId).siblings('.alertCount');
                        $alertCount.text($alertCount.text() - 1);
                    }
                }
            };

            //description的{i}替换为detail[i]
            var str = notice.description;
            var arr = notice.detail ? notice.detail.split(',') : [];
            var matchRt = str.match(/\{\d\}/g);
            if (matchRt && matchRt instanceof Array) {
                matchRt.forEach(function (val, index) {
                    str = str.replace(val, arr[index] ? arr[index] : '')
                });
            }

            wiInstance = new WorkflowInsert({
                noticeId: notice.id,
                title: notice.name,
                detail: notice.description,
                dueDate: new Date(+new Date() + 172800000).format('yyyy-MM-dd'),  //结束时间为两天后
                critical: notice.grade,
                projectId: Number(notice.project),
                chartPointList: notice.points,
                chartQueryCircle: 'm5',
                description: str,
                name: notice.name,
                time: new Date(momentTime).format('yyyy-MM-dd HH:mm:ss'),
                chartStartTime: new Date(new Date(momentTime).getTime() - 12 * 60 * 60 * 1000).format('yyyy-MM-dd HH:mm:ss'), //报警发生前半天
                chartEndTime: new Date(new Date(momentTime).getTime() + 12 * 60 * 60 * 1000).format('yyyy-MM-dd HH:mm:ss')   //报警发生后半天
            });
            wiInstance.show().submitSuccess(function (taskModelInfo, uploadFiles) {
                insertCallback(taskModelInfo);
                this.close();
                back();
            }).cancel(function () {
                back();
            }).fail(function () {
                Alert.danger(ElScreenContainer, I18n.resource.workflow.main.CREATE_WORKFLOW_FAILED).showAtTop(2000);
            });
            return true;
        },

        renderPaneNoticeGroup: function () {
            var _this = this;
            var urgentCount = 0, criticalCount = 0, className;
            this.insertLogGroup();

            var item, parent;
            for (var i = 0, len = _this.arrLastNotice.length; i < len; i++) {
                item = _this.arrLastNotice[i];
                var grade = item.grade;
                if (1 == grade) {
                    className = 'adNormal';
                    criticalCount++;
                }
                else if (2 == grade) {
                    className = 'faultPro';
                    urgentCount++;
                }
                else {
                    continue;
                }
                _this.insertLogItem(item, i, className);
            }

            _this.criticalCount = _this.arrLastNotice.length;

            //if (_this.criticalCount > 0) {
            //    $('#btnWarningLog').find('.badge').html(_this.criticalCount);
            //} else {
            //    $('#btnWarningLog').find('.badge').html('');
            //}

            var $btnErr =  $('#abNomalP');
            if ($btnErr && $btnErr.length > 0) {
                $btnErr.change();
            }
        },

        insertLogGroup: function () {//,groupName
            var $abNomalP = $('#abNomalP');
            var $faultP = $('#faultP');
            var $divPaneNoticeItem = $('#divPaneNoticeItem');
            $divPaneNoticeItem.children().remove();

            $abNomalP.on('change', function () {
                var $adNormalOne = $divPaneNoticeItem.find('.adNormal');
                var $faultProOne = $divPaneNoticeItem.find('.faultPro');
                if (($abNomalP.is(':checked') && $faultP.is(':checked')) || ((!$abNomalP.is(':checked')) && (!$faultP.is(':checked')))) {
                    $adNormalOne.show();
                    $faultProOne.show();
                } else if ($abNomalP.is(':checked') && (!$faultP.is(':checked'))) {
                    $adNormalOne.show();
                    $faultProOne.hide();
                } else if ((!$abNomalP.is(':checked')) && $faultP.is(':checked')) {
                    $adNormalOne.hide();
                    $faultProOne.show();
                }
            });
            $faultP.on('change', function () {
                var $adNormalTwo = $divPaneNoticeItem.find('.adNormal');
                var $faultProTwo = $divPaneNoticeItem.find('.faultPro');
                if (($abNomalP.is(':checked') && $faultP.is(':checked')) || ((!$abNomalP.is(':checked')) && (!$faultP.is(':checked')))) {
                    $adNormalTwo.show();
                    $faultProTwo.show();
                } else if ($abNomalP.is(':checked') && (!$faultP.is(':checked'))) {
                    $adNormalTwo.show();
                    $faultProTwo.hide();
                } else if ((!$abNomalP.is(':checked')) && $faultP.is(':checked')) {
                    $adNormalTwo.hide();
                    $faultProTwo.show();
                }
            });
        },

        insertLogItem: function (item, itemNum, className) {
            var divParent = $('#divPaneNoticeItem');
            var _this = this;
            var divNotice, equipment, zone, sb, span, textId, spanFirst;

            equipment = this.dictEquipment[item.equipmentId];
            textId = equipment.modalTextId;
            zone = this.dictZone[equipment.zoneId];

            divNotice = document.createElement('div');
            divNotice.id = 'divLog-' + itemNum;
            divNotice.setAttribute('path', zone.id + '-' + equipment.id);
            divNotice.setAttribute('faultid', item.faultId);
            divNotice.setAttribute('noticeId', item.id);
            if (textId !== null) divNotice.setAttribute('data-modaltextid', textId);
            divNotice.className = 'div-pane-log';
            $(divNotice).addClass(className);

            var parent = $(divNotice);
            var $spWrap = $('<div style="white-space: nowrap;">');

            spanFirst = $('<span>');//.html(' _this.langCfg.LEVEL_SET.CRITICAL');
            switch (item.grade) {
                case 0:
                    break;
                case 1:
                    spanFirst.addClass('badge wrongTag').html(_this.langCfg.LEVEL_SET.CRITICAL);
                    break;
                case 2:
                    spanFirst.addClass('badge dangerTag').html(_this.langCfg.LEVEL_SET.URGENT);
                    break;
                default:
                    break;
            }
            $spWrap.append(spanFirst);

            //btn show equipment detail
            //$('<span>')
            span = $('<span>').addClass('badge grow span-hover-pointer').attr('title', 'Equipment name')
                .attr('equipment', equipment.pageId).text(equipment.name);
            span.click(function (e) {
                
            });
            $spWrap.append(span);


            $('<span>').addClass('badge grow span-hover-pointer')
                .attr({
                    'pageId': zone.pageId,
                    'title': 'Zone ID',
                    'data-zoneId': zone.id
                }).text(zone.subBuildingName)
                .click(function (e) {
                    
                }).appendTo($spWrap);


            $('<span>').attr({
                'title': 'Triggering time',
                'data-time': item.time
            }).text(timeFormat(item.time,timeFormatChange('mm-dd hh:ii')))
                .addClass('dateTime').appendTo($spWrap);

            if (item.orderId && item.orderId != 0 && item.orderId != '') {
                //$('<span>').addClass('glyphicon glyphicon-tags grow span-hover-pointer span-btn')
                //    .attr('title', 'Show workflow order')
                //    .attr('workflow', item.orderId)
                //    .click(function (e) {
                //        if (ScreenCurrent) ScreenCurrent.close();
                //        ScreenManager.show(beop.main, e.currentTarget.getAttribute('workflow'));
                //    }).appendTo($spWrap);
            } else {
                //发布工单按钮
                $('<span>').addClass('createWorkflowSpan glyphicon glyphicon-share grow span-hover-pointer span-btn')
                    .attr('title', 'Create workflow order')
                    .click(function (e) {
                        _this.createWorkflowOrder(item);
                    }).appendTo($spWrap);
            }
            //添加反馈;
            $('<span class="feedbackSpan glyphicon glyphicon-comment grow span-hover-pointer span-btn" title="feedback">')
                .eventOn('click', function (e) {
                    var itemEquipmentId = item.equipmentId;
                    var diagnosisLength = _this.result.equipments.length;
                    for (var i = 0; i < diagnosisLength; i++) {
                        if (itemEquipmentId == _this.result.equipments[i].id) {
                            var currentEquipmentName = _this.result.equipments[i].name;
                            break;
                        }
                    }
                    var detailPrefix = I18n.resource.workflow.main.ORDER_EQUIPMENT_NAME + currentEquipmentName + "\n" +
                        I18n.resource.workflow.main.ORDER_FAULT_INFO + item.description + "\n" +
                        I18n.resource.workflow.main.ORDER_FEEDBACK_MSG;

                    new WorkflowFeedBack({
                        faultId: item.faultId,
                        title: I18n.resource.workflow.main.FEEDBACK_TITLE + item.name,
                        description: item.description,
                        detailPrefix: detailPrefix,
                        dueDate: new Date((new Date().getTime() + 2592000000 /*1000*60*60*24*30*/)).format('yyyy-MM-dd HH:mm:ss'),
                        critical: item.grade,
                        projectId: Number(item.project),
                        chartPointList: item.points,
                        chartQueryCircle: 'm5',
                        chartStartTime: new Date(new Date(item.time.toDate()).getTime() - 43200000 /*12 * 60 * 60 * 1000*/).format('yyyy-MM-dd HH:mm:ss'),
                        chartEndTime: new Date(new Date(item.time.toDate()).getTime() + 43200000 /*12 * 60 * 60 * 1000*/).format('yyyy-MM-dd HH:mm:ss')
                    }).show();
                }, '诊断日志反馈').appendTo($spWrap);

            parent.append($spWrap);
            $('<p>').addClass('pFaultName').css({
                'font-weight': 'bold',
                'padding': '0 8px 0 0'
            }).text(item.name).appendTo(parent);

            var strDesc = item.description;
            if (item.detail) {
                var arr = item.detail.toString().split(',');
                for (var j = 0; j < arr.length; j++) {
                    strDesc = strDesc.replace('{' + j.toString() + '}', '<span class="variable"> ' + arr[j] + ' </span>');
                }
            }
            $('<p>').html(strDesc).appendTo(parent);

            divParent.append(parent);

        },

        
    };

    return ModalDiagnosisPanel;
})();

//诊断面板模块
var ModalDiagnosisPanelHtml = (function () {
    function ModalDiagnosisPanelHtml(screen,entityParams) {
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
        this.screen = screen;
        this.entity = entityParams;
    }

    ModalDiagnosisPanelHtml.prototype = Object.create(ModalHtml.prototype);
    ModalDiagnosisPanelHtml.prototype.constructor = ModalDiagnosisPanelHtml;
    ModalDiagnosisPanelHtml.prototype.optionTemplate = {
        name: 'toolBox.modal.DIAGNOSIS_PANEL',
        parent: 0,
        mode: [''],
        maxNum: 1,
        title: '',
        minHeight: 4,
        minWidth: 3,
        maxHeight: 6,
        maxWidth: 12,
        type: 'ModalDiagnosisPanelHtml',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };
    return ModalDiagnosisPanelHtml;
})();

//   2016/9/28  kpi总览
var ModalKpiOverview = (function(){
    function ModalKpiOverview(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        ModalBase.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);
        this.lastFiveMinutes = undefined;
        this.option = undefined;
    };
    ModalKpiOverview.prototype = new ModalBase();

    ModalKpiOverview.prototype.optionTemplate = {
        name: 'toolBox.modal.KPI_OVERVIEW',
        parent:0,
        mode: 'custom',
        maxNum: 1,
        title:'',
        minHeight:2,
        minWidth:6,
        maxHeight:6,
        maxWidth:12,
        type: 'ModalKpiOverview',
        scroll:false,
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalKpiOverview.prototype.configModalOptDefault= {
        "header" : {
            "needBtnClose" : true,
            "title" : "配置"
        },
        "area" : [
            {
                "module" : "dsDrag",
                "data":[{
                    type:'point',name:'KPI总览',data:[],forChart:false
                }]
            },{
                'type':'footer',
                "widget":[{type:'confirm',opt:{needClose:false}},{type:'cancel'}]
            }
        ],
        result:{}
    };

    ModalKpiOverview.prototype.initConfigModalOpt = function(){
        var _this = this;
        
        if(this.entity.modal.option){
            if(this.entity.modal.option.structPoint)this.configModalOpt.area[0].data[0].data = _this.entity.modal.points;
        }
        this.configModalOpt.result.func = function(option){
            _this.setModalOption(option); 
            _this.configModal.hide();
            _this.renderModal();
        }
    };

    ModalKpiOverview.prototype.setModalOption = function(option){
        this.entity.modal.interval = 5;
        this.entity.modal.option = {
            structPoint:option.points[0],
            needDetail:option.needDetail
        };
        this.entity.modal.points = option.points[0];
    };

    ModalKpiOverview.prototype.updateModal = function (points) {
        this.getDsItemsById(points);
    };

    ModalKpiOverview.prototype.renderModal = function () {
        var _this = this;
        var dsItemIds = _this.entity.modal.points;
        if(dsItemIds !== undefined){
            WebAPI.post('/analysis/startWorkspaceDataGenPieChart',{dsItemIds: dsItemIds}).done(function(result){
                _this.getDsItemsById(result.dsItemList);
            })
        }
    };

    ModalKpiOverview.prototype.getDsItemsById = function (data) {
        var _this = this;
        var remarks=[],ids=[],scores=[];
        for(var i=0,length=data.length;i<length;i++){
            ids.push(data[i].dsItemId);
            scores.push(Number(data[i].data).toFixed(2));
        }
        WebAPI.post('/analysis/datasource/getDsItemsById',ids).done(function(result){
            for(var i=0,length=result.length;i<length;i++){
                var name = result[i].alias !== ''?result[i].alias:result[i].value;
                remarks.push(name);
            }
            _this.spinner && _this.spinner.stop();
            if($(_this.container).html() === "" || $(_this.container).find(".kpiInfoBox>div").length !== remarks.length){//第一次渲染
                _this.firstRenderModal(remarks,scores,ids);
            }else{
                _this.laterRenderModal(remarks,scores,ids);
            }
        })
    };

    ModalKpiOverview.prototype.firstRenderModal = function (names,values,ids) {
        var $container = $(this.container);
        $container.html("");

        var kpiOverviewCtn = '<div class="kpiOverviewCtn"></div>';
        $container.html(kpiOverviewCtn);
        var colorClass,num=0,noIncluded=0;
        var topTitle = '';
        var leftContainer = '<div class="leftKpiOverview">\
                                <div class="circleContainer">\
                                    <canvas id="myCanvas" width="180px" height="180px"></canvas>\
                                    <div class="smallCircleContainer">\
                                        <div class="smallWhite"></div>\
                                    </div>\
                                    <span class="percentageNum">91%</span>\
                                </div>\
                            </div>';
        var rightContainer = '<div class="rightKpiOverview gray-scrollbar container">\
                                <h3>KPI</h3>\
                                <div class="kpiInfoBox row"></div>\
                            </div>';
        $container.find(".kpiOverviewCtn").append($(leftContainer));
        $container.find(".kpiOverviewCtn").append($(rightContainer));
        $(rightContainer).html(topTitle);

        for(var i=0,length=names.length;i<length;i++){
            if(values[i] >= 60){
                colorClass = 'passGreen';
                num+=1;
            }else{
                if(values[i] < 0){
                    noIncluded+=1;
                }
                colorClass = 'noPassGreen';
            }
            var str = '<div class="col-xs-6">\
                            <div class="kpiInfo '+colorClass+'" data-id="'+ids[i]+'">\
                                <div>\
                                    <span title="'+names[i]+'">'+names[i]+' </span>\
                                    <span title="'+values[i]+'"> '+values[i]+'</span>\
                                    <span></span>\
                                </div>\
                            </div>\
                        </div>';
            $(this.container).find(".kpiInfoBox").append($(str));
        }

        this.resize();
        var option = this.option;
        //大圆
        var c=$container.find("#myCanvas")[0];
        var ctx=c.getContext("2d");
        ctx.beginPath();
        var gradient=ctx.createLinearGradient(0,0,170,0);
        gradient.addColorStop("0","#63b15b");
        gradient.addColorStop("1.0","#f1b23e");
        ctx.strokeStyle = gradient;
        ctx.lineWidth = option.divWidth*9/180;
        ctx.arc(option.divWidth/2,option.divWidth/2,option.divWidth/2-ctx.lineWidth/2,0,2*Math.PI);
        ctx.stroke();

        //百分比
        var percentage = (num/(names.length-noIncluded)*100).toFixed(0);
        $container.find(".percentageNum").html(percentage+'%');
        
        //小圆的定位
        option.r = option.divWidth/2 - (option.divWidth*8/180)/2;
        this.smallCircle(Number(percentage),option);
    };

    ModalKpiOverview.prototype.resize = function () {
        var option = {};
        var $container = $(this.container);
        //自适应
        var height = $(this.container).height(),
            width = $(this.container).width();
        //左边的
        var leftHeight, leftWidth;
        leftHeight = leftWidth = Math.min(height, width) * 0.6;
        $('.leftKpiOverview',$container).css({
            'height': leftHeight + 'px',
            'width': leftWidth + 'px',
            'margin-top': '-'+leftHeight/2+'px'
        }); 
        $('.percentageNum',$container).css("fontSize",leftWidth/4+'px');
        $('#myCanvas',$container).attr("width",leftWidth + 'px');
        $('#myCanvas',$container).attr("height",leftHeight + 'px');

        var smallBoxWidth = leftWidth*16/180;
        $('.smallCircleContainer',$container).css({
            'height': smallBoxWidth + 'px',
            'width': smallBoxWidth +'px'
        });
        //右边的
        $('.rightKpiOverview',$container).css({
            'height': leftHeight + 'px',
            'width': 'calc(100% - '+(leftWidth+20)+'px)',
            'margin-top': '-'+leftHeight/2+'px'
        });
        $('.rightKpiOverview h3',$container).css({
            'fontSize': leftWidth*24/180+'px'
        })
        $('.rightKpiOverview .kpiInfo>div span',$container).css({
            'fontSize': leftWidth*12/180+'px'
        })
        $('.rightKpiOverview .kpiInfo:before',$container).css({
            'width': leftWidth*12/180+'px',
            'height': leftWidth*12/180+'px'
        })
        option.divWidth = leftWidth;
        option.smallBoxWidth = smallBoxWidth;
        this.option = option;

        if($container.html() !== "" && window.location.href.indexOf("preview/page") === -1){
            var percentage = $container.find(".percentageNum").html().split("%")[0];
            //大圆
            var c=$container.find("#myCanvas")[0];
            var ctx=c.getContext("2d");
            ctx.beginPath();
            var gradient=ctx.createLinearGradient(0,0,170,0);
            gradient.addColorStop("0","#63b15b");
            gradient.addColorStop("1.0","#f1b23e");
            ctx.strokeStyle = gradient;
            ctx.lineWidth = option.divWidth*9/180;
            ctx.arc(option.divWidth/2,option.divWidth/2,option.divWidth/2-ctx.lineWidth/2,0,2*Math.PI);
            ctx.stroke();
            //小圆的定位
            option.r = option.divWidth/2 - (option.divWidth*8/180)/2;
            this.smallCircle(Number(percentage),option);
        }
    };

    ModalKpiOverview.prototype.smallCircle = function (percentage,option) {
        var $container = $(this.container);
        var deg = percentage/100*360;
        var top,left;
        var param = Math.PI/180;
        
        if(0<percentage && percentage<25){
            deg = deg-270;
            y = Math.sin(deg*param)*option.r;
            x = Math.cos(deg*param)*option.r;
            top = option.divWidth/2 - y ;
            left = option.divWidth/2- x ;
        }else if(25<=percentage&&percentage<50){
            if(percentage === 25){
                top = option.divWidth/2;
                left = option.divWidth-(option.divWidth*9/180)/2;
            }else{
                deg = deg-180;
                x = Math.sin(deg*param)*option.r;
                y = Math.cos(deg*param)*option.r;
                top = option.divWidth/2 + y;
                left = option.divWidth/2 - x; 
            }
        }else if(50<=percentage&&percentage<75){
            if(percentage === 50){
                top = option.divWidth - (option.divWidth*9/180)/2;
                left = option.divWidth/2; 
            }else{
                deg = deg-90;
                y = Math.sin(deg*param)*option.r;
                x = Math.cos(deg*param)*option.r;
                top = option.divWidth/2 + y;
                left = option.divWidth/2 + x; 
            }
        }else if(75<=percentage&&percentage<100){
            if(percentage === 75){
                top = option.divWidth/2;
                left = (option.divWidth*9/180)/2;
            }else{
                deg = deg;
                x = Math.sin(deg*param)*option.r;
                y = Math.cos(deg*param)*option.r;
                top = option.divWidth/2 - y;
                left = option.divWidth/2 + x;
            }
        }else if(percentage === 0 || percentage === 100){
            top = (option.divWidth*9/180)/2;
            left = option.divWidth/2; 
        }
        $container.find(".smallCircleContainer").css({'top':(top-option.smallBoxWidth/2)+'px','left':(left-option.smallBoxWidth/2)+'px'});
    };

    ModalKpiOverview.prototype.laterRenderModal = function (names,values,ids) {
        var colorClass,fontColor,num=0,noIncluded=0;
        $(this.container).find(".kpiInfoBox>div").each(function(){
            var $kpiInfo = $(this).find(".kpiInfo");
            var $infos = $(this).find(".kpiInfo span");
            for(var i=0,length=ids.length;i<length;i++){
                if(ids[i] === $kpiInfo.attr("data-id")){
                    //  根据是否达标显示背景色
                    if(values[i] >= 60){
                        colorClass = 'passGreen';
                        num+=1;
                    }else{
                        if(values[i] < 0){
                            noIncluded+=1;
                        }
                        colorClass = 'noPassGreen';
                    }
                    $kpiInfo.removeClass().addClass("kpiInfo "+colorClass);
                    //和上次的对比  是否升降
                    var value = Number($infos.eq(1).html());
                    var arrowClass; 
                    if( values[i] > value ){
                        arrowClass = "glyphicon glyphicon-arrow-up";
                        fontColor = "#63b15b";
                    }else if( values[i] < value ){
                        arrowClass = "glyphicon glyphicon-arrow-down";
                        fontColor = "#f1b23e";
                    }else if( values[i] == value ){
                        arrowClass = "";
                    }
                    $kpiInfo.find("span").eq(2).removeClass().addClass(arrowClass).css("color",fontColor);
                    $infos.eq(1).html(values[i]);
                }
            }
        })
        //百分比
        var percentage = (num/(names.length-noIncluded)*100).toFixed(0);
        $(this.container).find(".percentageNum").html(percentage+'%');
        //小圆的定位
        this.smallCircle(Number(percentage),this.option)
    };

    ModalKpiOverview.prototype.attachEvent = function () {
       
    };

    ModalKpiOverview.prototype.showConfigMode = function () {

    };

    return ModalKpiOverview;
})()
﻿var ModalRealtimeWeather = (function () {
    var weatherImgs = {
        //<!-- 1阴天 start -->
        yin : '<svg style="fill: #eee;" x="0px" y="0px" width="110px" height="76px" viewBox="0 0 110 96" enable-background="new 0 0 110 96" xml:space="preserve">\
                <g>\
                    <path d="M75.291,34.467C70.5,26.344,61.767,21.32,52.311,21.32c-12.728,0-23.524,8.832-26.105,21.158  c-6.569,2.188-11.324,8.382-11.324,15.676c0,9.111,7.414,16.525,16.526,16.525c3.289,0,6.415-0.945,9.119-2.745  c3.647,1.8,7.688,2.745,11.785,2.745c4.251,0,8.451-1.029,12.205-2.966c3.149,1.939,6.733,2.966,10.492,2.966  c11.089,0,20.11-9.021,20.11-20.109C95.118,43.577,86.249,34.621,75.291,34.467z M75.007,69.104c-3.247,0-6.315-1.046-8.877-3.023  c-1.219-0.941-2.969-0.716-3.91,0.503c-0.018,0.021-0.027,0.047-0.045,0.07c-3.019,1.6-6.42,2.45-9.865,2.45  c-3.653,0-7.255-0.947-10.41-2.74c-0.795-0.451-1.713-0.461-2.488-0.123c-0.447,0.072-0.883,0.245-1.263,0.542  c-1.94,1.519-4.271,2.32-6.744,2.32c-6.038,0-10.95-4.911-10.95-10.949s4.912-10.951,10.95-10.951c3.048,0,5.979,1.285,8.048,3.521  c1.044,1.132,2.809,1.201,3.938,0.157c1.131-1.045,1.202-2.809,0.157-3.938c-2.941-3.187-7.042-5.088-11.354-5.296  C34.91,32.951,42.94,26.893,52.31,26.893c6.688,0,12.931,3.178,16.885,8.443c-2.639,0.797-5.108,2.118-7.232,3.93  c-1.171,0.999-1.311,2.761-0.313,3.932c1,1.172,2.762,1.31,3.932,0.31c2.624-2.239,5.973-3.472,9.428-3.472  c8.014,0,14.535,6.52,14.535,14.534C89.542,62.584,83.021,69.104,75.007,69.104z"/>\
                </g>\
                </svg>',
        //<!-- 1阴天 end -->

        //<!-- 2大雨 start -->
        dayu : '<svg style="fill: #eee;" x="0px" y="0px" width="110px" height="76px" viewBox="0 0 110 96" enable-background="new 0 0 110 96" xml:space="preserve">\
                <g>\
                    <path d="M75.293,23.69c-4.791-8.123-13.525-13.147-22.981-13.147c-12.726,0-23.525,8.832-26.107,21.159   c-6.568,2.188-11.323,8.381-11.323,15.675c0,9.112,7.414,16.526,16.525,16.526c3.289,0,6.415-0.945,9.119-2.744   c3.648,1.797,7.689,2.744,11.786,2.744c4.25,0,8.452-1.029,12.206-2.966c3.149,1.938,6.732,2.966,10.492,2.966   c11.088,0,20.108-9.021,20.108-20.11C95.118,32.798,86.251,23.841,75.293,23.69z M75.01,58.326c-3.246,0-6.315-1.045-8.877-3.023   c-1.22-0.941-2.971-0.717-3.91,0.503c-0.019,0.021-0.027,0.047-0.043,0.069c-3.021,1.601-6.422,2.451-9.867,2.451   c-3.656,0-7.256-0.947-10.411-2.74c-0.794-0.453-1.713-0.461-2.491-0.123c-0.444,0.074-0.879,0.244-1.26,0.543   c-1.938,1.52-4.271,2.32-6.743,2.32c-6.038,0-10.951-4.912-10.951-10.95c0-6.038,4.913-10.951,10.951-10.951   c3.045,0,5.979,1.285,8.047,3.523c1.047,1.131,2.81,1.202,3.939,0.156c1.131-1.045,1.201-2.81,0.156-3.938   c-2.942-3.185-7.043-5.086-11.354-5.294c2.718-8.697,10.748-14.755,20.117-14.755c6.69,0,12.929,3.177,16.885,8.443   c-2.64,0.797-5.109,2.118-7.233,3.93c-1.17,0.999-1.311,2.76-0.312,3.931c0.999,1.172,2.759,1.311,3.931,0.311   c2.624-2.239,5.973-3.472,9.43-3.472c8.014,0,14.533,6.52,14.533,14.534C89.544,51.806,83.023,58.326,75.01,58.326z"/>\
                    <path d="M44.751,79.875c0,3.084-2.5,5.582-5.583,5.582s-5.583-2.498-5.583-5.582s5.583-11.408,5.583-11.408   S44.751,76.791,44.751,79.875z"/>\
                    <path d="M59.557,79.875c0,3.084-2.5,5.582-5.582,5.582c-3.084,0-5.583-2.498-5.583-5.582s5.583-11.408,5.583-11.408   S59.557,76.791,59.557,79.875z"/>\
                    <path d="M74.362,79.875c0,3.084-2.499,5.582-5.583,5.582c-3.083,0-5.583-2.498-5.583-5.582   s5.583-11.408,5.583-11.408S74.362,76.791,74.362,79.875z"/>\
                </g>\
                </svg>',
        //<!-- 2大雨 end -->

        //<!-- 3暴雨 start -->
        baoyu : '<svg style="fill: #eee;" x="0px" y="0px" width="110px" height="76px" viewBox="0 0 110 96" enable-background="new 0 0 110 96" xml:space="preserve">\
                <g>\
                    <path d="M75.292,23.756c-4.791-8.123-13.524-13.146-22.98-13.146c-12.729,0-23.527,8.832-26.107,21.159   c-6.569,2.187-11.324,8.381-11.324,15.675c0,9.112,7.414,16.526,16.526,16.526c3.29,0,6.416-0.946,9.118-2.745   c3.648,1.799,7.69,2.745,11.787,2.745c4.25,0,8.452-1.03,12.206-2.967c3.148,1.939,6.731,2.967,10.492,2.967   c11.088,0,20.109-9.021,20.109-20.11C95.119,32.865,86.25,23.909,75.292,23.756z M75.008,58.394c-3.246,0-6.316-1.046-8.878-3.024   c-1.219-0.94-2.969-0.716-3.909,0.503c-0.019,0.021-0.027,0.047-0.045,0.07c-3.02,1.6-6.421,2.451-9.865,2.451   c-3.655,0-7.256-0.948-10.412-2.741c-0.795-0.451-1.713-0.461-2.49-0.122c-0.445,0.074-0.881,0.244-1.261,0.542   c-1.94,1.519-4.271,2.321-6.743,2.321c-6.038,0-10.951-4.912-10.951-10.95s4.913-10.951,10.951-10.951   c3.046,0,5.979,1.285,8.047,3.522c1.044,1.132,2.808,1.2,3.938,0.156c1.132-1.045,1.202-2.809,0.157-3.938   c-2.94-3.187-7.042-5.087-11.354-5.295c2.717-8.697,10.748-14.755,20.118-14.755c6.688,0,12.928,3.177,16.884,8.442   c-2.641,0.797-5.11,2.118-7.234,3.931c-1.171,0.999-1.31,2.76-0.313,3.931c1,1.172,2.762,1.31,3.932,0.31   c2.623-2.238,5.973-3.472,9.428-3.472c8.016,0,14.535,6.521,14.535,14.534C89.543,51.872,83.021,58.394,75.008,58.394z"/>\
                    <path d="M30.448,85.391c-0.531,0-1.067-0.149-1.543-0.47c-1.281-0.854-1.628-2.584-0.773-3.864l9.026-13.539   c0.854-1.28,2.584-1.629,3.865-0.772c1.281,0.854,1.627,2.584,0.773,3.865L32.77,84.151C32.232,84.955,31.348,85.391,30.448,85.391   z"/>\
                    <path d="M45.313,85.391c-0.53,0-1.067-0.149-1.543-0.47c-1.281-0.854-1.627-2.584-0.772-3.864l9.026-13.539   c0.854-1.28,2.585-1.629,3.865-0.772c1.281,0.854,1.627,2.584,0.773,3.865l-9.026,13.541   C47.099,84.955,46.214,85.391,45.313,85.391z"/>\
                    <path d="M60.182,85.391c-0.53,0-1.067-0.149-1.543-0.47c-1.283-0.854-1.627-2.584-0.772-3.864l9.024-13.539   c0.854-1.28,2.586-1.629,3.867-0.772c1.279,0.854,1.627,2.584,0.772,3.865l-9.027,13.541   C61.967,84.955,61.083,85.391,60.182,85.391z"/>\
                </g>\
                </svg>',
        //<!-- 3暴雨 end -->

        //<!-- 4多云 start -->
        duoyun : '<svg style="fill: #eee;" x="0px" y="0px" width="110px" height="76px" viewBox="0 0 110 96" enable-background="new 0 0 110 96" xml:space="preserve">\
                    <g>\
                        <g>\
                            <path d="M59.271,34.332c-4.592-8.123-12.961-13.146-22.021-13.146c-12.197,0-22.546,8.832-25.019,21.159    C5.936,44.531,1.379,50.726,1.379,58.02c0,9.111,7.104,16.525,15.836,16.525c3.152,0,6.148-0.945,8.739-2.745    c3.495,1.8,7.368,2.745,11.295,2.745c4.074,0,8.098-1.029,11.696-2.966c3.017,1.939,6.451,2.966,10.053,2.966    c10.627,0,19.271-9.021,19.271-20.109C78.271,43.441,69.772,34.485,59.271,34.332z M58.998,68.97    c-3.109,0-6.051-1.047-8.506-3.024c-1.168-0.94-2.845-0.715-3.747,0.503c-0.017,0.021-0.025,0.047-0.042,0.07    c-2.893,1.601-6.153,2.452-9.453,2.452c-3.504,0-6.953-0.948-9.977-2.741c-0.759-0.45-1.639-0.46-2.384-0.123    c-0.428,0.074-0.846,0.244-1.211,0.542c-1.86,1.519-4.096,2.321-6.463,2.321c-5.787,0-10.494-4.912-10.494-10.95    s4.707-10.951,10.494-10.951c2.92,0,5.729,1.285,7.711,3.521c1.003,1.134,2.692,1.202,3.775,0.157    c1.084-1.045,1.15-2.809,0.147-3.938c-2.817-3.187-6.749-5.087-10.88-5.295c2.604-8.697,10.3-14.755,19.277-14.755    c6.411,0,12.39,3.177,16.181,8.442c-2.528,0.797-4.897,2.118-6.934,3.93c-1.121,0.999-1.254,2.761-0.296,3.932    c0.959,1.171,2.645,1.31,3.767,0.31c2.514-2.238,5.722-3.472,9.033-3.472c7.682,0,13.93,6.52,13.93,14.534    C72.928,62.448,66.68,68.97,58.998,68.97z"/>\
                            <g>\
                                <path d="M93.438,42.01c-3.744-6.411-10.431-10.365-17.66-10.365c-3.071,0-6.082,0.715-8.819,2.063     c1.803,1.117,3.451,2.482,4.896,4.05c1.271-0.351,2.588-0.537,3.923-0.537c4.587,0,8.882,2.146,11.767,5.744     c-1.765,0.665-3.414,1.654-4.861,2.941c-1.121,1-1.254,2.759-0.297,3.931c0.957,1.17,2.644,1.312,3.767,0.313     c1.874-1.67,4.269-2.59,6.735-2.59c5.729,0,10.388,4.861,10.388,10.839c0,5.977-4.659,10.84-10.388,10.84     c-2.319,0-4.514-0.78-6.344-2.256c-1.148-0.927-2.791-0.718-3.701,0.452c-2.168,1.176-4.6,1.804-7.064,1.804     c-0.736,0-1.473-0.063-2.195-0.17c-1.275,1.733-2.77,3.286-4.441,4.603c2.129,0.752,4.373,1.145,6.638,1.145     c3.188,0,6.343-0.781,9.181-2.25c2.396,1.469,5.099,2.25,7.93,2.25c8.675,0,15.73-7.365,15.73-16.416     C108.619,49.538,101.856,42.316,93.438,42.01z"/>\
                            </g>\
                        </g>\
                        <path d="M59.271,34.332c-4.592-8.123-12.961-13.146-22.021-13.146c-12.197,0-22.546,8.832-25.019,21.159   C5.936,44.531,1.379,50.726,1.379,58.02c0,9.111,7.104,16.525,15.836,16.525c3.152,0,6.148-0.945,8.739-2.745   c3.495,1.8,7.368,2.745,11.295,2.745c4.074,0,8.098-1.029,11.696-2.966c3.017,1.939,6.451,2.966,10.053,2.966   c10.627,0,19.271-9.021,19.271-20.109C78.271,43.441,69.772,34.485,59.271,34.332z M58.998,68.97c-3.109,0-6.051-1.047-8.506-3.024   c-1.168-0.94-2.845-0.715-3.747,0.503c-0.017,0.021-0.025,0.047-0.042,0.07c-2.893,1.601-6.153,2.452-9.453,2.452   c-3.504,0-6.953-0.948-9.977-2.741c-0.759-0.45-1.639-0.46-2.384-0.123c-0.428,0.074-0.846,0.244-1.211,0.542   c-1.86,1.519-4.096,2.321-6.463,2.321c-5.787,0-10.494-4.912-10.494-10.95s4.707-10.951,10.494-10.951   c2.92,0,5.729,1.285,7.711,3.521c1.003,1.134,2.692,1.202,3.775,0.157c1.084-1.045,1.15-2.809,0.147-3.938   c-2.817-3.187-6.749-5.087-10.88-5.295c2.604-8.697,10.3-14.755,19.277-14.755c6.411,0,12.39,3.177,16.181,8.442   c-2.528,0.797-4.897,2.118-6.934,3.93c-1.121,0.999-1.254,2.761-0.296,3.932c0.959,1.171,2.645,1.31,3.767,0.31   c2.514-2.238,5.722-3.472,9.033-3.472c7.682,0,13.93,6.52,13.93,14.534C72.928,62.448,66.68,68.97,58.998,68.97z"/>\
                    </g>\
                    </svg>',
        //<!-- 4多云 end -->

        //<!-- 5小雨 start -->
        xiaoyu : '<svg style="fill: #eee;" x="0px" y="0px" width="110px" height="76px" viewBox="0 0 110 96" enable-background="new 0 0 110 96" xml:space="preserve">\
                <g>\
                    <path d="M75.293,23.69c-4.791-8.123-13.523-13.147-22.98-13.147c-12.727,0-23.526,8.831-26.107,21.159   c-6.567,2.188-11.323,8.382-11.323,15.675c0,9.112,7.414,16.526,16.525,16.526c3.289,0,6.415-0.945,9.119-2.744   c3.647,1.799,7.688,2.744,11.786,2.744c4.25,0,8.451-1.029,12.205-2.966c3.147,1.938,6.731,2.966,10.492,2.966   c11.09,0,20.108-9.021,20.108-20.11C95.118,32.798,86.25,23.842,75.293,23.69z M75.009,58.326c-3.246,0-6.316-1.047-8.877-3.023   c-1.22-0.941-2.971-0.717-3.91,0.501c-0.02,0.021-0.027,0.048-0.045,0.069c-2.15,1.142-4.495,1.896-6.912,2.238l-6.184-0.043   c-2.521-0.39-4.963-1.224-7.183-2.482c-0.795-0.453-1.716-0.463-2.493-0.121c-0.443,0.074-0.877,0.244-1.256,0.539   c-1.942,1.52-4.274,2.322-6.745,2.322c-6.038,0-10.951-4.912-10.951-10.951c0-6.038,4.913-10.951,10.951-10.951   c3.046,0,5.979,1.285,8.048,3.523c1.044,1.13,2.811,1.2,3.939,0.156c1.129-1.044,1.2-2.81,0.155-3.938   c-2.941-3.185-7.043-5.086-11.354-5.294c2.716-8.697,10.747-14.755,20.116-14.755c6.689,0,12.929,3.177,16.885,8.443   c-2.639,0.797-5.107,2.118-7.232,3.93c-1.173,1-1.313,2.76-0.313,3.931c0.997,1.17,2.758,1.312,3.93,0.313   c2.625-2.24,5.975-3.473,9.431-3.473c8.015,0,14.534,6.519,14.534,14.534C89.544,51.808,83.024,58.326,75.009,58.326z"/>\
                    <path d="M59.558,79.875c0,3.084-2.5,5.582-5.583,5.582s-5.583-2.498-5.583-5.582s5.583-11.408,5.583-11.408   S59.558,76.791,59.558,79.875z"/>\
                </g>\
                </svg>',
        //<!-- 5小雨 end -->

        //<!-- 6晴转多云 start -->
        qing_duoyun : '<svg style="fill: #eee;" x="0px" y="0px" width="110px" height="76px" viewBox="0 0 110 96" enable-background="new 0 0 110 96" xml:space="preserve">\
                <g>\
                    <g>\
                        <g>\
                            <path d="M90.923,16.534c1.333,0.771,1.79,2.479,1.021,3.811l-3.938,6.816c-0.77,1.334-2.475,1.791-3.809,1.021     c-1.332-0.771-1.79-2.477-1.02-3.811l3.938-6.814C87.885,16.225,89.588,15.768,90.923,16.534z"/>\
                        </g>\
                        <g>\
                            <path d="M103.951,29.564c0.771,1.334,0.313,3.039-1.021,3.809l-6.818,3.938c-1.332,0.771-3.039,0.313-3.809-1.02     c-0.77-1.336-0.314-3.039,1.02-3.811l6.818-3.938C101.477,27.773,103.18,28.232,103.951,29.564z"/>\
                        </g>\
                        <g>\
                            <path d="M108.721,47.36c0,1.541-1.25,2.787-2.787,2.787h-7.873c-1.541,0.002-2.789-1.248-2.789-2.787     c0-1.541,1.248-2.785,2.789-2.787l7.873,0.002C107.471,44.575,108.719,45.819,108.721,47.36z"/>\
                        </g>\
                        <g>\
                            <path d="M103.951,65.157c-0.77,1.334-2.475,1.789-3.809,1.021l-6.817-3.938c-1.333-0.77-1.79-2.475-1.021-3.807     c0.771-1.336,2.475-1.791,3.809-1.021l6.818,3.938C104.266,62.118,104.721,63.823,103.951,65.157z"/>\
                        </g>\
                        <path d="M62.053,28.184c-1.332,0.77-3.037,0.313-3.808-1.021l-3.937-6.818c-0.771-1.332-0.314-3.035,1.02-3.809    c1.333-0.77,3.038-0.313,3.807,1.021l3.938,6.814C63.844,25.708,63.387,27.413,62.053,28.184z"/>\
                        <g>\
                            <path d="M73.126,25.215c-1.541,0-2.788-1.247-2.788-2.787v-7.873c0-1.539,1.247-2.787,2.788-2.787     c1.54,0,2.787,1.248,2.787,2.787v7.873C75.913,23.969,74.666,25.215,73.126,25.215z"/>\
                        </g>\
                    </g>\
                    <g>\
                        <path d="M61.691,44.021c-4.791-8.123-13.524-13.15-22.981-13.15c-12.727,0-23.525,8.83-26.105,21.16    C6.035,54.22,1.279,60.412,1.279,67.707c0,9.111,7.414,16.525,16.526,16.525c3.29,0,6.415-0.947,9.118-2.746    c3.648,1.799,7.691,2.746,11.787,2.746c4.251,0,8.451-1.031,12.205-2.965c3.15,1.938,6.732,2.965,10.493,2.965    c11.088,0,20.108-9.021,20.108-20.109C81.518,53.127,72.648,44.172,61.691,44.021z M61.406,78.654    c-3.247,0-6.317-1.045-8.879-3.025c-1.217-0.939-2.969-0.715-3.909,0.505c-0.017,0.022-0.027,0.048-0.046,0.067    c-3.02,1.604-6.42,2.453-9.864,2.453c-3.655,0-7.255-0.945-10.411-2.742c-0.792-0.449-1.71-0.457-2.485-0.121    c-0.447,0.074-0.884,0.244-1.266,0.541c-1.939,1.521-4.271,2.322-6.742,2.322c-6.038,0-10.951-4.912-10.951-10.949    c0-6.039,4.913-10.951,10.951-10.951c3.047,0,5.979,1.283,8.048,3.523c1.045,1.131,2.809,1.201,3.938,0.156    s1.201-2.809,0.156-3.939c-2.942-3.186-7.042-5.086-11.354-5.295c2.719-8.697,10.748-14.754,20.117-14.754    c6.688,0,12.929,3.176,16.884,8.441c-2.638,0.799-5.109,2.117-7.232,3.932c-1.17,0.998-1.312,2.76-0.312,3.93    s2.761,1.311,3.931,0.313c2.625-2.24,5.973-3.475,9.429-3.475c8.014,0,14.534,6.521,14.534,14.535    C75.941,72.134,69.421,78.654,61.406,78.654z"/>\
                        <g>\
                            <path d="M91.902,47.586c0-10.354-8.422-18.775-18.775-18.775c-5.336,0.002-10.3,2.225-13.822,6.068     c1.295,1.174,2.498,2.453,3.584,3.846c2.557-2.959,6.254-4.684,10.238-4.686c7.469,0,13.544,6.076,13.544,13.547     c0,3.023-0.987,5.854-2.702,8.139c0.727,1.932,1.217,3.977,1.42,6.1C89.443,58.344,91.902,53.208,91.902,47.586z"/>\
                            <g>\
                                <path d="M91.943,74.377l-3.938-6.816c-0.55-0.951-1.574-1.445-2.604-1.379c-0.172,2.033-0.6,3.998-1.25,5.855      l2.961,5.126c0.77,1.334,2.475,1.791,3.808,1.021C92.256,77.414,92.713,75.711,91.943,74.377z"/>\
                            </g>\
                        </g>\
                    </g>\
                    <path d="M61.691,44.021c-4.791-8.123-13.524-13.15-22.981-13.15c-12.727,0-23.525,8.83-26.105,21.16   C6.035,54.22,1.279,60.412,1.279,67.707c0,9.111,7.414,16.525,16.526,16.525c3.29,0,6.415-0.947,9.118-2.746   c3.648,1.799,7.691,2.746,11.787,2.746c4.251,0,8.451-1.031,12.205-2.965c3.15,1.938,6.732,2.965,10.493,2.965   c11.088,0,20.108-9.021,20.108-20.109C81.518,53.127,72.648,44.172,61.691,44.021z M61.406,78.654   c-3.247,0-6.317-1.045-8.879-3.025c-1.217-0.939-2.969-0.715-3.909,0.505c-0.017,0.022-0.027,0.048-0.046,0.067   c-3.02,1.604-6.42,2.453-9.864,2.453c-3.655,0-7.255-0.945-10.411-2.742c-0.792-0.449-1.71-0.457-2.485-0.121   c-0.447,0.074-0.884,0.244-1.266,0.541c-1.939,1.521-4.271,2.322-6.742,2.322c-6.038,0-10.951-4.912-10.951-10.949   c0-6.039,4.913-10.951,10.951-10.951c3.047,0,5.979,1.283,8.048,3.523c1.045,1.131,2.809,1.201,3.938,0.156   s1.201-2.809,0.156-3.939c-2.942-3.186-7.042-5.086-11.354-5.295c2.719-8.697,10.748-14.754,20.117-14.754   c6.688,0,12.929,3.176,16.884,8.441c-2.638,0.799-5.109,2.117-7.232,3.932c-1.17,0.998-1.312,2.76-0.312,3.93   s2.761,1.311,3.931,0.313c2.625-2.24,5.973-3.475,9.429-3.475c8.014,0,14.534,6.521,14.534,14.535   C75.941,72.134,69.421,78.654,61.406,78.654z"/>\
                </g>\
                </svg>',
        //<!-- 6晴转多云 end -->

        //<!-- 7晴 start -->
        qing : '<svg style="fill: #eee;"  x="0px" y="0px" width="110px" height="76px" viewBox="0 0 110 96" enable-background="new 0 0 110 96" xml:space="preserve">\
				<g>\
					<path d="M54.999,67c-10.354,0-18.776-8.424-18.776-18.774c0-10.354,8.425-18.776,18.776-18.776   c10.354,0,18.775,8.424,18.775,18.776C73.776,58.576,65.354,67,54.999,67z M54.999,34.681c-7.469,0-13.545,6.076-13.545,13.545   c0,7.47,6.076,13.545,13.545,13.545c7.468,0,13.545-6.075,13.545-13.545C68.544,40.756,62.468,34.681,54.999,34.681z"/>\
					<g>\
						<g>\
							<path d="M43.927,67.176c1.333,0.771,1.79,2.479,1.021,3.811l-3.938,6.816c-0.769,1.332-2.476,1.791-3.808,1.023     c-1.334-0.773-1.791-2.479-1.021-3.813l3.938-6.818C40.889,66.865,42.594,66.408,43.927,67.176z"/>\
							<path d="M72.796,17.174c1.333,0.771,1.79,2.476,1.021,3.81l-3.938,6.815c-0.771,1.334-2.476,1.791-3.808,1.022     c-1.334-0.77-1.791-2.475-1.021-3.809l3.938-6.818C69.758,16.861,71.462,16.404,72.796,17.174z"/>\
						</g>\
						<g>\
							<path d="M35.821,59.07c0.771,1.334,0.313,3.039-1.021,3.811l-6.817,3.936c-1.334,0.77-3.039,0.313-3.81-1.02     c-0.771-1.334-0.313-3.036,1.021-3.809l6.816-3.938C33.346,57.281,35.052,57.738,35.821,59.07z"/>\
							<path d="M85.825,30.204c0.77,1.334,0.313,3.039-1.021,3.807l-6.816,3.938c-1.334,0.77-3.039,0.313-3.811-1.021     c-0.77-1.336-0.313-3.039,1.021-3.809l6.816-3.938C83.351,28.413,85.054,28.87,85.825,30.204z"/>\
						</g>\
						<g>\
							<path d="M32.854,48c0,1.539-1.246,2.785-2.787,2.785h-7.873c-1.539,0-2.787-1.248-2.787-2.785     c0-1.541,1.246-2.787,2.787-2.787l7.873-0.002C31.608,45.211,32.854,46.459,32.854,48z"/>\
							<path d="M90.593,48c0,1.539-1.248,2.785-2.788,2.785h-7.872c-1.541,0.002-2.787-1.248-2.787-2.785     c0-1.541,1.246-2.787,2.787-2.789l7.872,0.002C89.345,45.213,90.593,46.459,90.593,48z"/>\
						</g>\
						<g>\
							<path d="M35.821,36.926c-0.771,1.336-2.475,1.791-3.809,1.021l-6.816-3.938c-1.334-0.768-1.791-2.473-1.021-3.807     c0.771-1.334,2.477-1.791,3.809-1.021l6.817,3.938C36.134,33.89,36.591,35.595,35.821,36.926z"/>\
							<path d="M85.825,65.797c-0.771,1.334-2.475,1.789-3.811,1.02l-6.816-3.936c-1.332-0.77-1.791-2.477-1.021-3.809     c0.771-1.334,2.476-1.791,3.81-1.021l6.817,3.937C86.137,62.758,86.594,64.463,85.825,65.797z"/>\
						</g>\
						<g>\
							<path d="M43.927,28.822c-1.334,0.769-3.038,0.312-3.809-1.021l-3.938-6.817c-0.77-1.334-0.313-3.037,1.021-3.808     c1.332-0.771,3.037-0.313,3.808,1.021l3.938,6.818C45.717,26.349,45.26,28.054,43.927,28.822z"/>\
							<path d="M72.796,78.824c-1.333,0.771-3.038,0.313-3.809-1.021l-3.938-6.815c-0.77-1.334-0.313-3.039,1.021-3.809     c1.332-0.77,3.037-0.313,3.808,1.021l3.938,6.816C74.586,76.35,74.129,78.053,72.796,78.824z"/>\
						</g>\
						<g>\
							<path d="M54.999,25.854c-1.54,0-2.788-1.248-2.788-2.787v-7.873c0-1.538,1.248-2.786,2.788-2.786     c1.539,0,2.787,1.248,2.787,2.786v7.873C57.788,24.607,56.54,25.854,54.999,25.854z"/>\
							<path d="M54.999,83.592c-1.54,0-2.788-1.246-2.788-2.787v-7.871c0-1.541,1.248-2.789,2.788-2.789     c1.539,0,2.787,1.248,2.787,2.789v7.871C57.788,82.346,56.54,83.592,54.999,83.592z"/>\
						</g>\
					</g>\
				</g>\
			</svg>',
        //<!-- 7晴 end -->

        //<!-- 8多云_阵雨 start -->
        duoyun_zhenyu : '<svg style="fill: #eee;" x="0px" y="0px" width="110px" height="76px" viewBox="0 0 110 96" enable-background="new 0 0 110 96" xml:space="preserve">\
                        <g>\
                            <g>\
                                <g>\
                                    <g>\
                                        <path d="M90.924,5.36c1.334,0.771,1.791,2.476,1.021,3.81l-3.938,6.817c-0.77,1.334-2.475,1.791-3.809,1.021      c-1.332-0.771-1.789-2.476-1.021-3.81l3.939-6.815C87.885,5.049,89.59,4.592,90.924,5.36z"/>\
                                    </g>\
                                    <g>\
                                        <path d="M103.953,18.39c0.77,1.334,0.313,3.039-1.021,3.807l-6.818,3.938c-1.332,0.771-3.037,0.313-3.809-1.021      c-0.77-1.334-0.313-3.039,1.021-3.809l6.818-3.938C101.477,16.599,103.18,17.056,103.953,18.39z"/>\
                                    </g>\
                                    <g>\
                                        <path d="M108.721,36.187c0,1.541-1.248,2.787-2.787,2.787h-7.873c-1.543,0-2.787-1.248-2.787-2.787      c0-1.541,1.244-2.787,2.785-2.787h7.873C107.473,33.399,108.719,34.646,108.721,36.187z"/>\
                                    </g>\
                                    <g>\
                                        <path d="M103.953,53.983c-0.771,1.334-2.477,1.789-3.811,1.021l-6.816-3.937      c-1.334-0.771-1.791-2.476-1.021-3.808c0.771-1.336,2.477-1.79,3.809-1.021l6.816,3.938      C104.264,50.944,104.721,52.649,103.953,53.983z"/>\
                                    </g>\
                                    <path d="M62.053,17.008c-1.332,0.771-3.037,0.313-3.807-1.021l-3.938-6.818c-0.77-1.334-0.313-3.037,1.021-3.808     c1.332-0.771,3.037-0.313,3.807,1.021l3.939,6.815C63.844,14.534,63.387,16.239,62.053,17.008z"/>\
                                    <g>\
                                        <path d="M73.127,14.041c-1.539,0-2.787-1.247-2.787-2.788V3.38c0-1.539,1.248-2.786,2.787-2.786      c1.541,0,2.789,1.247,2.789,2.786v7.873C75.916,12.794,74.668,14.041,73.127,14.041z"/>\
                                    </g>\
                                </g>\
                                <g>\
                                    <path d="M61.691,32.845c-4.791-8.121-13.523-13.148-22.98-13.148c-12.729,0-23.527,8.83-26.107,21.16     C6.035,43.043,1.279,49.235,1.279,56.532c0,9.111,7.414,16.523,16.525,16.523c3.291,0,6.416-0.945,9.121-2.742     c3.646,1.797,7.689,2.742,11.785,2.742c4.252,0,8.453-1.031,12.207-2.966c3.148,1.938,6.73,2.966,10.492,2.966     c11.088,0,20.107-9.021,20.107-20.109C81.516,41.952,72.65,32.998,61.691,32.845z M61.408,67.48     c-3.246,0-6.316-1.045-8.879-3.025c-1.219-0.939-2.971-0.716-3.91,0.505c-0.018,0.021-0.027,0.047-0.043,0.067     c-3.02,1.604-6.422,2.453-9.867,2.453c-3.654,0-7.254-0.947-10.41-2.742c-0.793-0.449-1.711-0.459-2.488-0.121     c-0.445,0.074-0.883,0.244-1.264,0.541c-1.939,1.521-4.271,2.322-6.744,2.322c-6.039,0-10.951-4.912-10.951-10.949     c0-6.041,4.914-10.953,10.951-10.953c3.047,0,5.98,1.285,8.047,3.523c1.045,1.133,2.811,1.203,3.941,0.155     c1.131-1.043,1.199-2.808,0.154-3.938c-2.939-3.187-7.043-5.088-11.354-5.295c2.717-8.697,10.748-14.756,20.115-14.756     c6.689,0,12.93,3.178,16.885,8.442c-2.639,0.799-5.109,2.116-7.234,3.931c-1.172,1-1.311,2.76-0.311,3.932     c1,1.17,2.76,1.31,3.93,0.312c2.623-2.239,5.973-3.474,9.43-3.474c8.014,0,14.533,6.521,14.533,14.533S69.422,67.48,61.408,67.48     z"/>\
                                    <g>\
                                        <path d="M91.904,36.411c0-10.354-8.424-18.773-18.777-18.773c-5.336,0-10.301,2.225-13.822,6.068      c1.295,1.173,2.498,2.453,3.584,3.846c2.557-2.96,6.254-4.684,10.238-4.686c7.469,0,13.547,6.076,13.547,13.545      c0,3.025-0.99,5.854-2.705,8.141c0.727,1.932,1.217,3.977,1.42,6.098C89.445,47.166,91.904,42.034,91.904,36.411z"/>\
                                        <g>\
                                            <path d="M91.945,63.203l-3.939-6.819c-0.549-0.948-1.574-1.442-2.604-1.377c-0.174,2.034-0.6,3.998-1.248,5.856       l2.959,5.125c0.771,1.336,2.477,1.791,3.809,1.021C92.258,66.24,92.715,64.537,91.945,63.203z"/>\
                                        </g>\
                                    </g>\
                                </g>\
                                <path d="M61.691,32.845c-4.791-8.121-13.523-13.148-22.98-13.148c-12.729,0-23.527,8.83-26.107,21.16    C6.035,43.043,1.279,49.235,1.279,56.532c0,9.111,7.414,16.523,16.525,16.523c3.291,0,6.416-0.945,9.121-2.742    c3.646,1.797,7.689,2.742,11.785,2.742c4.252,0,8.453-1.031,12.207-2.966c3.148,1.938,6.73,2.966,10.492,2.966    c11.088,0,20.107-9.021,20.107-20.109C81.516,41.952,72.65,32.998,61.691,32.845z M61.408,67.48c-3.246,0-6.316-1.045-8.879-3.025    c-1.219-0.939-2.971-0.716-3.91,0.505c-0.018,0.021-0.027,0.047-0.043,0.067c-3.02,1.604-6.422,2.453-9.867,2.453    c-3.654,0-7.254-0.947-10.41-2.742c-0.793-0.449-1.711-0.459-2.488-0.121c-0.445,0.074-0.883,0.244-1.264,0.541    c-1.939,1.521-4.271,2.322-6.744,2.322c-6.039,0-10.951-4.912-10.951-10.949c0-6.041,4.914-10.953,10.951-10.953    c3.047,0,5.98,1.285,8.047,3.523c1.045,1.133,2.811,1.203,3.941,0.155c1.131-1.043,1.199-2.808,0.154-3.938    c-2.939-3.187-7.043-5.088-11.354-5.295c2.717-8.697,10.748-14.756,20.115-14.756c6.689,0,12.93,3.178,16.885,8.442    c-2.639,0.799-5.109,2.116-7.234,3.931c-1.172,1-1.311,2.76-0.311,3.932c1,1.17,2.76,1.31,3.93,0.312    c2.623-2.239,5.973-3.474,9.43-3.474c8.014,0,14.533,6.521,14.533,14.533S69.422,67.48,61.408,67.48z"/>\
                            </g>\
                            <path d="M39.525,89.822c0,3.086-2.5,5.584-5.582,5.584c-3.084,0-5.584-2.498-5.584-5.584   c0-3.082,5.584-11.406,5.584-11.406S39.525,86.74,39.525,89.822z"/>\
                            <path d="M54.332,89.822c0,3.086-2.5,5.584-5.582,5.584c-3.084,0-5.584-2.498-5.584-5.584   c0-3.082,5.584-11.406,5.584-11.406S54.332,86.74,54.332,89.822z"/>\
                        </g>\
                        </svg>',
        //<!-- 8多云_阵雨 end -->

        //<!-- 9打雷 start -->
        dalei : '<svg style="fill: #eee;" x="0px" y="0px" width="110px" height="76px" viewBox="0 0 110 96" enable-background="new 0 0 110 96" xml:space="preserve">\
                <g>\
                    <g>\
                        <path d="M75.294,27.418c-4.791-8.121-13.525-13.146-22.98-13.146c-12.729,0-23.527,8.83-26.107,21.16    c-6.57,2.187-11.324,8.379-11.324,15.674c0,9.11,7.414,16.524,16.525,16.524c3.291,0,6.416-0.945,9.119-2.744    c0.365,0.181,0.738,0.347,1.111,0.508c0.352-0.805,1.945-5.232,1.945-5.232c-0.57-0.261-1.137-0.537-1.682-0.849    c-0.795-0.449-1.51-0.694-2.453-0.248c-0.445,0.073-0.918,0.37-1.301,0.67c-1.938,1.519-4.271,2.319-6.742,2.319    c-6.037,0-10.949-4.912-10.949-10.948c0-6.039,4.912-10.951,10.949-10.951c3.047,0,5.979,1.283,8.047,3.523    c1.047,1.131,2.811,1.201,3.939,0.156s1.199-2.808,0.156-3.938c-2.943-3.187-7.045-5.088-11.354-5.293    c2.717-8.699,10.746-14.756,20.115-14.756c6.689,0,12.93,3.176,16.887,8.441c-2.641,0.801-5.109,2.118-7.234,3.934    c-1.172,0.998-1.311,2.758-0.311,3.928c0.996,1.172,2.758,1.312,3.93,0.312c2.623-2.24,5.973-3.474,9.43-3.474    c8.014,0,14.535,6.521,14.535,14.535c0,8.015-6.521,14.532-14.535,14.532c-2.246,0-4.402-0.51-6.369-1.475    c-0.469,1.172-2.086,5.172-2.086,5.172c2.625,1.228,5.48,1.879,8.455,1.879c11.088,0,20.107-9.021,20.107-20.108    C95.118,36.528,86.251,27.571,75.294,27.418z"/>\
                    </g>\
                    <path d="M56.185,45.789c0.055-0.529-0.09-0.57-0.32-0.093l-9.371,19.437c-0.23,0.479,0.016,0.871,0.545,0.871h6.012   c0.529,0,0.936,0.432,0.896,0.961l-1,14.333c-0.035,0.529,0.129,0.576,0.367,0.103l10.475-20.774c0.24-0.476,0-0.869-0.529-0.881   l-7.525-0.149c-0.527-0.011-0.92-0.451-0.863-0.979L56.185,45.789z"/>\
                </g>\
                </svg>',
        //<!-- 9打雷 end -->

        //<!-- 10打雷_暴雨 start -->
        dalei_baoyu : '<svg style="fill: #eee;" x="0px" y="0px" width="110px" height="76px" viewBox="0 0 110 96" enable-background="new 0 0 110 96" xml:space="preserve">\
                        <g>\
                            <g>\
                                <g>\
                                    <path d="M75.293,20.978C70.502,12.855,61.768,7.832,52.311,7.832c-12.727,0-23.523,8.83-26.104,21.159     c-6.57,2.187-11.326,8.38-11.326,15.675c0,9.11,7.414,16.524,16.525,16.524c3.289,0,6.416-0.944,9.119-2.744     c0.365,0.181,0.738,0.345,1.111,0.509c0.35-0.806,1.947-5.234,1.947-5.234c-0.572-0.26-1.137-0.535-1.684-0.848     c-0.795-0.449-1.508-0.695-2.453-0.248c-0.445,0.073-0.918,0.373-1.301,0.668c-1.938,1.52-4.27,2.319-6.742,2.319     c-6.037,0-10.949-4.909-10.949-10.946c0-6.039,4.912-10.953,10.949-10.953c3.047,0,5.979,1.285,8.049,3.524     c1.047,1.132,2.809,1.201,3.938,0.156s1.201-2.809,0.156-3.938c-2.939-3.187-7.043-5.089-11.354-5.295     c2.719-8.697,10.748-14.755,20.115-14.755c6.691,0,12.932,3.175,16.887,8.441c-2.641,0.799-5.109,2.119-7.234,3.932     c-1.17,1-1.311,2.759-0.311,3.929c1,1.174,2.76,1.311,3.932,0.313c2.623-2.24,5.971-3.473,9.426-3.473     c8.016,0,14.535,6.521,14.535,14.535c0,8.012-6.521,14.53-14.535,14.53c-2.244,0-4.4-0.511-6.367-1.476     c-0.471,1.174-2.086,5.174-2.086,5.174c2.625,1.229,5.482,1.88,8.453,1.88c11.09,0,20.111-9.021,20.111-20.108     C95.119,30.088,86.252,21.131,75.293,20.978z"/>\
                                </g>\
                                <path d="M56.182,39.349c0.055-0.529-0.09-0.57-0.32-0.092L46.49,58.693c-0.229,0.479,0.018,0.869,0.547,0.869    h6.012c0.531,0,0.936,0.435,0.896,0.961l-1,14.332c-0.035,0.529,0.129,0.576,0.365,0.104l10.479-20.774    c0.236-0.476,0-0.869-0.529-0.881l-7.525-0.15c-0.529-0.01-0.92-0.45-0.865-0.979L56.182,39.349z"/>\
                            </g>\
                            <path d="M69.432,88.168c-0.484,0-0.979-0.127-1.426-0.396c-1.322-0.786-1.754-2.495-0.965-3.821l5.5-9.219   c0.787-1.322,2.502-1.753,3.82-0.968c1.322,0.793,1.756,2.502,0.967,3.824l-5.502,9.219C71.307,87.68,70.383,88.168,69.432,88.168z   "/>\
                            <path d="M40.76,88.168c-0.486,0-0.98-0.127-1.426-0.396c-1.322-0.786-1.756-2.495-0.967-3.821l5.5-9.219   c0.789-1.322,2.502-1.753,3.822-0.968c1.322,0.793,1.756,2.502,0.967,3.824l-5.502,9.219C42.635,87.68,41.709,88.168,40.76,88.168z   "/>\
                            <path d="M26.424,88.168c-0.486,0-0.979-0.127-1.426-0.396c-1.322-0.786-1.754-2.495-0.967-3.821l5.502-9.219   c0.789-1.322,2.502-1.753,3.82-0.968c1.322,0.793,1.756,2.502,0.967,3.824l-5.5,9.219C28.299,87.68,27.375,88.168,26.424,88.168z"/>\
                            <path d="M55.096,88.168c-0.486,0-0.979-0.127-1.426-0.396c-1.322-0.786-1.754-2.495-0.967-3.821l5.5-9.219   c0.789-1.322,2.504-1.753,3.822-0.968c1.322,0.793,1.754,2.502,0.967,3.824l-5.502,9.219C56.971,87.68,56.047,88.168,55.096,88.168   z"/>\
                        </g>\
                        </svg>',
        //<!-- 10打雷_暴雨 end -->

        //<!-- 11大雪 start -->
        daxue : '<svg style="fill: #eee;" x="0px" y="0px" width="110px" height="76px" viewBox="0 0 110 96" enable-background="new 0 0 110 96" xml:space="preserve">\
                <g>\
                    <path d="M75.294,18.086C70.503,9.963,61.771,4.94,52.313,4.94c-12.729,0-23.525,8.828-26.107,21.158   c-6.568,2.187-11.324,8.381-11.324,15.676c0,9.11,7.414,16.524,16.525,16.524c3.291,0,6.416-0.946,9.119-2.745   c3.648,1.797,7.689,2.745,11.787,2.745c4.25,0,8.451-1.032,12.205-2.967c3.146,1.938,6.73,2.967,10.492,2.967   c11.088,0,20.107-9.022,20.107-20.11C95.12,27.196,86.251,18.237,75.294,18.086z M75.011,52.721c-3.248,0-6.316-1.048-8.877-3.022   c-1.219-0.941-2.971-0.716-3.91,0.5c-0.02,0.022-0.027,0.049-0.045,0.073c-3.021,1.599-6.42,2.449-9.865,2.449   c-3.654,0-7.254-0.944-10.41-2.742c-0.795-0.45-1.715-0.461-2.492-0.123c-0.445,0.074-0.881,0.248-1.26,0.546   c-1.939,1.518-4.271,2.319-6.744,2.319c-6.037,0-10.951-4.912-10.951-10.946c0-6.041,4.914-10.955,10.951-10.955   c3.047,0,5.98,1.284,8.047,3.526c1.045,1.129,2.809,1.198,3.939,0.153c1.129-1.045,1.201-2.812,0.156-3.938   c-2.941-3.185-7.043-5.088-11.355-5.295c2.717-8.696,10.748-14.754,20.117-14.754c6.689,0,12.93,3.176,16.885,8.44   c-2.639,0.799-5.111,2.119-7.234,3.932c-1.172,1-1.311,2.763-0.311,3.932c1,1.17,2.76,1.313,3.93,0.313   c2.623-2.241,5.973-3.477,9.428-3.477c8.016,0,14.533,6.521,14.533,14.536C89.544,46.204,83.026,52.721,75.011,52.721z"/>\
                    <g>\
                        <g>\
                            <path d="M45.401,65.618c0.529,0.918,0.217,2.09-0.701,2.621l-10.115,5.84c-0.918,0.528-2.09,0.215-2.617-0.703     c-0.529-0.918-0.217-2.088,0.699-2.619l10.117-5.84C43.7,64.387,44.872,64.702,45.401,65.618z"/>\
                        </g>\
                        <g>\
                            <path d="M45.401,73.375c-0.529,0.918-1.701,1.232-2.619,0.703l-10.115-5.84c-0.918-0.531-1.229-1.703-0.701-2.621     c0.529-0.916,1.701-1.229,2.617-0.701l10.117,5.84C45.616,71.288,45.931,72.457,45.401,73.375z"/>\
                        </g>\
                        <g>\
                            <path d="M38.683,77.255c-1.059,0-1.916-0.856-1.916-1.92v-11.68c0-1.059,0.857-1.918,1.916-1.918     s1.918,0.859,1.918,1.918v11.68C40.601,76.398,39.741,77.255,38.683,77.255z"/>\
                        </g>\
                    </g>\
                    <g>\
                        <g>\
                            <path d="M76.196,65.618c0.529,0.918,0.215,2.09-0.701,2.621l-10.115,5.84c-0.918,0.528-2.09,0.215-2.619-0.701     c-0.529-0.92-0.215-2.09,0.701-2.621l10.115-5.84C74.495,64.387,75.667,64.702,76.196,65.618z"/>\
                        </g>\
                        <g>\
                            <path d="M76.196,73.375c-0.529,0.918-1.701,1.232-2.617,0.703l-10.117-5.84c-0.916-0.531-1.23-1.703-0.701-2.621     c0.529-0.916,1.701-1.229,2.619-0.701l10.115,5.84C76.411,71.288,76.726,72.457,76.196,73.375z"/>\
                        </g>\
                        <g>\
                            <path d="M69.479,77.255c-1.061,0-1.916-0.856-1.916-1.92v-11.68c0-1.059,0.855-1.918,1.916-1.918     c1.059,0,1.916,0.859,1.916,1.918v11.68C71.396,76.398,70.538,77.255,69.479,77.255z"/>\
                        </g>\
                    </g>\
                    <g>\
                        <g>\
                            <path d="M60.798,79.425c0.529,0.916,0.217,2.089-0.701,2.615l-10.115,5.842c-0.916,0.527-2.088,0.218-2.619-0.7     c-0.529-0.916-0.215-2.091,0.703-2.619l10.115-5.839C59.097,78.192,60.269,78.505,60.798,79.425z"/>\
                        </g>\
                        <g>\
                            <path d="M60.798,87.182c-0.527,0.918-1.701,1.229-2.617,0.7l-10.115-5.84c-0.918-0.528-1.232-1.701-0.703-2.617     c0.531-0.919,1.703-1.233,2.619-0.702l10.117,5.839C61.013,85.091,61.327,86.266,60.798,87.182z"/>\
                        </g>\
                        <g>\
                            <path d="M54.079,91.06c-1.059,0-1.916-0.857-1.916-1.916V77.462c0-1.059,0.857-1.916,1.916-1.916     c1.061,0,1.918,0.857,1.918,1.916v11.682C55.997,90.202,55.138,91.06,54.079,91.06z"/>\
                        </g>\
                    </g>\
                </g>\
                </svg>',
        //<!-- 11大雪 end -->

        //<!-- 12雨夹雪 start -->
        yujiaxue : '<svg style="fill: #eee;" x="0px" y="0px" width="110px" height="76px" viewBox="0 0 110 96" enable-background="new 0 0 110 96" xml:space="preserve">\
                    <g>\
                        <path d="M60.281,85.717c0,3.082-2.5,5.582-5.582,5.582c-3.084,0-5.584-2.5-5.584-5.582s5.584-11.406,5.584-11.406   S60.281,82.635,60.281,85.717z"/>\
                        <path d="M75.291,17.851C70.5,9.728,61.766,4.701,52.311,4.701c-12.727,0-23.525,8.832-26.107,21.16   c-6.568,2.187-11.322,8.381-11.322,15.674c0,9.115,7.414,16.525,16.525,16.525c3.289,0,6.414-0.944,9.117-2.74   c3.648,1.796,7.691,2.74,11.787,2.74c4.252,0,8.451-1.028,12.205-2.964c3.15,1.939,6.734,2.964,10.494,2.964   c11.088,0,20.109-9.021,20.109-20.107C95.117,26.961,86.248,18.004,75.291,17.851z M75.006,52.488   c-3.246,0-6.316-1.048-8.877-3.025c-1.219-0.94-2.969-0.717-3.91,0.5c-0.018,0.022-0.029,0.049-0.045,0.074   c-3.02,1.598-6.42,2.451-9.865,2.451c-3.656,0-7.256-0.949-10.412-2.742c-0.795-0.453-1.713-0.463-2.492-0.123   c-0.441,0.074-0.879,0.246-1.258,0.543c-1.939,1.521-4.27,2.322-6.744,2.322c-6.037,0-10.951-4.913-10.951-10.954   c0-6.037,4.914-10.948,10.951-10.948c3.047,0,5.98,1.284,8.049,3.522c1.043,1.131,2.809,1.201,3.939,0.156   c1.131-1.045,1.201-2.81,0.158-3.938c-2.941-3.184-7.043-5.086-11.355-5.297c2.717-8.694,10.746-14.752,20.117-14.752   c6.689,0,12.928,3.176,16.883,8.441c-2.639,0.799-5.109,2.119-7.232,3.932c-1.17,1.002-1.311,2.76-0.311,3.928   c1,1.175,2.76,1.313,3.93,0.313c2.623-2.24,5.971-3.473,9.428-3.473c8.014,0,14.535,6.521,14.535,14.534   C89.543,45.969,83.021,52.488,75.006,52.488z"/>\
                        <g>\
                            <g>\
                                <path d="M45.396,65.385c0.531,0.916,0.215,2.088-0.701,2.617L34.58,73.844c-0.918,0.529-2.09,0.213-2.619-0.7     c-0.529-0.918-0.215-2.091,0.701-2.621l10.115-5.838C43.695,64.154,44.869,64.469,45.396,65.385z"/>\
                            </g>\
                            <g>\
                                <path d="M45.396,73.142c-0.529,0.913-1.701,1.229-2.619,0.7L32.662,68c-0.916-0.529-1.23-1.701-0.701-2.617     s1.701-1.229,2.617-0.701l10.117,5.839C45.611,71.053,45.928,72.223,45.396,73.142z"/>\
                            </g>\
                            <g>\
                                <path d="M38.68,77.021c-1.061,0-1.918-0.858-1.918-1.918V63.42c0-1.057,0.857-1.918,1.918-1.918     c1.059,0,1.916,0.861,1.916,1.918v11.683C40.596,76.162,39.738,77.021,38.68,77.021z"/>\
                            </g>\
                        </g>\
                        <g>\
                            <g>\
                                <path d="M76.191,65.383c0.531,0.918,0.217,2.09-0.699,2.619l-10.117,5.842c-0.918,0.529-2.09,0.213-2.619-0.7     c-0.529-0.918-0.215-2.091,0.701-2.621l10.117-5.838C74.492,64.154,75.666,64.469,76.191,65.383z"/>\
                            </g>\
                            <g>\
                                <path d="M76.193,73.142c-0.529,0.913-1.701,1.229-2.617,0.7L63.459,68c-0.918-0.529-1.23-1.701-0.703-2.617     c0.529-0.916,1.701-1.229,2.619-0.701l10.117,5.839C76.408,71.053,76.723,72.223,76.193,73.142z"/>\
                            </g>\
                            <g>\
                                <path d="M69.475,77.021c-1.061,0-1.916-0.858-1.916-1.918V63.42c0-1.057,0.855-1.918,1.916-1.918     s1.918,0.861,1.918,1.918v11.683C71.393,76.162,70.535,77.021,69.475,77.021z"/>\
                            </g>\
                        </g>\
                    </g>\
                    </svg>',
        //<!-- 12雨夹雪 end -->

        //<!-- 13雷阵雨 start -->
        leizhenyu : '<svg style="fill: #eee;" x="0px" y="0px" width="110px" height="76px" viewBox="0 0 110 96" enable-background="new 0 0 110 96" xml:space="preserve">\
                <g>\
                    <path d="M44.017,83.052c0,3.084-2.5,5.582-5.582,5.582c-3.084,0-5.582-2.498-5.582-5.582   c0-3.085,5.582-11.407,5.582-11.407S44.017,79.967,44.017,83.052z"/>\
                    <path d="M61.212,83.052c0,3.084-2.5,5.582-5.584,5.582c-3.082,0-5.582-2.498-5.582-5.582   c0-3.085,5.582-11.407,5.582-11.407S61.212,79.967,61.212,83.052z"/>\
                    <path d="M78.733,83.052c0,3.084-2.498,5.582-5.58,5.582c-3.084,0-5.584-2.498-5.584-5.582   c0-3.085,5.584-11.407,5.584-11.407S78.733,79.967,78.733,83.052z"/>\
                    <g>\
                        <g>\
                            <path d="M48.616,38.884c0.053-0.528-0.09-0.569-0.32-0.091l-9.371,19.436c-0.23,0.479,0.016,0.869,0.545,0.869     h6.012c0.531,0,0.936,0.435,0.896,0.963l-1,14.336c-0.035,0.528,0.129,0.573,0.367,0.102l10.477-20.775     c0.238-0.474,0-0.869-0.529-0.881l-7.523-0.15c-0.529-0.011-0.92-0.449-0.865-0.979L48.616,38.884z"/>\
                        </g>\
                    </g>\
                    <g>\
                        <path d="M48.616,38.884c0.053-0.528-0.09-0.569-0.32-0.091l-9.371,19.436c-0.23,0.479,0.016,0.869,0.545,0.869    h6.012c0.531,0,0.936,0.435,0.896,0.963l-1,14.336c-0.035,0.528,0.129,0.573,0.367,0.102l10.477-20.775    c0.238-0.474,0-0.869-0.529-0.881l-7.523-0.15c-0.529-0.011-0.92-0.449-0.865-0.979L48.616,38.884z"/>\
                    </g>\
                    <g>\
                        <g>\
                            <path d="M68.927,38.884c0.055-0.528-0.092-0.569-0.32-0.091l-9.373,19.436c-0.23,0.479,0.016,0.869,0.545,0.869     h6.012c0.531,0,0.936,0.435,0.898,0.963l-1,14.336c-0.037,0.528,0.127,0.573,0.367,0.102L76.53,53.723     c0.238-0.474,0-0.869-0.531-0.881l-7.523-0.15c-0.531-0.011-0.92-0.449-0.865-0.979L68.927,38.884z"/>\
                        </g>\
                        <g>\
                            <path d="M95.118,40.618c0-10.994-8.869-19.951-19.826-20.104c-4.791-8.123-13.523-13.148-22.98-13.148     c-12.727,0-23.523,8.834-26.105,21.157c-6.57,2.189-11.324,8.386-11.324,15.679c0,9.11,7.414,16.521,16.523,16.521     c1.021,0,2.023-0.098,3.008-0.273c-0.52-1.365-0.461-2.908,0.207-4.295l0.863-1.793c-1.283,0.514-2.654,0.788-4.078,0.788     c-6.039,0-10.949-4.911-10.949-10.948c0-6.041,4.91-10.953,10.949-10.953c3.045,0,5.98,1.285,8.049,3.524     c1.043,1.132,2.809,1.199,3.938,0.154c1.131-1.045,1.201-2.807,0.156-3.938c-2.941-3.184-7.043-5.086-11.354-5.293     c2.717-8.699,10.746-14.754,20.117-14.754c6.689,0,12.928,3.176,16.885,8.442c-2.641,0.797-5.111,2.115-7.236,3.928     c-1.17,1.002-1.309,2.761-0.309,3.933c1,1.17,2.76,1.311,3.93,0.311c2.623-2.242,5.973-3.475,9.428-3.475     c8.016,0,14.533,6.521,14.533,14.537c0,5.723-3.336,10.674-8.156,13.041c-0.041,0.752-0.23,1.506-0.588,2.213l-2.289,4.543     C87.935,58.754,95.118,50.512,95.118,40.618z"/>\
                        </g>\
                    </g>\
                    <g>\
                        <path d="M68.927,38.884c0.055-0.528-0.092-0.569-0.32-0.091l-9.373,19.436c-0.23,0.479,0.016,0.869,0.545,0.869    h6.012c0.531,0,0.936,0.435,0.898,0.963l-1,14.336c-0.037,0.528,0.127,0.573,0.367,0.102L76.53,53.723    c0.238-0.474,0-0.869-0.531-0.881l-7.523-0.15c-0.531-0.011-0.92-0.449-0.865-0.979L68.927,38.884z"/>\
                    </g>\
                </g>\
                </svg>',
        //<!-- 13雷阵雨 end -->

        //<!-- 14夜_阴 start -->
        ye_yin : '<svg style="fill: #eee;" x="0px" y="0px" width="110px" height="76px" viewBox="0 0 110 96" enable-background="new 0 0 110 96" xml:space="preserve">\
                <g>\
                    <path d="M77.502,43.357c-5.789-9.226-3.951-21.271,3.67-29.865c-2.723,0.771-5.41,1.939-7.963,3.545   C65.748,21.723,61.068,29,59.826,36.529c-4.893-4.662-11.439-7.381-18.389-7.381c-12.727,0-23.525,8.832-26.105,21.161   C8.764,52.496,4.008,58.689,4.008,65.982c0,9.109,7.414,16.525,16.525,16.525c3.287,0,6.416-0.949,9.117-2.744   c3.648,1.793,7.691,2.744,11.787,2.744c4.252,0,8.451-1.031,12.205-2.967c3.15,1.938,6.734,2.967,10.492,2.967   c10.787,0,19.611-8.535,20.088-19.205c5.082-0.135,10.33-1.639,15.113-4.643c2.555-1.604,4.775-3.51,6.656-5.631   C94.941,56.162,83.291,52.578,77.502,43.357z M64.137,76.932c-3.246,0-6.314-1.047-8.877-3.021c-1.219-0.943-2.969-0.717-3.91,0.5   c-0.018,0.021-0.025,0.049-0.043,0.068c-3.02,1.604-6.422,2.453-9.867,2.453c-3.654,0-7.256-0.945-10.41-2.74   c-0.795-0.451-1.713-0.459-2.488-0.123c-0.445,0.072-0.881,0.248-1.262,0.545c-1.941,1.518-4.273,2.318-6.744,2.318   c-6.037,0-10.949-4.91-10.949-10.949c0-6.037,4.912-10.949,10.949-10.949c3.047,0,5.979,1.283,8.049,3.521   c1.045,1.129,2.809,1.201,3.938,0.156s1.201-2.809,0.156-3.939c-2.943-3.184-7.045-5.086-11.354-5.297   c2.717-8.693,10.746-14.754,20.115-14.754c6.691,0,12.93,3.177,16.887,8.441c-2.639,0.799-5.109,2.117-7.234,3.932   c-1.17,1-1.313,2.758-0.313,3.93c0.998,1.172,2.758,1.311,3.932,0.313c2.625-2.24,5.973-3.475,9.428-3.475   c8.016,0,14.535,6.521,14.535,14.534C78.672,70.412,72.15,76.932,64.137,76.932z"/>\
                    <polygon points="91.719,25.223 95.803,23.078 95.021,27.626 98.326,30.843 93.762,31.509 91.719,35.648    89.676,31.509 85.109,30.843 88.412,27.626 87.635,23.078  "/>\
                    <polygon points="52.994,19.479 55.869,17.97 55.32,21.171 57.648,23.441 54.432,23.908 52.994,26.824    51.555,23.908 48.338,23.441 50.664,21.171 50.117,17.97  "/>\
                </g>\
                </svg>',
        //<!-- 14夜_阴 end -->

        //<!-- 15夜_晴 start -->
        ye_qing : '<svg style="fill: #eee;" x="0px" y="0px" width="110px" height="76px" viewBox="0 0 110 96" enable-background="new 0 0 110 96" xml:space="preserve">\
                    <g>\
                        <polygon points="64.13,36.086 68.216,33.936 67.435,38.487 70.739,41.709 66.173,42.369 64.13,46.507    62.087,42.369 57.522,41.709 60.825,38.487 60.046,33.936  "/>\
                        <polygon points="68.909,51.216 71.786,49.707 71.237,52.91 73.565,55.179 70.347,55.645 68.909,58.559    67.472,55.645 64.253,55.179 66.581,52.91 66.032,49.707  "/>\
                        <g>\
                            <path d="M61.856,77.953c-0.002,0-0.002,0-0.002,0c-11.102-0.002-21.279-5.582-27.236-14.936    c-4.629-7.266-6.15-15.896-4.283-24.311c1.865-8.414,6.896-15.594,14.162-20.224c0.977-0.623,2.24-0.575,3.17,0.119    c0.928,0.697,1.328,1.896,1.004,3.011c-0.043,0.15-4.369,15.786,4.723,29.371c8.965,13.393,24.672,16.801,24.828,16.83    c1.109,0.23,1.973,1.111,2.176,2.229c0.203,1.115-0.285,2.246-1.242,2.854C73.962,76.203,67.981,77.953,61.856,77.953z     M42.101,27.705c-3.113,3.405-5.299,7.582-6.324,12.209c-1.543,6.959-0.285,14.102,3.545,20.109    c4.926,7.734,13.35,12.352,22.533,12.352c0,0,0,0,0.002,0c2.838,0,5.639-0.453,8.309-1.332    c-6.154-2.521-15.107-7.549-21.402-16.953C42.384,44.563,41.64,34.421,42.101,27.705z"/>\
                        </g>\
                    </g>\
                    </svg>'
        //<!-- 15夜_晴 end -->
    };
    function ModalRealtimeWeather(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if(!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        ModalBase.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);
    };
    ModalRealtimeWeather.prototype = Object.create(ModalBase.prototype);
    ModalRealtimeWeather.prototype.constructor = ModalRealtimeWeather;

    ModalRealtimeWeather.prototype.optionTemplate = {
        name:'toolBox.modal.REALTIME_WEATHER',
        parent:0,
        mode:['realTimeWeather'],
        maxNum: 0,
        title:'',
        minHeight:1,
        minWidth:2,
        maxHeight:3,
        maxWidth:6,
        type:'ModalRealtimeWeather',
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':true,
            'desc': '#ShowOutdoor_Weather'
        }
    };

    ModalRealtimeWeather.prototype.modalInit = function () {
        !this.entity.modal.option && (this.entity.modal.option = {});
        var _this = this;
        var configModalOpt = {
            area: [{
                    type: 'option',
                    widget:[
                        {
                            type:'select',
                            opt:{
                                option:[
                                    {val:'degreesCelsius',name:'摄氏度'},
                                    {val:'degreesFahrenheit',name:'华氏度'}
                                ],
                                data:{val: this.entity.modal.option?this.entity.modal.option.tempUnit:'degreesCelsius'}
                            }
                        }
                    ]
                }, {
                    data:[{
                        type:'point',name:'数据点位',data: this.entity.modal.points ? (this.entity.modal.points[0] instanceof Array ? this.entity.modal.points[0] : this.entity.modal.points) : []
                    }],
                    module: "dsDrag",
                    style: ".divDsWorkspace .spVarLabel {font-size: 14px; }.divDsWorkspace .btnChartCog {}",
                },
                {
                    'type':'footer',
                    "widget":[{type:'confirm',opt:{needClose:true}},{type:'cancel'}]
                }
            ],
            header: {
                needBtnClose: true,
                title: "配置"
            },
            result: { func: function(data) {
                !_this.entity.modal.option && (_this.entity.modal.option = {});
                _this.entity.modal.points = data.points[0];
                _this.entity.modal.option.tempUnit = data.select.val;
                _this.entity.modal.interval = 5;
                _this.renderModal();
            }}

        };
        this.configModal = new ConfigModal(configModalOpt, this.screen.container ? this.screen.container : this.screen.page.painterCtn);
        this.configModal.init();
        this.configModal.show();
    }
    ModalRealtimeWeather.prototype.setModalOption = function (option) {
        this.entity.modal.option.tempUnit = (option&&option.tempUnit)?option.tempUnit:'degreesCelsius';
        this.entity.modal.interval = 5;
    };
    ModalRealtimeWeather.prototype.updateModal = function (result) {
        console.log(result)
        if (!result || !result[0] || !result[0].data) return;
        var tempDare = JSON.parse(result[0].data);
        this.renderWeatherStatus(tempDare); 
    };

    ModalRealtimeWeather.prototype.renderModal = function () {
        var _this = this;
        var options = this.entity.modal.option;
        var weatherImg = weatherImgs['qing'];
        var html = '<style>\
                        #weatherWrap{\
                            width: 100%;\
                            height: 100%;\
                            animation: appear 500ms ease-out forwards;\
                        }\
                        @keyframes appear{\
			                0% {\
			                    -webkit-transform: scale(0);\
			                    transform: scale(0);\
			                }\
			                50% {\
			                    -webkit-transform: scale(1.05);\
			                    transform: scale(1.05);\
			                }\
\
			                75% {\
			                    -webkit-transform: scale(0.95);\
			                    transform: scale(0.95);\
			                }\
			                100% {\
			                    -webkit-transform: scale(1);\
			                    transform: scale(1);\
			                }\
                        }\
                        #imgWrap{\
                            width: 50%;\
                            height: 100%;\
                            float: left;\
                        }\
                        #imgWrap svg{\
                            fill: #eee;\
                            float: right;\
                            width: 80%;\
                            height: 80%;\
                        }\
                        #tempWrap{\
                            width: 50%;\
                            height: 100%;\
                            float: left;\
                        }\
                        #tempWrap>div{\
                            height: 50%;\
                            width: 100%;\
                            padding-left: 10%;\
                            font-weight: bolder;\
                            text-align: left;\
                        }\
                        #tempWrap>div>div{\
                            height: 50%;\
                            width: 100%;\
                            padding-left: 10%;\
                            font-weight: bolder;\
                            text-align: left;\
                        }\
                    </style>\
                    <div id="weatherWrap">\
                        <div id="imgWrap">\
                                '+ weatherImg + '\
                        </div>\
	                    <div id="tempWrap">\
		                    <div id="temp"></div>\
		                    <div id="humidity"></div>\
	                    </div>\
                    </div>';
        this.container.innerHTML = html;
        this.resize();
    };
    ModalRealtimeWeather.prototype.resize = function () {
        var $container = $(this.container);
        var height = $('#tempWrap',$container).height(),
            width = $('#tempWrap',$container).width();
        var svgHeight, svgWidth;
        svgHeight = svgWidth = Math.min(height, width) * 0.8;
        $container.find('#imgWrap').siblings('#tempWrap').find('#temp').css({ 'line-height': height * 0.75 + 'px', 'font-size': height / 8 }).siblings('#humidity').css({ 'line-height': height / 4 + 'px', 'font-size': height / 8 });
        $('svg',$container).css({
            'height': svgHeight + 'px',
            'width': svgWidth + 'px',
            'margin-top': (height - svgHeight)/2+'px'
        });
    }
    //获取天气数据
    ModalRealtimeWeather.prototype.renderWeatherStatus = function(rslt) {
        if (rslt && rslt.tmp) {
            var temp = rslt.tmp,
                humidity = rslt.hum,
                weather = rslt.cond.txt.replace(' ', ''),
                weatherImg, weatherType;
            switch (weather)
            {
                case '阴':
                case 'Overcast':
                    weatherType = 'yin';
                    break;
                case '大雨':
                case 'HeavyRain':
                    weatherType = 'dayu';
                    break;
                case '暴雨':
                case 'Storm':
                    weatherType = 'baoyu';
                    break;
                case '多云':
                case 'Cloudy':
                    weatherType = 'duoyun';
                    break;
                case '小雨':
                case 'LightRain':
                    weatherType = 'xiaoyu';
                    break;
                case '晴转多云':
                case 'PartlyCloudy':
                    weatherType = 'qing_duoyun';
                    break;
                case '晴':
                case 'Sunny':
                    weatherType = 'qing';
                    break;
                case '阵雨':
                case 'ShowerRain':
                    weatherType = 'duoyun_zhenyu';
                    break;
                case '打雷':
                case 'Thundershower':
                    weatherType = 'dalei';
                    break;
                case '打雷暴雨':
                case 'HeavyThunderstorm':
                    weatherType = 'dalei_baoyu';
                    break;
                case '大雪':
                case 'HeavySnow':
                    weatherType = 'daxue';
                    break;
                case '雨夹雪':
                case 'Sleet':
                    weatherType = 'yujiaxue';
                    break;
                case '雷阵雨':
                case 'Thundershower':
                    weatherType = 'leizhenyu';
                    break;
                default :
                    weatherType = 'qing';
            }
            weatherImg = weatherImgs[weatherType];
            $(this.container).find('#imgWrap').html(weatherImg).siblings('#tempWrap').find('#temp').html(temp + (this.entity.modal.option.tempUnit == 'degreesFahrenheit' ? '℉' : '℃')).siblings('#humidity').html(humidity + '%');
            this.resize();
        }
    };
    ModalRealtimeWeather.prototype.showConfigMode = function () {

    };

    return ModalRealtimeWeather;
})();
/**
 * Created by vicky
 */
var ModalDiagnosisStruct = (function(){
    function ModalDiagnosisStruct(screen, entityParams) {
        this.$configModal = undefined;
        this.$modal = undefined;
        this.tempOpt = undefined;
        this.store = {};
        this.subEntity = undefined;
        if (!entityParams) return;
        ModalBase.call(this, screen, entityParams, this.renderModal, this.updateModal, this.showConfigMode);
    }
    ModalDiagnosisStruct.prototype = new ModalBase();
    ModalDiagnosisStruct.prototype.optionTemplate = {
        name:'toolBox.modal.DIAGNOSIS_SUMMARY',
        parent:3,
        mode:'custom',
        maxNum: 10,
        title:'',
        defaultHeight:4.5,
        defaultWidth:3,
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type: 'ModalDiagnosisStruct',
        scroll:false,
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':true,
            'desc': '#DiagSummary'
        }
    };
    ModalDiagnosisStruct.prototype.configModalOptDefault= {
        "header" : {
            "needBtnClose" : true,
            "title" : "配置"
        },
        "area" : [
            {
                "type": 'option',
                "widget":[{id:'needDetail',type:'checkbox',name:'是否显示细节'}]
            },
            {
                "module" : "dsDrag",
                "data":[{
                    type:'point',name:'KPI分项统计来源',data:[],forChart:false
                }]
            },{
                'type':'footer',
                "widget":[{type:'confirm',opt:{needClose:false}},{type:'cancel'}]
            }
        ],
        result:{}
    };

    ModalDiagnosisStruct.prototype.show = function(){
        this.init();
    };
    ModalDiagnosisStruct.prototype.initConfigModalOpt = function(){
        var _this = this;

        if(this.entity.modal.option){
            if(this.entity.modal.option.needDetail)this.configModalOpt.area[0].widget[0].data = this.entity.modal.option.needDetail;
            if(this.entity.modal.option.structPoint)this.configModalOpt.area[1].data[0].data = this.entity.modal.option.structPoint;
        }
        this.configModalOpt.result.func = function(option){
            _this.setModalOption(option); 
            _this.configModal.hide();
        }
    };
    ModalDiagnosisStruct.prototype.getRealTimePoint = function(list,arr){
        var _this = this;
        if(!arr)arr = [];
        list.forEach(function(item){
            if(item.point) {
                arr.push(_this.entity.modal.option.prefix + item.point);
            }
            if(item.children instanceof Array && item.children.length > 0){
                _this.getRealTimePoint(item.children,arr)
            }
        });
        return arr;
    };
    ModalDiagnosisStruct.prototype.init = function(){
    };

    ModalDiagnosisStruct.prototype.renderModal = function (e) {
        $(this.container).addClass('widgetKPIItemEval');
        this.container.innerHTML = '<div class="divKPIIndex diagnosisCtn"></div><div class="divKPIDetail"></div>';
        if(this.entity.modal.option.needDetail){
            this.renderDetailContainer();
            $(this.container).addClass('showSubContainer');
        }
        this.attachEvent();
    };
    ModalDiagnosisStruct.prototype.renderDetailContainer = function(){
        var containerDetail = this.container.querySelector('.divKPIDetail');
        var item = {
            modal:{
                type:'ModalHtml',
                interval:60000,
                option:{
                    html:'<div>开发中</div>'
                },
                points:[],
                title:''
            },
            spanC:9,
            spanR:6
        };
        this.initSubEntity(containerDetail,item)
    };
    ModalDiagnosisStruct.prototype.attachEvent = function(){
        var _this = this;
        var clickEvent = AppConfig.isMobile?'tap':'click';
        $(this.container).off(clickEvent).on(clickEvent,'.divStructTtl',function(e){
            $(e.currentTarget).parent().toggleClass('focus');
        });
        $(this.container).on(clickEvent,'.divStructItem',function(e){
            var $target = $(e.currentTarget);
            if($target.hasClass('focus')){
                $target.removeClass('focus');
                $target.next().hasClass('rowPointDetail') && $target.next().removeClass('focus')
            }else {
                $(_this.container).find('.rowPointDetail.focus').removeClass('focus');
                $(_this.container).find('.divStructItem.focus').removeClass('focus');
                $target.addClass('focus');
                $target.next().hasClass('rowPointDetail') && $target.next().addClass('focus');
                _this.refreshSubEntity($target);
            }
        });
    };
    ModalDiagnosisStruct.prototype.refreshSubEntity = function($target){
        //var itemIndex = $target.parentsUntil('.divKPIIndex','.divStructCtn')[0].dataset.itemIndex;
        //var childIndex = $target[0].dataset.itemChildIndex;
        //if(!this.store.structList)return;
        var arrPoint = [],strPoint;
        try{
            //arrPoint = this.store.structList[itemIndex].children[childIndex].relatedPoints;
            arrPoint = $target.data('bindPoints');
            strPoint = arrPoint.map(function(point){return point.pointname}).toString();

        }catch(e){
            strPoint = '数据格式不符合'
        }
        var _this = this;
        this.subEntity.entity.modal.points = arrPoint.map(function(point){return (_this.entity.modal.option.prefix + point.point)});
        this.subEntity.entity.modal.option.html = '<div>' + strPoint + '</div><script>this.onUpdateComplete=function(data){console.log(data)}</script>';
        this.updateSubEntity();
    };
    ModalDiagnosisStruct.prototype.updateSubEntity = function($target){
        //todo
        this.subEntity.render();
    };
    ModalDiagnosisStruct.prototype.initPointMap = function(points){
        var _this = this;
        var $dom;
        points.forEach(function(point){
            _this.initPointDetail(point.dsItemId,point.data)
        })
    };
    ModalDiagnosisStruct.prototype.initPointDetail = function(id,strData){
        var $dom = $('[data-point="' + id +'"]');
        if ($dom.length == 0)return;
        var data;
        if (!isNaN(Number(strData))){
            data = {
                score:Number(strData)
            }
        }else {
            try {
                data = JSON.parse(strData)
            } catch (e) {
                $dom.text('No Data');
                $('.pointDetail[data-detail="' + id + '"]').text('No Data');
                return;
            }
        }

        var status = '';
        if(parseFloat(data.score) >= 60){
            status = 'success';
            $dom.text(parseFloat(data.score) + '%');
        }else if(parseInt(data.score) >= 0){
            status = 'danger';
            $dom.text(parseFloat(data.score) + '%');
        }else{
            status = 'default';
            $dom.text('--');
        }
        $dom.removeClass('success danger default').addClass(status);

        var $detail = $('.pointDetail[data-detail="' + id +'"]');
        if($detail.length > 0) {
            $detail.removeClass('success danger default').addClass(status);
            $detail.text(data.detail);
        }

        if($dom.hasClass('spItemInfo')){
            $dom.next().removeClass('success danger default').addClass(status)
        }
    };
    ModalDiagnosisStruct.prototype.initStruct = function(struct){
        var _this = this;
        var structDom = this.container.querySelector('[data-item="' + struct.name +'"]');
        if(!structDom) {
            structDom = document.createElement('div');
            structDom.className = 'divStructCtn focus';
            structDom.dataset.item = struct.name;


            var structTtl = document.createElement('div');
            structTtl.className = 'divStructTtl';
            structTtl.innerHTML = '\
            <span class="spStructIcon glyphicon glyphicon-dashboard"></span>\
            <span class="spStructName">' + struct.name + '</span>\
            <!--<span class="pointDetail" data-detail="' + (struct.point ? _this.entity.modal.option.prefix + struct.point : '') + '"></span>-->';

            var structBody = document.createElement('div');
            structBody.className = 'divStuctBody';

            if ((struct.items instanceof Array) && struct.items.length > 0) {
                struct.items.forEach(function (item, index) {
                    structBody.appendChild(_this.createStructItem(item));
                    //structBody.appendChild(_this.createPointDetail(item))
                })
            }
            structDom.appendChild(structTtl);
            //structBody.appendChild(_this.createPointDetail(struct));
            structDom.appendChild(structBody);
            this.container.querySelector('.diagnosisCtn').appendChild(structDom);
        }
        //item

    };

    ModalDiagnosisStruct.prototype.createStructItem = function(item){
        var structItem = document.createElement('div');
        structItem.className = 'divStructItem';
        structItem.innerHTML = '\
            <span class="spItemInfo">' + (item.name?item.name:'') + '</span>\
            <span class="spItemInfo">' + (item.result?item.result:'') + '</span>\
            <span class="spItemInfo spItemKPIRs">' + (item.description?item.description:'') + '</span>';
        $(structItem).data('bindPoints', item.bindPoints);
        return structItem;
    };

    ModalDiagnosisStruct.prototype.updateModal = function (points) {
        this.spinner.stop();
        if(!(points[0] && points[0].dsItemId))return;
        var structList;
        var _this = this;
        try{
            structList = JSON.parse(points[0].data).content;
        }catch(e){
            return;
        }
        structList.forEach(function(struct){
            _this.initStruct(struct);
        });
        this.store.structList = structList;
    };
    ModalDiagnosisStruct.prototype.showConfigMode = function () {

    };
    ModalDiagnosisStruct.prototype.setModalOption = function (option) {
        this.entity.modal.interval = 5;
        this.entity.modal.option = {
            structPoint:option.points[0],
            needDetail:option.needDetail
        };
        this.entity.modal.points = option.points[0];
        this.entity.modal.option.prefix = '@' + AppConfig.project.bindId + '|';
        //this.entity.modal.option.prefix = '@72|';
        //return WebAPI.post('/analysis/startWorkspaceDataGenPieChart',{dsItemIds:this.entity.modal.option.structPoint})
    };


    return ModalDiagnosisStruct;
})();



var ModalCumulantChart = (function(){
    function ModalCumulantChart(screen, entityParams, _renderModal, _updateModal, _showConfigMode) {
        if(!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        var updateModal = _updateModal ? _updateModal : this.updateModal;
        var showConfigMode = _showConfigMode ? _showConfigMode : this.showConfigMode;
        ModalBase.call(this, screen, entityParams, renderModal, updateModal, showConfigMode);
        this.m_bIsGoBackTrace = false;
        this.m_traceData = undefined;
    };
    ModalCumulantChart.prototype = new ModalBase();
    ModalCumulantChart.prototype.optionTemplate ={
        name:'toolBox.modal.CUMULANT_CHART',
        parent:0,
        mode:'custom',
        maxNum: 5,
        title:'',
        minHeight:2,
        minWidth:3,
        maxHeight:6,
        maxWidth:12,
        type:'ModalCumulantChart',
        scroll:true,
        needRefresh:false,
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };
    ModalCumulantChart.prototype.configModalOptDefault={
        "header" : {
            "needBtnClose" : true,
            "title" : "配置"
        },
        "area" : [
            {
                "module": 'timeConfig',

            },
            {
                'type': 'option',
                widget:[{
                    type: 'select',
                    name: '图表类型',
                    id:'chartType',
                    opt: {
                        attr:{
                            class:'form-inline'
                        },
                        option: [
                            {val: 'bar', name: '柱图'},
                            {val: 'line', name: '折线图'}
                        ]
                    }
                },
                {
                    type: 'checkbox',
                    name: '启用堆叠',
                    id:'isStack',
                    opt: {
                    }
                }
                ]
            },
            {
                "module" : "dsDrag",
                "data":[{
                    type:'point',name:'数据点位',data:[],forChart:false
                }]
            },{
                'type':'footer',
                "widget":[{type:'confirm',opt:{needClose:false}},{type:'cancel'}]
            }
        ],
        "result":{}
    };
    ModalCumulantChart.prototype.initConfigModalOpt = function(){
        var _this = this;
        if(this.entity.modal.option) {
            this.configModalOpt.area[2].data[0].data = this.entity.modal.option.dsItemIds;
            this.configModalOpt.area[1].widget[0].data = {val: this.entity.modal.option.chartType};
            this.configModalOpt.area[1].widget[1].data = this.entity.modal.option.isStack;
            (this.entity.modal.option.timeStart && this.entity.modal.option.timeEnd) && (this.configModalOpt.area[0].data = {
                mode: '1',
                timeStart: this.entity.modal.option.timeStart,
                timeEnd: this.entity.modal.option.timeEnd,
                interval: this.entity.modal.option.timeFormat
            });
            if(typeof this.entity.modal.option.timeRecent == 'string'){
                this.configModalOpt.area[0].data = {
                    mode:'0',
                    timeRecent:this.entity.modal.option.timeRecent,
                    interval: this.entity.modal.option.timeFormat
                }
            }else if(typeof this.entity.modal.option.timeRecent == 'object'
                    && this.entity.modal.option.timeRecent.hasOwnProperty('val')
                    && this.entity.modal.option.timeRecent.hasOwnProperty('unit')
                ){
                this.configModalOpt.area[0].data = {
                    mode:'2',
                    timeRecent:this.entity.modal.option.timeRecent,
                    interval: this.entity.modal.option.timeFormat
                }
            }
        }
        this.configModalOpt.result.func = function(option){
            _this.setModalOption(option);
            _this.configModal.hide();
        }
    };
    ModalCumulantChart.prototype.optionDefault = {
        
    };
    
    ModalCumulantChart.prototype.renderModal = function(){
        var timeConfig = generateTimeOption(this.entity.modal.option);
        var postData =
            {
                timeStart:timeConfig.timeStart,
                timeEnd:timeConfig.timeEnd,
                timeFormat:timeConfig.timeFormat,
                dsItemIds:timeConfig.dsItemIds
            };
        var _this = this;
        WebAPI.post('/analysis/startWorkspaceDataGenHistogram/increment',postData).done(function(result){
            var arrLegend = _this.entity.modal.option.dsItemIds.map(function(point){
                var point = AppConfig.datasource.getDSItemById(point);
                return (point.alias?point.alias:point.value);
            });
            var arrSeries = [];
            for (var i =0 ;i < result.list.length ;i++){
                arrSeries.push(
                    {
                        name:arrLegend[i],
                        type:_this.entity.modal.option.chartType,
                        areaStyle: {normal: {}},
                        stack:_this.entity.modal.option.isStack,
                        data:result.list[i].data.map(function(data){
                            var val = parseFloat(data);
                            if(!(isNaN(val)) && val > 0){
                                return val.toFixed(2);
                            }else{
                                return 0
                            }
                        })
                    }
                );
            }
            var opt = {
                text:'历史累积量折线图',
                legend:{
                    data:arrLegend,
                    top:10
                },
                grid:{
                    left:40,
                    right:20,
                    top:35
                },
                tooltip:{
                    trigger:'axis'
                },
                //toolbox:{
                //    show:true,
                //    feature:{
                //        magicType:['line', 'bar', 'stack']
                //    }
                //},
                toolbox: {
                    showTitle:true,
                    feature: {
                        magicType:{
                            type:['line', 'bar', 'stack','tiled']
                        }
                    }
                },
                xAxis:{
                    data:result.timeShaft.slice(0,result.timeShaft.length-1),
                    type: 'category',
                    axisLabel:{
                        formatter: function (value, index) {
                            // 格式化成月/日，只在第一个刻度显示年份
                            var date = new Date(value.replace(/-/g,'/'));
                            var texts;
                            if (index === 0) {
                                texts = date.format('yyyy-MM-dd') + '\n' + date.format('HH:mm:ss');
                            }else{
                                var preDate = new Date(result.timeShaft[index - 1]);
                                if(preDate.format('yyyy-MM-dd') == date.format('yyyy-MM-dd')) {
                                    texts = date.format('HH:mm:ss')
                                }else{
                                    texts = date.format('yyyy-MM-dd') + '\n' + date.format('HH:mm:ss');
                                }
                            }
                            return texts;
                        }

                    }
                },
                yAxis : [
                    {
                        type : 'value'

                    }
                ],
                series:arrSeries
            };
            if(AppConfig.isMobile){
                opt.legend = {
                    data:arrLegend,
                    top:10,
                    itemWidth:15,
                    itemHeight:10,
                    textStyle:{
                        fontSize:12
                    }
                };
            }
            var chart = echarts.init(_this.container,AppConfig.chartTheme);
            chart.setOption(opt);
            _this.spinner.stop();
        })
    };
    ModalCumulantChart.prototype.updateModal = function(points){
        
    };
    ModalCumulantChart.prototype.showConfigMode = function(){
        
    };
    
    ModalCumulantChart.prototype.setModalOption = function(option){
        this.entity.modal.interval = 5;
        this.entity.modal.points = [];
        this.entity.modal.option = {
            mode:option.mode,
            timeStart:option.timeStart,
            timeEnd:option.timeEnd,
            timeFormat:option.interval,
            dsItemIds:option.points[0],
            isStack:option.isStack?1:0,
            chartType:option.chartType.val,
            timeRecent:option.timeRecent
        };
    };
    ModalCumulantChart.prototype.goBackTrace = function (data) {
        
    };

    return ModalCumulantChart;
})();
/**
 * Created by RNBtech on 2015/6/18.
 */
var ModalIconManage = (function(){
    var _this;
    function ModalIconManage(currentDataList,currentId) {
        _this = this;
        //if (!entityParams) return;
    }
    ModalIconManage.prototype = new ModalIconManage();

    ModalIconManage.prototype.show = function(currentDataList,currentId,callback){
        var $iptColor;
        _this.currentDataList = currentDataList;
        _this.currentId = currentId;
        if (_this.$modal) {
            _this.$modal.modal('show');
            $iptColor = _this.$modal.find('#iptColorSel');
            if (_this.currentDataList.iconColor) {
                $iptColor.val(_this.currentDataList.iconColor);
            }
            var nowIcon = _this.currentDataList.icon;
            var currentIconType = _this.currentDataList.iconType?_this.currentDataList.iconType:'bootIcon';
            if (nowIcon) {
                if(currentIconType==='svg'||currentIconType==='image'){
                    _this.$modal.find('.bs-glyphicons-list .' + currentIcon.split('@*')[0]).parent().addClass('selected');
                }else{
                    _this.$modal.find('.bs-glyphicons-list .' + currentIcon.split(' ')[1]).parent().addClass('selected');
                }
            }
        }else{
            WebAPI.get('static/scripts/spring/entities/modalMonitor.html').done(function (resultHTML) {
                _this.$modal = $(resultHTML);
                $iptColor = _this.$modal.find('#iptColorSel');
                _this.$modal.modal('show');
                if(_this.currentDataList.iconColor){
                   $iptColor.val(_this.currentDataList.iconColor);
                }
                var currentIcon = _this.currentDataList.icon;
                var currentIconType = _this.currentDataList.iconType?_this.currentDataList.iconType:'bootIcon';
                if (currentIcon) {
                    if(currentIconType==='svg'||currentIconType==='image'){
                        _this.$modal.find('.bs-glyphicons-list .' + currentIcon.split('@*')[0]).parent().addClass('selected');
                    }else{
                        _this.$modal.find('.bs-glyphicons-list .' + currentIcon.split(' ')[1]).parent().addClass('selected');
                    }
                }
                _this.$modal.find('.bs-glyphicons-list>li').click(function (e) {
                    if ($(e.currentTarget).hasClass('selected')) return;
                    $('.bs-glyphicons-list>li.selected').removeClass('selected');
                    $(e.currentTarget).addClass('selected');
                });
                //icon里面的确认button
                _this.$modal.find('.btnSure').click(function (e) {
                    e.stopPropagation();
                    //var $divMonitor = $('#ctnMonitor .divMonitor.selected');
                    //var index = $ctnMonitor.children().index($divMonitor);
                    var $glyphiconClass = $('.bs-glyphicons-list>li.selected>.glyphicon-class');
                    var icon = $glyphiconClass.html();
                    var iconType = $glyphiconClass.attr('type');
                    if(iconType==='svg'||iconType==='image'){
                        _this.currentDataList.icon = $('.bs-glyphicons-list>li.selected>span:first').attr('class')+'@*'+icon;

                    }else{
                        _this.currentDataList.icon = icon;
                    }
                    _this.currentDataList.iconType = iconType

                    _this.currentDataList.iconColor = $iptColor.val();
                    _this.currentDataList.entityId = _this.currentId;
                    _this.$modal.modal('hide');
                    if(callback&&Object.prototype.toString.call(callback)==='[object Function]'){
                        callback(_this.currentDataList.icon,_this.currentDataList.iconColor,_this.currentDataList.iconType);
                    }
                    return _this.currentDataList;
                })
            })
        }
    };

    return ModalIconManage;
})();



//   2016/12/22  过冷过热区域汇总
var ModalColdHotAreaSummary = (function(){
    function ModalColdHotAreaSummary(screen, entityParams, _renderModal) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        ModalBase.call(this, screen, entityParams, renderModal);
        this.lastFiveMinutes = undefined;
        this.option = undefined;
    };
    ModalColdHotAreaSummary.prototype = new ModalBase();

    ModalColdHotAreaSummary.prototype.optionTemplate = {
        name: 'toolBox.modal.COLD_HOT_AREA_SUMMARY',
        parent:0,
        mode: 'noConfigModal',
        maxNum: 1,
        title:'',
        minHeight:3,
        minWidth:3,
        maxHeight:2,
        maxWidth:4,
        type: 'ModalColdHotAreaSummary',
        scroll:false,
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalColdHotAreaSummary.prototype.renderModal = function () {
        $(this.container).attr('title',I18n.resource.toolBox.modal.COLD_HOT_AREA_SUMMARY);
        var _this = this;
        if($(this.container).find('.dashboardCtn').length !== 0){
            $(this.container).find('.dashboardCtn').html($(this.layoutPage()));
        }else{
           $(this.container).html($(this.layoutPage()));
        }
        
        I18n.fillArea($(this.container));
        if(AppConfig.project === undefined){
            var projectId = AppConfig.projectId;
        }else{
            var projectId = AppConfig.project.bindId;
        }
        var points = ['@'+projectId+'|AllRoom_UnderCool_svr','@'+projectId+'|UnderCoolLimit_svr','@'+projectId+'|OverHeatLimit_svr','@'+projectId+'|AllRoom_OverHeat_svr']
        var option = {
            dsItemIds:points
        }
        WebAPI.post('/analysis/startWorkspaceDataGenPieChart',option).done(function(result){
            var itemList = result.dsItemList;
            for(var i=0;i<itemList.length;i++){
                var data = itemList[i].data;
                var point = itemList[i].dsItemId.split('|')[1];
                if(point === "UnderCoolLimit_svr"){
                    $(_this.container).find(".minT").text(data+'℃');
                }else if(point === "OverHeatLimit_svr"){
                    $(_this.container).find(".maxT").text(data+"℃");
                }else if(point === "AllRoom_UnderCool_svr"){
                    $(_this.container).find(".coldT").text(data);
                }else if(point === "AllRoom_OverHeat_svr"){
                    $(_this.container).find(".overHeatT").text(data);
                }
            }
        })
        this.attatchEvents();   
    };

    ModalColdHotAreaSummary.prototype.layoutPage = function () {
        return (
            '<div class="coldHotAreaSummary row">\
                <div class="line"></div>\
                <div class="col-xs-6">\
                    <div class="situation">\
                        <span class="iconfont icon-weibiaoti--3" style="color:rgb(68,123,229)"></span>\
                        <span style="font-size:1.2em;" i18n="toolBox.COLD_HOT_AREA_SUMMARY.OVER_COLD"></span>\
                    </div>\
                    <div class="temperatureBg bgblue">\
                        <span class="realTp coldT"></span>\
                    </div>\
                    <div class="static">\
                        <span i18n="toolBox.COLD_HOT_AREA_SUMMARY.STANDARD"></span>\
                        <span class="minT"></span>\
                    </div>\
                </div>\
                <div class="col-xs-6">\
                    <div class="situation">\
                        <span class="iconfont icon-weibiaoti--1" style="color:rgb(228,175,0);"></span>\
                        <span style="font-size:1.2em;" i18n="toolBox.COLD_HOT_AREA_SUMMARY.OVER_HOT"></span>\
                    </div>\
                    <div class="temperatureBg bgyellow">\
                      <span class="realTp overHeatT"></span>\
                    </div>\
                    <div class="static">\
                      <span i18n="toolBox.COLD_HOT_AREA_SUMMARY.STANDARD"></span>\
                      <span class="maxT"></span>\
                    </div>\
                </div>\
          </div>'
        );
    };
    
    ModalColdHotAreaSummary.prototype.attatchEvents = function (points) {
        $(this.container).off('click').on('click',function(){
            if(AppConfig.isFactory === 0){
                ScreenManager.goTo({
                    page: 'observer.screens.PageScreen',
                    options: {
                        id: '14840418452285112d218620'
                    },
                    container: 'indexMain'
                });
            }
        })
    };
    return ModalColdHotAreaSummary;
})()
//   2016/12/22  设备完好率
var ModalEquipmentPerfectRate = (function(){
    function ModalEquipmentPerfectRate(screen, entityParams, _renderModal ) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        ModalBase.call(this, screen, entityParams, renderModal);
        
    };
    ModalEquipmentPerfectRate.prototype = new ModalBase();

    ModalEquipmentPerfectRate.prototype.optionTemplate = {
        name: 'toolBox.modal.EQUIPMENT_PERFECT_RATE',
        parent:0,
        mode: 'noConfigModal',
        maxNum: 1,
        title:'',
        minHeight:2,
        minWidth:4,
        maxHeight:3,
        maxWidth:6,
        type: 'ModalEquipmentPerfectRate',
        scroll:false,
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalEquipmentPerfectRate.prototype.resize = function () {
        var width = $(this.container).width();
        var circleWidth = width*0.33*0.5*0.85;
        $(this.container).find('.circleCtn').css({width:circleWidth+'px',height:circleWidth+'px'});
    }
    ModalEquipmentPerfectRate.prototype.renderModal = function () {
        $(this.container).attr('title',I18n.resource.toolBox.modal.EQUIPMENT_PERFECT_RATE);
        var _this = this;
        var equipmentIntactRate = '<div class="equipmentIntactRate gray-scrollbar"></div>';
        if($(this.container).find('.dashboardCtn').length !== 0){
            $(this.container).find('.dashboardCtn').html($(equipmentIntactRate));
        }else{
           $(this.container).html($(equipmentIntactRate));
        }
        
        if(AppConfig.project === undefined){
            var projectId = AppConfig.projectId;
        }else{
            var projectId = AppConfig.project.bindId;
        }
        WebAPI.get('/appDashboard/EquipmentIntactRate/pandect/'+projectId+'/'+I18n.type).done(function(result){
            var dataList = result.data;
            if(dataList.length === 0){
                $(_this.container).find('.equipmentIntactRate').html("<div class='noData' i18n='toolBox.modal_public.NO_DATA'></div>");
            }else{
                var colorArr = ['#fac824','#e6c322','#d2be20','#bebe1e','#aab41c','#94bb1a','#80b918','#6eb716','#5fb615','#50af12','#50af12'];
                for(var i=0,len=dataList.length;i<len;i++){
                    var num = Number(dataList[i].IntactRate.split("%")[0]).toFixed(0);
                    var topPercent = 100-num;
                    var goodNum = dataList[i].GoodNum;
                    var totalNum = dataList[i].TotalNum;
                    var faultNum = totalNum-goodNum;

                    if(I18n.type === 'zh'){
                        var title = '本项目共有'+dataList[i].SubSystemName+' '+totalNum+' 个&#10;BeOP本月为本项目累计检测出 '+faultNum+' 个故障';
                    }else{
                        var title = totalNum+' '+dataList[i].SubSystemName+' total.&#10; BeOP detected '+faultNum+' faults in this month.';
                    }
                    var str = '<div class="divCtn col-xs-4" data-toggle="tooltip" data-placement="bottom" title="'+title+'">\
                                <div class="pBar">\
                                <div class="circleCtn">\
                                  <div class="circleBorder"></div>\
                                  <div class="circleBg" style="background:'+colorArr[parseInt(num/10)]+';"></div>\
                                  <span class="perNum">'+num+'</span>\
                                </div>\
                              </div>\
                              <div class="name" title="'+dataList[i].SubSystemName+'">\
                                <span data-link-to="1480510791302405326379ab">'+dataList[i].SubSystemName+'</span>\
                              </div>\
                              </div>';
                    $(str).appendTo($(_this.container).find('.equipmentIntactRate'));
                    $(".circleBg").eq(i).animate({top:topPercent+'%'},2000);
                }
            } 
            I18n.fillArea($(_this.container));
            _this.attatchEvents();
            _this.resize();
        })
    };

    ModalEquipmentPerfectRate.prototype.attatchEvents = function (points) {
        $(this.container).off('click').on('click',function(){
            if(AppConfig.isFactory === 0){
                ScreenManager.goTo({
                    page: 'observer.screens.PageScreen',
                    options: {
                        id: '148404189964451192095bee'
                    },
                    container: 'indexMain'
                });
            }
        })
    };
    return ModalEquipmentPerfectRate;
})()
//   2016/12/22  工单统计
var ModalWorkOrderStatistics = (function(){
    function ModalWorkOrderStatistics(screen, entityParams, _renderModal) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        ModalBase.call(this, screen, entityParams, renderModal);
        
    };
    ModalWorkOrderStatistics.prototype = new ModalBase();

    ModalWorkOrderStatistics.prototype.optionTemplate = {
        name: 'toolBox.modal.WORK_ORDER_STATISTICS',
        parent:0,
        mode: 'noConfigModal',
        maxNum: 1,
        title:'',
        minHeight:3,
        minWidth:3,
        maxHeight:2,
        maxWidth:4,
        type: 'ModalWorkOrderStatistics',
        scroll:false,
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalWorkOrderStatistics.prototype.renderModal = function () {
      $(this.container).attr('title',I18n.resource.toolBox.modal.WORK_ORDER_STATISTICS);
      var _this = this;
      if($(this.container).find('.dashboardCtn').length !== 0){
          $(this.container).find('.dashboardCtn').html(_this.layoutPage());
      }else{
          $(this.container).html(_this.layoutPage());
      }
      
      I18n.fillArea($(this.container));
      var $workOrderStatistics = $(this.container).find(".workOrderStatistics");
      if(AppConfig.project === undefined){
        var projectId = AppConfig.projectId;
      }else{
        var projectId = AppConfig.project.bindId;
      }
      WebAPI.get('/Dashboard/workOrderStatistics/'+ projectId).done(function(result){
        function isEmptyObject(e) {  
          var t;  
          for (t in e)  
              return !1;  
          return !0  
        }  
        if( isEmptyObject(result.data) ){
          var newOrder = I18n.resource.toolBox.modal_public.NO_DATA;
          var averSendTime = I18n.resource.toolBox.modal_public.NO_DATA;
          var percentage = 0;
        }else{
          var data = result.data;
          var newOrderAll=0,finishOrder=0,responseTime=0;
          var timesNum=0;
          for(var k in data){
            var item = data[k];
            for(var i in item){
              if(k==='FinishingOrder'){
                finishOrder += item[i];
              }else if(k==='NewOrder'){
                newOrderAll += item[i];
              }else{
                responseTime += item[i];
                timesNum ++;
              }
            }
          }
          var newOrder = newOrderAll;
          // var averSendTime = (responseTime+28800).toFixed(0) + ' min';
          var averSendTime = 31+'min';
          var percentage = newOrder === 0? 0 :(finishOrder/newOrder*100).toFixed(0);
        }
        $workOrderStatistics.find('.newOrderNum').html(newOrder);
        $workOrderStatistics.find('.averSendTime').html(averSendTime);
        $workOrderStatistics.find('.percentageDetail').html(percentage+'%');
        $workOrderStatistics.find('.percentageBar').css('width',percentage+'%');
        if(Number(percentage) === 100){
          $workOrderStatistics.find('.percentageBar').css('border-radius','.5em');
        }
      })
      this.attatchEvents();
    };

    ModalWorkOrderStatistics.prototype.layoutPage = function () {
        return (
                '<div class="workOrderStatistics">\
                    <div>\
                      <div class="billInfo">\
                        <span class="name" i18n="toolBox.WORK_ORDER_STATISTICS.NEW_WORK"></span>\
                      </div>\
                      <div class="state">\
                        <span class="newOrderNum">loading</span>\
                      </div>\
                    </div>\
                    <div>\
                      <div class="billInfo">\
                        <span class="name" i18n="toolBox.WORK_ORDER_STATISTICS.REPONSE_TIME"></span>\
                      </div>\
                      <div class="state">\
                        <span class="averSendTime">loading</span>\
                      </div>\
                    </div>\
                    <div class="completionRate">\
                      <div class="billInfo">\
                        <span class="name" i18n="toolBox.WORK_ORDER_STATISTICS.COMPLETE"></span>\
                      </div>\
                      <div class="percentageCtn">\
                        <div class="progressBar">\
                          <div class="percentageBar barThree">\
                            <span class="percentageDetail">loading</span>\
                          </div>\
                        </div>\
                      </div>\
                    </div>\
                </div>'
            );
    };

     ModalWorkOrderStatistics.prototype.attatchEvents = function (points) {
        $(this.container).off('click').on('click',function(){
            if(AppConfig.isFactory === 0){
                ScreenManager.goTo({
                    page: 'observer.screens.PageScreen',
                    options: {
                        id: '148404186778151121ad8982'
                    },
                    container: 'indexMain'
                });
            }
        })
    };
    
    return ModalWorkOrderStatistics;
})()
//   2016/12/22  优先处理故障列表
var ModalPriorityHandlingFaultList = (function(){
    function ModalPriorityHandlingFaultList(screen, entityParams, _renderModal) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        ModalBase.call(this, screen, entityParams, renderModal);
        this.lastFiveMinutes = undefined;
        this.option = undefined;
    };
    ModalPriorityHandlingFaultList.prototype = new ModalBase();

    ModalPriorityHandlingFaultList.prototype.optionTemplate = {
        name: 'toolBox.modal.PRIORITY_HAADLING_FAULT_LIST',
        parent:0,
        mode: 'noConfigModal',
        maxNum: 1,
        title:'',
        minHeight:2,
        minWidth:4,
        maxHeight:3,
        maxWidth:6,
        type: 'ModalPriorityHandlingFaultList',
        scroll:false,
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
    };

    ModalPriorityHandlingFaultList.prototype.renderModal = function () {
        $(this.container).attr('title',I18n.resource.toolBox.modal.PRIORITY_HAADLING_FAULT_LIST);
        var _this = this;
        var priorityHandlingFaultList = '<div class="priorityHandlingFaultList"></div>';
        
        if($(this.container).find('.dashboardCtn').length !== 0){
            $(this.container).find('.dashboardCtn').html($(priorityHandlingFaultList));
        }else{
            $(this.container).html($(priorityHandlingFaultList));
        }
        var store = [];

        if(AppConfig.project === undefined){
            var projectId = AppConfig.projectId;
        }else{
            var projectId = AppConfig.project.bindId;
        }
        $.get('/diagnosis/notice/getTop5/'+projectId).done(function(rv) {
            if (!rv.data) return;
            store = rv.data;
            if(store.length === 0){
                $(_this.container).find('.priorityHandlingFaultList').html('<div style="width:100%;height:calc(100% - 30px);display:flex;justify-content: center;align-items: center;font-size:14px;" i18n="toolBox.modal_public.NO_FAULT"></div><div class="bottomDiv"><button class="showInfoBtn" i18n="toolBox.modal_public.DETAILS"></button></div>');
            }else{
                var html = '<div class="faultList">';
                for (var i = 0; i < rv.data.length; i++) {
                    var item = rv.data[i];
                    if(I18n.type === 'zh'){
                        var InProcess = '未处理';
                        var Completed = '已完成';
                    }else{
                        var InProcess = 'In Process';
                        var Completed = 'Completed';
                    }
                    var status = InProcess;
                    if (item.Status != 1 || item.CheckTime != null) status = Completed;
                    html += '<div data-index=' + i + ' class="rowList">\
                            <span style="width:20%;">' + item.Time.substr(5) + '</span>\
                            <span title="'+item.Fault+'" style="width:calc(50% - 85px);">' + item.Fault + '</span>\
                            <span title="'+item.Equipment+'" style="width:calc(50% - 85px)">' + item.Equipment + '</span>\
                            <span style="width:120px;">' + status + '</span>\
                            </div>';
                }
                html += '</div><div class="bottomDiv"><button class="showInfoBtn" i18n="toolBox.modal_public.DETAILS"></button></div>';
                $(_this.container).find('.priorityHandlingFaultList').html(html);
            }
            I18n.fillArea($(_this.container));
            $(_this.container).off('click.rowList').on('click.rowList','.rowList',function(e){
                var e = e || window.event;
                e.stopPropagation();
                var faultName = $(this).find('span').eq(1).text();
                var faultInfos ={};
                var postData = {
                   value:faultName,
                   type:'fault',
                   startTime: new Date(new Date().valueOf()-86400000*7).format('yyyy-MM-dd ')+'00:00:00',
                   endTime: new Date().format('yyyy-MM-dd HH:mm:ss'),
                   projId: projectId
                 }
                Spinner.spin($(_this.container).find('.priorityHandlingFaultList')[0]);
                var containerScreen = $(_this.container).closest('#indexMain');
                WebAPI.post('/diagnosis/getFaultDetails',postData).done(function(faultDetail){
                    var faultDetailData = faultDetail.data;
                    faultInfos['faultName'] = faultName;
                    faultInfos['faultDetailData'] = faultDetailData;
                    faultInfos['containerScreen'] = containerScreen;
                    faultInfos['diagType'] = 'fault';
                    new DiagnosisInfo().show(faultInfos);
                 })
            });
        })
        this.attatchEvents();
    };

    ModalPriorityHandlingFaultList.prototype.attatchEvents = function (points) {
        $(this.container).off('click.showInfoBtn').on('click.showInfoBtn','.showInfoBtn',function(e){
            var e = e || window.event;
            e.stopPropagation();
            if(AppConfig.isFactory === 0){
                ScreenManager.goTo({
                    page: 'observer.screens.PageScreen',
                    options: {
                        id: '1484041883476511bc54d206'
                    },
                    container: 'indexMain'
                });
            }
        })
    };

    return ModalPriorityHandlingFaultList;
})()
/*2017 1 5  能耗趋势分析图*/
var ModalEnergyTrendAnalysis = (function () {
	function ModalEnergyTrendAnalysis(screen, entityParams, _renderModal) {
        if (!screen) return;
        var renderModal = _renderModal ? _renderModal : this.renderModal;
        ModalBase.call(this, screen, entityParams, renderModal);
    };
	ModalEnergyTrendAnalysis.prototype = new ModalBase();
	ModalEnergyTrendAnalysis.prototype.optionTemplate = {
		name: 'toolBox.modal.ENERGY_TREND_ANALYSIS',
        parent:0,
        mode: 'noConfigModal',
        maxNum: 1,
        title:'',
        minHeight:3,
        minWidth:3,
        maxHeight:2,
        maxWidth:4,
        type: 'ModalEnergyTrendAnalysis',
        scroll:false,
        tooltip: {
            'imgPC': true,
            'imgMobile': false,
            'isSpecData':false,
            'desc': ''
        }
	};

    ModalEnergyTrendAnalysis.prototype.resize = function(){
        this.chart && this.chart.resize();
    };
    
    ModalEnergyTrendAnalysis.prototype.renderChartOption = function (data,time) {
        var year = new Date().getFullYear() - 1;
    	var option = {
    		color:['rgb(23,171,227)'],
            tooltip : {
                trigger: 'axis',
                axisPointer : {            // 坐标轴指示器，坐标轴触发有效
                    type : 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
                }
            },
            grid: {
                left: 10,
                right: 10,
                bottom: 10,
                top:10,
                containLabel: true
            },
            axisLabel:{
                formatter: function(value){
                    if(value >= 1000000||value <= -1000){
                    	return value/1000000 + 'm';
                    }else if(value >= 1000||value <= -1000){
                        return value/1000 + 'k';
                    } else{
                        return value;
                    }
                },
                textStyle:{
                    color:'#666666'
                } 
            },
            xAxis : [
                {
                    type : 'category',
                    axisTick: {
                        alignWithLabel: true
                    },
                    data : time,
                    axisTick:{
                        show:false
                    },
                    axisLine:{
                        lineStyle:{
                            color:'#666666',
                        }
                    }
                }
            ],
            yAxis : [
                {
                    type : 'value',
                    axisLine:{
                        show:false
                    },
                    axisTick:{
                        show:false
                    },
                    splitLine:{
                        lineStyle:{
                            color:'#888888'
                        }
                    }
                }
            ],
            series : {
            	type:'bar',
            	label: {
                	normal: {
	                    show: true,
	                    position: 'top',
	                    formatter: function(value){
		                    if(value.value >= 1000000||value.value <= -1000000){
		                    	return (value.value/1000000).toFixed(2) + 'm';
		                    }else if(value.value >= 1000||value.value <= -1000){
		                        return (value.value/1000).toFixed(2) + 'k';
		                    }else{
		                        return value.value;
		                    }
		                }
	                },
	            },
                name:year,
            	data:data
            }
        }

        var $chartContainer = $(this.container).find('.chartBox');
        this.chart = echarts.init($chartContainer[0]);
        this.chart.setOption(option);
        this.spinner && this.spinner.stop();
    };

    ModalEnergyTrendAnalysis.prototype.renderModal = function () {
    	var _this = this;
    	var layoutInfo = '<div class="energyAnalysis">\
							<div class="chartBox"></div>\
						</div>';
        if($(this.container).find('.dashboardCtn').length !== 0){
            $(this.container).find('.dashboardCtn').html(layoutInfo);
        }else{
           $(this.container).html(layoutInfo);
        }
    	if(AppConfig.project === undefined){
            var projectId = AppConfig.projectId;
        }else{
            var projectId = AppConfig.project.bindId;
        }
        var year = new Date().getFullYear() - 1;
    	var postData = {
            dsItemIds: ['@'+projectId+'|Accum_RealTimePower_svr'],
            timeStart: year+"-01-01 00:00:00",
            timeEnd: year+"-12-01 00:00:00",
            timeFormat: 'd1'
        }
		WebAPI.post("/analysis/startWorkspaceDataGenHistogram", postData).done(function (result) {
            if(result.timeShaft === undefined){
                $(_this.container).find('.chartBox').html('<div class="noData">没有历史数据</div>');
            }else{
                var time = result.timeShaft;
                var data = result.list[0].data;
                var timeArr = [],dataArr=[];
                var arr=[];
                var renderData = [];
                for(var i=0,length=time.length;i<length;i++){
                  var currentMonth = time[i].split('-')[1];
                  if(i === 0){
                    arr.push(data[i]);
                  }else{
                    var lasttMonth = time[i-1].split('-')[1];
                    if(lasttMonth === currentMonth){
                      arr.push(data[i]);
                    }else if(i === length-1){
                      timeArr.push(new Date(time[i]).format("MM"));
                      arr.push(data[i]);
                      dataArr.push(arr);
                      arr = [];
                    }else{
                      timeArr.push(new Date(time[i-1]).format("MM"));
                      dataArr.push(arr);
                      arr = [data[i]];
                    }
                  }
                }
                for(var j=0,jLength=dataArr.length;j<jLength;j++){
                  renderData.push( Number( (dataArr[j][dataArr[j].length-1]-dataArr[j][0]).toFixed(1) ) );
                }
                _this.renderChartOption(renderData,timeArr);
            }
		})
        this.attatchEvents();
    };

    ModalEnergyTrendAnalysis.prototype.attatchEvents = function (points) {
        $(this.container).off('click').on('click',function(){
            if(AppConfig.isFactory === 0){
                ScreenManager.goTo({
                    page: 'observer.screens.PageScreen',
                    options: {
                        id: '1484041916218511e04b5c4e'
                    },
                    container: 'indexMain'
                });
            }
        })
    };
	return ModalEnergyTrendAnalysis;
})()
var ModalInteractCfgPanel = (function () {
    var _this;
    function ModalInteractCfgPanel(parent) {
        _this = this;
        _this.$modalParent = parent;
        _this.modalId = parent.modalId;
        _this.option = parent.modal.option;
    }
    ModalInteractCfgPanel.prototype.show = function () {
        var domPanelContent = document.getElementById('paneCenter');
        if (domPanelContent) {
            Spinner.spin(domPanelContent);
        }
        WebAPI.get('/static/views/observer/widgets/modalInteractCfgPanel.html').done(function (html) {
            _this.$wrap = $('<div class="modal-db-history-wrap" id="modalInteractCfgPanelWrap">').appendTo(domPanelContent).html(html);
            _this.$modal = _this.$wrap.children('.modal');
            _this.$modal.modal('show');
            _this.init();
        }).always(function(e) {
            Spinner.stop();
        });
    };
    ModalInteractCfgPanel.prototype.init = function () {
        I18n.fillArea(_this.$modal);
        _this.$selMode = $('#selMode', this.$modal);
        _this.$selInter = $('#selInterval', this.$modal);
        _this.$divTmRange = $('#divTmRange', this.$modal);
        _this.$inputStart = $('#tmStart', this.$modal);
        _this.$inputEnd = $('#tmEnd', this.$modal);
        _this.$divTmLast = $('#divTmLast', this.$modal);
        _this.$inputPerVal = $('#inputPeriodValue', this.$modal);
        _this.$selPerUnit = $('#selPeriodUnit', this.$modal);
        _this.$btnOk = $('#btnOk', this.$modal);

        // 添加事件
        _this.attachEvents();
    };
    ModalInteractCfgPanel.prototype.attachEvents = function () {
        _this.$selMode.change(function (e) {
            var $opt = _this.$selInter.children('option');
            var flag = $(e.currentTarget).val();
            switch(flag) {
                case 'fixed':
                    $opt.eq(0).css('display', 'block');
                    $opt.eq(1).css('display', 'block');
                    $opt.eq(2).css('display', 'block');
                    $opt.eq(3).css('display', 'block');
                    $opt.eq(4).css('display', 'block');
                    _this.$divTmRange.css('display', 'inline-block');//
                    _this.$divTmLast.css('display', 'none');
                    break;
                case 'recent':
                    $opt.eq(0).css('display', 'block');
                    $opt.eq(1).css('display', 'block');
                    $opt.eq(2).css('display', 'block');
                    $opt.eq(3).css('display', 'none');
                    $opt.eq(4).css('display', 'none');
                    _this.$divTmRange.css('display', 'none');
                    _this.$divTmLast.css('display', 'inline-block');//
                    var temp = _this.$selInter.val();
                    if ('d1' == temp || 'M1' == temp) {
                        _this.$selInter.val('h1');
                    }
                    break;
                default:
                    break;
            }
        });

        var tmNow = new Date();
        var tmStart = new Date();
        tmStart.setFullYear(tmNow.getFullYear() - 10);
        _this.$inputStart.val(tmNow.format('yyyy-MM-dd HH:mm'));
        /*_this.$inputStart.css('background-color', '#f4f6f8');
        _this.$inputStart.css('border', '1px solid #27334b');
        _this.$inputStart.css('color', '#646464');
        _this.$inputStart.css('border-radius', '0.5em 0 0 0.5em');
        _this.$inputStart.css('margin-right', '-5px');*/
        _this.$inputStart.css({backgroundColor: '#f4f6f8', border: '1px solid #27334b', color: '#646464', borderRadius: '0.5em 0 0 0.5em', marginRight: '-5px'});
        /*_this.$inputStart.datetimepicker({
            format: 'yyyy-mm-dd hh:mm:00',
            startView: 'month',
            minView: 'hour',
            autoclose: true,
            todayBtn: false,
            pickerPosition: 'bottom-right',
            initialDate: tmNow,
            startDate: tmStart,
            endDate: tmNow,
            keyboardNavigation: false
        });*/
        _this.$inputStart.datetimepicker('remove');
        _this.$inputStart.datetime({
            initialDate: tmNow,
            startDate: tmStart,
            endDate: tmNow
        });
        _this.$inputEnd.val(tmNow.format('yyyy-MM-dd HH:mm'));
        /*_this.$inputEnd.css('background-color', '#f4f6f8');
        _this.$inputEnd.css('border', '1px solid #27334b');
        _this.$inputEnd.css('color', '#646464');
        _this.$inputEnd.css('border-radius', '0 0.5em 0.5em 0');*/
        _this.$inputEnd.css({backgroundColor: '#f4f6f8', border: '1px solid #27334b', color: '#646464', borderRadius: '0 0.5em 0.5em 0'});
        /*_this.$inputEnd.datetimepicker({
            format: 'yyyy-mm-dd hh:mm:00',
            startView: 'month',
            minView: 'hour',
            autoclose: true,
            todayBtn: false,
            pickerPosition: 'bottom-right',
            initialDate: tmNow,
            startDate: tmStart,
            endDate: tmNow,
            keyboardNavigation: false
        });*/
        _this.$inputEnd.datetimepicker('remove');
        _this.$inputEnd.datetime({
            initialDate: tmNow,
            startDate: tmStart,
            endDate: tmNow
        });
        _this.$btnOk.off().click(function (e) {
            var tmMode = _this.$selMode.val();
            var strStart, strEnd;
            if ('fixed' == tmMode) {
                strStart = _this.$inputStart.val();
                strEnd = _this.$inputEnd.val();
            }
            else if ('recent' == tmMode) {
                var tmStart = new Date();
                var periodVal = parseInt(_this.$inputPerVal.val());
                if (!periodVal) {
                    alert('Please input time !');
                    return;
                }
                var periodUnit = _this.$selPerUnit.val();
                switch (periodUnit) {
                    case 'hour':
                        var time = tmNow.getTime() - 3600000 * periodVal;
                        tmStart.setTime(time);
                        break;
                    case 'day': // only be used now
                        var time = tmNow.getTime() - 86400000 * (periodVal - 1);
                        tmStart.setTime(time);
                        tmStart.setHours(0);
                        tmStart.setMinutes(0);
                        break;
                    case 'month':
                        var month = tmNow.getMonth();
                        if (0 == month) {
                            tmStart.setFullYear(tmNow.getFullYear() - 1);
                            tmStart.setMonth(11);
                        }
                        else {
                            tmStart.setMonth(month - 1);
                        }
                        break;
                    default :
                        break;
                }
                strStart = tmStart.format('yyyy-MM-dd HH:mm:00');
                tmNow.setHours(23);
                tmNow.setMinutes(59);
                strEnd = tmNow.format('yyyy-MM-dd HH:mm:00');
            }
            else {
                alert('Please select mode !');
                return;
            }

            if (_this.modalId) {
                for (var i = 0; i < _this.$modalParent.arrModal.length; i++) {
                    var item = _this.$modalParent.arrModal[i];
                    if (item) {
                        if (_this.modalId == item.id) {
                            if (!item.modal.option) {
                                item.modal.option = {};
                                item.modal.option.dictPtStatus = {};
                            }
                            item.modal.option.timeMode = tmMode;
                            item.modal.option.interval = _this.$selInter.val();
                            item.modal.option.timeStart = strStart;
                            item.modal.option.timeEnd = strEnd;
                            item.modal.option.periodVal = periodVal;
                            item.modal.option.periodUnit = periodUnit;
                            if ('recent' == tmMode) {
                                item.interval = 1000;
                            }
                            else {
                                item.interval = null;
                            }
                            break;
                        }
                    }
                }
            }
            _this.$modalParent.screen.saveLayoutOnly();
            _this.$modalParent.drawChartsEx(item.modal.option, _this.modalId);
        });

        if (_this.option) {
            _this.$selMode.val(_this.option.timeMode);
            _this.$selInter.val(_this.option.interval);
            _this.$inputStart.val(_this.option.timeStart);
            _this.$inputEnd.val(_this.option.timeEnd);
            _this.$inputPerVal.val(_this.option.periodVal);
            _this.$selPerUnit.val('day'/*_this.option.periodUnit*/);
            if ('recent' == _this.option.timeMode) {
                _this.$selMode.change();
            }
        }
    };

    return ModalInteractCfgPanel;
})();
(function () {
    var _this;
    var timer;
    var saveTimer;
    function EnergyScreen(page, screen, opt) {
        _this = this;


        this.page = page;
        this.facScreen = screen;

        // 中间内容区域
        this.windowCtn = null;
        // 数据源面板容器
        this.dataSourcePanelCtn = null;
        // 可选模块面板容器
        this.modulePanelCtn = null;

        this.layout = {
            windowPanel: null,
            dataSourcePanel: null,
            modulePanel: null
        };

        // 可选模块面板
        this.modulePanel = null;
        // 数据源面板
        this.dataSourcePanel = null;
        // dashboard 配置框
        this.modalConfigPane = null;
        
        // dashboard 实际的显示区域
        this.container = null;
        this.$pageNav = null;

        this.store = {};
        this.listEntity = [];
        this.arrEntityOrder = [];

        this.options = opt?opt:{};
        this.options.isConfig = true;
    }

    EnergyScreen.prototype.htmlUrl = '/static/app/WebFactory/views/energyScreen.html';

    EnergyScreen.prototype.show = function () {
        var _this = this;

        WebAPI.get(this.htmlUrl).done(function (html) {
            // 初始化布局
            _this.initLayout(html);
            // 初始化操作
            _this.init();
        });
    };

    EnergyScreen.prototype.onTabPageChanged = function (e) {
        var isShow = e.detail;
        var type = e.currentTarget.dataset.type;

        switch(type) {
            case 'DataSourcePanel':
                if(isShow) {
                    if(_this.dataSourcePanel === null) {
                        _this.dataSourcePanel = new DataSourcePanel(_this);
                    }
                    _this.dataSourcePanel.show();
                } else {
                    _this.dataSourcePanel.hide();
                }
                break;
            case 'ModulePanel':
                if(isShow) {
                    if(_this.modulePanel === null) {
                        _this.modulePanel = new ModulePanel(_this);
                    }
                    _this.modulePanel.show();
                } else {
                    _this.modulePanel.hide();
                }
                break;
        }
    };

    EnergyScreen.prototype.getPageData = function () {
        // loading
        Spinner.spin(this.windowCtn);
        return WebAPI.get("/spring/get/" + this.page.id + '/' + AppConfig.isFactory)
            .always(function (e) {
                Spinner.stop();
            });
    };

    EnergyScreen.prototype.init = function () {
        var promise = this.getPageData();
        Spinner.spin(this.windowCtn);
        promise.done(function (rs) {
            if (!rs.id) {
                // 首次创建页面后，传回的数据没有 id 字段，这里手动建立 id 字段，
                // 否则第一次进入保存时会不停创建新的记录
                rs.id = ObjectId();
            }
            this.store = rs;

            // 初始化导航条
            this.initNav();

            // 初始化配置模态框
            this.initConfigModal();

            // 初始化 可选模块 工厂类
            this.initIoc();

            // 初始化面板
            this.initPanels();

            // 初始化图元数据
            this.initModuleLayout();

            // 显示图元的配置模式
            this.showConfigMode();

            // 初始化同步机制
            this.initSync();

            // 设置一个记录点
            this.dataSign = this.getDataSign();

        }.bind(this)).always(function () {
            Spinner.stop();
        });
    };

    EnergyScreen.prototype.getDataSign = function () {
        // 序列化字符串，用于记录当前数据的状态
        return JSON.stringify(this.listEntity) + JSON.stringify(this.arrEntityOrder);
    };

    EnergyScreen.prototype.initPanels = function () {
        // 初始化 数据源面板
        this.initDataSourcePanel();
        // 初始化 可选模块面板
        this.initModulePanel();
    };

    EnergyScreen.prototype.initSync = function () {
        if (this.page.isLock === 1) return;
        // 注册 ctrl+s 保存事件
        window.addEventListener('keydown', this.onKeyDownActionPerformed, false);
        // 注册 beforeunload 事件
        window.addEventListener('beforeunload', this.onBeforeUnloadActionPerformed, false);
        //自动保存事件
        this.autoSaveLayout(false);
    };
    EnergyScreen.prototype.spinner = function (flag) {
        saveTimer && clearTimeout(saveTimer), saveTimer=null;
		var $spinner = $('#mainframe .spinner');
		if (flag === "start") {
		    $spinner.css('display', 'block')
                .siblings('span')
                .css('display', 'none');
		} else if (flag === 1) {
		    $spinner.css('display', 'none')
                .siblings('span:eq(0)')
                .attr('class', 'glyphicon glyphicon-ok')
                .css('display', 'inline-block')
                .next()
                .css('display', 'inline-block');
		    saveTimer = setTimeout(function () {
		        $spinner.siblings('span:eq(0)')
                    .attr('class', 'glyphicon glyphicon-floppy-disk');
		    }, 2000)
		} else if (flag === 0) {
		    $spinner.css('display', 'none')
                .siblings('span:eq(0)')
                .attr('class', 'glyphicon glyphicon-remove')
                .css('display', 'inline-block')
                .next()
                .css('display', 'inline-block');
		    saveTimer = setTimeout(function () {
		        $spinner.siblings('span:eq(0)')
                    .attr('class', 'glyphicon glyphicon-floppy-disk');
		    }, 2000)
		}
	};
    EnergyScreen.prototype.initNav = function () {
        var _this = this;

        this.$pageNav = $('#pageNav');
        this.$pageTopTools = $('#pageTopTools');
        this.$userNav = $('#userNav');

        // 隐藏所有 id
        $('a', this.$pageTopTools).hide();

        // 显示页面名称
        $('#lkName', this.$pageNav).text(this.facScreen.project.cnName + " > " + this.page.name.split(' - ')[0])
        .attr("title",this.facScreen.project.cnName + ">" + this.page.name.split(' - ')[0]);

        //锁定时修改显示样式
        var $pageNameBox = $('#lkName');
        if (this.page.isLock === 1) {
            $pageNameBox.addClass('locked');
            $pageNameBox.prepend('<span class="glyphicon glyphicon-lock lockedImage"></span>');
            $pageNameBox.append('<span class="lockedText">(已锁定)</span>');
        } else {
            $pageNameBox.removeClass('locked');
        }
        // 数据同步链接
        $('#lkSync', this.$pageTopTools).off('click').click(function () {
            if (_this.page.isLock === 1) {
                alert('页面已经锁定，保存失败！');
                return;
            }
            // TODO 动画开始
            _this.spinner('start');
            _this.autoSaveLayout(true, function (state) {
                // TODO 动画结束
                _this.spinner(state);
            });
        }).show();
        // 更新链接
        $('#lkPreview', this.$pageTopTools).off('click').click(function () {
            if (_this.page.isLock === 1) {
                return;
            }
            Spinner.spin(document.body);
            _this.autoSaveLayout(true, function () {
                Spinner.stop();
            });
        })
        .show()
        .attr('href', '/factory/preview/dashboard/' + _this.page.id);
        
        // 显示 Nav
        this.$pageNav.show();
        this.$pageTopTools.show();
        this.$userNav.show();
    },

    /** 初始化 可选模块面板 */
    EnergyScreen.prototype.initModulePanel = function () {
        if(this.modulePanel) {
            this.modulePanel.close();
            this.modulePanel = null;
        }
        if( $(this.modulePanelCtn).is(':visible') ) {
            this.modulePanel = new ModulePanel(this);
            this.modulePanel.show();
        }
        this.modulePanelCtn.removeEventListener('dock.tabPage.changed', this.onTabPageChanged);
        this.modulePanelCtn.addEventListener('dock.tabPage.changed', this.onTabPageChanged, false);
    };

    EnergyScreen.prototype.initDataSourcePanel = function () {
        if(this.dataSourcePanel) {
            this.dataSourcePanel.close();
            this.dataSourcePanel = null;
        }
        if( $(this.dataSourcePanelCtn).is(':visible') ) {
            this.dataSourcePanel = new DataSourcePanel(this);
            this.dataSourcePanel.show();
        }
        this.dataSourcePanelCtn.removeEventListener('dock.tabPage.changed', this.onTabPageChanged);
        this.dataSourcePanelCtn.addEventListener('dock.tabPage.changed', this.onTabPageChanged, false);
    };

    EnergyScreen.prototype.initIoc = function () {
        this.factoryIoC = new FactoryIoC('dashboard');
    };

    EnergyScreen.prototype.initConfigModal = function () {
        this.modalConfigPane = new modalConfigurePane(this.windowCtn.querySelector('#energyModal'), this, 'dashboard');
        this.modalConfigPane.show();
    };

    EnergyScreen.prototype.initLayoutDOM = function (html) {
        var divMain, stCt;
        // 创建数据源面板容器
        this.dataSourcePanelCtn = document.createElement('div');
        this.dataSourcePanelCtn.id = 'dataSourcePanel';
        this.dataSourcePanelCtn.setAttribute('caption', I18n.resource.dataSource.TITLE);
        this.dataSourcePanelCtn.dataset.type = 'DataSourcePanel';

        // 图元面板容器
        this.modulePanelCtn = document.createElement('div');
        this.modulePanelCtn.id = '';
        this.modulePanelCtn.setAttribute('caption', I18n.resource.toolBox.TITLE);
        this.modulePanelCtn.dataset.type = 'ModulePanel';

        // 中间内容区域面板容器
        this.windowCtn = document.createElement('div');
        this.windowCtn.id = 'windows';

        // 初始化中间区域的内部 DOM
        divMain = document.createElement('div');
        divMain.className = 'indexContent st-pusher';
        divMain.innerHTML = html;

        stCt = $('<div id="st-container" class="st-container gray-scrollbar">')[0];
        stCt.appendChild(divMain);
        this.windowCtn.appendChild(stCt);

        this.container = divMain.querySelector('#paneCenter');
        this.$container = $(_this.container);
    };

    EnergyScreen.prototype.initLayout = function (html) {
        var dockManager = this.facScreen.layout.dockManager;
        var documentNode = this.facScreen.layout.documentNode;
        var pagePanel = this.facScreen.layout.pagePanel;
        var pageNode;

        var windowPanel, dataSourcePanel, modulePanel;
        var windowNode, dataSourceNode, moduleNode;

        this.initLayoutDOM(html);

        this.layout.windowPanel = windowPanel = new dockspawn.PanelContainer(this.windowCtn, dockManager);
        this.layout.dataSourcePanel = dataSourcePanel = new dockspawn.PanelContainer(this.dataSourcePanelCtn, dockManager);
        this.layout.modulePanel = modulePanel = new dockspawn.PanelContainer(this.modulePanelCtn, dockManager);

        // 判断 pagePanel 是否在浮动窗口中
        if (pagePanel.floatingDialog) {
            dataSourceNode = dockManager.dockRight(documentNode, dataSourcePanel, .2);
        } else {
            pageNode = dockManager._findNodeFromContainer(pagePanel);
            dataSourceNode = dockManager.dockFill(pageNode, dataSourcePanel);
        }
        moduleNode = dockManager.dockFill(dataSourceNode, modulePanel);
        windowNode = dockManager.dockFill(documentNode, windowPanel);

        return {
            dataSourceNode: dataSourceNode,
            moduleNode: moduleNode,
            windowNode: windowNode
        };
    };

    EnergyScreen.prototype.initModuleLayout = function () {
        if (!(this.store && this.store.layout)) return;
        if(this.options.isForMobile)this.$container.addClass('forMobile');
        for (var i = 0, item; i < this.store.layout.length; i++) {
            for (var j = 0; j < this.store.layout[i].length; j++) {
                item = this.store.layout[i][j];
                var modelClass,entity;
                if (item.modal.type) {
                    //regist IoC
                    modelClass = this.factoryIoC.getModel(item.modal.type);
                    if(!modelClass) continue;
                    //if (item.isNotRender) continue;
                    entity = new modelClass(this, item);
                    this.listEntity[item.id] = entity;
                    this.arrEntityOrder.push(item.id);
                }
            }
        }
        //如果一个页面只有entity且 spanR=6,spanC=12
        var $springCtn = $('#paneCenter').children('.springContainer');
        if($springCtn.length == 1 && parseFloat($springCtn[0].style.height) >= parseFloat("99%") && parseFloat($springCtn[0].style.width) >= parseFloat("99%")){
            $springCtn.children('.panel-default').css({border: 'none'});
        }
    };

    EnergyScreen.prototype.onKeyDownActionPerformed = function (e) {
        if (e.which === 83 && e.ctrlKey) {
            e.stopPropagation();
            e.preventDefault();
            try {
                _this.saveLayout();
            } catch (e) {
                Log.exception(e);
            }
        }
    };

    EnergyScreen.prototype.onBeforeUnloadActionPerformed = function (e) {
        // 判断是否有数据没有提交
        if ( _this.dataSign !== _this.getDataSign() ) {
            e.returnValue = I18n.resource.screen.UNSAVED_PAGE_TIP;
            return e.returnValue;
        }
    };

    EnergyScreen.prototype.showConfigMode = function () {
        Spinner.spin(document.getElementById('paneCenter'));
        for (var key in this.listEntity) {
            this.listEntity[key].configure();
        }
        Spinner.stop();
    };

    EnergyScreen.prototype.setEntity = function () {};

    EnergyScreen.prototype.removeEntity = function (id) {
        this.listEntity[id] = null;
        delete this.listEntity[id];
        this.arrEntityOrder.splice(this.arrEntityOrder.indexOf(id), 1);
    };

    EnergyScreen.prototype.replaceEntity = function (sourceId, targetId, parentId) {
        if (sourceId == targetId) return;

        var _this = this;
        var source = this.listEntity[sourceId];
        var target = this.listEntity[targetId];

        source.entity.id = (+new Date()).toString();

        target.entity.id = (+new Date() + 1).toString();

        this.listEntity[source.entity.id] = source;
        this.listEntity[target.entity.id] = target;

        delete this.listEntity[sourceId];
        delete this.listEntity[targetId];

        source.initContainer(targetId).configure();
        target.initContainer(sourceId).configure();


        this.arrEntityOrder[this.arrEntityOrder.indexOf(targetId)] = source.entity.id;
        this.arrEntityOrder[this.arrEntityOrder.indexOf(sourceId)] = target.entity.id;

        //如果是组合图内部交换位置,则组合图的subChartIds更新
        if (parentId) {
            this.listEntity[parentId].entity.modal.option.subChartIds.forEach(function (i) {
                if (i.id == sourceId) {
                    i.id = target.entity.id;
                }
            });
            this.listEntity[parentId].entity.modal.option.subChartIds.forEach(function (i) {
                if (i.id == targetId) {
                    i.id = source.entity.id;
                }
            });
        }
        if (source.entity.modal.type == 'ModalMix') {
            source.entity.modal.option && source.entity.modal.option.subChartIds && source.entity.modal.option.subChartIds.forEach(function (i) {
                var entity = _this.listEntity[i.id].entity, modelClass, item;
                modelClass = _this.factoryIoC.getModel(entity.modal.type);
                _this.container = $('#divContainer_' + source.entity.id).find('.chartsCt')[0];
                item = new modelClass(_this, entity);
                item.configure()
            });
        }
        if (target.entity.modal.type == 'ModalMix' && target.entity.modal.option && target.entity.modal.option.subChartIds) {
            target.entity.modal.option.subChartIds.forEach(function (i) {
                var entity = _this.listEntity[i.id].entity, modelClass, item;
                modelClass = _this.factoryIoC.getModel(entity.modal.type);
                _this.container = $('#divContainer_' + target.entity.id).find('.chartsCt')[0];
                item = new modelClass(_this, entity);
                item.configure()
            });
        }
    };

    EnergyScreen.prototype.rebornEntity = function (entityParams, tragetType, targetTitle, modalNoneEdit) {
        var oldIndex = this.arrEntityOrder.indexOf(entityParams.id);
        this.removeEntity(entityParams.id);

        entityParams.modal.type = tragetType;
        entityParams.modal.title = '';
        var modelClass = this.factoryIoC.getModel(tragetType);
        if ((!entityParams.isNotRender) && !modalNoneEdit) {
            if ('ModalInteract' == entityParams.modal.type) {
                entityParams.spanC = 9;
                entityParams.spanR = 3;
            }
            else if (entityParams.modal.type !== 'ModalMix'&&entityParams.modal.type !== 'ModalAppBlind') {
                entityParams.spanC = modelClass.prototype.optionTemplate.defaultWidth?modelClass.prototype.optionTemplate.defaultWidth:modelClass.prototype.optionTemplate.minWidth;
                entityParams.spanR = modelClass.prototype.optionTemplate.defaultHeight?modelClass.prototype.optionTemplate.defaultHeight:modelClass.prototype.optionTemplate.minHeight;
            }else if(entityParams.modal.type === 'ModalAppBlind'){
				entityParams.spanC = 3;
                entityParams.spanR = 4.5;
			}
        }
        //防止超出界限
        entityParams.spanC = Math.min(entityParams.spanC,modelClass.prototype.optionTemplate.maxWidth);
        entityParams.spanR = Math.min(entityParams.spanR, modelClass.prototype.optionTemplate.maxHeight);

        var entity = new modelClass(this, entityParams);
        this.listEntity[entity.entity.id] = entity;
        this.arrEntityOrder.splice(oldIndex,0,entity.entity.id);
        entity.configure();
    };

    EnergyScreen.prototype.getLayoutData = function () {
        var entity = null;
        var arrEntity = [];
        
        for (var i = 0; i < this.arrEntityOrder.length; i++) {
            entity = this.listEntity[this.arrEntityOrder[i]].entity;

            //对entity过滤,判断是否存在于modalMix, 如果是,isNotRender=true
            if(entity.modal.type != 'ModalMix'){
                for(var m in this.listEntity){
                    var en = this.listEntity[m].entity;
                    if(en.modal.type === 'ModalMix' && en.modal.option && en.modal.option.subChartIds && en.modal.option.subChartIds.length > 0){
                        for(var n = 0; n < en.modal.option.subChartIds.length; n++){
                            if(en.modal.option.subChartIds[n]){
                                if(entity.id === en.modal.option.subChartIds[n].id && $('#divContainer_'+entity.id).closest('#divContainer_'+en.id).length == 1){
                                    entity.isNotRender = true;
                                }
                            }
                        }
                    }
                }
            }

            if(this.listEntity[this.arrEntityOrder[i]].optionTemplate.needRefresh === false){
                arrEntity.push(entity);
            }else if(entity.modal.type == 'ModalPointKPI'){
                arrEntity.push(this.dealWithEntity(entity));
            }else if(entity.modal.type == 'ModalReportChapter'){
                if(entity.modal.option && entity.modal.option.menuId && entity.modal.option.menuId != ''){
                    arrEntity.push(entity);
                }
            }else if(entity.modal.type == 'ModalDiagnosisPanelHtml'){
                if (!entity.modal.option) {
                    entity.modal.option = {
                        html: '<div id="modalDiagnosisPanel'+i+'" style="height:100%;"></div>↵<script>new ModalDiagnosisPanel(document.getElementById("modalDiagnosisPanel'+i+'")).show()</script>'
                    };
                    entity.modal.dsChartCog = [{ accuracy: 2 }];
                    entity.modal.interval = 60000;
                    entity.modal.points = [];
                }
                arrEntity.push(entity);
            }else if(entity.modal.type == 'ModalAppBlind'){
                //删除被删除的entity
                if(entity.modal.option && entity.modal.option.length > 0){
                    for(var j = 0; j < entity.modal.option.length; j++){
                        if(entity.modal.option[j] && entity.modal.option[j].subChartIds && entity.modal.option[j].subChartIds[0].id){
                            var id = entity.modal.option[j].subChartIds[0].id;
                            if(!this.listEntity[id]){
                                entity.modal.option.splice(j,1);
                                break;
                            }
                        }
                    }
                }
                arrEntity.push(entity);
            }else {
                arrEntity.push(entity);
            }
        }
        return [arrEntity];
    };

    EnergyScreen.prototype.saveLayout = function (callback) {
        var _this = this;
        
        var data = {
            creatorId: AppConfig.userId,
            menuItemId: this.page.id,
            isFactory: AppConfig.isFactory,
            layout: this.getLayoutData()
        };
        this.store.id && (data.id = this.store.id);

        WebAPI.post('/spring/saveLayout', data).done(function (result) {
            // 更新 storeSerializedStr, 标识存储的数据被更改
            _this.dataSign = _this.getDataSign();
            // 执行成功回调
            typeof callback === 'function' && callback(1);
        }).fail(function () {
            // 执行失败回调
            typeof callback === 'function' && callback(0);
        });
    };

    EnergyScreen.prototype.dealWithEntity = function(entity){
        entity.modal.points = [];
        entity.modal.interval = 5;
        entity.modal.option && entity.modal.option.kpiList && entity.modal.option.kpiList.forEach(function(kpiItem){
            traverseTree(kpiItem);
        });
        function traverseTree(tree) {
            dealWithNode(tree);
            traverse(tree, 0);
        }
        function traverse(node, i) {//广度优先遍历
            var children = node.list;
            if (children != null && children.length > 0) {
                dealWithNode(children[i]);
                if (i == children.length - 1) {
                    for(var j = 0; j < children.length; j++){
                        traverse(children[j], 0);
                    }
                } else {
                    traverse(node, i + 1);
                }
            }
        }
        function dealWithNode(child){
            delete child.pointPassData;
            delete child.show;
            if(child.pointKPI){
                entity.modal.points.push(child.pointKPI);
            }
            if(child.pointGrade){
                entity.modal.points.push(child.pointGrade);
            }
            if(child.pointPass){
                entity.modal.points.push(child.pointPass);
            }
        }
        return entity;
    };

    EnergyScreen.prototype.destroyLayouts = function () {
        var _this = this;
        // 销毁 PageScreen 的所有面板
        Object.keys(this.layout).forEach(function (k) {
            var panel = _this.layout[k];
            // 判断是否为浮动窗口
            if (panel.floatingDialog) {
                // 存在，则使用浮动窗口的销毁方式
                panel.floatingDialog.destroy();
            } else {
                // 不存在，则使用固定停靠窗口的销毁方式
                panel.performUndock();
            }
            _this.layout[k] = null;
        });
        this.layout = null;
    };

    EnergyScreen.prototype.autoSaveLayout = function (isImmediatelyRun, callback) {
        // 重置计时器
        if (timer) {
            clearTimeout(timer);
        }
        timer = window.setTimeout(function() {
            _this.autoSaveLayout(true);
        }, AppConfig.syncInterval);

        if (isImmediatelyRun) {
            _this.saveLayout(callback);
        }
    };

    EnergyScreen.prototype.close = function () {
        // 隐藏 页面导航条
        if(this.facScreen.pagePanel){
            $('#lkName', this.$pageNav).text(this.facScreen.pagePanel.project.cnName);
        }else{
            this.$pageNav.hide();
        }

        this.$pageTopTools.hide();
        $('#lkSync', this.$pageNav).off();

        // 清除 ctrl+s 保存事件
        window.removeEventListener('keydown', this.onKeyDownActionPerformed);
        // 清除 beforeunload 事件
        window.removeEventListener('beforeunload', this.onBeforeUnloadActionPerformed);

        // 销毁配置窗口
        if (this.modalConfigPane) {
            this.modalConfigPane.close();
            this.modalConfigPane = null;
        }
        // 销毁遗留的异常DOM
        $('.datetimepicker').remove();
        // 销毁布局
        this.destroyLayouts();
        //清除timer
        if(timer){
            clearTimeout(timer);
            timer = null;
        }
    };

    namespace('factory.screens').EnergyScreen = EnergyScreen;
})();

/**
 * Created by win7 on 2016/5/28.
 */
(function(){
    function EnergyScreen_M(page,screen){
        var opt = {isForMobile:true};
        namespace('factory.screens').EnergyScreen.call(this,page,screen,opt)
    }
    EnergyScreen_M.prototype = Object.create(namespace('factory.screens.EnergyScreen').prototype);
    namespace('factory.screens').EnergyScreen_M = EnergyScreen_M;
})();
/**
 * Created by vicky on 2016/11/25.
 */

class AssetStatePanel{
    constructor(){
        this.$panel = undefined;
        this.dictTab = {
            maintain: undefined,
            repair: undefined,
            operation: undefined
        };
    }

    show(){
        WebAPI.get('/static/app/Asset/views/panels/assetStatePanel.html').done(rsHtml => {
            $(ElScreenContainer).append(rsHtml);
            var leftWidth = $('#paneAssetFilter').width();
            this.$panel = $('#statePanel').css({left: leftWidth, width:'calc(100% - '+ leftWidth +'px)'});
            this.$tabMaintain = $('#maintain', this.$panel);
            this.$tabRepair = $('#repair', this.$panel);
            this.$tabOperation = $('#operation', this.$panel);
            this.init();
            this.attachEvent();
        });
    }

    init(){
        var time = new Date();
        this.dataGallery = {};
        //时间输入框初始化
        $('input.timeStyle').datetime();
        //开始时间:当前时间 结束时间:上个月的今天
        $('[id="iptTimeEnd"]').val(time.format('yyyy-MM-dd'));
        time.setMonth(time.getMonth()-1);
        $('[id="iptTimeStart"]').val(time.format('yyyy-MM-dd'));

        I18n.fillArea(this.$panel);
        //默认查询预防性维保数据
        this.getMaintainData();
    }

    close(){
        $('.statePane').empty().remove();
        this.dictTab = null;
        this.dictThing = null;
        this.dataGallery = null;
        this.$panel = null;
        this.$tabMaintain = null;
        this.$tabRepair = null;
        this.$tabOperation = null;
    }

    attachEvent(){
        $('#btnImgGallery').off('click').on('click', (e) => {
            new ImgGallery(this);
        });
        $('#ulStateTab').off('click').on('click', 'a', (e) => {
            var tabName = $(e.currentTarget).attr('aria-controls');
            if(!this.dictTab[tabName]){
                switch(tabName){
                    case 'repair':
                        this.getRepairData();
                        break;
                    case 'operation':
                        this.getOperationData();
                        break;
                    default:
                        this.getMaintainData();
                        break;
                }
            }
        });

        //查询维护数据
        $('.btnQuery', this.$tabMaintain).off('click').on('click', () => {
            this.getMaintainData();
        });

        //查询维修数据
        $('.btnQuery', this.$tabRepair).off('click').on('click', () => {
            this.getRepairData();
        });

        //查询操作记录数据
        $('.btnQuery', this.$tabOperation).off('click').on('click', () => {
            this.getOperationData();
        });

        this.$panel.off('click').on('click', '.imgAttachmt', function(e){
            var imgSrc = $(this).prop('src');
            $('.showImg:eq(0)').off('click').on('click', function (e) {
                if(e.target == this.children[1]){
                    return;
                }
                e.stopPropagation();
                $(this).fadeOut();
            }).fadeIn().find('img').prop('src', imgSrc);
        });
    }

    //维护记录
    getMaintainData(){
        var startTime = $('#iptTimeStart', this.$tabMaintain).val();
        var endTime = $('#iptTimeEnd', this.$tabMaintain).val();

        startTime = new Date(startTime).format('yyyy-MM-dd 00:00:00');
        endTime = new Date(endTime).format('yyyy-MM-dd 23:59:59');
        //check startTime, endTime
        if(startTime == "NaN-aN-aN aN:aN:aN" || endTime == "NaN-aN-aN aN:aN:aN"){
            alert('请输入有效时间');
            return;
        }
        var postData = {
            pageNumber: 1,
            pageSize: 10000,
            startTime: startTime,
            endTime: endTime,
            query: {'fields.projId': AppConfig.projectId, 'fields.type': 4,'createTime': {'$gt': startTime, '$lt': endTime}}//fields.type: 4 ==> 预防性维护{'$gt': datetime.strptime(start_time, '%Y-%m-%d %H:%M:%S'), '$lt': datetime.strptime(end_time, '%Y-%m-%d %H:%M:%S')}
        }
        Spinner.spin(this.$tabMaintain[0]);
        WebAPI.post('/workflow/task/filter', postData).done((rs) => this.renderMaintain(rs))
        .fail(rs => {})
        .always(rs => {
            Spinner.stop();
        });
    }

    getRepairData(){
        var startTime = new Date($('#iptTimeStart', this.$tabRepair).val());
        var endTime = new Date($('#iptTimeEnd', this.$tabRepair).val());

        startTime.setDate(startTime.getDate()-1);
        endTime.setDate(endTime.getDate()+1);

        startTime = new Date(startTime).format('yyyy-MM-dd 23:59:59');
        endTime = new Date(endTime).format('yyyy-MM-dd 00:00:00');
        //check startTime, endTime
        if(startTime == "NaN-aN-aN aN:aN:aN" || endTime == "NaN-aN-aN aN:aN:aN"){
            alert('请输入有效时间');
            return;
        }
        var postData = {
            endTime: endTime,
            pageNum: 1,
            pageSize: 10000,
            startTime: startTime
        }
        Spinner.spin(this.$tabRepair[0]);
        WebAPI.post('/asset/maintainRecords/list', postData).done((rs) => this.renderRepair(rs))
        .fail(rs => {})
        .always(rs => {
            Spinner.stop();
        });
    }

    getOperationData(){
        var startTime = $('#iptTimeStart', this.$tabOperation).val();
        var endTime = $('#iptTimeEnd', this.$tabOperation).val();

        startTime = new Date(startTime).format('yyyy-MM-dd 00:00:00');
        endTime = new Date(endTime).format('yyyy-MM-dd 23:59:59');
        //check startTime, endTime
        if(startTime == "NaN-aN-aN aN:aN:aN" || endTime == "NaN-aN-aN aN:aN:aN"){
            alert('请输入有效时间');
            return;
        }
        var postData = {
            projId: AppConfig.projectId,
            endTime: endTime,
            startTime: startTime
        }
        Spinner.spin(this.$tabOperation[0]);
        WebAPI.post('/iot/getIOTRecords', postData).done((rs) => this.renderOperation(rs))
        .fail(rs => {})
        .always(rs => {
            Spinner.stop();
        });
    }

    renderMaintain(data){
        !this.dictTab && (this.dictTab={});
        this.dictTab['maintain'] = data;
        var $dataListCtn = $('.dataListCtn', this.$tabMaintain);
        var strHtml = '', tplHtml = '<div class="commentItem">\
            <div class="baseInfoCtn">\
                <span class="userPic"><img src="{userpic}" onerror="this.src=\'http://images.rnbtech.com.hk/workflow/attachment/599a931ec0-矩形-28.png\';this.title=\'原图已被删除\';this.parentNode.nextElementSibling.style.display=\'none\';"/></span>\
                <span class="name userName">{userName}</span>\
                <span class="time">{createTime}</span>\
            </div>\
            <div class="wkDescription">\
                <div class="title">{title}</div>\
                <div class="description">{detail}</div>\
            </div>\
            <div class="attachment gray-scrollbar">{attachment}</div>\
        </div>';
        var dataImg = {
            name: '预防性维护',
            type: 'maintain',
            arrImg: []
        };
        if(data.data && data.data.records){
            for(var i of data.data.records){
                strHtml += (tplHtml.formatEL({
                    userpic: i.creatorInfo ? (i.creatorInfo.userpic.indexOf('static') < 2 ? 'http://images.rnbtech.com.hk' + i.creatorInfo.userpic : i.creatorInfo.userpic) : 'http://images.rnbtech.com.hk/static/images/avatar/default/4.png',
                    userName: i.creator,
                    createTime: i.createTime,
                    title: i.title,
                    detail: i.fields.detail,
                    attachment: ((arr) => {
                        var str = '', fileName = '', tpl = '<span class="itemAttachmt"><span>{fileName}</span><a href="{url}" class="lkDownload">下载</a></span>';
                        for(var j of arr){
                            if(/.jpg|.jpeg|.png|.gif/.test(j.url)){
                                fileName = '<img src="'+ j.url +'" class="imgAttachmt" title="查看大图" data-uid="'+j.uid+'" onerror="this.src=\'http://images.rnbtech.com.hk/workflow/attachment/599a931ec0-矩形-28.png\';this.title=\'原图已被删除\';this.parentNode.nextElementSibling.style.display=\'none\';"/>';
                                dataImg.arrImg.push({
                                    fileName:j.fileName,
                                    url: j.url,
                                    from: '',
                                    link: '',
                                    modifier: i.creatorInfo,
                                    modifyTime: i.createTime,
                                    uid:j.uid
                                });
                            }else{
                                fileName = i.fileName;
                            }
                            str += (tpl.formatEL({
                                url: j.url,
                                fileName: fileName
                            }));
                        }
                        return str;
                    })(i.attachment)
                }));
            }
            if(this.dataGallery){
                this.dataGallery['maintain'] = dataImg;
            }
        }
        $dataListCtn.html(strHtml);
    }

    renderRepair(data){
        !this.dictTab && (this.dictTab={});
        this.dictTab['repair'] = data;

        var $dataListCtn = $('.dataListCtn', this.$tabRepair);
        var strHtml = '', tplHtml = '<div class="commentItem">\
            <div class="baseInfoCtn">\
                <span class="userPic"><img src="{userpic}" onerror="this.src=\'http://images.rnbtech.com.hk/workflow/attachment/599a931ec0-矩形-28.png\';this.title=\'原图已被删除\';this.parentNode.nextElementSibling.style.display=\'none\';"/></span>\
                <span class="name userName">{userName}</span>\
                <span class="time">{createTime}</span>\
            </div>\
            <div class="wkDescription">\
                <div class="title"><span class="spanTitle" title="{title}">{title}</span><span class="spanLight">开始时间:{startTime}&nbsp;&nbsp;&nbsp;&nbsp;结束时间:{endTime}</span><span class="spanLight">负责人: {operator}</span></div>\
                <div class="description">{detail}</div>\
            </div>\
            <div class="attachment gray-scrollbar">{attachment}</div>\
        </div>';

        this.dictThing = {};
        for(var thing of data.data.things){
            this.dictThing[thing._id] = thing;
        }
        var dataImg = {
            name: '维修记录',
            type: 'repair',
            arrImg: []
        };
        if(data.data && data.data.records){
            for(var i of data.data.records){
                if(!this.dictThing[i.thing_id] || !this.dictThing[i.thing_id].projId || this.dictThing[i.thing_id].projId != AppConfig.projectId) continue;
                strHtml += (tplHtml.formatEL({
                    userpic: i.creatorInfo ? (i.creatorInfo.userpic.indexOf('static') < 2 ? 'http://images.rnbtech.com.hk' + i.creatorInfo.userpic : i.creatorInfo.userpic) : 'http://images.rnbtech.com.hk/static/images/avatar/default/4.png',
                    userName: i.creatorInfo ? i.creatorInfo.userfullname : '',
                    createTime: i.createTime,
                    title: this.dictThing[i.thing_id].name,
                    operator: i.operator,
                    detail: i.content,
                    startTime: i.startTime,
                    endTime: i.endTime,
                    attachment: ((arr) => {
                        var str = '', fileName = '', tpl = '<span class="itemAttachmt"><span>{fileName}</span><a href="{url}" class="lkDownload">下载</a></span>';
                        for(var j of arr){
                            if(/.jpg|.jpeg|.png|.gif/.test(j.url)){
                                fileName = '<img src="'+ j.url +'" class="imgAttachmt" data-uid="'+j.uid+'" title="查看大图" onerror="this.src=\'http://images.rnbtech.com.hk/workflow/attachment/599a931ec0-矩形-28.png\';this.title=\'原图已被删除\';this.parentNode.nextElementSibling.style.display=\'none\';"/>';
                                dataImg.arrImg.push({
                                    fileName:j.fileName,
                                    url: j.url,
                                    from: '',
                                    link: '',
                                    modifier: i.creatorInfo,
                                    modifyTime: i.createTime,
                                    uid:j.uid
                                });
                            }else{
                                fileName = i.fileName;
                            }
                            str += (tpl.formatEL({
                                url: j.url,
                                fileName: fileName
                            }));
                        }
                        return str;
                    })(i.attachments)
                }));
            }
            if(this.dataGallery){
                this.dataGallery['repair'] = dataImg;
            }
        }
        $dataListCtn.html(strHtml);
    }

    renderOperation(data){
        !this.dictTab && (this.dictTab={});
        this.dictTab['operation'] = data;
        var $dataListCtn = $('.dataListCtn', this.$tabOperation);
        var strHtml = '';
        var timeStamp = new Date().getTime();//为了刷新图片
        var tpl = '<div class="commentItem">\
            <div class="baseInfoCtn">\
                <span class="userPic"><img src="{userpic}" onerror="this.src=\'http://images.rnbtech.com.hk/workflow/attachment/599a931ec0-矩形-28.png\';this.title=\'原图已被删除\';this.parentNode.nextElementSibling.style.display=\'none\';"/></span>\
                <span class="name userName">{userName}</span>\
                <span class="time">{time}</span>\
            </div>\
            <div class="wkDescription">\
                <div class="title">{title}</div>\
                <div class="description">{detail}</div>\
            </div>\
        </div>';


        var dictOprtType = {
            'add': '增加',
            'delete': '删除',
            'modify': '修改',
            'modifyImg': '修改设备照片'
        };
        var dataImg = {
            name: '操作记录',
            type: 'operation',
            arrImg: []
        };
        if(data.data){
            for(var i of data.data){
                var title = '<span class="oprtInfo oprtName">操作:' + dictOprtType[i.type] + '</span>';//<span class="oprtInfo tableName">表:' + i.tableName + '</span>
                var detail = '', imgUrl = '';
                if(i.type === "modify"){
                    title += ('<span>id:'+ i.newData['_id'] +'</span>');
                    //对比修改的属性
                    for(var j in i.newData){
                        i.newData[j] == 'None' && (i.newData[j] = '');
                        i.oldData[j] == 'None' && (i.oldData[j] = '');

                        !i.newData[j] && (i.newData[j] = '');
                        !i.oldData[j] && (i.oldData[j] = '');

                        if(j == 'updateTime'){
                            continue;
                        }

                        if(i.newData[j] != i.oldData[j] && (i.newData[j] || i.oldData[j])){
                            if(typeof i.newData[j] == 'object' || typeof i.oldData[j] == 'object'){
                                for(var k in i.newData[j]){
                                    if(i.newData[j][k] != i.oldData[j][k]){
                                        detail += (j + (i.oldData[j][k]?'由'+i.oldData[j][k]:'') + '修改为' + i.newData[j][k] + ';\t');
                                    }
                                }
                            }else{
                                detail += (j + (i.oldData[j]?'由'+i.oldData[j]:'') + '修改为' + i.newData[j] + ';\t');
                            }
                        }
                    }
                }else if(i.type === "delete"){
                    title += ('<span>id:'+ i.oldData['_id'] +'</span>');
                    detail = i.oldData ? (i.oldData.name ? ('name:'+ i.oldData.name) : (i.oldData._id ? 'id:'+ i.oldData._id: '')) : '';
                }else if(i.type === "add"){
                    title += ('<span>id:'+ i.newData['_id'] +'</span>');
                    detail = i.newData ? i.newData.name : '';
                }else if(i.type === 'modifyImg'){
                    title += ('<span>id:'+ i.newData['_id'] +'</span>');
                    imgUrl = 'http://images.rnbtech.com.hk/'+ i.newData['urlImg'] + '?'+ timeStamp;
                    dataImg.arrImg.push({
                                    fileName:i.newData['_id'],
                                    url: imgUrl,
                                    from: '',
                                    link: '',
                                    modifier: i.creatorInfo,
                                    modifyTime: i.time
                                });
                    detail += ('目前为: <img class="imgAttachmt imgAsset" src="'+ imgUrl +'" onerror="this.src=\'http://images.rnbtech.com.hk/workflow/attachment/599a931ec0-矩形-28.png\';this.title=\'原图已被删除\';this.parentNode.nextElementSibling.style.display=\'none\';"/>');
                }
                strHtml += (tpl.formatEL({
                    userpic: i.creatorInfo ? (i.creatorInfo.userpic.indexOf('static') < 2 ? 'http://images.rnbtech.com.hk' + i.creatorInfo.userpic : i.creatorInfo.userpic) : 'http://images.rnbtech.com.hk/static/images/avatar/default/4.png',
                    userName: i.creatorInfo ? i.creatorInfo.userfullname : '',
                    time: i.time,
                    title: title,
                    detail: detail
                }));
            }
            this.dataGallery['operation'] = dataImg;
        }

        $dataListCtn.html(strHtml);
    }
}


/**
 * Created by vicky on 2016/12/2.
 */
class ImgGallery{
    constructor(screen, parent){
        this.screen = screen
        this.dataGallery = screen.dataGallery;
        this.repair = screen.dictTab.repair;
        this.maintain = screen.dictTab.maintain;
        this.$parent = !parent ? $('body') : parent;
        this.show();
    }

    show(){
        WebAPI.get('/static/app/Asset/views/widget/imgGallery.html').done(rsHtml => {
            this.$parent.append(rsHtml);
            this.init();
            this.attachEvent();
        });
    }

    init(){
        this.$modalAlbum = $('#iAlbumModal').modal('show');
        this.$albumWrap = $('#albumWrap', this.$modalAlbum);
        this.$albumTitle = $('#albumTitle', this.$modalAlbum);
        this.renderAlbum();
    }

    close(){
        //todo
        this.screen = null;
        this.dataGallery = null;
        this.repair = null;
        this.maintain = null;
        this.$parent = null;
        this.$modalAlbum = null;
        this.$albumWrap = null;
        this.$albumTitle = null;
        $('#iAlbumModal').empty().remove();
    }

    attachEvent(){


    }

    renderAlbum(){
        new ImgAblum(this.dataGallery,this.repair,this.maintain).show();
    }
}

class ImgAblum{
    constructor(dataGallery,repairData,maintainData){
        this.dataGallery = dataGallery;
        this.repairData = repairData;
        this.maintainData = maintainData;
        this.init();
    }

    init(){
        this.$modalAlbum = $('#iAlbumModal');
        this.$albumWrap = $('#albumWrap', this.$modalAlbum);
        this.$albumList = $('#albumList', this.$modalAlbum);
        this.$albumTitle = $('#albumTitle', this.$modalAlbum);
    }

    show(){
        var strHtml = '';
        var tpl = '<div class="albumItem" data-type="{type}"><div class="albumImg"><img src="{cover}" onerror="this.src=\'http://images.rnbtech.com.hk/workflow/attachment/599a931ec0-矩形-28.png\'"/><span class="count">{count}</span></div><div class="name">{name}</div></div>';
        this.$albumTitle.text('图库');
        for(var i in this.dataGallery){
            strHtml += tpl.formatEL({
                cover: this.dataGallery[i].arrImg[0] ? this.dataGallery[i].arrImg[0].url : 'http://images.rnbtech.com.hk/assets/equipment/57b57b1d25752304384fabf5.jpg',
                name: this.dataGallery[i].name,
                count: this.dataGallery[i].arrImg.length,
                type: this.dataGallery[i].type
            });
        }
        this.$albumWrap.empty().append(strHtml);

        $('.albumItem').off('click').on('click', (e) => {
            this.curtAlbum = this.dataGallery[e.currentTarget.dataset.type];
            new ImgInAblum(this.curtAlbum,this.repairData,this.maintainData).show()
        });
    }

    close(){
        //todo
        this.dataGallery = null;
        this.repairData = null;
        this.$modalAlbum = null;
        this.$albumWrap = null;
        this.$albumList = null;
        this.$albumTitle = null;
        this.maintainData = null;
    }
}

class ImgInAblum{
    constructor(curtAlbum,repairData,maintainData){
        this.curtAlbum = curtAlbum;
        this.repairData = repairData;
        this.maintainData = maintainData;
        this.init();
    }
    init(){
        this.$modalAlbum = $('#iAlbumModal');
        this.$albumWrap = $('#albumWrap', this.$modalAlbum);
        this.$albumList = $('#albumList', this.$modalAlbum);
        this.$albumTitle = $('#albumTitle', this.$modalAlbum);
        this.$btnBackAlbum = $('#btnBackAlbum', this.$modalAlbum).removeClass('hidden');
        this.$btnBatchEdit = $('#btnBatchEdit', this.$modalAlbum).removeClass('hidden');
        this.$btnFinishEdit = $('#btnFinishEdit', this.$modalAlbum).addClass('hidden');
        this.$btnBatchDelete = $('#btnBatchDelete', this.$modalAlbum).addClass('hidden');
        this.attachEvent();
    }
    show(){
        var strHtml = ''
        var tplHtml = '<div class="imgItem" data-type="'+this.curtAlbum.type+'" data-uid="{uid}"><div class="albumImg"><img src="{url}" onerror="this.src=\'http://images.rnbtech.com.hk/workflow/attachment/599a931ec0-矩形-28.png\'"/></div><div class="fileName" title="{fileName}">{fileName}</div><div class="imgAlbumInfo"><span class="modifier">{modifier}</span><span class="modifyTime">{modifyTime}</span></div><span class="iconfont checkBox hidden">&#xe803;</span></div>';
        this.$albumTitle.text('图库/'+ this.curtAlbum.name);
        for(var i of this.curtAlbum.arrImg){
            strHtml += (tplHtml.formatEL({
                url: i.url,
                fileName: i.fileName,
                modifier: i.modifier['userfullname'],
                modifyTime: i.modifyTime,
                uid:i.uid
            }));
        }
        this.$albumWrap.addClass('hidden');
        this.$albumList.empty().append(strHtml).removeClass('hidden');
    }

    attachEvent(){
        //相册列表返回到图库
        this.$btnBackAlbum.off('click').on('click', () => {
            this.$albumList.addClass('hidden');
            this.$albumWrap.removeClass('hidden');
            this.$btnBackAlbum.addClass('hidden');
            this.$btnBatchEdit.addClass('hidden');
            this.$btnFinishEdit.addClass('hidden');
            this.$btnBatchDelete.addClass('hidden');
            this.$albumTitle.text('图库');
        });
        this.$albumList.off('click').on('click', '.imgItem', (e) => {
            new ImgDetail(this.curtAlbum, this.$albumList.children('.imgItem').index(e.currentTarget),this.repairData,this.maintainData).show();
        });
        this.$btnBatchEdit.off('click').on('click', (e) => {
            $(e.currentTarget).addClass('hidden');
            //显示checkbox
            $('.imgItem .checkBox', this.$albumList).removeClass('hidden').off('click').on('click', e => {
                e.stopPropagation();
                $(e.currentTarget).closest('.imgItem').toggleClass('selected');
            });
            //删除按钮
            this.$btnBatchDelete.removeClass('hidden').off('click').on('click', e => {
                e.stopPropagation();
                this.$btnBatchEdit.removeClass('hidden');
                this.$btnBatchDelete.addClass('hidden');
                this.$btnFinishEdit.addClass('hidden');
                this.deleteImg();

            });
            //完成按钮
            this.$btnFinishEdit.removeClass('hidden').off('click').on('click', e => {
                e.stopPropagation();
                this.$btnBatchEdit.removeClass('hidden');
                this.$btnBatchDelete.addClass('hidden');
                this.$btnFinishEdit.addClass('hidden');
                $('.imgItem .checkBox', this.$albumList).addClass('hidden');
            });
        });
    }
    deleteImg(){
        var arrUrl = [];
        $('.imgItem.selected .checkBox', this.$albumList).each(function(){
            var url = $(this).siblings('.albumImg').children('img').attr('src');
            url = url.indexOf('http://images.rnbtech.com.hk') > -1 ? url.split('http://images.rnbtech.com.hk')[1] : url;
            arrUrl.push(url);
        });

        var postDate = {
            'file_path[]':arrUrl
        }
        WebAPI.post('/oss/delete', postDate).done(rs => {
            var _this = this;
            var type;
            $('.imgItem.selected .checkBox', this.$albumList).each(function(){
                var $currentItem = $(this).closest('.imgItem');
                type = $currentItem.attr('data-type');
                $currentItem.removeClass('.selected');
                $(this).siblings('.albumImg').children('img').attr('src', 'http://images.rnbtech.com.hk/workflow/attachment/599a931ec0-矩形-28.png');
                var uid = $currentItem.attr('data-uid');
                var dataAll = type==='maintain'?_this.maintainData.data.records:_this.repairData.data.records;
                for(var i = 0;i<dataAll.length;i++){
                    var item = dataAll[i];
                    var attachments =  type==='maintain'?item.attachment:item.attachments;
                    if(attachments.length>0){
                        for(var j = 0;j<attachments.length;j++){
                            if(attachments[j].uid===uid){
                                attachments[j].url = 'http://images.rnbtech.com.hk/workflow/attachment/599a931ec0-矩形-28.png';
                            }
                        }
                    }
                }
            });
            if(type==='maintain'){
                new AssetStatePanel().renderMaintain(this.maintainData);
            }else{
                new AssetStatePanel().renderRepair(this.repairData);
            }
        }).fail(rs => {

        }).always(rs => {

        });
    }

    close(){
        //todo
        this.curtAlbum = null;
        this.repairData = null;
        this.$modalAlbum = null;
        this.$albumWrap = null;
        this.$albumList = null;
        this.$albumTitle = null;
        this.$btnBackAlbum = null;
        this.$btnBatchEdit = null;
        this.$btnFinishEdit = null;
        this.$btnBatchDelete = null;
        this.maintainData = null;
    }
}

class ImgDetail{
    constructor(curtAlbum, index,repairData,maintainData){
        this.curtAlbum = curtAlbum;
        this.repairData = repairData;
        this.imgIndex = (index && index) > 0 ? index: 0;
        this.$imgCurt = undefined;
        this.$modalGallery = undefined;
        this.maintainData = maintainData;
        this.init();
    }

    init(){
        this.$modalAlbum = $('#iAlbumModal').modal('hide');
        this.$modalGallery = $('#iGalleryModal').modal('show');
        this.$imgCurt = $('#imgCurt', this.$modalGallery);
        this.attachEvent();
    }

    show(){
        var $tips = $('.tips', this.$modalGallery);
        $('.imgName', this.$modalGallery).text(this.curtAlbum.arrImg[this.imgIndex].filName).attr('title', this.curtAlbum.arrImg[this.imgIndex].filName);
        $('.modifier', this.$modalGallery).text(this.curtAlbum.arrImg[this.imgIndex].modifier.userfullname);
        $('.modifyTime', this.$modalGallery).text(this.curtAlbum.arrImg[this.imgIndex].modifyTime);
        this.$imgCurt.attr('src', this.curtAlbum.arrImg[this.imgIndex].url);
        if(this.imgIndex == this.curtAlbum.arrImg.length - 1){
            $tips.show().text('最后一张图片').fadeOut(5000);
        }else if(this.imgIndex == 0){
            $tips.show().text('第一张图片').fadeOut(5000);
        }
    }

    attachEvent(){
        //前一张图片
        $('.btnPrev', this.$modalGallery).off('click').on('click', () => {
            this.imgIndex --;
            if(this.imgIndex < 0){
                this.imgIndex = this.curtAlbum.arrImg.length - 1;
            }
            this.show();
        });
        //后一张图片
        $('.btnNext', this.$modalGallery).off('click').on('click', () => {
            this.imgIndex ++;
            if(this.imgIndex > this.curtAlbum.arrImg.length - 1){
                this.imgIndex = 0;
            }
            this.show();
        });
        //关闭模态框
        $('.btnClose', this.$modalGallery).off('click').on('click', () => {
            this.$modalGallery.modal('hide');
        });
         //相片详细返回到相册
        $('#btnDelete', this.$modalGallery).off('click').on('click', () => {
            this.deleteImg();
        });
        $('#btnBack', this.$modalGallery).off('click').on('click', () => {
            this.$modalGallery.modal('hide');
            this.$modalAlbum.modal('show');
        });
    }

    deleteImg(){
        var url = this.curtAlbum.arrImg[this.imgIndex].url;
        var uid = this.curtAlbum.arrImg[this.imgIndex].uid;
        var type = this.curtAlbum.type;
        url = url.indexOf('http://images.rnbtech.com.hk') > -1 ? url.split('http://images.rnbtech.com.hk')[1] : url;
        var postDate = {
            'file_path[]':[url]
        }
        WebAPI.post('/oss/delete', postDate).done(rs => {
            var _this = this;
            this.curtAlbum.arrImg.splice(this.imgIndex, 1);
            if(this.curtAlbum.arrImg.length > 1) {this.show();}
            var dataAll = type==='maintain'?_this.maintainData.data.records:_this.repairData.data.records;
            for(var i = 0;i<dataAll.length;i++){
                var item = dataAll[i];
                var attachments =  type==='maintain'?item.attachment:item.attachments;
                if(attachments.length>0){
                    for(var j = 0;j<attachments.length;j++){
                        if(attachments[j].uid===uid){
                            attachments[j].url = 'http://images.rnbtech.com.hk/workflow/attachment/599a931ec0-矩形-28.png';
                        }
                    }
                }
            }
            if(type==='maintain'){
                new AssetStatePanel().renderMaintain(this.maintainData);
            }else{
                new AssetStatePanel().renderRepair(this.repairData);
            }
        }).fail(rs => {

        }).always(rs => {

        });
    }

    close(){
        //todo
        this.curtAlbum = null;
        this.repairData = null;
        this.imgIndex = null;
        this.$imgCurt = null;
        this.$modalGallery = null;
        this.$modalAlbum = null;
        this.$modalGallery = null;
        this.$imgCurt = null;
        this.maintainData = null;
    }
}