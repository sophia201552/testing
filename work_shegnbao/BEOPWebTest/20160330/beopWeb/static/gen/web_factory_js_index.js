/*! jQuery v2.1.4 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=a.document,m="2.1.4",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){return!n.isArray(a)&&a-parseFloat(a)+1>=0},isPlainObject:function(a){return"object"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!j.call(a.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=l.createElement("script"),b.text=a,l.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:g.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(e=d.call(arguments,2),f=function(){return a.apply(b||this,e.concat(d.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:k}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b="length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N=M.replace("w","w#"),O="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",P=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",Q=new RegExp(L+"+","g"),R=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),S=new RegExp("^"+L+"*,"+L+"*"),T=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),V=new RegExp(P),W=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,aa=/[+~]/,ba=/'|\\/g,ca=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),da=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ea=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fa){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,"string"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(ba,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+ra(o[l]);w=aa.test(a)&&pa(b.parentNode)||b,x=o.join(",")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener("unload",ea,!1):e.attachEvent&&e.attachEvent("onunload",ea)),p=!f(g),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(g.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\f]' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){var b=g.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",P)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?la(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ca,da),a[3]=(a[3]||a[4]||a[5]||"").replace(ca,da),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ca,da).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(Q," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(ca,da),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return W.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(ca,da).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:oa(function(){return[0]}),last:oa(function(a,b){return[b-1]}),eq:oa(function(a,b,c){return[0>c?c+b:c]}),even:oa(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:oa(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:oa(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:oa(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function qa(){}qa.prototype=d.filters=d.pseudos,d.setFilters=new qa,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function ra(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function sa(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function ta(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ua(a,b,c){for(var d=0,e=b.length;e>d;d++)ga(a,b[d],c);return c}function va(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wa(a,b,c,d,e,f){return d&&!d[u]&&(d=wa(d)),e&&!e[u]&&(e=wa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ua(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:va(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=va(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=va(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=sa(function(a){return a===b},h,!0),l=sa(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sa(ta(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wa(i>1&&ta(m),i>1&&ra(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&xa(a.slice(i,e)),f>e&&xa(a=a.slice(e)),f>e&&ra(a))}m.push(c)}return ta(m)}function ya(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=va(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&ga.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,ya(e,d)),f.selector=a}return f},i=ga.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ca,da),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ca,da),aa.test(j[0].type)&&pa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&ra(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,aa.test(a)&&pa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return g.call(b,a)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:l,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}return d=l.getElementById(c[2]),d&&d.parentNode&&(this.length=1,this[0]=d),this.context=l,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};A.prototype=n.fn,y=n(l);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?g.call(n(a),this[0]):g.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(C[a]||n.unique(e),B.test(a)&&e.reverse()),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return n.each(a.match(E)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(b=a.memory&&l,c=!0,g=e||0,e=0,f=h.length,d=!0;h&&f>g;g++)if(h[g].apply(l[0],l[1])===!1&&a.stopOnFalse){b=!1;break}d=!1,h&&(i?i.length&&j(i.shift()):b?h=[]:k.disable())},k={add:function(){if(h){var c=h.length;!function g(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&g(c)})}(arguments),d?f=h.length:b&&(e=c,j(b))}return this},remove:function(){return h&&n.each(arguments,function(a,b){var c;while((c=n.inArray(b,h,c))>-1)h.splice(c,1),d&&(f>=c&&f--,g>=c&&g--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],f=0,this},disable:function(){return h=i=b=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,b||k.disable(),this},locked:function(){return!i},fireWith:function(a,b){return!h||c&&!i||(b=b||[],b=[a,b.slice?b.slice():b],d?i.push(b):j(b)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!c}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(H.resolveWith(l,[n]),n.fn.triggerHandler&&(n(l).triggerHandler("ready"),n(l).off("ready"))))}});function I(){l.removeEventListener("DOMContentLoaded",I,!1),a.removeEventListener("load",I,!1),n.ready()}n.ready.promise=function(b){return H||(H=n.Deferred(),"complete"===l.readyState?setTimeout(n.ready):(l.addEventListener("DOMContentLoaded",I,!1),a.addEventListener("load",I,!1))),H.promise(b)},n.ready.promise();var J=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f};n.acceptData=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function K(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=n.expando+K.uid++}K.uid=1,K.accepts=n.acceptData,K.prototype={key:function(a){if(!K.accepts(a))return 0;var b={},c=a[this.expando];if(!c){c=K.uid++;try{b[this.expando]={value:c},Object.defineProperties(a,b)}catch(d){b[this.expando]=c,n.extend(a,b)}}return this.cache[c]||(this.cache[c]={}),c},set:function(a,b,c){var d,e=this.key(a),f=this.cache[e];if("string"==typeof b)f[b]=c;else if(n.isEmptyObject(f))n.extend(this.cache[e],b);else for(d in b)f[d]=b[d];return f},get:function(a,b){var c=this.cache[this.key(a)];return void 0===b?c:c[b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=this.key(a),g=this.cache[f];if(void 0===b)this.cache[f]={};else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in g?d=[b,e]:(d=e,d=d in g?[d]:d.match(E)||[])),c=d.length;while(c--)delete g[d[c]]}},hasData:function(a){return!n.isEmptyObject(this.cache[a[this.expando]]||{})},discard:function(a){a[this.expando]&&delete this.cache[a[this.expando]]}};var L=new K,M=new K,N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(O,"-$1").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}M.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return M.hasData(a)||L.hasData(a)},data:function(a,b,c){
return M.access(a,b,c)},removeData:function(a,b){M.remove(a,b)},_data:function(a,b,c){return L.access(a,b,c)},_removeData:function(a,b){L.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=M.get(f),1===f.nodeType&&!L.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));L.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){M.set(this,a)}):J(this,function(b){var c,d=n.camelCase(a);if(f&&void 0===b){if(c=M.get(f,a),void 0!==c)return c;if(c=M.get(f,d),void 0!==c)return c;if(c=P(f,d,void 0),void 0!==c)return c}else this.each(function(){var c=M.get(this,d);M.set(this,d,b),-1!==a.indexOf("-")&&void 0!==c&&M.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){M.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=L.get(a,b),c&&(!d||n.isArray(c)?d=L.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return L.get(a,c)||L.access(a,c,{empty:n.Callbacks("once memory").add(function(){L.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=L.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var Q=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,R=["Top","Right","Bottom","Left"],S=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},T=/^(?:checkbox|radio)$/i;!function(){var a=l.createDocumentFragment(),b=a.appendChild(l.createElement("div")),c=l.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var U="undefined";k.focusinBubbles="onfocusin"in a;var V=/^key/,W=/^(?:mouse|pointer|contextmenu)|click/,X=/^(?:focusinfocus|focusoutblur)$/,Y=/^([^.]*)(?:\.(.+)|)$/;function Z(){return!0}function $(){return!1}function _(){try{return l.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return typeof n!==U&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(E)||[""],j=b.length;while(j--)h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g,!1)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.hasData(a)&&L.get(a);if(r&&(i=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&(delete r.handle,L.remove(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,m,o,p=[d||l],q=j.call(b,"type")?b.type:b,r=j.call(b,"namespace")?b.namespace.split("."):[];if(g=h=d=d||l,3!==d.nodeType&&8!==d.nodeType&&!X.test(q+n.event.triggered)&&(q.indexOf(".")>=0&&(r=q.split("."),q=r.shift(),r.sort()),k=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=r.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},e||!o.trigger||o.trigger.apply(d,c)!==!1)){if(!e&&!o.noBubble&&!n.isWindow(d)){for(i=o.delegateType||q,X.test(i+q)||(g=g.parentNode);g;g=g.parentNode)p.push(g),h=g;h===(d.ownerDocument||l)&&p.push(h.defaultView||h.parentWindow||a)}f=0;while((g=p[f++])&&!b.isPropagationStopped())b.type=f>1?i:o.bindType||q,m=(L.get(g,"events")||{})[b.type]&&L.get(g,"handle"),m&&m.apply(g,c),m=k&&g[k],m&&m.apply&&n.acceptData(g)&&(b.result=m.apply(g,c),b.result===!1&&b.preventDefault());return b.type=q,e||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!n.acceptData(d)||k&&n.isFunction(d[q])&&!n.isWindow(d)&&(h=d[k],h&&(d[k]=null),n.event.triggered=q,d[q](),n.event.triggered=void 0,h&&(d[k]=h)),b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(L.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(g.namespace))&&(a.handleObj=g,a.data=g.data,e=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(a.result=e)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!==this;i=i.parentNode||this)if(i.disabled!==!0||"click"!==a.type){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>=0:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||l,d=c.documentElement,e=c.body,a.pageX=b.clientX+(d&&d.scrollLeft||e&&e.scrollLeft||0)-(d&&d.clientLeft||e&&e.clientLeft||0),a.pageY=b.clientY+(d&&d.scrollTop||e&&e.scrollTop||0)-(d&&d.clientTop||e&&e.clientTop||0)),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=W.test(e)?this.mouseHooks:V.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=l),3===a.target.nodeType&&(a.target=a.target.parentNode),g.filter?g.filter(a,f):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==_()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===_()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?Z:$):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:$,isPropagationStopped:$,isImmediatePropagationStopped:$,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=Z,a&&a.preventDefault&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=Z,a&&a.stopPropagation&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=Z,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=L.access(d,b);e||d.addEventListener(a,c,!0),L.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=L.access(d,b)-1;e?L.access(d,b,e):(d.removeEventListener(a,c,!0),L.remove(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(g in a)this.on(g,b,c,a[g],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=$;else if(!d)return this;return 1===e&&(f=d,d=function(a){return n().off(a),f.apply(this,arguments)},d.guid=f.guid||(f.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=$),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var aa=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ba=/<([\w:]+)/,ca=/<|&#?\w+;/,da=/<(?:script|style|link)/i,ea=/checked\s*(?:[^=]|=\s*.checked.)/i,fa=/^$|\/(?:java|ecma)script/i,ga=/^true\/(.*)/,ha=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ia={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ia.optgroup=ia.option,ia.tbody=ia.tfoot=ia.colgroup=ia.caption=ia.thead,ia.th=ia.td;function ja(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function ka(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function la(a){var b=ga.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function ma(a,b){for(var c=0,d=a.length;d>c;c++)L.set(a[c],"globalEval",!b||L.get(b[c],"globalEval"))}function na(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(L.hasData(a)&&(f=L.access(a),g=L.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}M.hasData(a)&&(h=M.access(a),i=n.extend({},h),M.set(b,i))}}function oa(a,b){var c=a.getElementsByTagName?a.getElementsByTagName(b||"*"):a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function pa(a,b){var c=b.nodeName.toLowerCase();"input"===c&&T.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}n.extend({clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=oa(h),f=oa(a),d=0,e=f.length;e>d;d++)pa(f[d],g[d]);if(b)if(c)for(f=f||oa(a),g=g||oa(h),d=0,e=f.length;e>d;d++)na(f[d],g[d]);else na(a,h);return g=oa(h,"script"),g.length>0&&ma(g,!i&&oa(a,"script")),h},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k=b.createDocumentFragment(),l=[],m=0,o=a.length;o>m;m++)if(e=a[m],e||0===e)if("object"===n.type(e))n.merge(l,e.nodeType?[e]:e);else if(ca.test(e)){f=f||k.appendChild(b.createElement("div")),g=(ba.exec(e)||["",""])[1].toLowerCase(),h=ia[g]||ia._default,f.innerHTML=h[1]+e.replace(aa,"<$1></$2>")+h[2],j=h[0];while(j--)f=f.lastChild;n.merge(l,f.childNodes),f=k.firstChild,f.textContent=""}else l.push(b.createTextNode(e));k.textContent="",m=0;while(e=l[m++])if((!d||-1===n.inArray(e,d))&&(i=n.contains(e.ownerDocument,e),f=oa(k.appendChild(e),"script"),i&&ma(f),c)){j=0;while(e=f[j++])fa.test(e.type||"")&&c.push(e)}return k},cleanData:function(a){for(var b,c,d,e,f=n.event.special,g=0;void 0!==(c=a[g]);g++){if(n.acceptData(c)&&(e=c[L.expando],e&&(b=L.cache[e]))){if(b.events)for(d in b.events)f[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);L.cache[e]&&delete L.cache[e]}delete M.cache[c[M.expando]]}}}),n.fn.extend({text:function(a){return J(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(oa(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&ma(oa(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(oa(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return J(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!da.test(a)&&!ia[(ba.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(aa,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(oa(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(oa(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,m=this,o=l-1,p=a[0],q=n.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&ea.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(c=n.buildFragment(a,this[0].ownerDocument,!1,this),d=c.firstChild,1===c.childNodes.length&&(c=d),d)){for(f=n.map(oa(c,"script"),ka),g=f.length;l>j;j++)h=c,j!==o&&(h=n.clone(h,!0,!0),g&&n.merge(f,oa(h,"script"))),b.call(this[j],h,j);if(g)for(i=f[f.length-1].ownerDocument,n.map(f,la),j=0;g>j;j++)h=f[j],fa.test(h.type||"")&&!L.access(h,"globalEval")&&n.contains(i,h)&&(h.src?n._evalUrl&&n._evalUrl(h.src):n.globalEval(h.textContent.replace(ha,"")))}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),g=e.length-1,h=0;g>=h;h++)c=h===g?this:this.clone(!0),n(e[h])[b](c),f.apply(d,c.get());return this.pushStack(d)}});var qa,ra={};function sa(b,c){var d,e=n(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:n.css(e[0],"display");return e.detach(),f}function ta(a){var b=l,c=ra[a];return c||(c=sa(a,b),"none"!==c&&c||(qa=(qa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=qa[0].contentDocument,b.write(),b.close(),c=sa(a,b),qa.detach()),ra[a]=c),c}var ua=/^margin/,va=new RegExp("^("+Q+")(?!px)[a-z%]+$","i"),wa=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)};function xa(a,b,c){var d,e,f,g,h=a.style;return c=c||wa(a),c&&(g=c.getPropertyValue(b)||c[b]),c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),va.test(g)&&ua.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function ya(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d=l.documentElement,e=l.createElement("div"),f=l.createElement("div");if(f.style){f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===f.style.backgroundClip,e.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",e.appendChild(f);function g(){f.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",f.innerHTML="",d.appendChild(e);var g=a.getComputedStyle(f,null);b="1%"!==g.top,c="4px"===g.width,d.removeChild(e)}a.getComputedStyle&&n.extend(k,{pixelPosition:function(){return g(),b},boxSizingReliable:function(){return null==c&&g(),c},reliableMarginRight:function(){var b,c=f.appendChild(l.createElement("div"));return c.style.cssText=f.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",f.style.width="1px",d.appendChild(e),b=!parseFloat(a.getComputedStyle(c,null).marginRight),d.removeChild(e),f.removeChild(c),b}})}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var za=/^(none|table(?!-c[ea]).+)/,Aa=new RegExp("^("+Q+")(.*)$","i"),Ba=new RegExp("^([+-])=("+Q+")","i"),Ca={position:"absolute",visibility:"hidden",display:"block"},Da={letterSpacing:"0",fontWeight:"400"},Ea=["Webkit","O","Moz","ms"];function Fa(a,b){if(b in a)return b;var c=b[0].toUpperCase()+b.slice(1),d=b,e=Ea.length;while(e--)if(b=Ea[e]+c,b in a)return b;return d}function Ga(a,b,c){var d=Aa.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Ha(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+R[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+R[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+R[f]+"Width",!0,e))):(g+=n.css(a,"padding"+R[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+R[f]+"Width",!0,e)));return g}function Ia(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=wa(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=xa(a,b,f),(0>e||null==e)&&(e=a.style[b]),va.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Ha(a,b,c||(g?"border":"content"),d,f)+"px"}function Ja(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=L.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&S(d)&&(f[g]=L.access(d,"olddisplay",ta(d.nodeName)))):(e=S(d),"none"===c&&e||L.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=xa(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Fa(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=Ba.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Fa(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=xa(a,b,d)),"normal"===e&&b in Da&&(e=Da[b]),""===c||c?(f=parseFloat(e),c===!0||n.isNumeric(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?za.test(n.css(a,"display"))&&0===a.offsetWidth?n.swap(a,Ca,function(){return Ia(a,b,d)}):Ia(a,b,d):void 0},set:function(a,c,d){var e=d&&wa(a);return Ga(a,c,d?Ha(a,b,d,"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),n.cssHooks.marginRight=ya(k.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},xa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+R[d]+b]=f[d]||f[d-2]||f[0];return e}},ua.test(a)||(n.cssHooks[a+b].set=Ga)}),n.fn.extend({css:function(a,b){return J(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=wa(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Ja(this,!0)},hide:function(){return Ja(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){S(this)?n(this).show():n(this).hide()})}});function Ka(a,b,c,d,e){return new Ka.prototype.init(a,b,c,d,e)}n.Tween=Ka,Ka.prototype={constructor:Ka,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ka.propHooks[this.prop];return a&&a.get?a.get(this):Ka.propHooks._default.get(this)},run:function(a){var b,c=Ka.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ka.propHooks._default.set(this),this}},Ka.prototype.init.prototype=Ka.prototype,Ka.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Ka.propHooks.scrollTop=Ka.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=Ka.prototype.init,n.fx.step={};var La,Ma,Na=/^(?:toggle|show|hide)$/,Oa=new RegExp("^(?:([+-])=|)("+Q+")([a-z%]*)$","i"),Pa=/queueHooks$/,Qa=[Va],Ra={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=Oa.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&Oa.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function Sa(){return setTimeout(function(){La=void 0}),La=n.now()}function Ta(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=R[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ua(a,b,c){for(var d,e=(Ra[b]||[]).concat(Ra["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Va(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&S(a),q=L.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?L.get(a,"olddisplay")||ta(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Na.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?ta(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=L.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;L.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ua(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function Wa(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function Xa(a,b,c){var d,e,f=0,g=Qa.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=La||Sa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:La||Sa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(Wa(k,j.opts.specialEasing);g>f;f++)if(d=Qa[f].call(j,a,k,j.opts))return d;return n.map(k,Ua,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(Xa,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],Ra[c]=Ra[c]||[],Ra[c].unshift(b)},prefilter:function(a,b){b?Qa.unshift(a):Qa.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(S).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=Xa(this,n.extend({},a),f);(e||L.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=L.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Pa.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=L.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Ta(b,!0),a,d,e)}}),n.each({slideDown:Ta("show"),slideUp:Ta("hide"),slideToggle:Ta("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(La=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),La=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ma||(Ma=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(Ma),Ma=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a=l.createElement("input"),b=l.createElement("select"),c=b.appendChild(l.createElement("option"));a.type="checkbox",k.checkOn=""!==a.value,k.optSelected=c.selected,b.disabled=!0,k.optDisabled=!c.disabled,a=l.createElement("input"),a.value="t",a.type="radio",k.radioValue="t"===a.value}();var Ya,Za,$a=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return J(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===U?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?Za:Ya)),
void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),Za={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=$a[b]||n.find.attr;$a[b]=function(a,b,d){var e,f;return d||(f=$a[b],$a[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,$a[b]=f),e}});var _a=/^(?:input|select|textarea|button)$/i;n.fn.extend({prop:function(a,b){return J(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){return a.hasAttribute("tabindex")||_a.test(a.nodeName)||a.href?a.tabIndex:-1}}}}),k.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var ab=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h="string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0===arguments.length||"string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===U||"boolean"===c)&&(this.className&&L.set(this,"__className__",this.className),this.className=this.className||a===!1?"":L.get(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ab," ").indexOf(b)>=0)return!0;return!1}});var bb=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(bb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(d.value,f)>=0)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},k.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var cb=n.now(),db=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(a){var b,c;if(!a||"string"!=typeof a)return null;try{c=new DOMParser,b=c.parseFromString(a,"text/xml")}catch(d){b=void 0}return(!b||b.getElementsByTagName("parsererror").length)&&n.error("Invalid XML: "+a),b};var eb=/#.*$/,fb=/([?&])_=[^&]*/,gb=/^(.*?):[ \t]*([^\r\n]*)$/gm,hb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ib=/^(?:GET|HEAD)$/,jb=/^\/\//,kb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,lb={},mb={},nb="*/".concat("*"),ob=a.location.href,pb=kb.exec(ob.toLowerCase())||[];function qb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function rb(a,b,c,d){var e={},f=a===mb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function sb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function tb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function ub(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ob,type:"GET",isLocal:hb.test(pb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":nb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?sb(sb(a,n.ajaxSettings),b):sb(n.ajaxSettings,a)},ajaxPrefilter:qb(lb),ajaxTransport:qb(mb),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!f){f={};while(b=gb.exec(e))f[b[1].toLowerCase()]=b[2]}b=f[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?e:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return c&&c.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||ob)+"").replace(eb,"").replace(jb,pb[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(h=kb.exec(k.url.toLowerCase()),k.crossDomain=!(!h||h[1]===pb[1]&&h[2]===pb[2]&&(h[3]||("http:"===h[1]?"80":"443"))===(pb[3]||("http:"===pb[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),rb(lb,k,b,v),2===t)return v;i=n.event&&k.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!ib.test(k.type),d=k.url,k.hasContent||(k.data&&(d=k.url+=(db.test(d)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=fb.test(d)?d.replace(fb,"$1_="+cb++):d+(db.test(d)?"&":"?")+"_="+cb++)),k.ifModified&&(n.lastModified[d]&&v.setRequestHeader("If-Modified-Since",n.lastModified[d]),n.etag[d]&&v.setRequestHeader("If-None-Match",n.etag[d])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+nb+"; q=0.01":""):k.accepts["*"]);for(j in k.headers)v.setRequestHeader(j,k.headers[j]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(j in{success:1,error:1,complete:1})v[j](k[j]);if(c=rb(mb,k,b,v)){v.readyState=1,i&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,c.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,f,h){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),c=void 0,e=h||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,f&&(u=tb(k,v,f)),u=ub(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[d]=w),w=v.getResponseHeader("etag"),w&&(n.etag[d]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,i&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),i&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var vb=/%20/g,wb=/\[\]$/,xb=/\r?\n/g,yb=/^(?:submit|button|image|reset|file)$/i,zb=/^(?:input|select|textarea|keygen)/i;function Ab(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||wb.test(a)?d(a,e):Ab(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Ab(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Ab(c,a[c],b,e);return d.join("&").replace(vb,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&zb.test(this.nodeName)&&!yb.test(a)&&(this.checked||!T.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(xb,"\r\n")}}):{name:b.name,value:c.replace(xb,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(a){}};var Bb=0,Cb={},Db={0:200,1223:204},Eb=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in Cb)Cb[a]()}),k.cors=!!Eb&&"withCredentials"in Eb,k.ajax=Eb=!!Eb,n.ajaxTransport(function(a){var b;return k.cors||Eb&&!a.crossDomain?{send:function(c,d){var e,f=a.xhr(),g=++Bb;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)f.setRequestHeader(e,c[e]);b=function(a){return function(){b&&(delete Cb[g],b=f.onload=f.onerror=null,"abort"===a?f.abort():"error"===a?d(f.status,f.statusText):d(Db[f.status]||f.status,f.statusText,"string"==typeof f.responseText?{text:f.responseText}:void 0,f.getAllResponseHeaders()))}},f.onload=b(),f.onerror=b("error"),b=Cb[g]=b("abort");try{f.send(a.hasContent&&a.data||null)}catch(h){if(b)throw h}},abort:function(){b&&b()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(d,e){b=n("<script>").prop({async:!0,charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&e("error"===a.type?404:200,a.type)}),l.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Fb=[],Gb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Fb.pop()||n.expando+"_"+cb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Gb.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Gb,"$1"+e):b.jsonp!==!1&&(b.url+=(db.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Fb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||l;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var Hb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Hb)return Hb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e,dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,f||[a.responseText,b,a])}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var Ib=a.document.documentElement;function Jb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(typeof d.getBoundingClientRect!==U&&(e=d.getBoundingClientRect()),c=Jb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||Ib;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ib})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(b,c){var d="pageYOffset"===c;n.fn[b]=function(e){return J(this,function(b,e,f){var g=Jb(b);return void 0===f?g?g[c]:b[e]:void(g?g.scrollTo(d?a.pageXOffset:f,d?f:a.pageYOffset):b[e]=f)},b,e,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=ya(k.pixelPosition,function(a,c){return c?(c=xa(a,b),va.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return J(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Kb=a.jQuery,Lb=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Lb),b&&a.jQuery===n&&(a.jQuery=Kb),n},typeof b===U&&(a.jQuery=a.$=n),n});

/**
 * Copyright (c) 2011-2014 Felix Gnass
 * Licensed under the MIT license
 */
(function (root, factory) {

    /* CommonJS */
    if (typeof exports == 'object') module.exports = factory()

        /* AMD module */
    else if (typeof define == 'function' && define.amd) define(factory)

        /* Browser global */
    else root.LoadingSpinner = factory()
}
(this, function () {
    "use strict";

    var prefixes = ['webkit', 'Moz', 'ms', 'O'] /* Vendor prefixes */
      , animations = {} /* Animation rules keyed by their name */
      , useCssAnimations; /* Whether to use CSS animations or setTimeout */

    /**
     * Utility function to create elements. If no tag name is given,
     * a DIV is created. Optionally properties can be passed.
     */
    function createEl(tag, prop) {
        var el = document.createElement(tag || 'div')
          , n;

        for (n in prop) el[n] = prop[n]
        return el
    }

    /**
     * Appends children and returns the parent.
     */
    function ins(parent /* child1, child2, ...*/) {
        for (var i = 1, n = arguments.length; i < n; i++)
            parent.appendChild(arguments[i])

        return parent
    }

    /**
     * Insert a new stylesheet to hold the @keyframe or VML rules.
     */
    var sheet = (function () {
        var el = createEl('style', { type: 'text/css' })
        ins(document.getElementsByTagName('head')[0], el)
        return el.sheet || el.styleSheet
    }())

    /**
     * Creates an opacity keyframe animation rule and returns its name.
     * Since most mobile Webkits have timing issues with animation-delay,
     * we create separate rules for each line/segment.
     */
    function addAnimation(alpha, trail, i, lines) {
        var name = ['opacity', trail, ~~(alpha * 100), i, lines].join('-')
          , start = 0.01 + i / lines * 100
          , z = Math.max(1 - (1 - alpha) / trail * (100 - start), alpha)
          , prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase()
          , pre = prefix && '-' + prefix + '-' || ''

        if (!animations[name]) {
            sheet.insertRule(
              '@' + pre + 'keyframes ' + name + '{' +
              '0%{opacity:' + z + '}' +
              start + '%{opacity:' + alpha + '}' +
              (start + 0.01) + '%{opacity:1}' +
              (start + trail) % 100 + '%{opacity:' + alpha + '}' +
              '100%{opacity:' + z + '}' +
              '}', sheet.cssRules.length)

            animations[name] = 1
        }

        return name
    }

    /**
     * Tries various vendor prefixes and returns the first supported property.
     */
    function vendor(el, prop) {
        var s = el.style
          , pp
          , i

        prop = prop.charAt(0).toUpperCase() + prop.slice(1)
        for (i = 0; i < prefixes.length; i++) {
            pp = prefixes[i] + prop
            if (s[pp] !== undefined) return pp
        }
        if (s[prop] !== undefined) return prop
    }

    /**
     * Sets multiple style properties at once.
     */
    function css(el, prop) {
        for (var n in prop)
            el.style[vendor(el, n) || n] = prop[n]

        return el
    }

    /**
     * Fills in default values.
     */
    function merge(obj) {
        for (var i = 1; i < arguments.length; i++) {
            var def = arguments[i]
            for (var n in def)
                if (obj[n] === undefined) obj[n] = def[n]
        }
        return obj
    }

    /**
     * Returns the absolute page-offset of the given element.
     */
    function pos(el) {
        var o = { x: el.offsetLeft, y: el.offsetTop }
        while ((el = el.offsetParent))
            o.x += el.offsetLeft, o.y += el.offsetTop

        return o
    }

    /**
     * Returns the line color from the given string or array.
     */
    function getColor(color, idx) {
        return typeof color == 'string' ? color : color[idx % color.length]
    }

    // Built-in defaults

    var defaults = {
        lines: 12,            // The number of lines to draw
        length: 10,            // The length of each line
        width: 5,             // The line thickness
        radius: 15,           // The radius of the inner circle
        rotate: 0,            // Rotation offset
        corners: 1,           // Roundness (0..1)
        color: '#000',        // #rgb or #rrggbb
        direction: 1,         // 1: clockwise, -1: counterclockwise
        speed: 1,             // Rounds per second
        trail: 100,           // Afterglow percentage
        opacity: 1 / 4,         // Opacity of the lines
        fps: 20,              // Frames per second when using setTimeout()
        zIndex: 1001,          // Use a high z-index by default
        className: 'spinner', // CSS class to assign to the element
        top: '50%',           // center vertically
        left: '50%',          // center horizontally
        position: 'absolute'  // element position
    }

    /** The constructor */
    function LoadingSpinner(o) {
        this.opts = merge(o || {}, LoadingSpinner.defaults, defaults)
    }

    // Global defaults that override the built-ins:
    LoadingSpinner.defaults = {}

    merge(LoadingSpinner.prototype, {

        /**
         * Adds the spinner to the given target element. If this instance is already
         * spinning, it is automatically removed from its previous target b calling
         * stop() internally.
         */
        spin: function (target) {
            this.stop()
            
            this.opts.target = target;
            var divMask = document.createElement("div");
            divMask.className = "spinnerMask";
            divMask.style.width = target.width;
            divMask.style.height = target.height;
            target.appendChild(divMask);
            this.divMask = divMask;

            var self = this
              , o = self.opts
              , el = self.el = css(createEl(0, { className: o.className }), { position: o.position, width: 0, zIndex: o.zIndex })
              , mid = o.radius + o.length + o.width

            css(el, {
                left: o.left,
                top: o.top
            })

            if (target) {
                target.insertBefore(el, target.firstChild || null)
            }

            el.setAttribute('role', 'progressbar')
            self.lines(el, self.opts)

            if (!useCssAnimations) {
                // No CSS animation support, use setTimeout() instead
                var i = 0
                  , start = (o.lines - 1) * (1 - o.direction) / 2
                  , alpha
                  , fps = o.fps
                  , f = fps / o.speed
                  , ostep = (1 - o.opacity) / (f * o.trail / 100)
                  , astep = f / o.lines

                ; (function anim() {
                    i++;
                    for (var j = 0; j < o.lines; j++) {
                        alpha = Math.max(1 - (i + (o.lines - j) * astep) % f * ostep, o.opacity)

                        self.opacity(el, j * o.direction + start, alpha, o)
                    }
                    self.timeout = self.el && setTimeout(anim, ~~(1000 / fps))
                })()
            }
            return self
        },

        /**
         * Stops and removes the LoadingSpinner.
         */
        stop: function () {
            var el = this.el
            if (el) {
                clearTimeout(this.timeout)
                if (el.parentNode) el.parentNode.removeChild(el)
                this.el = undefined
                if (this.divMask) {
                    if (this.divMask.parentNode) this.divMask.parentNode.removeChild(this.divMask)
                    this.el = undefined
                }
            }
            return this
        },

        /**
         * Internal method that draws the individual lines. Will be overwritten
         * in VML fallback mode below.
         */
        lines: function (el, o) {
            var i = 0
              , start = (o.lines - 1) * (1 - o.direction) / 2
              , seg

            function fill(color, shadow) {
                return css(createEl(), {
                    position: 'absolute',
                    width: (o.length + o.width) + 'px',
                    height: o.width + 'px',
                    background: color,
                    boxShadow: shadow,
                    transformOrigin: 'left',
                    transform: 'rotate(' + ~~(360 / o.lines * i + o.rotate) + 'deg) translate(' + o.radius + 'px' + ',0)',
                    borderRadius: (o.corners * o.width >> 1) + 'px'
                })
            }

            for (; i < o.lines; i++) {
                seg = css(createEl(), {
                    position: 'absolute',
                    top: 1 + ~(o.width / 2) + 'px',
                    transform: o.hwaccel ? 'translate3d(0,0,0)' : '',
                    opacity: o.opacity,
                    animation: useCssAnimations && addAnimation(o.opacity, o.trail, start + i * o.direction, o.lines) + ' ' + 1 / o.speed + 's linear infinite'
                })

                if (o.shadow) ins(seg, css(fill('#000', '0 0 4px ' + '#000'), { top: 2 + 'px' }))
                ins(el, ins(seg, fill(getColor(o.color, i), '0 0 1px rgba(0,0,0,.1)')))
            }
            return el
        },

        /**
         * Internal method that adjusts the opacity of a single line.
         * Will be overwritten in VML fallback mode below.
         */
        opacity: function (el, i, val) {
            if (i < el.childNodes.length) el.childNodes[i].style.opacity = val
        }

    })


    function initVML() {

        /* Utility function to create a VML tag */
        function vml(tag, attr) {
            return createEl('<' + tag + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', attr)
        }

        // No CSS transforms but VML support, add a CSS rule for VML elements:
        sheet.addRule('.spin-vml', 'behavior:url(#default#VML)')

        LoadingSpinner.prototype.lines = function (el, o) {
            var r = o.length + o.width
              , s = 2 * r

            function grp() {
                return css(
                  vml('group', {
                      coordsize: s + ' ' + s,
                      coordorigin: -r + ' ' + -r
                  }),
                  { width: s, height: s }
                )
            }

            var margin = -(o.width + o.length) * 2 + 'px'
              , g = css(grp(), { position: 'absolute', top: margin, left: margin })
              , i

            function seg(i, dx, filter) {
                ins(g,
                  ins(css(grp(), { rotation: 360 / o.lines * i + 'deg', left: ~~dx }),
                    ins(css(vml('roundrect', { arcsize: o.corners }), {
                        width: r,
                        height: o.width,
                        left: o.radius,
                        top: -o.width >> 1,
                        filter: filter
                    }),
                      vml('fill', { color: getColor(o.color, i), opacity: o.opacity }),
                      vml('stroke', { opacity: 0 }) // transparent stroke to fix color bleeding upon opacity change
                    )
                  )
                )
            }

            if (o.shadow)
                for (i = 1; i <= o.lines; i++)
                    seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)')

            for (i = 1; i <= o.lines; i++) seg(i)
            return ins(el, g)
        }

        LoadingSpinner.prototype.opacity = function (el, i, val, o) {
            var c = el.firstChild
            o = o.shadow && o.lines || 0
            if (c && i + o < c.childNodes.length) {
                c = c.childNodes[i + o]; c = c && c.firstChild; c = c && c.firstChild
                if (c) c.opacity = val
            }
        }
    }

    var probe = css(createEl('group'), { behavior: 'url(#default#VML)' })

    if (!vendor(probe, 'transform') && probe.adj) initVML()
    else useCssAnimations = vendor(probe, 'animation')

    return LoadingSpinner

}));

!function(){
    function t(){}
    function e(t){
        var e=U.call(arguments,1);
        return function(){
            return t.apply(this,e)
        }
    }
    function n(t,e){
        if(!e)throw new Error("prayer failed: "+t)
    }
    function i(t){
        n("a direction was passed",t===G||t===X)
    }
    function r(e,n,i,r){
        function s(){
            u=a;var t=c.selection?"$"+c.selection.latex()+"$":"";d.select(t)
        }
        function o(){
            h.detach(),l.focused=!1
        }
        var c,h,l,u,p,f,d,m=e.contents().detach();
        return i||e.addClass("mathquill-rendered-math"),
            n.jQ=e.attr(F,n.id),
            n.revert=function(){
            e.empty().unbind(".mathquill").removeClass("mathquill-rendered-math mathquill-editable mathquill-textbox").append(m)
            },
            c=n.cursor=I(n),
            n.renderLatex(m.text()),
            h=n.textarea=Z('<span class="textarea"><textarea></textarea></span>'),
            l=h.children(),
            n.selectionChanged=function(){
                u===a&&(u=setTimeout(s)),ue(e[0])
            },
            e.bind("selectstart.mathquill",function(t){
                t.target!==l[0]&&t.preventDefault(),t.stopPropagation()}
            ),
            f=c.blink,
            e.bind("mousedown.mathquill",function(n){
                function i(t){
                    return c.seek(Z(t.target),t.pageX,t.pageY),(c[G]!==p[G]||c.parent!==p.parent)&&c.selectFrom(p),!1
                }
                function s(t){
                    return delete t.target,i(t)
                }
                function o(t){
                    p=a,c.blink=f,c.selection||(r?c.show():h.detach()),e.unbind("mousemove",i),Z(t.target.ownerDocument).unbind("mousemove",s).unbind("mouseup",o)
                }
                return setTimeout(function(){
                    l.focus(),l.focused=!0
                }),
                    c.blink=t,
                    c.seek(Z(n.target),n.pageX,n.pageY),
                    p=Y(c.parent,c[G],c[X]),r||l.focused||e.prepend(h),e.mousemove(i),
                    Z(n.target.ownerDocument).mousemove(s).mouseup(o),
                    !1
            }),
            r?(d=K(l,{container:e,key:function(t,e){c.parent.bubble("onKey",t,e)},text:function(t){c.parent.bubble("onText",t)},cut:function(t){c.selection&&setTimeout(function(){c.prepareEdit(),c.parent.bubble("redraw")}),t.stopPropagation()},paste:function(t){t="$"===t.slice(0,1)&&"$"===t.slice(-1)?t.slice(1,-1):"\\text{"+t+"}",c.writeLatex(t).show()}}),e.prepend(h),e.addClass("mathquill-editable"),i&&e.addClass("mathquill-textbox"),l.focus(function(t){c.parent||c.insAtRightEnd(n),c.parent.jQ.addClass("hasCursor"),c.selection?(c.selection.jQ.removeClass("blur"),setTimeout(n.selectionChanged)):c.show(),t.stopPropagation()}).blur(function(t){c.hide().parent.blur(),c.selection&&c.selection.jQ.addClass("blur"),t.stopPropagation()}),void e.bind("focus.mathquill blur.mathquill",function(t){l.trigger(t)}).blur()):(d=K(l,{container:e}),e.bind("cut paste",!1).bind("copy",s).prepend('<span class="selectable">$'+n.latex()+"$</span>"),void l.blur(function(){c.clearSelection(),setTimeout(o)}))}function s(t,e,n){return H(q,{ctrlSeq:t,htmlTemplate:"<"+e+" "+n+">&0</"+e+">"})}var a,o,c,h,l,u,p,f,d,m,g,b,v,w,x,j,k,q,y,Q,C,S,L,D,O,E,A,R,T,z,$,B,I,_,W=window.jQuery,M="mathquill-command-id",F="mathquill-block-id",P=Math.min,U=(Math.max,[].slice),H=function(t,e,n){function i(t){return"object"==typeof t}function r(t){return"function"==typeof t}function s(){}return function a(o,c){function h(){var t=new l;return r(t.init)&&t.init.apply(t,arguments),t}function l(){}var u,p,f;return c===n&&(c=o,o=Object),h.Bare=l,u=s[t]=o[t],p=l[t]=h[t]=h.p=new s,p.constructor=h,h.mixin=function(e){return l[t]=h[t]=a(h,e)[t],h},(h.open=function(t){if(f={},r(t)?f=t.call(h,p,u,h,o):i(t)&&(f=t),i(f))for(var n in f)e.call(f,n)&&(p[n]=f[n]);return r(p.init)||(p.init=o),h})(c)}}("prototype",{}.hasOwnProperty),K=function(){function e(t){var e,i=t.which||t.keyCode,r=n[i],s=[];return t.ctrlKey&&s.push("Ctrl"),t.originalEvent&&t.originalEvent.metaKey&&s.push("Meta"),t.altKey&&s.push("Alt"),t.shiftKey&&s.push("Shift"),e=r||String.fromCharCode(i),s.length||r?(s.push(e),s.join("-")):e}var n={8:"Backspace",9:"Tab",10:"Enter",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Esc",32:"Spacebar",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"Left",38:"Up",39:"Right",40:"Down",45:"Insert",46:"Del",144:"NumLock"};return function(n,i){function r(t){j=t,clearTimeout(k),k=setTimeout(t)}function s(e){j(),j=t,clearTimeout(k),w.val(e),e&&w[0].select()}function a(){var t=w[0];return"selectionStart"in t?t.selectionStart!==t.selectionEnd:!1}function o(t){var e=w.val();w.val(""),e&&t(e)}function c(){g(e(q),q)}function h(t){q=t,y=null,c()}function l(t){q&&y&&c(),y=t,r(u)}function u(){a()||o(m)}function p(){q=y=null}function f(){w.focus(),r(d)}function d(){o(b)}var m,g,b,v,w,x,j,k,q=null,y=null;return i||(i={}),m=i.text||t,g=i.key||t,b=i.paste||t,v=i.cut||t,w=W(n),x=W(i.container||w),j=t,x.bind("keydown keypress input keyup focusout paste",function(){j()}),x.bind({keydown:h,keypress:l,focusout:p,cut:v,paste:f}),{select:s}}}(),N=H(function(t,e,i){function r(t,e){throw t=t?"'"+t+"'":"EOF","Parse Error: "+e+" at "+t}var s,a,o,c,h,l,u,p,f,d,m,g,b;t.init=function(t){this._=t},t.parse=function(t){function e(t,e){return e}return this.skip(b)._(t,e,r)},t.or=function(t){n("or is passed a parser",t instanceof i);var e=this;return i(function(n,i,r){function s(){return t._(n,i,r)}return e._(n,i,s)})},t.then=function(t){var e=this;return i(function(r,s,a){function o(e,r){var o=t instanceof i?t:t(r);return n("a parser is returned",o instanceof i),o._(e,s,a)}return e._(r,o,a)})},t.many=function(){var t=this;return i(function(e,n){function i(t,n){return e=t,s.push(n),!0}function r(){return!1}for(var s=[];t._(e,i,r););return n(e,s)})},t.times=function(t,e){arguments.length<2&&(e=t);var n=this;return i(function(i,r,s){function a(t,e){return u.push(e),i=t,!0}function o(t,e){return h=e,i=t,!1}function c(){return!1}var h,l,u=[],p=!0;for(l=0;t>l;l+=1)if(p=n._(i,a,o),!p)return s(i,h);for(;e>l&&p;l+=1)p=n._(i,a,c);return r(i,u)})},t.result=function(t){return this.then(o(t))},t.atMost=function(t){return this.times(0,t)},t.atLeast=function(t){var e=this;return e.times(t).then(function(t){return e.many().map(function(e){return t.concat(e)})})},t.map=function(t){return this.then(function(e){return o(t(e))})},t.skip=function(t){return this.then(function(e){return t.result(e)})},s=this.string=function(t){var e=t.length,n="expected '"+t+"'";return i(function(i,r,s){var a=i.slice(0,e);return a===t?r(i.slice(e),a):s(i,n)})},a=this.regex=function(t){n("regexp parser is anchored","^"===t.toString().charAt(1));var e="expected "+t;return i(function(n,i,r){var s,a=t.exec(n);return a?(s=a[0],i(n.slice(s.length),s)):r(n,e)})},o=i.succeed=function(t){return i(function(e,n){return n(e,t)})},c=i.fail=function(t){return i(function(e,n,i){return i(e,t)})},h=i.letter=a(/^[a-z]/i),l=i.letters=a(/^[a-z]*/i),u=i.digit=a(/^[0-9]/),p=i.digits=a(/^[0-9]*/),f=i.whitespace=a(/^\s+/),d=i.optWhitespace=a(/^\s*/),m=i.any=i(function(t,e,n){return t?e(t.slice(1),t.charAt(0)):n(t,"expected any character")}),g=i.all=i(function(t,e){return e("",t)}),b=i.eof=i(function(t,e,n){return t?n(t,"expected EOF"):e(t,t)})}),G=-1,X=1,Z=H(W,function(t){t.insDirOf=function(t,e){return t===G?this.insertBefore(e.first()):this.insertAfter(e.last())},t.insAtDirEnd=function(t,e){return t===G?this.prependTo(e):this.appendTo(e)}}),Y=H(function(t){t.parent=0,t[G]=0,t[X]=0,t.init=function(t,e,n){this.parent=t,this[G]=e,this[X]=n}}),J=H(function(t){t[G]=0,t[X]=0,t.parent=0,t.init=function(){this.ends={},this.ends[G]=0,this.ends[X]=0},t.children=function(){return V(this.ends[G],this.ends[X])},t.eachChild=function(t){return this.children().each(t)},t.foldChildren=function(t,e){return this.children().fold(t,e)},t.adopt=function(t,e,n){return V(this,this).adopt(t,e,n),this},t.disown=function(){return V(this,this).disown(),this}}),V=H(function(t){function e(t,e,i){n("a parent is always present",t),n("leftward is properly set up",function(){return e?e[X]===i&&e.parent===t:t.ends[G]===i}()),n("rightward is properly set up",function(){return i?i[G]===e&&i.parent===t:t.ends[X]===e}())}t.init=function(t,e){n("no half-empty fragments",!t==!e),this.ends={},t&&(n("left end node is passed to Fragment",t instanceof J),n("right end node is passed to Fragment",e instanceof J),n("leftEnd and rightEnd have the same parent",t.parent===e.parent),this.ends[G]=t,this.ends[X]=e)},t.adopt=function(t,n,i){var r,s,a;return e(t,n,i),r=this,r.disowned=!1,(s=r.ends[G])?(a=r.ends[X],n||(t.ends[G]=s),i?i[G]=a:t.ends[X]=a,r.ends[X][X]=i,r.each(function(e){e[G]=n,e.parent=t,n&&(n[X]=e),n=e}),r):this},t.disown=function(){var t,n,i=this,r=i.ends[G];return!r||i.disowned?i:(i.disowned=!0,t=i.ends[X],n=r.parent,e(n,r[G],r),e(n,t,t[X]),r[G]?r[G][X]=t[X]:n.ends[G]=t[X],t[X]?t[X][G]=r[G]:n.ends[X]=r[G],i)},t.each=function(t){var e=this,n=e.ends[G];if(!n)return e;for(;n!==e.ends[X][X]&&t.call(e,n)!==!1;n=n[X]);return e},t.fold=function(t,e){return this.each(function(n){t=e.call(this,t,n)}),t}}),te=function(){var t=0;return function(){return t+=1}}(),ee=H(J,function(t,e){t.init=function(){e.init.call(this),this.id=te(),ee[this.id]=this},t.toString=function(){return"[MathElement "+this.id+"]"},t.bubble=function(t){var e,n,i=U.call(arguments,1);for(e=this;e&&(n=e[t]&&e[t].apply(e,i),n!==!1);e=e.parent);return this},t.postOrder=function(t){var e,n=U.call(arguments,1);"string"==typeof t&&(e=t,t=function(t){e in t&&t[e].apply(t,n)}),function i(e){e.eachChild(i),t(e)}(this)},t.jQ=Z(),t.jQadd=function(t){this.jQ=this.jQ.add(t)},this.jQize=function(t){var e=Z(t);return e.find("*").andSelf().each(function(){var t=Z(this),e=t.attr("mathquill-command-id"),n=t.attr("mathquill-block-id");e&&ee[e].jQadd(t),n&&ee[n].jQadd(t)}),e},t.finalizeInsert=function(){var t=this;t.postOrder("finalizeTree"),t.postOrder("blur"),t.postOrder("respace"),t[X].respace&&t[X].respace(),t[G].respace&&t[G].respace(),t.postOrder("redraw"),t.bubble("redraw")}}),ne=H(ee,function(e,i){e.init=function(t,e,n){var r=this;i.init.call(r),r.ctrlSeq||(r.ctrlSeq=t),e&&(r.htmlTemplate=e),n&&(r.textTemplate=n)},e.replaces=function(t){t.disown(),this.replacedFragment=t},e.isEmpty=function(){return this.foldChildren(!0,function(t,e){return t&&e.isEmpty()})},e.parser=function(){var t=B.block,e=this;return t.times(e.numBlocks()).map(function(t){e.blocks=t;for(var n=0;n<t.length;n+=1)t[n].adopt(e,e.ends[X],0);return e})},e.createLeftOf=function(t){var e=this,n=e.replacedFragment;e.createBlocks(),ee.jQize(e.html()),n&&(n.adopt(e.ends[G],0,0),n.jQ.appendTo(e.ends[G].jQ)),t.jQ.before(e.jQ),t[G]=e.adopt(t.parent,t[G],t[X]),e.finalizeInsert(t),e.placeCursor(t)},e.createBlocks=function(){var t,e,n=this,i=n.numBlocks(),r=n.blocks=Array(i);for(t=0;i>t;t+=1)e=r[t]=re(),e.adopt(n,n.ends[X],0)},e.respace=t,e.placeCursor=function(t){t.insAtRightEnd(this.foldChildren(this.ends[G],function(t,e){return t.isEmpty()?t:e}))},e.remove=function(){return this.disown(),this.jQ.remove(),this.postOrder(function(t){delete ee[t.id]}),this},e.numBlocks=function(){var t=this.htmlTemplate.match(/&\d+/g);return t?t.length:0},e.html=function(){var t,e,i,r=this,s=r.blocks,a=" mathquill-command-id="+r.id,o=r.htmlTemplate.match(/<[^<>]+>|[^<>]+/g);for(n("no unmatched angle brackets",o.join("")===this.htmlTemplate),t=0,e=o[0];e;t+=1,e=o[t])if("/>"===e.slice(-2))o[t]=e.slice(0,-2)+a+"/>";else if("<"===e.charAt(0)){n("not an unmatched top-level close tag","/"!==e.charAt(1)),o[t]=e.slice(0,-1)+a+">",i=1;do t+=1,e=o[t],n("no missing close tags",e),"</"===e.slice(0,2)?i-=1:"<"===e.charAt(0)&&"/>"!==e.slice(-2)&&(i+=1);while(i>0)}return o.join("").replace(/>&(\d+)/g,function(t,e){return" mathquill-block-id="+s[e].id+">"+s[e].join("html")})},e.latex=function(){return this.foldChildren(this.ctrlSeq,function(t,e){return t+"{"+(e.latex()||" ")+"}"})},e.textTemplate=[""],e.text=function(){var t=this,e=0;return t.foldChildren(t.textTemplate[e],function(n,i){e+=1;var r=i.text();return n&&"("===t.textTemplate[e]&&"("===r[0]&&")"===r.slice(-1)?n+r.slice(1,-1)+t.textTemplate[e]:n+i.text()+(t.textTemplate[e]||"")})}}),ie=H(ne,function(e,n){e.init=function(t,e,i){i||(i=t&&t.length>1?t.slice(1):t),n.init.call(this,t,e,[i])},e.parser=function(){return N.succeed(this)},e.numBlocks=function(){return 0},e.replaces=function(t){t.remove()},e.createBlocks=t,e.latex=function(){return this.ctrlSeq},e.text=function(){return this.textTemplate},e.placeCursor=t,e.isEmpty=function(){return!0}}),re=H(ee,function(t){t.join=function(t){return this.foldChildren("",function(e,n){return e+n[t]()})},t.latex=function(){return this.join("latex")},t.text=function(){return this.ends[G]===this.ends[X]?this.ends[G].text():"("+this.join("text")+")"},t.isEmpty=function(){return 0===this.ends[G]&&0===this.ends[X]},t.write=function(t,e,n){var i;i=e.match(/^[a-eg-zA-Z]$/)?D(e):(i=he[e]||le[e])?i(e):O(e),n&&i.replaces(n),i.createLeftOf(t)},t.focus=function(){return this.jQ.addClass("hasCursor"),this.jQ.removeClass("empty"),this},t.blur=function(){return this.jQ.removeClass("hasCursor"),this.isEmpty()&&this.jQ.addClass("empty"),this}}),se=H(V,function(t,e){t.init=function(t,n){e.init.call(this,t,n||t),this.jQ=this.fold(Z(),function(t,e){return e.jQ.add(t)})},t.latex=function(){return this.fold("",function(t,e){return t+e.latex()})},t.remove=function(){return this.jQ.remove(),this.each(function(t){t.postOrder(function(t){delete ee[t.id]})}),this.disown()}}),ae=H(re,function(t,e){t.latex=function(){return e.latex.call(this).replace(/(\\[a-z]+) (?![a-z])/gi,"$1")},t.text=function(){return this.foldChildren("",function(t,e){return t+e.text()})},t.renderLatex=function(t){var e=this.jQ;e.children().slice(1).remove(),this.ends[G]=this.ends[X]=0,delete this.cursor.selection,this.cursor.insAtRightEnd(this).writeLatex(t)},t.onKey=function(t,e){var n;switch(t){case"Ctrl-Shift-Backspace":case"Ctrl-Backspace":for(;this.cursor[G]||this.cursor.selection;)this.cursor.backspace();break;case"Shift-Backspace":case"Backspace":this.cursor.backspace();break;case"Esc":case"Tab":case"Spacebar":if(n=this.cursor.parent,n===this.cursor.root)return void("Spacebar"===t&&e.preventDefault());this.cursor.prepareMove(),n[X]?this.cursor.insAtLeftEnd(n[X]):this.cursor.insRightOf(n.parent);break;case"Shift-Tab":case"Shift-Esc":case"Shift-Spacebar":if(n=this.cursor.parent,n===this.cursor.root)return void("Shift-Spacebar"===t&&e.preventDefault());this.cursor.prepareMove(),n[G]?this.cursor.insAtRightEnd(n[G]):this.cursor.insLeftOf(n.parent);break;case"Enter":break;case"End":this.cursor.prepareMove().insAtRightEnd(this.cursor.parent);break;case"Ctrl-End":this.cursor.prepareMove().insAtRightEnd(this);break;case"Shift-End":for(;this.cursor[X];)this.cursor.selectRight();break;case"Ctrl-Shift-End":for(;this.cursor[X]||this.cursor.parent!==this;)this.cursor.selectRight();break;case"Home":this.cursor.prepareMove().insAtLeftEnd(this.cursor.parent);break;case"Ctrl-Home":this.cursor.prepareMove().insAtLeftEnd(this);break;case"Shift-Home":for(;this.cursor[G];)this.cursor.selectLeft();break;case"Ctrl-Shift-Home":for(;this.cursor[G]||this.cursor.parent!==this;)this.cursor.selectLeft();break;case"Left":this.cursor.moveLeft();break;case"Shift-Left":this.cursor.selectLeft();break;case"Ctrl-Left":break;case"Right":this.cursor.moveRight();break;case"Shift-Right":this.cursor.selectRight();break;case"Ctrl-Right":break;case"Up":this.cursor.moveUp();break;case"Down":this.cursor.moveDown();break;case"Shift-Up":if(this.cursor[G])for(;this.cursor[G];)this.cursor.selectLeft();else this.cursor.selectLeft();case"Shift-Down":if(this.cursor[X])for(;this.cursor[X];)this.cursor.selectRight();else this.cursor.selectRight();case"Ctrl-Up":break;case"Ctrl-Down":break;case"Ctrl-Shift-Del":case"Ctrl-Del":for(;this.cursor[X]||this.cursor.selection;)this.cursor.deleteForward();break;case"Shift-Del":case"Del":this.cursor.deleteForward();break;case"Meta-A":case"Ctrl-A":if(this!==this.cursor.root)return;for(this.cursor.prepareMove().insAtRightEnd(this);this.cursor[G];)this.cursor.selectLeft();break;default:return!1}return e.preventDefault(),!1},t.onText=function(t){return this.cursor.write(t),!1}}),oe=H(ne,function(t,e){t.init=function(t){e.init.call(this,"$"),this.cursor=t},t.htmlTemplate='<span class="mathquill-rendered-math">&0</span>',t.createBlocks=function(){this.ends[G]=this.ends[X]=ae(),this.blocks=[this.ends[G]],this.ends[G].parent=this,this.ends[G].cursor=this.cursor,this.ends[G].write=function(t,e,n){"$"!==e?re.prototype.write.call(this,t,e,n):this.isEmpty()?(t.insRightOf(this.parent).backspace().show(),O("\\$","$").createLeftOf(t)):t[X]?t[G]?re.prototype.write.call(this,t,e,n):t.insLeftOf(this.parent):t.insRightOf(this.parent)}},t.latex=function(){return"$"+this.ends[G].latex()+"$"}}),ce=H(re,function(t){t.renderLatex=function(t){var e,n,i,r,s,a,o,c,h,l,u,p=this,f=p.cursor;if(p.jQ.children().slice(1).remove(),p.ends[G]=p.ends[X]=0,delete f.selection,f.show().insAtRightEnd(p),e=N.regex,n=N.string,i=N.eof,r=N.all,s=n("$").then(B).skip(n("$").or(i)).map(function(t){var e,n=oe(f);return n.createBlocks(),e=n.ends[G],t.children().adopt(e,0,0),n}),a=n("\\$").result("$"),o=a.or(e(/^[^$]/)).map(O),c=s.or(o).many(),h=c.skip(i).or(r.result(!1)).parse(t)){for(l=0;l<h.length;l+=1)h[l].adopt(p,p.ends[X],0);u=p.join("html"),ee.jQize(u).appendTo(p.jQ),this.finalizeInsert()}},t.onKey=function(t){"Spacebar"!==t&&"Shift-Spacebar"!==t&&ae.prototype.onKey.apply(this,arguments)},t.onText=ae.prototype.onText,t.write=function(t,e,n){if(n&&n.remove(),"$"===e)oe(t).createLeftOf(t);else{var i;"<"===e?i="&lt;":">"===e&&(i="&gt;"),O(e,i).createLeftOf(t)}}}),he={},le={},ue=t,pe=document.createElement("div"),fe=pe.style,de={transform:1,WebkitTransform:1,MozTransform:1,OTransform:1,msTransform:1};for(h in de)if(h in fe){c=h;break}c?o=function(t,e,n){t.css(c,"scale("+e+","+n+")")}:"filter"in fe?(ue=function(t){t.className=t.className},o=function(t,e,n){function i(){t.css("marginRight",(r.width()-1)*(e-1)/e+"px")}var r,s;e/=1+(n-1)/2,t.css("fontSize",n+"em"),t.hasClass("matrixed-container")||t.addClass("matrixed-container").wrapInner('<span class="matrixed"></span>'),r=t.children().css("filter","progid:DXImageTransform.Microsoft.Matrix(M11="+e+",SizingMethod='auto expand')"),i(),s=setInterval(i),Z(window).load(function(){clearTimeout(s),i()})}):o=function(t,e,n){t.css("fontSize",n+"em")},l=H(ne,function(t,e){t.init=function(t,n,i){e.init.call(this,t,"<"+n+" "+i+">&0</"+n+">")}}),le.mathrm=e(l,"\\mathrm","span",'class="roman font"'),le.mathit=e(l,"\\mathit","i",'class="font"'),le.mathbf=e(l,"\\mathbf","b",'class="font"'),le.mathsf=e(l,"\\mathsf","span",'class="sans-serif font"'),le.mathtt=e(l,"\\mathtt","span",'class="monospace font"'),le.underline=e(l,"\\underline","span",'class="non-leaf underline"'),le.overline=le.bar=e(l,"\\overline","span",'class="non-leaf overline"'),u=H(ne,function(t,e){t.init=function(t,n,i){e.init.call(this,t,"<"+n+' class="non-leaf">&0</'+n+">",[i])},t.finalizeTree=function(){function t(t){var e=this.parent,n=t;do{if(n[X])return t.insLeftOf(e),!1;n=n.parent.parent}while(n!==e);return t.insRightOf(e),!1}n("SupSub is only _ and ^","^"===this.ctrlSeq||"_"===this.ctrlSeq),"_"===this.ctrlSeq?(this.down=this.ends[G],this.ends[G].up=t):(this.up=this.ends[G],this.ends[G].down=t)},t.latex=function(){var t=this.ends[G].latex();return 1===t.length?this.ctrlSeq+t:this.ctrlSeq+"{"+(t||" ")+"}"},t.redraw=function(){this[G]&&this[G].respace(),this[G]instanceof u||(this.respace(),!this[X]||this[X]instanceof u||this[X].respace())},t.respace=function(){if("\\int "===this[G].ctrlSeq||this[G]instanceof u&&this[G].ctrlSeq!=this.ctrlSeq&&this[G][G]&&"\\int "===this[G][G].ctrlSeq?this.limit||(this.limit=!0,this.jQ.addClass("limit")):this.limit&&(this.limit=!1,this.jQ.removeClass("limit")),this.respaced=this[G]instanceof u&&this[G].ctrlSeq!=this.ctrlSeq&&!this[G].respaced,this.respaced){var t=+this.jQ.css("fontSize").slice(0,-2),e=this[G].jQ.outerWidth(),n=this.jQ.outerWidth();this.jQ.css({left:(this.limit&&"_"===this.ctrlSeq?-.25:0)-e/t+"em",marginRight:.1-P(n,e)/t+"em"})}else this.jQ.css(this.limit&&"_"===this.ctrlSeq?{left:"-.25em",marginRight:""}:{left:"",marginRight:""});return this[X]instanceof u&&this[X].respace(),this}}),le.subscript=le._=e(u,"_","sub","_"),le.superscript=le.supscript=le["^"]=e(u,"^","sup","**"),p=le.frac=le.dfrac=le.cfrac=le.fraction=H(ne,function(t){t.ctrlSeq="\\frac",t.htmlTemplate='<span class="fraction non-leaf"><span class="numerator">&0</span><span class="denominator">&1</span><span style="display:inline-block;width:0">&nbsp;</span></span>',t.textTemplate=["(","/",")"],t.finalizeTree=function(){this.up=this.ends[X].up=this.ends[G],this.down=this.ends[G].down=this.ends[X]}}),f=le.over=he["/"]=H(p,function(t,e){t.createLeftOf=function(t){if(!this.replacedFragment){for(var n=t[G];n&&!(n instanceof R||n instanceof q||n instanceof z||/^[,;:]$/.test(n.ctrlSeq));)n=n[G];n instanceof z&&n[X]instanceof u&&(n=n[X],n[X]instanceof u&&n[X].ctrlSeq!=n.ctrlSeq&&(n=n[X])),n!==t[G]&&(this.replaces(se(n[X]||t.parent.ends[G],t[G])),t[G]=n)}e.createLeftOf.call(this,t)}}),d=le.sqrt=le["√"]=H(ne,function(t,e){t.ctrlSeq="\\sqrt",t.htmlTemplate='<span class="non-leaf"><span class="scaled sqrt-prefix">&radic;</span><span class="non-leaf sqrt-stem">&0</span></span>',t.textTemplate=["sqrt(",")"],t.parser=function(){return B.optBlock.then(function(t){return B.block.map(function(e){var n=g();return n.blocks=[t,e],t.adopt(n,0,0),e.adopt(n,t,0),n})}).or(e.parser.call(this))},t.redraw=function(){var t=this.ends[X].jQ;o(t.prev(),1,t.innerHeight()/+t.css("fontSize").slice(0,-2)-.1)}}),m=le.vec=H(ne,function(t){t.ctrlSeq="\\vec",t.htmlTemplate='<span class="non-leaf"><span class="vector-prefix">&rarr;</span><span class="vector-stem">&0</span></span>',t.textTemplate=["vec(",")"]}),g=le.nthroot=H(d,function(t){t.htmlTemplate='<sup class="nthroot non-leaf">&0</sup><span class="scaled"><span class="sqrt-prefix scaled">&radic;</span><span class="sqrt-stem non-leaf">&1</span></span>',t.textTemplate=["sqrt[","](",")"],t.latex=function(){return"\\sqrt["+this.ends[G].latex()+"]{"+this.ends[X].latex()+"}"}}),b=H(ne,function(t,e){t.init=function(t,n,i,r){e.init.call(this,"\\left"+i,'<span class="non-leaf"><span class="scaled paren">'+t+'</span><span class="non-leaf">&0</span><span class="scaled paren">'+n+"</span></span>",[t,n]),this.end="\\right"+r},t.jQadd=function(){e.jQadd.apply(this,arguments);var t=this.jQ;this.bracketjQs=t.children(":first").add(t.children(":last"))},t.latex=function(){return this.ctrlSeq+this.ends[G].latex()+this.end},t.redraw=function(){var t=this.ends[G].jQ,e=t.outerHeight()/+t.css("fontSize").slice(0,-2);o(this.bracketjQs,P(1+.2*(e-1),1.2),1.05*e)}}),le.left=H(ne,function(t){t.parser=function(){var t=N.regex,e=N.string,n=N.succeed,i=N.optWhitespace;return i.then(t(/^(?:[([|]|\\\{)/)).then(function(r){"\\"===r.charAt(0)&&(r=r.slice(1));var s=he[r]();return B.map(function(t){s.blocks=[t],t.adopt(s,0,0)}).then(e("\\right")).skip(i).then(t(/^(?:[\])|]|\\\})/)).then(function(t){return t.slice(-1)!==s.end.slice(-1)?N.fail("open doesn't match close"):n(s)})})}}),le.right=H(ne,function(t){t.parser=function(){return N.fail("unmatched \\right")}}),le.lbrace=he["{"]=e(b,"{","}","\\{","\\}"),le.langle=le.lang=e(b,"&lang;","&rang;","\\langle ","\\rangle "),v=H(b,function(t,e){t.createLeftOf=function(t){t[X]||!t.parent.parent||t.parent.parent.end!==this.end||this.replacedFragment?e.createLeftOf.call(this,t):t.insRightOf(t.parent.parent)},t.placeCursor=function(t){this.ends[G].blur(),t.insRightOf(this)}}),le.rbrace=he["}"]=e(v,"{","}","\\{","\\}"),le.rangle=le.rang=e(v,"&lang;","&rang;","\\langle ","\\rangle "),w=function(t,e){t.init=function(t,n){e.init.call(this,t,n,t,n)}},x=H(b,w),le.lparen=he["("]=e(x,"(",")"),le.lbrack=le.lbracket=he["["]=e(x,"[","]"),j=H(v,w),le.rparen=he[")"]=e(j,"(",")"),le.rbrack=le.rbracket=he["]"]=e(j,"[","]"),k=le.lpipe=le.rpipe=he["|"]=H(x,function(t,e){t.init=function(){e.init.call(this,"|","|")},t.createLeftOf=v.prototype.createLeftOf}),q=he.$=le.text=le.textnormal=le.textrm=le.textup=le.textmd=H(ne,function(t,e){t.ctrlSeq="\\text",t.htmlTemplate='<span class="text">&0</span>',t.replaces=function(t){t instanceof se?this.replacedText=t.remove().jQ.text():"string"==typeof t&&(this.replacedText=t)},t.textTemplate=['"','"'],t.parser=function(){var t=this,e=N.string,n=N.regex,i=N.optWhitespace;return i.then(e("{")).then(n(/^[^}]*/)).skip(e("}")).map(function(e){var n,i,r;for(t.createBlocks(),n=t.ends[G],i=0;i<e.length;i+=1)r=O(e.charAt(i)),r.adopt(n,n.ends[X],0);return t})},t.createBlocks=function(){this.ends[G]=this.ends[X]=y(),this.blocks=[this.ends[G]],this.ends[G].parent=this},t.finalizeInsert=function(){this.ends[G].blur=function(){return delete this.blur,this},e.finalizeInsert.call(this)},t.createLeftOf=function(t){if(e.createLeftOf.call(this,this.cursor=t),this.replacedText)for(var n=0;n<this.replacedText.length;n+=1)this.ends[G].write(t,this.replacedText.charAt(n))}}),y=H(re,function(t,e){t.onKey=function(t){return"Spacebar"===t||"Shift-Spacebar"===t?!1:void 0},t.deleteOutOf=function(t,e){this.isEmpty()&&e.insRightOf(this.parent)},t.write=function(t,e,n){var i,r;return n&&n.remove(),"$"!==e?("<"===e?i="&lt;":">"===e&&(i="&gt;"),O(e,i).createLeftOf(t)):this.isEmpty()?(t.insRightOf(this.parent).backspace(),O("\\$","$").createLeftOf(t)):t[X]?t[G]?(r=q(),r.replaces(se(t[X],this.ends[X])),t.insRightOf(this.parent),r.adopt=function(){delete this.adopt,this.adopt.apply(this,arguments),this[G]=0},r.createLeftOf(t),r[G]=this.parent,t.insLeftOf(r)):t.insLeftOf(this.parent):t.insRightOf(this.parent),!1},t.blur=function(){if(this.jQ.removeClass("hasCursor"),this.isEmpty()){var t=this.parent,e=t.cursor;e.parent===this?this.jQ.addClass("empty"):(e.hide(),t.remove(),e[X]===t?e[X]=t[X]:e[G]===t&&(e[G]=t[G]),e.show().parent.bubble("redraw"))}return this},t.focus=function(){var t,n,i,r;return e.focus.call(this),t=this.parent,t[X].ctrlSeq===t.ctrlSeq?(n=this,i=t.cursor,r=t[X].ends[G],r.eachChild(function(t){t.parent=n,t.jQ.appendTo(n.jQ)}),this.ends[X]?this.ends[X][X]=r.ends[G]:this.ends[G]=r.ends[G],r.ends[G][G]=this.ends[X],this.ends[X]=r.ends[X],r.parent.remove(),i[G]?i.insRightOf(i[G]):i.insAtLeftEnd(this),i.parent.bubble("redraw")):t[G].ctrlSeq===t.ctrlSeq&&(i=t.cursor,i[G]?t[G].ends[G].focus():i.insAtRightEnd(t[G].ends[G])),this}}),le.em=le.italic=le.italics=le.emph=le.textit=le.textsl=s("\\textit","i",'class="text"'),le.strong=le.bold=le.textbf=s("\\textbf","b",'class="text"'),le.sf=le.textsf=s("\\textsf","span",'class="sans-serif text"'),le.tt=le.texttt=s("\\texttt","span",'class="monospace text"'),le.textsc=s("\\textsc","span",'style="font-variant:small-caps" class="text"'),le.uppercase=s("\\uppercase","span",'style="text-transform:uppercase" class="text"'),le.lowercase=s("\\lowercase","span",'style="text-transform:lowercase" class="text"'),Q=he["\\"]=H(ne,function(t,e){t.ctrlSeq="\\",t.replaces=function(t){this._replacedFragment=t.disown(),this.isEmpty=function(){return!1}},t.htmlTemplate='<span class="latex-command-input non-leaf">\\<span>&0</span></span>',t.textTemplate=["\\"],t.createBlocks=function(){e.createBlocks.call(this),this.ends[G].focus=function(){return this.parent.jQ.addClass("hasCursor"),this.isEmpty()&&this.parent.jQ.removeClass("empty"),this},this.ends[G].blur=function(){return this.parent.jQ.removeClass("hasCursor"),this.isEmpty()&&this.parent.jQ.addClass("empty"),this}},t.createLeftOf=function(t){if(e.createLeftOf.call(this,t),this.cursor=t.insAtRightEnd(this.ends[G]),this._replacedFragment){var n=this.jQ[0];this.jQ=this._replacedFragment.jQ.addClass("blur").bind("mousedown mousemove",function(t){return Z(t.target=n).trigger(t),!1}).insertBefore(this.jQ).add(this.jQ)}this.ends[G].write=function(t,e,n){n&&n.remove(),e.match(/[a-z]/i)?O(e).createLeftOf(t):(this.parent.renderCommand(),"\\"===e&&this.isEmpty()||this.parent.parent.write(t,e))}},t.latex=function(){return"\\"+this.ends[G].latex()+" "},t.onKey=function(t,e){return"Tab"===t||"Enter"===t||"Spacebar"===t?(this.renderCommand(),e.preventDefault(),!1):void 0},t.renderCommand=function(){this.jQ=this.jQ.last(),this.remove(),this[X]?this.cursor.insLeftOf(this[X]):this.cursor.insAtRightEnd(this.parent);var t=this.ends[G].latex();t||(t="backslash"),this.cursor.insertCmd(t,this._replacedFragment)}}),C=le.binom=le.binomial=H(ne,function(t){t.ctrlSeq="\\binom",t.htmlTemplate='<span class="paren scaled">(</span><span class="non-leaf"><span class="array non-leaf"><span>&0</span><span>&1</span></span></span><span class="paren scaled">)</span>',t.textTemplate=["choose(",",",")"],t.redraw=function(){var t=this.jQ.eq(1),e=t.outerHeight()/+t.css("fontSize").slice(0,-2),n=this.jQ.filter(".paren");o(n,P(1+.2*(e-1),1.2),1.05*e)}}),S=le.choose=H(C,function(t){t.createLeftOf=f.prototype.createLeftOf}),L=le.vector=H(ne,function(t,e){t.ctrlSeq="\\vector",t.htmlTemplate='<span class="array"><span>&0</span></span>',t.latex=function(){return"\\begin{matrix}"+this.foldChildren([],function(t,e){return t.push(e.latex()),t}).join("\\\\")+"\\end{matrix}"},t.text=function(){return"["+this.foldChildren([],function(t,e){return t.push(e.text()),t}).join()+"]"},t.createLeftOf=function(t){e.createLeftOf.call(this,this.cursor=t)},t.onKey=function(t,e){var n,i=this.cursor.parent;if(i.parent===this){if("Enter"===t)return n=re(),n.parent=this,n.jQ=Z("<span></span>").attr(F,n.id).insertAfter(i.jQ),i[X]?i[X][G]=n:this.ends[X]=n,n[X]=i[X],i[X]=n,n[G]=i,this.bubble("redraw").cursor.insAtRightEnd(n),e.preventDefault(),!1;if("Tab"===t&&!i[X])return i.isEmpty()?i[G]?(this.cursor.insRightOf(this),delete i[G][X],this.ends[X]=i[G],i.jQ.remove(),this.bubble("redraw"),e.preventDefault(),!1):void 0:(n=re(),n.parent=this,n.jQ=Z("<span></span>").attr(F,n.id).appendTo(this.jQ),this.ends[X]=n,i[X]=n,n[G]=i,this.bubble("redraw").cursor.insAtRightEnd(n),e.preventDefault(),!1);if(8===e.which){if(i.isEmpty())return i[G]?(this.cursor.insAtRightEnd(i[G]),i[G][X]=i[X]):(this.cursor.insLeftOf(this),this.ends[G]=i[X]),i[X]?i[X][G]=i[G]:this.ends[X]=i[G],i.jQ.remove(),this.isEmpty()?this.cursor.deleteForward():this.bubble("redraw"),e.preventDefault(),!1;if(!this.cursor[G])return e.preventDefault(),!1}}}}),le.editable=H(oe,function(t,e){t.init=function(){ne.prototype.init.call(this,"\\editable")},t.jQadd=function(){var t,n,i=this;e.jQadd.apply(i,arguments),t=i.ends[G].disown(),n=i.jQ.children().detach(),i.ends[G]=i.ends[X]=ae(),i.blocks=[i.ends[G]],i.ends[G].parent=i,r(i.jQ,i.ends[G],!1,!0),i.cursor=i.ends[G].cursor,t.children().adopt(i.ends[G],0,0),n.appendTo(i.ends[G].jQ),i.ends[G].cursor.insAtRightEnd(i.ends[G])},t.latex=function(){return this.ends[G].latex()},t.text=function(){return this.ends[G].text()}}),le.f=e(ie,"f",'<var class="florin">&fnof;</var><span style="display:inline-block;width:0">&nbsp;</span>'),D=H(ie,function(t,e){t.init=function(t,n){e.init.call(this,t,"<var>"+(n||t)+"</var>")},t.text=function(){var t=this.ctrlSeq;return!this[G]||this[G]instanceof D||this[G]instanceof R||(t="*"+t),!this[X]||this[X]instanceof R||"^"===this[X].ctrlSeq||(t+="*"),t}}),O=H(ie,function(t,e){t.init=function(t,n){e.init.call(this,t,"<span>"+(n||t)+"</span>")}}),he[" "]=e(O,"\\:"," "),le.prime=he["'"]=e(O,"'","&prime;"),E=H(ie,function(t,e){t.init=function(t,n){e.init.call(this,t,'<span class="nonSymbola">'+(n||t)+"</span>")}}),le["@"]=E,le["&"]=e(E,"\\&","&amp;"),le["%"]=e(E,"\\%","%"),le.alpha=le.beta=le.gamma=le.delta=le.zeta=le.eta=le.theta=le.iota=le.kappa=le.mu=le.nu=le.xi=le.rho=le.sigma=le.tau=le.chi=le.psi=le.omega=H(D,function(t,e){t.init=function(t){e.init.call(this,"\\"+t+" ","&"+t+";")}}),le.phi=e(D,"\\phi ","&#981;"),le.phiv=le.varphi=e(D,"\\varphi ","&phi;"),le.epsilon=e(D,"\\epsilon ","&#1013;"),le.epsiv=le.varepsilon=e(D,"\\varepsilon ","&epsilon;"),le.piv=le.varpi=e(D,"\\varpi ","&piv;"),le.sigmaf=le.sigmav=le.varsigma=e(D,"\\varsigma ","&sigmaf;"),le.thetav=le.vartheta=le.thetasym=e(D,"\\vartheta ","&thetasym;"),le.upsilon=le.upsi=e(D,"\\upsilon ","&upsilon;"),le.gammad=le.Gammad=le.digamma=e(D,"\\digamma ","&#989;"),le.kappav=le.varkappa=e(D,"\\varkappa ","&#1008;"),le.rhov=le.varrho=e(D,"\\varrho ","&#1009;"),le.pi=le["π"]=e(E,"\\pi ","&pi;"),le.lambda=e(E,"\\lambda ","&lambda;"),le.Upsilon=le.Upsi=le.upsih=le.Upsih=e(ie,"\\Upsilon ",'<var style="font-family: serif">&upsih;</var>'),le.Gamma=le.Delta=le.Theta=le.Lambda=le.Xi=le.Pi=le.Sigma=le.Phi=le.Psi=le.Omega=le.forall=H(O,function(t,e){t.init=function(t){e.init.call(this,"\\"+t+" ","&"+t+";")
}}),A=H(ne,function(t){t.init=function(t){this.latex=t},t.createLeftOf=function(t){t.writeLatex(this.latex)},t.parser=function(){var t=B.parse(this.latex).children();return N.succeed(t)}}),le["¹"]=e(A,"^1"),le["²"]=e(A,"^2"),le["³"]=e(A,"^3"),le["¼"]=e(A,"\\frac14"),le["½"]=e(A,"\\frac12"),le["¾"]=e(A,"\\frac34"),R=H(ie,function(t,e){t.init=function(t,n,i){e.init.call(this,t,'<span class="binary-operator">'+n+"</span>",i)}}),T=H(R,function(t){t.init=O.prototype.init,t.respace=function(){return this.jQ[0].className=this[G]?this[G]instanceof R&&this[X]&&!(this[X]instanceof R)?"unary-operator":"binary-operator":"",this}}),le["+"]=e(T,"+","+"),le["–"]=le["-"]=e(T,"-","&minus;"),le["±"]=le.pm=le.plusmn=le.plusminus=e(T,"\\pm ","&plusmn;"),le.mp=le.mnplus=le.minusplus=e(T,"\\mp ","&#8723;"),he["*"]=le.sdot=le.cdot=e(R,"\\cdot ","&middot;"),le["="]=e(R,"=","="),le["<"]=e(R,"<","&lt;"),le[">"]=e(R,">","&gt;"),le.notin=le.sim=le.cong=le.equiv=le.oplus=le.otimes=H(R,function(t,e){t.init=function(t){e.init.call(this,"\\"+t+" ","&"+t+";")}}),le.times=e(R,"\\times ","&times;","[x]"),le["÷"]=le.div=le.divide=le.divides=e(R,"\\div ","&divide;","[/]"),le["≠"]=le.ne=le.neq=e(R,"\\ne ","&ne;"),le.ast=le.star=le.loast=le.lowast=e(R,"\\ast ","&lowast;"),le.therefor=le.therefore=e(R,"\\therefore ","&there4;"),le.cuz=le.because=e(R,"\\because ","&#8757;"),le.prop=le.propto=e(R,"\\propto ","&prop;"),le["≈"]=le.asymp=le.approx=e(R,"\\approx ","&asymp;"),le.lt=e(R,"<","&lt;"),le.gt=e(R,">","&gt;"),le["≤"]=le.le=le.leq=e(R,"\\le ","&le;"),le["≥"]=le.ge=le.geq=e(R,"\\ge ","&ge;"),le.isin=le["in"]=e(R,"\\in ","&isin;"),le.ni=le.contains=e(R,"\\ni ","&ni;"),le.notni=le.niton=le.notcontains=le.doesnotcontain=e(R,"\\not\\ni ","&#8716;"),le.sub=le.subset=e(R,"\\subset ","&sub;"),le.sup=le.supset=le.superset=e(R,"\\supset ","&sup;"),le.nsub=le.notsub=le.nsubset=le.notsubset=e(R,"\\not\\subset ","&#8836;"),le.nsup=le.notsup=le.nsupset=le.notsupset=le.nsuperset=le.notsuperset=e(R,"\\not\\supset ","&#8837;"),le.sube=le.subeq=le.subsete=le.subseteq=e(R,"\\subseteq ","&sube;"),le.supe=le.supeq=le.supsete=le.supseteq=le.supersete=le.superseteq=e(R,"\\supseteq ","&supe;"),le.nsube=le.nsubeq=le.notsube=le.notsubeq=le.nsubsete=le.nsubseteq=le.notsubsete=le.notsubseteq=e(R,"\\not\\subseteq ","&#8840;"),le.nsupe=le.nsupeq=le.notsupe=le.notsupeq=le.nsupsete=le.nsupseteq=le.notsupsete=le.notsupseteq=le.nsupersete=le.nsuperseteq=le.notsupersete=le.notsuperseteq=e(R,"\\not\\supseteq ","&#8841;"),z=H(ie,function(t,e){t.init=function(t,n){e.init.call(this,t,"<big>"+n+"</big>")}}),le["∑"]=le.sum=le.summation=e(z,"\\sum ","&sum;"),le["∏"]=le.prod=le.product=e(z,"\\prod ","&prod;"),le.coprod=le.coproduct=e(z,"\\coprod ","&#8720;"),le["∫"]=le["int"]=le.integral=e(z,"\\int ","&int;"),le.N=le.naturals=le.Naturals=e(O,"\\mathbb{N}","&#8469;"),le.P=le.primes=le.Primes=le.projective=le.Projective=le.probability=le.Probability=e(O,"\\mathbb{P}","&#8473;"),le.Z=le.integers=le.Integers=e(O,"\\mathbb{Z}","&#8484;"),le.Q=le.rationals=le.Rationals=e(O,"\\mathbb{Q}","&#8474;"),le.R=le.reals=le.Reals=e(O,"\\mathbb{R}","&#8477;"),le.C=le.complex=le.Complex=le.complexes=le.Complexes=le.complexplane=le.Complexplane=le.ComplexPlane=e(O,"\\mathbb{C}","&#8450;"),le.H=le.Hamiltonian=le.quaternions=le.Quaternions=e(O,"\\mathbb{H}","&#8461;"),le.quad=le.emsp=e(O,"\\quad ","    "),le.qquad=e(O,"\\qquad ","        "),le.diamond=e(O,"\\diamond ","&#9671;"),le.bigtriangleup=e(O,"\\bigtriangleup ","&#9651;"),le.ominus=e(O,"\\ominus ","&#8854;"),le.uplus=e(O,"\\uplus ","&#8846;"),le.bigtriangledown=e(O,"\\bigtriangledown ","&#9661;"),le.sqcap=e(O,"\\sqcap ","&#8851;"),le.triangleleft=e(O,"\\triangleleft ","&#8882;"),le.sqcup=e(O,"\\sqcup ","&#8852;"),le.triangleright=e(O,"\\triangleright ","&#8883;"),le.odot=e(O,"\\odot ","&#8857;"),le.bigcirc=e(O,"\\bigcirc ","&#9711;"),le.dagger=e(O,"\\dagger ","&#0134;"),le.ddagger=e(O,"\\ddagger ","&#135;"),le.wr=e(O,"\\wr ","&#8768;"),le.amalg=e(O,"\\amalg ","&#8720;"),le.models=e(O,"\\models ","&#8872;"),le.prec=e(O,"\\prec ","&#8826;"),le.succ=e(O,"\\succ ","&#8827;"),le.preceq=e(O,"\\preceq ","&#8828;"),le.succeq=e(O,"\\succeq ","&#8829;"),le.simeq=e(O,"\\simeq ","&#8771;"),le.mid=e(O,"\\mid ","&#8739;"),le.ll=e(O,"\\ll ","&#8810;"),le.gg=e(O,"\\gg ","&#8811;"),le.parallel=e(O,"\\parallel ","&#8741;"),le.bowtie=e(O,"\\bowtie ","&#8904;"),le.sqsubset=e(O,"\\sqsubset ","&#8847;"),le.sqsupset=e(O,"\\sqsupset ","&#8848;"),le.smile=e(O,"\\smile ","&#8995;"),le.sqsubseteq=e(O,"\\sqsubseteq ","&#8849;"),le.sqsupseteq=e(O,"\\sqsupseteq ","&#8850;"),le.doteq=e(O,"\\doteq ","&#8784;"),le.frown=e(O,"\\frown ","&#8994;"),le.vdash=e(O,"\\vdash ","&#8870;"),le.dashv=e(O,"\\dashv ","&#8867;"),le.longleftarrow=e(O,"\\longleftarrow ","&#8592;"),le.longrightarrow=e(O,"\\longrightarrow ","&#8594;"),le.Longleftarrow=e(O,"\\Longleftarrow ","&#8656;"),le.Longrightarrow=e(O,"\\Longrightarrow ","&#8658;"),le.longleftrightarrow=e(O,"\\longleftrightarrow ","&#8596;"),le.updownarrow=e(O,"\\updownarrow ","&#8597;"),le.Longleftrightarrow=e(O,"\\Longleftrightarrow ","&#8660;"),le.Updownarrow=e(O,"\\Updownarrow ","&#8661;"),le.mapsto=e(O,"\\mapsto ","&#8614;"),le.nearrow=e(O,"\\nearrow ","&#8599;"),le.hookleftarrow=e(O,"\\hookleftarrow ","&#8617;"),le.hookrightarrow=e(O,"\\hookrightarrow ","&#8618;"),le.searrow=e(O,"\\searrow ","&#8600;"),le.leftharpoonup=e(O,"\\leftharpoonup ","&#8636;"),le.rightharpoonup=e(O,"\\rightharpoonup ","&#8640;"),le.swarrow=e(O,"\\swarrow ","&#8601;"),le.leftharpoondown=e(O,"\\leftharpoondown ","&#8637;"),le.rightharpoondown=e(O,"\\rightharpoondown ","&#8641;"),le.nwarrow=e(O,"\\nwarrow ","&#8598;"),le.ldots=e(O,"\\ldots ","&#8230;"),le.cdots=e(O,"\\cdots ","&#8943;"),le.vdots=e(O,"\\vdots ","&#8942;"),le.ddots=e(O,"\\ddots ","&#8944;"),le.surd=e(O,"\\surd ","&#8730;"),le.triangle=e(O,"\\triangle ","&#9653;"),le.ell=e(O,"\\ell ","&#8467;"),le.top=e(O,"\\top ","&#8868;"),le.flat=e(O,"\\flat ","&#9837;"),le.natural=e(O,"\\natural ","&#9838;"),le.sharp=e(O,"\\sharp ","&#9839;"),le.wp=e(O,"\\wp ","&#8472;"),le.bot=e(O,"\\bot ","&#8869;"),le.clubsuit=e(O,"\\clubsuit ","&#9827;"),le.diamondsuit=e(O,"\\diamondsuit ","&#9826;"),le.heartsuit=e(O,"\\heartsuit ","&#9825;"),le.spadesuit=e(O,"\\spadesuit ","&#9824;"),le.oint=e(O,"\\oint ","&#8750;"),le.bigcap=e(O,"\\bigcap ","&#8745;"),le.bigcup=e(O,"\\bigcup ","&#8746;"),le.bigsqcup=e(O,"\\bigsqcup ","&#8852;"),le.bigvee=e(O,"\\bigvee ","&#8744;"),le.bigwedge=e(O,"\\bigwedge ","&#8743;"),le.bigodot=e(O,"\\bigodot ","&#8857;"),le.bigotimes=e(O,"\\bigotimes ","&#8855;"),le.bigoplus=e(O,"\\bigoplus ","&#8853;"),le.biguplus=e(O,"\\biguplus ","&#8846;"),le.lfloor=e(O,"\\lfloor ","&#8970;"),le.rfloor=e(O,"\\rfloor ","&#8971;"),le.lceil=e(O,"\\lceil ","&#8968;"),le.rceil=e(O,"\\rceil ","&#8969;"),le.slash=e(O,"\\slash ","&#47;"),le.opencurlybrace=e(O,"\\opencurlybrace ","&#123;"),le.closecurlybrace=e(O,"\\closecurlybrace ","&#125;"),le.caret=e(O,"\\caret ","^"),le.underscore=e(O,"\\underscore ","_"),le.backslash=e(O,"\\backslash ","\\"),le.vert=e(O,"|"),le.perp=le.perpendicular=e(O,"\\perp ","&perp;"),le.nabla=le.del=e(O,"\\nabla ","&nabla;"),le.hbar=e(O,"\\hbar ","&#8463;"),le.AA=le.Angstrom=le.angstrom=e(O,"\\text\\AA ","&#8491;"),le.ring=le.circ=le.circle=e(O,"\\circ ","&#8728;"),le.bull=le.bullet=e(O,"\\bullet ","&bull;"),le.setminus=le.smallsetminus=e(O,"\\setminus ","&#8726;"),le.not=le["¬"]=le.neg=e(O,"\\neg ","&not;"),le["…"]=le.dots=le.ellip=le.hellip=le.ellipsis=le.hellipsis=e(O,"\\dots ","&hellip;"),le.converges=le.darr=le.dnarr=le.dnarrow=le.downarrow=e(O,"\\downarrow ","&darr;"),le.dArr=le.dnArr=le.dnArrow=le.Downarrow=e(O,"\\Downarrow ","&dArr;"),le.diverges=le.uarr=le.uparrow=e(O,"\\uparrow ","&uarr;"),le.uArr=le.Uparrow=e(O,"\\Uparrow ","&uArr;"),le.to=e(R,"\\to ","&rarr;"),le.rarr=le.rightarrow=e(O,"\\rightarrow ","&rarr;"),le.implies=e(R,"\\Rightarrow ","&rArr;"),le.rArr=le.Rightarrow=e(O,"\\Rightarrow ","&rArr;"),le.gets=e(R,"\\gets ","&larr;"),le.larr=le.leftarrow=e(O,"\\leftarrow ","&larr;"),le.impliedby=e(R,"\\Leftarrow ","&lArr;"),le.lArr=le.Leftarrow=e(O,"\\Leftarrow ","&lArr;"),le.harr=le.lrarr=le.leftrightarrow=e(O,"\\leftrightarrow ","&harr;"),le.iff=e(R,"\\Leftrightarrow ","&hArr;"),le.hArr=le.lrArr=le.Leftrightarrow=e(O,"\\Leftrightarrow ","&hArr;"),le.Re=le.Real=le.real=e(O,"\\Re ","&real;"),le.Im=le.imag=le.image=le.imagin=le.imaginary=le.Imaginary=e(O,"\\Im ","&image;"),le.part=le.partial=e(O,"\\partial ","&part;"),le.inf=le.infin=le.infty=le.infinity=e(O,"\\infty ","&infin;"),le.alef=le.alefsym=le.aleph=le.alephsym=e(O,"\\aleph ","&alefsym;"),le.xist=le.xists=le.exist=le.exists=e(O,"\\exists ","&exist;"),le.and=le.land=le.wedge=e(O,"\\wedge ","&and;"),le.or=le.lor=le.vee=e(O,"\\vee ","&or;"),le.o=le.O=le.empty=le.emptyset=le.oslash=le.Oslash=le.nothing=le.varnothing=e(R,"\\varnothing ","&empty;"),le.cup=le.union=e(R,"\\cup ","&cup;"),le.cap=le.intersect=le.intersection=e(R,"\\cap ","&cap;"),le.deg=le.degree=e(O,"^\\circ ","&deg;"),le.ang=le.angle=e(O,"\\angle ","&ang;"),$=H(ie,function(t,e){t.init=function(t){e.init.call(this,"\\"+t+" ","<span>"+t+"</span>")},t.respace=function(){this.jQ[0].className=this[X]instanceof u||this[X]instanceof b?"":"non-italicized-function"}}),le.ln=le.lg=le.log=le.span=le.proj=le.det=le.dim=le.min=le.max=le.mod=le.lcm=le.gcd=le.gcf=le.hcf=le.lim=$,function(){var t,e=["sin","cos","tan","sec","cosec","csc","cotan","cot"];for(t in e)le[e[t]]=le[e[t]+"h"]=le["a"+e[t]]=le["arc"+e[t]]=le["a"+e[t]+"h"]=le["arc"+e[t]+"h"]=$}(),B=function(){function t(t){var e=re();return t.adopt(e,0,0),e}function e(t){var e,n=t[0]||re();for(e=1;e<t.length;e+=1)t[e].children().adopt(n,n.ends[X],0);return n}var n=N.string,i=N.regex,r=N.letter,s=N.any,a=N.optWhitespace,o=N.succeed,c=N.fail,h=r.map(D),l=i(/^[^${}\\_^]/).map(O),u=i(/^[^\\a-eg-zA-Z]/).or(n("\\").then(i(/^[a-z]+/i).or(i(/^\s+/).result(" ")).or(s))).then(function(t){var e=le[t];return e?e(t).parser():c("unknown command: \\"+t)}),p=u.or(h).or(l),f=n("{").then(function(){return m}).skip(n("}")),d=a.then(f.or(p.map(t))),m=d.many().map(e).skip(a),g=n("[").then(d.then(function(t){return"]"!==t.join("latex")?o(t):c()}).many().map(e).skip(a)).skip(n("]")),b=m;return b.block=d,b.optBlock=g,b}(),I=H(Y,function(t){function e(t,e){var i,r,s,a;if(t.clearSelection().show(),t[X][e])t.insAtLeftEnd(t[X][e]);else if(t[G][e])t.insAtRightEnd(t[G][e]);else{i=t.parent;do{if(r=i[e],r&&("function"==typeof r&&(r=i[e](t)),r===!1||r instanceof re)){t.upDownCache[i.id]=Y(t.parent,t[G],t[X]),r instanceof re&&(s=t.upDownCache[r.id],s?s[X]?t.insLeftOf(s[X]):t.insAtRightEnd(s.parent):(a=n(t).left,t.insAtRightEnd(r),t.seekHoriz(a,r)));break}i=i.parent.parent}while(i)}return t}function n(t){var e=t.jQ.removeClass("cursor").offset();return t.jQ.addClass("cursor"),e}function r(t){t.upDownCache={}}t.init=function(t){this.parent=this.root=t;var e=this.jQ=this._jQ=Z('<span class="cursor">&#8203;</span>');this.blink=function(){e.toggleClass("blink")},this.upDownCache={}},t.show=function(){return this.jQ=this._jQ.removeClass("blink"),"intervalId"in this?clearInterval(this.intervalId):(this[X]?this.jQ.insertBefore(this.selection&&this.selection.ends[G][G]===this[G]?this.selection.jQ:this[X].jQ.first()):this.jQ.appendTo(this.parent.jQ),this.parent.focus()),this.intervalId=setInterval(this.blink,500),this},t.hide=function(){return"intervalId"in this&&clearInterval(this.intervalId),delete this.intervalId,this.jQ.detach(),this.jQ=Z(),this},t.withDirInsertAt=function(t,e,n,i){var r=this.parent;this.parent=e,this[t]=n,this[-t]=i,r.blur()},t.insDirOf=function(t,e){return i(t),this.withDirInsertAt(t,e.parent,e[t],e),this.parent.jQ.addClass("hasCursor"),this.jQ.insDirOf(t,e.jQ),this},t.insLeftOf=function(t){return this.insDirOf(G,t)},t.insRightOf=function(t){return this.insDirOf(X,t)},t.insAtDirEnd=function(t,e){return i(t),this.withDirInsertAt(t,e,0,e.ends[t]),t===G&&e.textarea?this.jQ.insDirOf(-t,e.textarea):this.jQ.insAtDirEnd(t,e.jQ),e.focus(),this},t.insAtLeftEnd=function(t){return this.insAtDirEnd(G,t)},t.insAtRightEnd=function(t){return this.insAtDirEnd(X,t)},t.hopDir=function(t){return i(t),this.jQ.insDirOf(t,this[t].jQ),this[-t]=this[t],this[t]=this[t][t],this},t.hopLeft=function(){return this.hopDir(G)},t.hopRight=function(){return this.hopDir(X)},t.moveDirWithin=function(t,e){if(i(t),this[t])this[t].ends[-t]?this.insAtDirEnd(-t,this[t].ends[-t]):this.hopDir(t);else{if(this.parent===e)return;this.parent[t]?this.insAtDirEnd(-t,this.parent[t]):this.insDirOf(t,this.parent.parent)}},t.moveLeftWithin=function(t){return this.moveDirWithin(G,t)},t.moveRightWithin=function(t){return this.moveDirWithin(X,t)},t.moveDir=function(t){return i(t),r(this),this.selection?this.insDirOf(t,this.selection.ends[t]).clearSelection():this.moveDirWithin(t,this.root),this.show()},t.moveLeft=function(){return this.moveDir(G)},t.moveRight=function(){return this.moveDir(X)},t.moveUp=function(){return e(this,"up")},t.moveDown=function(){return e(this,"down")},t.seek=function(t,e){r(this);var n,i,s=this.clearSelection().show();return t.hasClass("empty")?(s.insAtLeftEnd(ee[t.attr(F)]),s):(n=ee[t.attr(M)],n instanceof ie?(t.outerWidth()>2*(e-t.offset().left)?s.insLeftOf(n):s.insRightOf(n),s):(n||(i=ee[t.attr(F)],i||(t=t.parent(),n=ee[t.attr(M)],n||(i=ee[t.attr(F)],i||(i=s.root)))),n?s.insRightOf(n):s.insAtRightEnd(i),s.seekHoriz(e,s.root)))},t.seekHoriz=function(t,e){var i,r=this,s=n(r).left-t;do r.moveLeftWithin(e),i=s,s=n(r).left-t;while(s>0&&(r[G]||r.parent!==e));return-s>i&&r.moveRightWithin(e),r},t.writeLatex=function(t){var e,n,i,s=this;return r(s),s.show().deleteSelection(),e=N.all,n=N.eof,i=B.skip(n).or(e.result(!1)).parse(t),i&&(i.children().adopt(s.parent,s[G],s[X]),ee.jQize(i.join("html")).insertBefore(s.jQ),s[G]=i.ends[X],i.finalizeInsert(),s.parent.bubble("redraw")),this.hide()},t.write=function(t){var e=this.prepareWrite();return this.insertCh(t,e)},t.insertCh=function(t,e){return this.parent.write(this,t,e),this},t.insertCmd=function(t,e){var n=le[t];return n?(n=n(t),e&&n.replaces(e),n.createLeftOf(this)):(n=q(),n.replaces(t),n.ends[G].focus=function(){return delete this.focus,this},n.createLeftOf(this),this.insRightOf(n),e&&e.remove()),this},t.unwrapGramp=function(){var t=this.parent.parent,e=t.parent,n=t[X],i=t[G];if(t.disown().eachChild(function(r){r.isEmpty()||(r.children().adopt(e,i,n).each(function(e){e.jQ.insertBefore(t.jQ.first())}),i=r.ends[X])}),!this[X])if(this[G])this[X]=this[G][X];else for(;!this[X];){if(this.parent=this.parent[X],!this.parent){this[X]=t[X],this.parent=e;break}this[X]=this.parent.ends[G]}this[X]?this.insLeftOf(this[X]):this.insAtRightEnd(e),t.jQ.remove(),t[G]&&t[G].respace(),t[X]&&t[X].respace()},t.deleteDir=function(t){if(i(t),r(this),this.show(),this.deleteSelection());else if(this[t])this[t].isEmpty()?this[t]=this[t].remove()[t]:this.selectDir(t);else if(this.parent!==this.root){if(this.parent.parent.isEmpty())return this.insDirOf(-t,this.parent.parent).deleteDir(t);this.unwrapGramp()}return this[G]&&this[G].respace(),this[X]&&this[X].respace(),this.parent.bubble("redraw"),this},t.backspace=function(){return this.deleteDir(G)},t.deleteForward=function(){return this.deleteDir(X)},t.selectFrom=function(t){var e,n,i,r,s,a,o=this,c=t;t:for(;;){for(e=this;e!==o.parent.parent;e=e.parent.parent)if(e.parent===c.parent){i=e,r=c;break t}for(n=t;n!==c.parent.parent;n=n.parent.parent)if(o.parent===n.parent){i=o,r=n;break t}o.parent.parent&&(o=o.parent.parent),c.parent.parent&&(c=c.parent.parent)}if(i[X]!==r){for(a=i;a;a=a[X])if(a===r[G]){s=!0;break}s||(s=r,r=i,i=s)}this.hide().selection=_(i[G][X]||i.parent.ends[G],r[X][G]||r.parent.ends[X]),this.insRightOf(r[X][G]||r.parent.ends[X]),this.root.selectionChanged()},t.selectDir=function(t){if(i(t),r(this),this.selection)if(this.selection.ends[t]===this[-t])this[t]?this.hopDir(t).selection.extendDir(t):this.parent!==this.root&&this.insDirOf(t,this.parent.parent).selection.levelUp();else{if(this.hopDir(t),this.selection.ends[t]===this.selection.ends[-t])return void this.clearSelection().show();this.selection.retractDir(t)}else{if(this[t])this.hopDir(t);else{if(this.parent===this.root)return;this.insDirOf(t,this.parent.parent)}this.hide().selection=_(this[-t])}this.root.selectionChanged()},t.selectLeft=function(){return this.selectDir(G)},t.selectRight=function(){return this.selectDir(X)},t.prepareMove=function(){return r(this),this.show().clearSelection()},t.prepareEdit=function(){return r(this),this.show().deleteSelection()},t.prepareWrite=function(){return r(this),this.show().replaceSelection()},t.clearSelection=function(){return this.selection&&(this.selection.clear(),delete this.selection,this.root.selectionChanged()),this},t.deleteSelection=function(){return this.selection?(this[G]=this.selection.ends[G][G],this[X]=this.selection.ends[X][X],this.selection.remove(),this.root.selectionChanged(),delete this.selection):!1},t.replaceSelection=function(){var t=this.selection;return t&&(this[G]=t.ends[G][G],this[X]=t.ends[X][X],delete this.selection),t}}),_=H(se,function(t,e){t.init=function(){var t=this;e.init.apply(t,arguments),t.jQwrap(t.jQ)},t.jQwrap=function(t){this.jQ=t.wrapAll('<span class="selection"></span>').parent()},t.adopt=function(){return this.jQ.replaceWith(this.jQ=this.jQ.children()),e.adopt.apply(this,arguments)},t.clear=function(){return this.jQ.replaceWith(this.jQ.children()),this},t.levelUp=function(){var t=this,e=t.ends[G]=t.ends[X]=t.ends[X].parent.parent;return t.clear().jQwrap(e.jQ),t},t.extendDir=function(t){return i(t),this.ends[t]=this.ends[t][t],this.ends[t].jQ.insAtDirEnd(t,this.jQ),this},t.extendLeft=function(){return this.extendDir(G)},t.extendRight=function(){return this.extendDir(X)},t.retractDir=function(t){i(t),this.ends[-t].jQ.insDirOf(-t,this.jQ),this.ends[-t]=this.ends[-t][t]},t.retractRight=function(){return this.retractDir(X)},t.retractLeft=function(){return this.retractDir(G)}}),W.fn.mathquill=function(t,e){var n,i,s,a,o;switch(t){case"redraw":return this.each(function(){var t=Z(this).attr(F),e=t&&ee[t];e&&!function n(t){t.eachChild(n),t.redraw&&t.redraw()}(e)});case"revert":return this.each(function(){var t=Z(this).attr(F),e=t&&ee[t];e&&e.revert&&e.revert()});case"latex":return arguments.length>1?this.each(function(){var t=Z(this).attr(F),n=t&&ee[t];n&&n.renderLatex(e)}):(n=Z(this).attr(F),i=n&&ee[n],i&&i.latex());case"text":return n=Z(this).attr(F),i=n&&ee[n],i&&i.text();case"html":return this.html().replace(/ ?hasCursor|hasCursor /,"").replace(/ class=(""|(?= |>))/g,"").replace(/<span class="?cursor( blink)?"?><\/span>/i,"").replace(/<span class="?textarea"?><textarea><\/textarea><\/span>/i,"");case"write":if(arguments.length>1)return this.each(function(){var t=Z(this).attr(F),n=t&&ee[t],i=n&&n.cursor;i&&i.writeLatex(e).parent.blur()});case"cmd":if(arguments.length>1)return this.each(function(){var t,n=Z(this).attr(F),i=n&&ee[n],r=i&&i.cursor;r&&(t=r.prepareWrite(),/^\\[a-z]+$/i.test(e)?r.insertCmd(e.slice(1),t):r.insertCh(e,t),r.hide().parent.blur())});default:return s="textbox"===t,a=s||"editable"===t,o=s?ce:ae,this.each(function(){r(Z(this),o(),s,a)})}},W(function(){W(".mathquill-editable:not(.mathquill-rendered-math)").mathquill("editable"),W(".mathquill-textbox:not(.mathquill-rendered-math)").mathquill("textbox"),W(".mathquill-embedded-latex").mathquill()})}();
﻿/*!
 * Bootstrap v3.3.5 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under the MIT license
 */
if(typeof jQuery=="undefined")throw new Error("Bootstrap's JavaScript requires jQuery");+function(n){"use strict";var t=n.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||t[0]==1&&t[1]==9&&t[2]<1)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher");}(jQuery);+function(n){"use strict";function t(){var i=document.createElement("bootstrap"),n={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var t in n)if(i.style[t]!==undefined)return{end:n[t]};return!1}n.fn.emulateTransitionEnd=function(t){var i=!1,u=this,r;n(this).one("bsTransitionEnd",function(){i=!0});return r=function(){i||n(u).trigger(n.support.transition.end)},setTimeout(r,t),this};n(function(){(n.support.transition=t(),n.support.transition)&&(n.event.special.bsTransitionEnd={bindType:n.support.transition.end,delegateType:n.support.transition.end,handle:function(t){if(n(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}})})}(jQuery);+function(n){"use strict";function u(i){return this.each(function(){var r=n(this),u=r.data("bs.alert");u||r.data("bs.alert",u=new t(this));typeof i=="string"&&u[i].call(r)})}var i='[data-dismiss="alert"]',t=function(t){n(t).on("click",i,this.close)},r;t.VERSION="3.3.5";t.TRANSITION_DURATION=150;t.prototype.close=function(i){function e(){r.detach().trigger("closed.bs.alert").remove()}var f=n(this),u=f.attr("data-target"),r;(u||(u=f.attr("href"),u=u&&u.replace(/.*(?=#[^\s]*$)/,"")),r=n(u),i&&i.preventDefault(),r.length||(r=f.closest(".alert")),r.trigger(i=n.Event("close.bs.alert")),i.isDefaultPrevented())||(r.removeClass("in"),n.support.transition&&r.hasClass("fade")?r.one("bsTransitionEnd",e).emulateTransitionEnd(t.TRANSITION_DURATION):e())};r=n.fn.alert;n.fn.alert=u;n.fn.alert.Constructor=t;n.fn.alert.noConflict=function(){return n.fn.alert=r,this};n(document).on("click.bs.alert.data-api",i,t.prototype.close)}(jQuery);+function(n){"use strict";function i(i){return this.each(function(){var u=n(this),r=u.data("bs.button"),f=typeof i=="object"&&i;r||u.data("bs.button",r=new t(this,f));i=="toggle"?r.toggle():i&&r.setState(i)})}var t=function(i,r){this.$element=n(i);this.options=n.extend({},t.DEFAULTS,r);this.isLoading=!1},r;t.VERSION="3.3.5";t.DEFAULTS={loadingText:"loading..."};t.prototype.setState=function(t){var r="disabled",i=this.$element,f=i.is("input")?"val":"html",u=i.data();t+="Text";u.resetText==null&&i.data("resetText",i[f]());setTimeout(n.proxy(function(){i[f](u[t]==null?this.options[t]:u[t]);t=="loadingText"?(this.isLoading=!0,i.addClass(r).attr(r,r)):this.isLoading&&(this.isLoading=!1,i.removeClass(r).removeAttr(r))},this),0)};t.prototype.toggle=function(){var t=!0,i=this.$element.closest('[data-toggle="buttons"]'),n;i.length?(n=this.$element.find("input"),n.prop("type")=="radio"?(n.prop("checked")&&(t=!1),i.find(".active").removeClass("active"),this.$element.addClass("active")):n.prop("type")=="checkbox"&&(n.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),n.prop("checked",this.$element.hasClass("active")),t&&n.trigger("change")):(this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active"))};r=n.fn.button;n.fn.button=i;n.fn.button.Constructor=t;n.fn.button.noConflict=function(){return n.fn.button=r,this};n(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(t){var r=n(t.target);r.hasClass("btn")||(r=r.closest(".btn"));i.call(r,"toggle");n(t.target).is('input[type="radio"]')||n(t.target).is('input[type="checkbox"]')||t.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(t){n(t.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(t.type))})}(jQuery);+function(n){"use strict";function i(i){return this.each(function(){var u=n(this),r=u.data("bs.carousel"),f=n.extend({},t.DEFAULTS,u.data(),typeof i=="object"&&i),e=typeof i=="string"?i:f.slide;r||u.data("bs.carousel",r=new t(this,f));typeof i=="number"?r.to(i):e?r[e]():f.interval&&r.pause().cycle()})}var t=function(t,i){this.$element=n(t);this.$indicators=this.$element.find(".carousel-indicators");this.options=i;this.paused=null;this.sliding=null;this.interval=null;this.$active=null;this.$items=null;this.options.keyboard&&this.$element.on("keydown.bs.carousel",n.proxy(this.keydown,this));this.options.pause!="hover"||"ontouchstart"in document.documentElement||this.$element.on("mouseenter.bs.carousel",n.proxy(this.pause,this)).on("mouseleave.bs.carousel",n.proxy(this.cycle,this))},u,r;t.VERSION="3.3.5";t.TRANSITION_DURATION=600;t.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0};t.prototype.keydown=function(n){if(!/input|textarea/i.test(n.target.tagName)){switch(n.which){case 37:this.prev();break;case 39:this.next();break;default:return}n.preventDefault()}};t.prototype.cycle=function(t){return t||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(n.proxy(this.next,this),this.options.interval)),this};t.prototype.getItemIndex=function(n){return this.$items=n.parent().children(".item"),this.$items.index(n||this.$active)};t.prototype.getItemForDirection=function(n,t){var i=this.getItemIndex(t),f=n=="prev"&&i===0||n=="next"&&i==this.$items.length-1,r,u;return f&&!this.options.wrap?t:(r=n=="prev"?-1:1,u=(i+r)%this.$items.length,this.$items.eq(u))};t.prototype.to=function(n){var i=this,t=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(n>this.$items.length-1)&&!(n<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){i.to(n)}):t==n?this.pause().cycle():this.slide(n>t?"next":"prev",this.$items.eq(n))};t.prototype.pause=function(t){return t||(this.paused=!0),this.$element.find(".next, .prev").length&&n.support.transition&&(this.$element.trigger(n.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this};t.prototype.next=function(){if(!this.sliding)return this.slide("next")};t.prototype.prev=function(){if(!this.sliding)return this.slide("prev")};t.prototype.slide=function(i,r){var e=this.$element.find(".item.active"),u=r||this.getItemForDirection(i,e),l=this.interval,f=i=="next"?"left":"right",a=this,o,s,h,c;return u.hasClass("active")?this.sliding=!1:(o=u[0],s=n.Event("slide.bs.carousel",{relatedTarget:o,direction:f}),this.$element.trigger(s),s.isDefaultPrevented())?void 0:(this.sliding=!0,l&&this.pause(),this.$indicators.length&&(this.$indicators.find(".active").removeClass("active"),h=n(this.$indicators.children()[this.getItemIndex(u)]),h&&h.addClass("active")),c=n.Event("slid.bs.carousel",{relatedTarget:o,direction:f}),n.support.transition&&this.$element.hasClass("slide")?(u.addClass(i),u[0].offsetWidth,e.addClass(f),u.addClass(f),e.one("bsTransitionEnd",function(){u.removeClass([i,f].join(" ")).addClass("active");e.removeClass(["active",f].join(" "));a.sliding=!1;setTimeout(function(){a.$element.trigger(c)},0)}).emulateTransitionEnd(t.TRANSITION_DURATION)):(e.removeClass("active"),u.addClass("active"),this.sliding=!1,this.$element.trigger(c)),l&&this.cycle(),this)};u=n.fn.carousel;n.fn.carousel=i;n.fn.carousel.Constructor=t;n.fn.carousel.noConflict=function(){return n.fn.carousel=u,this};r=function(t){var o,r=n(this),u=n(r.attr("data-target")||(o=r.attr("href"))&&o.replace(/.*(?=#[^\s]+$)/,"")),e,f;u.hasClass("carousel")&&(e=n.extend({},u.data(),r.data()),f=r.attr("data-slide-to"),f&&(e.interval=!1),i.call(u,e),f&&u.data("bs.carousel").to(f),t.preventDefault())};n(document).on("click.bs.carousel.data-api","[data-slide]",r).on("click.bs.carousel.data-api","[data-slide-to]",r);n(window).on("load",function(){n('[data-ride="carousel"]').each(function(){var t=n(this);i.call(t,t.data())})})}(jQuery);+function(n){"use strict";function r(t){var i,r=t.attr("data-target")||(i=t.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,"");return n(r)}function i(i){return this.each(function(){var u=n(this),r=u.data("bs.collapse"),f=n.extend({},t.DEFAULTS,u.data(),typeof i=="object"&&i);!r&&f.toggle&&/show|hide/.test(i)&&(f.toggle=!1);r||u.data("bs.collapse",r=new t(this,f));typeof i=="string"&&r[i]()})}var t=function(i,r){this.$element=n(i);this.options=n.extend({},t.DEFAULTS,r);this.$trigger=n('[data-toggle="collapse"][href="#'+i.id+'"],[data-toggle="collapse"][data-target="#'+i.id+'"]');this.transitioning=null;this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger);this.options.toggle&&this.toggle()},u;t.VERSION="3.3.5";t.TRANSITION_DURATION=350;t.DEFAULTS={toggle:!0};t.prototype.dimension=function(){var n=this.$element.hasClass("width");return n?"width":"height"};t.prototype.show=function(){var f,r,e,u,o,s;if(!this.transitioning&&!this.$element.hasClass("in")&&(r=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing"),!r||!r.length||(f=r.data("bs.collapse"),!f||!f.transitioning))&&(e=n.Event("show.bs.collapse"),this.$element.trigger(e),!e.isDefaultPrevented())){if(r&&r.length&&(i.call(r,"hide"),f||r.data("bs.collapse",null)),u=this.dimension(),this.$element.removeClass("collapse").addClass("collapsing")[u](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1,o=function(){this.$element.removeClass("collapsing").addClass("collapse in")[u]("");this.transitioning=0;this.$element.trigger("shown.bs.collapse")},!n.support.transition)return o.call(this);s=n.camelCase(["scroll",u].join("-"));this.$element.one("bsTransitionEnd",n.proxy(o,this)).emulateTransitionEnd(t.TRANSITION_DURATION)[u](this.$element[0][s])}};t.prototype.hide=function(){var r,i,u;if(!this.transitioning&&this.$element.hasClass("in")&&(r=n.Event("hide.bs.collapse"),this.$element.trigger(r),!r.isDefaultPrevented())){if(i=this.dimension(),this.$element[i](this.$element[i]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1,u=function(){this.transitioning=0;this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")},!n.support.transition)return u.call(this);this.$element[i](0).one("bsTransitionEnd",n.proxy(u,this)).emulateTransitionEnd(t.TRANSITION_DURATION)}};t.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};t.prototype.getParent=function(){return n(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(n.proxy(function(t,i){var u=n(i);this.addAriaAndCollapsedClass(r(u),u)},this)).end()};t.prototype.addAriaAndCollapsedClass=function(n,t){var i=n.hasClass("in");n.attr("aria-expanded",i);t.toggleClass("collapsed",!i).attr("aria-expanded",i)};u=n.fn.collapse;n.fn.collapse=i;n.fn.collapse.Constructor=t;n.fn.collapse.noConflict=function(){return n.fn.collapse=u,this};n(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(t){var u=n(this);u.attr("data-target")||t.preventDefault();var f=r(u),e=f.data("bs.collapse"),o=e?"toggle":u.data();i.call(f,o)})}(jQuery);+function(n){"use strict";function r(t){var i=t.attr("data-target"),r;return i||(i=t.attr("href"),i=i&&/#[A-Za-z]/.test(i)&&i.replace(/.*(?=#[^\s]*$)/,"")),r=i&&n(i),r&&r.length?r:t.parent()}function u(t){t&&t.which===3||(n(e).remove(),n(i).each(function(){var u=n(this),i=r(u),f={relatedTarget:this};i.hasClass("open")&&(t&&t.type=="click"&&/input|textarea/i.test(t.target.tagName)&&n.contains(i[0],t.target)||(i.trigger(t=n.Event("hide.bs.dropdown",f)),t.isDefaultPrevented())||(u.attr("aria-expanded","false"),i.removeClass("open").trigger("hidden.bs.dropdown",f)))}))}function o(i){return this.each(function(){var r=n(this),u=r.data("bs.dropdown");u||r.data("bs.dropdown",u=new t(this));typeof i=="string"&&u[i].call(r)})}var e=".dropdown-backdrop",i='[data-toggle="dropdown"]',t=function(t){n(t).on("click.bs.dropdown",this.toggle)},f;t.VERSION="3.3.5";t.prototype.toggle=function(t){var f=n(this),i,o,e;if(!f.is(".disabled, :disabled")){if(i=r(f),o=i.hasClass("open"),u(),!o){if("ontouchstart"in document.documentElement&&!i.closest(".navbar-nav").length)n(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(n(this)).on("click",u);if(e={relatedTarget:this},i.trigger(t=n.Event("show.bs.dropdown",e)),t.isDefaultPrevented())return;f.trigger("focus").attr("aria-expanded","true");i.toggleClass("open").trigger("shown.bs.dropdown",e)}return!1}};t.prototype.keydown=function(t){var e,o,s,h,f,u;if(/(38|40|27|32)/.test(t.which)&&!/input|textarea/i.test(t.target.tagName)&&(e=n(this),t.preventDefault(),t.stopPropagation(),!e.is(".disabled, :disabled"))){if(o=r(e),s=o.hasClass("open"),!s&&t.which!=27||s&&t.which==27)return t.which==27&&o.find(i).trigger("focus"),e.trigger("click");(h=" li:not(.disabled):visible a",f=o.find(".dropdown-menu"+h),f.length)&&(u=f.index(t.target),t.which==38&&u>0&&u--,t.which==40&&u<f.length-1&&u++,~u||(u=0),f.eq(u).trigger("focus"))}};f=n.fn.dropdown;n.fn.dropdown=o;n.fn.dropdown.Constructor=t;n.fn.dropdown.noConflict=function(){return n.fn.dropdown=f,this};n(document).on("click.bs.dropdown.data-api",u).on("click.bs.dropdown.data-api",".dropdown form",function(n){n.stopPropagation()}).on("click.bs.dropdown.data-api",i,t.prototype.toggle).on("keydown.bs.dropdown.data-api",i,t.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",t.prototype.keydown)}(jQuery);+function(n){"use strict";function i(i,r){return this.each(function(){var f=n(this),u=f.data("bs.modal"),e=n.extend({},t.DEFAULTS,f.data(),typeof i=="object"&&i);u||f.data("bs.modal",u=new t(this,e));typeof i=="string"?u[i](r):e.show&&u.show(r)})}var t=function(t,i){this.options=i;this.$body=n(document.body);this.$element=n(t);this.$dialog=this.$element.find(".modal-dialog");this.$backdrop=null;this.isShown=null;this.originalBodyPad=null;this.scrollbarWidth=0;this.ignoreBackdropClick=!1;this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,n.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))},r;t.VERSION="3.3.5";t.TRANSITION_DURATION=300;t.BACKDROP_TRANSITION_DURATION=150;t.DEFAULTS={backdrop:!0,keyboard:!0,show:!0};t.prototype.toggle=function(n){return this.isShown?this.hide():this.show(n)};t.prototype.show=function(i){var r=this,u=n.Event("show.bs.modal",{relatedTarget:i});if(this.$element.trigger(u),!this.isShown&&!u.isDefaultPrevented()){this.isShown=!0;this.checkScrollbar();this.setScrollbar();this.$body.addClass("modal-open");this.escape();this.resize();this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',n.proxy(this.hide,this));this.$dialog.on("mousedown.dismiss.bs.modal",function(){r.$element.one("mouseup.dismiss.bs.modal",function(t){n(t.target).is(r.$element)&&(r.ignoreBackdropClick=!0)})});this.backdrop(function(){var f=n.support.transition&&r.$element.hasClass("fade"),u;r.$element.parent().length||r.$element.appendTo(r.$body);r.$element.show().scrollTop(0);r.adjustDialog();f&&r.$element[0].offsetWidth;r.$element.addClass("in");r.enforceFocus();u=n.Event("shown.bs.modal",{relatedTarget:i});f?r.$dialog.one("bsTransitionEnd",function(){r.$element.trigger("focus").trigger(u)}).emulateTransitionEnd(t.TRANSITION_DURATION):r.$element.trigger("focus").trigger(u)})}};t.prototype.hide=function(i){(i&&i.preventDefault(),i=n.Event("hide.bs.modal"),this.$element.trigger(i),this.isShown&&!i.isDefaultPrevented())&&(this.isShown=!1,this.escape(),this.resize(),n(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),n.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",n.proxy(this.hideModal,this)).emulateTransitionEnd(t.TRANSITION_DURATION):this.hideModal())};t.prototype.enforceFocus=function(){n(document).off("focusin.bs.modal").on("focusin.bs.modal",n.proxy(function(n){this.$element[0]===n.target||this.$element.has(n.target).length||this.$element.trigger("focus")},this))};t.prototype.escape=function(){if(this.isShown&&this.options.keyboard)this.$element.on("keydown.dismiss.bs.modal",n.proxy(function(n){n.which==27&&this.hide()},this));else this.isShown||this.$element.off("keydown.dismiss.bs.modal")};t.prototype.resize=function(){if(this.isShown)n(window).on("resize.bs.modal",n.proxy(this.handleUpdate,this));else n(window).off("resize.bs.modal")};t.prototype.hideModal=function(){var n=this;this.$element.hide();this.backdrop(function(){n.$body.removeClass("modal-open");n.resetAdjustments();n.resetScrollbar();n.$element.trigger("hidden.bs.modal")})};t.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove();this.$backdrop=null};t.prototype.backdrop=function(i){var e=this,f=this.$element.hasClass("fade")?"fade":"",r,u;if(this.isShown&&this.options.backdrop){r=n.support.transition&&f;this.$backdrop=n(document.createElement("div")).addClass("modal-backdrop "+f).prependTo(this.$element);this.$backdrop.on("click.dismiss.bs.modal",n.proxy(function(n){if(this.ignoreBackdropClick){this.ignoreBackdropClick=!1;return}n.target===n.currentTarget&&(this.options.backdrop=="static"?this.$element[0].focus():this.hide())},this));if(r&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!i)return;r?this.$backdrop.one("bsTransitionEnd",i).emulateTransitionEnd(t.BACKDROP_TRANSITION_DURATION):i()}else!this.isShown&&this.$backdrop?(this.$backdrop.removeClass("in"),u=function(){e.removeBackdrop();i&&i()},n.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",u).emulateTransitionEnd(t.BACKDROP_TRANSITION_DURATION):u()):i&&i()};t.prototype.handleUpdate=function(){this.adjustDialog()};t.prototype.adjustDialog=function(){var n=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&n?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!n?this.scrollbarWidth:""})};t.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})};t.prototype.checkScrollbar=function(){var n=window.innerWidth,t;n||(t=document.documentElement.getBoundingClientRect(),n=t.right-Math.abs(t.left));this.bodyIsOverflowing=document.body.clientWidth<n;this.scrollbarWidth=this.measureScrollbar()};t.prototype.setScrollbar=function(){var n=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"";this.bodyIsOverflowing&&this.$body.css("padding-right",n+this.scrollbarWidth)};t.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)};t.prototype.measureScrollbar=function(){var n=document.createElement("div"),t;return n.className="modal-scrollbar-measure",this.$body.append(n),t=n.offsetWidth-n.clientWidth,this.$body[0].removeChild(n),t};r=n.fn.modal;n.fn.modal=i;n.fn.modal.Constructor=t;n.fn.modal.noConflict=function(){return n.fn.modal=r,this};n(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(t){var r=n(this),f=r.attr("href"),u=n(r.attr("data-target")||f&&f.replace(/.*(?=#[^\s]+$)/,"")),e=u.data("bs.modal")?"toggle":n.extend({remote:!/#/.test(f)&&f},u.data(),r.data());r.is("a")&&t.preventDefault();u.one("show.bs.modal",function(n){if(!n.isDefaultPrevented())u.one("hidden.bs.modal",function(){r.is(":visible")&&r.trigger("focus")})});i.call(u,e,this)})}(jQuery);+function(n){"use strict";function r(i){return this.each(function(){var u=n(this),r=u.data("bs.tooltip"),f=typeof i=="object"&&i;(r||!/destroy|hide/.test(i))&&(r||u.data("bs.tooltip",r=new t(this,f)),typeof i=="string"&&r[i]())})}var t=function(n,t){this.type=null;this.options=null;this.enabled=null;this.timeout=null;this.hoverState=null;this.$element=null;this.inState=null;this.init("tooltip",n,t)},i;t.VERSION="3.3.5";t.TRANSITION_DURATION=150;t.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"><\/div><div class="tooltip-inner"><\/div><\/div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}};t.prototype.init=function(t,i,r){var f,e,u,o,s;if(this.enabled=!0,this.type=t,this.$element=n(i),this.options=this.getOptions(r),this.$viewport=this.options.viewport&&n(n.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(f=this.options.trigger.split(" "),e=f.length;e--;)if(u=f[e],u=="click")this.$element.on("click."+this.type,this.options.selector,n.proxy(this.toggle,this));else if(u!="manual"){o=u=="hover"?"mouseenter":"focusin";s=u=="hover"?"mouseleave":"focusout";this.$element.on(o+"."+this.type,this.options.selector,n.proxy(this.enter,this));this.$element.on(s+"."+this.type,this.options.selector,n.proxy(this.leave,this))}this.options.selector?this._options=n.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()};t.prototype.getDefaults=function(){return t.DEFAULTS};t.prototype.getOptions=function(t){return t=n.extend({},this.getDefaults(),this.$element.data(),t),t.delay&&typeof t.delay=="number"&&(t.delay={show:t.delay,hide:t.delay}),t};t.prototype.getDelegateOptions=function(){var t={},i=this.getDefaults();return this._options&&n.each(this._options,function(n,r){i[n]!=r&&(t[n]=r)}),t};t.prototype.enter=function(t){var i=t instanceof this.constructor?t:n(t.currentTarget).data("bs."+this.type);if(i||(i=new this.constructor(t.currentTarget,this.getDelegateOptions()),n(t.currentTarget).data("bs."+this.type,i)),t instanceof n.Event&&(i.inState[t.type=="focusin"?"focus":"hover"]=!0),i.tip().hasClass("in")||i.hoverState=="in"){i.hoverState="in";return}if(clearTimeout(i.timeout),i.hoverState="in",!i.options.delay||!i.options.delay.show)return i.show();i.timeout=setTimeout(function(){i.hoverState=="in"&&i.show()},i.options.delay.show)};t.prototype.isInStateTrue=function(){for(var n in this.inState)if(this.inState[n])return!0;return!1};t.prototype.leave=function(t){var i=t instanceof this.constructor?t:n(t.currentTarget).data("bs."+this.type);if(i||(i=new this.constructor(t.currentTarget,this.getDelegateOptions()),n(t.currentTarget).data("bs."+this.type,i)),t instanceof n.Event&&(i.inState[t.type=="focusout"?"focus":"hover"]=!1),!i.isInStateTrue()){if(clearTimeout(i.timeout),i.hoverState="out",!i.options.delay||!i.options.delay.hide)return i.hide();i.timeout=setTimeout(function(){i.hoverState=="out"&&i.hide()},i.options.delay.hide)}};t.prototype.show=function(){var c=n.Event("show.bs."+this.type),l,p,e,w,h;if(this.hasContent()&&this.enabled){if(this.$element.trigger(c),l=n.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]),c.isDefaultPrevented()||!l)return;var u=this,r=this.tip(),a=this.getUID(this.type);this.setContent();r.attr("id",a);this.$element.attr("aria-describedby",a);this.options.animation&&r.addClass("fade");var i=typeof this.options.placement=="function"?this.options.placement.call(this,r[0],this.$element[0]):this.options.placement,v=/\s?auto?\s?/i,y=v.test(i);y&&(i=i.replace(v,"")||"top");r.detach().css({top:0,left:0,display:"block"}).addClass(i).data("bs."+this.type,this);this.options.container?r.appendTo(this.options.container):r.insertAfter(this.$element);this.$element.trigger("inserted.bs."+this.type);var f=this.getPosition(),o=r[0].offsetWidth,s=r[0].offsetHeight;y&&(p=i,e=this.getPosition(this.$viewport),i=i=="bottom"&&f.bottom+s>e.bottom?"top":i=="top"&&f.top-s<e.top?"bottom":i=="right"&&f.right+o>e.width?"left":i=="left"&&f.left-o<e.left?"right":i,r.removeClass(p).addClass(i));w=this.getCalculatedOffset(i,f,o,s);this.applyPlacement(w,i);h=function(){var n=u.hoverState;u.$element.trigger("shown.bs."+u.type);u.hoverState=null;n=="out"&&u.leave(u)};n.support.transition&&this.$tip.hasClass("fade")?r.one("bsTransitionEnd",h).emulateTransitionEnd(t.TRANSITION_DURATION):h()}};t.prototype.applyPlacement=function(t,i){var r=this.tip(),l=r[0].offsetWidth,e=r[0].offsetHeight,o=parseInt(r.css("margin-top"),10),s=parseInt(r.css("margin-left"),10),h,f,u;isNaN(o)&&(o=0);isNaN(s)&&(s=0);t.top+=o;t.left+=s;n.offset.setOffset(r[0],n.extend({using:function(n){r.css({top:Math.round(n.top),left:Math.round(n.left)})}},t),0);r.addClass("in");h=r[0].offsetWidth;f=r[0].offsetHeight;i=="top"&&f!=e&&(t.top=t.top+e-f);u=this.getViewportAdjustedDelta(i,t,h,f);u.left?t.left+=u.left:t.top+=u.top;var c=/top|bottom/.test(i),a=c?u.left*2-l+h:u.top*2-e+f,v=c?"offsetWidth":"offsetHeight";r.offset(t);this.replaceArrow(a,r[0][v],c)};t.prototype.replaceArrow=function(n,t,i){this.arrow().css(i?"left":"top",50*(1-n/t)+"%").css(i?"top":"left","")};t.prototype.setContent=function(){var n=this.tip(),t=this.getTitle();n.find(".tooltip-inner")[this.options.html?"html":"text"](t);n.removeClass("fade in top bottom left right")};t.prototype.hide=function(i){function e(){u.hoverState!="in"&&r.detach();u.$element.removeAttr("aria-describedby").trigger("hidden.bs."+u.type);i&&i()}var u=this,r=n(this.$tip),f=n.Event("hide.bs."+this.type);if(this.$element.trigger(f),!f.isDefaultPrevented())return r.removeClass("in"),n.support.transition&&r.hasClass("fade")?r.one("bsTransitionEnd",e).emulateTransitionEnd(t.TRANSITION_DURATION):e(),this.hoverState=null,this};t.prototype.fixTitle=function(){var n=this.$element;(n.attr("title")||typeof n.attr("data-original-title")!="string")&&n.attr("data-original-title",n.attr("title")||"").attr("title","")};t.prototype.hasContent=function(){return this.getTitle()};t.prototype.getPosition=function(t){t=t||this.$element;var u=t[0],r=u.tagName=="BODY",i=u.getBoundingClientRect();i.width==null&&(i=n.extend({},i,{width:i.right-i.left,height:i.bottom-i.top}));var f=r?{top:0,left:0}:t.offset(),e={scroll:r?document.documentElement.scrollTop||document.body.scrollTop:t.scrollTop()},o=r?{width:n(window).width(),height:n(window).height()}:null;return n.extend({},i,e,o,f)};t.prototype.getCalculatedOffset=function(n,t,i,r){return n=="bottom"?{top:t.top+t.height,left:t.left+t.width/2-i/2}:n=="top"?{top:t.top-r,left:t.left+t.width/2-i/2}:n=="left"?{top:t.top+t.height/2-r/2,left:t.left-i}:{top:t.top+t.height/2-r/2,left:t.left+t.width}};t.prototype.getViewportAdjustedDelta=function(n,t,i,r){var f={top:0,left:0},e,u,o,s,h,c;return this.$viewport?(e=this.options.viewport&&this.options.viewport.padding||0,u=this.getPosition(this.$viewport),/right|left/.test(n)?(o=t.top-e-u.scroll,s=t.top+e-u.scroll+r,o<u.top?f.top=u.top-o:s>u.top+u.height&&(f.top=u.top+u.height-s)):(h=t.left-e,c=t.left+e+i,h<u.left?f.left=u.left-h:c>u.right&&(f.left=u.left+u.width-c)),f):f};t.prototype.getTitle=function(){var t=this.$element,n=this.options;return t.attr("data-original-title")||(typeof n.title=="function"?n.title.call(t[0]):n.title)};t.prototype.getUID=function(n){do n+=~~(Math.random()*1e6);while(document.getElementById(n));return n};t.prototype.tip=function(){if(!this.$tip&&(this.$tip=n(this.options.template),this.$tip.length!=1))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip};t.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")};t.prototype.enable=function(){this.enabled=!0};t.prototype.disable=function(){this.enabled=!1};t.prototype.toggleEnabled=function(){this.enabled=!this.enabled};t.prototype.toggle=function(t){var i=this;t&&(i=n(t.currentTarget).data("bs."+this.type),i||(i=new this.constructor(t.currentTarget,this.getDelegateOptions()),n(t.currentTarget).data("bs."+this.type,i)));t?(i.inState.click=!i.inState.click,i.isInStateTrue()?i.enter(i):i.leave(i)):i.tip().hasClass("in")?i.leave(i):i.enter(i)};t.prototype.destroy=function(){var n=this;clearTimeout(this.timeout);this.hide(function(){n.$element.off("."+n.type).removeData("bs."+n.type);n.$tip&&n.$tip.detach();n.$tip=null;n.$arrow=null;n.$viewport=null})};i=n.fn.tooltip;n.fn.tooltip=r;n.fn.tooltip.Constructor=t;n.fn.tooltip.noConflict=function(){return n.fn.tooltip=i,this}}(jQuery);+function(n){"use strict";function r(i){return this.each(function(){var u=n(this),r=u.data("bs.popover"),f=typeof i=="object"&&i;(r||!/destroy|hide/.test(i))&&(r||u.data("bs.popover",r=new t(this,f)),typeof i=="string"&&r[i]())})}var t=function(n,t){this.init("popover",n,t)},i;if(!n.fn.tooltip)throw new Error("Popover requires tooltip.js");t.VERSION="3.3.5";t.DEFAULTS=n.extend({},n.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"><\/div><h3 class="popover-title"><\/h3><div class="popover-content"><\/div><\/div>'});t.prototype=n.extend({},n.fn.tooltip.Constructor.prototype);t.prototype.constructor=t;t.prototype.getDefaults=function(){return t.DEFAULTS};t.prototype.setContent=function(){var n=this.tip(),i=this.getTitle(),t=this.getContent();n.find(".popover-title")[this.options.html?"html":"text"](i);n.find(".popover-content").children().detach().end()[this.options.html?typeof t=="string"?"html":"append":"text"](t);n.removeClass("fade top bottom left right in");n.find(".popover-title").html()||n.find(".popover-title").hide()};t.prototype.hasContent=function(){return this.getTitle()||this.getContent()};t.prototype.getContent=function(){var t=this.$element,n=this.options;return t.attr("data-content")||(typeof n.content=="function"?n.content.call(t[0]):n.content)};t.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};i=n.fn.popover;n.fn.popover=r;n.fn.popover.Constructor=t;n.fn.popover.noConflict=function(){return n.fn.popover=i,this}}(jQuery);+function(n){"use strict";function t(i,r){this.$body=n(document.body);this.$scrollElement=n(i).is(document.body)?n(window):n(i);this.options=n.extend({},t.DEFAULTS,r);this.selector=(this.options.target||"")+" .nav li > a";this.offsets=[];this.targets=[];this.activeTarget=null;this.scrollHeight=0;this.$scrollElement.on("scroll.bs.scrollspy",n.proxy(this.process,this));this.refresh();this.process()}function i(i){return this.each(function(){var u=n(this),r=u.data("bs.scrollspy"),f=typeof i=="object"&&i;r||u.data("bs.scrollspy",r=new t(this,f));typeof i=="string"&&r[i]()})}t.VERSION="3.3.5";t.DEFAULTS={offset:10};t.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)};t.prototype.refresh=function(){var t=this,i="offset",r=0;this.offsets=[];this.targets=[];this.scrollHeight=this.getScrollHeight();n.isWindow(this.$scrollElement[0])||(i="position",r=this.$scrollElement.scrollTop());this.$body.find(this.selector).map(function(){var f=n(this),u=f.data("target")||f.attr("href"),t=/^#./.test(u)&&n(u);return t&&t.length&&t.is(":visible")&&[[t[i]().top+r,u]]||null}).sort(function(n,t){return n[0]-t[0]}).each(function(){t.offsets.push(this[0]);t.targets.push(this[1])})};t.prototype.process=function(){var i=this.$scrollElement.scrollTop()+this.options.offset,f=this.getScrollHeight(),e=this.options.offset+f-this.$scrollElement.height(),t=this.offsets,r=this.targets,u=this.activeTarget,n;if(this.scrollHeight!=f&&this.refresh(),i>=e)return u!=(n=r[r.length-1])&&this.activate(n);if(u&&i<t[0])return this.activeTarget=null,this.clear();for(n=t.length;n--;)u!=r[n]&&i>=t[n]&&(t[n+1]===undefined||i<t[n+1])&&this.activate(r[n])};t.prototype.activate=function(t){this.activeTarget=t;this.clear();var r=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]',i=n(r).parents("li").addClass("active");i.parent(".dropdown-menu").length&&(i=i.closest("li.dropdown").addClass("active"));i.trigger("activate.bs.scrollspy")};t.prototype.clear=function(){n(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var r=n.fn.scrollspy;n.fn.scrollspy=i;n.fn.scrollspy.Constructor=t;n.fn.scrollspy.noConflict=function(){return n.fn.scrollspy=r,this};n(window).on("load.bs.scrollspy.data-api",function(){n('[data-spy="scroll"]').each(function(){var t=n(this);i.call(t,t.data())})})}(jQuery);+function(n){"use strict";function r(i){return this.each(function(){var u=n(this),r=u.data("bs.tab");r||u.data("bs.tab",r=new t(this));typeof i=="string"&&r[i]()})}var t=function(t){this.element=n(t)},u,i;t.VERSION="3.3.5";t.TRANSITION_DURATION=150;t.prototype.show=function(){var t=this.element,f=t.closest("ul:not(.dropdown-menu)"),i=t.data("target"),u;if(i||(i=t.attr("href"),i=i&&i.replace(/.*(?=#[^\s]*$)/,"")),!t.parent("li").hasClass("active")){var r=f.find(".active:last a"),e=n.Event("hide.bs.tab",{relatedTarget:t[0]}),o=n.Event("show.bs.tab",{relatedTarget:r[0]});(r.trigger(e),t.trigger(o),o.isDefaultPrevented()||e.isDefaultPrevented())||(u=n(i),this.activate(t.closest("li"),f),this.activate(u,u.parent(),function(){r.trigger({type:"hidden.bs.tab",relatedTarget:t[0]});t.trigger({type:"shown.bs.tab",relatedTarget:r[0]})}))}};t.prototype.activate=function(i,r,u){function o(){f.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1);i.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0);e?(i[0].offsetWidth,i.addClass("in")):i.removeClass("fade");i.parent(".dropdown-menu").length&&i.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0);u&&u()}var f=r.find("> .active"),e=u&&n.support.transition&&(f.length&&f.hasClass("fade")||!!r.find("> .fade").length);f.length&&e?f.one("bsTransitionEnd",o).emulateTransitionEnd(t.TRANSITION_DURATION):o();f.removeClass("in")};u=n.fn.tab;n.fn.tab=r;n.fn.tab.Constructor=t;n.fn.tab.noConflict=function(){return n.fn.tab=u,this};i=function(t){t.preventDefault();r.call(n(this),"show")};n(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',i).on("click.bs.tab.data-api",'[data-toggle="pill"]',i)}(jQuery);+function(n){"use strict";function i(i){return this.each(function(){var u=n(this),r=u.data("bs.affix"),f=typeof i=="object"&&i;r||u.data("bs.affix",r=new t(this,f));typeof i=="string"&&r[i]()})}var t=function(i,r){this.options=n.extend({},t.DEFAULTS,r);this.$target=n(this.options.target).on("scroll.bs.affix.data-api",n.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",n.proxy(this.checkPositionWithEventLoop,this));this.$element=n(i);this.affixed=null;this.unpin=null;this.pinnedOffset=null;this.checkPosition()},r;t.VERSION="3.3.5";t.RESET="affix affix-top affix-bottom";t.DEFAULTS={offset:0,target:window};t.prototype.getState=function(n,t,i,r){var u=this.$target.scrollTop(),f=this.$element.offset(),e=this.$target.height();if(i!=null&&this.affixed=="top")return u<i?"top":!1;if(this.affixed=="bottom")return i!=null?u+this.unpin<=f.top?!1:"bottom":u+e<=n-r?!1:"bottom";var o=this.affixed==null,s=o?u:f.top,h=o?e:t;return i!=null&&u<=i?"top":r!=null&&s+h>=n-r?"bottom":!1};t.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(t.RESET).addClass("affix");var n=this.$target.scrollTop(),i=this.$element.offset();return this.pinnedOffset=i.top-n};t.prototype.checkPositionWithEventLoop=function(){setTimeout(n.proxy(this.checkPosition,this),1)};t.prototype.checkPosition=function(){var i,e,o;if(this.$element.is(":visible")){var s=this.$element.height(),r=this.options.offset,f=r.top,u=r.bottom,h=Math.max(n(document).height(),n(document.body).height());if(typeof r!="object"&&(u=f=r),typeof f=="function"&&(f=r.top(this.$element)),typeof u=="function"&&(u=r.bottom(this.$element)),i=this.getState(h,s,f,u),this.affixed!=i){if(this.unpin!=null&&this.$element.css("top",""),e="affix"+(i?"-"+i:""),o=n.Event(e+".bs.affix"),this.$element.trigger(o),o.isDefaultPrevented())return;this.affixed=i;this.unpin=i=="bottom"?this.getPinnedOffset():null;this.$element.removeClass(t.RESET).addClass(e).trigger(e.replace("affix","affixed")+".bs.affix")}i=="bottom"&&this.$element.offset({top:h-s-u})}};r=n.fn.affix;n.fn.affix=i;n.fn.affix.Constructor=t;n.fn.affix.noConflict=function(){return n.fn.affix=r,this};n(window).on("load",function(){n('[data-spy="affix"]').each(function(){var r=n(this),t=r.data();t.offset=t.offset||{};t.offsetBottom!=null&&(t.offset.bottom=t.offsetBottom);t.offsetTop!=null&&(t.offset.top=t.offsetTop);i.call(r,t)})})}(jQuery);
/*
//# sourceMappingURL=bootstrap.min.js.map
*/
!function(t){var e,i;!function(){function t(t,e){if(!e)return t;if(0===t.indexOf(".")){var i=e.split("/"),o=t.split("/"),s=i.length-1,n=o.length,r=0,a=0;t:for(var h=0;n>h;h++)switch(o[h]){case"..":if(!(s>r))break t;r++,a++;break;case".":a++;break;default:break t}return i.length=s-r,o=o.slice(a),i.concat(o).join("/")}return t}function o(e){function i(i,r){if("string"==typeof i){var a=o[i];return a||(a=n(t(i,e)),o[i]=a),a}i instanceof Array&&(r=r||function(){},r.apply(this,s(i,r,e)))}var o={};return i}function s(i,o,s){for(var a=[],h=r[s],l=0,d=Math.min(i.length,o.length);d>l;l++){var c,p=t(i[l],s);switch(p){case"require":c=h&&h.require||e;break;case"exports":c=h.exports;break;case"module":c=h;break;default:c=n(p)}a.push(c)}return a}function n(t){var e=r[t];if(!e)throw new Error("No "+t);if(!e.defined){var i=e.factory,o=i.apply(this,s(e.deps||[],i,t));"undefined"!=typeof o&&(e.exports=o),e.defined=1}return e.exports}var r={};i=function(t,e,i){r[t]={id:t,deps:e,factory:i,defined:0,exports:{},require:o(t)}},e=o("")}(),i("echarts/chart/scatter",["require","./base","../util/shape/Symbol","../component/axis","../component/grid","../component/dataZoom","../component/dataRange","../config","zrender/tool/util","zrender/tool/color","../chart"],function(t){function e(t,e,o,s,n){i.call(this,t,e,o,s,n),this.refresh(s)}var i=t("./base"),o=t("../util/shape/Symbol");t("../component/axis"),t("../component/grid"),t("../component/dataZoom"),t("../component/dataRange");var s=t("../config");s.scatter={zlevel:0,z:2,clickable:!0,legendHoverLink:!0,xAxisIndex:0,yAxisIndex:0,symbolSize:4,large:!1,largeThreshold:2e3,itemStyle:{normal:{label:{show:!1}},emphasis:{label:{show:!1}}}};var n=t("zrender/tool/util"),r=t("zrender/tool/color");return e.prototype={type:s.CHART_TYPE_SCATTER,_buildShape:function(){var t=this.series;this._sIndex2ColorMap={},this._symbol=this.option.symbolList,this._sIndex2ShapeMap={},this.selectedMap={},this.xMarkMap={};for(var e,i,o,n,a=this.component.legend,h=[],l=0,d=t.length;d>l;l++)if(e=t[l],i=e.name,e.type===s.CHART_TYPE_SCATTER){if(t[l]=this.reformOption(t[l]),this.legendHoverLink=t[l].legendHoverLink||this.legendHoverLink,this._sIndex2ShapeMap[l]=this.query(e,"symbol")||this._symbol[l%this._symbol.length],a){if(this.selectedMap[i]=a.isSelected(i),this._sIndex2ColorMap[l]=r.alpha(a.getColor(i),.5),o=a.getItemShape(i)){var n=this._sIndex2ShapeMap[l];o.style.brushType=n.match("empty")?"stroke":"both",n=n.replace("empty","").toLowerCase(),n.match("rectangle")&&(o.style.x+=Math.round((o.style.width-o.style.height)/2),o.style.width=o.style.height),n.match("star")&&(o.style.n=n.replace("star","")-0||5,n="star"),n.match("image")&&(o.style.image=n.replace(new RegExp("^image:\\/\\/"),""),o.style.x+=Math.round((o.style.width-o.style.height)/2),o.style.width=o.style.height,n="image"),o.style.iconType=n,a.setItemShape(i,o)}}else this.selectedMap[i]=!0,this._sIndex2ColorMap[l]=r.alpha(this.zr.getColor(l),.5);this.selectedMap[i]&&h.push(l)}this._buildSeries(h),this.addShapeList()},_buildSeries:function(t){if(0!==t.length){for(var e,i,o,s,n,r,a,h,l=this.series,d={},c=0,p=t.length;p>c;c++)if(e=t[c],i=l[e],0!==i.data.length){n=this.component.xAxis.getAxis(i.xAxisIndex||0),r=this.component.yAxis.getAxis(i.yAxisIndex||0),d[e]=[];for(var u=0,g=i.data.length;g>u;u++)o=i.data[u],s=this.getDataFromOption(o,"-"),"-"===s||s.length<2||(a=n.getCoord(s[0]),h=r.getCoord(s[1]),d[e].push([a,h,u,o.name||""]));this.xMarkMap[e]=this._markMap(n,r,i.data,d[e]),this.buildMark(e)}this._buildPointList(d)}},_markMap:function(t,e,i,o){for(var s,n={min0:Number.POSITIVE_INFINITY,max0:Number.NEGATIVE_INFINITY,sum0:0,counter0:0,average0:0,min1:Number.POSITIVE_INFINITY,max1:Number.NEGATIVE_INFINITY,sum1:0,counter1:0,average1:0},r=0,a=o.length;a>r;r++)s=i[o[r][2]].value||i[o[r][2]],n.min0>s[0]&&(n.min0=s[0],n.minY0=o[r][1],n.minX0=o[r][0]),n.max0<s[0]&&(n.max0=s[0],n.maxY0=o[r][1],n.maxX0=o[r][0]),n.sum0+=s[0],n.counter0++,n.min1>s[1]&&(n.min1=s[1],n.minY1=o[r][1],n.minX1=o[r][0]),n.max1<s[1]&&(n.max1=s[1],n.maxY1=o[r][1],n.maxX1=o[r][0]),n.sum1+=s[1],n.counter1++;var h=this.component.grid.getX(),l=this.component.grid.getXend(),d=this.component.grid.getY(),c=this.component.grid.getYend();n.average0=n.sum0/n.counter0;var p=t.getCoord(n.average0);n.averageLine0=[[p,c],[p,d]],n.minLine0=[[n.minX0,c],[n.minX0,d]],n.maxLine0=[[n.maxX0,c],[n.maxX0,d]],n.average1=n.sum1/n.counter1;var u=e.getCoord(n.average1);return n.averageLine1=[[h,u],[l,u]],n.minLine1=[[h,n.minY1],[l,n.minY1]],n.maxLine1=[[h,n.maxY1],[l,n.maxY1]],n},_buildPointList:function(t){var e,i,o,s,n=this.series;for(var r in t)if(e=n[r],i=t[r],e.large&&e.data.length>e.largeThreshold)this.shapeList.push(this._getLargeSymbol(i,this.getItemStyleColor(this.query(e,"itemStyle.normal.color"),r,-1)||this._sIndex2ColorMap[r]));else for(var a=0,h=i.length;h>a;a++)o=i[a],s=this._getSymbol(r,o[2],o[3],o[0],o[1]),s&&this.shapeList.push(s)},_getSymbol:function(t,e,i,o,s){var n,r=this.series,a=r[t],h=a.data[e],l=this.component.dataRange;if(l){if(n=isNaN(h[2])?this._sIndex2ColorMap[t]:l.getColor(h[2]),!n)return null}else n=this._sIndex2ColorMap[t];var d=this.getSymbolShape(a,t,h,e,i,o,s,this._sIndex2ShapeMap[t],n,"rgba(0,0,0,0)","vertical");return d.zlevel=this.getZlevelBase(),d.z=this.getZBase(),d._main=!0,d},_getLargeSymbol:function(t,e){return new o({zlevel:this.getZlevelBase(),z:this.getZBase(),_main:!0,hoverable:!1,style:{pointList:t,color:e,strokeColor:e},highlightStyle:{pointList:[]}})},getMarkCoord:function(t,e){var i,o=this.series[t],s=this.xMarkMap[t],n=this.component.xAxis.getAxis(o.xAxisIndex),r=this.component.yAxis.getAxis(o.yAxisIndex);if(!e.type||"max"!==e.type&&"min"!==e.type&&"average"!==e.type)i=["string"!=typeof e.xAxis&&n.getCoordByIndex?n.getCoordByIndex(e.xAxis||0):n.getCoord(e.xAxis||0),"string"!=typeof e.yAxis&&r.getCoordByIndex?r.getCoordByIndex(e.yAxis||0):r.getCoord(e.yAxis||0)];else{var a=null!=e.valueIndex?e.valueIndex:1;i=[s[e.type+"X"+a],s[e.type+"Y"+a],s[e.type+"Line"+a],s[e.type+a]]}return i},refresh:function(t){t&&(this.option=t,this.series=t.series),this.backupShapeList(),this._buildShape()},ondataRange:function(t,e){this.component.dataRange&&(this.refresh(),e.needRefresh=!0)}},n.inherits(e,i),t("../chart").define("scatter",e),e}),i("echarts/chart/bar",["require","./base","zrender/shape/Rectangle","../component/axis","../component/grid","../component/dataZoom","../config","../util/ecData","zrender/tool/util","zrender/tool/color","../chart"],function(t){function e(t,e,o,s,n){i.call(this,t,e,o,s,n),this.refresh(s)}var i=t("./base"),o=t("zrender/shape/Rectangle");t("../component/axis"),t("../component/grid"),t("../component/dataZoom");var s=t("../config");s.bar={zlevel:0,z:2,clickable:!0,legendHoverLink:!0,xAxisIndex:0,yAxisIndex:0,barMinHeight:0,barGap:"30%",barCategoryGap:"20%",itemStyle:{normal:{barBorderColor:"#fff",barBorderRadius:0,barBorderWidth:0,label:{show:!1}},emphasis:{barBorderColor:"#fff",barBorderRadius:0,barBorderWidth:0,label:{show:!1}}}};var n=t("../util/ecData"),r=t("zrender/tool/util"),a=t("zrender/tool/color");return e.prototype={type:s.CHART_TYPE_BAR,_buildShape:function(){this._buildPosition()},_buildNormal:function(t,e,i,n,r){for(var a,h,l,d,c,p,u,g,f,m,_,y,x=this.series,v=i[0][0],b=x[v],S="horizontal"==r,T=this.component.xAxis,z=this.component.yAxis,C=S?T.getAxis(b.xAxisIndex):z.getAxis(b.yAxisIndex),w=this._mapSize(C,i),L=w.gap,E=w.barGap,M=w.barWidthMap,A=w.barMaxWidthMap,k=w.barWidth,O=w.barMinHeightMap,I=w.interval,R=this.deepQuery([this.ecTheme,s],"island.r"),P=0,D=e;D>P&&null!=C.getNameByIndex(P);P++){S?d=C.getCoordByIndex(P)-L/2:c=C.getCoordByIndex(P)+L/2;for(var B=0,H=i.length;H>B;B++){var F=x[i[B][0]].yAxisIndex||0,N=x[i[B][0]].xAxisIndex||0;a=S?z.getAxis(F):T.getAxis(N),u=p=f=g=a.getCoord(0);for(var Y=0,W=i[B].length;W>Y;Y++)v=i[B][Y],b=x[v],_=b.data[P],y=this.getDataFromOption(_,"-"),n[v]=n[v]||{min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY,sum:0,counter:0,average:0},l=Math.min(A[v]||Number.MAX_VALUE,M[v]||k),"-"!==y&&(y>0?(h=Y>0?a.getCoordSize(y):S?u-a.getCoord(y):a.getCoord(y)-u,1===W&&O[v]>h&&(h=O[v]),S?(p-=h,c=p):(d=p,p+=h)):0>y?(h=Y>0?a.getCoordSize(y):S?a.getCoord(y)-f:f-a.getCoord(y),1===W&&O[v]>h&&(h=O[v]),S?(c=g,g+=h):(g-=h,d=g)):(h=0,S?(p-=h,c=p):(d=p,p+=h)),n[v][P]=S?d+l/2:c-l/2,n[v].min>y&&(n[v].min=y,S?(n[v].minY=c,n[v].minX=n[v][P]):(n[v].minX=d+h,n[v].minY=n[v][P])),n[v].max<y&&(n[v].max=y,S?(n[v].maxY=c,n[v].maxX=n[v][P]):(n[v].maxX=d+h,n[v].maxY=n[v][P])),n[v].sum+=y,n[v].counter++,P%I===0&&(m=this._getBarItem(v,P,C.getNameByIndex(P),d,c-(S?0:l),S?l:h,S?h:l,S?"vertical":"horizontal"),this.shapeList.push(new o(m))));for(var Y=0,W=i[B].length;W>Y;Y++)v=i[B][Y],b=x[v],_=b.data[P],y=this.getDataFromOption(_,"-"),l=Math.min(A[v]||Number.MAX_VALUE,M[v]||k),"-"==y&&this.deepQuery([_,b,this.option],"calculable")&&(S?(p-=R,c=p):(d=p,p+=R),m=this._getBarItem(v,P,C.getNameByIndex(P),d,c-(S?0:l),S?l:R,S?R:l,S?"vertical":"horizontal"),m.hoverable=!1,m.draggable=!1,m.style.lineWidth=1,m.style.brushType="stroke",m.style.strokeColor=b.calculableHolderColor||this.ecTheme.calculableHolderColor||s.calculableHolderColor,this.shapeList.push(new o(m)));S?d+=l+E:c-=l+E}}this._calculMarkMapXY(n,i,S?"y":"x")},_buildHorizontal:function(t,e,i,o){return this._buildNormal(t,e,i,o,"horizontal")},_buildVertical:function(t,e,i,o){return this._buildNormal(t,e,i,o,"vertical")},_buildOther:function(t,e,i,s){for(var n=this.series,r=0,a=i.length;a>r;r++)for(var h=0,l=i[r].length;l>h;h++){var d=i[r][h],c=n[d],p=c.xAxisIndex||0,u=this.component.xAxis.getAxis(p),g=u.getCoord(0),f=c.yAxisIndex||0,m=this.component.yAxis.getAxis(f),_=m.getCoord(0);s[d]=s[d]||{min0:Number.POSITIVE_INFINITY,min1:Number.POSITIVE_INFINITY,max0:Number.NEGATIVE_INFINITY,max1:Number.NEGATIVE_INFINITY,sum0:0,sum1:0,counter0:0,counter1:0,average0:0,average1:0};for(var y=0,x=c.data.length;x>y;y++){var v=c.data[y],b=this.getDataFromOption(v,"-");if(b instanceof Array){var S,T,z=u.getCoord(b[0]),C=m.getCoord(b[1]),w=[v,c],L=this.deepQuery(w,"barWidth")||10,E=this.deepQuery(w,"barHeight");null!=E?(S="horizontal",b[0]>0?(L=z-g,z-=L):L=b[0]<0?g-z:0,T=this._getBarItem(d,y,b[0],z,C-E/2,L,E,S)):(S="vertical",b[1]>0?E=_-C:b[1]<0?(E=C-_,C-=E):E=0,T=this._getBarItem(d,y,b[0],z-L/2,C,L,E,S)),this.shapeList.push(new o(T)),z=u.getCoord(b[0]),C=m.getCoord(b[1]),s[d].min0>b[0]&&(s[d].min0=b[0],s[d].minY0=C,s[d].minX0=z),s[d].max0<b[0]&&(s[d].max0=b[0],s[d].maxY0=C,s[d].maxX0=z),s[d].sum0+=b[0],s[d].counter0++,s[d].min1>b[1]&&(s[d].min1=b[1],s[d].minY1=C,s[d].minX1=z),s[d].max1<b[1]&&(s[d].max1=b[1],s[d].maxY1=C,s[d].maxX1=z),s[d].sum1+=b[1],s[d].counter1++}}}this._calculMarkMapXY(s,i,"xy")},_mapSize:function(t,e,i){var o,s,n=this._findSpecialBarSzie(e,i),r=n.barWidthMap,a=n.barMaxWidthMap,h=n.barMinHeightMap,l=n.sBarWidthCounter,d=n.sBarWidthTotal,c=n.barGap,p=n.barCategoryGap,u=1;if(e.length!=l){if(i)o=t.getGap(),c=0,s=+(o/e.length).toFixed(2),0>=s&&(u=Math.floor(e.length/o),s=1);else if(o="string"==typeof p&&p.match(/%$/)?(t.getGap()*(100-parseFloat(p))/100).toFixed(2)-0:t.getGap()-p,"string"==typeof c&&c.match(/%$/)?(c=parseFloat(c)/100,s=+((o-d)/((e.length-1)*c+e.length-l)).toFixed(2),c=s*c):(c=parseFloat(c),s=+((o-d-c*(e.length-1))/(e.length-l)).toFixed(2)),0>=s)return this._mapSize(t,e,!0)}else if(o=l>1?"string"==typeof p&&p.match(/%$/)?+(t.getGap()*(100-parseFloat(p))/100).toFixed(2):t.getGap()-p:d,s=0,c=l>1?+((o-d)/(l-1)).toFixed(2):0,0>c)return this._mapSize(t,e,!0);return this._recheckBarMaxWidth(e,r,a,h,o,s,c,u)},_findSpecialBarSzie:function(t,e){for(var i,o,s,n,r=this.series,a={},h={},l={},d=0,c=0,p=0,u=t.length;u>p;p++)for(var g={barWidth:!1,barMaxWidth:!1},f=0,m=t[p].length;m>f;f++){var _=t[p][f],y=r[_];if(!e){if(g.barWidth)a[_]=i;else if(i=this.query(y,"barWidth"),null!=i){a[_]=i,c+=i,d++,g.barWidth=!0;for(var x=0,v=f;v>x;x++){var b=t[p][x];a[b]=i}}if(g.barMaxWidth)h[_]=o;else if(o=this.query(y,"barMaxWidth"),null!=o){h[_]=o,g.barMaxWidth=!0;for(var x=0,v=f;v>x;x++){var b=t[p][x];h[b]=o}}}l[_]=this.query(y,"barMinHeight"),s=null!=s?s:this.query(y,"barGap"),n=null!=n?n:this.query(y,"barCategoryGap")}return{barWidthMap:a,barMaxWidthMap:h,barMinHeightMap:l,sBarWidth:i,sBarMaxWidth:o,sBarWidthCounter:d,sBarWidthTotal:c,barGap:s,barCategoryGap:n}},_recheckBarMaxWidth:function(t,e,i,o,s,n,r,a){for(var h=0,l=t.length;l>h;h++){var d=t[h][0];i[d]&&i[d]<n&&(s-=n-i[d])}return{barWidthMap:e,barMaxWidthMap:i,barMinHeightMap:o,gap:s,barWidth:n,barGap:r,interval:a}},_getBarItem:function(t,e,i,o,s,r,h,l){var d,c=this.series,p=c[t],u=p.data[e],g=this._sIndex2ColorMap[t],f=[u,p],m=this.deepMerge(f,"itemStyle.normal"),_=this.deepMerge(f,"itemStyle.emphasis"),y=m.barBorderWidth;d={zlevel:this.getZlevelBase(),z:this.getZBase(),clickable:this.deepQuery(f,"clickable"),style:{x:o,y:s,width:r,height:h,brushType:"both",color:this.getItemStyleColor(this.deepQuery(f,"itemStyle.normal.color")||g,t,e,u),radius:m.barBorderRadius,lineWidth:y,strokeColor:m.barBorderColor},highlightStyle:{color:this.getItemStyleColor(this.deepQuery(f,"itemStyle.emphasis.color"),t,e,u),radius:_.barBorderRadius,lineWidth:_.barBorderWidth,strokeColor:_.barBorderColor},_orient:l};var x=d.style;d.highlightStyle.color=d.highlightStyle.color||("string"==typeof x.color?a.lift(x.color,-.3):x.color),x.x=Math.floor(x.x),x.y=Math.floor(x.y),x.height=Math.ceil(x.height),x.width=Math.ceil(x.width),y>0&&x.height>y&&x.width>y?(x.y+=y/2,x.height-=y,x.x+=y/2,x.width-=y):x.brushType="fill",d.highlightStyle.textColor=d.highlightStyle.color,d=this.addLabel(d,p,u,i,l);for(var v=[x,d.highlightStyle],b=0,S=v.length;S>b;b++){var T=v[b].textPosition;if("insideLeft"===T||"insideRight"===T||"insideTop"===T||"insideBottom"===T){var z=5;switch(T){case"insideLeft":v[b].textX=x.x+z,v[b].textY=x.y+x.height/2,v[b].textAlign="left",v[b].textBaseline="middle";break;case"insideRight":v[b].textX=x.x+x.width-z,v[b].textY=x.y+x.height/2,v[b].textAlign="right",v[b].textBaseline="middle";break;case"insideTop":v[b].textX=x.x+x.width/2,v[b].textY=x.y+z/2,v[b].textAlign="center",v[b].textBaseline="top";break;case"insideBottom":v[b].textX=x.x+x.width/2,v[b].textY=x.y+x.height-z/2,v[b].textAlign="center",v[b].textBaseline="bottom"}v[b].textPosition="specific",v[b].textColor=v[b].textColor||"#fff"}}return this.deepQuery([u,p,this.option],"calculable")&&(this.setCalculable(d),d.draggable=!0),n.pack(d,c[t],t,c[t].data[e],e,i),d},getMarkCoord:function(t,e){var i,o,s=this.series[t],n=this.xMarkMap[t],r=this.component.xAxis.getAxis(s.xAxisIndex),a=this.component.yAxis.getAxis(s.yAxisIndex);if(!e.type||"max"!==e.type&&"min"!==e.type&&"average"!==e.type)if(n.isHorizontal){i="string"==typeof e.xAxis&&r.getIndexByName?r.getIndexByName(e.xAxis):e.xAxis||0;var h=n[i];h=null!=h?h:"string"!=typeof e.xAxis&&r.getCoordByIndex?r.getCoordByIndex(e.xAxis||0):r.getCoord(e.xAxis||0),o=[h,a.getCoord(e.yAxis||0)]}else{i="string"==typeof e.yAxis&&a.getIndexByName?a.getIndexByName(e.yAxis):e.yAxis||0;var l=n[i];l=null!=l?l:"string"!=typeof e.yAxis&&a.getCoordByIndex?a.getCoordByIndex(e.yAxis||0):a.getCoord(e.yAxis||0),o=[r.getCoord(e.xAxis||0),l]}else{var d=null!=e.valueIndex?e.valueIndex:null!=n.maxX0?"1":"";o=[n[e.type+"X"+d],n[e.type+"Y"+d],n[e.type+"Line"+d],n[e.type+d]]}return o},refresh:function(t){t&&(this.option=t,this.series=t.series),this.backupShapeList(),this._buildShape()},addDataAnimation:function(t,e){function i(){f--,0===f&&e&&e()}for(var o=this.series,s={},r=0,a=t.length;a>r;r++)s[t[r][0]]=t[r];for(var h,l,d,c,p,u,g,f=0,r=this.shapeList.length-1;r>=0;r--)if(u=n.get(this.shapeList[r],"seriesIndex"),s[u]&&!s[u][3]&&"rectangle"===this.shapeList[r].type){if(g=n.get(this.shapeList[r],"dataIndex"),p=o[u],s[u][2]&&g===p.data.length-1){this.zr.delShape(this.shapeList[r].id);continue}if(!s[u][2]&&0===g){this.zr.delShape(this.shapeList[r].id);continue}"horizontal"===this.shapeList[r]._orient?(c=this.component.yAxis.getAxis(p.yAxisIndex||0).getGap(),d=s[u][2]?-c:c,h=0):(l=this.component.xAxis.getAxis(p.xAxisIndex||0).getGap(),h=s[u][2]?l:-l,d=0),this.shapeList[r].position=[0,0],f++,this.zr.animate(this.shapeList[r].id,"").when(this.query(this.option,"animationDurationUpdate"),{position:[h,d]}).done(i).start()}f||i()}},r.inherits(e,i),t("../chart").define("bar",e),e}),i("echarts/util/shape/Symbol",["require","zrender/shape/Base","zrender/shape/Polygon","zrender/tool/util","./normalIsCover"],function(t){function e(t){i.call(this,t)}var i=t("zrender/shape/Base"),o=t("zrender/shape/Polygon"),s=new o({}),n=t("zrender/tool/util");return e.prototype={type:"symbol",buildPath:function(t,e){var i=e.pointList,o=i.length;if(0!==o)for(var s,n,r,a,h,l=1e4,d=Math.ceil(o/l),c=i[0]instanceof Array,p=e.size?e.size:2,u=p,g=p/2,f=2*Math.PI,m=0;d>m;m++){t.beginPath(),s=m*l,n=s+l,n=n>o?o:n;for(var _=s;n>_;_++)if(e.random&&(r=e["randomMap"+_%20]/100,u=p*r*r,g=u/2),c?(a=i[_][0],h=i[_][1]):(a=i[_].x,h=i[_].y),3>u)t.rect(a-g,h-g,u,u);else switch(e.iconType){case"circle":t.moveTo(a,h),t.arc(a,h,g,0,f,!0);break;case"diamond":t.moveTo(a,h-g),t.lineTo(a+g/3,h-g/3),t.lineTo(a+g,h),t.lineTo(a+g/3,h+g/3),t.lineTo(a,h+g),t.lineTo(a-g/3,h+g/3),t.lineTo(a-g,h),t.lineTo(a-g/3,h-g/3),t.lineTo(a,h-g);break;default:t.rect(a-g,h-g,u,u)}if(t.closePath(),d-1>m)switch(e.brushType){case"both":t.fill(),e.lineWidth>0&&t.stroke();break;case"stroke":e.lineWidth>0&&t.stroke();break;default:t.fill()}}},getRect:function(t){return t.__rect||s.getRect(t)},isCover:t("./normalIsCover")},n.inherits(e,i),e}),i("echarts/chart/pie",["require","./base","zrender/shape/Text","zrender/shape/Ring","zrender/shape/Circle","zrender/shape/Sector","zrender/shape/Polyline","../config","../util/ecData","zrender/tool/util","zrender/tool/math","zrender/tool/color","../chart"],function(t){function e(t,e,o,s,n){i.call(this,t,e,o,s,n);var r=this;r.shapeHandler.onmouseover=function(t){var e=t.target,i=l.get(e,"seriesIndex"),o=l.get(e,"dataIndex"),s=l.get(e,"special"),n=[e.style.x,e.style.y],a=e.style.startAngle,h=e.style.endAngle,d=((h+a)/2+360)%360,c=e.highlightStyle.color,p=r.getLabel(i,o,s,n,d,c,!0);p&&r.zr.addHoverShape(p);var u=r.getLabelLine(i,o,n,e.style.r0,e.style.r,d,c,!0);u&&r.zr.addHoverShape(u)},this.refresh(s)}var i=t("./base"),o=t("zrender/shape/Text"),s=t("zrender/shape/Ring"),n=t("zrender/shape/Circle"),r=t("zrender/shape/Sector"),a=t("zrender/shape/Polyline"),h=t("../config");h.pie={zlevel:0,z:2,clickable:!0,legendHoverLink:!0,center:["50%","50%"],radius:[0,"75%"],clockWise:!0,startAngle:90,minAngle:0,selectedOffset:10,itemStyle:{normal:{borderColor:"rgba(0,0,0,0)",borderWidth:1,label:{show:!0,position:"outer"},labelLine:{show:!0,length:20,lineStyle:{width:1,type:"solid"}}},emphasis:{borderColor:"rgba(0,0,0,0)",borderWidth:1,label:{show:!1},labelLine:{show:!1,length:20,lineStyle:{width:1,type:"solid"}}}}};var l=t("../util/ecData"),d=t("zrender/tool/util"),c=t("zrender/tool/math"),p=t("zrender/tool/color");return e.prototype={type:h.CHART_TYPE_PIE,_buildShape:function(){var t=this.series,e=this.component.legend;this.selectedMap={},this._selected={};var i,o,r;this._selectedMode=!1;for(var a,d=0,c=t.length;c>d;d++)if(t[d].type===h.CHART_TYPE_PIE){if(t[d]=this.reformOption(t[d]),this.legendHoverLink=t[d].legendHoverLink||this.legendHoverLink,a=t[d].name||"",this.selectedMap[a]=e?e.isSelected(a):!0,!this.selectedMap[a])continue;i=this.parseCenter(this.zr,t[d].center),o=this.parseRadius(this.zr,t[d].radius),this._selectedMode=this._selectedMode||t[d].selectedMode,this._selected[d]=[],this.deepQuery([t[d],this.option],"calculable")&&(r={zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{x:i[0],y:i[1],r0:o[0]<=10?0:o[0]-10,r:o[1]+10,brushType:"stroke",lineWidth:1,strokeColor:t[d].calculableHolderColor||this.ecTheme.calculableHolderColor||h.calculableHolderColor}},l.pack(r,t[d],d,void 0,-1),this.setCalculable(r),r=o[0]<=10?new n(r):new s(r),this.shapeList.push(r)),this._buildSinglePie(d),this.buildMark(d)}this.addShapeList()},_buildSinglePie:function(t){for(var e,i=this.series,o=i[t],s=o.data,n=this.component.legend,r=0,a=0,h=0,l=Number.NEGATIVE_INFINITY,d=[],c=0,p=s.length;p>c;c++)e=s[c].name,this.selectedMap[e]=n?n.isSelected(e):!0,this.selectedMap[e]&&!isNaN(s[c].value)&&(0!==+s[c].value?r++:a++,h+=+s[c].value,l=Math.max(l,+s[c].value));if(0!==h){for(var u,g,f,m,_,y,x=100,v=o.clockWise,b=(o.startAngle.toFixed(2)-0+360)%360,S=o.minAngle||.01,T=360-S*r-.01*a,z=o.roseType,c=0,p=s.length;p>c;c++)if(e=s[c].name,this.selectedMap[e]&&!isNaN(s[c].value)){if(g=n?n.getColor(e):this.zr.getColor(c),x=s[c].value/h,u="area"!=z?v?b-x*T-(0!==x?S:.01):x*T+b+(0!==x?S:.01):v?b-360/p:360/p+b,u=u.toFixed(2)-0,x=(100*x).toFixed(2),f=this.parseCenter(this.zr,o.center),m=this.parseRadius(this.zr,o.radius),_=+m[0],y=+m[1],"radius"===z?y=s[c].value/l*(y-_)*.8+.2*(y-_)+_:"area"===z&&(y=Math.sqrt(s[c].value/l)*(y-_)+_),v){var C;C=b,b=u,u=C}this._buildItem(d,t,c,x,s[c].selected,f,_,y,b,u,g),v||(b=u)}this._autoLabelLayout(d,f,y);for(var c=0,p=d.length;p>c;c++)this.shapeList.push(d[c]);d=null}},_buildItem:function(t,e,i,o,s,n,r,a,h,d,c){var p=this.series,u=((d+h)/2+360)%360,g=this.getSector(e,i,o,s,n,r,a,h,d,c);l.pack(g,p[e],e,p[e].data[i],i,p[e].data[i].name,o),t.push(g);var f=this.getLabel(e,i,o,n,u,c,!1),m=this.getLabelLine(e,i,n,r,a,u,c,!1);m&&(l.pack(m,p[e],e,p[e].data[i],i,p[e].data[i].name,o),t.push(m)),f&&(l.pack(f,p[e],e,p[e].data[i],i,p[e].data[i].name,o),f._labelLine=m,t.push(f))},getSector:function(t,e,i,o,s,n,a,h,l,d){var u=this.series,g=u[t],f=g.data[e],m=[f,g],_=this.deepMerge(m,"itemStyle.normal")||{},y=this.deepMerge(m,"itemStyle.emphasis")||{},x=this.getItemStyleColor(_.color,t,e,f)||d,v=this.getItemStyleColor(y.color,t,e,f)||("string"==typeof x?p.lift(x,-.2):x),b={zlevel:this.getZlevelBase(),z:this.getZBase(),clickable:this.deepQuery(m,"clickable"),style:{x:s[0],y:s[1],r0:n,r:a,startAngle:h,endAngle:l,brushType:"both",color:x,lineWidth:_.borderWidth,strokeColor:_.borderColor,lineJoin:"round"},highlightStyle:{color:v,lineWidth:y.borderWidth,strokeColor:y.borderColor,lineJoin:"round"},_seriesIndex:t,_dataIndex:e};if(o){var S=((b.style.startAngle+b.style.endAngle)/2).toFixed(2)-0;b.style._hasSelected=!0,b.style._x=b.style.x,b.style._y=b.style.y;var T=this.query(g,"selectedOffset");b.style.x+=c.cos(S,!0)*T,b.style.y-=c.sin(S,!0)*T,this._selected[t][e]=!0}else this._selected[t][e]=!1;return this._selectedMode&&(b.onclick=this.shapeHandler.onclick),this.deepQuery([f,g,this.option],"calculable")&&(this.setCalculable(b),b.draggable=!0),(this._needLabel(g,f,!0)||this._needLabelLine(g,f,!0))&&(b.onmouseover=this.shapeHandler.onmouseover),b=new r(b)},getLabel:function(t,e,i,s,n,r,a){var h=this.series,l=h[t],p=l.data[e];if(this._needLabel(l,p,a)){var u,g,f,m=a?"emphasis":"normal",_=d.merge(d.clone(p.itemStyle)||{},l.itemStyle),y=_[m].label,x=y.textStyle||{},v=s[0],b=s[1],S=this.parseRadius(this.zr,l.radius),T="middle";y.position=y.position||_.normal.label.position,"center"===y.position?(u=v,g=b,f="center"):"inner"===y.position||"inside"===y.position?(S=(S[0]+S[1])*(y.distance||.5),u=Math.round(v+S*c.cos(n,!0)),g=Math.round(b-S*c.sin(n,!0)),r="#fff",f="center"):(S=S[1]- -_[m].labelLine.length,u=Math.round(v+S*c.cos(n,!0)),g=Math.round(b-S*c.sin(n,!0)),f=n>=90&&270>=n?"right":"left"),"center"!=y.position&&"inner"!=y.position&&"inside"!=y.position&&(u+="left"===f?20:-20),p.__labelX=u-("left"===f?5:-5),p.__labelY=g;var z=new o({zlevel:this.getZlevelBase(),z:this.getZBase()+1,hoverable:!1,style:{x:u,y:g,color:x.color||r,text:this.getLabelText(t,e,i,m),textAlign:x.align||f,textBaseline:x.baseline||T,textFont:this.getFont(x)},highlightStyle:{brushType:"fill"}});return z._radius=S,z._labelPosition=y.position||"outer",z._rect=z.getRect(z.style),z._seriesIndex=t,z._dataIndex=e,z}},getLabelText:function(t,e,i,o){var s=this.series,n=s[t],r=n.data[e],a=this.deepQuery([r,n],"itemStyle."+o+".label.formatter");return a?"function"==typeof a?a.call(this.myChart,{seriesIndex:t,seriesName:n.name||"",series:n,dataIndex:e,data:r,name:r.name,value:r.value,percent:i}):"string"==typeof a?(a=a.replace("{a}","{a0}").replace("{b}","{b0}").replace("{c}","{c0}").replace("{d}","{d0}"),a=a.replace("{a0}",n.name).replace("{b0}",r.name).replace("{c0}",r.value).replace("{d0}",i)):void 0:r.name},getLabelLine:function(t,e,i,o,s,n,r,h){var l=this.series,p=l[t],u=p.data[e];if(this._needLabelLine(p,u,h)){var g=h?"emphasis":"normal",f=d.merge(d.clone(u.itemStyle)||{},p.itemStyle),m=f[g].labelLine,_=m.lineStyle||{},y=i[0],x=i[1],v=s,b=this.parseRadius(this.zr,p.radius)[1]- -m.length,S=c.cos(n,!0),T=c.sin(n,!0);return new a({zlevel:this.getZlevelBase(),z:this.getZBase()+1,hoverable:!1,style:{pointList:[[y+v*S,x-v*T],[y+b*S,x-b*T],[u.__labelX,u.__labelY]],strokeColor:_.color||r,lineType:_.type,lineWidth:_.width},_seriesIndex:t,_dataIndex:e})}},_needLabel:function(t,e,i){return this.deepQuery([e,t],"itemStyle."+(i?"emphasis":"normal")+".label.show")},_needLabelLine:function(t,e,i){return this.deepQuery([e,t],"itemStyle."+(i?"emphasis":"normal")+".labelLine.show")},_autoLabelLayout:function(t,e,i){for(var o=[],s=[],n=0,r=t.length;r>n;n++)("outer"===t[n]._labelPosition||"outside"===t[n]._labelPosition)&&(t[n]._rect._y=t[n]._rect.y,t[n]._rect.x<e[0]?o.push(t[n]):s.push(t[n]));this._layoutCalculate(o,e,i,-1),this._layoutCalculate(s,e,i,1)},_layoutCalculate:function(t,e,i,o){function s(e,i,o){for(var s=e;i>s;s++)if(t[s]._rect.y+=o,t[s].style.y+=o,t[s]._labelLine&&(t[s]._labelLine.style.pointList[1][1]+=o,t[s]._labelLine.style.pointList[2][1]+=o),s>e&&i>s+1&&t[s+1]._rect.y>t[s]._rect.y+t[s]._rect.height)return void n(s,o/2);n(i-1,o/2)}function n(e,i){for(var o=e;o>=0&&(t[o]._rect.y-=i,t[o].style.y-=i,t[o]._labelLine&&(t[o]._labelLine.style.pointList[1][1]-=i,t[o]._labelLine.style.pointList[2][1]-=i),!(o>0&&t[o]._rect.y>t[o-1]._rect.y+t[o-1]._rect.height));o--);}function r(t,e,i,o,s){for(var n,r,a,h=i[0],l=i[1],d=s>0?e?Number.MAX_VALUE:0:e?Number.MAX_VALUE:0,c=0,p=t.length;p>c;c++)r=Math.abs(t[c]._rect.y-l),a=t[c]._radius-o,n=o+a>r?Math.sqrt((o+a+20)*(o+a+20)-Math.pow(t[c]._rect.y-l,2)):Math.abs(t[c]._rect.x+(s>0?0:t[c]._rect.width)-h),e&&n>=d&&(n=d-10),!e&&d>=n&&(n=d+10),t[c]._rect.x=t[c].style.x=h+n*s,t[c]._labelLine&&(t[c]._labelLine.style.pointList[2][0]=h+(n-5)*s,t[c]._labelLine.style.pointList[1][0]=h+(n-20)*s),d=n}t.sort(function(t,e){return t._rect.y-e._rect.y});for(var a,h=0,l=t.length,d=[],c=[],p=0;l>p;p++)a=t[p]._rect.y-h,0>a&&s(p,l,-a,o),h=t[p]._rect.y+t[p]._rect.height;this.zr.getHeight()-h<0&&n(l-1,h-this.zr.getHeight());for(var p=0;l>p;p++)t[p]._rect.y>=e[1]?c.push(t[p]):d.push(t[p]);r(c,!0,e,i,o),r(d,!1,e,i,o)},reformOption:function(t){var e=d.merge;return t=e(e(t||{},d.clone(this.ecTheme.pie||{})),d.clone(h.pie)),t.itemStyle.normal.label.textStyle=this.getTextStyle(t.itemStyle.normal.label.textStyle),t.itemStyle.emphasis.label.textStyle=this.getTextStyle(t.itemStyle.emphasis.label.textStyle),this.z=t.z,this.zlevel=t.zlevel,t},refresh:function(t){t&&(this.option=t,this.series=t.series),this.backupShapeList(),this._buildShape()},addDataAnimation:function(t,e){function i(){a--,0===a&&e&&e()}for(var o=this.series,s={},n=0,r=t.length;r>n;n++)s[t[n][0]]=t[n];var a=0,l={},d={},c={},p=this.shapeList;this.shapeList=[];for(var u,g,f,m={},n=0,r=t.length;r>n;n++)u=t[n][0],g=t[n][2],f=t[n][3],o[u]&&o[u].type===h.CHART_TYPE_PIE&&(g?(f||(l[u+"_"+o[u].data.length]="delete"),m[u]=1):f?m[u]=0:(l[u+"_-1"]="delete",m[u]=-1),this._buildSinglePie(u));for(var _,y,n=0,r=this.shapeList.length;r>n;n++)switch(u=this.shapeList[n]._seriesIndex,_=this.shapeList[n]._dataIndex,y=u+"_"+_,this.shapeList[n].type){case"sector":l[y]=this.shapeList[n];break;case"text":d[y]=this.shapeList[n];break;case"polyline":c[y]=this.shapeList[n]}this.shapeList=[];for(var x,n=0,r=p.length;r>n;n++)if(u=p[n]._seriesIndex,s[u]){if(_=p[n]._dataIndex+m[u],y=u+"_"+_,x=l[y],!x)continue;if("sector"===p[n].type)"delete"!=x?(a++,this.zr.animate(p[n].id,"style").when(400,{startAngle:x.style.startAngle,endAngle:x.style.endAngle}).done(i).start()):(a++,this.zr.animate(p[n].id,"style").when(400,m[u]<0?{startAngle:p[n].style.startAngle}:{endAngle:p[n].style.endAngle}).done(i).start());else if("text"===p[n].type||"polyline"===p[n].type)if("delete"===x)this.zr.delShape(p[n].id);else switch(p[n].type){case"text":a++,x=d[y],this.zr.animate(p[n].id,"style").when(400,{x:x.style.x,y:x.style.y}).done(i).start();break;case"polyline":a++,x=c[y],this.zr.animate(p[n].id,"style").when(400,{pointList:x.style.pointList}).done(i).start()}}this.shapeList=p,a||i()},onclick:function(t){var e=this.series;if(this.isClick&&t.target){this.isClick=!1;for(var i,o=t.target,s=o.style,n=l.get(o,"seriesIndex"),r=l.get(o,"dataIndex"),a=0,d=this.shapeList.length;d>a;a++)if(this.shapeList[a].id===o.id){if(n=l.get(o,"seriesIndex"),r=l.get(o,"dataIndex"),s._hasSelected)o.style.x=o.style._x,o.style.y=o.style._y,o.style._hasSelected=!1,this._selected[n][r]=!1;else{var p=((s.startAngle+s.endAngle)/2).toFixed(2)-0;o.style._hasSelected=!0,this._selected[n][r]=!0,o.style._x=o.style.x,o.style._y=o.style.y,i=this.query(e[n],"selectedOffset"),o.style.x+=c.cos(p,!0)*i,o.style.y-=c.sin(p,!0)*i}this.zr.modShape(o.id)}else this.shapeList[a].style._hasSelected&&"single"===this._selectedMode&&(n=l.get(this.shapeList[a],"seriesIndex"),r=l.get(this.shapeList[a],"dataIndex"),this.shapeList[a].style.x=this.shapeList[a].style._x,this.shapeList[a].style.y=this.shapeList[a].style._y,this.shapeList[a].style._hasSelected=!1,this._selected[n][r]=!1,this.zr.modShape(this.shapeList[a].id));this.messageCenter.dispatch(h.EVENT.PIE_SELECTED,t.event,{selected:this._selected,target:l.get(o,"name")},this.myChart),this.zr.refreshNextFrame()}}},d.inherits(e,i),t("../chart").define("pie",e),e}),i("echarts/component/grid",["require","./base","zrender/shape/Rectangle","../config","zrender/tool/util","../component"],function(t){function e(t,e,o,s,n){i.call(this,t,e,o,s,n),this.refresh(s)}var i=t("./base"),o=t("zrender/shape/Rectangle"),s=t("../config");s.grid={zlevel:0,z:0,x:80,y:60,x2:80,y2:60,backgroundColor:"rgba(0,0,0,0)",borderWidth:1,borderColor:"#ccc"};var n=t("zrender/tool/util");return e.prototype={type:s.COMPONENT_TYPE_GRID,getX:function(){return this._x},getY:function(){return this._y},getWidth:function(){return this._width},getHeight:function(){return this._height},getXend:function(){return this._x+this._width},getYend:function(){return this._y+this._height},getArea:function(){return{x:this._x,y:this._y,width:this._width,height:this._height}},getBbox:function(){return[[this._x,this._y],[this.getXend(),this.getYend()]]},refixAxisShape:function(t){for(var e,i,o,n=t.xAxis._axisList.concat(t.yAxis?t.yAxis._axisList:[]),r=n.length;r--;)o=n[r],o.type==s.COMPONENT_TYPE_AXIS_VALUE&&o._min<0&&o._max>=0&&(o.isHorizontal()?e=o.getCoord(0):i=o.getCoord(0));if("undefined"!=typeof e||"undefined"!=typeof i)for(r=n.length;r--;)n[r].refixAxisShape(e,i)},refresh:function(t){if(t||this._zrWidth!=this.zr.getWidth()||this._zrHeight!=this.zr.getHeight()){this.clear(),this.option=t||this.option,this.option.grid=this.reformOption(this.option.grid);var e=this.option.grid;this._zrWidth=this.zr.getWidth(),this._zrHeight=this.zr.getHeight(),this._x=this.parsePercent(e.x,this._zrWidth),this._y=this.parsePercent(e.y,this._zrHeight);var i=this.parsePercent(e.x2,this._zrWidth),s=this.parsePercent(e.y2,this._zrHeight);this._width="undefined"==typeof e.width?this._zrWidth-this._x-i:this.parsePercent(e.width,this._zrWidth),this._width=this._width<=0?10:this._width,this._height="undefined"==typeof e.height?this._zrHeight-this._y-s:this.parsePercent(e.height,this._zrHeight),this._height=this._height<=0?10:this._height,this._x=this.subPixelOptimize(this._x,e.borderWidth),this._y=this.subPixelOptimize(this._y,e.borderWidth),this.shapeList.push(new o({zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{x:this._x,y:this._y,width:this._width,height:this._height,brushType:e.borderWidth>0?"both":"fill",color:e.backgroundColor,strokeColor:e.borderColor,lineWidth:e.borderWidth}})),this.zr.addShape(this.shapeList[0])
}}},n.inherits(e,i),t("../component").define("grid",e),e}),i("echarts/chart/base",["require","zrender/shape/Image","../util/shape/Icon","../util/shape/MarkLine","../util/shape/Symbol","zrender/shape/Polyline","zrender/shape/ShapeBundle","../config","../util/ecData","../util/ecAnimation","../util/ecEffect","../util/accMath","../component/base","../layout/EdgeBundling","zrender/tool/util","zrender/tool/area"],function(t){function e(t){return null!=t.x&&null!=t.y}function i(t,e,i,o,s){g.call(this,t,e,i,o,s);var n=this;this.selectedMap={},this.lastShapeList=[],this.shapeHandler={onclick:function(){n.isClick=!0},ondragover:function(t){var e=t.target;e.highlightStyle=e.highlightStyle||{};var i=e.highlightStyle,o=i.brushTyep,s=i.strokeColor,r=i.lineWidth;i.brushType="stroke",i.strokeColor=n.ecTheme.calculableColor||l.calculableColor,i.lineWidth="icon"===e.type?30:10,n.zr.addHoverShape(e),setTimeout(function(){i&&(i.brushType=o,i.strokeColor=s,i.lineWidth=r)},20)},ondrop:function(t){null!=d.get(t.dragged,"data")&&(n.isDrop=!0)},ondragend:function(){n.isDragend=!0}}}var o=t("zrender/shape/Image"),s=t("../util/shape/Icon"),n=t("../util/shape/MarkLine"),r=t("../util/shape/Symbol"),a=t("zrender/shape/Polyline"),h=t("zrender/shape/ShapeBundle"),l=t("../config"),d=t("../util/ecData"),c=t("../util/ecAnimation"),p=t("../util/ecEffect"),u=t("../util/accMath"),g=t("../component/base"),f=t("../layout/EdgeBundling"),m=t("zrender/tool/util"),_=t("zrender/tool/area");return i.prototype={setCalculable:function(t){return t.dragEnableTime=this.ecTheme.DRAG_ENABLE_TIME||l.DRAG_ENABLE_TIME,t.ondragover=this.shapeHandler.ondragover,t.ondragend=this.shapeHandler.ondragend,t.ondrop=this.shapeHandler.ondrop,t},ondrop:function(t,e){if(this.isDrop&&t.target&&!e.dragIn){var i,o=t.target,s=t.dragged,n=d.get(o,"seriesIndex"),r=d.get(o,"dataIndex"),a=this.series,h=this.component.legend;if(-1===r){if(d.get(s,"seriesIndex")==n)return e.dragOut=e.dragIn=e.needRefresh=!0,void(this.isDrop=!1);i={value:d.get(s,"value"),name:d.get(s,"name")},this.type===l.CHART_TYPE_PIE&&i.value<0&&(i.value=0);for(var c=!1,p=a[n].data,g=0,f=p.length;f>g;g++)p[g].name===i.name&&"-"===p[g].value&&(a[n].data[g].value=i.value,c=!0);!c&&a[n].data.push(i),h&&h.add(i.name,s.style.color||s.style.strokeColor)}else i=a[n].data[r]||"-",null!=i.value?(a[n].data[r].value="-"!=i.value?u.accAdd(a[n].data[r].value,d.get(s,"value")):d.get(s,"value"),(this.type===l.CHART_TYPE_FUNNEL||this.type===l.CHART_TYPE_PIE)&&(h&&1===h.getRelatedAmount(i.name)&&this.component.legend.del(i.name),i.name+=this.option.nameConnector+d.get(s,"name"),h&&h.add(i.name,s.style.color||s.style.strokeColor))):a[n].data[r]="-"!=i?u.accAdd(a[n].data[r],d.get(s,"value")):d.get(s,"value");e.dragIn=e.dragIn||!0,this.isDrop=!1;var m=this;setTimeout(function(){m.zr.trigger("mousemove",t.event)},300)}},ondragend:function(t,e){if(this.isDragend&&t.target&&!e.dragOut){var i=t.target,o=d.get(i,"seriesIndex"),s=d.get(i,"dataIndex"),n=this.series;if(null!=n[o].data[s].value){n[o].data[s].value="-";var r=n[o].data[s].name,a=this.component.legend;a&&0===a.getRelatedAmount(r)&&a.del(r)}else n[o].data[s]="-";e.dragOut=!0,e.needRefresh=!0,this.isDragend=!1}},onlegendSelected:function(t,e){var i=t.selected;for(var o in this.selectedMap)this.selectedMap[o]!=i[o]&&(e.needRefresh=!0),this.selectedMap[o]=i[o]},_buildPosition:function(){this._symbol=this.option.symbolList,this._sIndex2ShapeMap={},this._sIndex2ColorMap={},this.selectedMap={},this.xMarkMap={};for(var t,e,i,o,s=this.series,n={top:[],bottom:[],left:[],right:[],other:[]},r=0,a=s.length;a>r;r++)s[r].type===this.type&&(s[r]=this.reformOption(s[r]),this.legendHoverLink=s[r].legendHoverLink||this.legendHoverLink,t=s[r].xAxisIndex,e=s[r].yAxisIndex,i=this.component.xAxis.getAxis(t),o=this.component.yAxis.getAxis(e),i.type===l.COMPONENT_TYPE_AXIS_CATEGORY?n[i.getPosition()].push(r):o.type===l.COMPONENT_TYPE_AXIS_CATEGORY?n[o.getPosition()].push(r):n.other.push(r));for(var h in n)n[h].length>0&&this._buildSinglePosition(h,n[h]);this.addShapeList()},_buildSinglePosition:function(t,e){var i=this._mapData(e),o=i.locationMap,s=i.maxDataLength;if(0!==s&&0!==o.length){switch(t){case"bottom":case"top":this._buildHorizontal(e,s,o,this.xMarkMap);break;case"left":case"right":this._buildVertical(e,s,o,this.xMarkMap);break;case"other":this._buildOther(e,s,o,this.xMarkMap)}for(var n=0,r=e.length;r>n;n++)this.buildMark(e[n])}},_mapData:function(t){for(var e,i,o,s,n=this.series,r=0,a={},h="__kener__stack__",d=this.component.legend,c=[],p=0,u=0,g=t.length;g>u;u++){if(e=n[t[u]],o=e.name,this._sIndex2ShapeMap[t[u]]=this._sIndex2ShapeMap[t[u]]||this.query(e,"symbol")||this._symbol[u%this._symbol.length],d){if(this.selectedMap[o]=d.isSelected(o),this._sIndex2ColorMap[t[u]]=d.getColor(o),s=d.getItemShape(o)){var f=s.style;if(this.type==l.CHART_TYPE_LINE)f.iconType="legendLineIcon",f.symbol=this._sIndex2ShapeMap[t[u]];else if(e.itemStyle.normal.barBorderWidth>0){var m=s.highlightStyle;f.brushType="both",f.x+=1,f.y+=1,f.width-=2,f.height-=2,f.strokeColor=m.strokeColor=e.itemStyle.normal.barBorderColor,m.lineWidth=3}d.setItemShape(o,s)}}else this.selectedMap[o]=!0,this._sIndex2ColorMap[t[u]]=this.zr.getColor(t[u]);this.selectedMap[o]&&(i=e.stack||h+t[u],null==a[i]?(a[i]=r,c[r]=[t[u]],r++):c[a[i]].push(t[u])),p=Math.max(p,e.data.length)}return{locationMap:c,maxDataLength:p}},_calculMarkMapXY:function(t,e,i){for(var o=this.series,s=0,n=e.length;n>s;s++)for(var r=0,a=e[s].length;a>r;r++){var h=e[s][r],l="xy"==i?0:"",d=this.component.grid,c=t[h];if("-1"!=i.indexOf("x")){c["counter"+l]>0&&(c["average"+l]=c["sum"+l]/c["counter"+l]);var p=this.component.xAxis.getAxis(o[h].xAxisIndex||0).getCoord(c["average"+l]);c["averageLine"+l]=[[p,d.getYend()],[p,d.getY()]],c["minLine"+l]=[[c["minX"+l],d.getYend()],[c["minX"+l],d.getY()]],c["maxLine"+l]=[[c["maxX"+l],d.getYend()],[c["maxX"+l],d.getY()]],c.isHorizontal=!1}if(l="xy"==i?1:"","-1"!=i.indexOf("y")){c["counter"+l]>0&&(c["average"+l]=c["sum"+l]/c["counter"+l]);var u=this.component.yAxis.getAxis(o[h].yAxisIndex||0).getCoord(c["average"+l]);c["averageLine"+l]=[[d.getX(),u],[d.getXend(),u]],c["minLine"+l]=[[d.getX(),c["minY"+l]],[d.getXend(),c["minY"+l]]],c["maxLine"+l]=[[d.getX(),c["maxY"+l]],[d.getXend(),c["maxY"+l]]],c.isHorizontal=!0}}},addLabel:function(t,e,i,o,s){var n=[i,e],r=this.deepMerge(n,"itemStyle.normal.label"),a=this.deepMerge(n,"itemStyle.emphasis.label"),h=r.textStyle||{},l=a.textStyle||{};if(r.show){var d=t.style;d.text=this._getLabelText(e,i,o,"normal"),d.textPosition=null==r.position?"horizontal"===s?"right":"top":r.position,d.textColor=h.color,d.textFont=this.getFont(h),d.textAlign=h.align,d.textBaseline=h.baseline}if(a.show){var c=t.highlightStyle;c.text=this._getLabelText(e,i,o,"emphasis"),c.textPosition=r.show?t.style.textPosition:null==a.position?"horizontal"===s?"right":"top":a.position,c.textColor=l.color,c.textFont=this.getFont(l),c.textAlign=l.align,c.textBaseline=l.baseline}return t},_getLabelText:function(t,e,i,o){var s=this.deepQuery([e,t],"itemStyle."+o+".label.formatter");s||"emphasis"!==o||(s=this.deepQuery([e,t],"itemStyle.normal.label.formatter"));var n=this.getDataFromOption(e,"-");return s?"function"==typeof s?s.call(this.myChart,{seriesName:t.name,series:t,name:i,value:n,data:e,status:o}):"string"==typeof s?s=s.replace("{a}","{a0}").replace("{b}","{b0}").replace("{c}","{c0}").replace("{a0}",t.name).replace("{b0}",i).replace("{c0}",this.numAddCommas(n)):void 0:n instanceof Array?null!=n[2]?this.numAddCommas(n[2]):n[0]+" , "+n[1]:this.numAddCommas(n)},buildMark:function(t){var e=this.series[t];this.selectedMap[e.name]&&(e.markLine&&this._buildMarkLine(t),e.markPoint&&this._buildMarkPoint(t))},_buildMarkPoint:function(t){for(var e,i,o=(this.markAttachStyle||{})[t],s=this.series[t],n=m.clone(s.markPoint),r=0,a=n.data.length;a>r;r++)e=n.data[r],i=this.getMarkCoord(t,e),e.x=null!=e.x?e.x:i[0],e.y=null!=e.y?e.y:i[1],!e.type||"max"!==e.type&&"min"!==e.type||(e.value=i[3],e.name=e.name||e.type,e.symbolSize=e.symbolSize||_.getTextWidth(i[3],this.getFont())/2+5);for(var h=this._markPoint(t,n),r=0,a=h.length;a>r;r++){var d=h[r];d.zlevel=this.getZlevelBase(),d.z=this.getZBase()+1;for(var c in o)d[c]=m.clone(o[c]);this.shapeList.push(d)}if(this.type===l.CHART_TYPE_FORCE||this.type===l.CHART_TYPE_CHORD)for(var r=0,a=h.length;a>r;r++)this.zr.addShape(h[r])},_buildMarkLine:function(t){for(var e,i=(this.markAttachStyle||{})[t],o=this.series[t],s=m.clone(o.markLine),n=0,r=s.data.length;r>n;n++){var a=s.data[n];!a.type||"max"!==a.type&&"min"!==a.type&&"average"!==a.type?e=[this.getMarkCoord(t,a[0]),this.getMarkCoord(t,a[1])]:(e=this.getMarkCoord(t,a),s.data[n]=[m.clone(a),{}],s.data[n][0].name=a.name||a.type,s.data[n][0].value="average"!==a.type?e[3]:+e[3].toFixed(null!=s.precision?s.precision:this.deepQuery([this.ecTheme,l],"markLine.precision")),e=e[2],a=[{},{}]),null!=e&&null!=e[0]&&null!=e[1]&&(s.data[n][0].x=null!=a[0].x?a[0].x:e[0][0],s.data[n][0].y=null!=a[0].y?a[0].y:e[0][1],s.data[n][1].x=null!=a[1].x?a[1].x:e[1][0],s.data[n][1].y=null!=a[1].y?a[1].y:e[1][1])}var d=this._markLine(t,s),c=s.large;if(c){var p=new h({style:{shapeList:d}}),u=d[0];if(u){m.merge(p.style,u.style),m.merge(p.highlightStyle={},u.highlightStyle),p.style.brushType="stroke",p.zlevel=this.getZlevelBase(),p.z=this.getZBase()+1,p.hoverable=!1;for(var g in i)p[g]=m.clone(i[g])}this.shapeList.push(p),this.zr.addShape(p),p._mark="largeLine";var f=s.effect;f.show&&(p.effect=f)}else{for(var n=0,r=d.length;r>n;n++){var _=d[n];_.zlevel=this.getZlevelBase(),_.z=this.getZBase()+1;for(var g in i)_[g]=m.clone(i[g]);this.shapeList.push(_)}if(this.type===l.CHART_TYPE_FORCE||this.type===l.CHART_TYPE_CHORD)for(var n=0,r=d.length;r>n;n++)this.zr.addShape(d[n])}},_markPoint:function(t,e){var i=this.series[t],o=this.component;m.merge(m.merge(e,m.clone(this.ecTheme.markPoint||{})),m.clone(l.markPoint)),e.name=i.name;var s,n,r,a,h,c,p,u=[],g=e.data,f=o.dataRange,_=o.legend,y=this.zr.getWidth(),x=this.zr.getHeight();if(e.large)s=this.getLargeMarkPointShape(t,e),s._mark="largePoint",s&&u.push(s);else for(var v=0,b=g.length;b>v;v++)null!=g[v].x&&null!=g[v].y&&(r=null!=g[v].value?g[v].value:"",_&&(n=_.getColor(i.name)),f&&(n=isNaN(r)?n:f.getColor(r),a=[g[v],e],h=this.deepQuery(a,"itemStyle.normal.color")||n,c=this.deepQuery(a,"itemStyle.emphasis.color")||h,null==h&&null==c)||(n=null==n?this.zr.getColor(t):n,g[v].tooltip=g[v].tooltip||e.tooltip||{trigger:"item"},g[v].name=null!=g[v].name?g[v].name:"",g[v].value=r,s=this.getSymbolShape(e,t,g[v],v,g[v].name,this.parsePercent(g[v].x,y),this.parsePercent(g[v].y,x),"pin",n,"rgba(0,0,0,0)","horizontal"),s._mark="point",p=this.deepMerge([g[v],e],"effect"),p.show&&(s.effect=p),i.type===l.CHART_TYPE_MAP&&(s._geo=this.getMarkGeo(g[v])),d.pack(s,i,t,g[v],v,g[v].name,r),u.push(s)));return u},_markLine:function(){function t(t,e){t[e]=t[e]instanceof Array?t[e].length>1?t[e]:[t[e][0],t[e][0]]:[t[e],t[e]]}return function(i,o){var s=this.series[i],n=this.component,r=n.dataRange,a=n.legend;m.merge(m.merge(o,m.clone(this.ecTheme.markLine||{})),m.clone(l.markLine));var h=a?a.getColor(s.name):this.zr.getColor(i);t(o,"symbol"),t(o,"symbolSize"),t(o,"symbolRotate");for(var c=o.data,p=[],u=this.zr.getWidth(),g=this.zr.getHeight(),_=0;_<c.length;_++){var y=c[_];if(e(y[0])&&e(y[1])){var x=this.deepMerge(y),v=[x,o],b=h,S=null!=x.value?x.value:"";if(r){b=isNaN(S)?b:r.getColor(S);var T=this.deepQuery(v,"itemStyle.normal.color")||b,z=this.deepQuery(v,"itemStyle.emphasis.color")||T;if(null==T&&null==z)continue}y[0].tooltip=x.tooltip||o.tooltip||{trigger:"item"},y[0].name=y[0].name||"",y[1].name=y[1].name||"",y[0].value=S,p.push({points:[[this.parsePercent(y[0].x,u),this.parsePercent(y[0].y,g)],[this.parsePercent(y[1].x,u),this.parsePercent(y[1].y,g)]],rawData:y,color:b})}}var C=this.query(o,"bundling.enable");if(C){var w=new f;w.maxTurningAngle=this.query(o,"bundling.maxTurningAngle")/180*Math.PI,p=w.run(p)}o.name=s.name;for(var L=[],_=0,E=p.length;E>_;_++){var M=p[_],A=M.rawEdge||M,y=A.rawData,S=null!=y.value?y.value:"",k=this.getMarkLineShape(o,i,y,_,M.points,C,A.color);k._mark="line";var O=this.deepMerge([y[0],y[1],o],"effect");O.show&&(k.effect=O,k.effect.large=o.large),s.type===l.CHART_TYPE_MAP&&(k._geo=[this.getMarkGeo(y[0]),this.getMarkGeo(y[1])]),d.pack(k,s,i,y[0],_,y[0].name+(""!==y[1].name?" > "+y[1].name:""),S),L.push(k)}return L}}(),getMarkCoord:function(){return[0,0]},getSymbolShape:function(t,e,i,n,r,a,h,l,c,p,u){var g=[i,t],f=this.getDataFromOption(i,"-");l=this.deepQuery(g,"symbol")||l;var m=this.deepQuery(g,"symbolSize");m="function"==typeof m?m(f):m,"number"==typeof m&&(m=[m,m]);var _=this.deepQuery(g,"symbolRotate"),y=this.deepMerge(g,"itemStyle.normal"),x=this.deepMerge(g,"itemStyle.emphasis"),v=null!=y.borderWidth?y.borderWidth:y.lineStyle&&y.lineStyle.width;null==v&&(v=l.match("empty")?2:0);var b=null!=x.borderWidth?x.borderWidth:x.lineStyle&&x.lineStyle.width;null==b&&(b=v+2);var S=this.getItemStyleColor(y.color,e,n,i),T=this.getItemStyleColor(x.color,e,n,i),z=m[0],C=m[1],w=new s({style:{iconType:l.replace("empty","").toLowerCase(),x:a-z,y:h-C,width:2*z,height:2*C,brushType:"both",color:l.match("empty")?p:S||c,strokeColor:y.borderColor||S||c,lineWidth:v},highlightStyle:{color:l.match("empty")?p:T||S||c,strokeColor:x.borderColor||y.borderColor||T||S||c,lineWidth:b},clickable:this.deepQuery(g,"clickable")});return l.match("image")&&(w.style.image=l.replace(new RegExp("^image:\\/\\/"),""),w=new o({style:w.style,highlightStyle:w.highlightStyle,clickable:this.deepQuery(g,"clickable")})),null!=_&&(w.rotation=[_*Math.PI/180,a,h]),l.match("star")&&(w.style.iconType="star",w.style.n=l.replace("empty","").replace("star","")-0||5),"none"===l&&(w.invisible=!0,w.hoverable=!1),w=this.addLabel(w,t,i,r,u),l.match("empty")&&(null==w.style.textColor&&(w.style.textColor=w.style.strokeColor),null==w.highlightStyle.textColor&&(w.highlightStyle.textColor=w.highlightStyle.strokeColor)),d.pack(w,t,e,i,n,r),w._x=a,w._y=h,w._dataIndex=n,w._seriesIndex=e,w},getMarkLineShape:function(t,e,i,o,s,r,h){var l=null!=i[0].value?i[0].value:"-",d=null!=i[1].value?i[1].value:"-",c=[i[0].symbol||t.symbol[0],i[1].symbol||t.symbol[1]],p=[i[0].symbolSize||t.symbolSize[0],i[1].symbolSize||t.symbolSize[1]];p[0]="function"==typeof p[0]?p[0](l):p[0],p[1]="function"==typeof p[1]?p[1](d):p[1];var u=[this.query(i[0],"symbolRotate")||t.symbolRotate[0],this.query(i[1],"symbolRotate")||t.symbolRotate[1]],g=[i[0],i[1],t],f=this.deepMerge(g,"itemStyle.normal");f.color=this.getItemStyleColor(f.color,e,o,i);var m=this.deepMerge(g,"itemStyle.emphasis");m.color=this.getItemStyleColor(m.color,e,o,i);var _=f.lineStyle,y=m.lineStyle,x=_.width;null==x&&(x=f.borderWidth);var v=y.width;null==v&&(v=null!=m.borderWidth?m.borderWidth:x+2);var b=this.deepQuery(g,"smoothness");this.deepQuery(g,"smooth")||(b=0);var S=r?a:n,T=new S({style:{symbol:c,symbolSize:p,symbolRotate:u,brushType:"both",lineType:_.type,shadowColor:_.shadowColor||_.color||f.borderColor||f.color||h,shadowBlur:_.shadowBlur,shadowOffsetX:_.shadowOffsetX,shadowOffsetY:_.shadowOffsetY,color:f.color||h,strokeColor:_.color||f.borderColor||f.color||h,lineWidth:x,symbolBorderColor:f.borderColor||f.color||h,symbolBorder:f.borderWidth},highlightStyle:{shadowColor:y.shadowColor,shadowBlur:y.shadowBlur,shadowOffsetX:y.shadowOffsetX,shadowOffsetY:y.shadowOffsetY,color:m.color||f.color||h,strokeColor:y.color||_.color||m.borderColor||f.borderColor||m.color||f.color||h,lineWidth:v,symbolBorderColor:m.borderColor||f.borderColor||m.color||f.color||h,symbolBorder:null==m.borderWidth?f.borderWidth+2:m.borderWidth},clickable:this.deepQuery(g,"clickable")}),z=T.style;return r?(z.pointList=s,z.smooth=b):(z.xStart=s[0][0],z.yStart=s[0][1],z.xEnd=s[1][0],z.yEnd=s[1][1],z.curveness=b,T.updatePoints(T.style)),T=this.addLabel(T,t,i[0],i[0].name+" : "+i[1].name)},getLargeMarkPointShape:function(t,e){var i,o,s,n,a,h,l=this.series[t],d=this.component,c=e.data,p=d.dataRange,u=d.legend,g=[c[0],e];if(u&&(o=u.getColor(l.name)),!p||(s=null!=c[0].value?c[0].value:"",o=isNaN(s)?o:p.getColor(s),n=this.deepQuery(g,"itemStyle.normal.color")||o,a=this.deepQuery(g,"itemStyle.emphasis.color")||n,null!=n||null!=a)){o=this.deepMerge(g,"itemStyle.normal").color||o;var f=this.deepQuery(g,"symbol")||"circle";f=f.replace("empty","").replace(/\d/g,""),h=this.deepMerge([c[0],e],"effect");var m=window.devicePixelRatio||1;return i=new r({style:{pointList:c,color:o,strokeColor:o,shadowColor:h.shadowColor||o,shadowBlur:(null!=h.shadowBlur?h.shadowBlur:8)*m,size:this.deepQuery(g,"symbolSize"),iconType:f,brushType:"fill",lineWidth:1},draggable:!1,hoverable:!1}),h.show&&(i.effect=h),i}},backupShapeList:function(){this.shapeList&&this.shapeList.length>0?(this.lastShapeList=this.shapeList,this.shapeList=[]):this.lastShapeList=[]},addShapeList:function(){var t,e,i=this.option.animationThreshold/(this.canvasSupported?2:4),o=this.lastShapeList,s=this.shapeList,n=o.length>0,r=n?this.query(this.option,"animationDurationUpdate"):this.query(this.option,"animationDuration"),a=this.query(this.option,"animationEasing"),h={},d={};if(this.option.animation&&!this.option.renderAsImage&&s.length<i&&!this.motionlessOnce){for(var c=0,p=o.length;p>c;c++)e=this._getAnimationKey(o[c]),e.match("undefined")?this.zr.delShape(o[c].id):(e+=o[c].type,h[e]?this.zr.delShape(o[c].id):h[e]=o[c]);for(var c=0,p=s.length;p>c;c++)e=this._getAnimationKey(s[c]),e.match("undefined")?this.zr.addShape(s[c]):(e+=s[c].type,d[e]=s[c]);for(e in h)d[e]||this.zr.delShape(h[e].id);for(e in d)h[e]?(this.zr.delShape(h[e].id),this._animateMod(h[e],d[e],r,a,0,n)):(t=this.type!=l.CHART_TYPE_LINE&&this.type!=l.CHART_TYPE_RADAR||0===e.indexOf("icon")?0:r/2,this._animateMod(!1,d[e],r,a,t,n));this.zr.refresh(),this.animationEffect()}else{this.motionlessOnce=!1,this.zr.delShape(o);for(var c=0,p=s.length;p>c;c++)this.zr.addShape(s[c])}},_getAnimationKey:function(t){return this.type!=l.CHART_TYPE_MAP&&this.type!=l.CHART_TYPE_TREEMAP&&this.type!=l.CHART_TYPE_VENN?d.get(t,"seriesIndex")+"_"+d.get(t,"dataIndex")+(t._mark?t._mark:"")+(this.type===l.CHART_TYPE_RADAR?d.get(t,"special"):""):d.get(t,"seriesIndex")+"_"+d.get(t,"dataIndex")+(t._mark?t._mark:"undefined")},_animateMod:function(t,e,i,o,s,n){switch(e.type){case"polyline":case"half-smooth-polygon":c.pointList(this.zr,t,e,i,o);break;case"rectangle":c.rectangle(this.zr,t,e,i,o);break;case"image":case"icon":c.icon(this.zr,t,e,i,o,s);break;case"candle":n?this.zr.addShape(e):c.candle(this.zr,t,e,i,o);break;case"ring":case"sector":case"circle":n?"sector"===e.type?c.sector(this.zr,t,e,i,o):this.zr.addShape(e):c.ring(this.zr,t,e,i+(d.get(e,"dataIndex")||0)%20*100,o);break;case"text":c.text(this.zr,t,e,i,o);break;case"polygon":n?c.pointList(this.zr,t,e,i,o):c.polygon(this.zr,t,e,i,o);break;case"ribbon":c.ribbon(this.zr,t,e,i,o);break;case"gauge-pointer":c.gaugePointer(this.zr,t,e,i,o);break;case"mark-line":c.markline(this.zr,t,e,i,o);break;case"bezier-curve":case"line":c.line(this.zr,t,e,i,o);break;default:this.zr.addShape(e)}},animationMark:function(t,e,i){for(var i=i||this.shapeList,o=0,s=i.length;s>o;o++)i[o]._mark&&this._animateMod(!1,i[o],t,e,0,!0);this.animationEffect(i)},animationEffect:function(t){if(!t&&this.clearEffectShape(),t=t||this.shapeList,null!=t){var e=l.EFFECT_ZLEVEL;this.canvasSupported&&this.zr.modLayer(e,{motionBlur:!0,lastFrameAlpha:.95});for(var i,o=0,s=t.length;s>o;o++)i=t[o],i._mark&&i.effect&&i.effect.show&&p[i._mark]&&(p[i._mark](this.zr,this.effectList,i,e),this.effectList[this.effectList.length-1]._mark=i._mark)}},clearEffectShape:function(t){var e=this.effectList;if(this.zr&&e&&e.length>0){t&&this.zr.modLayer(l.EFFECT_ZLEVEL,{motionBlur:!1}),this.zr.delShape(e);for(var i=0;i<e.length;i++)e[i].effectAnimator&&e[i].effectAnimator.stop()}this.effectList=[]},addMark:function(t,e,i){var o=this.series[t];if(this.selectedMap[o.name]){var s=this.query(this.option,"animationDurationUpdate"),n=this.query(this.option,"animationEasing"),r=o[i].data,a=this.shapeList.length;if(o[i].data=e.data,this["_build"+i.replace("m","M")](t),this.option.animation&&!this.option.renderAsImage)this.animationMark(s,n,this.shapeList.slice(a));else{for(var h=a,l=this.shapeList.length;l>h;h++)this.zr.addShape(this.shapeList[h]);this.zr.refreshNextFrame()}o[i].data=r}},delMark:function(t,e,i){i=i.replace("mark","").replace("large","").toLowerCase();var o=this.series[t];if(this.selectedMap[o.name]){for(var s=!1,n=[this.shapeList,this.effectList],r=2;r--;)for(var a=0,h=n[r].length;h>a;a++)if(n[r][a]._mark==i&&d.get(n[r][a],"seriesIndex")==t&&d.get(n[r][a],"name")==e){this.zr.delShape(n[r][a].id),n[r].splice(a,1),s=!0;break}s&&this.zr.refreshNextFrame()}}},m.inherits(i,g),i}),i("echarts/component/axis",["require","./base","zrender/shape/Line","../config","../util/ecData","zrender/tool/util","zrender/tool/color","./categoryAxis","./valueAxis","../component"],function(t){function e(t,e,o,s,n,r){i.call(this,t,e,o,s,n),this.axisType=r,this._axisList=[],this.refresh(s)}var i=t("./base"),o=t("zrender/shape/Line"),s=t("../config"),n=t("../util/ecData"),r=t("zrender/tool/util"),a=t("zrender/tool/color");return e.prototype={type:s.COMPONENT_TYPE_AXIS,axisBase:{_buildAxisLine:function(){var t=this.option.axisLine.lineStyle.width,e=t/2,i={_axisShape:"axisLine",zlevel:this.getZlevelBase(),z:this.getZBase()+3,hoverable:!1},s=this.grid;switch(this.option.position){case"left":i.style={xStart:s.getX()-e,yStart:s.getYend(),xEnd:s.getX()-e,yEnd:s.getY(),lineCap:"round"};break;case"right":i.style={xStart:s.getXend()+e,yStart:s.getYend(),xEnd:s.getXend()+e,yEnd:s.getY(),lineCap:"round"};break;case"bottom":i.style={xStart:s.getX(),yStart:s.getYend()+e,xEnd:s.getXend(),yEnd:s.getYend()+e,lineCap:"round"};break;case"top":i.style={xStart:s.getX(),yStart:s.getY()-e,xEnd:s.getXend(),yEnd:s.getY()-e,lineCap:"round"}}var n=i.style;""!==this.option.name&&(n.text=this.option.name,n.textPosition=this.option.nameLocation,n.textFont=this.getFont(this.option.nameTextStyle),this.option.nameTextStyle.align&&(n.textAlign=this.option.nameTextStyle.align),this.option.nameTextStyle.baseline&&(n.textBaseline=this.option.nameTextStyle.baseline),this.option.nameTextStyle.color&&(n.textColor=this.option.nameTextStyle.color)),n.strokeColor=this.option.axisLine.lineStyle.color,n.lineWidth=t,this.isHorizontal()?n.yStart=n.yEnd=this.subPixelOptimize(n.yEnd,t):n.xStart=n.xEnd=this.subPixelOptimize(n.xEnd,t),n.lineType=this.option.axisLine.lineStyle.type,i=new o(i),this.shapeList.push(i)},_axisLabelClickable:function(t,e){return t?(n.pack(e,void 0,-1,void 0,-1,e.style.text),e.hoverable=!0,e.clickable=!0,e.highlightStyle={color:a.lift(e.style.color,1),brushType:"fill"},e):e},refixAxisShape:function(t,e){if(this.option.axisLine.onZero){var i;if(this.isHorizontal()&&null!=e)for(var o=0,s=this.shapeList.length;s>o;o++)"axisLine"===this.shapeList[o]._axisShape?(this.shapeList[o].style.yStart=this.shapeList[o].style.yEnd=this.subPixelOptimize(e,this.shapeList[o].stylelineWidth),this.zr.modShape(this.shapeList[o].id)):"axisTick"===this.shapeList[o]._axisShape&&(i=this.shapeList[o].style.yEnd-this.shapeList[o].style.yStart,this.shapeList[o].style.yStart=e-i,this.shapeList[o].style.yEnd=e,this.zr.modShape(this.shapeList[o].id));if(!this.isHorizontal()&&null!=t)for(var o=0,s=this.shapeList.length;s>o;o++)"axisLine"===this.shapeList[o]._axisShape?(this.shapeList[o].style.xStart=this.shapeList[o].style.xEnd=this.subPixelOptimize(t,this.shapeList[o].stylelineWidth),this.zr.modShape(this.shapeList[o].id)):"axisTick"===this.shapeList[o]._axisShape&&(i=this.shapeList[o].style.xEnd-this.shapeList[o].style.xStart,this.shapeList[o].style.xStart=t,this.shapeList[o].style.xEnd=t+i,this.zr.modShape(this.shapeList[o].id))}},getPosition:function(){return this.option.position},isHorizontal:function(){return"bottom"===this.option.position||"top"===this.option.position}},reformOption:function(t){if(!t||t instanceof Array&&0===t.length?t=[{type:s.COMPONENT_TYPE_AXIS_VALUE}]:t instanceof Array||(t=[t]),t.length>2&&(t=[t[0],t[1]]),"xAxis"===this.axisType){(!t[0].position||"bottom"!=t[0].position&&"top"!=t[0].position)&&(t[0].position="bottom"),t.length>1&&(t[1].position="bottom"===t[0].position?"top":"bottom");for(var e=0,i=t.length;i>e;e++)t[e].type=t[e].type||"category",t[e].xAxisIndex=e,t[e].yAxisIndex=-1}else{(!t[0].position||"left"!=t[0].position&&"right"!=t[0].position)&&(t[0].position="left"),t.length>1&&(t[1].position="left"===t[0].position?"right":"left");for(var e=0,i=t.length;i>e;e++)t[e].type=t[e].type||"value",t[e].xAxisIndex=-1,t[e].yAxisIndex=e}return t},refresh:function(e){var i;e&&(this.option=e,"xAxis"===this.axisType?(this.option.xAxis=this.reformOption(e.xAxis),i=this.option.xAxis):(this.option.yAxis=this.reformOption(e.yAxis),i=this.option.yAxis),this.series=e.series);for(var o=t("./categoryAxis"),s=t("./valueAxis"),n=Math.max(i&&i.length||0,this._axisList.length),r=0;n>r;r++)!this._axisList[r]||!e||i[r]&&this._axisList[r].type==i[r].type||(this._axisList[r].dispose&&this._axisList[r].dispose(),this._axisList[r]=!1),this._axisList[r]?this._axisList[r].refresh&&this._axisList[r].refresh(i?i[r]:!1,this.series):i&&i[r]&&(this._axisList[r]="category"===i[r].type?new o(this.ecTheme,this.messageCenter,this.zr,i[r],this.myChart,this.axisBase):new s(this.ecTheme,this.messageCenter,this.zr,i[r],this.myChart,this.axisBase,this.series))},getAxis:function(t){return this._axisList[t]},getAxisCount:function(){return this._axisList.length},clear:function(){for(var t=0,e=this._axisList.length;e>t;t++)this._axisList[t].dispose&&this._axisList[t].dispose();this._axisList=[]}},r.inherits(e,i),t("../component").define("axis",e),e}),i("echarts/config",[],function(){var t={CHART_TYPE_LINE:"line",CHART_TYPE_BAR:"bar",CHART_TYPE_SCATTER:"scatter",CHART_TYPE_PIE:"pie",CHART_TYPE_RADAR:"radar",CHART_TYPE_VENN:"venn",CHART_TYPE_TREEMAP:"treemap",CHART_TYPE_MAP:"map",CHART_TYPE_K:"k",CHART_TYPE_ISLAND:"island",CHART_TYPE_FORCE:"force",CHART_TYPE_CHORD:"chord",CHART_TYPE_GAUGE:"gauge",CHART_TYPE_FUNNEL:"funnel",CHART_TYPE_EVENTRIVER:"eventRiver",COMPONENT_TYPE_TITLE:"title",COMPONENT_TYPE_LEGEND:"legend",COMPONENT_TYPE_DATARANGE:"dataRange",COMPONENT_TYPE_DATAVIEW:"dataView",COMPONENT_TYPE_DATAZOOM:"dataZoom",COMPONENT_TYPE_TOOLBOX:"toolbox",COMPONENT_TYPE_TOOLTIP:"tooltip",COMPONENT_TYPE_GRID:"grid",COMPONENT_TYPE_AXIS:"axis",COMPONENT_TYPE_POLAR:"polar",COMPONENT_TYPE_X_AXIS:"xAxis",COMPONENT_TYPE_Y_AXIS:"yAxis",COMPONENT_TYPE_AXIS_CATEGORY:"categoryAxis",COMPONENT_TYPE_AXIS_VALUE:"valueAxis",COMPONENT_TYPE_TIMELINE:"timeline",COMPONENT_TYPE_ROAMCONTROLLER:"roamController",backgroundColor:"rgba(0,0,0,0)",color:["#ff7f50","#87cefa","#da70d6","#32cd32","#6495ed","#ff69b4","#ba55d3","#cd5c5c","#ffa500","#40e0d0","#1e90ff","#ff6347","#7b68ee","#00fa9a","#ffd700","#6699FF","#ff6666","#3cb371","#b8860b","#30e0e0"],markPoint:{clickable:!0,symbol:"pin",symbolSize:10,large:!1,effect:{show:!1,loop:!0,period:15,type:"scale",scaleSize:2,bounceDistance:10},itemStyle:{normal:{borderWidth:2,label:{show:!0,position:"inside"}},emphasis:{label:{show:!0}}}},markLine:{clickable:!0,symbol:["circle","arrow"],symbolSize:[2,4],smoothness:.2,precision:2,effect:{show:!1,loop:!0,period:15,scaleSize:2},bundling:{enable:!1,maxTurningAngle:45},itemStyle:{normal:{borderWidth:1.5,label:{show:!0,position:"end"},lineStyle:{type:"dashed"}},emphasis:{label:{show:!1},lineStyle:{}}}},textStyle:{decoration:"none",fontFamily:"Arial, Verdana, sans-serif",fontFamily2:"微软雅黑",fontSize:12,fontStyle:"normal",fontWeight:"normal"},EVENT:{REFRESH:"refresh",RESTORE:"restore",RESIZE:"resize",CLICK:"click",DBLCLICK:"dblclick",HOVER:"hover",MOUSEOUT:"mouseout",DATA_CHANGED:"dataChanged",DATA_ZOOM:"dataZoom",DATA_RANGE:"dataRange",DATA_RANGE_SELECTED:"dataRangeSelected",DATA_RANGE_HOVERLINK:"dataRangeHoverLink",LEGEND_SELECTED:"legendSelected",LEGEND_HOVERLINK:"legendHoverLink",MAP_SELECTED:"mapSelected",PIE_SELECTED:"pieSelected",MAGIC_TYPE_CHANGED:"magicTypeChanged",DATA_VIEW_CHANGED:"dataViewChanged",TIMELINE_CHANGED:"timelineChanged",MAP_ROAM:"mapRoam",FORCE_LAYOUT_END:"forceLayoutEnd",TOOLTIP_HOVER:"tooltipHover",TOOLTIP_IN_GRID:"tooltipInGrid",TOOLTIP_OUT_GRID:"tooltipOutGrid",ROAMCONTROLLER:"roamController"},DRAG_ENABLE_TIME:120,EFFECT_ZLEVEL:10,symbolList:["circle","rectangle","triangle","diamond","emptyCircle","emptyRectangle","emptyTriangle","emptyDiamond"],loadingEffect:"spin",loadingText:"Loading...",noDataEffect:"bubble",noDataText:"No Data",calculable:!1,calculableColor:"rgba(255,165,0,0.6)",calculableHolderColor:"#ccc",nameConnector:" & ",valueConnector:": ",animation:!0,addDataAnimation:!0,animationThreshold:2e3,animationDuration:2e3,animationDurationUpdate:500,animationEasing:"ExponentialOut"};return t}),i("zrender/tool/util",["require","../dep/excanvas"],function(t){function e(t){return t&&1===t.nodeType&&"string"==typeof t.nodeName}function i(t){if("object"==typeof t&&null!==t){var o=t;if(t instanceof Array){o=[];for(var s=0,n=t.length;n>s;s++)o[s]=i(t[s])}else if(!m[_.call(t)]&&!e(t)){o={};for(var r in t)t.hasOwnProperty(r)&&(o[r]=i(t[r]))}return o}return t}function o(t,i,o,n){if(i.hasOwnProperty(o)){var r=t[o];"object"!=typeof r||m[_.call(r)]||e(r)?!n&&o in t||(t[o]=i[o]):s(t[o],i[o],n)}}function s(t,e,i){for(var s in e)o(t,e,s,i);return t}function n(){if(!c)if(t("../dep/excanvas"),window.G_vmlCanvasManager){var e=document.createElement("div");e.style.position="absolute",e.style.top="-1000px",document.body.appendChild(e),c=G_vmlCanvasManager.initElement(e).getContext("2d")}else c=document.createElement("canvas").getContext("2d");return c}function r(){return u||(p=document.createElement("canvas"),g=p.width,f=p.height,u=p.getContext("2d")),u}function a(t,e){var i,o=100;t+y>g&&(g=t+y+o,p.width=g,i=!0),e+x>f&&(f=e+x+o,p.height=f,i=!0),-y>t&&(y=Math.ceil(-t/o)*o,g+=y,p.width=g,i=!0),-x>e&&(x=Math.ceil(-e/o)*o,f+=x,p.height=f,i=!0),i&&u.translate(y,x)}function h(){return{x:y,y:x}}function l(t,e){if(t.indexOf)return t.indexOf(e);for(var i=0,o=t.length;o>i;i++)if(t[i]===e)return i;return-1}function d(t,e){function i(){}var o=t.prototype;i.prototype=e.prototype,t.prototype=new i;for(var s in o)t.prototype[s]=o[s];t.constructor=t}var c,p,u,g,f,m={"[object Function]":1,"[object RegExp]":1,"[object Date]":1,"[object Error]":1,"[object CanvasGradient]":1},_=Object.prototype.toString,y=0,x=0;return{inherits:d,clone:i,merge:s,getContext:n,getPixelContext:r,getPixelOffset:h,adjustCanvasSize:a,indexOf:l}}),i("echarts/component/dataRange",["require","./base","zrender/shape/Text","zrender/shape/Rectangle","../util/shape/HandlePolygon","../config","zrender/tool/util","zrender/tool/event","zrender/tool/area","zrender/tool/color","../component"],function(t){function e(t,e,o,s,n){if("undefined"==typeof this.query(s,"dataRange.min")||"undefined"==typeof this.query(s,"dataRange.max"))return void console.error("option.dataRange.min or option.dataRange.max has not been defined.");i.call(this,t,e,o,s,n);var a=this;a._ondrift=function(t,e){return a.__ondrift(this,t,e)},a._ondragend=function(){return a.__ondragend()},a._dataRangeSelected=function(t){return a.__dataRangeSelected(t)},a._dispatchHoverLink=function(t){return a.__dispatchHoverLink(t)},a._onhoverlink=function(t){return a.__onhoverlink(t)},this._selectedMap={},this._range={},this.refresh(s),e.bind(r.EVENT.HOVER,this._onhoverlink)}var i=t("./base"),o=t("zrender/shape/Text"),s=t("zrender/shape/Rectangle"),n=t("../util/shape/HandlePolygon"),r=t("../config");r.dataRange={zlevel:0,z:4,show:!0,orient:"vertical",x:"left",y:"bottom",backgroundColor:"rgba(0,0,0,0)",borderColor:"#ccc",borderWidth:0,padding:5,itemGap:10,itemWidth:20,itemHeight:14,precision:0,splitNumber:5,calculable:!1,selectedMode:!0,hoverLink:!0,realtime:!0,color:["#006edd","#e0ffff"],textStyle:{color:"#333"}};var a=t("zrender/tool/util"),h=t("zrender/tool/event"),l=t("zrender/tool/area"),d=t("zrender/tool/color");return e.prototype={type:r.COMPONENT_TYPE_DATARANGE,_textGap:10,_buildShape:function(){if(this._itemGroupLocation=this._getItemGroupLocation(),this._buildBackground(),this.dataRangeOption.splitNumber<=0||this.dataRangeOption.calculable?this._buildGradient():this._buildItem(),this.dataRangeOption.show)for(var t=0,e=this.shapeList.length;e>t;t++)this.zr.addShape(this.shapeList[t]);
this._syncShapeFromRange()},_buildItem:function(){var t,e,i,n,r=this._valueTextList,a=r.length,h=this.getFont(this.dataRangeOption.textStyle),d=this._itemGroupLocation.x,c=this._itemGroupLocation.y,p=this.dataRangeOption.itemWidth,u=this.dataRangeOption.itemHeight,g=this.dataRangeOption.itemGap,f=l.getTextHeight("国",h);"vertical"==this.dataRangeOption.orient&&"right"==this.dataRangeOption.x&&(d=this._itemGroupLocation.x+this._itemGroupLocation.width-p);var m=!0;this.dataRangeOption.text&&(m=!1,this.dataRangeOption.text[0]&&(i=this._getTextShape(d,c,this.dataRangeOption.text[0]),"horizontal"==this.dataRangeOption.orient?d+=l.getTextWidth(this.dataRangeOption.text[0],h)+this._textGap:(c+=f+this._textGap,i.style.y+=f/2+this._textGap,i.style.textBaseline="bottom"),this.shapeList.push(new o(i))));for(var _=0;a>_;_++)t=r[_],n=this.getColorByIndex(_),e=this._getItemShape(d,c,p,u,this._selectedMap[_]?n:"#ccc"),e._idx=_,e.onmousemove=this._dispatchHoverLink,this.dataRangeOption.selectedMode&&(e.clickable=!0,e.onclick=this._dataRangeSelected),this.shapeList.push(new s(e)),m&&(i={zlevel:this.getZlevelBase(),z:this.getZBase(),style:{x:d+p+5,y:c,color:this._selectedMap[_]?this.dataRangeOption.textStyle.color:"#ccc",text:r[_],textFont:h,textBaseline:"top"},highlightStyle:{brushType:"fill"}},"vertical"==this.dataRangeOption.orient&&"right"==this.dataRangeOption.x&&(i.style.x-=p+10,i.style.textAlign="right"),i._idx=_,i.onmousemove=this._dispatchHoverLink,this.dataRangeOption.selectedMode&&(i.clickable=!0,i.onclick=this._dataRangeSelected),this.shapeList.push(new o(i))),"horizontal"==this.dataRangeOption.orient?d+=p+(m?5:0)+(m?l.getTextWidth(t,h):0)+g:c+=u+g;!m&&this.dataRangeOption.text[1]&&("horizontal"==this.dataRangeOption.orient?d=d-g+this._textGap:c=c-g+this._textGap,i=this._getTextShape(d,c,this.dataRangeOption.text[1]),"horizontal"!=this.dataRangeOption.orient&&(i.style.y-=5,i.style.textBaseline="top"),this.shapeList.push(new o(i)))},_buildGradient:function(){var e,i,n=this.getFont(this.dataRangeOption.textStyle),r=this._itemGroupLocation.x,a=this._itemGroupLocation.y,h=this.dataRangeOption.itemWidth,d=this.dataRangeOption.itemHeight,c=l.getTextHeight("国",n),p=10,u=!0;this.dataRangeOption.text&&(u=!1,this.dataRangeOption.text[0]&&(i=this._getTextShape(r,a,this.dataRangeOption.text[0]),"horizontal"==this.dataRangeOption.orient?r+=l.getTextWidth(this.dataRangeOption.text[0],n)+this._textGap:(a+=c+this._textGap,i.style.y+=c/2+this._textGap,i.style.textBaseline="bottom"),this.shapeList.push(new o(i))));for(var g=t("zrender/tool/color"),f=1/(this.dataRangeOption.color.length-1),m=[],_=0,y=this.dataRangeOption.color.length;y>_;_++)m.push([_*f,this.dataRangeOption.color[_]]);"horizontal"==this.dataRangeOption.orient?(e={zlevel:this.getZlevelBase(),z:this.getZBase(),style:{x:r,y:a,width:h*p,height:d,color:g.getLinearGradient(r,a,r+h*p,a,m)},hoverable:!1},r+=h*p+this._textGap):(e={zlevel:this.getZlevelBase(),z:this.getZBase(),style:{x:r,y:a,width:h,height:d*p,color:g.getLinearGradient(r,a,r,a+d*p,m)},hoverable:!1},a+=d*p+this._textGap),this.shapeList.push(new s(e)),this._calculableLocation=e.style,this.dataRangeOption.calculable&&(this._buildFiller(),this._bulidMask(),this._bulidHandle()),this._buildIndicator(),!u&&this.dataRangeOption.text[1]&&(i=this._getTextShape(r,a,this.dataRangeOption.text[1]),this.shapeList.push(new o(i)))},_buildIndicator:function(){var t,e,i=this._calculableLocation.x,o=this._calculableLocation.y,s=this._calculableLocation.width,r=this._calculableLocation.height,a=5;"horizontal"==this.dataRangeOption.orient?"bottom"!=this.dataRangeOption.y?(t=[[i,o+r],[i-a,o+r+a],[i+a,o+r+a]],e="bottom"):(t=[[i,o],[i-a,o-a],[i+a,o-a]],e="top"):"right"!=this.dataRangeOption.x?(t=[[i+s,o],[i+s+a,o-a],[i+s+a,o+a]],e="right"):(t=[[i,o],[i-a,o-a],[i-a,o+a]],e="left"),this._indicatorShape={style:{pointList:t,color:"#fff",__rect:{x:Math.min(t[0][0],t[1][0]),y:Math.min(t[0][1],t[1][1]),width:a*("horizontal"==this.dataRangeOption.orient?2:1),height:a*("horizontal"==this.dataRangeOption.orient?1:2)}},highlightStyle:{brushType:"fill",textPosition:e,textColor:this.dataRangeOption.textStyle.color},hoverable:!1},this._indicatorShape=new n(this._indicatorShape)},_buildFiller:function(){this._fillerShape={zlevel:this.getZlevelBase(),z:this.getZBase()+1,style:{x:this._calculableLocation.x,y:this._calculableLocation.y,width:this._calculableLocation.width,height:this._calculableLocation.height,color:"rgba(255,255,255,0)"},highlightStyle:{strokeColor:"rgba(255,255,255,0.5)",lineWidth:1},draggable:!0,ondrift:this._ondrift,ondragend:this._ondragend,onmousemove:this._dispatchHoverLink,_type:"filler"},this._fillerShape=new s(this._fillerShape),this.shapeList.push(this._fillerShape)},_bulidHandle:function(){var t,e,i,o,s,r,a,h,d=this._calculableLocation.x,c=this._calculableLocation.y,p=this._calculableLocation.width,u=this._calculableLocation.height,g=this.getFont(this.dataRangeOption.textStyle),f=l.getTextHeight("国",g),m=Math.max(l.getTextWidth(this._textFormat(this.dataRangeOption.max),g),l.getTextWidth(this._textFormat(this.dataRangeOption.min),g))+2;"horizontal"==this.dataRangeOption.orient?"bottom"!=this.dataRangeOption.y?(t=[[d,c],[d,c+u+f],[d-f,c+u+f],[d-1,c+u],[d-1,c]],e=d-m/2-f,i=c+u+f/2+2,o={x:d-m-f,y:c+u,width:m+f,height:f},s=[[d+p,c],[d+p,c+u+f],[d+p+f,c+u+f],[d+p+1,c+u],[d+p+1,c]],r=d+p+m/2+f,a=i,h={x:d+p,y:c+u,width:m+f,height:f}):(t=[[d,c+u],[d,c-f],[d-f,c-f],[d-1,c],[d-1,c+u]],e=d-m/2-f,i=c-f/2-2,o={x:d-m-f,y:c-f,width:m+f,height:f},s=[[d+p,c+u],[d+p,c-f],[d+p+f,c-f],[d+p+1,c],[d+p+1,c+u]],r=d+p+m/2+f,a=i,h={x:d+p,y:c-f,width:m+f,height:f}):(m+=f,"right"!=this.dataRangeOption.x?(t=[[d,c],[d+p+f,c],[d+p+f,c-f],[d+p,c-1],[d,c-1]],e=d+p+m/2+f/2,i=c-f/2,o={x:d+p,y:c-f,width:m+f,height:f},s=[[d,c+u],[d+p+f,c+u],[d+p+f,c+f+u],[d+p,c+1+u],[d,c+u+1]],r=e,a=c+u+f/2,h={x:d+p,y:c+u,width:m+f,height:f}):(t=[[d+p,c],[d-f,c],[d-f,c-f],[d,c-1],[d+p,c-1]],e=d-m/2-f/2,i=c-f/2,o={x:d-m-f,y:c-f,width:m+f,height:f},s=[[d+p,c+u],[d-f,c+u],[d-f,c+f+u],[d,c+1+u],[d+p,c+u+1]],r=e,a=c+u+f/2,h={x:d-m-f,y:c+u,width:m+f,height:f})),this._startShape={style:{pointList:t,text:this._textFormat(this.dataRangeOption.max),textX:e,textY:i,textFont:g,color:this.getColor(this.dataRangeOption.max),rect:o,x:t[0][0],y:t[0][1],_x:t[0][0],_y:t[0][1]}},this._startShape.highlightStyle={strokeColor:this._startShape.style.color,lineWidth:1},this._endShape={style:{pointList:s,text:this._textFormat(this.dataRangeOption.min),textX:r,textY:a,textFont:g,color:this.getColor(this.dataRangeOption.min),rect:h,x:s[0][0],y:s[0][1],_x:s[0][0],_y:s[0][1]}},this._endShape.highlightStyle={strokeColor:this._endShape.style.color,lineWidth:1},this._startShape.zlevel=this._endShape.zlevel=this.getZlevelBase(),this._startShape.z=this._endShape.z=this.getZBase()+1,this._startShape.draggable=this._endShape.draggable=!0,this._startShape.ondrift=this._endShape.ondrift=this._ondrift,this._startShape.ondragend=this._endShape.ondragend=this._ondragend,this._startShape.style.textColor=this._endShape.style.textColor=this.dataRangeOption.textStyle.color,this._startShape.style.textAlign=this._endShape.style.textAlign="center",this._startShape.style.textPosition=this._endShape.style.textPosition="specific",this._startShape.style.textBaseline=this._endShape.style.textBaseline="middle",this._startShape.style.width=this._endShape.style.width=0,this._startShape.style.height=this._endShape.style.height=0,this._startShape.style.textPosition=this._endShape.style.textPosition="specific",this._startShape=new n(this._startShape),this._endShape=new n(this._endShape),this.shapeList.push(this._startShape),this.shapeList.push(this._endShape)},_bulidMask:function(){var t=this._calculableLocation.x,e=this._calculableLocation.y,i=this._calculableLocation.width,o=this._calculableLocation.height;this._startMask={zlevel:this.getZlevelBase(),z:this.getZBase()+1,style:{x:t,y:e,width:"horizontal"==this.dataRangeOption.orient?0:i,height:"horizontal"==this.dataRangeOption.orient?o:0,color:"#ccc"},hoverable:!1},this._endMask={zlevel:this.getZlevelBase(),z:this.getZBase()+1,style:{x:"horizontal"==this.dataRangeOption.orient?t+i:t,y:"horizontal"==this.dataRangeOption.orient?e:e+o,width:"horizontal"==this.dataRangeOption.orient?0:i,height:"horizontal"==this.dataRangeOption.orient?o:0,color:"#ccc"},hoverable:!1},this._startMask=new s(this._startMask),this._endMask=new s(this._endMask),this.shapeList.push(this._startMask),this.shapeList.push(this._endMask)},_buildBackground:function(){var t=this.reformCssArray(this.dataRangeOption.padding);this.shapeList.push(new s({zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{x:this._itemGroupLocation.x-t[3],y:this._itemGroupLocation.y-t[0],width:this._itemGroupLocation.width+t[3]+t[1],height:this._itemGroupLocation.height+t[0]+t[2],brushType:0===this.dataRangeOption.borderWidth?"fill":"both",color:this.dataRangeOption.backgroundColor,strokeColor:this.dataRangeOption.borderColor,lineWidth:this.dataRangeOption.borderWidth}}))},_getItemGroupLocation:function(){var t=this._valueTextList,e=t.length,i=this.dataRangeOption.itemGap,o=this.dataRangeOption.itemWidth,s=this.dataRangeOption.itemHeight,n=0,r=0,a=this.getFont(this.dataRangeOption.textStyle),h=l.getTextHeight("国",a),d=10;if("horizontal"==this.dataRangeOption.orient){if(this.dataRangeOption.text||this.dataRangeOption.splitNumber<=0||this.dataRangeOption.calculable)n=(this.dataRangeOption.splitNumber<=0||this.dataRangeOption.calculable?o*d+i:e*(o+i))+(this.dataRangeOption.text&&"undefined"!=typeof this.dataRangeOption.text[0]?l.getTextWidth(this.dataRangeOption.text[0],a)+this._textGap:0)+(this.dataRangeOption.text&&"undefined"!=typeof this.dataRangeOption.text[1]?l.getTextWidth(this.dataRangeOption.text[1],a)+this._textGap:0);else{o+=5;for(var c=0;e>c;c++)n+=o+l.getTextWidth(t[c],a)+i}n-=i,r=Math.max(h,s)}else{var p;if(this.dataRangeOption.text||this.dataRangeOption.splitNumber<=0||this.dataRangeOption.calculable)r=(this.dataRangeOption.splitNumber<=0||this.dataRangeOption.calculable?s*d+i:e*(s+i))+(this.dataRangeOption.text&&"undefined"!=typeof this.dataRangeOption.text[0]?this._textGap+h:0)+(this.dataRangeOption.text&&"undefined"!=typeof this.dataRangeOption.text[1]?this._textGap+h:0),p=Math.max(l.getTextWidth(this.dataRangeOption.text&&this.dataRangeOption.text[0]||"",a),l.getTextWidth(this.dataRangeOption.text&&this.dataRangeOption.text[1]||"",a)),n=Math.max(o,p);else{r=(s+i)*e,o+=5,p=0;for(var c=0;e>c;c++)p=Math.max(p,l.getTextWidth(t[c],a));n=o+p}r-=i}var u,g=this.reformCssArray(this.dataRangeOption.padding),f=this.zr.getWidth();switch(this.dataRangeOption.x){case"center":u=Math.floor((f-n)/2);break;case"left":u=g[3]+this.dataRangeOption.borderWidth;break;case"right":u=f-n-g[1]-this.dataRangeOption.borderWidth;break;default:u=this.parsePercent(this.dataRangeOption.x,f),u=isNaN(u)?0:u}var m,_=this.zr.getHeight();switch(this.dataRangeOption.y){case"top":m=g[0]+this.dataRangeOption.borderWidth;break;case"bottom":m=_-r-g[2]-this.dataRangeOption.borderWidth;break;case"center":m=Math.floor((_-r)/2);break;default:m=this.parsePercent(this.dataRangeOption.y,_),m=isNaN(m)?0:m}if(this.dataRangeOption.calculable){var y=Math.max(l.getTextWidth(this.dataRangeOption.max,a),l.getTextWidth(this.dataRangeOption.min,a))+h;"horizontal"==this.dataRangeOption.orient?(y>u&&(u=y),u+n+y>f&&(u-=y)):(h>m&&(m=h),m+r+h>_&&(m-=h))}return{x:u,y:m,width:n,height:r}},_getTextShape:function(t,e,i){return{zlevel:this.getZlevelBase(),z:this.getZBase(),style:{x:"horizontal"==this.dataRangeOption.orient?t:this._itemGroupLocation.x+this._itemGroupLocation.width/2,y:"horizontal"==this.dataRangeOption.orient?this._itemGroupLocation.y+this._itemGroupLocation.height/2:e,color:this.dataRangeOption.textStyle.color,text:i,textFont:this.getFont(this.dataRangeOption.textStyle),textBaseline:"horizontal"==this.dataRangeOption.orient?"middle":"top",textAlign:"horizontal"==this.dataRangeOption.orient?"left":"center"},hoverable:!1}},_getItemShape:function(t,e,i,o,s){return{zlevel:this.getZlevelBase(),z:this.getZBase(),style:{x:t,y:e+1,width:i,height:o-2,color:s},highlightStyle:{strokeColor:s,lineWidth:1}}},__ondrift:function(t,e,i){var o=this._calculableLocation.x,s=this._calculableLocation.y,n=this._calculableLocation.width,r=this._calculableLocation.height;return"horizontal"==this.dataRangeOption.orient?t.style.x+e<=o?t.style.x=o:t.style.x+e+t.style.width>=o+n?t.style.x=o+n-t.style.width:t.style.x+=e:t.style.y+i<=s?t.style.y=s:t.style.y+i+t.style.height>=s+r?t.style.y=s+r-t.style.height:t.style.y+=i,"filler"==t._type?this._syncHandleShape():this._syncFillerShape(t),this.dataRangeOption.realtime&&this._dispatchDataRange(),!0},__ondragend:function(){this.isDragend=!0},ondragend:function(t,e){this.isDragend&&t.target&&(e.dragOut=!0,e.dragIn=!0,this.dataRangeOption.realtime||this._dispatchDataRange(),e.needRefresh=!1,this.isDragend=!1)},_syncShapeFromRange:function(){var t=this.dataRangeOption.range||{};if(this._range.end="undefined"!=typeof this._range.end?this._range.end:"undefined"!=typeof t.start?t.start:0,this._range.start="undefined"!=typeof this._range.start?this._range.start:"undefined"!=typeof t.end?t.end:100,100!=this._range.start||0!==this._range.end){if("horizontal"==this.dataRangeOption.orient){var e=this._fillerShape.style.width;this._fillerShape.style.x+=e*(100-this._range.start)/100,this._fillerShape.style.width=e*(this._range.start-this._range.end)/100}else{var i=this._fillerShape.style.height;this._fillerShape.style.y+=i*(100-this._range.start)/100,this._fillerShape.style.height=i*(this._range.start-this._range.end)/100}this.zr.modShape(this._fillerShape.id),this._syncHandleShape()}},_syncHandleShape:function(){var t=this._calculableLocation.x,e=this._calculableLocation.y,i=this._calculableLocation.width,o=this._calculableLocation.height;"horizontal"==this.dataRangeOption.orient?(this._startShape.style.x=this._fillerShape.style.x,this._startMask.style.width=this._startShape.style.x-t,this._endShape.style.x=this._fillerShape.style.x+this._fillerShape.style.width,this._endMask.style.x=this._endShape.style.x,this._endMask.style.width=t+i-this._endShape.style.x,this._range.start=Math.ceil(100-(this._startShape.style.x-t)/i*100),this._range.end=Math.floor(100-(this._endShape.style.x-t)/i*100)):(this._startShape.style.y=this._fillerShape.style.y,this._startMask.style.height=this._startShape.style.y-e,this._endShape.style.y=this._fillerShape.style.y+this._fillerShape.style.height,this._endMask.style.y=this._endShape.style.y,this._endMask.style.height=e+o-this._endShape.style.y,this._range.start=Math.ceil(100-(this._startShape.style.y-e)/o*100),this._range.end=Math.floor(100-(this._endShape.style.y-e)/o*100)),this._syncShape()},_syncFillerShape:function(t){var e,i,o=this._calculableLocation.x,s=this._calculableLocation.y,n=this._calculableLocation.width,r=this._calculableLocation.height;"horizontal"==this.dataRangeOption.orient?(e=this._startShape.style.x,i=this._endShape.style.x,t.id==this._startShape.id&&e>=i?(i=e,this._endShape.style.x=e):t.id==this._endShape.id&&e>=i&&(e=i,this._startShape.style.x=e),this._fillerShape.style.x=e,this._fillerShape.style.width=i-e,this._startMask.style.width=e-o,this._endMask.style.x=i,this._endMask.style.width=o+n-i,this._range.start=Math.ceil(100-(e-o)/n*100),this._range.end=Math.floor(100-(i-o)/n*100)):(e=this._startShape.style.y,i=this._endShape.style.y,t.id==this._startShape.id&&e>=i?(i=e,this._endShape.style.y=e):t.id==this._endShape.id&&e>=i&&(e=i,this._startShape.style.y=e),this._fillerShape.style.y=e,this._fillerShape.style.height=i-e,this._startMask.style.height=e-s,this._endMask.style.y=i,this._endMask.style.height=s+r-i,this._range.start=Math.ceil(100-(e-s)/r*100),this._range.end=Math.floor(100-(i-s)/r*100)),this._syncShape()},_syncShape:function(){this._startShape.position=[this._startShape.style.x-this._startShape.style._x,this._startShape.style.y-this._startShape.style._y],this._startShape.style.text=this._textFormat(this._gap*this._range.start+this.dataRangeOption.min),this._startShape.style.color=this._startShape.highlightStyle.strokeColor=this.getColor(this._gap*this._range.start+this.dataRangeOption.min),this._endShape.position=[this._endShape.style.x-this._endShape.style._x,this._endShape.style.y-this._endShape.style._y],this._endShape.style.text=this._textFormat(this._gap*this._range.end+this.dataRangeOption.min),this._endShape.style.color=this._endShape.highlightStyle.strokeColor=this.getColor(this._gap*this._range.end+this.dataRangeOption.min),this.zr.modShape(this._startShape.id),this.zr.modShape(this._endShape.id),this.zr.modShape(this._startMask.id),this.zr.modShape(this._endMask.id),this.zr.modShape(this._fillerShape.id),this.zr.refreshNextFrame()},_dispatchDataRange:function(){this.messageCenter.dispatch(r.EVENT.DATA_RANGE,null,{range:{start:this._range.end,end:this._range.start}},this.myChart)},__dataRangeSelected:function(t){if("single"===this.dataRangeOption.selectedMode)for(var e in this._selectedMap)this._selectedMap[e]=!1;var i=t.target._idx;this._selectedMap[i]=!this._selectedMap[i];var o=(this._colorList.length-i)*this._gap+this.dataRangeOption.min;this.messageCenter.dispatch(r.EVENT.DATA_RANGE_SELECTED,t.event,{selected:this._selectedMap,target:i,valueMax:o,valueMin:o-this._gap},this.myChart),this.messageCenter.dispatch(r.EVENT.REFRESH,null,null,this.myChart)},__dispatchHoverLink:function(t){var e,i;if(this.dataRangeOption.calculable){var o,s=this.dataRangeOption.max-this.dataRangeOption.min;o="horizontal"==this.dataRangeOption.orient?(1-(h.getX(t.event)-this._calculableLocation.x)/this._calculableLocation.width)*s:(1-(h.getY(t.event)-this._calculableLocation.y)/this._calculableLocation.height)*s,e=o-.05*s,i=o+.05*s}else{var n=t.target._idx;i=(this._colorList.length-n)*this._gap+this.dataRangeOption.min,e=i-this._gap}this.messageCenter.dispatch(r.EVENT.DATA_RANGE_HOVERLINK,t.event,{valueMin:e,valueMax:i},this.myChart)},__onhoverlink:function(t){if(this.dataRangeOption.show&&this.dataRangeOption.hoverLink&&this._indicatorShape&&t&&null!=t.seriesIndex&&null!=t.dataIndex){var e=t.value;if(""===e||isNaN(e))return;e<this.dataRangeOption.min?e=this.dataRangeOption.min:e>this.dataRangeOption.max&&(e=this.dataRangeOption.max),this._indicatorShape.position="horizontal"==this.dataRangeOption.orient?[(this.dataRangeOption.max-e)/(this.dataRangeOption.max-this.dataRangeOption.min)*this._calculableLocation.width,0]:[0,(this.dataRangeOption.max-e)/(this.dataRangeOption.max-this.dataRangeOption.min)*this._calculableLocation.height],this._indicatorShape.style.text=this._textFormat(t.value),this._indicatorShape.style.color=this.getColor(e),this.zr.addHoverShape(this._indicatorShape)}},_textFormat:function(t,e){if(t=(+t).toFixed(this.dataRangeOption.precision),e=null!=e?(+e).toFixed(this.dataRangeOption.precision):"",this.dataRangeOption.formatter){if("string"==typeof this.dataRangeOption.formatter)return this.dataRangeOption.formatter.replace("{value}",t).replace("{value2}",e);if("function"==typeof this.dataRangeOption.formatter)return this.dataRangeOption.formatter.call(this.myChart,t,e)}return""!==e?t+" - "+e:t},refresh:function(t){if(t){this.option=t,this.option.dataRange=this.reformOption(this.option.dataRange),this.dataRangeOption=this.option.dataRange,this.myChart.canvasSupported||(this.dataRangeOption.realtime=!1);var e=this.dataRangeOption.splitNumber<=0||this.dataRangeOption.calculable?100:this.dataRangeOption.splitNumber;if(this._colorList=d.getGradientColors(this.dataRangeOption.color,Math.max((e-this.dataRangeOption.color.length)/(this.dataRangeOption.color.length-1),0)+1),this._colorList.length>e){for(var i=this._colorList.length,o=[this._colorList[0]],s=i/(e-1),n=1;e-1>n;n++)o.push(this._colorList[Math.floor(n*s)]);o.push(this._colorList[i-1]),this._colorList=o}var r=this.dataRangeOption.precision;for(this._gap=(this.dataRangeOption.max-this.dataRangeOption.min)/e;this._gap.toFixed(r)-0!=this._gap&&5>r;)r++;this.dataRangeOption.precision=r,this._gap=((this.dataRangeOption.max-this.dataRangeOption.min)/e).toFixed(r)-0,this._valueTextList=[];for(var n=0;e>n;n++)this._selectedMap[n]=!0,this._valueTextList.unshift(this._textFormat(n*this._gap+this.dataRangeOption.min,(n+1)*this._gap+this.dataRangeOption.min))}this.clear(),this._buildShape()},getColor:function(t){if(isNaN(t))return null;if(this.dataRangeOption.min==this.dataRangeOption.max)return this._colorList[0];if(t<this.dataRangeOption.min?t=this.dataRangeOption.min:t>this.dataRangeOption.max&&(t=this.dataRangeOption.max),this.dataRangeOption.calculable&&(t-(this._gap*this._range.start+this.dataRangeOption.min)>5e-5||t-(this._gap*this._range.end+this.dataRangeOption.min)<-5e-5))return null;var e=this._colorList.length-Math.ceil((t-this.dataRangeOption.min)/(this.dataRangeOption.max-this.dataRangeOption.min)*this._colorList.length);return e==this._colorList.length&&e--,this._selectedMap[e]?this._colorList[e]:null},getColorByIndex:function(t){return t>=this._colorList.length?t=this._colorList.length-1:0>t&&(t=0),this._colorList[t]},onbeforDispose:function(){this.messageCenter.unbind(r.EVENT.HOVER,this._onhoverlink)}},a.inherits(e,i),t("../component").define("dataRange",e),e}),i("echarts/chart",[],function(){var t={},e={};return t.define=function(i,o){return e[i]=o,t},t.get=function(t){return e[t]},t}),i("echarts/chart/gauge",["require","./base","../util/shape/GaugePointer","zrender/shape/Text","zrender/shape/Line","zrender/shape/Rectangle","zrender/shape/Circle","zrender/shape/Sector","../config","../util/ecData","../util/accMath","zrender/tool/util","../chart"],function(t){function e(t,e,o,s,n){i.call(this,t,e,o,s,n),this.refresh(s)}var i=t("./base"),o=t("../util/shape/GaugePointer"),s=t("zrender/shape/Text"),n=t("zrender/shape/Line"),r=t("zrender/shape/Rectangle"),a=t("zrender/shape/Circle"),h=t("zrender/shape/Sector"),l=t("../config");l.gauge={zlevel:0,z:2,center:["50%","50%"],clickable:!0,legendHoverLink:!0,radius:"75%",startAngle:225,endAngle:-45,min:0,max:100,splitNumber:10,axisLine:{show:!0,lineStyle:{color:[[.2,"#228b22"],[.8,"#48b"],[1,"#ff4500"]],width:30}},axisTick:{show:!0,splitNumber:5,length:8,lineStyle:{color:"#eee",width:1,type:"solid"}},axisLabel:{show:!0,textStyle:{color:"auto"}},splitLine:{show:!0,length:30,lineStyle:{color:"#eee",width:2,type:"solid"}},pointer:{show:!0,length:"80%",width:8,color:"auto"},title:{show:!0,offsetCenter:[0,"-40%"],textStyle:{color:"#333",fontSize:15}},detail:{show:!0,backgroundColor:"rgba(0,0,0,0)",borderWidth:0,borderColor:"#ccc",width:100,height:40,offsetCenter:[0,"40%"],textStyle:{color:"auto",fontSize:30}}};var d=t("../util/ecData"),c=t("../util/accMath"),p=t("zrender/tool/util");return e.prototype={type:l.CHART_TYPE_GAUGE,_buildShape:function(){var t=this.series;this._paramsMap={};for(var e=0,i=t.length;i>e;e++)t[e].type===l.CHART_TYPE_GAUGE&&(t[e]=this.reformOption(t[e]),this.legendHoverLink=t[e].legendHoverLink||this.legendHoverLink,this._buildSingleGauge(e),this.buildMark(e));this.addShapeList()},_buildSingleGauge:function(t){var e=this.series[t];this._paramsMap[t]={center:this.parseCenter(this.zr,e.center),radius:this.parseRadius(this.zr,e.radius),startAngle:e.startAngle.toFixed(2)-0,endAngle:e.endAngle.toFixed(2)-0},this._paramsMap[t].totalAngle=this._paramsMap[t].startAngle-this._paramsMap[t].endAngle,this._colorMap(t),this._buildAxisLine(t),this._buildSplitLine(t),this._buildAxisTick(t),this._buildAxisLabel(t),this._buildPointer(t),this._buildTitle(t),this._buildDetail(t)},_buildAxisLine:function(t){var e=this.series[t];if(e.axisLine.show)for(var i,o,s=e.min,n=e.max-s,r=this._paramsMap[t],a=r.center,h=r.startAngle,l=r.totalAngle,c=r.colorArray,p=e.axisLine.lineStyle,u=this.parsePercent(p.width,r.radius[1]),g=r.radius[1],f=g-u,m=h,_=0,y=c.length;y>_;_++)o=h-l*(c[_][0]-s)/n,i=this._getSector(a,f,g,o,m,c[_][1],p),m=o,i._animationAdd="r",d.set(i,"seriesIndex",t),d.set(i,"dataIndex",_),this.shapeList.push(i)},_buildSplitLine:function(t){var e=this.series[t];if(e.splitLine.show)for(var i,o,s,r=this._paramsMap[t],a=e.splitNumber,h=e.min,l=e.max-h,d=e.splitLine,c=this.parsePercent(d.length,r.radius[1]),p=d.lineStyle,u=p.color,g=r.center,f=r.startAngle*Math.PI/180,m=r.totalAngle*Math.PI/180,_=r.radius[1],y=_-c,x=0;a>=x;x++)i=f-m/a*x,o=Math.sin(i),s=Math.cos(i),this.shapeList.push(new n({zlevel:this.getZlevelBase(),z:this.getZBase()+1,hoverable:!1,style:{xStart:g[0]+s*_,yStart:g[1]-o*_,xEnd:g[0]+s*y,yEnd:g[1]-o*y,strokeColor:"auto"===u?this._getColor(t,h+l/a*x):u,lineType:p.type,lineWidth:p.width,shadowColor:p.shadowColor,shadowBlur:p.shadowBlur,shadowOffsetX:p.shadowOffsetX,shadowOffsetY:p.shadowOffsetY}}))},_buildAxisTick:function(t){var e=this.series[t];if(e.axisTick.show)for(var i,o,s,r=this._paramsMap[t],a=e.splitNumber,h=e.min,l=e.max-h,d=e.axisTick,c=d.splitNumber,p=this.parsePercent(d.length,r.radius[1]),u=d.lineStyle,g=u.color,f=r.center,m=r.startAngle*Math.PI/180,_=r.totalAngle*Math.PI/180,y=r.radius[1],x=y-p,v=0,b=a*c;b>=v;v++)v%c!==0&&(i=m-_/b*v,o=Math.sin(i),s=Math.cos(i),this.shapeList.push(new n({zlevel:this.getZlevelBase(),z:this.getZBase()+1,hoverable:!1,style:{xStart:f[0]+s*y,yStart:f[1]-o*y,xEnd:f[0]+s*x,yEnd:f[1]-o*x,strokeColor:"auto"===g?this._getColor(t,h+l/b*v):g,lineType:u.type,lineWidth:u.width,shadowColor:u.shadowColor,shadowBlur:u.shadowBlur,shadowOffsetX:u.shadowOffsetX,shadowOffsetY:u.shadowOffsetY}})))},_buildAxisLabel:function(t){var e=this.series[t];if(e.axisLabel.show)for(var i,o,n,r,a=e.splitNumber,h=e.min,l=e.max-h,d=e.axisLabel.textStyle,p=this.getFont(d),u=d.color,g=this._paramsMap[t],f=g.center,m=g.startAngle,_=g.totalAngle,y=g.radius[1]-this.parsePercent(e.splitLine.length,g.radius[1])-5,x=0;a>=x;x++)r=c.accAdd(h,c.accMul(c.accDiv(l,a),x)),i=m-_/a*x,o=Math.sin(i*Math.PI/180),n=Math.cos(i*Math.PI/180),i=(i+360)%360,this.shapeList.push(new s({zlevel:this.getZlevelBase(),z:this.getZBase()+1,hoverable:!1,style:{x:f[0]+n*y,y:f[1]-o*y,color:"auto"===u?this._getColor(t,r):u,text:this._getLabelText(e.axisLabel.formatter,r),textAlign:i>=110&&250>=i?"left":70>=i||i>=290?"right":"center",textBaseline:i>=10&&170>=i?"top":i>=190&&350>=i?"bottom":"middle",textFont:p,shadowColor:d.shadowColor,shadowBlur:d.shadowBlur,shadowOffsetX:d.shadowOffsetX,shadowOffsetY:d.shadowOffsetY}}))},_buildPointer:function(t){var e=this.series[t];if(e.pointer.show){var i=e.max-e.min,s=e.pointer,n=this._paramsMap[t],r=this.parsePercent(s.length,n.radius[1]),h=this.parsePercent(s.width,n.radius[1]),l=n.center,c=this._getValue(t);c=c<e.max?c:e.max;var p=(n.startAngle-n.totalAngle/i*(c-e.min))*Math.PI/180,u="auto"===s.color?this._getColor(t,c):s.color,g=new o({zlevel:this.getZlevelBase(),z:this.getZBase()+1,clickable:this.query(e,"clickable"),style:{x:l[0],y:l[1],r:r,startAngle:n.startAngle*Math.PI/180,angle:p,color:u,width:h,shadowColor:s.shadowColor,shadowBlur:s.shadowBlur,shadowOffsetX:s.shadowOffsetX,shadowOffsetY:s.shadowOffsetY},highlightStyle:{brushType:"fill",width:h>2?2:h/2,color:"#fff"}});d.pack(g,this.series[t],t,this.series[t].data[0],0,this.series[t].data[0].name,c),this.shapeList.push(g),this.shapeList.push(new a({zlevel:this.getZlevelBase(),z:this.getZBase()+2,hoverable:!1,style:{x:l[0],y:l[1],r:s.width/2.5,color:"#fff"}}))}},_buildTitle:function(t){var e=this.series[t];if(e.title.show){var i=e.data[0],o=null!=i.name?i.name:"";if(""!==o){var n=e.title,r=n.offsetCenter,a=n.textStyle,h=a.color,l=this._paramsMap[t],d=l.center[0]+this.parsePercent(r[0],l.radius[1]),c=l.center[1]+this.parsePercent(r[1],l.radius[1]);this.shapeList.push(new s({zlevel:this.getZlevelBase(),z:this.getZBase()+(Math.abs(d-l.center[0])+Math.abs(c-l.center[1])<2*a.fontSize?2:1),hoverable:!1,style:{x:d,y:c,color:"auto"===h?this._getColor(t):h,text:o,textAlign:"center",textFont:this.getFont(a),shadowColor:a.shadowColor,shadowBlur:a.shadowBlur,shadowOffsetX:a.shadowOffsetX,shadowOffsetY:a.shadowOffsetY}}))}}},_buildDetail:function(t){var e=this.series[t];if(e.detail.show){var i=e.detail,o=i.offsetCenter,s=i.backgroundColor,n=i.textStyle,a=n.color,h=this._paramsMap[t],l=this._getValue(t),d=h.center[0]-i.width/2+this.parsePercent(o[0],h.radius[1]),c=h.center[1]+this.parsePercent(o[1],h.radius[1]);this.shapeList.push(new r({zlevel:this.getZlevelBase(),z:this.getZBase()+(Math.abs(d+i.width/2-h.center[0])+Math.abs(c+i.height/2-h.center[1])<n.fontSize?2:1),hoverable:!1,style:{x:d,y:c,width:i.width,height:i.height,brushType:"both",color:"auto"===s?this._getColor(t,l):s,lineWidth:i.borderWidth,strokeColor:i.borderColor,shadowColor:i.shadowColor,shadowBlur:i.shadowBlur,shadowOffsetX:i.shadowOffsetX,shadowOffsetY:i.shadowOffsetY,text:this._getLabelText(i.formatter,l),textFont:this.getFont(n),textPosition:"inside",textColor:"auto"===a?this._getColor(t,l):a}}))}},_getValue:function(t){return this.getDataFromOption(this.series[t].data[0])},_colorMap:function(t){var e=this.series[t],i=e.min,o=e.max-i,s=e.axisLine.lineStyle.color;s instanceof Array||(s=[[1,s]]);for(var n=[],r=0,a=s.length;a>r;r++)n.push([s[r][0]*o+i,s[r][1]]);this._paramsMap[t].colorArray=n},_getColor:function(t,e){null==e&&(e=this._getValue(t));for(var i=this._paramsMap[t].colorArray,o=0,s=i.length;s>o;o++)if(i[o][0]>=e)return i[o][1];return i[i.length-1][1]},_getSector:function(t,e,i,o,s,n,r){return new h({zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{x:t[0],y:t[1],r0:e,r:i,startAngle:o,endAngle:s,brushType:"fill",color:n,shadowColor:r.shadowColor,shadowBlur:r.shadowBlur,shadowOffsetX:r.shadowOffsetX,shadowOffsetY:r.shadowOffsetY}})},_getLabelText:function(t,e){if(t){if("function"==typeof t)return t.call(this.myChart,e);if("string"==typeof t)return t.replace("{value}",e)}return e},refresh:function(t){t&&(this.option=t,this.series=t.series),this.backupShapeList(),this._buildShape()}},p.inherits(e,i),t("../chart").define("gauge",e),e}),i("echarts/util/ecData",[],function(){function t(t,e,i,o,s,n,r,a){var h;return"undefined"!=typeof o&&(h=null==o.value?o:o.value),t._echartsData={_series:e,_seriesIndex:i,_data:o,_dataIndex:s,_name:n,_value:h,_special:r,_special2:a},t._echartsData}function e(t,e){var i=t._echartsData;if(!e)return i;switch(e){case"series":case"seriesIndex":case"data":case"dataIndex":case"name":case"value":case"special":case"special2":return i&&i["_"+e]}return null}function i(t,e,i){switch(t._echartsData=t._echartsData||{},e){case"series":case"seriesIndex":case"data":case"dataIndex":case"name":case"value":case"special":case"special2":t._echartsData["_"+e]=i}}function o(t,e){e._echartsData={_series:t._echartsData._series,_seriesIndex:t._echartsData._seriesIndex,_data:t._echartsData._data,_dataIndex:t._echartsData._dataIndex,_name:t._echartsData._name,_value:t._echartsData._value,_special:t._echartsData._special,_special2:t._echartsData._special2}}return{pack:t,set:i,get:e,clone:o}}),i("zrender/tool/color",["require","../tool/util"],function(t){function e(t){W=t}function i(){W=X}function o(t,e){return t=0|t,e=e||W,e[t%e.length]}function s(t){G=t}function n(){Z=G}function r(){return G}function a(t,e,i,o,s,n,r){N||(N=Y.getContext());for(var a=N.createRadialGradient(t,e,i,o,s,n),h=0,l=r.length;l>h;h++)a.addColorStop(r[h][0],r[h][1]);return a.__nonRecursion=!0,a}function h(t,e,i,o,s){N||(N=Y.getContext());for(var n=N.createLinearGradient(t,e,i,o),r=0,a=s.length;a>r;r++)n.addColorStop(s[r][0],s[r][1]);return n.__nonRecursion=!0,n}function l(t,e,i){t=g(t),e=g(e),t=A(t),e=A(e);for(var o=[],s=(e[0]-t[0])/i,n=(e[1]-t[1])/i,r=(e[2]-t[2])/i,a=(e[3]-t[3])/i,h=0,l=t[0],d=t[1],p=t[2],u=t[3];i>h;h++)o[h]=c([I(Math.floor(l),[0,255]),I(Math.floor(d),[0,255]),I(Math.floor(p),[0,255]),u.toFixed(4)-0],"rgba"),l+=s,d+=n,p+=r,u+=a;return l=e[0],d=e[1],p=e[2],u=e[3],o[h]=c([l,d,p,u],"rgba"),o}function d(t,e){var i=[],o=t.length;if(void 0===e&&(e=20),1===o)i=l(t[0],t[0],e);else if(o>1)for(var s=0,n=o-1;n>s;s++){var r=l(t[s],t[s+1],e);n-1>s&&r.pop(),i=i.concat(r)}return i}function c(t,e){if(e=e||"rgb",t&&(3===t.length||4===t.length)){if(t=O(t,function(t){return t>1?Math.ceil(t):t
}),e.indexOf("hex")>-1)return"#"+((1<<24)+(t[0]<<16)+(t[1]<<8)+ +t[2]).toString(16).slice(1);if(e.indexOf("hs")>-1){var i=O(t.slice(1,3),function(t){return t+"%"});t[1]=i[0],t[2]=i[1]}return e.indexOf("a")>-1?(3===t.length&&t.push(1),t[3]=I(t[3],[0,1]),e+"("+t.slice(0,4).join(",")+")"):e+"("+t.slice(0,3).join(",")+")"}}function p(t){t=z(t),t.indexOf("rgba")<0&&(t=g(t));var e=[],i=0;return t.replace(/[\d.]+/g,function(t){t=3>i?0|t:+t,e[i++]=t}),e}function u(t,e){if(!R(t))return t;var i=A(t),o=i[3];return"undefined"==typeof o&&(o=1),t.indexOf("hsb")>-1?i=P(i):t.indexOf("hsl")>-1&&(i=D(i)),e.indexOf("hsb")>-1||e.indexOf("hsv")>-1?i=H(i):e.indexOf("hsl")>-1&&(i=F(i)),i[3]=o,c(i,e)}function g(t){return u(t,"rgba")}function f(t){return u(t,"rgb")}function m(t){return u(t,"hex")}function _(t){return u(t,"hsva")}function y(t){return u(t,"hsv")}function x(t){return u(t,"hsba")}function v(t){return u(t,"hsb")}function b(t){return u(t,"hsla")}function S(t){return u(t,"hsl")}function T(t){for(var e in V)if(m(V[e])===m(t))return e;return null}function z(t){return String(t).replace(/\s+/g,"")}function C(t){if(V[t]&&(t=V[t]),t=z(t),t=t.replace(/hsv/i,"hsb"),/^#[\da-f]{3}$/i.test(t)){t=parseInt(t.slice(1),16);var e=(3840&t)<<8,i=(240&t)<<4,o=15&t;t="#"+((1<<24)+(e<<4)+e+(i<<4)+i+(o<<4)+o).toString(16).slice(1)}return t}function w(t,e){if(!R(t))return t;var i=e>0?1:-1;"undefined"==typeof e&&(e=0),e=Math.abs(e)>1?1:Math.abs(e),t=f(t);for(var o=A(t),s=0;3>s;s++)o[s]=1===i?o[s]*(1-e)|0:(255-o[s])*e+o[s]|0;return"rgb("+o.join(",")+")"}function L(t){if(!R(t))return t;var e=A(g(t));return e=O(e,function(t){return 255-t}),c(e,"rgb")}function E(t,e,i){if(!R(t)||!R(e))return t;"undefined"==typeof i&&(i=.5),i=1-I(i,[0,1]);for(var o=2*i-1,s=A(g(t)),n=A(g(e)),r=s[3]-n[3],a=((o*r===-1?o:(o+r)/(1+o*r))+1)/2,h=1-a,l=[],d=0;3>d;d++)l[d]=s[d]*a+n[d]*h;var p=s[3]*i+n[3]*(1-i);return p=Math.max(0,Math.min(1,p)),1===s[3]&&1===n[3]?c(l,"rgb"):(l[3]=p,c(l,"rgba"))}function M(){return"#"+(Math.random().toString(16)+"0000").slice(2,8)}function A(t){t=C(t);var e=t.match(q);if(null===e)throw new Error("The color format error");var i,o,s,n=[];if(e[2])i=e[2].replace("#","").split(""),s=[i[0]+i[1],i[2]+i[3],i[4]+i[5]],n=O(s,function(t){return I(parseInt(t,16),[0,255])});else if(e[4]){var r=e[4].split(",");o=r[3],s=r.slice(0,3),n=O(s,function(t){return t=Math.floor(t.indexOf("%")>0?2.55*parseInt(t,0):t),I(t,[0,255])}),"undefined"!=typeof o&&n.push(I(parseFloat(o),[0,1]))}else if(e[5]||e[6]){var a=(e[5]||e[6]).split(","),h=parseInt(a[0],0)/360,l=a[1],d=a[2];o=a[3],n=O([l,d],function(t){return I(parseFloat(t)/100,[0,1])}),n.unshift(h),"undefined"!=typeof o&&n.push(I(parseFloat(o),[0,1]))}return n}function k(t,e){if(!R(t))return t;null===e&&(e=1);var i=A(g(t));return i[3]=I(Number(e).toFixed(4),[0,1]),c(i,"rgba")}function O(t,e){if("function"!=typeof e)throw new TypeError;for(var i=t?t.length:0,o=0;i>o;o++)t[o]=e(t[o]);return t}function I(t,e){return t<=e[0]?t=e[0]:t>=e[1]&&(t=e[1]),t}function R(t){return t instanceof Array||"string"==typeof t}function P(t){var e,i,o,s=t[0],n=t[1],r=t[2];if(0===n)e=255*r,i=255*r,o=255*r;else{var a=6*s;6===a&&(a=0);var h=0|a,l=r*(1-n),d=r*(1-n*(a-h)),c=r*(1-n*(1-(a-h))),p=0,u=0,g=0;0===h?(p=r,u=c,g=l):1===h?(p=d,u=r,g=l):2===h?(p=l,u=r,g=c):3===h?(p=l,u=d,g=r):4===h?(p=c,u=l,g=r):(p=r,u=l,g=d),e=255*p,i=255*u,o=255*g}return[e,i,o]}function D(t){var e,i,o,s=t[0],n=t[1],r=t[2];if(0===n)e=255*r,i=255*r,o=255*r;else{var a;a=.5>r?r*(1+n):r+n-n*r;var h=2*r-a;e=255*B(h,a,s+1/3),i=255*B(h,a,s),o=255*B(h,a,s-1/3)}return[e,i,o]}function B(t,e,i){return 0>i&&(i+=1),i>1&&(i-=1),1>6*i?t+6*(e-t)*i:1>2*i?e:2>3*i?t+(e-t)*(2/3-i)*6:t}function H(t){var e,i,o=t[0]/255,s=t[1]/255,n=t[2]/255,r=Math.min(o,s,n),a=Math.max(o,s,n),h=a-r,l=a;if(0===h)e=0,i=0;else{i=h/a;var d=((a-o)/6+h/2)/h,c=((a-s)/6+h/2)/h,p=((a-n)/6+h/2)/h;o===a?e=p-c:s===a?e=1/3+d-p:n===a&&(e=2/3+c-d),0>e&&(e+=1),e>1&&(e-=1)}return e=360*e,i=100*i,l=100*l,[e,i,l]}function F(t){var e,i,o=t[0]/255,s=t[1]/255,n=t[2]/255,r=Math.min(o,s,n),a=Math.max(o,s,n),h=a-r,l=(a+r)/2;if(0===h)e=0,i=0;else{i=.5>l?h/(a+r):h/(2-a-r);var d=((a-o)/6+h/2)/h,c=((a-s)/6+h/2)/h,p=((a-n)/6+h/2)/h;o===a?e=p-c:s===a?e=1/3+d-p:n===a&&(e=2/3+c-d),0>e&&(e+=1),e>1&&(e-=1)}return e=360*e,i=100*i,l=100*l,[e,i,l]}var N,Y=t("../tool/util"),W=["#ff9277"," #dddd00"," #ffc877"," #bbe3ff"," #d5ffbb","#bbbbff"," #ddb000"," #b0dd00"," #e2bbff"," #ffbbe3","#ff7777"," #ff9900"," #83dd00"," #77e3ff"," #778fff","#c877ff"," #ff77ab"," #ff6600"," #aa8800"," #77c7ff","#ad77ff"," #ff77ff"," #dd0083"," #777700"," #00aa00","#0088aa"," #8400dd"," #aa0088"," #dd0000"," #772e00"],X=W,G="rgba(255,255,0,0.5)",Z=G,q=/^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+)?)%?\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+)?)%?\s*\))\s*$/i,V={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#0ff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000",blanchedalmond:"#ffebcd",blue:"#00f",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#0ff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgrey:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#f0f",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",grey:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#789",lightslategrey:"#789",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#0f0",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#f0f",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",red:"#f00",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#fff",whitesmoke:"#f5f5f5",yellow:"#ff0",yellowgreen:"#9acd32"};return{customPalette:e,resetPalette:i,getColor:o,getHighlightColor:r,customHighlight:s,resetHighlight:n,getRadialGradient:a,getLinearGradient:h,getGradientColors:d,getStepColors:l,reverse:L,mix:E,lift:w,trim:z,random:M,toRGB:f,toRGBA:g,toHex:m,toHSL:S,toHSLA:b,toHSB:v,toHSBA:x,toHSV:y,toHSVA:_,toName:T,toColor:c,toArray:p,alpha:k,getData:A}}),i("echarts/component/dataZoom",["require","./base","zrender/shape/Rectangle","zrender/shape/Polygon","../util/shape/Icon","../config","../util/date","zrender/tool/util","../component"],function(t){function e(t,e,o,s,n){i.call(this,t,e,o,s,n);var r=this;r._ondrift=function(t,e){return r.__ondrift(this,t,e)},r._ondragend=function(){return r.__ondragend()},this._fillerSize=30,this._isSilence=!1,this._zoom={},this.option.dataZoom=this.reformOption(this.option.dataZoom),this.zoomOption=this.option.dataZoom,this._handleSize=this.zoomOption.handleSize,this.myChart.canvasSupported||(this.zoomOption.realtime=!1),this._location=this._getLocation(),this._zoom=this._getZoom(),this._backupData(),this.option.dataZoom.show&&this._buildShape(),this._syncData()}var i=t("./base"),o=t("zrender/shape/Rectangle"),s=t("zrender/shape/Polygon"),n=t("../util/shape/Icon"),r=t("../config");r.dataZoom={zlevel:0,z:4,show:!1,orient:"horizontal",backgroundColor:"rgba(0,0,0,0)",dataBackgroundColor:"#eee",fillerColor:"rgba(144,197,237,0.2)",handleColor:"rgba(70,130,180,0.8)",handleSize:8,showDetail:!0,realtime:!0};var a=t("../util/date"),h=t("zrender/tool/util");return e.prototype={type:r.COMPONENT_TYPE_DATAZOOM,_buildShape:function(){this._buildBackground(),this._buildFiller(),this._buildHandle(),this._buildFrame();for(var t=0,e=this.shapeList.length;e>t;t++)this.zr.addShape(this.shapeList[t]);this._syncFrameShape()},_getLocation:function(){var t,e,i,o,s=this.component.grid;return"horizontal"==this.zoomOption.orient?(i=this.zoomOption.width||s.getWidth(),o=this.zoomOption.height||this._fillerSize,t=null!=this.zoomOption.x?this.zoomOption.x:s.getX(),e=null!=this.zoomOption.y?this.zoomOption.y:this.zr.getHeight()-o-2):(i=this.zoomOption.width||this._fillerSize,o=this.zoomOption.height||s.getHeight(),t=null!=this.zoomOption.x?this.zoomOption.x:2,e=null!=this.zoomOption.y?this.zoomOption.y:s.getY()),{x:t,y:e,width:i,height:o}},_getZoom:function(){var t=this.option.series,e=this.option.xAxis;!e||e instanceof Array||(e=[e],this.option.xAxis=e);var i=this.option.yAxis;!i||i instanceof Array||(i=[i],this.option.yAxis=i);var o,s,n=[],a=this.zoomOption.xAxisIndex;if(e&&null==a){o=[];for(var h=0,l=e.length;l>h;h++)("category"==e[h].type||null==e[h].type)&&o.push(h)}else o=a instanceof Array?a:null!=a?[a]:[];if(a=this.zoomOption.yAxisIndex,i&&null==a){s=[];for(var h=0,l=i.length;l>h;h++)"category"==i[h].type&&s.push(h)}else s=a instanceof Array?a:null!=a?[a]:[];for(var d,h=0,l=t.length;l>h;h++)if(d=t[h],d.type==r.CHART_TYPE_LINE||d.type==r.CHART_TYPE_BAR||d.type==r.CHART_TYPE_SCATTER||d.type==r.CHART_TYPE_K){for(var c=0,p=o.length;p>c;c++)if(o[c]==(d.xAxisIndex||0)){n.push(h);break}for(var c=0,p=s.length;p>c;c++)if(s[c]==(d.yAxisIndex||0)){n.push(h);break}null==this.zoomOption.xAxisIndex&&null==this.zoomOption.yAxisIndex&&d.data&&this.getDataFromOption(d.data[0])instanceof Array&&(d.type==r.CHART_TYPE_SCATTER||d.type==r.CHART_TYPE_LINE||d.type==r.CHART_TYPE_BAR)&&n.push(h)}var u=null!=this._zoom.start?this._zoom.start:null!=this.zoomOption.start?this.zoomOption.start:0,g=null!=this._zoom.end?this._zoom.end:null!=this.zoomOption.end?this.zoomOption.end:100;u>g&&(u+=g,g=u-g,u-=g);var f=Math.round((g-u)/100*("horizontal"==this.zoomOption.orient?this._location.width:this._location.height));return{start:u,end:g,start2:0,end2:100,size:f,xAxisIndex:o,yAxisIndex:s,seriesIndex:n,scatterMap:this._zoom.scatterMap||{}}},_backupData:function(){this._originalData={xAxis:{},yAxis:{},series:{}};for(var t=this.option.xAxis,e=this._zoom.xAxisIndex,i=0,o=e.length;o>i;i++)this._originalData.xAxis[e[i]]=t[e[i]].data;for(var s=this.option.yAxis,n=this._zoom.yAxisIndex,i=0,o=n.length;o>i;i++)this._originalData.yAxis[n[i]]=s[n[i]].data;for(var a,h=this.option.series,l=this._zoom.seriesIndex,i=0,o=l.length;o>i;i++)a=h[l[i]],this._originalData.series[l[i]]=a.data,a.data&&this.getDataFromOption(a.data[0])instanceof Array&&(a.type==r.CHART_TYPE_SCATTER||a.type==r.CHART_TYPE_LINE||a.type==r.CHART_TYPE_BAR)&&(this._backupScale(),this._calculScatterMap(l[i]))},_calculScatterMap:function(e){this._zoom.scatterMap=this._zoom.scatterMap||{},this._zoom.scatterMap[e]=this._zoom.scatterMap[e]||{};var i=t("../component"),o=i.get("axis"),s=h.clone(this.option.xAxis);"category"==s[0].type&&(s[0].type="value"),s[1]&&"category"==s[1].type&&(s[1].type="value");var n=new o(this.ecTheme,null,!1,{xAxis:s,series:this.option.series},this,"xAxis"),r=this.option.series[e].xAxisIndex||0;this._zoom.scatterMap[e].x=n.getAxis(r).getExtremum(),n.dispose(),s=h.clone(this.option.yAxis),"category"==s[0].type&&(s[0].type="value"),s[1]&&"category"==s[1].type&&(s[1].type="value"),n=new o(this.ecTheme,null,!1,{yAxis:s,series:this.option.series},this,"yAxis"),r=this.option.series[e].yAxisIndex||0,this._zoom.scatterMap[e].y=n.getAxis(r).getExtremum(),n.dispose()},_buildBackground:function(){var t=this._location.width,e=this._location.height;this.shapeList.push(new o({zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{x:this._location.x,y:this._location.y,width:t,height:e,color:this.zoomOption.backgroundColor}}));for(var i=0,n=this._originalData.xAxis,a=this._zoom.xAxisIndex,h=0,l=a.length;l>h;h++)i=Math.max(i,n[a[h]].length);for(var d=this._originalData.yAxis,c=this._zoom.yAxisIndex,h=0,l=c.length;l>h;h++)i=Math.max(i,d[c[h]].length);for(var p,u=this._zoom.seriesIndex[0],g=this._originalData.series[u],f=Number.MIN_VALUE,m=Number.MAX_VALUE,h=0,l=g.length;l>h;h++)p=this.getDataFromOption(g[h],0),this.option.series[u].type==r.CHART_TYPE_K&&(p=p[1]),isNaN(p)&&(p=0),f=Math.max(f,p),m=Math.min(m,p);var _=f-m,y=[],x=t/(i-(i>1?1:0)),v=e/(i-(i>1?1:0)),b=1;"horizontal"==this.zoomOption.orient&&1>x?b=Math.floor(3*i/t):"vertical"==this.zoomOption.orient&&1>v&&(b=Math.floor(3*i/e));for(var h=0,l=i;l>h;h+=b)p=this.getDataFromOption(g[h],0),this.option.series[u].type==r.CHART_TYPE_K&&(p=p[1]),isNaN(p)&&(p=0),y.push("horizontal"==this.zoomOption.orient?[this._location.x+x*h,this._location.y+e-1-Math.round((p-m)/_*(e-10))]:[this._location.x+1+Math.round((p-m)/_*(t-10)),this._location.y+v*(l-h-1)]);"horizontal"==this.zoomOption.orient?(y.push([this._location.x+t,this._location.y+e]),y.push([this._location.x,this._location.y+e])):(y.push([this._location.x,this._location.y]),y.push([this._location.x,this._location.y+e])),this.shapeList.push(new s({zlevel:this.getZlevelBase(),z:this.getZBase(),style:{pointList:y,color:this.zoomOption.dataBackgroundColor},hoverable:!1}))},_buildFiller:function(){this._fillerShae={zlevel:this.getZlevelBase(),z:this.getZBase(),draggable:!0,ondrift:this._ondrift,ondragend:this._ondragend,_type:"filler"},this._fillerShae.style="horizontal"==this.zoomOption.orient?{x:this._location.x+Math.round(this._zoom.start/100*this._location.width)+this._handleSize,y:this._location.y,width:this._zoom.size-2*this._handleSize,height:this._location.height,color:this.zoomOption.fillerColor,text:":::",textPosition:"inside"}:{x:this._location.x,y:this._location.y+Math.round(this._zoom.start/100*this._location.height)+this._handleSize,width:this._location.width,height:this._zoom.size-2*this._handleSize,color:this.zoomOption.fillerColor,text:"::",textPosition:"inside"},this._fillerShae.highlightStyle={brushType:"fill",color:"rgba(0,0,0,0)"},this._fillerShae=new o(this._fillerShae),this.shapeList.push(this._fillerShae)},_buildHandle:function(){var t=this.zoomOption.showDetail?this._getDetail():{start:"",end:""};this._startShape={zlevel:this.getZlevelBase(),z:this.getZBase(),draggable:!0,style:{iconType:"rectangle",x:this._location.x,y:this._location.y,width:this._handleSize,height:this._handleSize,color:this.zoomOption.handleColor,text:"=",textPosition:"inside"},highlightStyle:{text:t.start,brushType:"fill",textPosition:"left"},ondrift:this._ondrift,ondragend:this._ondragend},"horizontal"==this.zoomOption.orient?(this._startShape.style.height=this._location.height,this._endShape=h.clone(this._startShape),this._startShape.style.x=this._fillerShae.style.x-this._handleSize,this._endShape.style.x=this._fillerShae.style.x+this._fillerShae.style.width,this._endShape.highlightStyle.text=t.end,this._endShape.highlightStyle.textPosition="right"):(this._startShape.style.width=this._location.width,this._endShape=h.clone(this._startShape),this._startShape.style.y=this._fillerShae.style.y+this._fillerShae.style.height,this._startShape.highlightStyle.textPosition="bottom",this._endShape.style.y=this._fillerShae.style.y-this._handleSize,this._endShape.highlightStyle.text=t.end,this._endShape.highlightStyle.textPosition="top"),this._startShape=new n(this._startShape),this._endShape=new n(this._endShape),this.shapeList.push(this._startShape),this.shapeList.push(this._endShape)},_buildFrame:function(){var t=this.subPixelOptimize(this._location.x,1),e=this.subPixelOptimize(this._location.y,1);this._startFrameShape={zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{x:t,y:e,width:this._location.width-(t>this._location.x?1:0),height:this._location.height-(e>this._location.y?1:0),lineWidth:1,brushType:"stroke",strokeColor:this.zoomOption.handleColor}},this._endFrameShape=h.clone(this._startFrameShape),this._startFrameShape=new o(this._startFrameShape),this._endFrameShape=new o(this._endFrameShape),this.shapeList.push(this._startFrameShape),this.shapeList.push(this._endFrameShape)},_syncHandleShape:function(){"horizontal"==this.zoomOption.orient?(this._startShape.style.x=this._fillerShae.style.x-this._handleSize,this._endShape.style.x=this._fillerShae.style.x+this._fillerShae.style.width,this._zoom.start=(this._startShape.style.x-this._location.x)/this._location.width*100,this._zoom.end=(this._endShape.style.x+this._handleSize-this._location.x)/this._location.width*100):(this._startShape.style.y=this._fillerShae.style.y+this._fillerShae.style.height,this._endShape.style.y=this._fillerShae.style.y-this._handleSize,this._zoom.start=(this._location.y+this._location.height-this._startShape.style.y)/this._location.height*100,this._zoom.end=(this._location.y+this._location.height-this._endShape.style.y-this._handleSize)/this._location.height*100),this.zr.modShape(this._startShape.id),this.zr.modShape(this._endShape.id),this._syncFrameShape(),this.zr.refreshNextFrame()},_syncFillerShape:function(){var t,e;"horizontal"==this.zoomOption.orient?(t=this._startShape.style.x,e=this._endShape.style.x,this._fillerShae.style.x=Math.min(t,e)+this._handleSize,this._fillerShae.style.width=Math.abs(t-e)-this._handleSize,this._zoom.start=(Math.min(t,e)-this._location.x)/this._location.width*100,this._zoom.end=(Math.max(t,e)+this._handleSize-this._location.x)/this._location.width*100):(t=this._startShape.style.y,e=this._endShape.style.y,this._fillerShae.style.y=Math.min(t,e)+this._handleSize,this._fillerShae.style.height=Math.abs(t-e)-this._handleSize,this._zoom.start=(this._location.y+this._location.height-Math.max(t,e))/this._location.height*100,this._zoom.end=(this._location.y+this._location.height-Math.min(t,e)-this._handleSize)/this._location.height*100),this.zr.modShape(this._fillerShae.id),this._syncFrameShape(),this.zr.refreshNextFrame()},_syncFrameShape:function(){"horizontal"==this.zoomOption.orient?(this._startFrameShape.style.width=this._fillerShae.style.x-this._location.x,this._endFrameShape.style.x=this._fillerShae.style.x+this._fillerShae.style.width,this._endFrameShape.style.width=this._location.x+this._location.width-this._endFrameShape.style.x):(this._startFrameShape.style.y=this._fillerShae.style.y+this._fillerShae.style.height,this._startFrameShape.style.height=this._location.y+this._location.height-this._startFrameShape.style.y,this._endFrameShape.style.height=this._fillerShae.style.y-this._location.y),this.zr.modShape(this._startFrameShape.id),this.zr.modShape(this._endFrameShape.id)},_syncShape:function(){this.zoomOption.show&&("horizontal"==this.zoomOption.orient?(this._startShape.style.x=this._location.x+this._zoom.start/100*this._location.width,this._endShape.style.x=this._location.x+this._zoom.end/100*this._location.width-this._handleSize,this._fillerShae.style.x=this._startShape.style.x+this._handleSize,this._fillerShae.style.width=this._endShape.style.x-this._startShape.style.x-this._handleSize):(this._startShape.style.y=this._location.y+this._location.height-this._zoom.start/100*this._location.height,this._endShape.style.y=this._location.y+this._location.height-this._zoom.end/100*this._location.height-this._handleSize,this._fillerShae.style.y=this._endShape.style.y+this._handleSize,this._fillerShae.style.height=this._startShape.style.y-this._endShape.style.y-this._handleSize),this.zr.modShape(this._startShape.id),this.zr.modShape(this._endShape.id),this.zr.modShape(this._fillerShae.id),this._syncFrameShape(),this.zr.refresh())},_syncData:function(t){var e,i,o,s,n;for(var a in this._originalData){e=this._originalData[a];for(var h in e)n=e[h],null!=n&&(s=n.length,i=Math.floor(this._zoom.start/100*s),o=Math.ceil(this._zoom.end/100*s),this.getDataFromOption(n[0])instanceof Array&&this.option[a][h].type!=r.CHART_TYPE_K?(this._setScale(),this.option[a][h].data=this._synScatterData(h,n)):this.option[a][h].data=n.slice(i,o))}this._isSilence||!this.zoomOption.realtime&&!t||this.messageCenter.dispatch(r.EVENT.DATA_ZOOM,null,{zoom:this._zoom},this.myChart)},_synScatterData:function(t,e){if(0===this._zoom.start&&100==this._zoom.end&&0===this._zoom.start2&&100==this._zoom.end2)return e;var i,o,s,n,r,a=[],h=this._zoom.scatterMap[t];"horizontal"==this.zoomOption.orient?(i=h.x.max-h.x.min,o=this._zoom.start/100*i+h.x.min,s=this._zoom.end/100*i+h.x.min,i=h.y.max-h.y.min,n=this._zoom.start2/100*i+h.y.min,r=this._zoom.end2/100*i+h.y.min):(i=h.x.max-h.x.min,o=this._zoom.start2/100*i+h.x.min,s=this._zoom.end2/100*i+h.x.min,i=h.y.max-h.y.min,n=this._zoom.start/100*i+h.y.min,r=this._zoom.end/100*i+h.y.min);var l;(l=h.x.dataMappingMethods)&&(o=l.coord2Value(o),s=l.coord2Value(s)),(l=h.y.dataMappingMethods)&&(n=l.coord2Value(n),r=l.coord2Value(r));for(var d,c=0,p=e.length;p>c;c++)d=e[c].value||e[c],d[0]>=o&&d[0]<=s&&d[1]>=n&&d[1]<=r&&a.push(e[c]);return a},_setScale:function(){var t=0!==this._zoom.start||100!==this._zoom.end||0!==this._zoom.start2||100!==this._zoom.end2,e={xAxis:this.option.xAxis,yAxis:this.option.yAxis};for(var i in e)for(var o=0,s=e[i].length;s>o;o++)e[i][o].scale=t||e[i][o]._scale},_backupScale:function(){var t={xAxis:this.option.xAxis,yAxis:this.option.yAxis};for(var e in t)for(var i=0,o=t[e].length;o>i;i++)t[e][i]._scale=t[e][i].scale},_getDetail:function(){for(var t=["xAxis","yAxis"],e=0,i=t.length;i>e;e++){var o=this._originalData[t[e]];for(var s in o){var n=o[s];if(null!=n){var r=n.length,h=Math.floor(this._zoom.start/100*r),l=Math.ceil(this._zoom.end/100*r);return l-=l>0?1:0,{start:this.getDataFromOption(n[h]),end:this.getDataFromOption(n[l])}}}}t="horizontal"==this.zoomOption.orient?"xAxis":"yAxis";var d=this._zoom.seriesIndex[0],c=this.option.series[d][t+"Index"]||0,p=this.option[t][c].type,u=this._zoom.scatterMap[d][t.charAt(0)].min,g=this._zoom.scatterMap[d][t.charAt(0)].max,f=g-u;if("value"==p)return{start:u+f*this._zoom.start/100,end:u+f*this._zoom.end/100};if("time"==p){g=u+f*this._zoom.end/100,u+=f*this._zoom.start/100;var m=a.getAutoFormatter(u,g).formatter;return{start:a.format(m,u),end:a.format(m,g)}}return{start:"",end:""}},__ondrift:function(t,e,i){this.zoomOption.zoomLock&&(t=this._fillerShae);var o="filler"==t._type?this._handleSize:0;if("horizontal"==this.zoomOption.orient?t.style.x+e-o<=this._location.x?t.style.x=this._location.x+o:t.style.x+e+t.style.width+o>=this._location.x+this._location.width?t.style.x=this._location.x+this._location.width-t.style.width-o:t.style.x+=e:t.style.y+i-o<=this._location.y?t.style.y=this._location.y+o:t.style.y+i+t.style.height+o>=this._location.y+this._location.height?t.style.y=this._location.y+this._location.height-t.style.height-o:t.style.y+=i,"filler"==t._type?this._syncHandleShape():this._syncFillerShape(),this.zoomOption.realtime&&this._syncData(),this.zoomOption.showDetail){var s=this._getDetail();this._startShape.style.text=this._startShape.highlightStyle.text=s.start,this._endShape.style.text=this._endShape.highlightStyle.text=s.end,this._startShape.style.textPosition=this._startShape.highlightStyle.textPosition,this._endShape.style.textPosition=this._endShape.highlightStyle.textPosition}return!0},__ondragend:function(){this.zoomOption.showDetail&&(this._startShape.style.text=this._endShape.style.text="=",this._startShape.style.textPosition=this._endShape.style.textPosition="inside",this.zr.modShape(this._startShape.id),this.zr.modShape(this._endShape.id),this.zr.refreshNextFrame()),this.isDragend=!0},ondragend:function(t,e){this.isDragend&&t.target&&(!this.zoomOption.realtime&&this._syncData(),e.dragOut=!0,e.dragIn=!0,this._isSilence||this.zoomOption.realtime||this.messageCenter.dispatch(r.EVENT.DATA_ZOOM,null,{zoom:this._zoom},this.myChart),e.needRefresh=!1,this.isDragend=!1)},ondataZoom:function(t,e){e.needRefresh=!0},absoluteZoom:function(t){this._zoom.start=t.start,this._zoom.end=t.end,this._zoom.start2=t.start2,this._zoom.end2=t.end2,this._syncShape(),this._syncData(!0)},rectZoom:function(t){if(!t)return this._zoom.start=this._zoom.start2=0,this._zoom.end=this._zoom.end2=100,this._syncShape(),this._syncData(!0),this._zoom;var e=this.component.grid.getArea(),i={x:t.x,y:t.y,width:t.width,height:t.height};if(i.width<0&&(i.x+=i.width,i.width=-i.width),i.height<0&&(i.y+=i.height,i.height=-i.height),i.x>e.x+e.width||i.y>e.y+e.height)return!1;i.x<e.x&&(i.x=e.x),i.x+i.width>e.x+e.width&&(i.width=e.x+e.width-i.x),i.y+i.height>e.y+e.height&&(i.height=e.y+e.height-i.y);var o,s=(i.x-e.x)/e.width,n=1-(i.x+i.width-e.x)/e.width,r=1-(i.y+i.height-e.y)/e.height,a=(i.y-e.y)/e.height;return"horizontal"==this.zoomOption.orient?(o=this._zoom.end-this._zoom.start,this._zoom.start+=o*s,this._zoom.end-=o*n,o=this._zoom.end2-this._zoom.start2,this._zoom.start2+=o*r,this._zoom.end2-=o*a):(o=this._zoom.end-this._zoom.start,this._zoom.start+=o*r,this._zoom.end-=o*a,o=this._zoom.end2-this._zoom.start2,this._zoom.start2+=o*s,this._zoom.end2-=o*n),this._syncShape(),this._syncData(!0),this._zoom},syncBackupData:function(t){for(var e,i,o=this._originalData.series,s=t.series,n=0,r=s.length;r>n;n++){i=s[n].data||s[n].eventList,e=o[n]?Math.floor(this._zoom.start/100*o[n].length):0;for(var a=0,h=i.length;h>a;a++)o[n]&&(o[n][a+e]=i[a])}},syncOption:function(t){this.silence(!0),this.option=t,this.option.dataZoom=this.reformOption(this.option.dataZoom),this.zoomOption=this.option.dataZoom,this.myChart.canvasSupported||(this.zoomOption.realtime=!1),this.clear(),this._location=this._getLocation(),this._zoom=this._getZoom(),this._backupData(),this.option.dataZoom&&this.option.dataZoom.show&&this._buildShape(),this._syncData(),this.silence(!1)},silence:function(t){this._isSilence=t},getRealDataIndex:function(t,e){if(!this._originalData||0===this._zoom.start&&100==this._zoom.end)return e;var i=this._originalData.series;return i[t]?Math.floor(this._zoom.start/100*i[t].length)+e:-1},resize:function(){this.clear(),this._location=this._getLocation(),this._zoom=this._getZoom(),this.option.dataZoom.show&&this._buildShape()}},h.inherits(e,i),t("../component").define("dataZoom",e),e}),i("zrender/shape/Text",["require","../tool/area","./Base","../tool/util"],function(t){var e=t("../tool/area"),i=t("./Base"),o=function(t){i.call(this,t)};return o.prototype={type:"text",brush:function(t,i){var o=this.style;if(i&&(o=this.getHighlightStyle(o,this.highlightStyle||{})),"undefined"!=typeof o.text&&o.text!==!1){t.save(),this.doClip(t),this.setContext(t,o),this.setTransform(t),o.textFont&&(t.font=o.textFont),t.textAlign=o.textAlign||"start",t.textBaseline=o.textBaseline||"middle";var s,n=(o.text+"").split("\n"),r=e.getTextHeight("国",o.textFont),a=this.getRect(o),h=o.x;s="top"==o.textBaseline?a.y:"bottom"==o.textBaseline?a.y+r:a.y+r/2;for(var l=0,d=n.length;d>l;l++){if(o.maxWidth)switch(o.brushType){case"fill":t.fillText(n[l],h,s,o.maxWidth);break;case"stroke":t.strokeText(n[l],h,s,o.maxWidth);break;case"both":t.fillText(n[l],h,s,o.maxWidth),t.strokeText(n[l],h,s,o.maxWidth);break;default:t.fillText(n[l],h,s,o.maxWidth)}else switch(o.brushType){case"fill":t.fillText(n[l],h,s);break;case"stroke":t.strokeText(n[l],h,s);break;case"both":t.fillText(n[l],h,s),t.strokeText(n[l],h,s);break;default:t.fillText(n[l],h,s)}s+=r}t.restore()}},getRect:function(t){if(t.__rect)return t.__rect;var i=e.getTextWidth(t.text,t.textFont),o=e.getTextHeight(t.text,t.textFont),s=t.x;"end"==t.textAlign||"right"==t.textAlign?s-=i:"center"==t.textAlign&&(s-=i/2);var n;return n="top"==t.textBaseline?t.y:"bottom"==t.textBaseline?t.y-o:t.y-o/2,t.__rect={x:s,y:n,width:i,height:o},t.__rect}},t("../tool/util").inherits(o,i),o}),i("zrender/shape/Rectangle",["require","./Base","../tool/util"],function(t){var e=t("./Base"),i=function(t){e.call(this,t)};return i.prototype={type:"rectangle",_buildRadiusPath:function(t,e){var i,o,s,n,r=e.x,a=e.y,h=e.width,l=e.height,d=e.radius;"number"==typeof d?i=o=s=n=d:d instanceof Array?1===d.length?i=o=s=n=d[0]:2===d.length?(i=s=d[0],o=n=d[1]):3===d.length?(i=d[0],o=n=d[1],s=d[2]):(i=d[0],o=d[1],s=d[2],n=d[3]):i=o=s=n=0;var c;i+o>h&&(c=i+o,i*=h/c,o*=h/c),s+n>h&&(c=s+n,s*=h/c,n*=h/c),o+s>l&&(c=o+s,o*=l/c,s*=l/c),i+n>l&&(c=i+n,i*=l/c,n*=l/c),t.moveTo(r+i,a),t.lineTo(r+h-o,a),0!==o&&t.quadraticCurveTo(r+h,a,r+h,a+o),t.lineTo(r+h,a+l-s),0!==s&&t.quadraticCurveTo(r+h,a+l,r+h-s,a+l),t.lineTo(r+n,a+l),0!==n&&t.quadraticCurveTo(r,a+l,r,a+l-n),t.lineTo(r,a+i),0!==i&&t.quadraticCurveTo(r,a,r+i,a)},buildPath:function(t,e){e.radius?this._buildRadiusPath(t,e):(t.moveTo(e.x,e.y),t.lineTo(e.x+e.width,e.y),t.lineTo(e.x+e.width,e.y+e.height),t.lineTo(e.x,e.y+e.height),t.lineTo(e.x,e.y)),t.closePath()},getRect:function(t){if(t.__rect)return t.__rect;var e;return e="stroke"==t.brushType||"fill"==t.brushType?t.lineWidth||1:0,t.__rect={x:Math.round(t.x-e/2),y:Math.round(t.y-e/2),width:t.width+e,height:t.height+e},t.__rect}},t("../tool/util").inherits(i,e),i}),i("zrender/shape/Circle",["require","./Base","../tool/util"],function(t){"use strict";var e=t("./Base"),i=function(t){e.call(this,t)};return i.prototype={type:"circle",buildPath:function(t,e){t.moveTo(e.x+e.r,e.y),t.arc(e.x,e.y,e.r,0,2*Math.PI,!0)},getRect:function(t){if(t.__rect)return t.__rect;var e;return e="stroke"==t.brushType||"fill"==t.brushType?t.lineWidth||1:0,t.__rect={x:Math.round(t.x-t.r-e/2),y:Math.round(t.y-t.r-e/2),width:2*t.r+e,height:2*t.r+e},t.__rect}},t("../tool/util").inherits(i,e),i}),i("zrender/shape/Polyline",["require","./Base","./util/smoothSpline","./util/smoothBezier","./util/dashedLineTo","./Polygon","../tool/util"],function(t){var e=t("./Base"),i=t("./util/smoothSpline"),o=t("./util/smoothBezier"),s=t("./util/dashedLineTo"),n=function(t){this.brushTypeOnly="stroke",this.textPosition="end",e.call(this,t)};return n.prototype={type:"polyline",buildPath:function(t,e){var o=e.pointList;if(!(o.length<2)){var n=Math.min(e.pointList.length,Math.round(e.pointListLength||e.pointList.length));if(e.smooth&&"spline"!==e.smooth){e.controlPointList||this.updateControlPoints(e);var r=e.controlPointList;t.moveTo(o[0][0],o[0][1]);for(var a,h,l,d=0;n-1>d;d++)a=r[2*d],h=r[2*d+1],l=o[d+1],t.bezierCurveTo(a[0],a[1],h[0],h[1],l[0],l[1])}else if("spline"===e.smooth&&(o=i(o),n=o.length),e.lineType&&"solid"!=e.lineType){if("dashed"==e.lineType||"dotted"==e.lineType){var c=(e.lineWidth||1)*("dashed"==e.lineType?5:1);t.moveTo(o[0][0],o[0][1]);for(var d=1;n>d;d++)s(t,o[d-1][0],o[d-1][1],o[d][0],o[d][1],c)}}else{t.moveTo(o[0][0],o[0][1]);for(var d=1;n>d;d++)t.lineTo(o[d][0],o[d][1])}}},updateControlPoints:function(t){t.controlPointList=o(t.pointList,t.smooth,!1,t.smoothConstraint)},getRect:function(e){return t("./Polygon").prototype.getRect(e)
}},t("../tool/util").inherits(n,e),n}),i("zrender/tool/math",[],function(){function t(t,e){return Math.sin(e?t*s:t)}function e(t,e){return Math.cos(e?t*s:t)}function i(t){return t*s}function o(t){return t/s}var s=Math.PI/180;return{sin:t,cos:e,degreeToRadian:i,radianToDegree:o}}),i("zrender/shape/Sector",["require","../tool/math","../tool/computeBoundingBox","../tool/vector","./Base","../tool/util"],function(t){var e=t("../tool/math"),i=t("../tool/computeBoundingBox"),o=t("../tool/vector"),s=t("./Base"),n=o.create(),r=o.create(),a=o.create(),h=o.create(),l=function(t){s.call(this,t)};return l.prototype={type:"sector",buildPath:function(t,i){var o=i.x,s=i.y,n=i.r0||0,r=i.r,a=i.startAngle,h=i.endAngle,l=i.clockWise||!1;a=e.degreeToRadian(a),h=e.degreeToRadian(h),l||(a=-a,h=-h);var d=e.cos(a),c=e.sin(a);t.moveTo(d*n+o,c*n+s),t.lineTo(d*r+o,c*r+s),t.arc(o,s,r,a,h,!l),t.lineTo(e.cos(h)*n+o,e.sin(h)*n+s),0!==n&&t.arc(o,s,n,h,a,l),t.closePath()},getRect:function(t){if(t.__rect)return t.__rect;var s=t.x,l=t.y,d=t.r0||0,c=t.r,p=e.degreeToRadian(t.startAngle),u=e.degreeToRadian(t.endAngle),g=t.clockWise;return g||(p=-p,u=-u),d>1?i.arc(s,l,d,p,u,!g,n,a):(n[0]=a[0]=s,n[1]=a[1]=l),i.arc(s,l,c,p,u,!g,r,h),o.min(n,n,r),o.max(a,a,h),t.__rect={x:n[0],y:n[1],width:a[0]-n[0],height:a[1]-n[1]},t.__rect}},t("../tool/util").inherits(l,s),l}),i("zrender/shape/Image",["require","./Base","../tool/util"],function(t){var e=t("./Base"),i=function(t){e.call(this,t)};return i.prototype={type:"image",brush:function(t,e,i){var o=this.style||{};e&&(o=this.getHighlightStyle(o,this.highlightStyle||{}));var s=o.image,n=this;if(this._imageCache||(this._imageCache={}),"string"==typeof s){var r=s;this._imageCache[r]?s=this._imageCache[r]:(s=new Image,s.onload=function(){s.onload=null,n.modSelf(),i()},s.src=r,this._imageCache[r]=s)}if(s){if("IMG"==s.nodeName.toUpperCase())if(window.ActiveXObject){if("complete"!=s.readyState)return}else if(!s.complete)return;var a=o.width||s.width,h=o.height||s.height,l=o.x,d=o.y;if(!s.width||!s.height)return;if(t.save(),this.doClip(t),this.setContext(t,o),this.setTransform(t),o.sWidth&&o.sHeight){var c=o.sx||0,p=o.sy||0;t.drawImage(s,c,p,o.sWidth,o.sHeight,l,d,a,h)}else if(o.sx&&o.sy){var c=o.sx,p=o.sy,u=a-c,g=h-p;t.drawImage(s,c,p,u,g,l,d,a,h)}else t.drawImage(s,l,d,a,h);o.width||(o.width=a),o.height||(o.height=h),this.style.width||(this.style.width=a),this.style.height||(this.style.height=h),this.drawText(t,o,this.style),t.restore()}},getRect:function(t){return{x:t.x,y:t.y,width:t.width,height:t.height}},clearCache:function(){this._imageCache={}}},t("../tool/util").inherits(i,e),i}),i("zrender/shape/ShapeBundle",["require","./Base","../tool/util"],function(t){var e=t("./Base"),i=function(t){e.call(this,t)};return i.prototype={constructor:i,type:"shape-bundle",brush:function(t,e){var i=this.beforeBrush(t,e);t.beginPath();for(var o=0;o<i.shapeList.length;o++){var s=i.shapeList[o],n=s.style;e&&(n=s.getHighlightStyle(n,s.highlightStyle||{},s.brushTypeOnly)),s.buildPath(t,n)}switch(i.brushType){case"both":t.fill();case"stroke":i.lineWidth>0&&t.stroke();break;default:t.fill()}this.drawText(t,i,this.style),this.afterBrush(t)},getRect:function(t){if(t.__rect)return t.__rect;for(var e=1/0,i=-1/0,o=1/0,s=-1/0,n=0;n<t.shapeList.length;n++)var r=t.shapeList[n],a=r.getRect(r.style),e=Math.min(a.x,e),o=Math.min(a.y,o),i=Math.max(a.x+a.width,i),s=Math.max(a.y+a.height,s);return t.__rect={x:e,y:o,width:i-e,height:s-o},t.__rect},isCover:function(t,e){var i=this.transformCoordToLocal(t,e);if(t=i[0],e=i[1],this.isCoverRect(t,e))for(var o=0;o<this.style.shapeList.length;o++){var s=this.style.shapeList[o];if(s.isCover(t,e))return!0}return!1}},t("../tool/util").inherits(i,e),i}),i("zrender/shape/Ring",["require","./Base","../tool/util"],function(t){var e=t("./Base"),i=function(t){e.call(this,t)};return i.prototype={type:"ring",buildPath:function(t,e){t.arc(e.x,e.y,e.r,0,2*Math.PI,!1),t.moveTo(e.x+e.r0,e.y),t.arc(e.x,e.y,e.r0,0,2*Math.PI,!0)},getRect:function(t){if(t.__rect)return t.__rect;var e;return e="stroke"==t.brushType||"fill"==t.brushType?t.lineWidth||1:0,t.__rect={x:Math.round(t.x-t.r-e/2),y:Math.round(t.y-t.r-e/2),width:2*t.r+e,height:2*t.r+e},t.__rect}},t("../tool/util").inherits(i,e),i}),i("echarts/util/shape/Icon",["require","zrender/tool/util","zrender/shape/Star","zrender/shape/Heart","zrender/shape/Droplet","zrender/shape/Image","zrender/shape/Base"],function(t){function e(t,e){var i=e.x,o=e.y,s=e.width/16,n=e.height/16;t.moveTo(i,o+e.height),t.lineTo(i+5*s,o+14*n),t.lineTo(i+e.width,o+3*n),t.lineTo(i+13*s,o),t.lineTo(i+2*s,o+11*n),t.lineTo(i,o+e.height),t.moveTo(i+6*s,o+10*n),t.lineTo(i+14*s,o+2*n),t.moveTo(i+10*s,o+13*n),t.lineTo(i+e.width,o+13*n),t.moveTo(i+13*s,o+10*n),t.lineTo(i+13*s,o+e.height)}function i(t,e){var i=e.x,o=e.y,s=e.width/16,n=e.height/16;t.moveTo(i,o+e.height),t.lineTo(i+5*s,o+14*n),t.lineTo(i+e.width,o+3*n),t.lineTo(i+13*s,o),t.lineTo(i+2*s,o+11*n),t.lineTo(i,o+e.height),t.moveTo(i+6*s,o+10*n),t.lineTo(i+14*s,o+2*n),t.moveTo(i+10*s,o+13*n),t.lineTo(i+e.width,o+13*n)}function o(t,e){var i=e.x,o=e.y,s=e.width/16,n=e.height/16;t.moveTo(i+4*s,o+15*n),t.lineTo(i+9*s,o+13*n),t.lineTo(i+14*s,o+8*n),t.lineTo(i+11*s,o+5*n),t.lineTo(i+6*s,o+10*n),t.lineTo(i+4*s,o+15*n),t.moveTo(i+5*s,o),t.lineTo(i+11*s,o),t.moveTo(i+5*s,o+n),t.lineTo(i+11*s,o+n),t.moveTo(i,o+2*n),t.lineTo(i+e.width,o+2*n),t.moveTo(i,o+5*n),t.lineTo(i+3*s,o+e.height),t.lineTo(i+13*s,o+e.height),t.lineTo(i+e.width,o+5*n)}function s(t,e){var i=e.x,o=e.y,s=e.width/16,n=e.height/16;t.moveTo(i,o+3*n),t.lineTo(i+6*s,o+3*n),t.moveTo(i+3*s,o),t.lineTo(i+3*s,o+6*n),t.moveTo(i+3*s,o+8*n),t.lineTo(i+3*s,o+e.height),t.lineTo(i+e.width,o+e.height),t.lineTo(i+e.width,o+3*n),t.lineTo(i+8*s,o+3*n)}function n(t,e){var i=e.x,o=e.y,s=e.width/16,n=e.height/16;t.moveTo(i+6*s,o),t.lineTo(i+2*s,o+3*n),t.lineTo(i+6*s,o+6*n),t.moveTo(i+2*s,o+3*n),t.lineTo(i+14*s,o+3*n),t.lineTo(i+14*s,o+11*n),t.moveTo(i+2*s,o+5*n),t.lineTo(i+2*s,o+13*n),t.lineTo(i+14*s,o+13*n),t.moveTo(i+10*s,o+10*n),t.lineTo(i+14*s,o+13*n),t.lineTo(i+10*s,o+e.height)}function r(t,e){var i=e.x,o=e.y,s=e.width/16,n=e.height/16,r=e.width/2;t.lineWidth=1.5,t.arc(i+r,o+r,r-s,0,2*Math.PI/3),t.moveTo(i+3*s,o+e.height),t.lineTo(i+0*s,o+12*n),t.lineTo(i+5*s,o+11*n),t.moveTo(i,o+8*n),t.arc(i+r,o+r,r-s,Math.PI,5*Math.PI/3),t.moveTo(i+13*s,o),t.lineTo(i+e.width,o+4*n),t.lineTo(i+11*s,o+5*n)}function a(t,e){var i=e.x,o=e.y,s=e.width/16,n=e.height/16;t.moveTo(i,o),t.lineTo(i,o+e.height),t.lineTo(i+e.width,o+e.height),t.moveTo(i+2*s,o+14*n),t.lineTo(i+7*s,o+6*n),t.lineTo(i+11*s,o+11*n),t.lineTo(i+15*s,o+2*n)}function h(t,e){var i=e.x,o=e.y,s=e.width/16,n=e.height/16;t.moveTo(i,o),t.lineTo(i,o+e.height),t.lineTo(i+e.width,o+e.height),t.moveTo(i+3*s,o+14*n),t.lineTo(i+3*s,o+6*n),t.lineTo(i+4*s,o+6*n),t.lineTo(i+4*s,o+14*n),t.moveTo(i+7*s,o+14*n),t.lineTo(i+7*s,o+2*n),t.lineTo(i+8*s,o+2*n),t.lineTo(i+8*s,o+14*n),t.moveTo(i+11*s,o+14*n),t.lineTo(i+11*s,o+9*n),t.lineTo(i+12*s,o+9*n),t.lineTo(i+12*s,o+14*n)}function l(t,e){var i=e.x,o=e.y,s=e.width-2,n=e.height-2,r=Math.min(s,n)/2;o+=2,t.moveTo(i+r+3,o+r-3),t.arc(i+r+3,o+r-3,r-1,0,-Math.PI/2,!0),t.lineTo(i+r+3,o+r-3),t.moveTo(i+r,o),t.lineTo(i+r,o+r),t.arc(i+r,o+r,r,-Math.PI/2,2*Math.PI,!0),t.lineTo(i+r,o+r),t.lineWidth=1.5}function d(t,e){var i=e.x,o=e.y,s=e.width/16,n=e.height/16;o-=n,t.moveTo(i+1*s,o+2*n),t.lineTo(i+15*s,o+2*n),t.lineTo(i+14*s,o+3*n),t.lineTo(i+2*s,o+3*n),t.moveTo(i+3*s,o+6*n),t.lineTo(i+13*s,o+6*n),t.lineTo(i+12*s,o+7*n),t.lineTo(i+4*s,o+7*n),t.moveTo(i+5*s,o+10*n),t.lineTo(i+11*s,o+10*n),t.lineTo(i+10*s,o+11*n),t.lineTo(i+6*s,o+11*n),t.moveTo(i+7*s,o+14*n),t.lineTo(i+9*s,o+14*n),t.lineTo(i+8*s,o+15*n),t.lineTo(i+7*s,o+15*n)}function c(t,e){var i=e.x,o=e.y,s=e.width,n=e.height,r=s/16,a=n/16,h=2*Math.min(r,a);t.moveTo(i+r+h,o+a+h),t.arc(i+r,o+a,h,Math.PI/4,3*Math.PI),t.lineTo(i+7*r-h,o+6*a-h),t.arc(i+7*r,o+6*a,h,Math.PI/4*5,4*Math.PI),t.arc(i+7*r,o+6*a,h/2,Math.PI/4*5,4*Math.PI),t.moveTo(i+7*r-h/2,o+6*a+h),t.lineTo(i+r+h,o+14*a-h),t.arc(i+r,o+14*a,h,-Math.PI/4,2*Math.PI),t.moveTo(i+7*r+h/2,o+6*a),t.lineTo(i+14*r-h,o+10*a-h/2),t.moveTo(i+16*r,o+10*a),t.arc(i+14*r,o+10*a,h,0,3*Math.PI),t.lineWidth=1.5}function p(t,e){var i=e.x,o=e.y,s=e.width,n=e.height,r=Math.min(s,n)/2;t.moveTo(i+s,o+n/2),t.arc(i+r,o+r,r,0,2*Math.PI),t.arc(i+r,o,r,Math.PI/4,Math.PI/5*4),t.arc(i,o+r,r,-Math.PI/3,Math.PI/3),t.arc(i+s,o+n,r,Math.PI,Math.PI/2*3),t.lineWidth=1.5}function u(t,e){for(var i=e.x,o=e.y,s=e.width,n=e.height,r=Math.round(n/3),a=Math.round((r-2)/2),h=3;h--;)t.rect(i,o+r*h+a,s,2)}function g(t,e){for(var i=e.x,o=e.y,s=e.width,n=e.height,r=Math.round(s/3),a=Math.round((r-2)/2),h=3;h--;)t.rect(i+r*h+a,o,2,n)}function f(t,e){var i=e.x,o=e.y,s=e.width/16;t.moveTo(i+s,o),t.lineTo(i+s,o+e.height),t.lineTo(i+15*s,o+e.height),t.lineTo(i+15*s,o),t.lineTo(i+s,o),t.moveTo(i+3*s,o+3*s),t.lineTo(i+13*s,o+3*s),t.moveTo(i+3*s,o+6*s),t.lineTo(i+13*s,o+6*s),t.moveTo(i+3*s,o+9*s),t.lineTo(i+13*s,o+9*s),t.moveTo(i+3*s,o+12*s),t.lineTo(i+9*s,o+12*s)}function m(t,e){var i=e.x,o=e.y,s=e.width/16,n=e.height/16;t.moveTo(i,o),t.lineTo(i,o+e.height),t.lineTo(i+e.width,o+e.height),t.lineTo(i+e.width,o),t.lineTo(i,o),t.moveTo(i+4*s,o),t.lineTo(i+4*s,o+8*n),t.lineTo(i+12*s,o+8*n),t.lineTo(i+12*s,o),t.moveTo(i+6*s,o+11*n),t.lineTo(i+6*s,o+13*n),t.lineTo(i+10*s,o+13*n),t.lineTo(i+10*s,o+11*n),t.lineTo(i+6*s,o+11*n)}function _(t,e){var i=e.x,o=e.y,s=e.width,n=e.height;t.moveTo(i,o+n/2),t.lineTo(i+s,o+n/2),t.moveTo(i+s/2,o),t.lineTo(i+s/2,o+n)}function y(t,e){var i=e.width/2,o=e.height/2,s=Math.min(i,o);t.moveTo(e.x+i+s,e.y+o),t.arc(e.x+i,e.y+o,s,0,2*Math.PI),t.closePath()}function x(t,e){t.rect(e.x,e.y,e.width,e.height),t.closePath()}function v(t,e){var i=e.width/2,o=e.height/2,s=e.x+i,n=e.y+o,r=Math.min(i,o);t.moveTo(s,n-r),t.lineTo(s+r,n+r),t.lineTo(s-r,n+r),t.lineTo(s,n-r),t.closePath()}function b(t,e){var i=e.width/2,o=e.height/2,s=e.x+i,n=e.y+o,r=Math.min(i,o);t.moveTo(s,n-r),t.lineTo(s+r,n),t.lineTo(s,n+r),t.lineTo(s-r,n),t.lineTo(s,n-r),t.closePath()}function S(t,e){var i=e.x,o=e.y,s=e.width/16;t.moveTo(i+8*s,o),t.lineTo(i+s,o+e.height),t.lineTo(i+8*s,o+e.height/4*3),t.lineTo(i+15*s,o+e.height),t.lineTo(i+8*s,o),t.closePath()}function T(e,i){var o=t("zrender/shape/Star"),s=i.width/2,n=i.height/2;o.prototype.buildPath(e,{x:i.x+s,y:i.y+n,r:Math.min(s,n),n:i.n||5})}function z(e,i){var o=t("zrender/shape/Heart");o.prototype.buildPath(e,{x:i.x+i.width/2,y:i.y+.2*i.height,a:i.width/2,b:.8*i.height})}function C(e,i){var o=t("zrender/shape/Droplet");o.prototype.buildPath(e,{x:i.x+.5*i.width,y:i.y+.5*i.height,a:.5*i.width,b:.8*i.height})}function w(t,e){var i=e.x,o=e.y-e.height/2*1.5,s=e.width/2,n=e.height/2,r=Math.min(s,n);t.arc(i+s,o+n,r,Math.PI/5*4,Math.PI/5),t.lineTo(i+s,o+n+1.5*r),t.closePath()}function L(e,i,o){var s=t("zrender/shape/Image");this._imageShape=this._imageShape||new s({style:{}});for(var n in i)this._imageShape.style[n]=i[n];this._imageShape.brush(e,!1,o)}function E(t){A.call(this,t)}var M=t("zrender/tool/util"),A=t("zrender/shape/Base");return E.prototype={type:"icon",iconLibrary:{mark:e,markUndo:i,markClear:o,dataZoom:s,dataZoomReset:n,restore:r,lineChart:a,barChart:h,pieChart:l,funnelChart:d,forceChart:c,chordChart:p,stackChart:u,tiledChart:g,dataView:f,saveAsImage:m,cross:_,circle:y,rectangle:x,triangle:v,diamond:b,arrow:S,star:T,heart:z,droplet:C,pin:w,image:L},brush:function(e,i,o){var s=i?this.highlightStyle:this.style;s=s||{};var n=s.iconType||this.style.iconType;if("image"===n){var r=t("zrender/shape/Image");r.prototype.brush.call(this,e,i,o)}else{var s=this.beforeBrush(e,i);switch(e.beginPath(),this.buildPath(e,s,o),s.brushType){case"both":e.fill();case"stroke":s.lineWidth>0&&e.stroke();break;default:e.fill()}this.drawText(e,s,this.style),this.afterBrush(e)}},buildPath:function(t,e,i){this.iconLibrary[e.iconType]?this.iconLibrary[e.iconType].call(this,t,e,i):(t.moveTo(e.x,e.y),t.lineTo(e.x+e.width,e.y),t.lineTo(e.x+e.width,e.y+e.height),t.lineTo(e.x,e.y+e.height),t.lineTo(e.x,e.y),t.closePath())},getRect:function(t){return t.__rect?t.__rect:(t.__rect={x:Math.round(t.x),y:Math.round(t.y-("pin"==t.iconType?t.height/2*1.5:0)),width:t.width,height:t.height*("pin"===t.iconType?1.25:1)},t.__rect)},isCover:function(t,e){var i=this.transformCoordToLocal(t,e);t=i[0],e=i[1];var o=this.style.__rect;o||(o=this.style.__rect=this.getRect(this.style));var s=o.height<8||o.width<8?4:0;return t>=o.x-s&&t<=o.x+o.width+s&&e>=o.y-s&&e<=o.y+o.height+s}},M.inherits(E,A),E}),i("echarts/util/shape/MarkLine",["require","zrender/shape/Base","./Icon","zrender/shape/Line","zrender/shape/BezierCurve","zrender/tool/area","zrender/shape/util/dashedLineTo","zrender/tool/util","zrender/tool/curve"],function(t){function e(t){i.call(this,t),this.style.curveness>0&&this.updatePoints(this.style),this.highlightStyle.curveness>0&&this.updatePoints(this.highlightStyle)}var i=t("zrender/shape/Base"),o=t("./Icon"),s=t("zrender/shape/Line"),n=new s({}),r=t("zrender/shape/BezierCurve"),a=new r({}),h=t("zrender/tool/area"),l=t("zrender/shape/util/dashedLineTo"),d=t("zrender/tool/util"),c=t("zrender/tool/curve");return e.prototype={type:"mark-line",brush:function(t,e){var i=this.style;e&&(i=this.getHighlightStyle(i,this.highlightStyle||{})),t.save(),this.setContext(t,i),this.setTransform(t),t.save(),t.beginPath(),this.buildPath(t,i),t.stroke(),t.restore(),this.brushSymbol(t,i,0),this.brushSymbol(t,i,1),this.drawText(t,i,this.style),t.restore()},buildPath:function(t,e){var i=e.lineType||"solid";if(t.moveTo(e.xStart,e.yStart),e.curveness>0){var o=null;switch(i){case"dashed":o=[5,5];break;case"dotted":o=[1,1]}o&&t.setLineDash&&t.setLineDash(o),t.quadraticCurveTo(e.cpX1,e.cpY1,e.xEnd,e.yEnd)}else if("solid"==i)t.lineTo(e.xEnd,e.yEnd);else{var s=(e.lineWidth||1)*("dashed"==e.lineType?5:1);l(t,e.xStart,e.yStart,e.xEnd,e.yEnd,s)}},updatePoints:function(t){var e=t.curveness||0,i=1,o=t.xStart,s=t.yStart,n=t.xEnd,r=t.yEnd,a=(o+n)/2-i*(s-r)*e,h=(s+r)/2-i*(n-o)*e;t.cpX1=a,t.cpY1=h},brushSymbol:function(t,e,i){if("none"!=e.symbol[i]){t.save(),t.beginPath(),t.lineWidth=e.symbolBorder,t.strokeStyle=e.symbolBorderColor;var s=e.symbol[i].replace("empty","").toLowerCase();e.symbol[i].match("empty")&&(t.fillStyle="#fff");var n=e.xStart,r=e.yStart,a=e.xEnd,h=e.yEnd,l=0===i?n:a,d=0===i?r:h,p=e.curveness||0,u=null!=e.symbolRotate[i]?e.symbolRotate[i]-0:0;if(u=u/180*Math.PI,"arrow"==s&&0===u)if(0===p){var g=0===i?-1:1;u=Math.PI/2+Math.atan2(g*(h-r),g*(a-n))}else{var f=e.cpX1,m=e.cpY1,_=c.quadraticDerivativeAt,y=_(n,f,a,i),x=_(r,m,h,i);u=Math.PI/2+Math.atan2(x,y)}t.translate(l,d),0!==u&&t.rotate(u);var v=e.symbolSize[i];o.prototype.buildPath(t,{x:-v,y:-v,width:2*v,height:2*v,iconType:s}),t.closePath(),t.fill(),t.stroke(),t.restore()}},getRect:function(t){return t.curveness>0?a.getRect(t):n.getRect(t),t.__rect},isCover:function(t,e){var i=this.transformCoordToLocal(t,e);return t=i[0],e=i[1],this.isCoverRect(t,e)?this.style.curveness>0?h.isInside(a,this.style,t,e):h.isInside(n,this.style,t,e):!1}},d.inherits(e,i),e}),i("echarts/util/ecEffect",["require","../util/ecData","zrender/shape/Circle","zrender/shape/Image","zrender/tool/curve","../util/shape/Icon","../util/shape/Symbol","zrender/shape/ShapeBundle","zrender/shape/Polyline","zrender/tool/vector","zrender/tool/env"],function(t){function e(t,e,i,o){var s,r=i.effect,h=r.color||i.style.strokeColor||i.style.color,d=r.shadowColor||h,c=r.scaleSize,p=r.bounceDistance,u="undefined"!=typeof r.shadowBlur?r.shadowBlur:c;"image"!==i.type?(s=new l({zlevel:o,style:{brushType:"stroke",iconType:"droplet"!=i.style.iconType?i.style.iconType:"circle",x:u+1,y:u+1,n:i.style.n,width:i.style._width*c,height:i.style._height*c,lineWidth:1,strokeColor:h,shadowColor:d,shadowBlur:u},draggable:!1,hoverable:!1}),"pin"==i.style.iconType&&(s.style.y+=s.style.height/2*1.5),g&&(s.style.image=t.shapeToImage(s,s.style.width+2*u+2,s.style.height+2*u+2).style.image,s=new a({zlevel:s.zlevel,style:s.style,draggable:!1,hoverable:!1}))):s=new a({zlevel:o,style:i.style,draggable:!1,hoverable:!1}),n.clone(i,s),s.position=i.position,e.push(s),t.addShape(s);var f="image"!==i.type?window.devicePixelRatio||1:1,m=(s.style.width/f-i.style._width)/2;s.style.x=i.style._x-m,s.style.y=i.style._y-m,"pin"==i.style.iconType&&(s.style.y-=i.style.height/2*1.5);var _=100*(r.period+10*Math.random());t.modShape(i.id,{invisible:!0});var y=s.style.x+s.style.width/2/f,x=s.style.y+s.style.height/2/f;"scale"===r.type?(t.modShape(s.id,{scale:[.1,.1,y,x]}),t.animate(s.id,"",r.loop).when(_,{scale:[1,1,y,x]}).done(function(){i.effect.show=!1,t.delShape(s.id)}).start()):t.animate(s.id,"style",r.loop).when(_,{y:s.style.y-p}).when(2*_,{y:s.style.y}).done(function(){i.effect.show=!1,t.delShape(s.id)}).start()}function i(t,e,i,o){var s=i.effect,n=s.color||i.style.strokeColor||i.style.color,r=s.scaleSize,a=s.shadowColor||n,h="undefined"!=typeof s.shadowBlur?s.shadowBlur:2*r,l=window.devicePixelRatio||1,c=new d({zlevel:o,position:i.position,scale:i.scale,style:{pointList:i.style.pointList,iconType:i.style.iconType,color:n,strokeColor:n,shadowColor:a,shadowBlur:h*l,random:!0,brushType:"fill",lineWidth:1,size:i.style.size},draggable:!1,hoverable:!1});e.push(c),t.addShape(c),t.modShape(i.id,{invisible:!0});for(var p=Math.round(100*s.period),u={},g={},f=0;20>f;f++)c.style["randomMap"+f]=0,u={},u["randomMap"+f]=100,g={},g["randomMap"+f]=0,c.style["randomMap"+f]=100*Math.random(),t.animate(c.id,"style",!0).when(p,u).when(2*p,g).when(3*p,u).when(4*p,u).delay(Math.random()*p*f).start()}function o(t,e,i,o,s){var a=i.effect,l=i.style,d=a.color||l.strokeColor||l.color,c=a.shadowColor||l.strokeColor||d,f=l.lineWidth*a.scaleSize,m="undefined"!=typeof a.shadowBlur?a.shadowBlur:f,_=new r({zlevel:o,style:{x:m,y:m,r:f,color:d,shadowColor:c,shadowBlur:m},hoverable:!1}),y=0;if(g&&!s){var o=_.zlevel;_=t.shapeToImage(_,2*(f+m),2*(f+m)),_.zlevel=o,_.hoverable=!1,y=m}s||(n.clone(i,_),_.position=i.position,e.push(_),t.addShape(_));var x=function(){s||(i.effect.show=!1,t.delShape(_.id)),_.effectAnimator=null};if(i instanceof p){for(var v=[0],b=0,S=l.pointList,T=l.controlPointList,z=1;z<S.length;z++){if(T){var C=T[2*(z-1)],w=T[2*(z-1)+1];b+=u.dist(S[z-1],C)+u.dist(C,w)+u.dist(w,S[z])}else b+=u.dist(S[z-1],S[z]);v.push(b)}for(var L={p:0},E=t.animation.animate(L,{loop:a.loop}),z=0;z<v.length;z++)E.when(v[z]*a.period,{p:z});E.during(function(){var e,i,o=Math.floor(L.p);if(o==S.length-1)e=S[o][0],i=S[o][1];else{var n=L.p-o,r=S[o],a=S[o+1];if(T){var l=T[2*o],d=T[2*o+1];e=h.cubicAt(r[0],l[0],d[0],a[0],n),i=h.cubicAt(r[1],l[1],d[1],a[1],n)}else e=(a[0]-r[0])*n+r[0],i=(a[1]-r[1])*n+r[1]}_.style.x=e,_.style.y=i,s||t.modShape(_)}).done(x).start(),E.duration=b*a.period,_.effectAnimator=E}else{var M=l.xStart-y,A=l.yStart-y,k=l.xEnd-y,O=l.yEnd-y;_.style.x=M,_.style.y=A;var I=(k-M)*(k-M)+(O-A)*(O-A),R=Math.round(Math.sqrt(Math.round(I*a.period*a.period)));if(i.style.curveness>0){var P=l.cpX1-y,D=l.cpY1-y;_.effectAnimator=t.animation.animate(_,{loop:a.loop}).when(R,{p:1}).during(function(e,i){_.style.x=h.quadraticAt(M,P,k,i),_.style.y=h.quadraticAt(A,D,O,i),s||t.modShape(_)}).done(x).start()}else _.effectAnimator=t.animation.animate(_.style,{loop:a.loop}).when(R,{x:k,y:O}).during(function(){s||t.modShape(_)}).done(x).start();_.effectAnimator.duration=R}return _}function s(t,e,i,s){var n=new c({style:{shapeList:[]},zlevel:s,hoverable:!1}),r=i.style.shapeList,a=i.effect;n.position=i.position;for(var h=0,l=[],d=0;d<r.length;d++){r[d].effect=a;var p=o(t,null,r[d],s,!0),u=p.effectAnimator;n.style.shapeList.push(p),u.duration>h&&(h=u.duration),0===d&&(n.style.color=p.style.color,n.style.shadowBlur=p.style.shadowBlur,n.style.shadowColor=p.style.shadowColor),l.push(u)}e.push(n),t.addShape(n);var g=function(){for(var t=0;t<l.length;t++)l[t].stop()};if(h){n.__dummy=0;var f=t.animate(n.id,"",a.loop).when(h,{__dummy:1}).during(function(){t.modShape(n)}).done(function(){i.effect.show=!1,t.delShape(n.id)}).start(),m=f.stop;f.stop=function(){g(),m.call(this)}}}var n=t("../util/ecData"),r=t("zrender/shape/Circle"),a=t("zrender/shape/Image"),h=t("zrender/tool/curve"),l=t("../util/shape/Icon"),d=t("../util/shape/Symbol"),c=t("zrender/shape/ShapeBundle"),p=t("zrender/shape/Polyline"),u=t("zrender/tool/vector"),g=t("zrender/tool/env").canvasSupported;return{point:e,largePoint:i,line:o,largeLine:s}}),i("echarts/util/accMath",[],function(){function t(t,e){var i=t.toString(),o=e.toString(),s=0;try{s=o.split(".")[1].length}catch(n){}try{s-=i.split(".")[1].length}catch(n){}return(i.replace(".","")-0)/(o.replace(".","")-0)*Math.pow(10,s)}function e(t,e){var i=t.toString(),o=e.toString(),s=0;try{s+=i.split(".")[1].length}catch(n){}try{s+=o.split(".")[1].length}catch(n){}return(i.replace(".","")-0)*(o.replace(".","")-0)/Math.pow(10,s)}function i(t,e){var i=0,o=0;try{i=t.toString().split(".")[1].length}catch(s){}try{o=e.toString().split(".")[1].length}catch(s){}var n=Math.pow(10,Math.max(i,o));return(Math.round(t*n)+Math.round(e*n))/n}function o(t,e){return i(t,-e)}return{accDiv:t,accMul:e,accAdd:i,accSub:o}}),i("echarts/chart/line",["require","./base","zrender/shape/Polyline","../util/shape/Icon","../util/shape/HalfSmoothPolygon","../component/axis","../component/grid","../component/dataZoom","../config","../util/ecData","zrender/tool/util","zrender/tool/color","../chart"],function(t){function e(t,e,i,s,n){o.call(this,t,e,i,s,n),this.refresh(s)}function i(t,e,i){var o=e.x,s=e.y,r=e.width,a=e.height,h=a/2;e.symbol.match("empty")&&(t.fillStyle="#fff"),e.brushType="both";var l=e.symbol.replace("empty","").toLowerCase();l.match("star")?(h=l.replace("star","")-0||5,s-=1,l="star"):("rectangle"===l||"arrow"===l)&&(o+=(r-a)/2,r=a);var d="";if(l.match("image")&&(d=l.replace(new RegExp("^image:\\/\\/"),""),l="image",o+=Math.round((r-a)/2)-1,r=a+=2),l=n.prototype.iconLibrary[l]){var c=e.x,p=e.y;t.moveTo(c,p+h),t.lineTo(c+5,p+h),t.moveTo(c+e.width-5,p+h),t.lineTo(c+e.width,p+h);var u=this;l(t,{x:o+4,y:s+4,width:r-8,height:a-8,n:h,image:d},function(){u.modSelf(),i()})}else t.moveTo(o,s+h),t.lineTo(o+r,s+h)}var o=t("./base"),s=t("zrender/shape/Polyline"),n=t("../util/shape/Icon"),r=t("../util/shape/HalfSmoothPolygon");t("../component/axis"),t("../component/grid"),t("../component/dataZoom");var a=t("../config");a.line={zlevel:0,z:2,clickable:!0,legendHoverLink:!0,xAxisIndex:0,yAxisIndex:0,dataFilter:"nearest",itemStyle:{normal:{label:{show:!1},lineStyle:{width:2,type:"solid",shadowColor:"rgba(0,0,0,0)",shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0}},emphasis:{label:{show:!1}}},symbolSize:2,showAllSymbol:!1};var h=t("../util/ecData"),l=t("zrender/tool/util"),d=t("zrender/tool/color");return e.prototype={type:a.CHART_TYPE_LINE,_buildShape:function(){this.finalPLMap={},this._buildPosition()},_buildHorizontal:function(t,e,i,o){for(var s,n,r,a,h,l,d,c,p,u=this.series,g=i[0][0],f=u[g],m=this.component.xAxis.getAxis(f.xAxisIndex||0),_={},y=0,x=e;x>y&&null!=m.getNameByIndex(y);y++){n=m.getCoordByIndex(y);for(var v=0,b=i.length;b>v;v++){s=this.component.yAxis.getAxis(u[i[v][0]].yAxisIndex||0),h=a=d=l=s.getCoord(0);for(var S=0,T=i[v].length;T>S;S++)g=i[v][S],f=u[g],c=f.data[y],p=this.getDataFromOption(c,"-"),_[g]=_[g]||[],o[g]=o[g]||{min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY,sum:0,counter:0,average:0},"-"!==p?(p>=0?(a-=S>0?s.getCoordSize(p):h-s.getCoord(p),r=a):0>p&&(l+=S>0?s.getCoordSize(p):s.getCoord(p)-d,r=l),_[g].push([n,r,y,m.getNameByIndex(y),n,h]),o[g].min>p&&(o[g].min=p,o[g].minY=r,o[g].minX=n),o[g].max<p&&(o[g].max=p,o[g].maxY=r,o[g].maxX=n),o[g].sum+=p,o[g].counter++):_[g].length>0&&(this.finalPLMap[g]=this.finalPLMap[g]||[],this.finalPLMap[g].push(_[g]),_[g]=[])}a=this.component.grid.getY();for(var z,v=0,b=i.length;b>v;v++)for(var S=0,T=i[v].length;T>S;S++)g=i[v][S],f=u[g],c=f.data[y],p=this.getDataFromOption(c,"-"),"-"==p&&this.deepQuery([c,f,this.option],"calculable")&&(z=this.deepQuery([c,f],"symbolSize"),a+=2*z+5,r=a,this.shapeList.push(this._getCalculableItem(g,y,m.getNameByIndex(y),n,r,"horizontal")))}for(var C in _)_[C].length>0&&(this.finalPLMap[C]=this.finalPLMap[C]||[],this.finalPLMap[C].push(_[C]),_[C]=[]);this._calculMarkMapXY(o,i,"y"),this._buildBorkenLine(t,this.finalPLMap,m,"horizontal")},_buildVertical:function(t,e,i,o){for(var s,n,r,a,h,l,d,c,p,u=this.series,g=i[0][0],f=u[g],m=this.component.yAxis.getAxis(f.yAxisIndex||0),_={},y=0,x=e;x>y&&null!=m.getNameByIndex(y);y++){r=m.getCoordByIndex(y);for(var v=0,b=i.length;b>v;v++){s=this.component.xAxis.getAxis(u[i[v][0]].xAxisIndex||0),h=a=d=l=s.getCoord(0);for(var S=0,T=i[v].length;T>S;S++)g=i[v][S],f=u[g],c=f.data[y],p=this.getDataFromOption(c,"-"),_[g]=_[g]||[],o[g]=o[g]||{min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY,sum:0,counter:0,average:0},"-"!==p?(p>=0?(a+=S>0?s.getCoordSize(p):s.getCoord(p)-h,n=a):0>p&&(l-=S>0?s.getCoordSize(p):d-s.getCoord(p),n=l),_[g].push([n,r,y,m.getNameByIndex(y),h,r]),o[g].min>p&&(o[g].min=p,o[g].minX=n,o[g].minY=r),o[g].max<p&&(o[g].max=p,o[g].maxX=n,o[g].maxY=r),o[g].sum+=p,o[g].counter++):_[g].length>0&&(this.finalPLMap[g]=this.finalPLMap[g]||[],this.finalPLMap[g].push(_[g]),_[g]=[])}a=this.component.grid.getXend();for(var z,v=0,b=i.length;b>v;v++)for(var S=0,T=i[v].length;T>S;S++)g=i[v][S],f=u[g],c=f.data[y],p=this.getDataFromOption(c,"-"),"-"==p&&this.deepQuery([c,f,this.option],"calculable")&&(z=this.deepQuery([c,f],"symbolSize"),a-=2*z+5,n=a,this.shapeList.push(this._getCalculableItem(g,y,m.getNameByIndex(y),n,r,"vertical")))}for(var C in _)_[C].length>0&&(this.finalPLMap[C]=this.finalPLMap[C]||[],this.finalPLMap[C].push(_[C]),_[C]=[]);this._calculMarkMapXY(o,i,"x"),this._buildBorkenLine(t,this.finalPLMap,m,"vertical")},_buildOther:function(t,e,i,o){for(var s,n=this.series,r={},a=0,h=i.length;h>a;a++)for(var l=0,d=i[a].length;d>l;l++){var c=i[a][l],p=n[c];s=this.component.xAxis.getAxis(p.xAxisIndex||0);var u=this.component.yAxis.getAxis(p.yAxisIndex||0),g=u.getCoord(0);r[c]=r[c]||[],o[c]=o[c]||{min0:Number.POSITIVE_INFINITY,min1:Number.POSITIVE_INFINITY,max0:Number.NEGATIVE_INFINITY,max1:Number.NEGATIVE_INFINITY,sum0:0,sum1:0,counter0:0,counter1:0,average0:0,average1:0};for(var f=0,m=p.data.length;m>f;f++){var _=p.data[f],y=this.getDataFromOption(_,"-");if(y instanceof Array){var x=s.getCoord(y[0]),v=u.getCoord(y[1]);r[c].push([x,v,f,y[0],x,g]),o[c].min0>y[0]&&(o[c].min0=y[0],o[c].minY0=v,o[c].minX0=x),o[c].max0<y[0]&&(o[c].max0=y[0],o[c].maxY0=v,o[c].maxX0=x),o[c].sum0+=y[0],o[c].counter0++,o[c].min1>y[1]&&(o[c].min1=y[1],o[c].minY1=v,o[c].minX1=x),o[c].max1<y[1]&&(o[c].max1=y[1],o[c].maxY1=v,o[c].maxX1=x),o[c].sum1+=y[1],o[c].counter1++}}}for(var b in r)r[b].length>0&&(this.finalPLMap[b]=this.finalPLMap[b]||[],this.finalPLMap[b].push(r[b]),r[b]=[]);this._calculMarkMapXY(o,i,"xy"),this._buildBorkenLine(t,this.finalPLMap,s,"other")},_buildBorkenLine:function(t,e,i,o){for(var n,a="other"==o?"horizontal":o,c=this.series,p=t.length-1;p>=0;p--){var u=t[p],g=c[u],f=e[u];if(g.type===this.type&&null!=f)for(var m=this._getBbox(u,a),_=this._sIndex2ColorMap[u],y=this.query(g,"itemStyle.normal.lineStyle.width"),x=this.query(g,"itemStyle.normal.lineStyle.type"),v=this.query(g,"itemStyle.normal.lineStyle.color"),b=this.getItemStyleColor(this.query(g,"itemStyle.normal.color"),u,-1),S=null!=this.query(g,"itemStyle.normal.areaStyle"),T=this.query(g,"itemStyle.normal.areaStyle.color"),z=0,C=f.length;C>z;z++){var w=f[z],L="other"!=o&&this._isLarge(a,w);if(L)w=this._getLargePointList(a,w,g.dataFilter);else for(var E=0,M=w.length;M>E;E++)n=g.data[w[E][2]],(this.deepQuery([n,g,this.option],"calculable")||this.deepQuery([n,g],"showAllSymbol")||"categoryAxis"===i.type&&i.isMainAxis(w[E][2])&&"none"!=this.deepQuery([n,g],"symbol"))&&this.shapeList.push(this._getSymbol(u,w[E][2],w[E][3],w[E][0],w[E][1],a));var A=new s({zlevel:this.getZlevelBase(),z:this.getZBase(),style:{miterLimit:y,pointList:w,strokeColor:v||b||_,lineWidth:y,lineType:x,smooth:this._getSmooth(g.smooth),smoothConstraint:m,shadowColor:this.query(g,"itemStyle.normal.lineStyle.shadowColor"),shadowBlur:this.query(g,"itemStyle.normal.lineStyle.shadowBlur"),shadowOffsetX:this.query(g,"itemStyle.normal.lineStyle.shadowOffsetX"),shadowOffsetY:this.query(g,"itemStyle.normal.lineStyle.shadowOffsetY")},hoverable:!1,_main:!0,_seriesIndex:u,_orient:a});if(h.pack(A,c[u],u,0,z,c[u].name),this.shapeList.push(A),S){var k=new r({zlevel:this.getZlevelBase(),z:this.getZBase(),style:{miterLimit:y,pointList:l.clone(w).concat([[w[w.length-1][4],w[w.length-1][5]],[w[0][4],w[0][5]]]),brushType:"fill",smooth:this._getSmooth(g.smooth),smoothConstraint:m,color:T?T:d.alpha(_,.5)},highlightStyle:{brushType:"fill"},hoverable:!1,_main:!0,_seriesIndex:u,_orient:a});h.pack(k,c[u],u,0,z,c[u].name),this.shapeList.push(k)}}}},_getBbox:function(t,e){var i=this.component.grid.getBbox(),o=this.xMarkMap[t];return null!=o.minX0?[[Math.min(o.minX0,o.maxX0,o.minX1,o.maxX1),Math.min(o.minY0,o.maxY0,o.minY1,o.maxY1)],[Math.max(o.minX0,o.maxX0,o.minX1,o.maxX1),Math.max(o.minY0,o.maxY0,o.minY1,o.maxY1)]]:("horizontal"===e?(i[0][1]=Math.min(o.minY,o.maxY),i[1][1]=Math.max(o.minY,o.maxY)):(i[0][0]=Math.min(o.minX,o.maxX),i[1][0]=Math.max(o.minX,o.maxX)),i)},_isLarge:function(t,e){return e.length<2?!1:"horizontal"===t?Math.abs(e[0][0]-e[1][0])<.5:Math.abs(e[0][1]-e[1][1])<.5},_getLargePointList:function(t,e,i){var o;o="horizontal"===t?this.component.grid.getWidth():this.component.grid.getHeight();var s=e.length,n=[];if("function"!=typeof i)switch(i){case"min":i=function(t){return Math.max.apply(null,t)};break;case"max":i=function(t){return Math.min.apply(null,t)};break;case"average":i=function(t){for(var e=0,i=0;i<t.length;i++)e+=t[i];return e/t.length};break;default:i=function(t){return t[0]}}for(var r=[],a=0;o>a;a++){var h=Math.floor(s/o*a),l=Math.min(Math.floor(s/o*(a+1)),s);if(!(h>=l)){for(var d=h;l>d;d++)r[d-h]="horizontal"===t?e[d][1]:e[d][0];r.length=l-h;for(var c=i(r),p=-1,u=1/0,d=h;l>d;d++){var g="horizontal"===t?e[d][1]:e[d][0],f=Math.abs(g-c);u>f&&(p=d,u=f)}var m=e[p].slice();"horizontal"===t?m[1]=c:m[0]=c,n.push(m)}}return n},_getSmooth:function(t){return t?.3:0},_getCalculableItem:function(t,e,i,o,s,n){var r=this.series,h=r[t].calculableHolderColor||this.ecTheme.calculableHolderColor||a.calculableHolderColor,l=this._getSymbol(t,e,i,o,s,n);return l.style.color=h,l.style.strokeColor=h,l.rotation=[0,0],l.hoverable=!1,l.draggable=!1,l.style.text=void 0,l},_getSymbol:function(t,e,i,o,s,n){var r=this.series,a=r[t],h=a.data[e],l=this.getSymbolShape(a,t,h,e,i,o,s,this._sIndex2ShapeMap[t],this._sIndex2ColorMap[t],"#fff","vertical"===n?"horizontal":"vertical");return l.zlevel=this.getZlevelBase(),l.z=this.getZBase()+1,this.deepQuery([h,a,this.option],"calculable")&&(this.setCalculable(l),l.draggable=!0),l},getMarkCoord:function(t,e){var i=this.series[t],o=this.xMarkMap[t],s=this.component.xAxis.getAxis(i.xAxisIndex),n=this.component.yAxis.getAxis(i.yAxisIndex);if(e.type&&("max"===e.type||"min"===e.type||"average"===e.type)){var r=null!=e.valueIndex?e.valueIndex:null!=o.maxX0?"1":"";return[o[e.type+"X"+r],o[e.type+"Y"+r],o[e.type+"Line"+r],o[e.type+r]]}return["string"!=typeof e.xAxis&&s.getCoordByIndex?s.getCoordByIndex(e.xAxis||0):s.getCoord(e.xAxis||0),"string"!=typeof e.yAxis&&n.getCoordByIndex?n.getCoordByIndex(e.yAxis||0):n.getCoord(e.yAxis||0)]},refresh:function(t){t&&(this.option=t,this.series=t.series),this.backupShapeList(),this._buildShape()},ontooltipHover:function(t,e){for(var i,o,s=t.seriesIndex,n=t.dataIndex,r=s.length;r--;)if(i=this.finalPLMap[s[r]])for(var a=0,h=i.length;h>a;a++){o=i[a];for(var l=0,d=o.length;d>l;l++)n===o[l][2]&&e.push(this._getSymbol(s[r],o[l][2],o[l][3],o[l][0],o[l][1],"horizontal"))}},addDataAnimation:function(t,e){function i(){f--,0===f&&e&&e()}function o(t){t.style.controlPointList=null}for(var s=this.series,n={},r=0,a=t.length;a>r;r++)n[t[r][0]]=t[r];for(var h,l,d,c,p,u,g,f=0,r=this.shapeList.length-1;r>=0;r--)if(p=this.shapeList[r]._seriesIndex,n[p]&&!n[p][3]){if(this.shapeList[r]._main&&this.shapeList[r].style.pointList.length>1){if(u=this.shapeList[r].style.pointList,l=Math.abs(u[0][0]-u[1][0]),c=Math.abs(u[0][1]-u[1][1]),g="horizontal"===this.shapeList[r]._orient,n[p][2]){if("half-smooth-polygon"===this.shapeList[r].type){var m=u.length;
this.shapeList[r].style.pointList[m-3]=u[m-2],this.shapeList[r].style.pointList[m-3][g?0:1]=u[m-4][g?0:1],this.shapeList[r].style.pointList[m-2]=u[m-1]}this.shapeList[r].style.pointList.pop(),g?(h=l,d=0):(h=0,d=-c)}else{if(this.shapeList[r].style.pointList.shift(),"half-smooth-polygon"===this.shapeList[r].type){var _=this.shapeList[r].style.pointList.pop();g?_[0]=u[0][0]:_[1]=u[0][1],this.shapeList[r].style.pointList.push(_)}g?(h=-l,d=0):(h=0,d=c)}this.shapeList[r].style.controlPointList=null,this.zr.modShape(this.shapeList[r])}else{if(n[p][2]&&this.shapeList[r]._dataIndex===s[p].data.length-1){this.zr.delShape(this.shapeList[r].id);continue}if(!n[p][2]&&0===this.shapeList[r]._dataIndex){this.zr.delShape(this.shapeList[r].id);continue}}this.shapeList[r].position=[0,0],f++,this.zr.animate(this.shapeList[r].id,"").when(this.query(this.option,"animationDurationUpdate"),{position:[h,d]}).during(o).done(i).start()}f||i()}},n.prototype.iconLibrary.legendLineIcon=i,l.inherits(e,o),t("../chart").define("line",e),e}),i("echarts/util/ecAnimation",["require","zrender/tool/util","zrender/tool/curve","zrender/shape/Polygon"],function(t){function e(t,e,i,o,s){var n,r=i.style.pointList,a=r.length;if(!e){if(n=[],"vertical"!=i._orient)for(var h=r[0][1],l=0;a>l;l++)n[l]=[r[l][0],h];else for(var d=r[0][0],l=0;a>l;l++)n[l]=[d,r[l][1]];"half-smooth-polygon"==i.type&&(n[a-1]=g.clone(r[a-1]),n[a-2]=g.clone(r[a-2])),e={style:{pointList:n}}}n=e.style.pointList;var c=n.length;i.style.pointList=c==a?n:a>c?n.concat(r.slice(c)):n.slice(0,a),t.addShape(i),i.__animating=!0,t.animate(i.id,"style").when(o,{pointList:r}).during(function(){i.updateControlPoints&&i.updateControlPoints(i.style)}).done(function(){i.__animating=!1}).start(s)}function i(t,e){for(var i=arguments.length,o=2;i>o;o++){var s=arguments[o];t.style[s]=e.style[s]}}function o(t,e,o,s,n){var r=o.style;e||(e={position:o.position,style:{x:r.x,y:"vertical"==o._orient?r.y+r.height:r.y,width:"vertical"==o._orient?r.width:0,height:"vertical"!=o._orient?r.height:0}});var a=r.x,h=r.y,l=r.width,d=r.height,c=[o.position[0],o.position[1]];i(o,e,"x","y","width","height"),o.position=e.position,t.addShape(o),(c[0]!=e.position[0]||c[1]!=e.position[1])&&t.animate(o.id,"").when(s,{position:c}).start(n),o.__animating=!0,t.animate(o.id,"style").when(s,{x:a,y:h,width:l,height:d}).done(function(){o.__animating=!1}).start(n)}function s(t,e,i,o,s){if(!e){var n=i.style.y;e={style:{y:[n[0],n[0],n[0],n[0]]}}}var r=i.style.y;i.style.y=e.style.y,t.addShape(i),i.__animating=!0,t.animate(i.id,"style").when(o,{y:r}).done(function(){i.__animating=!1}).start(s)}function n(t,e,i,o,s){var n=i.style.x,r=i.style.y,a=i.style.r0,h=i.style.r;i.__animating=!0,"r"!=i._animationAdd?(i.style.r0=0,i.style.r=0,i.rotation=[2*Math.PI,n,r],t.addShape(i),t.animate(i.id,"style").when(o,{r0:a,r:h}).done(function(){i.__animating=!1}).start(s),t.animate(i.id,"").when(o,{rotation:[0,n,r]}).start(s)):(i.style.r0=i.style.r,t.addShape(i),t.animate(i.id,"style").when(o,{r0:a}).done(function(){i.__animating=!1}).start(s))}function r(t,e,o,s,n){e||(e="r"!=o._animationAdd?{style:{startAngle:o.style.startAngle,endAngle:o.style.startAngle}}:{style:{r0:o.style.r}});var r=o.style.startAngle,a=o.style.endAngle;i(o,e,"startAngle","endAngle"),t.addShape(o),o.__animating=!0,t.animate(o.id,"style").when(s,{startAngle:r,endAngle:a}).done(function(){o.__animating=!1}).start(n)}function a(t,e,o,s,n){e||(e={style:{x:"left"==o.style.textAlign?o.style.x+100:o.style.x-100,y:o.style.y}});var r=o.style.x,a=o.style.y;i(o,e,"x","y"),t.addShape(o),o.__animating=!0,t.animate(o.id,"style").when(s,{x:r,y:a}).done(function(){o.__animating=!1}).start(n)}function h(e,i,o,s,n){var r=t("zrender/shape/Polygon").prototype.getRect(o.style),a=r.x+r.width/2,h=r.y+r.height/2;o.scale=[.1,.1,a,h],e.addShape(o),o.__animating=!0,e.animate(o.id,"").when(s,{scale:[1,1,a,h]}).done(function(){o.__animating=!1}).start(n)}function l(t,e,o,s,n){e||(e={style:{source0:0,source1:o.style.source1>0?360:-360,target0:0,target1:o.style.target1>0?360:-360}});var r=o.style.source0,a=o.style.source1,h=o.style.target0,l=o.style.target1;e.style&&i(o,e,"source0","source1","target0","target1"),t.addShape(o),o.__animating=!0,t.animate(o.id,"style").when(s,{source0:r,source1:a,target0:h,target1:l}).done(function(){o.__animating=!1}).start(n)}function d(t,e,i,o,s){e||(e={style:{angle:i.style.startAngle}});var n=i.style.angle;i.style.angle=e.style.angle,t.addShape(i),i.__animating=!0,t.animate(i.id,"style").when(o,{angle:n}).done(function(){i.__animating=!1}).start(s)}function c(t,e,i,s,n,r){if(i.style._x=i.style.x,i.style._y=i.style.y,i.style._width=i.style.width,i.style._height=i.style.height,e)o(t,e,i,s,n);else{var a=i._x||0,h=i._y||0;i.scale=[.01,.01,a,h],t.addShape(i),i.__animating=!0,t.animate(i.id,"").delay(r).when(s,{scale:[1,1,a,h]}).done(function(){i.__animating=!1}).start(n||"QuinticOut")}}function p(t,e,o,s,n){e||(e={style:{xStart:o.style.xStart,yStart:o.style.yStart,xEnd:o.style.xStart,yEnd:o.style.yStart}});var r=o.style.xStart,a=o.style.xEnd,h=o.style.yStart,l=o.style.yEnd;i(o,e,"xStart","xEnd","yStart","yEnd"),t.addShape(o),o.__animating=!0,t.animate(o.id,"style").when(s,{xStart:r,xEnd:a,yStart:h,yEnd:l}).done(function(){o.__animating=!1}).start(n)}function u(t,e,i,o,s){s=s||"QuinticOut",i.__animating=!0,t.addShape(i);var n=i.style,r=function(){i.__animating=!1},a=n.xStart,h=n.yStart,l=n.xEnd,d=n.yEnd;if(n.curveness>0){i.updatePoints(n);var c={p:0},p=n.cpX1,u=n.cpY1,g=[],m=[],_=f.quadraticSubdivide;t.animation.animate(c).when(o,{p:1}).during(function(){_(a,p,l,c.p,g),_(h,u,d,c.p,m),n.cpX1=g[1],n.cpY1=m[1],n.xEnd=g[2],n.yEnd=m[2],t.modShape(i)}).done(r).start(s)}else t.animate(i.id,"style").when(0,{xEnd:a,yEnd:h}).when(o,{xEnd:l,yEnd:d}).done(r).start(s)}var g=t("zrender/tool/util"),f=t("zrender/tool/curve");return{pointList:e,rectangle:o,candle:s,ring:n,sector:r,text:a,polygon:h,ribbon:l,gaugePointer:d,icon:c,line:p,markline:u}}),i("echarts/layout/EdgeBundling",["require","../data/KDTree","zrender/tool/vector"],function(t){function e(t,e){t=t.array,e=e.array;var i=e[0]-t[0],o=e[1]-t[1],s=e[2]-t[2],n=e[3]-t[3];return i*i+o*o+s*s+n*n}function i(t){this.points=[t.mp0,t.mp1],this.group=t}function o(t){var e=t.points;e[0][1]<e[1][1]||t instanceof i?(this.array=[e[0][0],e[0][1],e[1][0],e[1][1]],this._startPoint=e[0],this._endPoint=e[1]):(this.array=[e[1][0],e[1][1],e[0][0],e[0][1]],this._startPoint=e[1],this._endPoint=e[0]),this.ink=d(e[0],e[1]),this.edge=t,this.group=null}function s(){this.edgeList=[],this.mp0=h(),this.mp1=h(),this.ink=0}function n(){this.maxNearestEdge=6,this.maxTurningAngle=Math.PI/4,this.maxIteration=20}var r=t("../data/KDTree"),a=t("zrender/tool/vector"),h=a.create,l=a.distSquare,d=a.dist,c=a.copy,p=a.clone;return o.prototype.getStartPoint=function(){return this._startPoint},o.prototype.getEndPoint=function(){return this._endPoint},s.prototype.addEdge=function(t){t.group=this,this.edgeList.push(t)},s.prototype.removeEdge=function(t){t.group=null,this.edgeList.splice(this.edgeList.indexOf(t),1)},n.prototype={constructor:n,run:function(t){function e(t,e){return l(t,e)<1e-10}function o(t,i){for(var o=[],s=0,n=0;n<t.length;n++)s>0&&e(t[n],o[s-1])||(o[s++]=p(t[n]));return i[0]&&!e(o[0],i[0])&&(o=o.reverse()),o}for(var s=this._iterate(t),n=0;n++<this.maxIteration;){for(var r=[],a=0;a<s.groups.length;a++)r.push(new i(s.groups[a]));var h=this._iterate(r);if(h.savedInk<=0)break;s=h}var d=[],c=function(t,e){for(var s,n=0;n<t.length;n++){var r=t[n];if(r.edgeList[0]&&r.edgeList[0].edge instanceof i){for(var a=[],h=0;h<r.edgeList.length;h++)a.push(r.edgeList[h].edge.group);s=e?e.slice():[],s.unshift(r.mp0),s.push(r.mp1),c(a,s)}else for(var h=0;h<r.edgeList.length;h++){var l=r.edgeList[h];s=e?e.slice():[],s.unshift(r.mp0),s.push(r.mp1),s.unshift(l.getStartPoint()),s.push(l.getEndPoint()),d.push({points:o(s,l.edge.points),rawEdge:l.edge})}}};return c(s.groups),d},_iterate:function(t){for(var i=[],n=[],a=0,l=0;l<t.length;l++){var d=new o(t[l]);i.push(d)}for(var p=new r(i,4),u=[],g=h(),f=h(),m=0,_=h(),y=h(),x=0,l=0;l<i.length;l++){var d=i[l];if(!d.group){p.nearestN(d,this.maxNearestEdge,e,u);for(var v=0,b=null,S=null,T=0;T<u.length;T++){var z=u[T],C=0;z.group?z.group!==S&&(S=z.group,m=this._calculateGroupEdgeInk(z.group,d,g,f),C=z.group.ink+d.ink-m):(m=this._calculateEdgeEdgeInk(d,z,g,f),C=z.ink+d.ink-m),C>v&&(v=C,b=z,c(y,f),c(_,g),x=m)}if(b){a+=v;var w;b.group||(w=new s,n.push(w),w.addEdge(b)),w=b.group,c(w.mp0,_),c(w.mp1,y),w.ink=x,b.group.addEdge(d)}else{var w=new s;n.push(w),c(w.mp0,d.getStartPoint()),c(w.mp1,d.getEndPoint()),w.ink=d.ink,w.addEdge(d)}}}return{groups:n,edges:i,savedInk:a}},_calculateEdgeEdgeInk:function(){var t=[],e=[];return function(i,o,s,n){t[0]=i.getStartPoint(),t[1]=o.getStartPoint(),e[0]=i.getEndPoint(),e[1]=o.getEndPoint(),this._calculateMeetPoints(t,e,s,n);var r=d(t[0],s)+d(s,n)+d(n,e[0])+d(t[1],s)+d(n,e[1]);return r}}(),_calculateGroupEdgeInk:function(t,e,i,o){for(var s=[],n=[],r=0;r<t.edgeList.length;r++){var a=t.edgeList[r];s.push(a.getStartPoint()),n.push(a.getEndPoint())}s.push(e.getStartPoint()),n.push(e.getEndPoint()),this._calculateMeetPoints(s,n,i,o);for(var h=d(i,o),r=0;r<s.length;r++)h+=d(s[r],i)+d(n[r],o);return h},_calculateMeetPoints:function(){var t=h(),e=h();return function(i,o,s,n){a.set(t,0,0),a.set(e,0,0);for(var r=i.length,h=0;r>h;h++)a.add(t,t,i[h]);a.scale(t,t,1/r),r=o.length;for(var h=0;r>h;h++)a.add(e,e,o[h]);a.scale(e,e,1/r),this._limitTurningAngle(i,t,e,s),this._limitTurningAngle(o,e,t,n)}}(),_limitTurningAngle:function(){var t=h(),e=h(),i=h(),o=h();return function(s,n,r,h){var c=Math.cos(this.maxTurningAngle),p=Math.tan(this.maxTurningAngle);a.sub(t,n,r),a.normalize(t,t),a.copy(h,n);for(var u=0,g=0;g<s.length;g++){var f=s[g];a.sub(e,f,n);var m=a.len(e);a.scale(e,e,1/m);var _=a.dot(e,t);if(c>_){a.scaleAndAdd(i,n,t,m*_);var y=d(i,f),x=y/p;a.scaleAndAdd(o,i,t,-x);var v=l(o,n);v>u&&(u=v,a.copy(h,o))}}}}()},n}),i("zrender/shape/Line",["require","./Base","./util/dashedLineTo","../tool/util"],function(t){var e=t("./Base"),i=t("./util/dashedLineTo"),o=function(t){this.brushTypeOnly="stroke",this.textPosition="end",e.call(this,t)};return o.prototype={type:"line",buildPath:function(t,e){if(e.lineType&&"solid"!=e.lineType){if("dashed"==e.lineType||"dotted"==e.lineType){var o=(e.lineWidth||1)*("dashed"==e.lineType?5:1);i(t,e.xStart,e.yStart,e.xEnd,e.yEnd,o)}}else t.moveTo(e.xStart,e.yStart),t.lineTo(e.xEnd,e.yEnd)},getRect:function(t){if(t.__rect)return t.__rect;var e=t.lineWidth||1;return t.__rect={x:Math.min(t.xStart,t.xEnd)-e,y:Math.min(t.yStart,t.yEnd)-e,width:Math.abs(t.xStart-t.xEnd)+e,height:Math.abs(t.yStart-t.yEnd)+e},t.__rect}},t("../tool/util").inherits(o,e),o}),i("echarts/util/shape/GaugePointer",["require","zrender/shape/Base","zrender/tool/util","./normalIsCover"],function(t){function e(t){i.call(this,t)}var i=t("zrender/shape/Base"),o=t("zrender/tool/util");return e.prototype={type:"gauge-pointer",buildPath:function(t,e){var i=e.r,o=e.width,s=e.angle,n=e.x-Math.cos(s)*o*(o>=i/3?1:2),r=e.y+Math.sin(s)*o*(o>=i/3?1:2);s=e.angle-Math.PI/2,t.moveTo(n,r),t.lineTo(e.x+Math.cos(s)*o,e.y-Math.sin(s)*o),t.lineTo(e.x+Math.cos(e.angle)*i,e.y-Math.sin(e.angle)*i),t.lineTo(e.x-Math.cos(s)*o,e.y+Math.sin(s)*o),t.lineTo(n,r)},getRect:function(t){if(t.__rect)return t.__rect;var e=2*t.width,i=t.x,o=t.y,s=i+Math.cos(t.angle)*t.r,n=o-Math.sin(t.angle)*t.r;return t.__rect={x:Math.min(i,s)-e,y:Math.min(o,n)-e,width:Math.abs(i-s)+e,height:Math.abs(o-n)+e},t.__rect},isCover:t("./normalIsCover")},o.inherits(e,i),e}),i("echarts/component/base",["require","../config","../util/ecData","../util/ecQuery","../util/number","zrender/tool/util","zrender/tool/env"],function(t){function e(t,e,s,n,r){this.ecTheme=t,this.messageCenter=e,this.zr=s,this.option=n,this.series=n.series,this.myChart=r,this.component=r.component,this.shapeList=[],this.effectList=[];var a=this;a._onlegendhoverlink=function(t){if(a.legendHoverLink)for(var e,s=t.target,n=a.shapeList.length-1;n>=0;n--)e=a.type==i.CHART_TYPE_PIE||a.type==i.CHART_TYPE_FUNNEL?o.get(a.shapeList[n],"name"):(o.get(a.shapeList[n],"series")||{}).name,e!=s||a.shapeList[n].invisible||a.shapeList[n].__animating||a.zr.addHoverShape(a.shapeList[n])},e&&e.bind(i.EVENT.LEGEND_HOVERLINK,this._onlegendhoverlink)}var i=t("../config"),o=t("../util/ecData"),s=t("../util/ecQuery"),n=t("../util/number"),r=t("zrender/tool/util");return e.prototype={canvasSupported:t("zrender/tool/env").canvasSupported,_getZ:function(t){if(null!=this[t])return this[t];var e=this.ecTheme[this.type];return e&&null!=e[t]?e[t]:(e=i[this.type],e&&null!=e[t]?e[t]:0)},getZlevelBase:function(){return this._getZ("zlevel")},getZBase:function(){return this._getZ("z")},reformOption:function(t){return t=r.merge(r.merge(t||{},r.clone(this.ecTheme[this.type]||{})),r.clone(i[this.type]||{})),this.z=t.z,this.zlevel=t.zlevel,t},reformCssArray:function(t){if(!(t instanceof Array))return[t,t,t,t];switch(t.length+""){case"4":return t;case"3":return[t[0],t[1],t[2],t[1]];case"2":return[t[0],t[1],t[0],t[1]];case"1":return[t[0],t[0],t[0],t[0]];case"0":return[0,0,0,0]}},getShapeById:function(t){for(var e=0,i=this.shapeList.length;i>e;e++)if(this.shapeList[e].id===t)return this.shapeList[e];return null},getFont:function(t){var e=this.getTextStyle(r.clone(t));return e.fontStyle+" "+e.fontWeight+" "+e.fontSize+"px "+e.fontFamily},getTextStyle:function(t){return r.merge(r.merge(t||{},this.ecTheme.textStyle),i.textStyle)},getItemStyleColor:function(t,e,i,o){return"function"==typeof t?t.call(this.myChart,{seriesIndex:e,series:this.series[e],dataIndex:i,data:o}):t},getDataFromOption:function(t,e){return null!=t?null!=t.value?t.value:t:e},subPixelOptimize:function(t,e){return t=e%2===1?Math.floor(t)+.5:Math.round(t)},resize:function(){this.refresh&&this.refresh(),this.clearEffectShape&&this.clearEffectShape(!0);var t=this;setTimeout(function(){t.animationEffect&&t.animationEffect()},200)},clear:function(){this.clearEffectShape&&this.clearEffectShape(),this.zr&&this.zr.delShape(this.shapeList),this.shapeList=[]},dispose:function(){this.onbeforDispose&&this.onbeforDispose(),this.clear(),this.shapeList=null,this.effectList=null,this.messageCenter&&this.messageCenter.unbind(i.EVENT.LEGEND_HOVERLINK,this._onlegendhoverlink),this.onafterDispose&&this.onafterDispose()},query:s.query,deepQuery:s.deepQuery,deepMerge:s.deepMerge,parsePercent:n.parsePercent,parseCenter:n.parseCenter,parseRadius:n.parseRadius,numAddCommas:n.addCommas},e}),i("echarts/util/shape/HalfSmoothPolygon",["require","zrender/shape/Base","zrender/shape/util/smoothBezier","zrender/tool/util","zrender/shape/Polygon"],function(t){function e(t){i.call(this,t)}var i=t("zrender/shape/Base"),o=t("zrender/shape/util/smoothBezier"),s=t("zrender/tool/util");return e.prototype={type:"half-smooth-polygon",buildPath:function(e,i){var s=i.pointList;if(!(s.length<2))if(i.smooth){var n=o(s.slice(0,-2),i.smooth,!1,i.smoothConstraint);e.moveTo(s[0][0],s[0][1]);for(var r,a,h,l=s.length,d=0;l-3>d;d++)r=n[2*d],a=n[2*d+1],h=s[d+1],e.bezierCurveTo(r[0],r[1],a[0],a[1],h[0],h[1]);e.lineTo(s[l-2][0],s[l-2][1]),e.lineTo(s[l-1][0],s[l-1][1]),e.lineTo(s[0][0],s[0][1])}else t("zrender/shape/Polygon").prototype.buildPath(e,i)}},s.inherits(e,i),e}),i("zrender/shape/Base",["require","../tool/matrix","../tool/guid","../tool/util","../tool/log","../mixin/Transformable","../mixin/Eventful","../tool/area","../tool/color"],function(t){function e(e,o,s,n,r,a,h){r&&(e.font=r),e.textAlign=a,e.textBaseline=h;var l=i(o,s,n,r,a,h);o=(o+"").split("\n");var d=t("../tool/area").getTextHeight("国",r);switch(h){case"top":n=l.y;break;case"bottom":n=l.y+d;break;default:n=l.y+d/2}for(var c=0,p=o.length;p>c;c++)e.fillText(o[c],s,n),n+=d}function i(e,i,o,s,n,r){var a=t("../tool/area"),h=a.getTextWidth(e,s),l=a.getTextHeight("国",s);switch(e=(e+"").split("\n"),n){case"end":case"right":i-=h;break;case"center":i-=h/2}switch(r){case"top":break;case"bottom":o-=l*e.length;break;default:o-=l*e.length/2}return{x:i,y:o,width:h,height:l*e.length}}var o=window.G_vmlCanvasManager,s=t("../tool/matrix"),n=t("../tool/guid"),r=t("../tool/util"),a=t("../tool/log"),h=t("../mixin/Transformable"),l=t("../mixin/Eventful"),d=function(t){t=t||{},this.id=t.id||n();for(var e in t)this[e]=t[e];this.style=this.style||{},this.highlightStyle=this.highlightStyle||null,this.parent=null,this.__dirty=!0,this.__clipShapes=[],h.call(this),l.call(this)};d.prototype.invisible=!1,d.prototype.ignore=!1,d.prototype.zlevel=0,d.prototype.draggable=!1,d.prototype.clickable=!1,d.prototype.hoverable=!0,d.prototype.z=0,d.prototype.brush=function(t,e){var i=this.beforeBrush(t,e);switch(t.beginPath(),this.buildPath(t,i),i.brushType){case"both":t.fill();case"stroke":i.lineWidth>0&&t.stroke();break;default:t.fill()}this.drawText(t,i,this.style),this.afterBrush(t)},d.prototype.beforeBrush=function(t,e){var i=this.style;return this.brushTypeOnly&&(i.brushType=this.brushTypeOnly),e&&(i=this.getHighlightStyle(i,this.highlightStyle||{},this.brushTypeOnly)),"stroke"==this.brushTypeOnly&&(i.strokeColor=i.strokeColor||i.color),t.save(),this.doClip(t),this.setContext(t,i),this.setTransform(t),i},d.prototype.afterBrush=function(t){t.restore()};var c=[["color","fillStyle"],["strokeColor","strokeStyle"],["opacity","globalAlpha"],["lineCap","lineCap"],["lineJoin","lineJoin"],["miterLimit","miterLimit"],["lineWidth","lineWidth"],["shadowBlur","shadowBlur"],["shadowColor","shadowColor"],["shadowOffsetX","shadowOffsetX"],["shadowOffsetY","shadowOffsetY"]];d.prototype.setContext=function(t,e){for(var i=0,o=c.length;o>i;i++){var s=c[i][0],n=e[s],r=c[i][1];"undefined"!=typeof n&&(t[r]=n)}};var p=s.create();return d.prototype.doClip=function(t){if(this.__clipShapes&&!o)for(var e=0;e<this.__clipShapes.length;e++){var i=this.__clipShapes[e];if(i.needTransform){var n=i.transform;s.invert(p,n),t.transform(n[0],n[1],n[2],n[3],n[4],n[5])}if(t.beginPath(),i.buildPath(t,i.style),t.clip(),i.needTransform){var n=p;t.transform(n[0],n[1],n[2],n[3],n[4],n[5])}}},d.prototype.getHighlightStyle=function(e,i,o){var s={};for(var n in e)s[n]=e[n];var r=t("../tool/color"),a=r.getHighlightColor();"stroke"!=e.brushType?(s.strokeColor=a,s.lineWidth=(e.lineWidth||1)+this.getHighlightZoom(),s.brushType="both"):"stroke"!=o?(s.strokeColor=a,s.lineWidth=(e.lineWidth||1)+this.getHighlightZoom()):s.strokeColor=i.strokeColor||r.mix(e.strokeColor,r.toRGB(a));for(var n in i)"undefined"!=typeof i[n]&&(s[n]=i[n]);return s},d.prototype.getHighlightZoom=function(){return"text"!=this.type?6:2},d.prototype.drift=function(t,e){this.position[0]+=t,this.position[1]+=e},d.prototype.buildPath=function(){a("buildPath not implemented in "+this.type)},d.prototype.getRect=function(){a("getRect not implemented in "+this.type)},d.prototype.isCover=function(e,i){var o=this.transformCoordToLocal(e,i);return e=o[0],i=o[1],this.isCoverRect(e,i)?t("../tool/area").isInside(this,this.style,e,i):!1},d.prototype.isCoverRect=function(t,e){var i=this.style.__rect;return i||(i=this.style.__rect=this.getRect(this.style)),t>=i.x&&t<=i.x+i.width&&e>=i.y&&e<=i.y+i.height},d.prototype.drawText=function(t,i,o){if("undefined"!=typeof i.text&&i.text!==!1){var s=i.textColor||i.color||i.strokeColor;t.fillStyle=s;var n,r,a,h,l=10,d=i.textPosition||this.textPosition||"top";switch(d){case"inside":case"top":case"bottom":case"left":case"right":if(this.getRect){var c=(o||i).__rect||this.getRect(o||i);switch(d){case"inside":a=c.x+c.width/2,h=c.y+c.height/2,n="center",r="middle","stroke"!=i.brushType&&s==i.color&&(t.fillStyle="#fff");break;case"left":a=c.x-l,h=c.y+c.height/2,n="end",r="middle";break;case"right":a=c.x+c.width+l,h=c.y+c.height/2,n="start",r="middle";break;case"top":a=c.x+c.width/2,h=c.y-l,n="center",r="bottom";break;case"bottom":a=c.x+c.width/2,h=c.y+c.height+l,n="center",r="top"}}break;case"start":case"end":var p=i.pointList||[[i.xStart||0,i.yStart||0],[i.xEnd||0,i.yEnd||0]],u=p.length;if(2>u)return;var g,f,m,_;switch(d){case"start":g=p[1][0],f=p[0][0],m=p[1][1],_=p[0][1];break;case"end":g=p[u-2][0],f=p[u-1][0],m=p[u-2][1],_=p[u-1][1]}a=f,h=_;var y=Math.atan((m-_)/(f-g))/Math.PI*180;0>f-g?y+=180:0>m-_&&(y+=360),l=5,y>=30&&150>=y?(n="center",r="bottom",h-=l):y>150&&210>y?(n="right",r="middle",a-=l):y>=210&&330>=y?(n="center",r="top",h+=l):(n="left",r="middle",a+=l);break;case"specific":a=i.textX||0,h=i.textY||0,n="start",r="middle"}null!=a&&null!=h&&e(t,i.text,a,h,i.textFont,i.textAlign||n,i.textBaseline||r)}},d.prototype.modSelf=function(){this.__dirty=!0,this.style&&(this.style.__rect=null),this.highlightStyle&&(this.highlightStyle.__rect=null)},d.prototype.isSilent=function(){return!(this.hoverable||this.draggable||this.clickable||this.onmousemove||this.onmouseover||this.onmouseout||this.onmousedown||this.onmouseup||this.onclick||this.ondragenter||this.ondragover||this.ondragleave||this.ondrop)},r.merge(d.prototype,h.prototype,!0),r.merge(d.prototype,l.prototype,!0),d}),i("zrender/tool/guid",[],function(){var t=2311;return function(){return"zrender__"+t++}}),i("zrender/tool/log",["require","../config"],function(t){var e=t("../config");return function(){if(0!==e.debugMode)if(1==e.debugMode)for(var t in arguments)throw new Error(arguments[t]);else if(e.debugMode>1)for(var t in arguments)console.log(arguments[t])}}),i("zrender/tool/area",["require","./util","./curve"],function(t){"use strict";function e(t){return t%=O,0>t&&(t+=O),t}function i(t,e,i,n){if(!e||!t)return!1;var r=t.type;z=z||C.getContext();var a=o(t,e,i,n);if("undefined"!=typeof a)return a;if(t.buildPath&&z.isPointInPath)return s(t,z,e,i,n);switch(r){case"ellipse":return!0;case"trochoid":var h="out"==e.location?e.r1+e.r2+e.d:e.r1-e.r2+e.d;return u(e,i,n,h);case"rose":return u(e,i,n,e.maxr);default:return!1}}function o(t,e,i,o){var s=t.type;switch(s){case"bezier-curve":return"undefined"==typeof e.cpX2?h(e.xStart,e.yStart,e.cpX1,e.cpY1,e.xEnd,e.yEnd,e.lineWidth,i,o):a(e.xStart,e.yStart,e.cpX1,e.cpY1,e.cpX2,e.cpY2,e.xEnd,e.yEnd,e.lineWidth,i,o);case"line":return r(e.xStart,e.yStart,e.xEnd,e.yEnd,e.lineWidth,i,o);case"polyline":return d(e.pointList,e.lineWidth,i,o);case"ring":return c(e.x,e.y,e.r0,e.r,i,o);case"circle":return u(e.x,e.y,e.r,i,o);case"sector":var n=e.startAngle*Math.PI/180,l=e.endAngle*Math.PI/180;return e.clockWise||(n=-n,l=-l),g(e.x,e.y,e.r0,e.r,n,l,!e.clockWise,i,o);case"path":return e.pathArray&&b(e.pathArray,Math.max(e.lineWidth,5),e.brushType,i,o);case"polygon":case"star":case"isogon":return f(e.pointList,i,o);case"text":var m=e.__rect||t.getRect(e);return p(m.x,m.y,m.width,m.height,i,o);case"rectangle":case"image":return p(e.x,e.y,e.width,e.height,i,o)}}function s(t,e,i,o,s){return e.beginPath(),t.buildPath(e,i),e.closePath(),e.isPointInPath(o,s)}function n(t,e,o,s){return!i(t,e,o,s)}function r(t,e,i,o,s,n,r){if(0===s)return!1;var a=Math.max(s,5),h=0,l=t;if(r>e+a&&r>o+a||e-a>r&&o-a>r||n>t+a&&n>i+a||t-a>n&&i-a>n)return!1;if(t===i)return Math.abs(n-t)<=a/2;h=(e-o)/(t-i),l=(t*o-i*e)/(t-i);var d=h*n-r+l,c=d*d/(h*h+1);return a/2*a/2>=c}function a(t,e,i,o,s,n,r,a,h,l,d){if(0===h)return!1;var c=Math.max(h,5);if(d>e+c&&d>o+c&&d>n+c&&d>a+c||e-c>d&&o-c>d&&n-c>d&&a-c>d||l>t+c&&l>i+c&&l>s+c&&l>r+c||t-c>l&&i-c>l&&s-c>l&&r-c>l)return!1;var p=w.cubicProjectPoint(t,e,i,o,s,n,r,a,l,d,null);return c/2>=p}function h(t,e,i,o,s,n,r,a,h){if(0===r)return!1;var l=Math.max(r,5);if(h>e+l&&h>o+l&&h>n+l||e-l>h&&o-l>h&&n-l>h||a>t+l&&a>i+l&&a>s+l||t-l>a&&i-l>a&&s-l>a)return!1;var d=w.quadraticProjectPoint(t,e,i,o,s,n,a,h,null);return l/2>=d}function l(t,i,o,s,n,r,a,h,l){if(0===a)return!1;var d=Math.max(a,5);h-=t,l-=i;var c=Math.sqrt(h*h+l*l);if(c-d>o||o>c+d)return!1;if(Math.abs(s-n)>=O)return!0;if(r){var p=s;s=e(n),n=e(p)}else s=e(s),n=e(n);s>n&&(n+=O);var u=Math.atan2(l,h);return 0>u&&(u+=O),u>=s&&n>=u||u+O>=s&&n>=u+O}function d(t,e,i,o){for(var e=Math.max(e,10),s=0,n=t.length-1;n>s;s++){var a=t[s][0],h=t[s][1],l=t[s+1][0],d=t[s+1][1];if(r(a,h,l,d,e,i,o))return!0}return!1}function c(t,e,i,o,s,n){var r=(s-t)*(s-t)+(n-e)*(n-e);return o*o>r&&r>i*i}function p(t,e,i,o,s,n){return s>=t&&t+i>=s&&n>=e&&e+o>=n}function u(t,e,i,o,s){return i*i>(o-t)*(o-t)+(s-e)*(s-e)}function g(t,e,i,o,s,n,r,a,h){return l(t,e,(i+o)/2,s,n,r,o-i,a,h)}function f(t,e,i){for(var o=t.length,s=0,n=0,r=o-1;o>n;n++){var a=t[r][0],h=t[r][1],l=t[n][0],d=t[n][1];s+=m(a,h,l,d,e,i),r=n}return 0!==s}function m(t,e,i,o,s,n){if(n>e&&n>o||e>n&&o>n)return 0;if(o==e)return 0;var r=e>o?1:-1,a=(n-e)/(o-e),h=a*(i-t)+t;return h>s?r:0}function _(){var t=R[0];R[0]=R[1],R[1]=t}function y(t,e,i,o,s,n,r,a,h,l){if(l>e&&l>o&&l>n&&l>a||e>l&&o>l&&n>l&&a>l)return 0;var d=w.cubicRootAt(e,o,n,a,l,I);if(0===d)return 0;for(var c,p,u=0,g=-1,f=0;d>f;f++){var m=I[f],y=w.cubicAt(t,i,s,r,m);h>y||(0>g&&(g=w.cubicExtrema(e,o,n,a,R),R[1]<R[0]&&g>1&&_(),c=w.cubicAt(e,o,n,a,R[0]),g>1&&(p=w.cubicAt(e,o,n,a,R[1]))),u+=2==g?m<R[0]?e>c?1:-1:m<R[1]?c>p?1:-1:p>a?1:-1:m<R[0]?e>c?1:-1:c>a?1:-1)}return u}function x(t,e,i,o,s,n,r,a){if(a>e&&a>o&&a>n||e>a&&o>a&&n>a)return 0;var h=w.quadraticRootAt(e,o,n,a,I);if(0===h)return 0;var l=w.quadraticExtremum(e,o,n);if(l>=0&&1>=l){for(var d=0,c=w.quadraticAt(e,o,n,l),p=0;h>p;p++){var u=w.quadraticAt(t,i,s,I[p]);r>u||(d+=I[p]<l?e>c?1:-1:c>n?1:-1)}return d}var u=w.quadraticAt(t,i,s,I[0]);return r>u?0:e>n?1:-1}function v(t,i,o,s,n,r,a,h){if(h-=i,h>o||-o>h)return 0;var l=Math.sqrt(o*o-h*h);if(I[0]=-l,I[1]=l,Math.abs(s-n)>=O){s=0,n=O;var d=r?1:-1;return a>=I[0]+t&&a<=I[1]+t?d:0}if(r){var l=s;s=e(n),n=e(l)}else s=e(s),n=e(n);s>n&&(n+=O);for(var c=0,p=0;2>p;p++){var u=I[p];if(u+t>a){var g=Math.atan2(h,u),d=r?1:-1;0>g&&(g=O+g),(g>=s&&n>=g||g+O>=s&&n>=g+O)&&(g>Math.PI/2&&g<1.5*Math.PI&&(d=-d),c+=d)}}return c}function b(t,e,i,o,s){var n=0,d=0,c=0,p=0,u=0,g=!0,f=!0;i=i||"fill";for(var _="stroke"===i||"both"===i,b="fill"===i||"both"===i,S=0;S<t.length;S++){var T=t[S],z=T.points;if(g||"M"===T.command){if(S>0&&(b&&(n+=m(d,c,p,u,o,s)),0!==n))return!0;p=z[z.length-2],u=z[z.length-1],g=!1,f&&"A"!==T.command&&(f=!1,d=p,c=u)}switch(T.command){case"M":d=z[0],c=z[1];break;case"L":if(_&&r(d,c,z[0],z[1],e,o,s))return!0;b&&(n+=m(d,c,z[0],z[1],o,s)),d=z[0],c=z[1];break;case"C":if(_&&a(d,c,z[0],z[1],z[2],z[3],z[4],z[5],e,o,s))return!0;b&&(n+=y(d,c,z[0],z[1],z[2],z[3],z[4],z[5],o,s)),d=z[4],c=z[5];break;case"Q":if(_&&h(d,c,z[0],z[1],z[2],z[3],e,o,s))return!0;b&&(n+=x(d,c,z[0],z[1],z[2],z[3],o,s)),d=z[2],c=z[3];break;case"A":var C=z[0],w=z[1],L=z[2],E=z[3],M=z[4],A=z[5],k=Math.cos(M)*L+C,O=Math.sin(M)*E+w;f?(f=!1,p=k,u=O):n+=m(d,c,k,O);var I=(o-C)*E/L+C;if(_&&l(C,w,E,M,M+A,1-z[7],e,I,s))return!0;b&&(n+=v(C,w,E,M,M+A,1-z[7],I,s)),d=Math.cos(M+A)*L+C,c=Math.sin(M+A)*E+w;break;case"z":if(_&&r(d,c,p,u,e,o,s))return!0;g=!0}}return b&&(n+=m(d,c,p,u,o,s)),0!==n}function S(t,e){var i=t+":"+e;if(L[i])return L[i];z=z||C.getContext(),z.save(),e&&(z.font=e),t=(t+"").split("\n");for(var o=0,s=0,n=t.length;n>s;s++)o=Math.max(z.measureText(t[s]).width,o);return z.restore(),L[i]=o,++M>k&&(M=0,L={}),o}function T(t,e){var i=t+":"+e;if(E[i])return E[i];z=z||C.getContext(),z.save(),e&&(z.font=e),t=(t+"").split("\n");var o=(z.measureText("国").width+2)*t.length;return z.restore(),E[i]=o,++A>k&&(A=0,E={}),o}var z,C=t("./util"),w=t("./curve"),L={},E={},M=0,A=0,k=5e3,O=2*Math.PI,I=[-1,-1,-1],R=[-1,-1];return{isInside:i,isOutside:n,getTextWidth:S,getTextHeight:T,isInsidePath:b,isInsidePolygon:f,isInsideSector:g,isInsideCircle:u,isInsideLine:r,isInsideRect:p,isInsidePolyline:d,isInsideCubicStroke:a,isInsideQuadraticStroke:h}}),i("zrender/mixin/Eventful",["require"],function(){var t=function(){this._handlers={}};return t.prototype.one=function(t,e,i){var o=this._handlers;return e&&t?(o[t]||(o[t]=[]),o[t].push({h:e,one:!0,ctx:i||this}),this):this},t.prototype.bind=function(t,e,i){var o=this._handlers;return e&&t?(o[t]||(o[t]=[]),o[t].push({h:e,one:!1,ctx:i||this}),this):this},t.prototype.unbind=function(t,e){var i=this._handlers;if(!t)return this._handlers={},this;if(e){if(i[t]){for(var o=[],s=0,n=i[t].length;n>s;s++)i[t][s].h!=e&&o.push(i[t][s]);i[t]=o}i[t]&&0===i[t].length&&delete i[t]}else delete i[t];return this},t.prototype.dispatch=function(t){if(this._handlers[t]){var e=arguments,i=e.length;i>3&&(e=Array.prototype.slice.call(e,1));for(var o=this._handlers[t],s=o.length,n=0;s>n;){switch(i){case 1:o[n].h.call(o[n].ctx);break;case 2:o[n].h.call(o[n].ctx,e[1]);break;case 3:o[n].h.call(o[n].ctx,e[1],e[2]);break;default:o[n].h.apply(o[n].ctx,e)}o[n].one?(o.splice(n,1),s--):n++}}return this},t.prototype.dispatchWithContext=function(t){if(this._handlers[t]){var e=arguments,i=e.length;i>4&&(e=Array.prototype.slice.call(e,1,e.length-1));for(var o=e[e.length-1],s=this._handlers[t],n=s.length,r=0;n>r;){switch(i){case 1:s[r].h.call(o);break;case 2:s[r].h.call(o,e[1]);break;case 3:s[r].h.call(o,e[1],e[2]);break;default:s[r].h.apply(o,e)}s[r].one?(s.splice(r,1),n--):r++}}return this},t}),i("zrender/mixin/Transformable",["require","../tool/matrix","../tool/vector"],function(t){"use strict";function e(t){return t>-a&&a>t}function i(t){return t>a||-a>t}var o=t("../tool/matrix"),s=t("../tool/vector"),n=[0,0],r=o.translate,a=5e-5,h=function(){this.position||(this.position=[0,0]),"undefined"==typeof this.rotation&&(this.rotation=[0,0,0]),this.scale||(this.scale=[1,1,0,0]),this.needLocalTransform=!1,this.needTransform=!1};return h.prototype={constructor:h,updateNeedTransform:function(){this.needLocalTransform=i(this.rotation[0])||i(this.position[0])||i(this.position[1])||i(this.scale[0]-1)||i(this.scale[1]-1)},updateTransform:function(){this.updateNeedTransform();var t=this.parent&&this.parent.needTransform;if(this.needTransform=this.needLocalTransform||t,this.needTransform){var e=this.transform||o.create();if(o.identity(e),this.needLocalTransform){var s=this.scale;if(i(s[0])||i(s[1])){n[0]=-s[2]||0,n[1]=-s[3]||0;var a=i(n[0])||i(n[1]);a&&r(e,e,n),o.scale(e,e,s),a&&(n[0]=-n[0],n[1]=-n[1],r(e,e,n))}if(this.rotation instanceof Array){if(0!==this.rotation[0]){n[0]=-this.rotation[1]||0,n[1]=-this.rotation[2]||0;var a=i(n[0])||i(n[1]);a&&r(e,e,n),o.rotate(e,e,this.rotation[0]),a&&(n[0]=-n[0],n[1]=-n[1],r(e,e,n))}}else 0!==this.rotation&&o.rotate(e,e,this.rotation);(i(this.position[0])||i(this.position[1]))&&r(e,e,this.position)}t&&(this.needLocalTransform?o.mul(e,this.parent.transform,e):o.copy(e,this.parent.transform)),this.transform=e,this.invTransform=this.invTransform||o.create(),o.invert(this.invTransform,e)}},setTransform:function(t){if(this.needTransform){var e=this.transform;t.transform(e[0],e[1],e[2],e[3],e[4],e[5])}},lookAt:function(){var t=s.create();return function(i){this.transform||(this.transform=o.create());var n=this.transform;if(s.sub(t,i,this.position),!e(t[0])||!e(t[1])){s.normalize(t,t);var r=this.scale;n[2]=t[0]*r[1],n[3]=t[1]*r[1],n[0]=t[1]*r[0],n[1]=-t[0]*r[0],n[4]=this.position[0],n[5]=this.position[1],this.decomposeTransform()}}}(),decomposeTransform:function(){if(this.transform){var t=this.transform,e=t[0]*t[0]+t[1]*t[1],o=this.position,s=this.scale,n=this.rotation;i(e-1)&&(e=Math.sqrt(e));var r=t[2]*t[2]+t[3]*t[3];i(r-1)&&(r=Math.sqrt(r)),o[0]=t[4],o[1]=t[5],s[0]=e,s[1]=r,s[2]=s[3]=0,n[0]=Math.atan2(-t[1]/r,t[0]/e),n[1]=n[2]=0}},transformCoordToLocal:function(t,e){var i=[t,e];return this.needTransform&&this.invTransform&&o.mulVector(i,this.invTransform,i),i}},h}),i("zrender/tool/matrix",[],function(){var t="undefined"==typeof Float32Array?Array:Float32Array,e={create:function(){var i=new t(6);return e.identity(i),i},identity:function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t},mul:function(t,e,i){return t[0]=e[0]*i[0]+e[2]*i[1],t[1]=e[1]*i[0]+e[3]*i[1],t[2]=e[0]*i[2]+e[2]*i[3],t[3]=e[1]*i[2]+e[3]*i[3],t[4]=e[0]*i[4]+e[2]*i[5]+e[4],t[5]=e[1]*i[4]+e[3]*i[5]+e[5],t},translate:function(t,e,i){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4]+i[0],t[5]=e[5]+i[1],t},rotate:function(t,e,i){var o=e[0],s=e[2],n=e[4],r=e[1],a=e[3],h=e[5],l=Math.sin(i),d=Math.cos(i);
return t[0]=o*d+r*l,t[1]=-o*l+r*d,t[2]=s*d+a*l,t[3]=-s*l+d*a,t[4]=d*n+l*h,t[5]=d*h-l*n,t},scale:function(t,e,i){var o=i[0],s=i[1];return t[0]=e[0]*o,t[1]=e[1]*s,t[2]=e[2]*o,t[3]=e[3]*s,t[4]=e[4]*o,t[5]=e[5]*s,t},invert:function(t,e){var i=e[0],o=e[2],s=e[4],n=e[1],r=e[3],a=e[5],h=i*r-n*o;return h?(h=1/h,t[0]=r*h,t[1]=-n*h,t[2]=-o*h,t[3]=i*h,t[4]=(o*a-r*s)*h,t[5]=(n*s-i*a)*h,t):null},mulVector:function(t,e,i){var o=e[0],s=e[2],n=e[4],r=e[1],a=e[3],h=e[5];return t[0]=i[0]*o+i[1]*s+n,t[1]=i[0]*r+i[1]*a+h,t}};return e}),i("echarts/echarts",["require","./config","zrender/tool/util","zrender/tool/event","zrender/tool/env","zrender","zrender/config","./chart/island","./component/toolbox","./component","./component/title","./component/tooltip","./component/legend","./util/ecData","./chart","zrender/tool/color","./component/timeline","zrender/shape/Image","zrender/loadingEffect/Bar","zrender/loadingEffect/Bubble","zrender/loadingEffect/DynamicLine","zrender/loadingEffect/Ring","zrender/loadingEffect/Spin","zrender/loadingEffect/Whirling","./theme/macarons","./theme/infographic"],function(t){function e(){r.Dispatcher.call(this)}function i(t){t.innerHTML="",this._themeConfig={},this.dom=t,this._connected=!1,this._status={dragIn:!1,dragOut:!1,needRefresh:!1},this._curEventType=!1,this._chartList=[],this._messageCenter=new e,this._messageCenterOutSide=new e,this.resize=this.resize(),this._init()}function o(t,e,i,o,s){for(var n=t._chartList,r=n.length;r--;){var a=n[r];"function"==typeof a[e]&&a[e](i,o,s)}}var s=t("./config"),n=t("zrender/tool/util"),r=t("zrender/tool/event"),a={},h=t("zrender/tool/env").canvasSupported,l=new Date-0,d={},c="_echarts_instance_";a.version="2.2.2",a.dependencies={zrender:"2.0.8"},a.init=function(e,o){var s=t("zrender");s.version.replace(".","")-0<a.dependencies.zrender.replace(".","")-0&&console.error("ZRender "+s.version+" is too old for ECharts "+a.version+". Current version need ZRender "+a.dependencies.zrender+"+"),e=e instanceof Array?e[0]:e;var n=e.getAttribute(c);return n||(n=l++,e.setAttribute(c,n)),d[n]&&d[n].dispose(),d[n]=new i(e),d[n].id=n,d[n].canvasSupported=h,d[n].setTheme(o),d[n]},a.getInstanceById=function(t){return d[t]},n.merge(e.prototype,r.Dispatcher.prototype,!0);var p=t("zrender/config").EVENT,u=["CLICK","DBLCLICK","MOUSEOVER","MOUSEOUT","DRAGSTART","DRAGEND","DRAGENTER","DRAGOVER","DRAGLEAVE","DROP"];return i.prototype={_init:function(){var e=this,i=t("zrender").init(this.dom);this._zr=i,this._messageCenter.dispatch=function(t,i,o,s){o=o||{},o.type=t,o.event=i,e._messageCenter.dispatchWithContext(t,o,s),"HOVER"!=t&&"MOUSEOUT"!=t?setTimeout(function(){e._messageCenterOutSide.dispatchWithContext(t,o,s)},50):e._messageCenterOutSide.dispatchWithContext(t,o,s)},this._onevent=function(t){return e.__onevent(t)};for(var o in s.EVENT)"CLICK"!=o&&"DBLCLICK"!=o&&"HOVER"!=o&&"MOUSEOUT"!=o&&"MAP_ROAM"!=o&&this._messageCenter.bind(s.EVENT[o],this._onevent,this);var n={};this._onzrevent=function(t){return e[n[t.type]](t)};for(var r=0,a=u.length;a>r;r++){var h=u[r],l=p[h];n[l]="_on"+h.toLowerCase(),i.on(l,this._onzrevent)}this.chart={},this.component={};var d=t("./chart/island");this._island=new d(this._themeConfig,this._messageCenter,i,{},this),this.chart.island=this._island;var c=t("./component/toolbox");this._toolbox=new c(this._themeConfig,this._messageCenter,i,{},this),this.component.toolbox=this._toolbox;var g=t("./component");g.define("title",t("./component/title")),g.define("tooltip",t("./component/tooltip")),g.define("legend",t("./component/legend")),(0===i.getWidth()||0===i.getHeight())&&console.error("Dom’s width & height should be ready before init.")},__onevent:function(t){t.__echartsId=t.__echartsId||this.id;var e=t.__echartsId===this.id;switch(this._curEventType||(this._curEventType=t.type),t.type){case s.EVENT.LEGEND_SELECTED:this._onlegendSelected(t);break;case s.EVENT.DATA_ZOOM:if(!e){var i=this.component.dataZoom;i&&(i.silence(!0),i.absoluteZoom(t.zoom),i.silence(!1))}this._ondataZoom(t);break;case s.EVENT.DATA_RANGE:e&&this._ondataRange(t);break;case s.EVENT.MAGIC_TYPE_CHANGED:if(!e){var o=this.component.toolbox;o&&(o.silence(!0),o.setMagicType(t.magicType),o.silence(!1))}this._onmagicTypeChanged(t);break;case s.EVENT.DATA_VIEW_CHANGED:e&&this._ondataViewChanged(t);break;case s.EVENT.TOOLTIP_HOVER:e&&this._tooltipHover(t);break;case s.EVENT.RESTORE:this._onrestore();break;case s.EVENT.REFRESH:e&&this._onrefresh(t);break;case s.EVENT.TOOLTIP_IN_GRID:case s.EVENT.TOOLTIP_OUT_GRID:if(e){if(this._connected){var n=this.component.grid;n&&(t.x=(t.event.zrenderX-n.getX())/n.getWidth(),t.y=(t.event.zrenderY-n.getY())/n.getHeight())}}else{var n=this.component.grid;n&&this._zr.trigger("mousemove",{connectTrigger:!0,zrenderX:n.getX()+t.x*n.getWidth(),zrenderY:n.getY()+t.y*n.getHeight()})}}if(this._connected&&e&&this._curEventType===t.type){for(var r in this._connected)this._connected[r].connectedEventHandler(t);this._curEventType=null}(!e||!this._connected&&e)&&(this._curEventType=null)},_onclick:function(t){if(o(this,"onclick",t),t.target){var e=this._eventPackage(t.target);e&&null!=e.seriesIndex&&this._messageCenter.dispatch(s.EVENT.CLICK,t.event,e,this)}},_ondblclick:function(t){if(o(this,"ondblclick",t),t.target){var e=this._eventPackage(t.target);e&&null!=e.seriesIndex&&this._messageCenter.dispatch(s.EVENT.DBLCLICK,t.event,e,this)}},_onmouseover:function(t){if(t.target){var e=this._eventPackage(t.target);e&&null!=e.seriesIndex&&this._messageCenter.dispatch(s.EVENT.HOVER,t.event,e,this)}},_onmouseout:function(t){if(t.target){var e=this._eventPackage(t.target);e&&null!=e.seriesIndex&&this._messageCenter.dispatch(s.EVENT.MOUSEOUT,t.event,e,this)}},_ondragstart:function(t){this._status={dragIn:!1,dragOut:!1,needRefresh:!1},o(this,"ondragstart",t)},_ondragenter:function(t){o(this,"ondragenter",t)},_ondragover:function(t){o(this,"ondragover",t)},_ondragleave:function(t){o(this,"ondragleave",t)},_ondrop:function(t){o(this,"ondrop",t,this._status),this._island.ondrop(t,this._status)},_ondragend:function(t){if(o(this,"ondragend",t,this._status),this._timeline&&this._timeline.ondragend(t,this._status),this._island.ondragend(t,this._status),this._status.needRefresh){this._syncBackupData(this._option);var e=this._messageCenter;e.dispatch(s.EVENT.DATA_CHANGED,t.event,this._eventPackage(t.target),this),e.dispatch(s.EVENT.REFRESH,null,null,this)}},_onlegendSelected:function(t){this._status.needRefresh=!1,o(this,"onlegendSelected",t,this._status),this._status.needRefresh&&this._messageCenter.dispatch(s.EVENT.REFRESH,null,null,this)},_ondataZoom:function(t){this._status.needRefresh=!1,o(this,"ondataZoom",t,this._status),this._status.needRefresh&&this._messageCenter.dispatch(s.EVENT.REFRESH,null,null,this)},_ondataRange:function(t){this._clearEffect(),this._status.needRefresh=!1,o(this,"ondataRange",t,this._status),this._status.needRefresh&&this._zr.refreshNextFrame()},_onmagicTypeChanged:function(){this._clearEffect(),this._render(this._toolbox.getMagicOption())},_ondataViewChanged:function(t){this._syncBackupData(t.option),this._messageCenter.dispatch(s.EVENT.DATA_CHANGED,null,t,this),this._messageCenter.dispatch(s.EVENT.REFRESH,null,null,this)},_tooltipHover:function(t){var e=[];o(this,"ontooltipHover",t,e)},_onrestore:function(){this.restore()},_onrefresh:function(t){this._refreshInside=!0,this.refresh(t),this._refreshInside=!1},_syncBackupData:function(t){this.component.dataZoom&&this.component.dataZoom.syncBackupData(t)},_eventPackage:function(e){if(e){var i=t("./util/ecData"),o=i.get(e,"seriesIndex"),s=i.get(e,"dataIndex");return s=-1!=o&&this.component.dataZoom?this.component.dataZoom.getRealDataIndex(o,s):s,{seriesIndex:o,seriesName:(i.get(e,"series")||{}).name,dataIndex:s,data:i.get(e,"data"),name:i.get(e,"name"),value:i.get(e,"value"),special:i.get(e,"special")}}},_noDataCheck:function(t){for(var e=t.series,i=0,o=e.length;o>i;i++)if(e[i].type==s.CHART_TYPE_MAP||e[i].data&&e[i].data.length>0||e[i].markPoint&&e[i].markPoint.data&&e[i].markPoint.data.length>0||e[i].markLine&&e[i].markLine.data&&e[i].markLine.data.length>0||e[i].nodes&&e[i].nodes.length>0||e[i].links&&e[i].links.length>0||e[i].matrix&&e[i].matrix.length>0||e[i].eventList&&e[i].eventList.length>0)return!1;var n=this._option&&this._option.noDataLoadingOption||this._themeConfig.noDataLoadingOption||s.noDataLoadingOption||{text:this._option&&this._option.noDataText||this._themeConfig.noDataText||s.noDataText,effect:this._option&&this._option.noDataEffect||this._themeConfig.noDataEffect||s.noDataEffect};return this.clear(),this.showLoading(n),!0},_render:function(e){if(this._mergeGlobalConifg(e),!this._noDataCheck(e)){var i=e.backgroundColor;if(i)if(h||-1==i.indexOf("rgba"))this.dom.style.backgroundColor=i;else{var o=i.split(",");this.dom.style.filter="alpha(opacity="+100*o[3].substring(0,o[3].lastIndexOf(")"))+")",o.length=3,o[0]=o[0].replace("a",""),this.dom.style.backgroundColor=o.join(",")+")"}this._zr.clearAnimation(),this._chartList=[];var n=t("./chart"),r=t("./component");(e.xAxis||e.yAxis)&&(e.grid=e.grid||{},e.dataZoom=e.dataZoom||{});for(var a,l,d,c=["title","legend","tooltip","dataRange","roamController","grid","dataZoom","xAxis","yAxis","polar"],p=0,u=c.length;u>p;p++)l=c[p],d=this.component[l],e[l]?(d?d.refresh&&d.refresh(e):(a=r.get(/^[xy]Axis$/.test(l)?"axis":l),d=new a(this._themeConfig,this._messageCenter,this._zr,e,this,l),this.component[l]=d),this._chartList.push(d)):d&&(d.dispose(),this.component[l]=null,delete this.component[l]);for(var g,f,m,_={},p=0,u=e.series.length;u>p;p++)f=e.series[p].type,f?_[f]||(_[f]=!0,g=n.get(f),g?(this.chart[f]?(m=this.chart[f],m.refresh(e)):m=new g(this._themeConfig,this._messageCenter,this._zr,e,this),this._chartList.push(m),this.chart[f]=m):console.error(f+" has not been required.")):console.error("series["+p+"] chart type has not been defined.");for(f in this.chart)f==s.CHART_TYPE_ISLAND||_[f]||(this.chart[f].dispose(),this.chart[f]=null,delete this.chart[f]);this.component.grid&&this.component.grid.refixAxisShape(this.component),this._island.refresh(e),this._toolbox.refresh(e),e.animation&&!e.renderAsImage?this._zr.refresh():this._zr.render();var y="IMG"+this.id,x=document.getElementById(y);e.renderAsImage&&h?(x?x.src=this.getDataURL(e.renderAsImage):(x=this.getImage(e.renderAsImage),x.id=y,x.style.position="absolute",x.style.left=0,x.style.top=0,this.dom.firstChild.appendChild(x)),this.un(),this._zr.un(),this._disposeChartList(),this._zr.clear()):x&&x.parentNode.removeChild(x),x=null,this._option=e}},restore:function(){this._clearEffect(),this._option=n.clone(this._optionRestore),this._disposeChartList(),this._island.clear(),this._toolbox.reset(this._option,!0),this._render(this._option)},refresh:function(t){this._clearEffect(),t=t||{};var e=t.option;!this._refreshInside&&e&&(e=this.getOption(),n.merge(e,t.option,!0),n.merge(this._optionRestore,t.option,!0),this._toolbox.reset(e)),this._island.refresh(e),this._toolbox.refresh(e),this._zr.clearAnimation();for(var i=0,o=this._chartList.length;o>i;i++)this._chartList[i].refresh&&this._chartList[i].refresh(e);this.component.grid&&this.component.grid.refixAxisShape(this.component),this._zr.refresh()},_disposeChartList:function(){this._clearEffect(),this._zr.clearAnimation();for(var t=this._chartList.length;t--;){var e=this._chartList[t];if(e){var i=e.type;this.chart[i]&&delete this.chart[i],this.component[i]&&delete this.component[i],e.dispose&&e.dispose()}}this._chartList=[]},_mergeGlobalConifg:function(e){for(var i=["backgroundColor","calculable","calculableColor","calculableHolderColor","nameConnector","valueConnector","animation","animationThreshold","animationDuration","animationDurationUpdate","animationEasing","addDataAnimation","symbolList","DRAG_ENABLE_TIME"],o=i.length;o--;){var n=i[o];null==e[n]&&(e[n]=null!=this._themeConfig[n]?this._themeConfig[n]:s[n])}var r=e.color;r&&r.length||(r=this._themeConfig.color||s.color),this._zr.getColor=function(e){var i=t("zrender/tool/color");return i.getColor(e,r)},h||(e.animation=!1,e.addDataAnimation=!1)},setOption:function(t,e){return t.timeline?this._setTimelineOption(t):this._setOption(t,e)},_setOption:function(t,e){return this._option=!e&&this._option?n.merge(this.getOption(),n.clone(t),!0):n.clone(t),this._optionRestore=n.clone(this._option),this._option.series&&0!==this._option.series.length?(this.component.dataZoom&&(this._option.dataZoom||this._option.toolbox&&this._option.toolbox.feature&&this._option.toolbox.feature.dataZoom&&this._option.toolbox.feature.dataZoom.show)&&this.component.dataZoom.syncOption(this._option),this._toolbox.reset(this._option),this._render(this._option),this):void this._zr.clear()},getOption:function(){function t(t){var o=i._optionRestore[t];if(o)if(o instanceof Array)for(var s=o.length;s--;)e[t][s].data=n.clone(o[s].data);else e[t].data=n.clone(o.data)}var e=n.clone(this._option),i=this;return t("xAxis"),t("yAxis"),t("series"),e},setSeries:function(t,e){return e?(this._option.series=t,this.setOption(this._option,e)):this.setOption({series:t}),this},getSeries:function(){return this.getOption().series},_setTimelineOption:function(e){this._timeline&&this._timeline.dispose();var i=t("./component/timeline"),o=new i(this._themeConfig,this._messageCenter,this._zr,e,this);return this._timeline=o,this.component.timeline=this._timeline,this},addData:function(t,e,i,o,r){function a(){if(E._zr){E._zr.clearAnimation();for(var t=0,e=C.length;e>t;t++)C[t].motionlessOnce=l.addDataAnimation&&C[t].addDataAnimation;E._messageCenter.dispatch(s.EVENT.REFRESH,null,{option:l},E)}}for(var h=t instanceof Array?t:[[t,e,i,o,r]],l=this.getOption(),d=this._optionRestore,c=0,p=h.length;p>c;c++){t=h[c][0],e=h[c][1],i=h[c][2],o=h[c][3],r=h[c][4];var u=d.series[t],g=i?"unshift":"push",f=i?"pop":"shift";if(u){var m=u.data,_=l.series[t].data;if(m[g](e),_[g](e),o||(m[f](),e=_[f]()),null!=r){var y,x;if(u.type===s.CHART_TYPE_PIE&&(y=d.legend)&&(x=y.data)){var v=l.legend.data;if(x[g](r),v[g](r),!o){var b=n.indexOf(x,e.name);-1!=b&&x.splice(b,1),b=n.indexOf(v,e.name),-1!=b&&v.splice(b,1)}}else if(null!=d.xAxis&&null!=d.yAxis){var S,T,z=u.xAxisIndex||0;(null==d.xAxis[z].type||"category"===d.xAxis[z].type)&&(S=d.xAxis[z].data,T=l.xAxis[z].data,S[g](r),T[g](r),o||(S[f](),T[f]())),z=u.yAxisIndex||0,"category"===d.yAxis[z].type&&(S=d.yAxis[z].data,T=l.yAxis[z].data,S[g](r),T[g](r),o||(S[f](),T[f]()))}}this._option.series[t].data=l.series[t].data}}this._zr.clearAnimation();for(var C=this._chartList,w=0,L=function(){w--,0===w&&a()},c=0,p=C.length;p>c;c++)l.addDataAnimation&&C[c].addDataAnimation&&(w++,C[c].addDataAnimation(h,L));this.component.dataZoom&&this.component.dataZoom.syncOption(l),this._option=l;var E=this;return l.addDataAnimation||setTimeout(a,0),this},addMarkPoint:function(t,e){return this._addMark(t,e,"markPoint")},addMarkLine:function(t,e){return this._addMark(t,e,"markLine")},_addMark:function(t,e,i){var o,s=this._option.series;if(s&&(o=s[t])){var r=this._optionRestore.series,a=r[t],h=o[i],l=a[i];h=o[i]=h||{data:[]},l=a[i]=l||{data:[]};for(var d in e)"data"===d?(h.data=h.data.concat(e.data),l.data=l.data.concat(e.data)):"object"!=typeof e[d]||null==h[d]?h[d]=l[d]=e[d]:(n.merge(h[d],e[d],!0),n.merge(l[d],e[d],!0));var c=this.chart[o.type];c&&c.addMark(t,e,i)}return this},delMarkPoint:function(t,e){return this._delMark(t,e,"markPoint")},delMarkLine:function(t,e){return this._delMark(t,e,"markLine")},_delMark:function(t,e,i){var o,s,n,r=this._option.series;if(!(r&&(o=r[t])&&(s=o[i])&&(n=s.data)))return this;e=e.split(" > ");for(var a=-1,h=0,l=n.length;l>h;h++){var d=n[h];if(d instanceof Array){if(d[0].name===e[0]&&d[1].name===e[1]){a=h;break}}else if(d.name===e[0]){a=h;break}}if(a>-1){n.splice(a,1),this._optionRestore.series[t][i].data.splice(a,1);var c=this.chart[o.type];c&&c.delMark(t,e.join(" > "),i)}return this},getDom:function(){return this.dom},getZrender:function(){return this._zr},getDataURL:function(t){if(!h)return"";if(0===this._chartList.length){var e="IMG"+this.id,i=document.getElementById(e);if(i)return i.src}var o=this.component.tooltip;switch(o&&o.hideTip(),t){case"jpeg":break;default:t="png"}var s=this._option.backgroundColor;return s&&"rgba(0,0,0,0)"===s.replace(" ","")&&(s="#fff"),this._zr.toDataURL("image/"+t,s)},getImage:function(t){var e=this._optionRestore.title,i=document.createElement("img");return i.src=this.getDataURL(t),i.title=e&&e.text||"ECharts",i},getConnectedDataURL:function(e){if(!this.isConnected())return this.getDataURL(e);var i=this.dom,o={self:{img:this.getDataURL(e),left:i.offsetLeft,top:i.offsetTop,right:i.offsetLeft+i.offsetWidth,bottom:i.offsetTop+i.offsetHeight}},s=o.self.left,n=o.self.top,r=o.self.right,a=o.self.bottom;for(var h in this._connected)i=this._connected[h].getDom(),o[h]={img:this._connected[h].getDataURL(e),left:i.offsetLeft,top:i.offsetTop,right:i.offsetLeft+i.offsetWidth,bottom:i.offsetTop+i.offsetHeight},s=Math.min(s,o[h].left),n=Math.min(n,o[h].top),r=Math.max(r,o[h].right),a=Math.max(a,o[h].bottom);var l=document.createElement("div");l.style.position="absolute",l.style.left="-4000px",l.style.width=r-s+"px",l.style.height=a-n+"px",document.body.appendChild(l);var d=t("zrender").init(l),c=t("zrender/shape/Image");for(var h in o)d.addShape(new c({style:{x:o[h].left-s,y:o[h].top-n,image:o[h].img}}));d.render();var p=this._option.backgroundColor;p&&"rgba(0,0,0,0)"===p.replace(/ /g,"")&&(p="#fff");var u=d.toDataURL("image/png",p);return setTimeout(function(){d.dispose(),l.parentNode.removeChild(l),l=null},100),u},getConnectedImage:function(t){var e=this._optionRestore.title,i=document.createElement("img");return i.src=this.getConnectedDataURL(t),i.title=e&&e.text||"ECharts",i},on:function(t,e){return this._messageCenterOutSide.bind(t,e,this),this},un:function(t,e){return this._messageCenterOutSide.unbind(t,e),this},connect:function(t){if(!t)return this;if(this._connected||(this._connected={}),t instanceof Array)for(var e=0,i=t.length;i>e;e++)this._connected[t[e].id]=t[e];else this._connected[t.id]=t;return this},disConnect:function(t){if(!t||!this._connected)return this;if(t instanceof Array)for(var e=0,i=t.length;i>e;e++)delete this._connected[t[e].id];else delete this._connected[t.id];for(var o in this._connected)return this;return this._connected=!1,this},connectedEventHandler:function(t){t.__echartsId!=this.id&&this._onevent(t)},isConnected:function(){return!!this._connected},showLoading:function(e){var i={bar:t("zrender/loadingEffect/Bar"),bubble:t("zrender/loadingEffect/Bubble"),dynamicLine:t("zrender/loadingEffect/DynamicLine"),ring:t("zrender/loadingEffect/Ring"),spin:t("zrender/loadingEffect/Spin"),whirling:t("zrender/loadingEffect/Whirling")};this._toolbox.hideDataView(),e=e||{};var o=e.textStyle||{};e.textStyle=o;var r=n.merge(n.merge(n.clone(o),this._themeConfig.textStyle),s.textStyle);o.textFont=r.fontStyle+" "+r.fontWeight+" "+r.fontSize+"px "+r.fontFamily,o.text=e.text||this._option&&this._option.loadingText||this._themeConfig.loadingText||s.loadingText,null!=e.x&&(o.x=e.x),null!=e.y&&(o.y=e.y),e.effectOption=e.effectOption||{},e.effectOption.textStyle=o;var a=e.effect;return("string"==typeof a||null==a)&&(a=i[e.effect||this._option&&this._option.loadingEffect||this._themeConfig.loadingEffect||s.loadingEffect]||i.spin),this._zr.showLoading(new a(e.effectOption)),this},hideLoading:function(){return this._zr.hideLoading(),this},setTheme:function(e){if(e){if("string"==typeof e)switch(e){case"macarons":e=t("./theme/macarons");break;case"infographic":e=t("./theme/infographic");break;default:e={}}else e=e||{};this._themeConfig=e}if(!h){var i=this._themeConfig.textStyle;i&&i.fontFamily&&i.fontFamily2&&(i.fontFamily=i.fontFamily2),i=s.textStyle,i.fontFamily=i.fontFamily2}this._timeline&&this._timeline.setTheme(!0),this._optionRestore&&this.restore()},resize:function(){var t=this;return function(){if(t._clearEffect(),t._zr.resize(),t._option&&t._option.renderAsImage&&h)return t._render(t._option),t;t._zr.clearAnimation(),t._island.resize(),t._toolbox.resize(),t._timeline&&t._timeline.resize();for(var e=0,i=t._chartList.length;i>e;e++)t._chartList[e].resize&&t._chartList[e].resize();return t.component.grid&&t.component.grid.refixAxisShape(t.component),t._zr.refresh(),t._messageCenter.dispatch(s.EVENT.RESIZE,null,null,t),t}},_clearEffect:function(){this._zr.modLayer(s.EFFECT_ZLEVEL,{motionBlur:!1}),this._zr.painter.clearLayer(s.EFFECT_ZLEVEL)},clear:function(){return this._disposeChartList(),this._zr.clear(),this._option={},this._optionRestore={},this.dom.style.backgroundColor=null,this},dispose:function(){var t=this.dom.getAttribute(c);t&&delete d[t],this._island.dispose(),this._toolbox.dispose(),this._timeline&&this._timeline.dispose(),this._messageCenter.unbind(),this.clear(),this._zr.dispose(),this._zr=null}},a}),i("zrender/tool/env",[],function(){function t(t){var e=this.os={},i=this.browser={},o=t.match(/Web[kK]it[\/]{0,1}([\d.]+)/),s=t.match(/(Android);?[\s\/]+([\d.]+)?/),n=t.match(/(iPad).*OS\s([\d_]+)/),r=t.match(/(iPod)(.*OS\s([\d_]+))?/),a=!n&&t.match(/(iPhone\sOS)\s([\d_]+)/),h=t.match(/(webOS|hpwOS)[\s\/]([\d.]+)/),l=h&&t.match(/TouchPad/),d=t.match(/Kindle\/([\d.]+)/),c=t.match(/Silk\/([\d._]+)/),p=t.match(/(BlackBerry).*Version\/([\d.]+)/),u=t.match(/(BB10).*Version\/([\d.]+)/),g=t.match(/(RIM\sTablet\sOS)\s([\d.]+)/),f=t.match(/PlayBook/),m=t.match(/Chrome\/([\d.]+)/)||t.match(/CriOS\/([\d.]+)/),_=t.match(/Firefox\/([\d.]+)/),y=t.match(/MSIE ([\d.]+)/),x=o&&t.match(/Mobile\//)&&!m,v=t.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/)&&!m,y=t.match(/MSIE\s([\d.]+)/);return(i.webkit=!!o)&&(i.version=o[1]),s&&(e.android=!0,e.version=s[2]),a&&!r&&(e.ios=e.iphone=!0,e.version=a[2].replace(/_/g,".")),n&&(e.ios=e.ipad=!0,e.version=n[2].replace(/_/g,".")),r&&(e.ios=e.ipod=!0,e.version=r[3]?r[3].replace(/_/g,"."):null),h&&(e.webos=!0,e.version=h[2]),l&&(e.touchpad=!0),p&&(e.blackberry=!0,e.version=p[2]),u&&(e.bb10=!0,e.version=u[2]),g&&(e.rimtabletos=!0,e.version=g[2]),f&&(i.playbook=!0),d&&(e.kindle=!0,e.version=d[1]),c&&(i.silk=!0,i.version=c[1]),!c&&e.android&&t.match(/Kindle Fire/)&&(i.silk=!0),m&&(i.chrome=!0,i.version=m[1]),_&&(i.firefox=!0,i.version=_[1]),y&&(i.ie=!0,i.version=y[1]),x&&(t.match(/Safari/)||e.ios)&&(i.safari=!0),v&&(i.webview=!0),y&&(i.ie=!0,i.version=y[1]),e.tablet=!!(n||f||s&&!t.match(/Mobile/)||_&&t.match(/Tablet/)||y&&!t.match(/Phone/)&&t.match(/Touch/)),e.phone=!(e.tablet||e.ipod||!(s||a||h||p||u||m&&t.match(/Android/)||m&&t.match(/CriOS\/([\d.]+)/)||_&&t.match(/Mobile/)||y&&t.match(/Touch/))),{browser:i,os:e,canvasSupported:document.createElement("canvas").getContext?!0:!1}}return t(navigator.userAgent)}),i("echarts/chart/island",["require","./base","zrender/shape/Circle","../config","../util/ecData","zrender/tool/util","zrender/tool/event","zrender/tool/color","../util/accMath","../chart"],function(t){function e(t,e,o,s,r){i.call(this,t,e,o,s,r),this._nameConnector,this._valueConnector,this._zrHeight=this.zr.getHeight(),this._zrWidth=this.zr.getWidth();var h=this;h.shapeHandler.onmousewheel=function(t){var e=t.target,i=t.event,o=a.getDelta(i);o=o>0?-1:1,e.style.r-=o,e.style.r=e.style.r<5?5:e.style.r;var s=n.get(e,"value"),r=s*h.option.island.calculateStep;s=r>1?Math.round(s-r*o):+(s-r*o).toFixed(2);var l=n.get(e,"name");e.style.text=l+":"+s,n.set(e,"value",s),n.set(e,"name",l),h.zr.modShape(e.id),h.zr.refreshNextFrame(),a.stop(i)}}var i=t("./base"),o=t("zrender/shape/Circle"),s=t("../config");s.island={zlevel:0,z:5,r:15,calculateStep:.1};var n=t("../util/ecData"),r=t("zrender/tool/util"),a=t("zrender/tool/event");return e.prototype={type:s.CHART_TYPE_ISLAND,_combine:function(e,i){var o=t("zrender/tool/color"),s=t("../util/accMath"),r=s.accAdd(n.get(e,"value"),n.get(i,"value")),a=n.get(e,"name")+this._nameConnector+n.get(i,"name");e.style.text=a+this._valueConnector+r,n.set(e,"value",r),n.set(e,"name",a),e.style.r=this.option.island.r,e.style.color=o.mix(e.style.color,i.style.color)},refresh:function(t){t&&(t.island=this.reformOption(t.island),this.option=t,this._nameConnector=this.option.nameConnector,this._valueConnector=this.option.valueConnector)},getOption:function(){return this.option},resize:function(){var t=this.zr.getWidth(),e=this.zr.getHeight(),i=t/(this._zrWidth||t),o=e/(this._zrHeight||e);if(1!==i||1!==o){this._zrWidth=t,this._zrHeight=e;for(var s=0,n=this.shapeList.length;n>s;s++)this.zr.modShape(this.shapeList[s].id,{style:{x:Math.round(this.shapeList[s].style.x*i),y:Math.round(this.shapeList[s].style.y*o)}})}},add:function(t){var e=n.get(t,"name"),i=n.get(t,"value"),s=null!=n.get(t,"series")?n.get(t,"series").name:"",r=this.getFont(this.option.island.textStyle),a={zlevel:this.getZlevelBase(),z:this.getZBase(),style:{x:t.style.x,y:t.style.y,r:this.option.island.r,color:t.style.color||t.style.strokeColor,text:e+this._valueConnector+i,textFont:r},draggable:!0,hoverable:!0,onmousewheel:this.shapeHandler.onmousewheel,_type:"island"};"#fff"===a.style.color&&(a.style.color=t.style.strokeColor),this.setCalculable(a),a.dragEnableTime=0,n.pack(a,{name:s},-1,i,-1,e),a=new o(a),this.shapeList.push(a),this.zr.addShape(a)},del:function(t){this.zr.delShape(t.id);for(var e=[],i=0,o=this.shapeList.length;o>i;i++)this.shapeList[i].id!=t.id&&e.push(this.shapeList[i]);this.shapeList=e},ondrop:function(t,e){if(this.isDrop&&t.target){var i=t.target,o=t.dragged;this._combine(i,o),this.zr.modShape(i.id),e.dragIn=!0,this.isDrop=!1}},ondragend:function(t,e){var i=t.target;this.isDragend?e.dragIn&&(this.del(i),e.needRefresh=!0):e.dragIn||(i.style.x=a.getX(t.event),i.style.y=a.getY(t.event),this.add(i),e.needRefresh=!0),this.isDragend=!1}},r.inherits(e,i),t("../chart").define("island",e),e}),i("zrender/zrender",["require","./dep/excanvas","./tool/util","./tool/log","./tool/guid","./Handler","./Painter","./Storage","./animation/Animation","./tool/env"],function(t){function e(t){return function(){for(var e=t.animatingElements,i=0,o=e.length;o>i;i++)t.storage.mod(e[i].id);(e.length||t._needsRefreshNextFrame)&&t.refresh()}}t("./dep/excanvas");var i=t("./tool/util"),o=t("./tool/log"),s=t("./tool/guid"),n=t("./Handler"),r=t("./Painter"),a=t("./Storage"),h=t("./animation/Animation"),l={},d={};d.version="2.0.8",d.init=function(t){var e=new c(s(),t);return l[e.id]=e,e},d.dispose=function(t){if(t)t.dispose();else{for(var e in l)l[e].dispose();l={}}return d},d.getInstance=function(t){return l[t]},d.delInstance=function(t){return delete l[t],d};var c=function(i,o){this.id=i,this.env=t("./tool/env"),this.storage=new a,this.painter=new r(o,this.storage),this.handler=new n(o,this.storage,this.painter),this.animatingElements=[],this.animation=new h({stage:{update:e(this)}}),this.animation.start();var s=this;this.painter.refreshNextFrame=function(){s.refreshNextFrame()},this._needsRefreshNextFrame=!1;var s=this,l=this.storage,d=l.delFromMap;l.delFromMap=function(t){var e=l.get(t);s.stopAnimation(e),d.call(l,t)}};return c.prototype.getId=function(){return this.id},c.prototype.addShape=function(t){return this.addElement(t),this},c.prototype.addGroup=function(t){return this.addElement(t),this},c.prototype.delShape=function(t){return this.delElement(t),this},c.prototype.delGroup=function(t){return this.delElement(t),this},c.prototype.modShape=function(t,e){return this.modElement(t,e),this},c.prototype.modGroup=function(t,e){return this.modElement(t,e),this},c.prototype.addElement=function(t){return this.storage.addRoot(t),this._needsRefreshNextFrame=!0,this},c.prototype.delElement=function(t){return this.storage.delRoot(t),this._needsRefreshNextFrame=!0,this},c.prototype.modElement=function(t,e){return this.storage.mod(t,e),this._needsRefreshNextFrame=!0,this},c.prototype.modLayer=function(t,e){return this.painter.modLayer(t,e),this._needsRefreshNextFrame=!0,this},c.prototype.addHoverShape=function(t){return this.storage.addHover(t),this},c.prototype.render=function(t){return this.painter.render(t),this._needsRefreshNextFrame=!1,this},c.prototype.refresh=function(t){return this.painter.refresh(t),this._needsRefreshNextFrame=!1,this},c.prototype.refreshNextFrame=function(){return this._needsRefreshNextFrame=!0,this},c.prototype.refreshHover=function(t){return this.painter.refreshHover(t),this},c.prototype.refreshShapes=function(t,e){return this.painter.refreshShapes(t,e),this},c.prototype.resize=function(){return this.painter.resize(),this},c.prototype.animate=function(t,e,s){if("string"==typeof t&&(t=this.storage.get(t)),t){var n;if(e){for(var r=e.split("."),a=t,h=0,l=r.length;l>h;h++)a&&(a=a[r[h]]);a&&(n=a)}else n=t;if(!n)return void o('Property "'+e+'" is not existed in element '+t.id);var d=this.animatingElements;null==t.__animators&&(t.__animators=[]);var c=t.__animators;0===c.length&&d.push(t);var p=this.animation.animate(n,{loop:s}).done(function(){var e=i.indexOf(t.__animators,p);if(e>=0&&c.splice(e,1),0===c.length){var e=i.indexOf(d,t);d.splice(e,1)}});return c.push(p),p}o("Element not existed")},c.prototype.stopAnimation=function(t){if(t.__animators){for(var e=t.__animators,o=e.length,s=0;o>s;s++)e[s].stop();if(o>0){var n=this.animatingElements,r=i.indexOf(n,t);r>=0&&n.splice(r,1)}e.length=0}return this},c.prototype.clearAnimation=function(){return this.animation.clear(),this.animatingElements.length=0,this},c.prototype.showLoading=function(t){return this.painter.showLoading(t),this},c.prototype.hideLoading=function(){return this.painter.hideLoading(),this},c.prototype.getWidth=function(){return this.painter.getWidth()},c.prototype.getHeight=function(){return this.painter.getHeight()},c.prototype.toDataURL=function(t,e,i){return this.painter.toDataURL(t,e,i)},c.prototype.shapeToImage=function(t,e,i){var o=s();return this.painter.shapeToImage(o,t,e,i)},c.prototype.on=function(t,e,i){return this.handler.on(t,e,i),this},c.prototype.un=function(t,e){return this.handler.un(t,e),this},c.prototype.trigger=function(t,e){return this.handler.trigger(t,e),this},c.prototype.clear=function(){return this.storage.delRoot(),this.painter.clear(),this},c.prototype.dispose=function(){this.animation.stop(),this.clear(),this.storage.dispose(),this.painter.dispose(),this.handler.dispose(),this.animation=this.animatingElements=this.storage=this.painter=this.handler=null,d.delInstance(this.id)},d}),i("zrender/tool/event",["require","../mixin/Eventful"],function(t){"use strict";function e(t){return"undefined"!=typeof t.zrenderX&&t.zrenderX||"undefined"!=typeof t.offsetX&&t.offsetX||"undefined"!=typeof t.layerX&&t.layerX||"undefined"!=typeof t.clientX&&t.clientX}function i(t){return"undefined"!=typeof t.zrenderY&&t.zrenderY||"undefined"!=typeof t.offsetY&&t.offsetY||"undefined"!=typeof t.layerY&&t.layerY||"undefined"!=typeof t.clientY&&t.clientY}function o(t){return"undefined"!=typeof t.zrenderDelta&&t.zrenderDelta||"undefined"!=typeof t.wheelDelta&&t.wheelDelta||"undefined"!=typeof t.detail&&-t.detail}var s=t("../mixin/Eventful"),n="function"==typeof window.addEventListener?function(t){t.preventDefault(),t.stopPropagation(),t.cancelBubble=!0}:function(t){t.returnValue=!1,t.cancelBubble=!0};return{getX:e,getY:i,getDelta:o,stop:n,Dispatcher:s}}),i("echarts/component",[],function(){var t={},e={};return t.define=function(i,o){return e[i]=o,t},t.get=function(t){return e[t]},t}),i("echarts/component/title",["require","./base","zrender/shape/Text","zrender/shape/Rectangle","../config","zrender/tool/util","zrender/tool/area","zrender/tool/color","../component"],function(t){function e(t,e,o,s,n){i.call(this,t,e,o,s,n),this.refresh(s)}var i=t("./base"),o=t("zrender/shape/Text"),s=t("zrender/shape/Rectangle"),n=t("../config");n.title={zlevel:0,z:6,show:!0,text:"",subtext:"",x:"left",y:"top",backgroundColor:"rgba(0,0,0,0)",borderColor:"#ccc",borderWidth:0,padding:5,itemGap:5,textStyle:{fontSize:18,fontWeight:"bolder",color:"#333"},subtextStyle:{color:"#aaa"}};var r=t("zrender/tool/util"),a=t("zrender/tool/area"),h=t("zrender/tool/color");return e.prototype={type:n.COMPONENT_TYPE_TITLE,_buildShape:function(){if(this.titleOption.show){this._itemGroupLocation=this._getItemGroupLocation(),this._buildBackground(),this._buildItem();
for(var t=0,e=this.shapeList.length;e>t;t++)this.zr.addShape(this.shapeList[t])}},_buildItem:function(){var t=this.titleOption.text,e=this.titleOption.link,i=this.titleOption.target,s=this.titleOption.subtext,n=this.titleOption.sublink,r=this.titleOption.subtarget,a=this.getFont(this.titleOption.textStyle),l=this.getFont(this.titleOption.subtextStyle),d=this._itemGroupLocation.x,c=this._itemGroupLocation.y,p=this._itemGroupLocation.width,u=this._itemGroupLocation.height,g={zlevel:this.getZlevelBase(),z:this.getZBase(),style:{y:c,color:this.titleOption.textStyle.color,text:t,textFont:a,textBaseline:"top"},highlightStyle:{color:h.lift(this.titleOption.textStyle.color,1),brushType:"fill"},hoverable:!1};e&&(g.hoverable=!0,g.clickable=!0,g.onclick=function(){i&&"self"==i?window.location=e:window.open(e)});var f={zlevel:this.getZlevelBase(),z:this.getZBase(),style:{y:c+u,color:this.titleOption.subtextStyle.color,text:s,textFont:l,textBaseline:"bottom"},highlightStyle:{color:h.lift(this.titleOption.subtextStyle.color,1),brushType:"fill"},hoverable:!1};switch(n&&(f.hoverable=!0,f.clickable=!0,f.onclick=function(){r&&"self"==r?window.location=n:window.open(n)}),this.titleOption.x){case"center":g.style.x=f.style.x=d+p/2,g.style.textAlign=f.style.textAlign="center";break;case"left":g.style.x=f.style.x=d,g.style.textAlign=f.style.textAlign="left";break;case"right":g.style.x=f.style.x=d+p,g.style.textAlign=f.style.textAlign="right";break;default:d=this.titleOption.x-0,d=isNaN(d)?0:d,g.style.x=f.style.x=d}this.titleOption.textAlign&&(g.style.textAlign=f.style.textAlign=this.titleOption.textAlign),this.shapeList.push(new o(g)),""!==s&&this.shapeList.push(new o(f))},_buildBackground:function(){var t=this.reformCssArray(this.titleOption.padding);this.shapeList.push(new s({zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{x:this._itemGroupLocation.x-t[3],y:this._itemGroupLocation.y-t[0],width:this._itemGroupLocation.width+t[3]+t[1],height:this._itemGroupLocation.height+t[0]+t[2],brushType:0===this.titleOption.borderWidth?"fill":"both",color:this.titleOption.backgroundColor,strokeColor:this.titleOption.borderColor,lineWidth:this.titleOption.borderWidth}}))},_getItemGroupLocation:function(){var t,e=this.reformCssArray(this.titleOption.padding),i=this.titleOption.text,o=this.titleOption.subtext,s=this.getFont(this.titleOption.textStyle),n=this.getFont(this.titleOption.subtextStyle),r=Math.max(a.getTextWidth(i,s),a.getTextWidth(o,n)),h=a.getTextHeight(i,s)+(""===o?0:this.titleOption.itemGap+a.getTextHeight(o,n)),l=this.zr.getWidth();switch(this.titleOption.x){case"center":t=Math.floor((l-r)/2);break;case"left":t=e[3]+this.titleOption.borderWidth;break;case"right":t=l-r-e[1]-this.titleOption.borderWidth;break;default:t=this.titleOption.x-0,t=isNaN(t)?0:t}var d,c=this.zr.getHeight();switch(this.titleOption.y){case"top":d=e[0]+this.titleOption.borderWidth;break;case"bottom":d=c-h-e[2]-this.titleOption.borderWidth;break;case"center":d=Math.floor((c-h)/2);break;default:d=this.titleOption.y-0,d=isNaN(d)?0:d}return{x:t,y:d,width:r,height:h}},refresh:function(t){t&&(this.option=t,this.option.title=this.reformOption(this.option.title),this.titleOption=this.option.title,this.titleOption.textStyle=this.getTextStyle(this.titleOption.textStyle),this.titleOption.subtextStyle=this.getTextStyle(this.titleOption.subtextStyle)),this.clear(),this._buildShape()}},r.inherits(e,i),t("../component").define("title",e),e}),i("zrender/config",[],function(){var t={EVENT:{RESIZE:"resize",CLICK:"click",DBLCLICK:"dblclick",MOUSEWHEEL:"mousewheel",MOUSEMOVE:"mousemove",MOUSEOVER:"mouseover",MOUSEOUT:"mouseout",MOUSEDOWN:"mousedown",MOUSEUP:"mouseup",GLOBALOUT:"globalout",DRAGSTART:"dragstart",DRAGEND:"dragend",DRAGENTER:"dragenter",DRAGOVER:"dragover",DRAGLEAVE:"dragleave",DROP:"drop",touchClickDelay:300},catchBrushException:!1,debugMode:0,devicePixelRatio:Math.max(window.devicePixelRatio||1,1)};return t}),i("zrender/dep/excanvas",["require"],function(){return document.createElement("canvas").getContext?G_vmlCanvasManager=!1:!function(){function t(){return this.context_||(this.context_=new v(this))}function e(t,e){var i=N.call(arguments,2);return function(){return t.apply(e,i.concat(N.call(arguments)))}}function i(t){return String(t).replace(/&/g,"&amp;").replace(/"/g,"&quot;")}function o(t,e,i){t.namespaces[e]||t.namespaces.add(e,i,"#default#VML")}function s(t){if(o(t,"g_vml_","urn:schemas-microsoft-com:vml"),o(t,"g_o_","urn:schemas-microsoft-com:office:office"),!t.styleSheets.ex_canvas_){var e=t.createStyleSheet();e.owningElement.id="ex_canvas_",e.cssText="canvas{display:inline-block;overflow:hidden;text-align:left;width:300px;height:150px}"}}function n(t){var e=t.srcElement;switch(t.propertyName){case"width":e.getContext().clearRect(),e.style.width=e.attributes.width.nodeValue+"px",e.firstChild.style.width=e.clientWidth+"px";break;case"height":e.getContext().clearRect(),e.style.height=e.attributes.height.nodeValue+"px",e.firstChild.style.height=e.clientHeight+"px"}}function r(t){var e=t.srcElement;e.firstChild&&(e.firstChild.style.width=e.clientWidth+"px",e.firstChild.style.height=e.clientHeight+"px")}function a(){return[[1,0,0],[0,1,0],[0,0,1]]}function h(t,e){for(var i=a(),o=0;3>o;o++)for(var s=0;3>s;s++){for(var n=0,r=0;3>r;r++)n+=t[o][r]*e[r][s];i[o][s]=n}return i}function l(t,e){e.fillStyle=t.fillStyle,e.lineCap=t.lineCap,e.lineJoin=t.lineJoin,e.lineWidth=t.lineWidth,e.miterLimit=t.miterLimit,e.shadowBlur=t.shadowBlur,e.shadowColor=t.shadowColor,e.shadowOffsetX=t.shadowOffsetX,e.shadowOffsetY=t.shadowOffsetY,e.strokeStyle=t.strokeStyle,e.globalAlpha=t.globalAlpha,e.font=t.font,e.textAlign=t.textAlign,e.textBaseline=t.textBaseline,e.scaleX_=t.scaleX_,e.scaleY_=t.scaleY_,e.lineScale_=t.lineScale_}function d(t){var e=t.indexOf("(",3),i=t.indexOf(")",e+1),o=t.substring(e+1,i).split(",");return(4!=o.length||"a"!=t.charAt(3))&&(o[3]=1),o}function c(t){return parseFloat(t)/100}function p(t,e,i){return Math.min(i,Math.max(e,t))}function u(t){var e,i,o,s,n,r;if(s=parseFloat(t[0])/360%360,0>s&&s++,n=p(c(t[1]),0,1),r=p(c(t[2]),0,1),0==n)e=i=o=r;else{var a=.5>r?r*(1+n):r+n-r*n,h=2*r-a;e=g(h,a,s+1/3),i=g(h,a,s),o=g(h,a,s-1/3)}return"#"+W[Math.floor(255*e)]+W[Math.floor(255*i)]+W[Math.floor(255*o)]}function g(t,e,i){return 0>i&&i++,i>1&&i--,1>6*i?t+6*(e-t)*i:1>2*i?e:2>3*i?t+(e-t)*(2/3-i)*6:t}function f(t){if(t in q)return q[t];var e,i=1;if(t=String(t),"#"==t.charAt(0))e=t;else if(/^rgb/.test(t)){for(var o,s=d(t),e="#",n=0;3>n;n++)o=-1!=s[n].indexOf("%")?Math.floor(255*c(s[n])):+s[n],e+=W[p(o,0,255)];i=+s[3]}else if(/^hsl/.test(t)){var s=d(t);e=u(s),i=s[3]}else e=Z[t]||t;return q[t]={color:e,alpha:i}}function m(t){if(U[t])return U[t];var e,i=document.createElement("div"),o=i.style;try{o.font=t,e=o.fontFamily.split(",")[0]}catch(s){}return U[t]={style:o.fontStyle||V.style,variant:o.fontVariant||V.variant,weight:o.fontWeight||V.weight,size:o.fontSize||V.size,family:e||V.family}}function _(t,e){var i={};for(var o in t)i[o]=t[o];var s=parseFloat(e.currentStyle.fontSize),n=parseFloat(t.size);return i.size="number"==typeof t.size?t.size:-1!=t.size.indexOf("px")?n:-1!=t.size.indexOf("em")?s*n:-1!=t.size.indexOf("%")?s/100*n:-1!=t.size.indexOf("pt")?n/.75:s,i}function y(t){return t.style+" "+t.variant+" "+t.weight+" "+t.size+"px '"+t.family+"'"}function x(t){return Q[t]||"square"}function v(t){this.m_=a(),this.mStack_=[],this.aStack_=[],this.currentPath_=[],this.strokeStyle="#000",this.fillStyle="#000",this.lineWidth=1,this.lineJoin="miter",this.lineCap="butt",this.miterLimit=1*H,this.globalAlpha=1,this.font="12px 微软雅黑",this.textAlign="left",this.textBaseline="alphabetic",this.canvas=t;var e="width:"+t.clientWidth+"px;height:"+t.clientHeight+"px;overflow:hidden;position:absolute",i=t.ownerDocument.createElement("div");i.style.cssText=e,t.appendChild(i);var o=i.cloneNode(!1);o.style.backgroundColor="#fff",o.style.filter="alpha(opacity=0)",t.appendChild(o),this.element_=i,this.scaleX_=1,this.scaleY_=1,this.lineScale_=1}function b(t,e,i,o){t.currentPath_.push({type:"bezierCurveTo",cp1x:e.x,cp1y:e.y,cp2x:i.x,cp2y:i.y,x:o.x,y:o.y}),t.currentX_=o.x,t.currentY_=o.y}function S(t,e){var i=f(t.strokeStyle),o=i.color,s=i.alpha*t.globalAlpha,n=t.lineScale_*t.lineWidth;1>n&&(s*=n),e.push("<g_vml_:stroke",' opacity="',s,'"',' joinstyle="',t.lineJoin,'"',' miterlimit="',t.miterLimit,'"',' endcap="',x(t.lineCap),'"',' weight="',n,'px"',' color="',o,'" />')}function T(t,e,i,o){var s=t.fillStyle,n=t.scaleX_,r=t.scaleY_,a=o.x-i.x,h=o.y-i.y;if(s instanceof L){var l=0,d={x:0,y:0},c=0,p=1;if("gradient"==s.type_){var u=s.x0_/n,g=s.y0_/r,m=s.x1_/n,_=s.y1_/r,y=z(t,u,g),x=z(t,m,_),v=x.x-y.x,b=x.y-y.y;l=180*Math.atan2(v,b)/Math.PI,0>l&&(l+=360),1e-6>l&&(l=0)}else{var y=z(t,s.x0_,s.y0_);d={x:(y.x-i.x)/a,y:(y.y-i.y)/h},a/=n*H,h/=r*H;var S=O.max(a,h);c=2*s.r0_/S,p=2*s.r1_/S-c}var T=s.colors_;T.sort(function(t,e){return t.offset-e.offset});for(var C=T.length,w=T[0].color,M=T[C-1].color,A=T[0].alpha*t.globalAlpha,k=T[C-1].alpha*t.globalAlpha,I=[],R=0;C>R;R++){var P=T[R];I.push(P.offset*p+c+" "+P.color)}e.push('<g_vml_:fill type="',s.type_,'"',' method="none" focus="100%"',' color="',w,'"',' color2="',M,'"',' colors="',I.join(","),'"',' opacity="',k,'"',' g_o_:opacity2="',A,'"',' angle="',l,'"',' focusposition="',d.x,",",d.y,'" />')}else if(s instanceof E){if(a&&h){var D=-i.x,B=-i.y;e.push("<g_vml_:fill",' position="',D/a*n*n,",",B/h*r*r,'"',' type="tile"',' src="',s.src_,'" />')}}else{var F=f(t.fillStyle),N=F.color,Y=F.alpha*t.globalAlpha;e.push('<g_vml_:fill color="',N,'" opacity="',Y,'" />')}}function z(t,e,i){var o=t.m_;return{x:H*(e*o[0][0]+i*o[1][0]+o[2][0])-F,y:H*(e*o[0][1]+i*o[1][1]+o[2][1])-F}}function C(t){return isFinite(t[0][0])&&isFinite(t[0][1])&&isFinite(t[1][0])&&isFinite(t[1][1])&&isFinite(t[2][0])&&isFinite(t[2][1])}function w(t,e,i){if(C(e)&&(t.m_=e,t.scaleX_=Math.sqrt(e[0][0]*e[0][0]+e[0][1]*e[0][1]),t.scaleY_=Math.sqrt(e[1][0]*e[1][0]+e[1][1]*e[1][1]),i)){var o=e[0][0]*e[1][1]-e[0][1]*e[1][0];t.lineScale_=B(D(o))}}function L(t){this.type_=t,this.x0_=0,this.y0_=0,this.r0_=0,this.x1_=0,this.y1_=0,this.r1_=0,this.colors_=[]}function E(t,e){switch(A(t),e){case"repeat":case null:case"":this.repetition_="repeat";break;case"repeat-x":case"repeat-y":case"no-repeat":this.repetition_=e;break;default:M("SYNTAX_ERR")}this.src_=t.src,this.width_=t.width,this.height_=t.height}function M(t){throw new k(t)}function A(t){t&&1==t.nodeType&&"IMG"==t.tagName||M("TYPE_MISMATCH_ERR"),"complete"!=t.readyState&&M("INVALID_STATE_ERR")}function k(t){this.code=this[t],this.message=t+": DOM Exception "+this.code}var O=Math,I=O.round,R=O.sin,P=O.cos,D=O.abs,B=O.sqrt,H=10,F=H/2,N=(+navigator.userAgent.match(/MSIE ([\d.]+)?/)[1],Array.prototype.slice);s(document);var Y={init:function(t){var i=t||document;i.createElement("canvas"),i.attachEvent("onreadystatechange",e(this.init_,this,i))},init_:function(t){for(var e=t.getElementsByTagName("canvas"),i=0;i<e.length;i++)this.initElement(e[i])},initElement:function(e){if(!e.getContext){e.getContext=t,s(e.ownerDocument),e.innerHTML="",e.attachEvent("onpropertychange",n),e.attachEvent("onresize",r);var i=e.attributes;i.width&&i.width.specified?e.style.width=i.width.nodeValue+"px":e.width=e.clientWidth,i.height&&i.height.specified?e.style.height=i.height.nodeValue+"px":e.height=e.clientHeight}return e}};Y.init();for(var W=[],X=0;16>X;X++)for(var G=0;16>G;G++)W[16*X+G]=X.toString(16)+G.toString(16);var Z={aliceblue:"#F0F8FF",antiquewhite:"#FAEBD7",aquamarine:"#7FFFD4",azure:"#F0FFFF",beige:"#F5F5DC",bisque:"#FFE4C4",black:"#000000",blanchedalmond:"#FFEBCD",blueviolet:"#8A2BE2",brown:"#A52A2A",burlywood:"#DEB887",cadetblue:"#5F9EA0",chartreuse:"#7FFF00",chocolate:"#D2691E",coral:"#FF7F50",cornflowerblue:"#6495ED",cornsilk:"#FFF8DC",crimson:"#DC143C",cyan:"#00FFFF",darkblue:"#00008B",darkcyan:"#008B8B",darkgoldenrod:"#B8860B",darkgray:"#A9A9A9",darkgreen:"#006400",darkgrey:"#A9A9A9",darkkhaki:"#BDB76B",darkmagenta:"#8B008B",darkolivegreen:"#556B2F",darkorange:"#FF8C00",darkorchid:"#9932CC",darkred:"#8B0000",darksalmon:"#E9967A",darkseagreen:"#8FBC8F",darkslateblue:"#483D8B",darkslategray:"#2F4F4F",darkslategrey:"#2F4F4F",darkturquoise:"#00CED1",darkviolet:"#9400D3",deeppink:"#FF1493",deepskyblue:"#00BFFF",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1E90FF",firebrick:"#B22222",floralwhite:"#FFFAF0",forestgreen:"#228B22",gainsboro:"#DCDCDC",ghostwhite:"#F8F8FF",gold:"#FFD700",goldenrod:"#DAA520",grey:"#808080",greenyellow:"#ADFF2F",honeydew:"#F0FFF0",hotpink:"#FF69B4",indianred:"#CD5C5C",indigo:"#4B0082",ivory:"#FFFFF0",khaki:"#F0E68C",lavender:"#E6E6FA",lavenderblush:"#FFF0F5",lawngreen:"#7CFC00",lemonchiffon:"#FFFACD",lightblue:"#ADD8E6",lightcoral:"#F08080",lightcyan:"#E0FFFF",lightgoldenrodyellow:"#FAFAD2",lightgreen:"#90EE90",lightgrey:"#D3D3D3",lightpink:"#FFB6C1",lightsalmon:"#FFA07A",lightseagreen:"#20B2AA",lightskyblue:"#87CEFA",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#B0C4DE",lightyellow:"#FFFFE0",limegreen:"#32CD32",linen:"#FAF0E6",magenta:"#FF00FF",mediumaquamarine:"#66CDAA",mediumblue:"#0000CD",mediumorchid:"#BA55D3",mediumpurple:"#9370DB",mediumseagreen:"#3CB371",mediumslateblue:"#7B68EE",mediumspringgreen:"#00FA9A",mediumturquoise:"#48D1CC",mediumvioletred:"#C71585",midnightblue:"#191970",mintcream:"#F5FFFA",mistyrose:"#FFE4E1",moccasin:"#FFE4B5",navajowhite:"#FFDEAD",oldlace:"#FDF5E6",olivedrab:"#6B8E23",orange:"#FFA500",orangered:"#FF4500",orchid:"#DA70D6",palegoldenrod:"#EEE8AA",palegreen:"#98FB98",paleturquoise:"#AFEEEE",palevioletred:"#DB7093",papayawhip:"#FFEFD5",peachpuff:"#FFDAB9",peru:"#CD853F",pink:"#FFC0CB",plum:"#DDA0DD",powderblue:"#B0E0E6",rosybrown:"#BC8F8F",royalblue:"#4169E1",saddlebrown:"#8B4513",salmon:"#FA8072",sandybrown:"#F4A460",seagreen:"#2E8B57",seashell:"#FFF5EE",sienna:"#A0522D",skyblue:"#87CEEB",slateblue:"#6A5ACD",slategray:"#708090",slategrey:"#708090",snow:"#FFFAFA",springgreen:"#00FF7F",steelblue:"#4682B4",tan:"#D2B48C",thistle:"#D8BFD8",tomato:"#FF6347",turquoise:"#40E0D0",violet:"#EE82EE",wheat:"#F5DEB3",whitesmoke:"#F5F5F5",yellowgreen:"#9ACD32"},q={},V={style:"normal",variant:"normal",weight:"normal",size:12,family:"微软雅黑"},U={},Q={butt:"flat",round:"round"},j=v.prototype;j.clearRect=function(){this.textMeasureEl_&&(this.textMeasureEl_.removeNode(!0),this.textMeasureEl_=null),this.element_.innerHTML=""},j.beginPath=function(){this.currentPath_=[]},j.moveTo=function(t,e){var i=z(this,t,e);this.currentPath_.push({type:"moveTo",x:i.x,y:i.y}),this.currentX_=i.x,this.currentY_=i.y},j.lineTo=function(t,e){var i=z(this,t,e);this.currentPath_.push({type:"lineTo",x:i.x,y:i.y}),this.currentX_=i.x,this.currentY_=i.y},j.bezierCurveTo=function(t,e,i,o,s,n){var r=z(this,s,n),a=z(this,t,e),h=z(this,i,o);b(this,a,h,r)},j.quadraticCurveTo=function(t,e,i,o){var s=z(this,t,e),n=z(this,i,o),r={x:this.currentX_+2/3*(s.x-this.currentX_),y:this.currentY_+2/3*(s.y-this.currentY_)},a={x:r.x+(n.x-this.currentX_)/3,y:r.y+(n.y-this.currentY_)/3};b(this,r,a,n)},j.arc=function(t,e,i,o,s,n){i*=H;var r=n?"at":"wa",a=t+P(o)*i-F,h=e+R(o)*i-F,l=t+P(s)*i-F,d=e+R(s)*i-F;a!=l||n||(a+=.125);var c=z(this,t,e),p=z(this,a,h),u=z(this,l,d);this.currentPath_.push({type:r,x:c.x,y:c.y,radius:i,xStart:p.x,yStart:p.y,xEnd:u.x,yEnd:u.y})},j.rect=function(t,e,i,o){this.moveTo(t,e),this.lineTo(t+i,e),this.lineTo(t+i,e+o),this.lineTo(t,e+o),this.closePath()},j.strokeRect=function(t,e,i,o){var s=this.currentPath_;this.beginPath(),this.moveTo(t,e),this.lineTo(t+i,e),this.lineTo(t+i,e+o),this.lineTo(t,e+o),this.closePath(),this.stroke(),this.currentPath_=s},j.fillRect=function(t,e,i,o){var s=this.currentPath_;this.beginPath(),this.moveTo(t,e),this.lineTo(t+i,e),this.lineTo(t+i,e+o),this.lineTo(t,e+o),this.closePath(),this.fill(),this.currentPath_=s},j.createLinearGradient=function(t,e,i,o){var s=new L("gradient");return s.x0_=t,s.y0_=e,s.x1_=i,s.y1_=o,s},j.createRadialGradient=function(t,e,i,o,s,n){var r=new L("gradientradial");return r.x0_=t,r.y0_=e,r.r0_=i,r.x1_=o,r.y1_=s,r.r1_=n,r},j.drawImage=function(t){var e,i,o,s,n,r,a,h,l=t.runtimeStyle.width,d=t.runtimeStyle.height;t.runtimeStyle.width="auto",t.runtimeStyle.height="auto";var c=t.width,p=t.height;if(t.runtimeStyle.width=l,t.runtimeStyle.height=d,3==arguments.length)e=arguments[1],i=arguments[2],n=r=0,a=o=c,h=s=p;else if(5==arguments.length)e=arguments[1],i=arguments[2],o=arguments[3],s=arguments[4],n=r=0,a=c,h=p;else{if(9!=arguments.length)throw Error("Invalid number of arguments");n=arguments[1],r=arguments[2],a=arguments[3],h=arguments[4],e=arguments[5],i=arguments[6],o=arguments[7],s=arguments[8]}var u=z(this,e,i),g=[],f=10,m=10,_=x=1;if(g.push(" <g_vml_:group",' coordsize="',H*f,",",H*m,'"',' coordorigin="0,0"',' style="width:',f,"px;height:",m,"px;position:absolute;"),1!=this.m_[0][0]||this.m_[0][1]||1!=this.m_[1][1]||this.m_[1][0]){var y=[],_=this.scaleX_,x=this.scaleY_;y.push("M11=",this.m_[0][0]/_,",","M12=",this.m_[1][0]/x,",","M21=",this.m_[0][1]/_,",","M22=",this.m_[1][1]/x,",","Dx=",I(u.x/H),",","Dy=",I(u.y/H),"");var v=u,b=z(this,e+o,i),S=z(this,e,i+s),T=z(this,e+o,i+s);v.x=O.max(v.x,b.x,S.x,T.x),v.y=O.max(v.y,b.y,S.y,T.y),g.push("padding:0 ",I(v.x/H),"px ",I(v.y/H),"px 0;filter:progid:DXImageTransform.Microsoft.Matrix(",y.join(""),", SizingMethod='clip');")}else g.push("top:",I(u.y/H),"px;left:",I(u.x/H),"px;");g.push(' ">'),(n||r)&&g.push('<div style="overflow: hidden; width:',Math.ceil((o+n*o/a)*_),"px;"," height:",Math.ceil((s+r*s/h)*x),"px;"," filter:progid:DxImageTransform.Microsoft.Matrix(Dx=",-n*o/a*_,",Dy=",-r*s/h*x,');">'),g.push('<div style="width:',Math.round(_*c*o/a),"px;"," height:",Math.round(x*p*s/h),"px;"," filter:"),this.globalAlpha<1&&g.push(" progid:DXImageTransform.Microsoft.Alpha(opacity="+100*this.globalAlpha+")"),g.push(" progid:DXImageTransform.Microsoft.AlphaImageLoader(src=",t.src,',sizingMethod=scale)">'),(n||r)&&g.push("</div>"),g.push("</div></div>"),this.element_.insertAdjacentHTML("BeforeEnd",g.join(""))},j.stroke=function(t){var e=[],i=10,o=10;e.push("<g_vml_:shape",' filled="',!!t,'"',' style="position:absolute;width:',i,"px;height:",o,'px;"',' coordorigin="0,0"',' coordsize="',H*i,",",H*o,'"',' stroked="',!t,'"',' path="');for(var s={x:null,y:null},n={x:null,y:null},r=0;r<this.currentPath_.length;r++){var a,h=this.currentPath_[r];switch(h.type){case"moveTo":a=h,e.push(" m ",I(h.x),",",I(h.y));break;case"lineTo":e.push(" l ",I(h.x),",",I(h.y));break;case"close":e.push(" x "),h=null;break;case"bezierCurveTo":e.push(" c ",I(h.cp1x),",",I(h.cp1y),",",I(h.cp2x),",",I(h.cp2y),",",I(h.x),",",I(h.y));break;case"at":case"wa":e.push(" ",h.type," ",I(h.x-this.scaleX_*h.radius),",",I(h.y-this.scaleY_*h.radius)," ",I(h.x+this.scaleX_*h.radius),",",I(h.y+this.scaleY_*h.radius)," ",I(h.xStart),",",I(h.yStart)," ",I(h.xEnd),",",I(h.yEnd))}h&&((null==s.x||h.x<s.x)&&(s.x=h.x),(null==n.x||h.x>n.x)&&(n.x=h.x),(null==s.y||h.y<s.y)&&(s.y=h.y),(null==n.y||h.y>n.y)&&(n.y=h.y))}e.push(' ">'),t?T(this,e,s,n):S(this,e),e.push("</g_vml_:shape>"),this.element_.insertAdjacentHTML("beforeEnd",e.join(""))},j.fill=function(){this.stroke(!0)},j.closePath=function(){this.currentPath_.push({type:"close"})},j.save=function(){var t={};l(this,t),this.aStack_.push(t),this.mStack_.push(this.m_),this.m_=h(a(),this.m_)},j.restore=function(){this.aStack_.length&&(l(this.aStack_.pop(),this),this.m_=this.mStack_.pop())},j.translate=function(t,e){var i=[[1,0,0],[0,1,0],[t,e,1]];w(this,h(i,this.m_),!1)},j.rotate=function(t){var e=P(t),i=R(t),o=[[e,i,0],[-i,e,0],[0,0,1]];w(this,h(o,this.m_),!1)},j.scale=function(t,e){var i=[[t,0,0],[0,e,0],[0,0,1]];w(this,h(i,this.m_),!0)},j.transform=function(t,e,i,o,s,n){var r=[[t,e,0],[i,o,0],[s,n,1]];w(this,h(r,this.m_),!0)},j.setTransform=function(t,e,i,o,s,n){var r=[[t,e,0],[i,o,0],[s,n,1]];w(this,r,!0)},j.drawText_=function(t,e,o,s,n){var r=this.m_,a=1e3,h=0,l=a,d={x:0,y:0},c=[],p=_(m(this.font),this.element_),u=y(p),g=this.element_.currentStyle,f=this.textAlign.toLowerCase();switch(f){case"left":case"center":case"right":break;case"end":f="ltr"==g.direction?"right":"left";break;case"start":f="rtl"==g.direction?"right":"left";break;default:f="left"}switch(this.textBaseline){case"hanging":case"top":d.y=p.size/1.75;break;case"middle":break;default:case null:case"alphabetic":case"ideographic":case"bottom":d.y=-p.size/2.25}switch(f){case"right":h=a,l=.05;break;case"center":h=l=a/2}var x=z(this,e+d.x,o+d.y);c.push('<g_vml_:line from="',-h,' 0" to="',l,' 0.05" ',' coordsize="100 100" coordorigin="0 0"',' filled="',!n,'" stroked="',!!n,'" style="position:absolute;width:1px;height:1px;">'),n?S(this,c):T(this,c,{x:-h,y:0},{x:l,y:p.size});var v=r[0][0].toFixed(3)+","+r[1][0].toFixed(3)+","+r[0][1].toFixed(3)+","+r[1][1].toFixed(3)+",0,0",b=I(x.x/H)+","+I(x.y/H);c.push('<g_vml_:skew on="t" matrix="',v,'" ',' offset="',b,'" origin="',h,' 0" />','<g_vml_:path textpathok="true" />','<g_vml_:textpath on="true" string="',i(t),'" style="v-text-align:',f,";font:",i(u),'" /></g_vml_:line>'),this.element_.insertAdjacentHTML("beforeEnd",c.join(""))},j.fillText=function(t,e,i,o){this.drawText_(t,e,i,o,!1)},j.strokeText=function(t,e,i,o){this.drawText_(t,e,i,o,!0)},j.measureText=function(t){if(!this.textMeasureEl_){var e='<span style="position:absolute;top:-20000px;left:0;padding:0;margin:0;border:none;white-space:pre;"></span>';this.element_.insertAdjacentHTML("beforeEnd",e),this.textMeasureEl_=this.element_.lastChild}var i=this.element_.ownerDocument;this.textMeasureEl_.innerHTML="";try{this.textMeasureEl_.style.font=this.font}catch(o){}return this.textMeasureEl_.appendChild(i.createTextNode(t)),{width:this.textMeasureEl_.offsetWidth}},j.clip=function(){},j.arcTo=function(){},j.createPattern=function(t,e){return new E(t,e)},L.prototype.addColorStop=function(t,e){e=f(e),this.colors_.push({offset:t,color:e.color,alpha:e.alpha})};var K=k.prototype=new Error;K.INDEX_SIZE_ERR=1,K.DOMSTRING_SIZE_ERR=2,K.HIERARCHY_REQUEST_ERR=3,K.WRONG_DOCUMENT_ERR=4,K.INVALID_CHARACTER_ERR=5,K.NO_DATA_ALLOWED_ERR=6,K.NO_MODIFICATION_ALLOWED_ERR=7,K.NOT_FOUND_ERR=8,K.NOT_SUPPORTED_ERR=9,K.INUSE_ATTRIBUTE_ERR=10,K.INVALID_STATE_ERR=11,K.SYNTAX_ERR=12,K.INVALID_MODIFICATION_ERR=13,K.NAMESPACE_ERR=14,K.INVALID_ACCESS_ERR=15,K.VALIDATION_ERR=16,K.TYPE_MISMATCH_ERR=17,G_vmlCanvasManager=Y,CanvasRenderingContext2D=v,CanvasGradient=L,CanvasPattern=E,DOMException=k}(),G_vmlCanvasManager}),i("zrender/loadingEffect/Bar",["require","./Base","../tool/util","../tool/color","../shape/Rectangle"],function(t){function e(t){i.call(this,t)}var i=t("./Base"),o=t("../tool/util"),s=t("../tool/color"),n=t("../shape/Rectangle");return o.inherits(e,i),e.prototype._start=function(t,e){var i=o.merge(this.options,{textStyle:{color:"#888"},backgroundColor:"rgba(250, 250, 250, 0.8)",effectOption:{x:0,y:this.canvasHeight/2-30,width:this.canvasWidth,height:5,brushType:"fill",timeInterval:100}}),r=this.createTextShape(i.textStyle),a=this.createBackgroundShape(i.backgroundColor),h=i.effectOption,l=new n({highlightStyle:o.clone(h)});return l.highlightStyle.color=h.color||s.getLinearGradient(h.x,h.y,h.x+h.width,h.y+h.height,[[0,"#ff6400"],[.5,"#ffe100"],[1,"#b1ff00"]]),null!=i.progress?(t(a),l.highlightStyle.width=this.adjust(i.progress,[0,1])*i.effectOption.width,t(l),t(r),void e()):(l.highlightStyle.width=0,setInterval(function(){t(a),l.highlightStyle.width<h.width?l.highlightStyle.width+=8:l.highlightStyle.width=0,t(l),t(r),e()},h.timeInterval))},e}),i("echarts/component/timeline",["require","./base","zrender/shape/Rectangle","../util/shape/Icon","../util/shape/Chain","../config","zrender/tool/util","zrender/tool/area","zrender/tool/event","../component"],function(t){function e(t,e,i,s,n){o.call(this,t,e,i,s,n);var r=this;if(r._onclick=function(t){return r.__onclick(t)},r._ondrift=function(t,e){return r.__ondrift(this,t,e)},r._ondragend=function(){return r.__ondragend()},r._setCurrentOption=function(){var t=r.timelineOption;r.currentIndex%=t.data.length;var e=r.options[r.currentIndex]||{};r.myChart.setOption(e,t.notMerge),r.messageCenter.dispatch(a.EVENT.TIMELINE_CHANGED,null,{currentIndex:r.currentIndex,data:null!=t.data[r.currentIndex].name?t.data[r.currentIndex].name:t.data[r.currentIndex]},r.myChart)},r._onFrame=function(){r._setCurrentOption(),r._syncHandleShape(),r.timelineOption.autoPlay&&(r.playTicket=setTimeout(function(){return r.currentIndex+=1,!r.timelineOption.loop&&r.currentIndex>=r.timelineOption.data.length?(r.currentIndex=r.timelineOption.data.length-1,void r.stop()):void r._onFrame()},r.timelineOption.playInterval))},this.setTheme(!1),this.options=this.option.options,this.currentIndex=this.timelineOption.currentIndex%this.timelineOption.data.length,this.timelineOption.notMerge||0===this.currentIndex||(this.options[this.currentIndex]=h.merge(this.options[this.currentIndex],this.options[0])),this.timelineOption.show&&(this._buildShape(),this._syncHandleShape()),this._setCurrentOption(),this.timelineOption.autoPlay){var r=this;this.playTicket=setTimeout(function(){r.play()},null!=this.ecTheme.animationDuration?this.ecTheme.animationDuration:a.animationDuration)}}function i(t,e){var i=2,o=e.x+i,s=e.y+i+2,r=e.width-i,a=e.height-i,h=e.symbol;if("last"===h)t.moveTo(o+r-2,s+a/3),t.lineTo(o+r-2,s),t.lineTo(o+2,s+a/2),t.lineTo(o+r-2,s+a),t.lineTo(o+r-2,s+a/3*2),t.moveTo(o,s),t.lineTo(o,s);else if("next"===h)t.moveTo(o+2,s+a/3),t.lineTo(o+2,s),t.lineTo(o+r-2,s+a/2),t.lineTo(o+2,s+a),t.lineTo(o+2,s+a/3*2),t.moveTo(o,s),t.lineTo(o,s);else if("play"===h)if("stop"===e.status)t.moveTo(o+2,s),t.lineTo(o+r-2,s+a/2),t.lineTo(o+2,s+a),t.lineTo(o+2,s);else{var l="both"===e.brushType?2:3;t.rect(o+2,s,l,a),t.rect(o+r-l-2,s,l,a)}else if(h.match("image")){var d="";d=h.replace(new RegExp("^image:\\/\\/"),""),h=n.prototype.iconLibrary.image,h(t,{x:o,y:s,width:r,height:a,image:d})}}var o=t("./base"),s=t("zrender/shape/Rectangle"),n=t("../util/shape/Icon"),r=t("../util/shape/Chain"),a=t("../config");a.timeline={zlevel:0,z:4,show:!0,type:"time",notMerge:!1,realtime:!0,x:80,x2:80,y2:0,height:50,backgroundColor:"rgba(0,0,0,0)",borderColor:"#ccc",borderWidth:0,padding:5,controlPosition:"left",autoPlay:!1,loop:!0,playInterval:2e3,lineStyle:{width:1,color:"#666",type:"dashed"},label:{show:!0,interval:"auto",rotate:0,textStyle:{color:"#333"}},checkpointStyle:{symbol:"auto",symbolSize:"auto",color:"auto",borderColor:"auto",borderWidth:"auto",label:{show:!1,textStyle:{color:"auto"}}},controlStyle:{itemSize:15,itemGap:5,normal:{color:"#333"},emphasis:{color:"#1e90ff"}},symbol:"emptyDiamond",symbolSize:4,currentIndex:0};var h=t("zrender/tool/util"),l=t("zrender/tool/area"),d=t("zrender/tool/event");return e.prototype={type:a.COMPONENT_TYPE_TIMELINE,_buildShape:function(){if(this._location=this._getLocation(),this._buildBackground(),this._buildControl(),this._chainPoint=this._getChainPoint(),this.timelineOption.label.show)for(var t=this._getInterval(),e=0,i=this._chainPoint.length;i>e;e+=t)this._chainPoint[e].showLabel=!0;this._buildChain(),this._buildHandle();for(var e=0,o=this.shapeList.length;o>e;e++)this.zr.addShape(this.shapeList[e])},_getLocation:function(){var t,e=this.timelineOption,i=this.reformCssArray(this.timelineOption.padding),o=this.zr.getWidth(),s=this.parsePercent(e.x,o),n=this.parsePercent(e.x2,o);null==e.width?(t=o-s-n,n=o-n):(t=this.parsePercent(e.width,o),n=s+t);var r,a,h=this.zr.getHeight(),l=this.parsePercent(e.height,h);return null!=e.y?(r=this.parsePercent(e.y,h),a=r+l):(a=h-this.parsePercent(e.y2,h),r=a-l),{x:s+i[3],y:r+i[0],x2:n-i[1],y2:a-i[2],width:t-i[1]-i[3],height:l-i[0]-i[2]}},_getReformedLabel:function(t){var e=this.timelineOption,i=null!=e.data[t].name?e.data[t].name:e.data[t],o=e.data[t].formatter||e.label.formatter;return o&&("function"==typeof o?i=o.call(this.myChart,i):"string"==typeof o&&(i=o.replace("{value}",i))),i},_getInterval:function(){var t=this._chainPoint,e=this.timelineOption,i=e.label.interval;if("auto"===i){var o=e.label.textStyle.fontSize,s=e.data,n=e.data.length;if(n>3){var r,a,h=!1;for(i=0;!h&&n>i;){i++,h=!0;for(var d=i;n>d;d+=i){if(r=t[d].x-t[d-i].x,0!==e.label.rotate)a=o;else if(s[d].textStyle)a=l.getTextWidth(t[d].name,t[d].textFont);else{var c=t[d].name+"",p=(c.match(/\w/g)||"").length,u=c.length-p;a=p*o*2/3+u*o}if(a>r){h=!1;break}}}}else i=1}else i=i-0+1;return i},_getChainPoint:function(){function t(t){return null!=l[t].name?l[t].name:l[t]+""}var e,i=this.timelineOption,o=i.symbol.toLowerCase(),s=i.symbolSize,n=i.label.rotate,r=i.label.textStyle,a=this.getFont(r),l=i.data,d=this._location.x,c=this._location.y+this._location.height/4*3,p=this._location.x2-this._location.x,u=l.length,g=[];if(u>1){var f=p/u;if(f=f>50?50:20>f?5:f,p-=2*f,"number"===i.type)for(var m=0;u>m;m++)g.push(d+f+p/(u-1)*m);else{g[0]=new Date(t(0).replace(/-/g,"/")),g[u-1]=new Date(t(u-1).replace(/-/g,"/"))-g[0];for(var m=1;u>m;m++)g[m]=d+f+p*(new Date(t(m).replace(/-/g,"/"))-g[0])/g[u-1];g[0]=d+f}}else g.push(d+p/2);for(var _,y,x,v,b,S=[],m=0;u>m;m++)d=g[m],_=l[m].symbol&&l[m].symbol.toLowerCase()||o,_.match("empty")?(_=_.replace("empty",""),x=!0):x=!1,_.match("star")&&(y=_.replace("star","")-0||5,_="star"),e=l[m].textStyle?h.merge(l[m].textStyle||{},r):r,v=e.align||"center",n?(v=n>0?"right":"left",b=[n*Math.PI/180,d,c-5]):b=!1,S.push({x:d,n:y,isEmpty:x,symbol:_,symbolSize:l[m].symbolSize||s,color:l[m].color,borderColor:l[m].borderColor,borderWidth:l[m].borderWidth,name:this._getReformedLabel(m),textColor:e.color,textAlign:v,textBaseline:e.baseline||"middle",textX:d,textY:c-(n?5:0),textFont:l[m].textStyle?this.getFont(e):a,rotation:b,showLabel:!1});return S},_buildBackground:function(){var t=this.timelineOption,e=this.reformCssArray(this.timelineOption.padding),i=this._location.width,o=this._location.height;(0!==t.borderWidth||"rgba(0,0,0,0)"!=t.backgroundColor.replace(/\s/g,""))&&this.shapeList.push(new s({zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{x:this._location.x-e[3],y:this._location.y-e[0],width:i+e[1]+e[3],height:o+e[0]+e[2],brushType:0===t.borderWidth?"fill":"both",color:t.backgroundColor,strokeColor:t.borderColor,lineWidth:t.borderWidth}}))},_buildControl:function(){var t=this,e=this.timelineOption,i=e.lineStyle,o=e.controlStyle;if("none"!==e.controlPosition){var s,r=o.itemSize,a=o.itemGap;"left"===e.controlPosition?(s=this._location.x,this._location.x+=3*(r+a)):(s=this._location.x2-(3*(r+a)-a),this._location.x2-=3*(r+a));var l=this._location.y,d={zlevel:this.getZlevelBase(),z:this.getZBase()+1,style:{iconType:"timelineControl",symbol:"last",x:s,y:l,width:r,height:r,brushType:"stroke",color:o.normal.color,strokeColor:o.normal.color,lineWidth:i.width},highlightStyle:{color:o.emphasis.color,strokeColor:o.emphasis.color,lineWidth:i.width+1},clickable:!0};this._ctrLastShape=new n(d),this._ctrLastShape.onclick=function(){t.last()},this.shapeList.push(this._ctrLastShape),s+=r+a,this._ctrPlayShape=new n(h.clone(d)),this._ctrPlayShape.style.brushType="fill",this._ctrPlayShape.style.symbol="play",this._ctrPlayShape.style.status=this.timelineOption.autoPlay?"playing":"stop",this._ctrPlayShape.style.x=s,this._ctrPlayShape.onclick=function(){"stop"===t._ctrPlayShape.style.status?t.play():t.stop()},this.shapeList.push(this._ctrPlayShape),s+=r+a,this._ctrNextShape=new n(h.clone(d)),this._ctrNextShape.style.symbol="next",this._ctrNextShape.style.x=s,this._ctrNextShape.onclick=function(){t.next()},this.shapeList.push(this._ctrNextShape)}},_buildChain:function(){var t=this.timelineOption,e=t.lineStyle;this._timelineShae={zlevel:this.getZlevelBase(),z:this.getZBase(),style:{x:this._location.x,y:this.subPixelOptimize(this._location.y,e.width),width:this._location.x2-this._location.x,height:this._location.height,chainPoint:this._chainPoint,brushType:"both",strokeColor:e.color,lineWidth:e.width,lineType:e.type},hoverable:!1,clickable:!0,onclick:this._onclick},this._timelineShae=new r(this._timelineShae),this.shapeList.push(this._timelineShae)},_buildHandle:function(){var t=this._chainPoint[this.currentIndex],e=t.symbolSize+1;
e=5>e?5:e,this._handleShape={zlevel:this.getZlevelBase(),z:this.getZBase()+1,hoverable:!1,draggable:!0,style:{iconType:"diamond",n:t.n,x:t.x-e,y:this._location.y+this._location.height/4-e,width:2*e,height:2*e,brushType:"both",textPosition:"specific",textX:t.x,textY:this._location.y-this._location.height/4,textAlign:"center",textBaseline:"middle"},highlightStyle:{},ondrift:this._ondrift,ondragend:this._ondragend},this._handleShape=new n(this._handleShape),this.shapeList.push(this._handleShape)},_syncHandleShape:function(){if(this.timelineOption.show){var t=this.timelineOption,e=t.checkpointStyle,i=this._chainPoint[this.currentIndex];this._handleShape.style.text=e.label.show?i.name:"",this._handleShape.style.textFont=i.textFont,this._handleShape.style.n=i.n,"auto"===e.symbol?this._handleShape.style.iconType="none"!=i.symbol?i.symbol:"diamond":(this._handleShape.style.iconType=e.symbol,e.symbol.match("star")&&(this._handleShape.style.n=e.symbol.replace("star","")-0||5,this._handleShape.style.iconType="star"));var o;"auto"===e.symbolSize?(o=i.symbolSize+2,o=5>o?5:o):o=e.symbolSize-0,this._handleShape.style.color="auto"===e.color?i.color?i.color:t.controlStyle.emphasis.color:e.color,this._handleShape.style.textColor="auto"===e.label.textStyle.color?this._handleShape.style.color:e.label.textStyle.color,this._handleShape.highlightStyle.strokeColor=this._handleShape.style.strokeColor="auto"===e.borderColor?i.borderColor?i.borderColor:"#fff":e.borderColor,this._handleShape.style.lineWidth="auto"===e.borderWidth?i.borderWidth?i.borderWidth:0:e.borderWidth-0,this._handleShape.highlightStyle.lineWidth=this._handleShape.style.lineWidth+1,this.zr.animate(this._handleShape.id,"style").when(500,{x:i.x-o,textX:i.x,y:this._location.y+this._location.height/4-o,width:2*o,height:2*o}).start("ExponentialOut")}},_findChainIndex:function(t){var e=this._chainPoint,i=e.length;if(t<=e[0].x)return 0;if(t>=e[i-1].x)return i-1;for(var o=0;i-1>o;o++)if(t>=e[o].x&&t<=e[o+1].x)return Math.abs(t-e[o].x)<Math.abs(t-e[o+1].x)?o:o+1},__onclick:function(t){var e=d.getX(t.event),i=this._findChainIndex(e);return i===this.currentIndex?!0:(this.currentIndex=i,this.timelineOption.autoPlay&&this.stop(),clearTimeout(this.playTicket),void this._onFrame())},__ondrift:function(t,e){this.timelineOption.autoPlay&&this.stop();var i,o=this._chainPoint,s=o.length;t.style.x+e<=o[0].x-o[0].symbolSize?(t.style.x=o[0].x-o[0].symbolSize,i=0):t.style.x+e>=o[s-1].x-o[s-1].symbolSize?(t.style.x=o[s-1].x-o[s-1].symbolSize,i=s-1):(t.style.x+=e,i=this._findChainIndex(t.style.x));var n=o[i],r=n.symbolSize+2;if(t.style.iconType=n.symbol,t.style.n=n.n,t.style.textX=t.style.x+r/2,t.style.y=this._location.y+this._location.height/4-r,t.style.width=2*r,t.style.height=2*r,t.style.text=n.name,i===this.currentIndex)return!0;if(this.currentIndex=i,this.timelineOption.realtime){clearTimeout(this.playTicket);var a=this;this.playTicket=setTimeout(function(){a._setCurrentOption()},200)}return!0},__ondragend:function(){this.isDragend=!0},ondragend:function(t,e){this.isDragend&&t.target&&(!this.timelineOption.realtime&&this._setCurrentOption(),e.dragOut=!0,e.dragIn=!0,e.needRefresh=!1,this.isDragend=!1,this._syncHandleShape())},last:function(){return this.timelineOption.autoPlay&&this.stop(),this.currentIndex-=1,this.currentIndex<0&&(this.currentIndex=this.timelineOption.data.length-1),this._onFrame(),this.currentIndex},next:function(){return this.timelineOption.autoPlay&&this.stop(),this.currentIndex+=1,this.currentIndex>=this.timelineOption.data.length&&(this.currentIndex=0),this._onFrame(),this.currentIndex},play:function(t,e){return this._ctrPlayShape&&"playing"!=this._ctrPlayShape.style.status&&(this._ctrPlayShape.style.status="playing",this.zr.modShape(this._ctrPlayShape.id),this.zr.refreshNextFrame()),this.timelineOption.autoPlay=null!=e?e:!0,this.timelineOption.autoPlay||clearTimeout(this.playTicket),this.currentIndex=null!=t?t:this.currentIndex+1,this.currentIndex>=this.timelineOption.data.length&&(this.currentIndex=0),this._onFrame(),this.currentIndex},stop:function(){return this._ctrPlayShape&&"stop"!=this._ctrPlayShape.style.status&&(this._ctrPlayShape.style.status="stop",this.zr.modShape(this._ctrPlayShape.id),this.zr.refreshNextFrame()),this.timelineOption.autoPlay=!1,clearTimeout(this.playTicket),this.currentIndex},resize:function(){this.timelineOption.show&&(this.clear(),this._buildShape(),this._syncHandleShape())},setTheme:function(t){this.timelineOption=this.reformOption(h.clone(this.option.timeline)),this.timelineOption.label.textStyle=this.getTextStyle(this.timelineOption.label.textStyle),this.timelineOption.checkpointStyle.label.textStyle=this.getTextStyle(this.timelineOption.checkpointStyle.label.textStyle),this.myChart.canvasSupported||(this.timelineOption.realtime=!1),this.timelineOption.show&&t&&(this.clear(),this._buildShape(),this._syncHandleShape())},onbeforDispose:function(){clearTimeout(this.playTicket)}},n.prototype.iconLibrary.timelineControl=i,h.inherits(e,o),t("../component").define("timeline",e),e}),i("echarts/component/legend",["require","./base","zrender/shape/Text","zrender/shape/Rectangle","zrender/shape/Sector","../util/shape/Icon","../util/shape/Candle","../config","zrender/tool/util","zrender/tool/area","../component"],function(t){function e(t,e,o,s,n){if(!this.query(s,"legend.data"))return void console.error("option.legend.data has not been defined.");i.call(this,t,e,o,s,n);var r=this;r._legendSelected=function(t){r.__legendSelected(t)},r._dispatchHoverLink=function(t){return r.__dispatchHoverLink(t)},this._colorIndex=0,this._colorMap={},this._selectedMap={},this._hasDataMap={},this.refresh(s)}var i=t("./base"),o=t("zrender/shape/Text"),s=t("zrender/shape/Rectangle"),n=t("zrender/shape/Sector"),r=t("../util/shape/Icon"),a=t("../util/shape/Candle"),h=t("../config");h.legend={zlevel:0,z:4,show:!0,orient:"horizontal",x:"center",y:"top",backgroundColor:"rgba(0,0,0,0)",borderColor:"#ccc",borderWidth:0,padding:5,itemGap:10,itemWidth:20,itemHeight:14,textStyle:{color:"#333"},selectedMode:!0};var l=t("zrender/tool/util"),d=t("zrender/tool/area");e.prototype={type:h.COMPONENT_TYPE_LEGEND,_buildShape:function(){if(this.legendOption.show){this._itemGroupLocation=this._getItemGroupLocation(),this._buildBackground(),this._buildItem();for(var t=0,e=this.shapeList.length;e>t;t++)this.zr.addShape(this.shapeList[t])}},_buildItem:function(){var t,e,i,s,n,a,h,c,p=this.legendOption.data,u=p.length,g=this.legendOption.textStyle,f=this.zr.getWidth(),m=this.zr.getHeight(),_=this._itemGroupLocation.x,y=this._itemGroupLocation.y,x=this.legendOption.itemWidth,v=this.legendOption.itemHeight,b=this.legendOption.itemGap;"vertical"===this.legendOption.orient&&"right"===this.legendOption.x&&(_=this._itemGroupLocation.x+this._itemGroupLocation.width-x);for(var S=0;u>S;S++)n=l.merge(p[S].textStyle||{},g),a=this.getFont(n),t=this._getName(p[S]),h=this._getFormatterName(t),""!==t?(e=p[S].icon||this._getSomethingByName(t).type,c=this.getColor(t),"horizontal"===this.legendOption.orient?200>f-_&&x+5+d.getTextWidth(h,a)+(S===u-1||""===p[S+1]?0:b)>=f-_&&(_=this._itemGroupLocation.x,y+=v+b):200>m-y&&v+(S===u-1||""===p[S+1]?0:b)>=m-y&&("right"===this.legendOption.x?_-=this._itemGroupLocation.maxWidth+b:_+=this._itemGroupLocation.maxWidth+b,y=this._itemGroupLocation.y),i=this._getItemShapeByType(_,y,x,v,this._selectedMap[t]&&this._hasDataMap[t]?c:"#ccc",e,c),i._name=t,i=new r(i),s={zlevel:this.getZlevelBase(),z:this.getZBase(),style:{x:_+x+5,y:y+v/2,color:this._selectedMap[t]?"auto"===n.color?c:n.color:"#ccc",text:h,textFont:a,textBaseline:"middle"},highlightStyle:{color:c,brushType:"fill"},hoverable:!!this.legendOption.selectedMode,clickable:!!this.legendOption.selectedMode},"vertical"===this.legendOption.orient&&"right"===this.legendOption.x&&(s.style.x-=x+10,s.style.textAlign="right"),s._name=t,s=new o(s),this.legendOption.selectedMode&&(i.onclick=s.onclick=this._legendSelected,i.onmouseover=s.onmouseover=this._dispatchHoverLink,i.hoverConnect=s.id,s.hoverConnect=i.id),this.shapeList.push(i),this.shapeList.push(s),"horizontal"===this.legendOption.orient?_+=x+5+d.getTextWidth(h,a)+b:y+=v+b):"horizontal"===this.legendOption.orient?(_=this._itemGroupLocation.x,y+=v+b):("right"===this.legendOption.x?_-=this._itemGroupLocation.maxWidth+b:_+=this._itemGroupLocation.maxWidth+b,y=this._itemGroupLocation.y);"horizontal"===this.legendOption.orient&&"center"===this.legendOption.x&&y!=this._itemGroupLocation.y&&this._mLineOptimize()},_getName:function(t){return"undefined"!=typeof t.name?t.name:t},_getFormatterName:function(t){var e,i=this.legendOption.formatter;return e="function"==typeof i?i.call(this.myChart,t):"string"==typeof i?i.replace("{name}",t):t},_getFormatterNameFromData:function(t){var e=this._getName(t);return this._getFormatterName(e)},_mLineOptimize:function(){for(var t=[],e=this._itemGroupLocation.x,i=2,o=this.shapeList.length;o>i;i++)this.shapeList[i].style.x===e?t.push((this._itemGroupLocation.width-(this.shapeList[i-1].style.x+d.getTextWidth(this.shapeList[i-1].style.text,this.shapeList[i-1].style.textFont)-e))/2):i===o-1&&t.push((this._itemGroupLocation.width-(this.shapeList[i].style.x+d.getTextWidth(this.shapeList[i].style.text,this.shapeList[i].style.textFont)-e))/2);for(var s=-1,i=1,o=this.shapeList.length;o>i;i++)this.shapeList[i].style.x===e&&s++,0!==t[s]&&(this.shapeList[i].style.x+=t[s])},_buildBackground:function(){var t=this.reformCssArray(this.legendOption.padding);this.shapeList.push(new s({zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{x:this._itemGroupLocation.x-t[3],y:this._itemGroupLocation.y-t[0],width:this._itemGroupLocation.width+t[3]+t[1],height:this._itemGroupLocation.height+t[0]+t[2],brushType:0===this.legendOption.borderWidth?"fill":"both",color:this.legendOption.backgroundColor,strokeColor:this.legendOption.borderColor,lineWidth:this.legendOption.borderWidth}}))},_getItemGroupLocation:function(){var t=this.legendOption.data,e=t.length,i=this.legendOption.itemGap,o=this.legendOption.itemWidth+5,s=this.legendOption.itemHeight,n=this.legendOption.textStyle,r=this.getFont(n),a=0,h=0,c=this.reformCssArray(this.legendOption.padding),p=this.zr.getWidth()-c[1]-c[3],u=this.zr.getHeight()-c[0]-c[2],g=0,f=0;if("horizontal"===this.legendOption.orient){h=s;for(var m=0;e>m;m++)if(""!==this._getName(t[m])){var _=d.getTextWidth(this._getFormatterNameFromData(t[m]),t[m].textStyle?this.getFont(l.merge(t[m].textStyle||{},n)):r);g+o+_+i>p?(g-=i,a=Math.max(a,g),h+=s+i,g=0):(g+=o+_+i,a=Math.max(a,g-i))}else g-=i,a=Math.max(a,g),h+=s+i,g=0}else{for(var m=0;e>m;m++)f=Math.max(f,d.getTextWidth(this._getFormatterNameFromData(t[m]),t[m].textStyle?this.getFont(l.merge(t[m].textStyle||{},n)):r));f+=o,a=f;for(var m=0;e>m;m++)""!==this._getName(t[m])?g+s+i>u?(a+=f+i,g-=i,h=Math.max(h,g),g=0):(g+=s+i,h=Math.max(h,g-i)):(a+=f+i,g-=i,h=Math.max(h,g),g=0)}p=this.zr.getWidth(),u=this.zr.getHeight();var y;switch(this.legendOption.x){case"center":y=Math.floor((p-a)/2);break;case"left":y=c[3]+this.legendOption.borderWidth;break;case"right":y=p-a-c[1]-c[3]-2*this.legendOption.borderWidth;break;default:y=this.parsePercent(this.legendOption.x,p)}var x;switch(this.legendOption.y){case"top":x=c[0]+this.legendOption.borderWidth;break;case"bottom":x=u-h-c[0]-c[2]-2*this.legendOption.borderWidth;break;case"center":x=Math.floor((u-h)/2);break;default:x=this.parsePercent(this.legendOption.y,u)}return{x:y,y:x,width:a,height:h,maxWidth:f}},_getSomethingByName:function(t){for(var e,i=this.option.series,o=0,s=i.length;s>o;o++){if(i[o].name===t)return{type:i[o].type,series:i[o],seriesIndex:o,data:null,dataIndex:-1};if(i[o].type===h.CHART_TYPE_PIE||i[o].type===h.CHART_TYPE_RADAR||i[o].type===h.CHART_TYPE_CHORD||i[o].type===h.CHART_TYPE_FORCE||i[o].type===h.CHART_TYPE_FUNNEL||i[o].type===h.CHART_TYPE_TREEMAP){e=i[o].categories||i[o].data||i[o].nodes;for(var n=0,r=e.length;r>n;n++)if(e[n].name===t)return{type:i[o].type,series:i[o],seriesIndex:o,data:e[n],dataIndex:n}}}return{type:"bar",series:null,seriesIndex:-1,data:null,dataIndex:-1}},_getItemShapeByType:function(t,e,i,o,s,n,r){var a,l="#ccc"===s?r:s,d={zlevel:this.getZlevelBase(),z:this.getZBase(),style:{iconType:"legendicon"+n,x:t,y:e,width:i,height:o,color:s,strokeColor:s,lineWidth:2},highlightStyle:{color:l,strokeColor:l,lineWidth:1},hoverable:this.legendOption.selectedMode,clickable:this.legendOption.selectedMode};if(n.match("image")){var a=n.replace(new RegExp("^image:\\/\\/"),"");n="image"}switch(n){case"line":d.style.brushType="stroke",d.highlightStyle.lineWidth=3;break;case"radar":case"venn":case"treemap":case"scatter":d.highlightStyle.lineWidth=3;break;case"k":d.style.brushType="both",d.highlightStyle.lineWidth=3,d.highlightStyle.color=d.style.color=this.deepQuery([this.ecTheme,h],"k.itemStyle.normal.color")||"#fff",d.style.strokeColor="#ccc"!=s?this.deepQuery([this.ecTheme,h],"k.itemStyle.normal.lineStyle.color")||"#ff3200":s;break;case"image":d.style.iconType="image",d.style.image=a,"#ccc"===s&&(d.style.opacity=.5)}return d},__legendSelected:function(t){var e=t.target._name;if("single"===this.legendOption.selectedMode)for(var i in this._selectedMap)this._selectedMap[i]=!1;this._selectedMap[e]=!this._selectedMap[e],this.messageCenter.dispatch(h.EVENT.LEGEND_SELECTED,t.event,{selected:this._selectedMap,target:e},this.myChart)},__dispatchHoverLink:function(t){this.messageCenter.dispatch(h.EVENT.LEGEND_HOVERLINK,t.event,{target:t.target._name},this.myChart)},refresh:function(t){if(t){this.option=t||this.option,this.option.legend=this.reformOption(this.option.legend),this.legendOption=this.option.legend;var e,i,o,s,n=this.legendOption.data||[];if(this.legendOption.selected)for(var r in this.legendOption.selected)this._selectedMap[r]="undefined"!=typeof this._selectedMap[r]?this._selectedMap[r]:this.legendOption.selected[r];for(var a=0,l=n.length;l>a;a++)e=this._getName(n[a]),""!==e&&(i=this._getSomethingByName(e),i.series?(this._hasDataMap[e]=!0,s=!i.data||i.type!==h.CHART_TYPE_PIE&&i.type!==h.CHART_TYPE_FORCE&&i.type!==h.CHART_TYPE_FUNNEL?[i.series]:[i.data,i.series],o=this.getItemStyleColor(this.deepQuery(s,"itemStyle.normal.color"),i.seriesIndex,i.dataIndex,i.data),o&&i.type!=h.CHART_TYPE_K&&this.setColor(e,o),this._selectedMap[e]=null!=this._selectedMap[e]?this._selectedMap[e]:!0):this._hasDataMap[e]=!1)}this.clear(),this._buildShape()},getRelatedAmount:function(t){for(var e,i=0,o=this.option.series,s=0,n=o.length;n>s;s++)if(o[s].name===t&&i++,o[s].type===h.CHART_TYPE_PIE||o[s].type===h.CHART_TYPE_RADAR||o[s].type===h.CHART_TYPE_CHORD||o[s].type===h.CHART_TYPE_FORCE||o[s].type===h.CHART_TYPE_FUNNEL){e=o[s].type!=h.CHART_TYPE_FORCE?o[s].data:o[s].categories;for(var r=0,a=e.length;a>r;r++)e[r].name===t&&"-"!=e[r].value&&i++}return i},setColor:function(t,e){this._colorMap[t]=e},getColor:function(t){return this._colorMap[t]||(this._colorMap[t]=this.zr.getColor(this._colorIndex++)),this._colorMap[t]},hasColor:function(t){return this._colorMap[t]?this._colorMap[t]:!1},add:function(t,e){for(var i=this.legendOption.data,o=0,s=i.length;s>o;o++)if(this._getName(i[o])===t)return;this.legendOption.data.push(t),this.setColor(t,e),this._selectedMap[t]=!0,this._hasDataMap[t]=!0},del:function(t){for(var e=this.legendOption.data,i=0,o=e.length;o>i;i++)if(this._getName(e[i])===t)return this.legendOption.data.splice(i,1)},getItemShape:function(t){if(null!=t)for(var e,i=0,o=this.shapeList.length;o>i;i++)if(e=this.shapeList[i],e._name===t&&"text"!=e.type)return e},setItemShape:function(t,e){for(var i,o=0,s=this.shapeList.length;s>o;o++)i=this.shapeList[o],i._name===t&&"text"!=i.type&&(this._selectedMap[t]||(e.style.color="#ccc",e.style.strokeColor="#ccc"),this.zr.modShape(i.id,e))},isSelected:function(t){return"undefined"!=typeof this._selectedMap[t]?this._selectedMap[t]:!0},getSelectedMap:function(){return this._selectedMap},setSelected:function(t,e){if("single"===this.legendOption.selectedMode)for(var i in this._selectedMap)this._selectedMap[i]=!1;this._selectedMap[t]=e,this.messageCenter.dispatch(h.EVENT.LEGEND_SELECTED,null,{selected:this._selectedMap,target:t},this.myChart)},onlegendSelected:function(t,e){var i=t.selected;for(var o in i)this._selectedMap[o]!=i[o]&&(e.needRefresh=!0),this._selectedMap[o]=i[o]}};var c={line:function(t,e){var i=e.height/2;t.moveTo(e.x,e.y+i),t.lineTo(e.x+e.width,e.y+i)},pie:function(t,e){var i=e.x,o=e.y,s=e.width,r=e.height;n.prototype.buildPath(t,{x:i+s/2,y:o+r+2,r:r,r0:6,startAngle:45,endAngle:135})},eventRiver:function(t,e){var i=e.x,o=e.y,s=e.width,n=e.height;t.moveTo(i,o+n),t.bezierCurveTo(i+s,o+n,i,o+4,i+s,o+4),t.lineTo(i+s,o),t.bezierCurveTo(i,o,i+s,o+n-4,i,o+n-4),t.lineTo(i,o+n)},k:function(t,e){var i=e.x,o=e.y,s=e.width,n=e.height;a.prototype.buildPath(t,{x:i+s/2,y:[o+1,o+1,o+n-6,o+n],width:s-6})},bar:function(t,e){var i=e.x,o=e.y+1,s=e.width,n=e.height-2,r=3;t.moveTo(i+r,o),t.lineTo(i+s-r,o),t.quadraticCurveTo(i+s,o,i+s,o+r),t.lineTo(i+s,o+n-r),t.quadraticCurveTo(i+s,o+n,i+s-r,o+n),t.lineTo(i+r,o+n),t.quadraticCurveTo(i,o+n,i,o+n-r),t.lineTo(i,o+r),t.quadraticCurveTo(i,o,i+r,o)},force:function(t,e){r.prototype.iconLibrary.circle(t,e)},radar:function(t,e){var i=6,o=e.x+e.width/2,s=e.y+e.height/2,n=e.height/2,r=2*Math.PI/i,a=-Math.PI/2,h=o+n*Math.cos(a),l=s+n*Math.sin(a);t.moveTo(h,l),a+=r;for(var d=0,c=i-1;c>d;d++)t.lineTo(o+n*Math.cos(a),s+n*Math.sin(a)),a+=r;t.lineTo(h,l)}};c.chord=c.pie,c.map=c.bar;for(var p in c)r.prototype.iconLibrary["legendicon"+p]=c[p];return l.inherits(e,i),t("../component").define("legend",e),e}),i("zrender/loadingEffect/Bubble",["require","./Base","../tool/util","../tool/color","../shape/Circle"],function(t){function e(t){i.call(this,t)}var i=t("./Base"),o=t("../tool/util"),s=t("../tool/color"),n=t("../shape/Circle");return o.inherits(e,i),e.prototype._start=function(t,e){for(var i=o.merge(this.options,{textStyle:{color:"#888"},backgroundColor:"rgba(250, 250, 250, 0.8)",effect:{n:50,lineWidth:2,brushType:"stroke",color:"random",timeInterval:100}}),r=this.createTextShape(i.textStyle),a=this.createBackgroundShape(i.backgroundColor),h=i.effect,l=h.n,d=h.brushType,c=h.lineWidth,p=[],u=this.canvasWidth,g=this.canvasHeight,f=0;l>f;f++){var m="random"==h.color?s.alpha(s.random(),.3):h.color;p[f]=new n({highlightStyle:{x:Math.ceil(Math.random()*u),y:Math.ceil(Math.random()*g),r:Math.ceil(40*Math.random()),brushType:d,color:m,strokeColor:m,lineWidth:c},animationY:Math.ceil(20*Math.random())})}return setInterval(function(){t(a);for(var i=0;l>i;i++){var o=p[i].highlightStyle;o.y-p[i].animationY+o.r<=0&&(p[i].highlightStyle.y=g+o.r,p[i].highlightStyle.x=Math.ceil(Math.random()*u)),p[i].highlightStyle.y-=p[i].animationY,t(p[i])}t(r),e()},h.timeInterval)},e}),i("zrender/loadingEffect/Ring",["require","./Base","../tool/util","../tool/color","../shape/Ring","../shape/Sector"],function(t){function e(t){i.call(this,t)}var i=t("./Base"),o=t("../tool/util"),s=t("../tool/color"),n=t("../shape/Ring"),r=t("../shape/Sector");return o.inherits(e,i),e.prototype._start=function(t,e){var i=o.merge(this.options,{textStyle:{color:"#07a"},backgroundColor:"rgba(250, 250, 250, 0.8)",effect:{x:this.canvasWidth/2,y:this.canvasHeight/2,r0:60,r:100,color:"#bbdcff",brushType:"fill",textPosition:"inside",textFont:"normal 30px verdana",textColor:"rgba(30, 144, 255, 0.6)",timeInterval:100}}),a=i.effect,h=i.textStyle;null==h.x&&(h.x=a.x),null==h.y&&(h.y=a.y+(a.r0+a.r)/2-5);for(var l=this.createTextShape(i.textStyle),d=this.createBackgroundShape(i.backgroundColor),c=a.x,p=a.y,u=a.r0+6,g=a.r-6,f=a.color,m=s.lift(f,.1),_=new n({highlightStyle:o.clone(a)}),y=[],x=s.getGradientColors(["#ff6400","#ffe100","#97ff00"],25),v=15,b=240,S=0;16>S;S++)y.push(new r({highlightStyle:{x:c,y:p,r0:u,r:g,startAngle:b-v,endAngle:b,brushType:"fill",color:m},_color:s.getLinearGradient(c+u*Math.cos(b,!0),p-u*Math.sin(b,!0),c+u*Math.cos(b-v,!0),p-u*Math.sin(b-v,!0),[[0,x[2*S]],[1,x[2*S+1]]])})),b-=v;b=360;for(var S=0;4>S;S++)y.push(new r({highlightStyle:{x:c,y:p,r0:u,r:g,startAngle:b-v,endAngle:b,brushType:"fill",color:m},_color:s.getLinearGradient(c+u*Math.cos(b,!0),p-u*Math.sin(b,!0),c+u*Math.cos(b-v,!0),p-u*Math.sin(b-v,!0),[[0,x[2*S+32]],[1,x[2*S+33]]])})),b-=v;var T=0;if(null!=i.progress){t(d),T=100*this.adjust(i.progress,[0,1]).toFixed(2)/5,_.highlightStyle.text=5*T+"%",t(_);for(var S=0;20>S;S++)y[S].highlightStyle.color=T>S?y[S]._color:m,t(y[S]);return t(l),void e()}return setInterval(function(){t(d),T+=T>=20?-20:1,t(_);for(var i=0;20>i;i++)y[i].highlightStyle.color=T>i?y[i]._color:m,t(y[i]);t(l),e()},a.timeInterval)},e}),i("zrender/loadingEffect/Spin",["require","./Base","../tool/util","../tool/color","../tool/area","../shape/Sector"],function(t){function e(t){i.call(this,t)}var i=t("./Base"),o=t("../tool/util"),s=t("../tool/color"),n=t("../tool/area"),r=t("../shape/Sector");return o.inherits(e,i),e.prototype._start=function(t,e){var i=o.merge(this.options,{textStyle:{color:"#fff",textAlign:"start"},backgroundColor:"rgba(0, 0, 0, 0.8)"}),a=this.createTextShape(i.textStyle),h=10,l=n.getTextWidth(a.highlightStyle.text,a.highlightStyle.textFont),d=n.getTextHeight(a.highlightStyle.text,a.highlightStyle.textFont),c=o.merge(this.options.effect||{},{r0:9,r:15,n:18,color:"#fff",timeInterval:100}),p=this.getLocation(this.options.textStyle,l+h+2*c.r,Math.max(2*c.r,d));c.x=p.x+c.r,c.y=a.highlightStyle.y=p.y+p.height/2,a.highlightStyle.x=c.x+c.r+h;for(var u=this.createBackgroundShape(i.backgroundColor),g=c.n,f=c.x,m=c.y,_=c.r0,y=c.r,x=c.color,v=[],b=Math.round(180/g),S=0;g>S;S++)v[S]=new r({highlightStyle:{x:f,y:m,r0:_,r:y,startAngle:b*S*2,endAngle:b*S*2+b,color:s.alpha(x,(S+1)/g),brushType:"fill"}});var T=[0,f,m];return setInterval(function(){t(u),T[0]-=.3;for(var i=0;g>i;i++)v[i].rotation=T,t(v[i]);t(a),e()},c.timeInterval)},e}),i("zrender/loadingEffect/Whirling",["require","./Base","../tool/util","../tool/area","../shape/Ring","../shape/Droplet","../shape/Circle"],function(t){function e(t){i.call(this,t)}var i=t("./Base"),o=t("../tool/util"),s=t("../tool/area"),n=t("../shape/Ring"),r=t("../shape/Droplet"),a=t("../shape/Circle");return o.inherits(e,i),e.prototype._start=function(t,e){var i=o.merge(this.options,{textStyle:{color:"#888",textAlign:"start"},backgroundColor:"rgba(250, 250, 250, 0.8)"}),h=this.createTextShape(i.textStyle),l=10,d=s.getTextWidth(h.highlightStyle.text,h.highlightStyle.textFont),c=s.getTextHeight(h.highlightStyle.text,h.highlightStyle.textFont),p=o.merge(this.options.effect||{},{r:18,colorIn:"#fff",colorOut:"#555",colorWhirl:"#6cf",timeInterval:50}),u=this.getLocation(this.options.textStyle,d+l+2*p.r,Math.max(2*p.r,c));p.x=u.x+p.r,p.y=h.highlightStyle.y=u.y+u.height/2,h.highlightStyle.x=p.x+p.r+l;var g=this.createBackgroundShape(i.backgroundColor),f=new r({highlightStyle:{a:Math.round(p.r/2),b:Math.round(p.r-p.r/6),brushType:"fill",color:p.colorWhirl}}),m=new a({highlightStyle:{r:Math.round(p.r/6),brushType:"fill",color:p.colorIn}}),_=new n({highlightStyle:{r0:Math.round(p.r-p.r/3),r:p.r,brushType:"fill",color:p.colorOut}}),y=[0,p.x,p.y];return f.highlightStyle.x=m.highlightStyle.x=_.highlightStyle.x=y[1],f.highlightStyle.y=m.highlightStyle.y=_.highlightStyle.y=y[2],setInterval(function(){t(g),t(_),y[0]-=.3,f.rotation=y,t(f),t(m),t(h),e()},p.timeInterval)},e}),i("echarts/theme/macarons",[],function(){var t={color:["#2ec7c9","#b6a2de","#5ab1ef","#ffb980","#d87a80","#8d98b3","#e5cf0d","#97b552","#95706d","#dc69aa","#07a2a4","#9a7fd1","#588dd5","#f5994e","#c05050","#59678c","#c9ab00","#7eb00a","#6f5553","#c14089"],title:{textStyle:{fontWeight:"normal",color:"#008acd"}},dataRange:{itemWidth:15,color:["#5ab1ef","#e0ffff"]},toolbox:{color:["#1e90ff","#1e90ff","#1e90ff","#1e90ff"],effectiveColor:"#ff4500"},tooltip:{backgroundColor:"rgba(50,50,50,0.5)",axisPointer:{type:"line",lineStyle:{color:"#008acd"},crossStyle:{color:"#008acd"},shadowStyle:{color:"rgba(200,200,200,0.2)"}}},dataZoom:{dataBackgroundColor:"#efefff",fillerColor:"rgba(182,162,222,0.2)",handleColor:"#008acd"},grid:{borderColor:"#eee"},categoryAxis:{axisLine:{lineStyle:{color:"#008acd"}},splitLine:{lineStyle:{color:["#eee"]}}},valueAxis:{axisLine:{lineStyle:{color:"#008acd"}},splitArea:{show:!0,areaStyle:{color:["rgba(250,250,250,0.1)","rgba(200,200,200,0.1)"]}},splitLine:{lineStyle:{color:["#eee"]}}},polar:{axisLine:{lineStyle:{color:"#ddd"}},splitArea:{show:!0,areaStyle:{color:["rgba(250,250,250,0.2)","rgba(200,200,200,0.2)"]}},splitLine:{lineStyle:{color:"#ddd"}}},timeline:{lineStyle:{color:"#008acd"},controlStyle:{normal:{color:"#008acd"},emphasis:{color:"#008acd"}},symbol:"emptyCircle",symbolSize:3},bar:{itemStyle:{normal:{barBorderRadius:5},emphasis:{barBorderRadius:5}}},line:{smooth:!0,symbol:"emptyCircle",symbolSize:3},k:{itemStyle:{normal:{color:"#d87a80",color0:"#2ec7c9",lineStyle:{color:"#d87a80",color0:"#2ec7c9"}}}},scatter:{symbol:"circle",symbolSize:4},radar:{symbol:"emptyCircle",symbolSize:3},map:{itemStyle:{normal:{areaStyle:{color:"#ddd"},label:{textStyle:{color:"#d87a80"}}},emphasis:{areaStyle:{color:"#fe994e"}}}},force:{itemStyle:{normal:{linkStyle:{color:"#1e90ff"}}}},chord:{itemStyle:{normal:{borderWidth:1,borderColor:"rgba(128, 128, 128, 0.5)",chordStyle:{lineStyle:{color:"rgba(128, 128, 128, 0.5)"}}},emphasis:{borderWidth:1,borderColor:"rgba(128, 128, 128, 0.5)",chordStyle:{lineStyle:{color:"rgba(128, 128, 128, 0.5)"}}}}},gauge:{axisLine:{lineStyle:{color:[[.2,"#2ec7c9"],[.8,"#5ab1ef"],[1,"#d87a80"]],width:10}},axisTick:{splitNumber:10,length:15,lineStyle:{color:"auto"}},splitLine:{length:22,lineStyle:{color:"auto"}},pointer:{width:5}},textStyle:{fontFamily:"微软雅黑, Arial, Verdana, sans-serif"}};return t}),i("echarts/theme/infographic",[],function(){var t={color:["#C1232B","#B5C334","#FCCE10","#E87C25","#27727B","#FE8463","#9BCA63","#FAD860","#F3A43B","#60C0DD","#D7504B","#C6E579","#F4E001","#F0805A","#26C0C0"],title:{textStyle:{fontWeight:"normal",color:"#27727B"}},dataRange:{x:"right",y:"center",itemWidth:5,itemHeight:25,color:["#C1232B","#FCCE10"]},toolbox:{color:["#C1232B","#B5C334","#FCCE10","#E87C25","#27727B","#FE8463","#9BCA63","#FAD860","#F3A43B","#60C0DD"],effectiveColor:"#ff4500"},tooltip:{backgroundColor:"rgba(50,50,50,0.5)",axisPointer:{type:"line",lineStyle:{color:"#27727B",type:"dashed"},crossStyle:{color:"#27727B"},shadowStyle:{color:"rgba(200,200,200,0.3)"}}},dataZoom:{dataBackgroundColor:"rgba(181,195,52,0.3)",fillerColor:"rgba(181,195,52,0.2)",handleColor:"#27727B"},grid:{borderWidth:0},categoryAxis:{axisLine:{lineStyle:{color:"#27727B"}},splitLine:{show:!1}},valueAxis:{axisLine:{show:!1},splitArea:{show:!1},splitLine:{lineStyle:{color:["#ccc"],type:"dashed"}}},polar:{axisLine:{lineStyle:{color:"#ddd"}},splitArea:{show:!0,areaStyle:{color:["rgba(250,250,250,0.2)","rgba(200,200,200,0.2)"]}},splitLine:{lineStyle:{color:"#ddd"}}},timeline:{lineStyle:{color:"#27727B"},controlStyle:{normal:{color:"#27727B"},emphasis:{color:"#27727B"}},symbol:"emptyCircle",symbolSize:3},line:{itemStyle:{normal:{borderWidth:2,borderColor:"#fff",lineStyle:{width:3}},emphasis:{borderWidth:0}},symbol:"circle",symbolSize:3.5},k:{itemStyle:{normal:{color:"#C1232B",color0:"#B5C334",lineStyle:{width:1,color:"#C1232B",color0:"#B5C334"}}}},scatter:{itemStyle:{normal:{borderWidth:1,borderColor:"rgba(200,200,200,0.5)"},emphasis:{borderWidth:0}},symbol:"star4",symbolSize:4},radar:{symbol:"emptyCircle",symbolSize:3},map:{itemStyle:{normal:{areaStyle:{color:"#ddd"},label:{textStyle:{color:"#C1232B"}}},emphasis:{areaStyle:{color:"#fe994e"},label:{textStyle:{color:"rgb(100,0,0)"}}}}},force:{itemStyle:{normal:{linkStyle:{color:"#27727B"}}}},chord:{itemStyle:{normal:{borderWidth:1,borderColor:"rgba(128, 128, 128, 0.5)",chordStyle:{lineStyle:{color:"rgba(128, 128, 128, 0.5)"}}},emphasis:{borderWidth:1,borderColor:"rgba(128, 128, 128, 0.5)",chordStyle:{lineStyle:{color:"rgba(128, 128, 128, 0.5)"}}}}},gauge:{center:["50%","80%"],radius:"100%",startAngle:180,endAngle:0,axisLine:{show:!0,lineStyle:{color:[[.2,"#B5C334"],[.8,"#27727B"],[1,"#C1232B"]],width:"40%"}},axisTick:{splitNumber:2,length:5,lineStyle:{color:"#fff"}},axisLabel:{textStyle:{color:"#fff",fontWeight:"bolder"}},splitLine:{length:"5%",lineStyle:{color:"#fff"}},pointer:{width:"40%",length:"80%",color:"#fff"},title:{offsetCenter:[0,-20],textStyle:{color:"auto",fontSize:20}},detail:{offsetCenter:[0,0],textStyle:{color:"auto",fontSize:40}}},textStyle:{fontFamily:"微软雅黑, Arial, Verdana, sans-serif"}};return t}),i("zrender/loadingEffect/DynamicLine",["require","./Base","../tool/util","../tool/color","../shape/Line"],function(t){function e(t){i.call(this,t)}var i=t("./Base"),o=t("../tool/util"),s=t("../tool/color"),n=t("../shape/Line");return o.inherits(e,i),e.prototype._start=function(t,e){for(var i=o.merge(this.options,{textStyle:{color:"#fff"},backgroundColor:"rgba(0, 0, 0, 0.8)",effectOption:{n:30,lineWidth:1,color:"random",timeInterval:100}}),r=this.createTextShape(i.textStyle),a=this.createBackgroundShape(i.backgroundColor),h=i.effectOption,l=h.n,d=h.lineWidth,c=[],p=this.canvasWidth,u=this.canvasHeight,g=0;l>g;g++){var f=-Math.ceil(1e3*Math.random()),m=Math.ceil(400*Math.random()),_=Math.ceil(Math.random()*u),y="random"==h.color?s.random():h.color;c[g]=new n({highlightStyle:{xStart:f,yStart:_,xEnd:f+m,yEnd:_,strokeColor:y,lineWidth:d},animationX:Math.ceil(100*Math.random()),len:m})}return setInterval(function(){t(a);for(var i=0;l>i;i++){var o=c[i].highlightStyle;o.xStart>=p&&(c[i].len=Math.ceil(400*Math.random()),o.xStart=-400,o.xEnd=-400+c[i].len,o.yStart=Math.ceil(Math.random()*u),o.yEnd=o.yStart),o.xStart+=c[i].animationX,o.xEnd+=c[i].animationX,t(c[i])}t(r),e()},h.timeInterval)},e}),i("echarts/component/toolbox",["require","./base","zrender/shape/Line","zrender/shape/Image","zrender/shape/Rectangle","../util/shape/Icon","../config","zrender/tool/util","zrender/config","zrender/tool/event","./dataView","../component"],function(t){function e(t,e,o,s,n){i.call(this,t,e,o,s,n),this.dom=n.dom,this._magicType={},this._magicMap={},this._isSilence=!1,this._iconList,this._iconShapeMap={},this._featureTitle={},this._featureIcon={},this._featureColor={},this._featureOption={},this._enableColor="red",this._disableColor="#ccc",this._markShapeList=[];var r=this;r._onMark=function(t){r.__onMark(t)},r._onMarkUndo=function(t){r.__onMarkUndo(t)},r._onMarkClear=function(t){r.__onMarkClear(t)},r._onDataZoom=function(t){r.__onDataZoom(t)},r._onDataZoomReset=function(t){r.__onDataZoomReset(t)},r._onDataView=function(t){r.__onDataView(t)},r._onRestore=function(t){r.__onRestore(t)},r._onSaveAsImage=function(t){r.__onSaveAsImage(t)},r._onMagicType=function(t){r.__onMagicType(t)},r._onCustomHandler=function(t){r.__onCustomHandler(t)},r._onmousemove=function(t){return r.__onmousemove(t)},r._onmousedown=function(t){return r.__onmousedown(t)},r._onmouseup=function(t){return r.__onmouseup(t)},r._onclick=function(t){return r.__onclick(t)}}var i=t("./base"),o=t("zrender/shape/Line"),s=t("zrender/shape/Image"),n=t("zrender/shape/Rectangle"),r=t("../util/shape/Icon"),a=t("../config");a.toolbox={zlevel:0,z:6,show:!1,orient:"horizontal",x:"right",y:"top",color:["#1e90ff","#22bb22","#4b0082","#d2691e"],disableColor:"#ddd",effectiveColor:"red",backgroundColor:"rgba(0,0,0,0)",borderColor:"#ccc",borderWidth:0,padding:5,itemGap:10,itemSize:16,showTitle:!0,feature:{mark:{show:!1,title:{mark:"辅助线开关",markUndo:"删除辅助线",markClear:"清空辅助线"},lineStyle:{width:1,color:"#1e90ff",type:"dashed"}},dataZoom:{show:!1,title:{dataZoom:"区域缩放",dataZoomReset:"区域缩放后退"}},dataView:{show:!1,title:"数据视图",readOnly:!1,lang:["数据视图","关闭","刷新"]},magicType:{show:!1,title:{line:"折线图切换",bar:"柱形图切换",stack:"堆积",tiled:"平铺",force:"力导向布局图切换",chord:"和弦图切换",pie:"饼图切换",funnel:"漏斗图切换"},type:[]},restore:{show:!1,title:"还原"},saveAsImage:{show:!1,title:"保存为图片",type:"png",lang:["点击保存"]}}};var h=t("zrender/tool/util"),l=t("zrender/config"),d=t("zrender/tool/event"),c="stack",p="tiled";return e.prototype={type:a.COMPONENT_TYPE_TOOLBOX,_buildShape:function(){this._iconList=[];
var t=this.option.toolbox;this._enableColor=t.effectiveColor,this._disableColor=t.disableColor;var e=t.feature,i=[];for(var o in e)if(e[o].show)switch(o){case"mark":i.push({key:o,name:"mark"}),i.push({key:o,name:"markUndo"}),i.push({key:o,name:"markClear"});break;case"magicType":for(var s=0,n=e[o].type.length;n>s;s++)e[o].title[e[o].type[s]+"Chart"]=e[o].title[e[o].type[s]],e[o].option&&(e[o].option[e[o].type[s]+"Chart"]=e[o].option[e[o].type[s]]),i.push({key:o,name:e[o].type[s]+"Chart"});break;case"dataZoom":i.push({key:o,name:"dataZoom"}),i.push({key:o,name:"dataZoomReset"});break;case"saveAsImage":this.canvasSupported&&i.push({key:o,name:"saveAsImage"});break;default:i.push({key:o,name:o})}if(i.length>0){for(var r,o,s=0,n=i.length;n>s;s++)r=i[s].name,o=i[s].key,this._iconList.push(r),this._featureTitle[r]=e[o].title[r]||e[o].title,e[o].icon&&(this._featureIcon[r]=e[o].icon[r]||e[o].icon),e[o].color&&(this._featureColor[r]=e[o].color[r]||e[o].color),e[o].option&&(this._featureOption[r]=e[o].option[r]||e[o].option);this._itemGroupLocation=this._getItemGroupLocation(),this._buildBackground(),this._buildItem();for(var s=0,n=this.shapeList.length;n>s;s++)this.zr.addShape(this.shapeList[s]);this._iconShapeMap.mark&&(this._iconDisable(this._iconShapeMap.markUndo),this._iconDisable(this._iconShapeMap.markClear)),this._iconShapeMap.dataZoomReset&&0===this._zoomQueue.length&&this._iconDisable(this._iconShapeMap.dataZoomReset)}},_buildItem:function(){var e,i,o,n,a=this.option.toolbox,h=this._iconList.length,l=this._itemGroupLocation.x,d=this._itemGroupLocation.y,c=a.itemSize,p=a.itemGap,u=a.color instanceof Array?a.color:[a.color],g=this.getFont(a.textStyle);"horizontal"===a.orient?(i=this._itemGroupLocation.y/this.zr.getHeight()<.5?"bottom":"top",o=this._itemGroupLocation.x/this.zr.getWidth()<.5?"left":"right",n=this._itemGroupLocation.y/this.zr.getHeight()<.5?"top":"bottom"):i=this._itemGroupLocation.x/this.zr.getWidth()<.5?"right":"left",this._iconShapeMap={};for(var f=this,m=0;h>m;m++){switch(e={type:"icon",zlevel:this.getZlevelBase(),z:this.getZBase(),style:{x:l,y:d,width:c,height:c,iconType:this._iconList[m],lineWidth:1,strokeColor:this._featureColor[this._iconList[m]]||u[m%u.length],brushType:"stroke"},highlightStyle:{lineWidth:1,text:a.showTitle?this._featureTitle[this._iconList[m]]:void 0,textFont:g,textPosition:i,strokeColor:this._featureColor[this._iconList[m]]||u[m%u.length]},hoverable:!0,clickable:!0},this._featureIcon[this._iconList[m]]&&(e.style.image=this._featureIcon[this._iconList[m]].replace(new RegExp("^image:\\/\\/"),""),e.style.opacity=.8,e.highlightStyle.opacity=1,e.type="image"),"horizontal"===a.orient&&(0===m&&"left"===o&&(e.highlightStyle.textPosition="specific",e.highlightStyle.textAlign=o,e.highlightStyle.textBaseline=n,e.highlightStyle.textX=l,e.highlightStyle.textY="top"===n?d+c+10:d-10),m===h-1&&"right"===o&&(e.highlightStyle.textPosition="specific",e.highlightStyle.textAlign=o,e.highlightStyle.textBaseline=n,e.highlightStyle.textX=l+c,e.highlightStyle.textY="top"===n?d+c+10:d-10)),this._iconList[m]){case"mark":e.onclick=f._onMark;break;case"markUndo":e.onclick=f._onMarkUndo;break;case"markClear":e.onclick=f._onMarkClear;break;case"dataZoom":e.onclick=f._onDataZoom;break;case"dataZoomReset":e.onclick=f._onDataZoomReset;break;case"dataView":if(!this._dataView){var _=t("./dataView");this._dataView=new _(this.ecTheme,this.messageCenter,this.zr,this.option,this.myChart)}e.onclick=f._onDataView;break;case"restore":e.onclick=f._onRestore;break;case"saveAsImage":e.onclick=f._onSaveAsImage;break;default:this._iconList[m].match("Chart")?(e._name=this._iconList[m].replace("Chart",""),e.onclick=f._onMagicType):e.onclick=f._onCustomHandler}"icon"===e.type?e=new r(e):"image"===e.type&&(e=new s(e)),this.shapeList.push(e),this._iconShapeMap[this._iconList[m]]=e,"horizontal"===a.orient?l+=c+p:d+=c+p}},_buildBackground:function(){var t=this.option.toolbox,e=this.reformCssArray(this.option.toolbox.padding);this.shapeList.push(new n({zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{x:this._itemGroupLocation.x-e[3],y:this._itemGroupLocation.y-e[0],width:this._itemGroupLocation.width+e[3]+e[1],height:this._itemGroupLocation.height+e[0]+e[2],brushType:0===t.borderWidth?"fill":"both",color:t.backgroundColor,strokeColor:t.borderColor,lineWidth:t.borderWidth}}))},_getItemGroupLocation:function(){var t=this.option.toolbox,e=this.reformCssArray(this.option.toolbox.padding),i=this._iconList.length,o=t.itemGap,s=t.itemSize,n=0,r=0;"horizontal"===t.orient?(n=(s+o)*i-o,r=s):(r=(s+o)*i-o,n=s);var a,h=this.zr.getWidth();switch(t.x){case"center":a=Math.floor((h-n)/2);break;case"left":a=e[3]+t.borderWidth;break;case"right":a=h-n-e[1]-t.borderWidth;break;default:a=t.x-0,a=isNaN(a)?0:a}var l,d=this.zr.getHeight();switch(t.y){case"top":l=e[0]+t.borderWidth;break;case"bottom":l=d-r-e[2]-t.borderWidth;break;case"center":l=Math.floor((d-r)/2);break;default:l=t.y-0,l=isNaN(l)?0:l}return{x:a,y:l,width:n,height:r}},__onmousemove:function(t){this._marking&&(this._markShape.style.xEnd=d.getX(t.event),this._markShape.style.yEnd=d.getY(t.event),this.zr.addHoverShape(this._markShape)),this._zooming&&(this._zoomShape.style.width=d.getX(t.event)-this._zoomShape.style.x,this._zoomShape.style.height=d.getY(t.event)-this._zoomShape.style.y,this.zr.addHoverShape(this._zoomShape),this.dom.style.cursor="crosshair",d.stop(t.event)),this._zoomStart&&"pointer"!=this.dom.style.cursor&&"move"!=this.dom.style.cursor&&(this.dom.style.cursor="crosshair")},__onmousedown:function(t){if(!t.target){this._zooming=!0;var e=d.getX(t.event),i=d.getY(t.event),o=this.option.dataZoom||{};return this._zoomShape=new n({zlevel:this.getZlevelBase(),z:this.getZBase(),style:{x:e,y:i,width:1,height:1,brushType:"both"},highlightStyle:{lineWidth:2,color:o.fillerColor||a.dataZoom.fillerColor,strokeColor:o.handleColor||a.dataZoom.handleColor,brushType:"both"}}),this.zr.addHoverShape(this._zoomShape),!0}},__onmouseup:function(){if(!this._zoomShape||Math.abs(this._zoomShape.style.width)<10||Math.abs(this._zoomShape.style.height)<10)return this._zooming=!1,!0;if(this._zooming&&this.component.dataZoom){this._zooming=!1;var t=this.component.dataZoom.rectZoom(this._zoomShape.style);t&&(this._zoomQueue.push({start:t.start,end:t.end,start2:t.start2,end2:t.end2}),this._iconEnable(this._iconShapeMap.dataZoomReset),this.zr.refreshNextFrame())}return!0},__onclick:function(t){if(!t.target)if(this._marking)this._marking=!1,this._markShapeList.push(this._markShape),this._iconEnable(this._iconShapeMap.markUndo),this._iconEnable(this._iconShapeMap.markClear),this.zr.addShape(this._markShape),this.zr.refreshNextFrame();else if(this._markStart){this._marking=!0;var e=d.getX(t.event),i=d.getY(t.event);this._markShape=new o({zlevel:this.getZlevelBase(),z:this.getZBase(),style:{xStart:e,yStart:i,xEnd:e,yEnd:i,lineWidth:this.query(this.option,"toolbox.feature.mark.lineStyle.width"),strokeColor:this.query(this.option,"toolbox.feature.mark.lineStyle.color"),lineType:this.query(this.option,"toolbox.feature.mark.lineStyle.type")}}),this.zr.addHoverShape(this._markShape)}},__onMark:function(t){var e=t.target;if(this._marking||this._markStart)this._resetMark(),this.zr.refreshNextFrame();else{this._resetZoom(),this.zr.modShape(e.id,{style:{strokeColor:this._enableColor}}),this.zr.refreshNextFrame(),this._markStart=!0;var i=this;setTimeout(function(){i.zr&&i.zr.on(l.EVENT.CLICK,i._onclick)&&i.zr.on(l.EVENT.MOUSEMOVE,i._onmousemove)},10)}return!0},__onMarkUndo:function(){if(this._marking)this._marking=!1;else{var t=this._markShapeList.length;if(t>=1){var e=this._markShapeList[t-1];this.zr.delShape(e.id),this.zr.refreshNextFrame(),this._markShapeList.pop(),1===t&&(this._iconDisable(this._iconShapeMap.markUndo),this._iconDisable(this._iconShapeMap.markClear))}}return!0},__onMarkClear:function(){this._marking&&(this._marking=!1);var t=this._markShapeList.length;if(t>0){for(;t--;)this.zr.delShape(this._markShapeList.pop().id);this._iconDisable(this._iconShapeMap.markUndo),this._iconDisable(this._iconShapeMap.markClear),this.zr.refreshNextFrame()}return!0},__onDataZoom:function(t){var e=t.target;if(this._zooming||this._zoomStart)this._resetZoom(),this.zr.refreshNextFrame(),this.dom.style.cursor="default";else{this._resetMark(),this.zr.modShape(e.id,{style:{strokeColor:this._enableColor}}),this.zr.refreshNextFrame(),this._zoomStart=!0;var i=this;setTimeout(function(){i.zr&&i.zr.on(l.EVENT.MOUSEDOWN,i._onmousedown)&&i.zr.on(l.EVENT.MOUSEUP,i._onmouseup)&&i.zr.on(l.EVENT.MOUSEMOVE,i._onmousemove)},10),this.dom.style.cursor="crosshair"}return!0},__onDataZoomReset:function(){return this._zooming&&(this._zooming=!1),this._zoomQueue.pop(),this._zoomQueue.length>0?this.component.dataZoom.absoluteZoom(this._zoomQueue[this._zoomQueue.length-1]):(this.component.dataZoom.rectZoom(),this._iconDisable(this._iconShapeMap.dataZoomReset),this.zr.refreshNextFrame()),!0},_resetMark:function(){this._marking=!1,this._markStart&&(this._markStart=!1,this._iconShapeMap.mark&&this.zr.modShape(this._iconShapeMap.mark.id,{style:{strokeColor:this._iconShapeMap.mark.highlightStyle.strokeColor}}),this.zr.un(l.EVENT.CLICK,this._onclick),this.zr.un(l.EVENT.MOUSEMOVE,this._onmousemove))},_resetZoom:function(){this._zooming=!1,this._zoomStart&&(this._zoomStart=!1,this._iconShapeMap.dataZoom&&this.zr.modShape(this._iconShapeMap.dataZoom.id,{style:{strokeColor:this._iconShapeMap.dataZoom.highlightStyle.strokeColor}}),this.zr.un(l.EVENT.MOUSEDOWN,this._onmousedown),this.zr.un(l.EVENT.MOUSEUP,this._onmouseup),this.zr.un(l.EVENT.MOUSEMOVE,this._onmousemove))},_iconDisable:function(t){"image"!=t.type?this.zr.modShape(t.id,{hoverable:!1,clickable:!1,style:{strokeColor:this._disableColor}}):this.zr.modShape(t.id,{hoverable:!1,clickable:!1,style:{opacity:.3}})},_iconEnable:function(t){"image"!=t.type?this.zr.modShape(t.id,{hoverable:!0,clickable:!0,style:{strokeColor:t.highlightStyle.strokeColor}}):this.zr.modShape(t.id,{hoverable:!0,clickable:!0,style:{opacity:.8}})},__onDataView:function(){return this._dataView.show(this.option),!0},__onRestore:function(){return this._resetMark(),this._resetZoom(),this.messageCenter.dispatch(a.EVENT.RESTORE,null,null,this.myChart),!0},__onSaveAsImage:function(){var t=this.option.toolbox.feature.saveAsImage,e=t.type||"png";"png"!=e&&"jpeg"!=e&&(e="png");var i;i=this.myChart.isConnected()?this.myChart.getConnectedDataURL(e):this.zr.toDataURL("image/"+e,this.option.backgroundColor&&"rgba(0,0,0,0)"===this.option.backgroundColor.replace(" ","")?"#fff":this.option.backgroundColor);var o=document.createElement("div");o.id="__echarts_download_wrap__",o.style.cssText="position:fixed;z-index:99999;display:block;top:0;left:0;background-color:rgba(33,33,33,0.5);text-align:center;width:100%;height:100%;line-height:"+document.documentElement.clientHeight+"px;";var s=document.createElement("a");s.href=i,s.setAttribute("download",(t.name?t.name:this.option.title&&(this.option.title.text||this.option.title.subtext)?this.option.title.text||this.option.title.subtext:"ECharts")+"."+e),s.innerHTML='<img style="vertical-align:middle" src="'+i+'" title="'+(window.ActiveXObject||"ActiveXObject"in window?"右键->图片另存为":t.lang="Save")+'"/>',o.appendChild(s),document.body.appendChild(o),s=null,o=null,setTimeout(function(){var t=document.getElementById("__echarts_download_wrap__");t&&(t.onclick=function(){var t=document.getElementById("__echarts_download_wrap__");t.onclick=null,t.innerHTML="",document.body.removeChild(t),t=null},t=null)},500)},__onMagicType:function(t){this._resetMark();var e=t.target._name;return this._magicType[e]||(this._magicType[e]=!0,e===a.CHART_TYPE_LINE?this._magicType[a.CHART_TYPE_BAR]=!1:e===a.CHART_TYPE_BAR&&(this._magicType[a.CHART_TYPE_LINE]=!1),e===a.CHART_TYPE_PIE?this._magicType[a.CHART_TYPE_FUNNEL]=!1:e===a.CHART_TYPE_FUNNEL&&(this._magicType[a.CHART_TYPE_PIE]=!1),e===a.CHART_TYPE_FORCE?this._magicType[a.CHART_TYPE_CHORD]=!1:e===a.CHART_TYPE_CHORD&&(this._magicType[a.CHART_TYPE_FORCE]=!1),e===c?this._magicType[p]=!1:e===p&&(this._magicType[c]=!1),this.messageCenter.dispatch(a.EVENT.MAGIC_TYPE_CHANGED,t.event,{magicType:this._magicType},this.myChart)),!0},setMagicType:function(t){this._resetMark(),this._magicType=t,!this._isSilence&&this.messageCenter.dispatch(a.EVENT.MAGIC_TYPE_CHANGED,null,{magicType:this._magicType},this.myChart)},__onCustomHandler:function(t){var e=t.target.style.iconType,i=this.option.toolbox.feature[e].onclick;"function"==typeof i&&i.call(this,this.option)},reset:function(t,e){if(e&&this.clear(),this.query(t,"toolbox.show")&&this.query(t,"toolbox.feature.magicType.show")){var i=t.toolbox.feature.magicType.type,o=i.length;for(this._magicMap={};o--;)this._magicMap[i[o]]=!0;o=t.series.length;for(var s,n;o--;)s=t.series[o].type,this._magicMap[s]&&(n=t.xAxis instanceof Array?t.xAxis[t.series[o].xAxisIndex||0]:t.xAxis,n&&"category"===(n.type||"category")&&(n.__boundaryGap=null!=n.boundaryGap?n.boundaryGap:!0),n=t.yAxis instanceof Array?t.yAxis[t.series[o].yAxisIndex||0]:t.yAxis,n&&"category"===n.type&&(n.__boundaryGap=null!=n.boundaryGap?n.boundaryGap:!0),t.series[o].__type=s,t.series[o].__itemStyle=h.clone(t.series[o].itemStyle||{})),(this._magicMap[c]||this._magicMap[p])&&(t.series[o].__stack=t.series[o].stack)}this._magicType=e?{}:this._magicType||{};for(var r in this._magicType)if(this._magicType[r]){this.option=t,this.getMagicOption();break}var a=t.dataZoom;if(a&&a.show){var l=null!=a.start&&a.start>=0&&a.start<=100?a.start:0,d=null!=a.end&&a.end>=0&&a.end<=100?a.end:100;l>d&&(l+=d,d=l-d,l-=d),this._zoomQueue=[{start:l,end:d,start2:0,end2:100}]}else this._zoomQueue=[]},getMagicOption:function(){var t,e;if(this._magicType[a.CHART_TYPE_LINE]||this._magicType[a.CHART_TYPE_BAR]){for(var i=this._magicType[a.CHART_TYPE_LINE]?!1:!0,o=0,s=this.option.series.length;s>o;o++)e=this.option.series[o].type,(e==a.CHART_TYPE_LINE||e==a.CHART_TYPE_BAR)&&(t=this.option.xAxis instanceof Array?this.option.xAxis[this.option.series[o].xAxisIndex||0]:this.option.xAxis,t&&"category"===(t.type||"category")&&(t.boundaryGap=i?!0:t.__boundaryGap),t=this.option.yAxis instanceof Array?this.option.yAxis[this.option.series[o].yAxisIndex||0]:this.option.yAxis,t&&"category"===t.type&&(t.boundaryGap=i?!0:t.__boundaryGap));this._defaultMagic(a.CHART_TYPE_LINE,a.CHART_TYPE_BAR)}if(this._defaultMagic(a.CHART_TYPE_CHORD,a.CHART_TYPE_FORCE),this._defaultMagic(a.CHART_TYPE_PIE,a.CHART_TYPE_FUNNEL),this._magicType[c]||this._magicType[p])for(var o=0,s=this.option.series.length;s>o;o++)this._magicType[c]?(this.option.series[o].stack="_ECHARTS_STACK_KENER_2014_",e=c):this._magicType[p]&&(this.option.series[o].stack=null,e=p),this._featureOption[e+"Chart"]&&h.merge(this.option.series[o],this._featureOption[e+"Chart"]||{},!0);return this.option},_defaultMagic:function(t,e){if(this._magicType[t]||this._magicType[e])for(var i=0,o=this.option.series.length;o>i;i++){var s=this.option.series[i].type;(s==t||s==e)&&(this.option.series[i].type=this._magicType[t]?t:e,this.option.series[i].itemStyle=h.clone(this.option.series[i].__itemStyle),s=this.option.series[i].type,this._featureOption[s+"Chart"]&&h.merge(this.option.series[i],this._featureOption[s+"Chart"]||{},!0))}},silence:function(t){this._isSilence=t},resize:function(){this._resetMark(),this.clear(),this.option&&this.option.toolbox&&this.option.toolbox.show&&this._buildShape(),this._dataView&&this._dataView.resize()},hideDataView:function(){this._dataView&&this._dataView.hide()},clear:function(t){this.zr&&(this.zr.delShape(this.shapeList),this.shapeList=[],t||(this.zr.delShape(this._markShapeList),this._markShapeList=[]))},onbeforDispose:function(){this._dataView&&(this._dataView.dispose(),this._dataView=null),this._markShapeList=null},refresh:function(t){t&&(this._resetMark(),this._resetZoom(),t.toolbox=this.reformOption(t.toolbox),this.option=t,this.clear(!0),t.toolbox.show&&this._buildShape(),this.hideDataView())}},h.inherits(e,i),t("../component").define("toolbox",e),e}),i("zrender/Painter",["require","./config","./tool/util","./tool/log","./loadingEffect/Base","./Layer","./shape/Image"],function(t){"use strict";function e(){return!1}function i(){}function o(t){return t?t.isBuildin?!0:"function"!=typeof t.resize||"function"!=typeof t.refresh?!1:!0:!1}var s=t("./config"),n=t("./tool/util"),r=t("./tool/log"),a=t("./loadingEffect/Base"),h=t("./Layer"),l=function(t,i){this.root=t,t.style["-webkit-tap-highlight-color"]="transparent",t.style["-webkit-user-select"]="none",t.style["user-select"]="none",t.style["-webkit-touch-callout"]="none",this.storage=i,t.innerHTML="",this._width=this._getWidth(),this._height=this._getHeight();var o=document.createElement("div");this._domRoot=o,o.style.position="relative",o.style.overflow="hidden",o.style.width=this._width+"px",o.style.height=this._height+"px",t.appendChild(o),this._layers={},this._zlevelList=[],this._layerConfig={},this._loadingEffect=new a({}),this.shapeToImage=this._createShapeToImageProcessor(),this._bgDom=document.createElement("div"),this._bgDom.style.cssText=["position:absolute;left:0px;top:0px;width:",this._width,"px;height:",this._height+"px;","-webkit-user-select:none;user-select;none;","-webkit-touch-callout:none;"].join(""),this._bgDom.setAttribute("data-zr-dom-id","bg"),o.appendChild(this._bgDom),this._bgDom.onselectstart=e;var s=new h("_zrender_hover_",this);this._layers.hover=s,o.appendChild(s.dom),s.initContext(),s.dom.onselectstart=e,s.dom.style["-webkit-user-select"]="none",s.dom.style["user-select"]="none",s.dom.style["-webkit-touch-callout"]="none",this.refreshNextFrame=null};return l.prototype.render=function(t){return this.isLoading()&&this.hideLoading(),this.refresh(t,!0),this},l.prototype.refresh=function(t,e){var i=this.storage.getShapeList(!0);this._paintList(i,e);for(var o=0;o<this._zlevelList.length;o++){var s=this._zlevelList[o],n=this._layers[s];!n.isBuildin&&n.refresh&&n.refresh()}return"function"==typeof t&&t(),this},l.prototype._preProcessLayer=function(t){t.unusedCount++,t.updateTransform()},l.prototype._postProcessLayer=function(t){t.dirty=!1,1==t.unusedCount&&t.clear()},l.prototype._paintList=function(t,e){"undefined"==typeof e&&(e=!1),this._updateLayerStatus(t);var i,o,n;this.eachBuildinLayer(this._preProcessLayer);for(var a=0,h=t.length;h>a;a++){var l=t[a];if(o!==l.zlevel&&(i&&(i.needTransform&&n.restore(),n.flush&&n.flush()),o=l.zlevel,i=this.getLayer(o),i.isBuildin||r("ZLevel "+o+" has been used by unkown layer "+i.id),n=i.ctx,i.unusedCount=0,(i.dirty||e)&&i.clear(),i.needTransform&&(n.save(),i.setTransform(n))),(i.dirty||e)&&!l.invisible&&(!l.onbrush||l.onbrush&&!l.onbrush(n,!1)))if(s.catchBrushException)try{l.brush(n,!1,this.refreshNextFrame)}catch(d){r(d,"brush error of "+l.type,l)}else l.brush(n,!1,this.refreshNextFrame);l.__dirty=!1}i&&(i.needTransform&&n.restore(),n.flush&&n.flush()),this.eachBuildinLayer(this._postProcessLayer)},l.prototype.getLayer=function(t){var e=this._layers[t];return e||(e=new h(t,this),e.isBuildin=!0,this._layerConfig[t]&&n.merge(e,this._layerConfig[t],!0),e.updateTransform(),this.insertLayer(t,e),e.initContext()),e},l.prototype.insertLayer=function(t,e){if(this._layers[t])return void r("ZLevel "+t+" has been used already");if(!o(e))return void r("Layer of zlevel "+t+" is not valid");var i=this._zlevelList.length,s=null,n=-1;if(i>0&&t>this._zlevelList[0]){for(n=0;i-1>n&&!(this._zlevelList[n]<t&&this._zlevelList[n+1]>t);n++);s=this._layers[this._zlevelList[n]]}this._zlevelList.splice(n+1,0,t);var a=s?s.dom:this._bgDom;a.nextSibling?a.parentNode.insertBefore(e.dom,a.nextSibling):a.parentNode.appendChild(e.dom),this._layers[t]=e},l.prototype.eachLayer=function(t,e){for(var i=0;i<this._zlevelList.length;i++){var o=this._zlevelList[i];t.call(e,this._layers[o],o)}},l.prototype.eachBuildinLayer=function(t,e){for(var i=0;i<this._zlevelList.length;i++){var o=this._zlevelList[i],s=this._layers[o];s.isBuildin&&t.call(e,s,o)}},l.prototype.eachOtherLayer=function(t,e){for(var i=0;i<this._zlevelList.length;i++){var o=this._zlevelList[i],s=this._layers[o];s.isBuildin||t.call(e,s,o)}},l.prototype.getLayers=function(){return this._layers},l.prototype._updateLayerStatus=function(t){var e=this._layers,i={};this.eachBuildinLayer(function(t,e){i[e]=t.elCount,t.elCount=0});for(var o=0,s=t.length;s>o;o++){var n=t[o],r=n.zlevel,a=e[r];if(a){if(a.elCount++,a.dirty)continue;a.dirty=n.__dirty}}this.eachBuildinLayer(function(t,e){i[e]!==t.elCount&&(t.dirty=!0)})},l.prototype.refreshShapes=function(t,e){for(var i=0,o=t.length;o>i;i++){var s=t[i];s.modSelf()}return this.refresh(e),this},l.prototype.setLoadingEffect=function(t){return this._loadingEffect=t,this},l.prototype.clear=function(){return this.eachBuildinLayer(this._clearLayer),this},l.prototype._clearLayer=function(t){t.clear()},l.prototype.modLayer=function(t,e){if(e){this._layerConfig[t]?n.merge(this._layerConfig[t],e,!0):this._layerConfig[t]=e;var i=this._layers[t];i&&n.merge(i,this._layerConfig[t],!0)}},l.prototype.delLayer=function(t){var e=this._layers[t];e&&(this.modLayer(t,{position:e.position,rotation:e.rotation,scale:e.scale}),e.dom.parentNode.removeChild(e.dom),delete this._layers[t],this._zlevelList.splice(n.indexOf(this._zlevelList,t),1))},l.prototype.refreshHover=function(){this.clearHover();for(var t=this.storage.getHoverShapes(!0),e=0,i=t.length;i>e;e++)this._brushHover(t[e]);var o=this._layers.hover.ctx;return o.flush&&o.flush(),this.storage.delHover(),this},l.prototype.clearHover=function(){var t=this._layers.hover;return t&&t.clear(),this},l.prototype.showLoading=function(t){return this._loadingEffect&&this._loadingEffect.stop(),t&&this.setLoadingEffect(t),this._loadingEffect.start(this),this.loading=!0,this},l.prototype.hideLoading=function(){return this._loadingEffect.stop(),this.clearHover(),this.loading=!1,this},l.prototype.isLoading=function(){return this.loading},l.prototype.resize=function(){var t=this._domRoot;t.style.display="none";var e=this._getWidth(),i=this._getHeight();if(t.style.display="",this._width!=e||i!=this._height){this._width=e,this._height=i,t.style.width=e+"px",t.style.height=i+"px";for(var o in this._layers)this._layers[o].resize(e,i);this.refresh(null,!0)}return this},l.prototype.clearLayer=function(t){var e=this._layers[t];e&&e.clear()},l.prototype.dispose=function(){this.isLoading()&&this.hideLoading(),this.root.innerHTML="",this.root=this.storage=this._domRoot=this._layers=null},l.prototype.getDomHover=function(){return this._layers.hover.dom},l.prototype.toDataURL=function(t,e,i){if(window.G_vmlCanvasManager)return null;var o=new h("image",this);this._bgDom.appendChild(o.dom),o.initContext();var n=o.ctx;o.clearColor=e||"#fff",o.clear();var a=this;this.storage.iterShape(function(t){if(!t.invisible&&(!t.onbrush||t.onbrush&&!t.onbrush(n,!1)))if(s.catchBrushException)try{t.brush(n,!1,a.refreshNextFrame)}catch(e){r(e,"brush error of "+t.type,t)}else t.brush(n,!1,a.refreshNextFrame)},{normal:"up",update:!0});var l=o.dom.toDataURL(t,i);return n=null,this._bgDom.removeChild(o.dom),l},l.prototype.getWidth=function(){return this._width},l.prototype.getHeight=function(){return this._height},l.prototype._getWidth=function(){var t=this.root,e=t.currentStyle||document.defaultView.getComputedStyle(t);return((t.clientWidth||parseInt(e.width,10))-parseInt(e.paddingLeft,10)-parseInt(e.paddingRight,10)).toFixed(0)-0},l.prototype._getHeight=function(){var t=this.root,e=t.currentStyle||document.defaultView.getComputedStyle(t);return((t.clientHeight||parseInt(e.height,10))-parseInt(e.paddingTop,10)-parseInt(e.paddingBottom,10)).toFixed(0)-0},l.prototype._brushHover=function(t){var e=this._layers.hover.ctx;if(!t.onbrush||t.onbrush&&!t.onbrush(e,!0)){var i=this.getLayer(t.zlevel);if(i.needTransform&&(e.save(),i.setTransform(e)),s.catchBrushException)try{t.brush(e,!0,this.refreshNextFrame)}catch(o){r(o,"hoverBrush error of "+t.type,t)}else t.brush(e,!0,this.refreshNextFrame);i.needTransform&&e.restore()}},l.prototype._shapeToImage=function(e,i,o,s,n){var r=document.createElement("canvas"),a=r.getContext("2d");r.style.width=o+"px",r.style.height=s+"px",r.setAttribute("width",o*n),r.setAttribute("height",s*n),a.clearRect(0,0,o*n,s*n);var h={position:i.position,rotation:i.rotation,scale:i.scale};i.position=[0,0,0],i.rotation=0,i.scale=[1,1],i&&i.brush(a,!1);var l=t("./shape/Image"),d=new l({id:e,style:{x:0,y:0,image:r}});return null!=h.position&&(d.position=i.position=h.position),null!=h.rotation&&(d.rotation=i.rotation=h.rotation),null!=h.scale&&(d.scale=i.scale=h.scale),d},l.prototype._createShapeToImageProcessor=function(){if(window.G_vmlCanvasManager)return i;var t=this;return function(e,i,o,n){return t._shapeToImage(e,i,o,n,s.devicePixelRatio)}},l}),i("zrender/Storage",["require","./tool/util","./Group"],function(t){"use strict";function e(t,e){return t.zlevel==e.zlevel?t.z==e.z?t.__renderidx-e.__renderidx:t.z-e.z:t.zlevel-e.zlevel}var i=t("./tool/util"),o=t("./Group"),s={hover:!1,normal:"down",update:!1},n=function(){this._elements={},this._hoverElements=[],this._roots=[],this._shapeList=[],this._shapeListOffset=0};return n.prototype.iterShape=function(t,e){if(e||(e=s),e.hover)for(var i=0,o=this._hoverElements.length;o>i;i++){var n=this._hoverElements[i];if(n.updateTransform(),t(n))return this}switch(e.update&&this.updateShapeList(),e.normal){case"down":for(var o=this._shapeList.length;o--;)if(t(this._shapeList[o]))return this;break;default:for(var i=0,o=this._shapeList.length;o>i;i++)if(t(this._shapeList[i]))return this}return this},n.prototype.getHoverShapes=function(t){for(var i=[],o=0,s=this._hoverElements.length;s>o;o++){i.push(this._hoverElements[o]);var n=this._hoverElements[o].hoverConnect;if(n){var r;n=n instanceof Array?n:[n];for(var a=0,h=n.length;h>a;a++)r=n[a].id?n[a]:this.get(n[a]),r&&i.push(r)}}if(i.sort(e),t)for(var o=0,s=i.length;s>o;o++)i[o].updateTransform();return i},n.prototype.getShapeList=function(t){return t&&this.updateShapeList(),this._shapeList},n.prototype.updateShapeList=function(){this._shapeListOffset=0;for(var t=0,i=this._roots.length;i>t;t++){var o=this._roots[t];this._updateAndAddShape(o)}this._shapeList.length=this._shapeListOffset;for(var t=0,i=this._shapeList.length;i>t;t++)this._shapeList[t].__renderidx=t;this._shapeList.sort(e)},n.prototype._updateAndAddShape=function(t,e){if(!t.ignore)if(t.updateTransform(),"group"==t.type){t.clipShape&&(t.clipShape.parent=t,t.clipShape.updateTransform(),e?(e=e.slice(),e.push(t.clipShape)):e=[t.clipShape]);for(var i=0;i<t._children.length;i++){var o=t._children[i];o.__dirty=t.__dirty||o.__dirty,this._updateAndAddShape(o,e)}t.__dirty=!1}else t.__clipShapes=e,this._shapeList[this._shapeListOffset++]=t},n.prototype.mod=function(t,e){if("string"==typeof t&&(t=this._elements[t]),t&&(t.modSelf(),e))if(e.parent||e._storage||e.__clipShapes){var o={};for(var s in e)"parent"!==s&&"_storage"!==s&&"__clipShapes"!==s&&e.hasOwnProperty(s)&&(o[s]=e[s]);i.merge(t,o,!0)}else i.merge(t,e,!0);return this},n.prototype.drift=function(t,e,i){var o=this._elements[t];return o&&(o.needTransform=!0,"horizontal"===o.draggable?i=0:"vertical"===o.draggable&&(e=0),(!o.ondrift||o.ondrift&&!o.ondrift(e,i))&&o.drift(e,i)),this},n.prototype.addHover=function(t){return t.updateNeedTransform(),this._hoverElements.push(t),this},n.prototype.delHover=function(){return this._hoverElements=[],this},n.prototype.hasHoverShape=function(){return this._hoverElements.length>0},n.prototype.addRoot=function(t){this._elements[t.id]||(t instanceof o&&t.addChildrenToStorage(this),this.addToMap(t),this._roots.push(t))},n.prototype.delRoot=function(t){if("undefined"==typeof t){for(var e=0;e<this._roots.length;e++){var s=this._roots[e];s instanceof o&&s.delChildrenFromStorage(this)}return this._elements={},this._hoverElements=[],this._roots=[],this._shapeList=[],void(this._shapeListOffset=0)}if(t instanceof Array)for(var e=0,n=t.length;n>e;e++)this.delRoot(t[e]);else{var r;r="string"==typeof t?this._elements[t]:t;var a=i.indexOf(this._roots,r);a>=0&&(this.delFromMap(r.id),this._roots.splice(a,1),r instanceof o&&r.delChildrenFromStorage(this))}},n.prototype.addToMap=function(t){return t instanceof o&&(t._storage=this),t.modSelf(),this._elements[t.id]=t,this},n.prototype.get=function(t){return this._elements[t]},n.prototype.delFromMap=function(t){var e=this._elements[t];return e&&(delete this._elements[t],e instanceof o&&(e._storage=null)),this},n.prototype.dispose=function(){this._elements=this._renderList=this._roots=this._hoverElements=null},n}),i("zrender/animation/Animation",["require","./Clip","../tool/color","../tool/util","../tool/event"],function(t){"use strict";function e(t,e){return t[e]}function i(t,e,i){t[e]=i}function o(t,e,i){return(e-t)*i+t}function s(t,e,i,s,n){var r=t.length;if(1==n)for(var a=0;r>a;a++)s[a]=o(t[a],e[a],i);else for(var h=t[0].length,a=0;r>a;a++)for(var l=0;h>l;l++)s[a][l]=o(t[a][l],e[a][l],i)}function n(t){switch(typeof t){case"undefined":case"string":return!1}return"undefined"!=typeof t.length}function r(t,e,i,o,s,n,r,h,l){var d=t.length;if(1==l)for(var c=0;d>c;c++)h[c]=a(t[c],e[c],i[c],o[c],s,n,r);else for(var p=t[0].length,c=0;d>c;c++)for(var u=0;p>u;u++)h[c][u]=a(t[c][u],e[c][u],i[c][u],o[c][u],s,n,r)}function a(t,e,i,o,s,n,r){var a=.5*(i-t),h=.5*(o-e);return(2*(e-i)+a+h)*r+(-3*(e-i)-2*a-h)*n+a*s+e}function h(t){if(n(t)){var e=t.length;if(n(t[0])){for(var i=[],o=0;e>o;o++)i.push(f.call(t[o]));return i}return f.call(t)}return t}function l(t){return t[0]=Math.floor(t[0]),t[1]=Math.floor(t[1]),t[2]=Math.floor(t[2]),"rgba("+t.join(",")+")"}var d=t("./Clip"),c=t("../tool/color"),p=t("../tool/util"),u=t("../tool/event").Dispatcher,g=window.requestAnimationFrame||window.msRequestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||function(t){setTimeout(t,16)},f=Array.prototype.slice,m=function(t){t=t||{},this.stage=t.stage||{},this.onframe=t.onframe||function(){},this._clips=[],this._running=!1,this._time=0,u.call(this)};m.prototype={add:function(t){this._clips.push(t)},remove:function(t){var e=p.indexOf(this._clips,t);e>=0&&this._clips.splice(e,1)},_update:function(){for(var t=(new Date).getTime(),e=t-this._time,i=this._clips,o=i.length,s=[],n=[],r=0;o>r;r++){var a=i[r],h=a.step(t);h&&(s.push(h),n.push(a))}for(var r=0;o>r;)i[r]._needsRemove?(i[r]=i[o-1],i.pop(),o--):r++;o=s.length;for(var r=0;o>r;r++)n[r].fire(s[r]);this._time=t,this.onframe(e),this.dispatch("frame",e),this.stage.update&&this.stage.update()},start:function(){function t(){e._running&&(g(t),e._update())}var e=this;this._running=!0,this._time=(new Date).getTime(),g(t)},stop:function(){this._running=!1},clear:function(){this._clips=[]},animate:function(t,e){e=e||{};var i=new _(t,e.loop,e.getter,e.setter);return i.animation=this,i},constructor:m},p.merge(m.prototype,u.prototype,!0);var _=function(t,o,s,n){this._tracks={},this._target=t,this._loop=o||!1,this._getter=s||e,this._setter=n||i,this._clipCount=0,this._delay=0,this._doneList=[],this._onframeList=[],this._clipList=[]};return _.prototype={when:function(t,e){for(var i in e)this._tracks[i]||(this._tracks[i]=[],0!==t&&this._tracks[i].push({time:0,value:h(this._getter(this._target,i))})),this._tracks[i].push({time:parseInt(t,10),value:e[i]});return this},during:function(t){return this._onframeList.push(t),this},start:function(t){var e=this,i=this._setter,h=this._getter,p="spline"===t,u=function(){if(e._clipCount--,0===e._clipCount){e._tracks={};for(var t=e._doneList.length,i=0;t>i;i++)e._doneList[i].call(e)}},g=function(g,f){var m=g.length;if(m){var _=g[0].value,y=n(_),x=!1,v=y&&n(_[0])?2:1;g.sort(function(t,e){return t.time-e.time});var b;if(m){b=g[m-1].time;for(var S=[],T=[],z=0;m>z;z++){S.push(g[z].time/b);var C=g[z].value;"string"==typeof C&&(C=c.toArray(C),0===C.length&&(C[0]=C[1]=C[2]=0,C[3]=1),x=!0),T.push(C)}var w,z,L,E,M,A,k,O=0,I=0;if(x)var R=[0,0,0,0];var P=function(t,n){if(I>n){for(w=Math.min(O+1,m-1),z=w;z>=0&&!(S[z]<=n);z--);z=Math.min(z,m-2)}else{for(z=O;m>z&&!(S[z]>n);z++);z=Math.min(z-1,m-2)
}O=z,I=n;var d=S[z+1]-S[z];if(0!==d){if(L=(n-S[z])/d,p)if(M=T[z],E=T[0===z?z:z-1],A=T[z>m-2?m-1:z+1],k=T[z>m-3?m-1:z+2],y)r(E,M,A,k,L,L*L,L*L*L,h(t,f),v);else{var c;x?(c=r(E,M,A,k,L,L*L,L*L*L,R,1),c=l(R)):c=a(E,M,A,k,L,L*L,L*L*L),i(t,f,c)}else if(y)s(T[z],T[z+1],L,h(t,f),v);else{var c;x?(s(T[z],T[z+1],L,R,1),c=l(R)):c=o(T[z],T[z+1],L),i(t,f,c)}for(z=0;z<e._onframeList.length;z++)e._onframeList[z](t,n)}},D=new d({target:e._target,life:b,loop:e._loop,delay:e._delay,onframe:P,ondestroy:u});t&&"spline"!==t&&(D.easing=t),e._clipList.push(D),e._clipCount++,e.animation.add(D)}}};for(var f in this._tracks)g(this._tracks[f],f);return this},stop:function(){for(var t=0;t<this._clipList.length;t++){var e=this._clipList[t];this.animation.remove(e)}this._clipList=[]},delay:function(t){return this._delay=t,this},done:function(t){return t&&this._doneList.push(t),this}},m}),i("zrender/Handler",["require","./config","./tool/env","./tool/event","./tool/util","./tool/vector","./tool/matrix","./mixin/Eventful"],function(t){"use strict";function e(t,e){return function(i){return t.call(e,i)}}function i(t,e){return function(i,o,s){return t.call(e,i,o,s)}}function o(t){for(var i=u.length;i--;){var o=u[i];t["_"+o+"Handler"]=e(g[o],t)}}function s(t,e,i){if(this._draggingTarget&&this._draggingTarget.id==t.id||t.isSilent())return!1;var o=this._event;if(t.isCover(e,i)){t.hoverable&&this.storage.addHover(t);for(var s=t.parent;s;){if(s.clipShape&&!s.clipShape.isCover(this._mouseX,this._mouseY))return!1;s=s.parent}return this._lastHover!=t&&(this._processOutShape(o),this._processDragLeave(o),this._lastHover=t,this._processDragEnter(o)),this._processOverShape(o),this._processDragOver(o),this._hasfound=1,!0}return!1}var n=t("./config"),r=t("./tool/env"),a=t("./tool/event"),h=t("./tool/util"),l=t("./tool/vector"),d=t("./tool/matrix"),c=n.EVENT,p=t("./mixin/Eventful"),u=["resize","click","dblclick","mousewheel","mousemove","mouseout","mouseup","mousedown","touchstart","touchend","touchmove"],g={resize:function(t){t=t||window.event,this._lastHover=null,this._isMouseDown=0,this.dispatch(c.RESIZE,t)},click:function(t){t=this._zrenderEventFixed(t);var e=this._lastHover;(e&&e.clickable||!e)&&this._clickThreshold<5&&this._dispatchAgency(e,c.CLICK,t),this._mousemoveHandler(t)},dblclick:function(t){t=t||window.event,t=this._zrenderEventFixed(t);var e=this._lastHover;(e&&e.clickable||!e)&&this._clickThreshold<5&&this._dispatchAgency(e,c.DBLCLICK,t),this._mousemoveHandler(t)},mousewheel:function(t){t=this._zrenderEventFixed(t);var e=t.wheelDelta||-t.detail,i=e>0?1.1:1/1.1,o=!1,s=this._mouseX,n=this._mouseY;this.painter.eachBuildinLayer(function(e){var r=e.position;if(e.zoomable){e.__zoom=e.__zoom||1;var h=e.__zoom;h*=i,h=Math.max(Math.min(e.maxZoom,h),e.minZoom),i=h/e.__zoom,e.__zoom=h,r[0]-=(s-r[0])*(i-1),r[1]-=(n-r[1])*(i-1),e.scale[0]*=i,e.scale[1]*=i,e.dirty=!0,o=!0,a.stop(t)}}),o&&this.painter.refresh(),this._dispatchAgency(this._lastHover,c.MOUSEWHEEL,t),this._mousemoveHandler(t)},mousemove:function(t){if(!this.painter.isLoading()){t=this._zrenderEventFixed(t),this._lastX=this._mouseX,this._lastY=this._mouseY,this._mouseX=a.getX(t),this._mouseY=a.getY(t);var e=this._mouseX-this._lastX,i=this._mouseY-this._lastY;this._processDragStart(t),this._hasfound=0,this._event=t,this._iterateAndFindHover(),this._hasfound||((!this._draggingTarget||this._lastHover&&this._lastHover!=this._draggingTarget)&&(this._processOutShape(t),this._processDragLeave(t)),this._lastHover=null,this.storage.delHover(),this.painter.clearHover());var o="default";if(this._draggingTarget)this.storage.drift(this._draggingTarget.id,e,i),this._draggingTarget.modSelf(),this.storage.addHover(this._draggingTarget),this._clickThreshold++;else if(this._isMouseDown){var s=!1;this.painter.eachBuildinLayer(function(t){t.panable&&(o="move",t.position[0]+=e,t.position[1]+=i,s=!0,t.dirty=!0)}),s&&this.painter.refresh()}this._draggingTarget||this._hasfound&&this._lastHover.draggable?o="move":this._hasfound&&this._lastHover.clickable&&(o="pointer"),this.root.style.cursor=o,this._dispatchAgency(this._lastHover,c.MOUSEMOVE,t),(this._draggingTarget||this._hasfound||this.storage.hasHoverShape())&&this.painter.refreshHover()}},mouseout:function(t){t=this._zrenderEventFixed(t);var e=t.toElement||t.relatedTarget;if(e!=this.root)for(;e&&9!=e.nodeType;){if(e==this.root)return void this._mousemoveHandler(t);e=e.parentNode}t.zrenderX=this._lastX,t.zrenderY=this._lastY,this.root.style.cursor="default",this._isMouseDown=0,this._processOutShape(t),this._processDrop(t),this._processDragEnd(t),this.painter.isLoading()||this.painter.refreshHover(),this.dispatch(c.GLOBALOUT,t)},mousedown:function(t){return this._clickThreshold=0,2==this._lastDownButton?(this._lastDownButton=t.button,void(this._mouseDownTarget=null)):(this._lastMouseDownMoment=new Date,t=this._zrenderEventFixed(t),this._isMouseDown=1,this._mouseDownTarget=this._lastHover,this._dispatchAgency(this._lastHover,c.MOUSEDOWN,t),void(this._lastDownButton=t.button))},mouseup:function(t){t=this._zrenderEventFixed(t),this.root.style.cursor="default",this._isMouseDown=0,this._mouseDownTarget=null,this._dispatchAgency(this._lastHover,c.MOUSEUP,t),this._processDrop(t),this._processDragEnd(t)},touchstart:function(t){t=this._zrenderEventFixed(t,!0),this._lastTouchMoment=new Date,this._mobileFindFixed(t),this._mousedownHandler(t)},touchmove:function(t){t=this._zrenderEventFixed(t,!0),this._mousemoveHandler(t),this._isDragging&&a.stop(t)},touchend:function(t){t=this._zrenderEventFixed(t,!0),this._mouseupHandler(t);var e=new Date;e-this._lastTouchMoment<c.touchClickDelay&&(this._mobileFindFixed(t),this._clickHandler(t),e-this._lastClickMoment<c.touchClickDelay/2&&(this._dblclickHandler(t),this._lastHover&&this._lastHover.clickable&&a.stop(t)),this._lastClickMoment=e),this.painter.clearHover()}},f=function(t,e,n){p.call(this),this.root=t,this.storage=e,this.painter=n,this._lastX=this._lastY=this._mouseX=this._mouseY=0,this._findHover=i(s,this),this._domHover=n.getDomHover(),o(this),window.addEventListener?(window.addEventListener("resize",this._resizeHandler),r.os.tablet||r.os.phone?(t.addEventListener("touchstart",this._touchstartHandler),t.addEventListener("touchmove",this._touchmoveHandler),t.addEventListener("touchend",this._touchendHandler)):(t.addEventListener("click",this._clickHandler),t.addEventListener("dblclick",this._dblclickHandler),t.addEventListener("mousewheel",this._mousewheelHandler),t.addEventListener("mousemove",this._mousemoveHandler),t.addEventListener("mousedown",this._mousedownHandler),t.addEventListener("mouseup",this._mouseupHandler)),t.addEventListener("DOMMouseScroll",this._mousewheelHandler),t.addEventListener("mouseout",this._mouseoutHandler)):(window.attachEvent("onresize",this._resizeHandler),t.attachEvent("onclick",this._clickHandler),t.ondblclick=this._dblclickHandler,t.attachEvent("onmousewheel",this._mousewheelHandler),t.attachEvent("onmousemove",this._mousemoveHandler),t.attachEvent("onmouseout",this._mouseoutHandler),t.attachEvent("onmousedown",this._mousedownHandler),t.attachEvent("onmouseup",this._mouseupHandler))};f.prototype.on=function(t,e,i){return this.bind(t,e,i),this},f.prototype.un=function(t,e){return this.unbind(t,e),this},f.prototype.trigger=function(t,e){switch(t){case c.RESIZE:case c.CLICK:case c.DBLCLICK:case c.MOUSEWHEEL:case c.MOUSEMOVE:case c.MOUSEDOWN:case c.MOUSEUP:case c.MOUSEOUT:this["_"+t+"Handler"](e)}},f.prototype.dispose=function(){var t=this.root;window.removeEventListener?(window.removeEventListener("resize",this._resizeHandler),r.os.tablet||r.os.phone?(t.removeEventListener("touchstart",this._touchstartHandler),t.removeEventListener("touchmove",this._touchmoveHandler),t.removeEventListener("touchend",this._touchendHandler)):(t.removeEventListener("click",this._clickHandler),t.removeEventListener("dblclick",this._dblclickHandler),t.removeEventListener("mousewheel",this._mousewheelHandler),t.removeEventListener("mousemove",this._mousemoveHandler),t.removeEventListener("mousedown",this._mousedownHandler),t.removeEventListener("mouseup",this._mouseupHandler)),t.removeEventListener("DOMMouseScroll",this._mousewheelHandler),t.removeEventListener("mouseout",this._mouseoutHandler)):(window.detachEvent("onresize",this._resizeHandler),t.detachEvent("onclick",this._clickHandler),t.detachEvent("dblclick",this._dblclickHandler),t.detachEvent("onmousewheel",this._mousewheelHandler),t.detachEvent("onmousemove",this._mousemoveHandler),t.detachEvent("onmouseout",this._mouseoutHandler),t.detachEvent("onmousedown",this._mousedownHandler),t.detachEvent("onmouseup",this._mouseupHandler)),this.root=this._domHover=this.storage=this.painter=null,this.un()},f.prototype._processDragStart=function(t){var e=this._lastHover;if(this._isMouseDown&&e&&e.draggable&&!this._draggingTarget&&this._mouseDownTarget==e){if(e.dragEnableTime&&new Date-this._lastMouseDownMoment<e.dragEnableTime)return;var i=e;this._draggingTarget=i,this._isDragging=1,i.invisible=!0,this.storage.mod(i.id),this._dispatchAgency(i,c.DRAGSTART,t),this.painter.refresh()}},f.prototype._processDragEnter=function(t){this._draggingTarget&&this._dispatchAgency(this._lastHover,c.DRAGENTER,t,this._draggingTarget)},f.prototype._processDragOver=function(t){this._draggingTarget&&this._dispatchAgency(this._lastHover,c.DRAGOVER,t,this._draggingTarget)},f.prototype._processDragLeave=function(t){this._draggingTarget&&this._dispatchAgency(this._lastHover,c.DRAGLEAVE,t,this._draggingTarget)},f.prototype._processDrop=function(t){this._draggingTarget&&(this._draggingTarget.invisible=!1,this.storage.mod(this._draggingTarget.id),this.painter.refresh(),this._dispatchAgency(this._lastHover,c.DROP,t,this._draggingTarget))},f.prototype._processDragEnd=function(t){this._draggingTarget&&(this._dispatchAgency(this._draggingTarget,c.DRAGEND,t),this._lastHover=null),this._isDragging=0,this._draggingTarget=null},f.prototype._processOverShape=function(t){this._dispatchAgency(this._lastHover,c.MOUSEOVER,t)},f.prototype._processOutShape=function(t){this._dispatchAgency(this._lastHover,c.MOUSEOUT,t)},f.prototype._dispatchAgency=function(t,e,i,o){var s="on"+e,n={type:e,event:i,target:t,cancelBubble:!1},r=t;for(o&&(n.dragged=o);r&&(r[s]&&(n.cancelBubble=r[s](n)),r.dispatch(e,n),r=r.parent,!n.cancelBubble););if(t)n.cancelBubble||this.dispatch(e,n);else if(!o){var a={type:e,event:i};this.dispatch(e,a),this.painter.eachOtherLayer(function(t){"function"==typeof t[s]&&t[s](a),t.dispatch&&t.dispatch(e,a)})}},f.prototype._iterateAndFindHover=function(){var t=d.create();return function(){for(var e,i,o=this.storage.getShapeList(),s=[0,0],n=o.length-1;n>=0;n--){var r=o[n];if(e!==r.zlevel&&(i=this.painter.getLayer(r.zlevel,i),s[0]=this._mouseX,s[1]=this._mouseY,i.needTransform&&(d.invert(t,i.transform),l.applyTransform(s,s,t))),this._findHover(r,s[0],s[1]))break}}}();var m=[{x:10},{x:-20},{x:10,y:10},{y:-20}];return f.prototype._mobileFindFixed=function(t){this._lastHover=null,this._mouseX=t.zrenderX,this._mouseY=t.zrenderY,this._event=t,this._iterateAndFindHover();for(var e=0;!this._lastHover&&e<m.length;e++){var i=m[e];i.x&&(this._mouseX+=i.x),i.y&&(this._mouseY+=i.y),this._iterateAndFindHover()}this._lastHover&&(t.zrenderX=this._mouseX,t.zrenderY=this._mouseY)},f.prototype._zrenderEventFixed=function(t,e){if(t.zrenderFixed)return t;if(e){var i="touchend"!=t.type?t.targetTouches[0]:t.changedTouches[0];if(i){var o=this.painter._domRoot.getBoundingClientRect();t.zrenderX=i.clientX-o.left,t.zrenderY=i.clientY-o.top}}else{t=t||window.event;var s=t.toElement||t.relatedTarget||t.srcElement||t.target;s&&s!=this._domHover&&(t.zrenderX=("undefined"!=typeof t.offsetX?t.offsetX:t.layerX)+s.offsetLeft,t.zrenderY=("undefined"!=typeof t.offsetY?t.offsetY:t.layerY)+s.offsetTop)}return t.zrenderFixed=1,t},h.merge(f.prototype,p.prototype,!0),f}),i("echarts/component/tooltip",["require","./base","../util/shape/Cross","zrender/shape/Line","zrender/shape/Rectangle","../config","../util/ecData","zrender/config","zrender/tool/event","zrender/tool/area","zrender/tool/color","zrender/tool/util","zrender/shape/Base","../component"],function(t){function e(t,e,n,r,a){i.call(this,t,e,n,r,a),this.dom=a.dom;var h=this;h._onmousemove=function(t){return h.__onmousemove(t)},h._onglobalout=function(t){return h.__onglobalout(t)},this.zr.on(l.EVENT.MOUSEMOVE,h._onmousemove),this.zr.on(l.EVENT.GLOBALOUT,h._onglobalout),h._hide=function(t){return h.__hide(t)},h._tryShow=function(t){return h.__tryShow(t)},h._refixed=function(t){return h.__refixed(t)},h._setContent=function(t,e){return h.__setContent(t,e)},this._tDom=this._tDom||document.createElement("div"),this._tDom.onselectstart=function(){return!1},this._tDom.onmouseover=function(){h._mousein=!0},this._tDom.onmouseout=function(){h._mousein=!1},this._tDom.className="echarts-tooltip",this._tDom.style.position="absolute",this.hasAppend=!1,this._axisLineShape&&this.zr.delShape(this._axisLineShape.id),this._axisLineShape=new s({zlevel:this.getZlevelBase(),z:this.getZBase(),invisible:!0,hoverable:!1}),this.shapeList.push(this._axisLineShape),this.zr.addShape(this._axisLineShape),this._axisShadowShape&&this.zr.delShape(this._axisShadowShape.id),this._axisShadowShape=new s({zlevel:this.getZlevelBase(),z:1,invisible:!0,hoverable:!1}),this.shapeList.push(this._axisShadowShape),this.zr.addShape(this._axisShadowShape),this._axisCrossShape&&this.zr.delShape(this._axisCrossShape.id),this._axisCrossShape=new o({zlevel:this.getZlevelBase(),z:this.getZBase(),invisible:!0,hoverable:!1}),this.shapeList.push(this._axisCrossShape),this.zr.addShape(this._axisCrossShape),this.showing=!1,this.refresh(r)}var i=t("./base"),o=t("../util/shape/Cross"),s=t("zrender/shape/Line"),n=t("zrender/shape/Rectangle"),r=new n({}),a=t("../config");a.tooltip={zlevel:1,z:8,show:!0,showContent:!0,trigger:"item",islandFormatter:"{a} <br/>{b} : {c}",showDelay:20,hideDelay:100,transitionDuration:.4,enterable:!1,backgroundColor:"rgba(0,0,0,0.7)",borderColor:"#333",borderRadius:4,borderWidth:0,padding:5,axisPointer:{type:"line",lineStyle:{color:"#48b",width:2,type:"solid"},crossStyle:{color:"#1e90ff",width:1,type:"dashed"},shadowStyle:{color:"rgba(150,150,150,0.3)",width:"auto",type:"default"}},textStyle:{color:"#fff"}};var h=t("../util/ecData"),l=t("zrender/config"),d=t("zrender/tool/event"),c=t("zrender/tool/area"),p=t("zrender/tool/color"),u=t("zrender/tool/util"),g=t("zrender/shape/Base");return e.prototype={type:a.COMPONENT_TYPE_TOOLTIP,_gCssText:"position:absolute;display:block;border-style:solid;white-space:nowrap;",_style:function(t){if(!t)return"";var e=[];if(t.transitionDuration){var i="left "+t.transitionDuration+"s,top "+t.transitionDuration+"s";e.push("transition:"+i),e.push("-moz-transition:"+i),e.push("-webkit-transition:"+i),e.push("-o-transition:"+i)}t.backgroundColor&&(e.push("background-Color:"+p.toHex(t.backgroundColor)),e.push("filter:alpha(opacity=70)"),e.push("background-Color:"+t.backgroundColor)),null!=t.borderWidth&&e.push("border-width:"+t.borderWidth+"px"),null!=t.borderColor&&e.push("border-color:"+t.borderColor),null!=t.borderRadius&&(e.push("border-radius:"+t.borderRadius+"px"),e.push("-moz-border-radius:"+t.borderRadius+"px"),e.push("-webkit-border-radius:"+t.borderRadius+"px"),e.push("-o-border-radius:"+t.borderRadius+"px"));var o=t.textStyle;o&&(o.color&&e.push("color:"+o.color),o.decoration&&e.push("text-decoration:"+o.decoration),o.align&&e.push("text-align:"+o.align),o.fontFamily&&e.push("font-family:"+o.fontFamily),o.fontSize&&e.push("font-size:"+o.fontSize+"px"),o.fontSize&&e.push("line-height:"+Math.round(3*o.fontSize/2)+"px"),o.fontStyle&&e.push("font-style:"+o.fontStyle),o.fontWeight&&e.push("font-weight:"+o.fontWeight));var s=t.padding;return null!=s&&(s=this.reformCssArray(s),e.push("padding:"+s[0]+"px "+s[1]+"px "+s[2]+"px "+s[3]+"px")),e=e.join(";")+";"},__hide:function(){this._lastDataIndex=-1,this._lastSeriesIndex=-1,this._lastItemTriggerId=-1,this._tDom&&(this._tDom.style.display="none");var t=!1;this._axisLineShape.invisible||(this._axisLineShape.invisible=!0,this.zr.modShape(this._axisLineShape.id),t=!0),this._axisShadowShape.invisible||(this._axisShadowShape.invisible=!0,this.zr.modShape(this._axisShadowShape.id),t=!0),this._axisCrossShape.invisible||(this._axisCrossShape.invisible=!0,this.zr.modShape(this._axisCrossShape.id),t=!0),this._lastTipShape&&this._lastTipShape.tipShape.length>0&&(this.zr.delShape(this._lastTipShape.tipShape),this._lastTipShape=!1,this.shapeList.length=2),t&&this.zr.refreshNextFrame(),this.showing=!1},_show:function(t,e,i,o){var s=this._tDom.offsetHeight,n=this._tDom.offsetWidth;t&&("function"==typeof t&&(t=t([e,i])),t instanceof Array&&(e=t[0],i=t[1])),e+n>this._zrWidth&&(e-=n+40),i+s>this._zrHeight&&(i-=s-20),20>i&&(i=0),this._tDom.style.cssText=this._gCssText+this._defaultCssText+(o?o:"")+"left:"+e+"px;top:"+i+"px;",(10>s||10>n)&&setTimeout(this._refixed,20),this.showing=!0},__refixed:function(){if(this._tDom){var t="",e=this._tDom.offsetHeight,i=this._tDom.offsetWidth;this._tDom.offsetLeft+i>this._zrWidth&&(t+="left:"+(this._zrWidth-i-20)+"px;"),this._tDom.offsetTop+e>this._zrHeight&&(t+="top:"+(this._zrHeight-e-10)+"px;"),""!==t&&(this._tDom.style.cssText+=t)}},__tryShow:function(){var t,e;if(this._curTarget){if("island"===this._curTarget._type&&this.option.tooltip.show)return void this._showItemTrigger();var i=h.get(this._curTarget,"series"),o=h.get(this._curTarget,"data");t=this.deepQuery([o,i,this.option],"tooltip.show"),null!=i&&null!=o&&t?(e=this.deepQuery([o,i,this.option],"tooltip.trigger"),"axis"===e?this._showAxisTrigger(i.xAxisIndex,i.yAxisIndex,h.get(this._curTarget,"dataIndex")):this._showItemTrigger()):(clearTimeout(this._hidingTicket),clearTimeout(this._showingTicket),this._hidingTicket=setTimeout(this._hide,this._hideDelay))}else this._findPolarTrigger()||this._findAxisTrigger()},_findAxisTrigger:function(){if(!this.component.xAxis||!this.component.yAxis)return void(this._hidingTicket=setTimeout(this._hide,this._hideDelay));for(var t,e,i=this.option.series,o=0,s=i.length;s>o;o++)if("axis"===this.deepQuery([i[o],this.option],"tooltip.trigger"))return t=i[o].xAxisIndex||0,e=i[o].yAxisIndex||0,this.component.xAxis.getAxis(t)&&this.component.xAxis.getAxis(t).type===a.COMPONENT_TYPE_AXIS_CATEGORY?void this._showAxisTrigger(t,e,this._getNearestDataIndex("x",this.component.xAxis.getAxis(t))):this.component.yAxis.getAxis(e)&&this.component.yAxis.getAxis(e).type===a.COMPONENT_TYPE_AXIS_CATEGORY?void this._showAxisTrigger(t,e,this._getNearestDataIndex("y",this.component.yAxis.getAxis(e))):void this._showAxisTrigger(t,e,-1);"cross"===this.option.tooltip.axisPointer.type&&this._showAxisTrigger(-1,-1,-1)},_findPolarTrigger:function(){if(!this.component.polar)return!1;var t,e=d.getX(this._event),i=d.getY(this._event),o=this.component.polar.getNearestIndex([e,i]);return o?(t=o.valueIndex,o=o.polarIndex):o=-1,-1!=o?this._showPolarTrigger(o,t):!1},_getNearestDataIndex:function(t,e){var i=-1,o=d.getX(this._event),s=d.getY(this._event);if("x"===t){for(var n,r,a=this.component.grid.getXend(),h=e.getCoordByIndex(i);a>h&&(r=h,o>=h);)n=h,h=e.getCoordByIndex(++i);return 0>=i?i=0:r-o>=o-n?i-=1:null==e.getNameByIndex(i)&&(i-=1),i}for(var l,c,p=this.component.grid.getY(),h=e.getCoordByIndex(i);h>p&&(l=h,h>=s);)c=h,h=e.getCoordByIndex(++i);return 0>=i?i=0:s-l>=c-s?i-=1:null==e.getNameByIndex(i)&&(i-=1),i},_showAxisTrigger:function(t,e,i){if(!this._event.connectTrigger&&this.messageCenter.dispatch(a.EVENT.TOOLTIP_IN_GRID,this._event,null,this.myChart),null==this.component.xAxis||null==this.component.yAxis||null==t||null==e)return clearTimeout(this._hidingTicket),clearTimeout(this._showingTicket),void(this._hidingTicket=setTimeout(this._hide,this._hideDelay));var o,s,n,r,h=this.option.series,l=[],c=[],p="";if("axis"===this.option.tooltip.trigger){if(!this.option.tooltip.show)return;s=this.option.tooltip.formatter,n=this.option.tooltip.position}var u,g,f=-1!=t&&this.component.xAxis.getAxis(t).type===a.COMPONENT_TYPE_AXIS_CATEGORY?"xAxis":-1!=e&&this.component.yAxis.getAxis(e).type===a.COMPONENT_TYPE_AXIS_CATEGORY?"yAxis":!1;if(f){var m="xAxis"==f?t:e;o=this.component[f].getAxis(m);for(var _=0,y=h.length;y>_;_++)this._isSelected(h[_].name)&&h[_][f+"Index"]===m&&"axis"===this.deepQuery([h[_],this.option],"tooltip.trigger")&&(r=this.query(h[_],"tooltip.showContent")||r,s=this.query(h[_],"tooltip.formatter")||s,n=this.query(h[_],"tooltip.position")||n,p+=this._style(this.query(h[_],"tooltip")),null!=h[_].stack&&"xAxis"==f?(l.unshift(h[_]),c.unshift(_)):(l.push(h[_]),c.push(_)));this.messageCenter.dispatch(a.EVENT.TOOLTIP_HOVER,this._event,{seriesIndex:c,dataIndex:i},this.myChart);var x;"xAxis"==f?(u=this.subPixelOptimize(o.getCoordByIndex(i),this._axisLineWidth),g=d.getY(this._event),x=[u,this.component.grid.getY(),u,this.component.grid.getYend()]):(u=d.getX(this._event),g=this.subPixelOptimize(o.getCoordByIndex(i),this._axisLineWidth),x=[this.component.grid.getX(),g,this.component.grid.getXend(),g]),this._styleAxisPointer(l,x[0],x[1],x[2],x[3],o.getGap(),u,g)}else u=d.getX(this._event),g=d.getY(this._event),this._styleAxisPointer(h,this.component.grid.getX(),g,this.component.grid.getXend(),g,0,u,g),i>=0?this._showItemTrigger(!0):(clearTimeout(this._hidingTicket),clearTimeout(this._showingTicket),this._tDom.style.display="none");if(l.length>0){if(this._lastItemTriggerId=-1,this._lastDataIndex!=i||this._lastSeriesIndex!=c[0]){this._lastDataIndex=i,this._lastSeriesIndex=c[0];var v,b;if("function"==typeof s){for(var S=[],_=0,y=l.length;y>_;_++)v=l[_].data[i],b=this.getDataFromOption(v,"-"),S.push({seriesIndex:c[_],seriesName:l[_].name||"",series:l[_],dataIndex:i,data:v,name:o.getNameByIndex(i),value:b,0:l[_].name||"",1:o.getNameByIndex(i),2:b,3:v});this._curTicket="axis:"+i,this._tDom.innerHTML=s.call(this.myChart,S,this._curTicket,this._setContent)}else if("string"==typeof s){this._curTicket=0/0,s=s.replace("{a}","{a0}").replace("{b}","{b0}").replace("{c}","{c0}");for(var _=0,y=l.length;y>_;_++)s=s.replace("{a"+_+"}",this._encodeHTML(l[_].name||"")),s=s.replace("{b"+_+"}",this._encodeHTML(o.getNameByIndex(i))),v=l[_].data[i],v=this.getDataFromOption(v,"-"),s=s.replace("{c"+_+"}",v instanceof Array?v:this.numAddCommas(v));this._tDom.innerHTML=s}else{this._curTicket=0/0,s=this._encodeHTML(o.getNameByIndex(i));for(var _=0,y=l.length;y>_;_++)s+="<br/>"+this._encodeHTML(l[_].name||"")+" : ",v=l[_].data[i],v=this.getDataFromOption(v,"-"),s+=v instanceof Array?v:this.numAddCommas(v);this._tDom.innerHTML=s}}if(r===!1||!this.option.tooltip.showContent)return;this.hasAppend||(this._tDom.style.left=this._zrWidth/2+"px",this._tDom.style.top=this._zrHeight/2+"px",this.dom.firstChild.appendChild(this._tDom),this.hasAppend=!0),this._show(n,u+10,g+10,p)}},_showPolarTrigger:function(t,e){if(null==this.component.polar||null==t||null==e||0>e)return!1;var i,o,s,n=this.option.series,r=[],a=[],h="";if("axis"===this.option.tooltip.trigger){if(!this.option.tooltip.show)return!1;i=this.option.tooltip.formatter,o=this.option.tooltip.position}for(var l=this.option.polar[t].indicator[e].text,c=0,p=n.length;p>c;c++)this._isSelected(n[c].name)&&n[c].polarIndex===t&&"axis"===this.deepQuery([n[c],this.option],"tooltip.trigger")&&(s=this.query(n[c],"tooltip.showContent")||s,i=this.query(n[c],"tooltip.formatter")||i,o=this.query(n[c],"tooltip.position")||o,h+=this._style(this.query(n[c],"tooltip")),r.push(n[c]),a.push(c));if(r.length>0){for(var u,g,f,m=[],c=0,p=r.length;p>c;c++){u=r[c].data;for(var _=0,y=u.length;y>_;_++)g=u[_],this._isSelected(g.name)&&(g=null!=g?g:{name:"",value:{dataIndex:"-"}},f=this.getDataFromOption(g.value[e]),m.push({seriesIndex:a[c],seriesName:r[c].name||"",series:r[c],dataIndex:e,data:g,name:g.name,indicator:l,value:f,0:r[c].name||"",1:g.name,2:f,3:l}))}if(m.length<=0)return;if(this._lastItemTriggerId=-1,this._lastDataIndex!=e||this._lastSeriesIndex!=a[0])if(this._lastDataIndex=e,this._lastSeriesIndex=a[0],"function"==typeof i)this._curTicket="axis:"+e,this._tDom.innerHTML=i.call(this.myChart,m,this._curTicket,this._setContent);else if("string"==typeof i){i=i.replace("{a}","{a0}").replace("{b}","{b0}").replace("{c}","{c0}").replace("{d}","{d0}");for(var c=0,p=m.length;p>c;c++)i=i.replace("{a"+c+"}",this._encodeHTML(m[c].seriesName)),i=i.replace("{b"+c+"}",this._encodeHTML(m[c].name)),i=i.replace("{c"+c+"}",this.numAddCommas(m[c].value)),i=i.replace("{d"+c+"}",this._encodeHTML(m[c].indicator));this._tDom.innerHTML=i}else{i=this._encodeHTML(m[0].name)+"<br/>"+this._encodeHTML(m[0].indicator)+" : "+this.numAddCommas(m[0].value);for(var c=1,p=m.length;p>c;c++)i+="<br/>"+this._encodeHTML(m[c].name)+"<br/>",i+=this._encodeHTML(m[c].indicator)+" : "+this.numAddCommas(m[c].value);this._tDom.innerHTML=i}if(s===!1||!this.option.tooltip.showContent)return;return this.hasAppend||(this._tDom.style.left=this._zrWidth/2+"px",this._tDom.style.top=this._zrHeight/2+"px",this.dom.firstChild.appendChild(this._tDom),this.hasAppend=!0),this._show(o,d.getX(this._event),d.getY(this._event),h),!0}},_showItemTrigger:function(t){if(this._curTarget){var e,i,o,s=h.get(this._curTarget,"series"),n=h.get(this._curTarget,"seriesIndex"),r=h.get(this._curTarget,"data"),l=h.get(this._curTarget,"dataIndex"),c=h.get(this._curTarget,"name"),p=h.get(this._curTarget,"value"),u=h.get(this._curTarget,"special"),g=h.get(this._curTarget,"special2"),f=[r,s,this.option],m="";if("island"!=this._curTarget._type){var _=t?"axis":"item";this.option.tooltip.trigger===_&&(e=this.option.tooltip.formatter,i=this.option.tooltip.position),this.query(s,"tooltip.trigger")===_&&(o=this.query(s,"tooltip.showContent")||o,e=this.query(s,"tooltip.formatter")||e,i=this.query(s,"tooltip.position")||i,m+=this._style(this.query(s,"tooltip"))),o=this.query(r,"tooltip.showContent")||o,e=this.query(r,"tooltip.formatter")||e,i=this.query(r,"tooltip.position")||i,m+=this._style(this.query(r,"tooltip"))}else this._lastItemTriggerId=0/0,o=this.deepQuery(f,"tooltip.showContent"),e=this.deepQuery(f,"tooltip.islandFormatter"),i=this.deepQuery(f,"tooltip.islandPosition");this._lastDataIndex=-1,this._lastSeriesIndex=-1,this._lastItemTriggerId!==this._curTarget.id&&(this._lastItemTriggerId=this._curTarget.id,"function"==typeof e?(this._curTicket=(s.name||"")+":"+l,this._tDom.innerHTML=e.call(this.myChart,{seriesIndex:n,seriesName:s.name||"",series:s,dataIndex:l,data:r,name:c,value:p,percent:u,indicator:u,value2:g,indicator2:g,0:s.name||"",1:c,2:p,3:u,4:g,5:r,6:n,7:l},this._curTicket,this._setContent)):"string"==typeof e?(this._curTicket=0/0,e=e.replace("{a}","{a0}").replace("{b}","{b0}").replace("{c}","{c0}"),e=e.replace("{a0}",this._encodeHTML(s.name||"")).replace("{b0}",this._encodeHTML(c)).replace("{c0}",p instanceof Array?p:this.numAddCommas(p)),e=e.replace("{d}","{d0}").replace("{d0}",u||""),e=e.replace("{e}","{e0}").replace("{e0}",h.get(this._curTarget,"special2")||""),this._tDom.innerHTML=e):(this._curTicket=0/0,this._tDom.innerHTML=s.type===a.CHART_TYPE_RADAR&&u?this._itemFormatter.radar.call(this,s,c,p,u):s.type===a.CHART_TYPE_EVENTRIVER?this._itemFormatter.eventRiver.call(this,s,c,p,r):""+(null!=s.name?this._encodeHTML(s.name)+"<br/>":"")+(""===c?"":this._encodeHTML(c)+" : ")+(p instanceof Array?p:this.numAddCommas(p))));var y=d.getX(this._event),x=d.getY(this._event);this.deepQuery(f,"tooltip.axisPointer.show")&&this.component.grid?this._styleAxisPointer([s],this.component.grid.getX(),x,this.component.grid.getXend(),x,0,y,x):this._hide(),o!==!1&&this.option.tooltip.showContent&&(this.hasAppend||(this._tDom.style.left=this._zrWidth/2+"px",this._tDom.style.top=this._zrHeight/2+"px",this.dom.firstChild.appendChild(this._tDom),this.hasAppend=!0),this._show(i,y+20,x-20,m))}},_itemFormatter:{radar:function(t,e,i,o){var s="";s+=this._encodeHTML(""===e?t.name||"":e),s+=""===s?"":"<br />";for(var n=0;n<o.length;n++)s+=this._encodeHTML(o[n].text)+" : "+this.numAddCommas(i[n])+"<br />";return s},chord:function(t,e,i,o,s){if(null==s)return this._encodeHTML(e)+" ("+this.numAddCommas(i)+")";var n=this._encodeHTML(e),r=this._encodeHTML(o);return""+(null!=t.name?this._encodeHTML(t.name)+"<br/>":"")+n+" -> "+r+" ("+this.numAddCommas(i)+")<br />"+r+" -> "+n+" ("+this.numAddCommas(s)+")"},eventRiver:function(t,e,i,o){var s="";s+=this._encodeHTML(""===t.name?"":t.name+" : "),s+=this._encodeHTML(e),s+=""===s?"":"<br />",o=o.evolution;for(var n=0,r=o.length;r>n;n++)s+='<div style="padding-top:5px;">',o[n].detail&&(o[n].detail.img&&(s+='<img src="'+o[n].detail.img+'" style="float:left;width:40px;height:40px;">'),s+='<div style="margin-left:45px;">'+o[n].time+"<br/>",s+='<a href="'+o[n].detail.link+'" target="_blank">',s+=o[n].detail.text+"</a></div>",s+="</div>");return s}},_styleAxisPointer:function(t,e,i,o,s,n,r,a){if(t.length>0){var h,l,d=this.option.tooltip.axisPointer,c=d.type,p={line:{},cross:{},shadow:{}};for(var u in p)p[u].color=d[u+"Style"].color,p[u].width=d[u+"Style"].width,p[u].type=d[u+"Style"].type;for(var g=0,f=t.length;f>g;g++)h=t[g],l=this.query(h,"tooltip.axisPointer.type"),c=l||c,l&&(p[l].color=this.query(h,"tooltip.axisPointer."+l+"Style.color")||p[l].color,p[l].width=this.query(h,"tooltip.axisPointer."+l+"Style.width")||p[l].width,p[l].type=this.query(h,"tooltip.axisPointer."+l+"Style.type")||p[l].type);if("line"===c){var m=p.line.width,_=e==o;this._axisLineShape.style={xStart:_?this.subPixelOptimize(e,m):e,yStart:_?i:this.subPixelOptimize(i,m),xEnd:_?this.subPixelOptimize(o,m):o,yEnd:_?s:this.subPixelOptimize(s,m),strokeColor:p.line.color,lineWidth:m,lineType:p.line.type},this._axisLineShape.invisible=!1,this.zr.modShape(this._axisLineShape.id)}else if("cross"===c){var y=p.cross.width;this._axisCrossShape.style={brushType:"stroke",rect:this.component.grid.getArea(),x:this.subPixelOptimize(r,y),y:this.subPixelOptimize(a,y),text:("( "+this.component.xAxis.getAxis(0).getValueFromCoord(r)+" , "+this.component.yAxis.getAxis(0).getValueFromCoord(a)+" )").replace("  , "," ").replace(" ,  "," "),textPosition:"specific",strokeColor:p.cross.color,lineWidth:y,lineType:p.cross.type},this.component.grid.getXend()-r>100?(this._axisCrossShape.style.textAlign="left",this._axisCrossShape.style.textX=r+10):(this._axisCrossShape.style.textAlign="right",this._axisCrossShape.style.textX=r-10),a-this.component.grid.getY()>50?(this._axisCrossShape.style.textBaseline="bottom",this._axisCrossShape.style.textY=a-10):(this._axisCrossShape.style.textBaseline="top",this._axisCrossShape.style.textY=a+10),this._axisCrossShape.invisible=!1,this.zr.modShape(this._axisCrossShape.id)}else"shadow"===c&&((null==p.shadow.width||"auto"===p.shadow.width||isNaN(p.shadow.width))&&(p.shadow.width=n),e===o?Math.abs(this.component.grid.getX()-e)<2?(p.shadow.width/=2,e=o+=p.shadow.width/2):Math.abs(this.component.grid.getXend()-e)<2&&(p.shadow.width/=2,e=o-=p.shadow.width/2):i===s&&(Math.abs(this.component.grid.getY()-i)<2?(p.shadow.width/=2,i=s+=p.shadow.width/2):Math.abs(this.component.grid.getYend()-i)<2&&(p.shadow.width/=2,i=s-=p.shadow.width/2)),this._axisShadowShape.style={xStart:e,yStart:i,xEnd:o,yEnd:s,strokeColor:p.shadow.color,lineWidth:p.shadow.width},this._axisShadowShape.invisible=!1,this.zr.modShape(this._axisShadowShape.id));this.zr.refreshNextFrame()}},__onmousemove:function(t){if(clearTimeout(this._hidingTicket),clearTimeout(this._showingTicket),!this._mousein||!this._enterable){var e=t.target,i=d.getX(t.event),o=d.getY(t.event);if(e){this._curTarget=e,this._event=t.event,this._event.zrenderX=i,this._event.zrenderY=o;var s;if(this._needAxisTrigger&&this.component.polar&&-1!=(s=this.component.polar.isInside([i,o])))for(var n=this.option.series,h=0,l=n.length;l>h;h++)if(n[h].polarIndex===s&&"axis"===this.deepQuery([n[h],this.option],"tooltip.trigger")){this._curTarget=null;break}this._showingTicket=setTimeout(this._tryShow,this._showDelay)}else this._curTarget=!1,this._event=t.event,this._event.zrenderX=i,this._event.zrenderY=o,this._needAxisTrigger&&this.component.grid&&c.isInside(r,this.component.grid.getArea(),i,o)?this._showingTicket=setTimeout(this._tryShow,this._showDelay):this._needAxisTrigger&&this.component.polar&&-1!=this.component.polar.isInside([i,o])?this._showingTicket=setTimeout(this._tryShow,this._showDelay):(!this._event.connectTrigger&&this.messageCenter.dispatch(a.EVENT.TOOLTIP_OUT_GRID,this._event,null,this.myChart),this._hidingTicket=setTimeout(this._hide,this._hideDelay))
}},__onglobalout:function(){clearTimeout(this._hidingTicket),clearTimeout(this._showingTicket),this._hidingTicket=setTimeout(this._hide,this._hideDelay)},__setContent:function(t,e){this._tDom&&(t===this._curTicket&&(this._tDom.innerHTML=e),setTimeout(this._refixed,20))},ontooltipHover:function(t,e){if(!this._lastTipShape||this._lastTipShape&&this._lastTipShape.dataIndex!=t.dataIndex){this._lastTipShape&&this._lastTipShape.tipShape.length>0&&(this.zr.delShape(this._lastTipShape.tipShape),this.shapeList.length=2);for(var i=0,o=e.length;o>i;i++)e[i].zlevel=this.getZlevelBase(),e[i].z=this.getZBase(),e[i].style=g.prototype.getHighlightStyle(e[i].style,e[i].highlightStyle),e[i].draggable=!1,e[i].hoverable=!1,e[i].clickable=!1,e[i].ondragend=null,e[i].ondragover=null,e[i].ondrop=null,this.shapeList.push(e[i]),this.zr.addShape(e[i]);this._lastTipShape={dataIndex:t.dataIndex,tipShape:e}}},ondragend:function(){this._hide()},onlegendSelected:function(t){this._selectedMap=t.selected},_setSelectedMap:function(){this._selectedMap=this.component.legend?u.clone(this.component.legend.getSelectedMap()):{}},_isSelected:function(t){return null!=this._selectedMap[t]?this._selectedMap[t]:!0},showTip:function(t){if(t){var e,i=this.option.series;if(null!=t.seriesIndex)e=t.seriesIndex;else for(var o=t.seriesName,s=0,n=i.length;n>s;s++)if(i[s].name===o){e=s;break}var r=i[e];if(null!=r){var d=this.myChart.chart[r.type],c="axis"===this.deepQuery([r,this.option],"tooltip.trigger");if(d)if(c){var p=t.dataIndex;switch(d.type){case a.CHART_TYPE_LINE:case a.CHART_TYPE_BAR:case a.CHART_TYPE_K:case a.CHART_TYPE_TREEMAP:if(null==this.component.xAxis||null==this.component.yAxis||r.data.length<=p)return;var u=r.xAxisIndex||0,g=r.yAxisIndex||0;this._event=this.component.xAxis.getAxis(u).type===a.COMPONENT_TYPE_AXIS_CATEGORY?{zrenderX:this.component.xAxis.getAxis(u).getCoordByIndex(p),zrenderY:this.component.grid.getY()+(this.component.grid.getYend()-this.component.grid.getY())/4}:{zrenderX:this.component.grid.getX()+(this.component.grid.getXend()-this.component.grid.getX())/4,zrenderY:this.component.yAxis.getAxis(g).getCoordByIndex(p)},this._showAxisTrigger(u,g,p);break;case a.CHART_TYPE_RADAR:if(null==this.component.polar||r.data[0].value.length<=p)return;var f=r.polarIndex||0,m=this.component.polar.getVector(f,p,"max");this._event={zrenderX:m[0],zrenderY:m[1]},this._showPolarTrigger(f,p)}}else{var _,y,x=d.shapeList;switch(d.type){case a.CHART_TYPE_LINE:case a.CHART_TYPE_BAR:case a.CHART_TYPE_K:case a.CHART_TYPE_TREEMAP:case a.CHART_TYPE_SCATTER:for(var p=t.dataIndex,s=0,n=x.length;n>s;s++)if(null==x[s]._mark&&h.get(x[s],"seriesIndex")==e&&h.get(x[s],"dataIndex")==p){this._curTarget=x[s],_=x[s].style.x,y=d.type!=a.CHART_TYPE_K?x[s].style.y:x[s].style.y[0];break}break;case a.CHART_TYPE_RADAR:for(var p=t.dataIndex,s=0,n=x.length;n>s;s++)if("polygon"===x[s].type&&h.get(x[s],"seriesIndex")==e&&h.get(x[s],"dataIndex")==p){this._curTarget=x[s];var m=this.component.polar.getCenter(r.polarIndex||0);_=m[0],y=m[1];break}break;case a.CHART_TYPE_PIE:for(var v=t.name,s=0,n=x.length;n>s;s++)if("sector"===x[s].type&&h.get(x[s],"seriesIndex")==e&&h.get(x[s],"name")==v){this._curTarget=x[s];var b=this._curTarget.style,S=(b.startAngle+b.endAngle)/2*Math.PI/180;_=this._curTarget.style.x+Math.cos(S)*b.r/1.5,y=this._curTarget.style.y-Math.sin(S)*b.r/1.5;break}break;case a.CHART_TYPE_MAP:for(var v=t.name,T=r.mapType,s=0,n=x.length;n>s;s++)if("text"===x[s].type&&x[s]._mapType===T&&x[s].style._name===v){this._curTarget=x[s],_=this._curTarget.style.x+this._curTarget.position[0],y=this._curTarget.style.y+this._curTarget.position[1];break}break;case a.CHART_TYPE_CHORD:for(var v=t.name,s=0,n=x.length;n>s;s++)if("sector"===x[s].type&&h.get(x[s],"name")==v){this._curTarget=x[s];var b=this._curTarget.style,S=(b.startAngle+b.endAngle)/2*Math.PI/180;return _=this._curTarget.style.x+Math.cos(S)*(b.r-2),y=this._curTarget.style.y-Math.sin(S)*(b.r-2),void this.zr.trigger(l.EVENT.MOUSEMOVE,{zrenderX:_,zrenderY:y})}break;case a.CHART_TYPE_FORCE:for(var v=t.name,s=0,n=x.length;n>s;s++)if("circle"===x[s].type&&h.get(x[s],"name")==v){this._curTarget=x[s],_=this._curTarget.position[0],y=this._curTarget.position[1];break}}null!=_&&null!=y&&(this._event={zrenderX:_,zrenderY:y},this.zr.addHoverShape(this._curTarget),this.zr.refreshHover(),this._showItemTrigger())}}}},hideTip:function(){this._hide()},refresh:function(t){if(this._zrHeight=this.zr.getHeight(),this._zrWidth=this.zr.getWidth(),this._lastTipShape&&this._lastTipShape.tipShape.length>0&&this.zr.delShape(this._lastTipShape.tipShape),this._lastTipShape=!1,this.shapeList.length=2,this._lastDataIndex=-1,this._lastSeriesIndex=-1,this._lastItemTriggerId=-1,t){this.option=t,this.option.tooltip=this.reformOption(this.option.tooltip),this.option.tooltip.textStyle=u.merge(this.option.tooltip.textStyle,this.ecTheme.textStyle),this._needAxisTrigger=!1,"axis"===this.option.tooltip.trigger&&(this._needAxisTrigger=!0);for(var e=this.option.series,i=0,o=e.length;o>i;i++)if("axis"===this.query(e[i],"tooltip.trigger")){this._needAxisTrigger=!0;break}this._showDelay=this.option.tooltip.showDelay,this._hideDelay=this.option.tooltip.hideDelay,this._defaultCssText=this._style(this.option.tooltip),this._setSelectedMap(),this._axisLineWidth=this.option.tooltip.axisPointer.lineStyle.width,this._enterable=this.option.tooltip.enterable}if(this.showing){var s=this;setTimeout(function(){s.zr.trigger(l.EVENT.MOUSEMOVE,s.zr.handler._event)},50)}},onbeforDispose:function(){this._lastTipShape&&this._lastTipShape.tipShape.length>0&&this.zr.delShape(this._lastTipShape.tipShape),clearTimeout(this._hidingTicket),clearTimeout(this._showingTicket),this.zr.un(l.EVENT.MOUSEMOVE,this._onmousemove),this.zr.un(l.EVENT.GLOBALOUT,this._onglobalout),this.hasAppend&&this.dom.firstChild&&this.dom.firstChild.removeChild(this._tDom),this._tDom=null},_encodeHTML:function(t){return String(t).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}},u.inherits(e,i),t("../component").define("tooltip",e),e}),i("zrender/tool/vector",[],function(){var t="undefined"==typeof Float32Array?Array:Float32Array,e={create:function(e,i){var o=new t(2);return o[0]=e||0,o[1]=i||0,o},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t},clone:function(e){var i=new t(2);return i[0]=e[0],i[1]=e[1],i},set:function(t,e,i){return t[0]=e,t[1]=i,t},add:function(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t},scaleAndAdd:function(t,e,i,o){return t[0]=e[0]+i[0]*o,t[1]=e[1]+i[1]*o,t},sub:function(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t},len:function(t){return Math.sqrt(this.lenSquare(t))},lenSquare:function(t){return t[0]*t[0]+t[1]*t[1]},mul:function(t,e,i){return t[0]=e[0]*i[0],t[1]=e[1]*i[1],t},div:function(t,e,i){return t[0]=e[0]/i[0],t[1]=e[1]/i[1],t},dot:function(t,e){return t[0]*e[0]+t[1]*e[1]},scale:function(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t},normalize:function(t,i){var o=e.len(i);return 0===o?(t[0]=0,t[1]=0):(t[0]=i[0]/o,t[1]=i[1]/o),t},distance:function(t,e){return Math.sqrt((t[0]-e[0])*(t[0]-e[0])+(t[1]-e[1])*(t[1]-e[1]))},distanceSquare:function(t,e){return(t[0]-e[0])*(t[0]-e[0])+(t[1]-e[1])*(t[1]-e[1])},negate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t},lerp:function(t,e,i,o){return t[0]=e[0]+o*(i[0]-e[0]),t[1]=e[1]+o*(i[1]-e[1]),t},applyTransform:function(t,e,i){var o=e[0],s=e[1];return t[0]=i[0]*o+i[2]*s+i[4],t[1]=i[1]*o+i[3]*s+i[5],t},min:function(t,e,i){return t[0]=Math.min(e[0],i[0]),t[1]=Math.min(e[1],i[1]),t},max:function(t,e,i){return t[0]=Math.max(e[0],i[0]),t[1]=Math.max(e[1],i[1]),t}};return e.length=e.len,e.lengthSquare=e.lenSquare,e.dist=e.distance,e.distSquare=e.distanceSquare,e}),i("zrender/tool/curve",["require","./vector"],function(t){function e(t){return t>-m&&m>t}function i(t){return t>m||-m>t}function o(t,e,i,o,s){var n=1-s;return n*n*(n*t+3*s*e)+s*s*(s*o+3*n*i)}function s(t,e,i,o,s){var n=1-s;return 3*(((e-t)*n+2*(i-e)*s)*n+(o-i)*s*s)}function n(t,i,o,s,n,r){var a=s+3*(i-o)-t,h=3*(o-2*i+t),l=3*(i-t),d=t-n,c=h*h-3*a*l,p=h*l-9*a*d,u=l*l-3*h*d,g=0;if(e(c)&&e(p))if(e(h))r[0]=0;else{var f=-l/h;f>=0&&1>=f&&(r[g++]=f)}else{var m=p*p-4*c*u;if(e(m)){var x=p/c,f=-h/a+x,v=-x/2;f>=0&&1>=f&&(r[g++]=f),v>=0&&1>=v&&(r[g++]=v)}else if(m>0){var b=Math.sqrt(m),S=c*h+1.5*a*(-p+b),T=c*h+1.5*a*(-p-b);S=0>S?-Math.pow(-S,y):Math.pow(S,y),T=0>T?-Math.pow(-T,y):Math.pow(T,y);var f=(-h-(S+T))/(3*a);f>=0&&1>=f&&(r[g++]=f)}else{var z=(2*c*h-3*a*p)/(2*Math.sqrt(c*c*c)),C=Math.acos(z)/3,w=Math.sqrt(c),L=Math.cos(C),f=(-h-2*w*L)/(3*a),v=(-h+w*(L+_*Math.sin(C)))/(3*a),E=(-h+w*(L-_*Math.sin(C)))/(3*a);f>=0&&1>=f&&(r[g++]=f),v>=0&&1>=v&&(r[g++]=v),E>=0&&1>=E&&(r[g++]=E)}}return g}function r(t,o,s,n,r){var a=6*s-12*o+6*t,h=9*o+3*n-3*t-9*s,l=3*o-3*t,d=0;if(e(h)){if(i(a)){var c=-l/a;c>=0&&1>=c&&(r[d++]=c)}}else{var p=a*a-4*h*l;if(e(p))r[0]=-a/(2*h);else if(p>0){var u=Math.sqrt(p),c=(-a+u)/(2*h),g=(-a-u)/(2*h);c>=0&&1>=c&&(r[d++]=c),g>=0&&1>=g&&(r[d++]=g)}}return d}function a(t,e,i,o,s,n){var r=(e-t)*s+t,a=(i-e)*s+e,h=(o-i)*s+i,l=(a-r)*s+r,d=(h-a)*s+a,c=(d-l)*s+l;n[0]=t,n[1]=r,n[2]=l,n[3]=c,n[4]=c,n[5]=d,n[6]=h,n[7]=o}function h(t,e,i,s,n,r,a,h,l,d,c){var p,u=.005,g=1/0;x[0]=l,x[1]=d;for(var _=0;1>_;_+=.05){v[0]=o(t,i,n,a,_),v[1]=o(e,s,r,h,_);var y=f.distSquare(x,v);g>y&&(p=_,g=y)}g=1/0;for(var S=0;32>S&&!(m>u);S++){var T=p-u,z=p+u;v[0]=o(t,i,n,a,T),v[1]=o(e,s,r,h,T);var y=f.distSquare(v,x);if(T>=0&&g>y)p=T,g=y;else{b[0]=o(t,i,n,a,z),b[1]=o(e,s,r,h,z);var C=f.distSquare(b,x);1>=z&&g>C?(p=z,g=C):u*=.5}}return c&&(c[0]=o(t,i,n,a,p),c[1]=o(e,s,r,h,p)),Math.sqrt(g)}function l(t,e,i,o){var s=1-o;return s*(s*t+2*o*e)+o*o*i}function d(t,e,i,o){return 2*((1-o)*(e-t)+o*(i-e))}function c(t,o,s,n,r){var a=t-2*o+s,h=2*(o-t),l=t-n,d=0;if(e(a)){if(i(h)){var c=-l/h;c>=0&&1>=c&&(r[d++]=c)}}else{var p=h*h-4*a*l;if(e(p)){var c=-h/(2*a);c>=0&&1>=c&&(r[d++]=c)}else if(p>0){var u=Math.sqrt(p),c=(-h+u)/(2*a),g=(-h-u)/(2*a);c>=0&&1>=c&&(r[d++]=c),g>=0&&1>=g&&(r[d++]=g)}}return d}function p(t,e,i){var o=t+i-2*e;return 0===o?.5:(t-e)/o}function u(t,e,i,o,s){var n=(e-t)*o+t,r=(i-e)*o+e,a=(r-n)*o+n;s[0]=t,s[1]=n,s[2]=a,s[3]=a,s[4]=r,s[5]=i}function g(t,e,i,o,s,n,r,a,h){var d,c=.005,p=1/0;x[0]=r,x[1]=a;for(var u=0;1>u;u+=.05){v[0]=l(t,i,s,u),v[1]=l(e,o,n,u);var g=f.distSquare(x,v);p>g&&(d=u,p=g)}p=1/0;for(var _=0;32>_&&!(m>c);_++){var y=d-c,S=d+c;v[0]=l(t,i,s,y),v[1]=l(e,o,n,y);var g=f.distSquare(v,x);if(y>=0&&p>g)d=y,p=g;else{b[0]=l(t,i,s,S),b[1]=l(e,o,n,S);var T=f.distSquare(b,x);1>=S&&p>T?(d=S,p=T):c*=.5}}return h&&(h[0]=l(t,i,s,d),h[1]=l(e,o,n,d)),Math.sqrt(p)}var f=t("./vector"),m=1e-4,_=Math.sqrt(3),y=1/3,x=f.create(),v=f.create(),b=f.create();return{cubicAt:o,cubicDerivativeAt:s,cubicRootAt:n,cubicExtrema:r,cubicSubdivide:a,cubicProjectPoint:h,quadraticAt:l,quadraticDerivativeAt:d,quadraticRootAt:c,quadraticExtremum:p,quadraticSubdivide:u,quadraticProjectPoint:g}}),i("zrender/Layer",["require","./mixin/Transformable","./tool/util","./config"],function(t){function e(){return!1}function i(t,e,i){var o=document.createElement(e),s=i.getWidth(),n=i.getHeight();return o.style.position="absolute",o.style.left=0,o.style.top=0,o.style.width=s+"px",o.style.height=n+"px",o.width=s*r.devicePixelRatio,o.height=n*r.devicePixelRatio,o.setAttribute("data-zr-dom-id",t),o}var o=t("./mixin/Transformable"),s=t("./tool/util"),n=window.G_vmlCanvasManager,r=t("./config"),a=function(t,s){this.id=t,this.dom=i(t,"canvas",s),this.dom.onselectstart=e,this.dom.style["-webkit-user-select"]="none",this.dom.style["user-select"]="none",this.dom.style["-webkit-touch-callout"]="none",this.dom.style["-webkit-tap-highlight-color"]="rgba(0,0,0,0)",n&&n.initElement(this.dom),this.domBack=null,this.ctxBack=null,this.painter=s,this.unusedCount=0,this.config=null,this.dirty=!0,this.elCount=0,this.clearColor=0,this.motionBlur=!1,this.lastFrameAlpha=.7,this.zoomable=!1,this.panable=!1,this.maxZoom=1/0,this.minZoom=0,o.call(this)};return a.prototype.initContext=function(){this.ctx=this.dom.getContext("2d");var t=r.devicePixelRatio;1!=t&&this.ctx.scale(t,t)},a.prototype.createBackBuffer=function(){if(!n){this.domBack=i("back-"+this.id,"canvas",this.painter),this.ctxBack=this.domBack.getContext("2d");var t=r.devicePixelRatio;1!=t&&this.ctxBack.scale(t,t)}},a.prototype.resize=function(t,e){var i=r.devicePixelRatio;this.dom.style.width=t+"px",this.dom.style.height=e+"px",this.dom.setAttribute("width",t*i),this.dom.setAttribute("height",e*i),1!=i&&this.ctx.scale(i,i),this.domBack&&(this.domBack.setAttribute("width",t*i),this.domBack.setAttribute("height",e*i),1!=i&&this.ctxBack.scale(i,i))},a.prototype.clear=function(){var t=this.dom,e=this.ctx,i=t.width,o=t.height,s=this.clearColor&&!n,a=this.motionBlur&&!n,h=this.lastFrameAlpha,l=r.devicePixelRatio;if(a&&(this.domBack||this.createBackBuffer(),this.ctxBack.globalCompositeOperation="copy",this.ctxBack.drawImage(t,0,0,i/l,o/l)),e.clearRect(0,0,i/l,o/l),s&&(e.save(),e.fillStyle=this.clearColor,e.fillRect(0,0,i/l,o/l),e.restore()),a){var d=this.domBack;e.save(),e.globalAlpha=h,e.drawImage(d,0,0,i/l,o/l),e.restore()}},s.merge(a.prototype,o.prototype),a}),i("zrender/loadingEffect/Base",["require","../tool/util","../shape/Text","../shape/Rectangle"],function(t){function e(t){this.setOptions(t)}var i=t("../tool/util"),o=t("../shape/Text"),s=t("../shape/Rectangle"),n="Loading...",r="normal 16px Arial";return e.prototype.createTextShape=function(t){return new o({highlightStyle:i.merge({x:this.canvasWidth/2,y:this.canvasHeight/2,text:n,textAlign:"center",textBaseline:"middle",textFont:r,color:"#333",brushType:"fill"},t,!0)})},e.prototype.createBackgroundShape=function(t){return new s({highlightStyle:{x:0,y:0,width:this.canvasWidth,height:this.canvasHeight,brushType:"fill",color:t}})},e.prototype.start=function(t){function e(e){t.storage.addHover(e)}function i(){t.refreshHover()}this.canvasWidth=t._width,this.canvasHeight=t._height,this.loadingTimer=this._start(e,i)},e.prototype._start=function(){return setInterval(function(){},1e4)},e.prototype.stop=function(){clearInterval(this.loadingTimer)},e.prototype.setOptions=function(t){this.options=t||{}},e.prototype.adjust=function(t,e){return t<=e[0]?t=e[0]:t>=e[1]&&(t=e[1]),t},e.prototype.getLocation=function(t,e,i){var o=null!=t.x?t.x:"center";switch(o){case"center":o=Math.floor((this.canvasWidth-e)/2);break;case"left":o=0;break;case"right":o=this.canvasWidth-e}var s=null!=t.y?t.y:"center";switch(s){case"center":s=Math.floor((this.canvasHeight-i)/2);break;case"top":s=0;break;case"bottom":s=this.canvasHeight-i}return{x:o,y:s,width:e,height:i}},e}),i("zrender/shape/Heart",["require","./Base","./util/PathProxy","../tool/area","../tool/util"],function(t){"use strict";var e=t("./Base"),i=t("./util/PathProxy"),o=t("../tool/area"),s=function(t){e.call(this,t),this._pathProxy=new i};return s.prototype={type:"heart",buildPath:function(t,e){var o=this._pathProxy||new i;o.begin(t),o.moveTo(e.x,e.y),o.bezierCurveTo(e.x+e.a/2,e.y-2*e.b/3,e.x+2*e.a,e.y+e.b/3,e.x,e.y+e.b),o.bezierCurveTo(e.x-2*e.a,e.y+e.b/3,e.x-e.a/2,e.y-2*e.b/3,e.x,e.y),o.closePath()},getRect:function(t){return t.__rect?t.__rect:(this._pathProxy.isEmpty()||this.buildPath(null,t),this._pathProxy.fastBoundingRect())},isCover:function(t,e){var i=this.transformCoordToLocal(t,e);return t=i[0],e=i[1],this.isCoverRect(t,e)?o.isInsidePath(this._pathProxy.pathCommands,this.style.lineWidth,this.style.brushType,t,e):void 0}},t("../tool/util").inherits(s,e),s}),i("zrender/shape/Droplet",["require","./Base","./util/PathProxy","../tool/area","../tool/util"],function(t){"use strict";var e=t("./Base"),i=t("./util/PathProxy"),o=t("../tool/area"),s=function(t){e.call(this,t),this._pathProxy=new i};return s.prototype={type:"droplet",buildPath:function(t,e){var o=this._pathProxy||new i;o.begin(t),o.moveTo(e.x,e.y+e.a),o.bezierCurveTo(e.x+e.a,e.y+e.a,e.x+3*e.a/2,e.y-e.a/3,e.x,e.y-e.b),o.bezierCurveTo(e.x-3*e.a/2,e.y-e.a/3,e.x-e.a,e.y+e.a,e.x,e.y+e.a),o.closePath()},getRect:function(t){return t.__rect?t.__rect:(this._pathProxy.isEmpty()||this.buildPath(null,t),this._pathProxy.fastBoundingRect())},isCover:function(t,e){var i=this.transformCoordToLocal(t,e);return t=i[0],e=i[1],this.isCoverRect(t,e)?o.isInsidePath(this._pathProxy.pathCommands,this.style.lineWidth,this.style.brushType,t,e):void 0}},t("../tool/util").inherits(s,e),s}),i("zrender/shape/Star",["require","../tool/math","./Base","../tool/util"],function(t){var e=t("../tool/math"),i=e.sin,o=e.cos,s=Math.PI,n=t("./Base"),r=function(t){n.call(this,t)};return r.prototype={type:"star",buildPath:function(t,e){var n=e.n;if(n&&!(2>n)){var r=e.x,a=e.y,h=e.r,l=e.r0;null==l&&(l=n>4?h*o(2*s/n)/o(s/n):h/3);var d=s/n,c=-s/2,p=r+h*o(c),u=a+h*i(c);c+=d;var g=e.pointList=[];g.push([p,u]);for(var f,m=0,_=2*n-1;_>m;m++)f=m%2===0?l:h,g.push([r+f*o(c),a+f*i(c)]),c+=d;g.push([p,u]),t.moveTo(g[0][0],g[0][1]);for(var m=0;m<g.length;m++)t.lineTo(g[m][0],g[m][1]);t.closePath()}},getRect:function(t){if(t.__rect)return t.__rect;var e;return e="stroke"==t.brushType||"fill"==t.brushType?t.lineWidth||1:0,t.__rect={x:Math.round(t.x-t.r-e/2),y:Math.round(t.y-t.r-e/2),width:2*t.r+e,height:2*t.r+e},t.__rect}},t("../tool/util").inherits(r,n),r}),i("zrender/Group",["require","./tool/guid","./tool/util","./mixin/Transformable","./mixin/Eventful"],function(t){var e=t("./tool/guid"),i=t("./tool/util"),o=t("./mixin/Transformable"),s=t("./mixin/Eventful"),n=function(t){t=t||{},this.id=t.id||e();for(var i in t)this[i]=t[i];this.type="group",this.clipShape=null,this._children=[],this._storage=null,this.__dirty=!0,o.call(this),s.call(this)};return n.prototype.ignore=!1,n.prototype.children=function(){return this._children.slice()},n.prototype.childAt=function(t){return this._children[t]},n.prototype.addChild=function(t){t!=this&&t.parent!=this&&(t.parent&&t.parent.removeChild(t),this._children.push(t),t.parent=this,this._storage&&this._storage!==t._storage&&(this._storage.addToMap(t),t instanceof n&&t.addChildrenToStorage(this._storage)))},n.prototype.removeChild=function(t){var e=i.indexOf(this._children,t);e>=0&&this._children.splice(e,1),t.parent=null,this._storage&&(this._storage.delFromMap(t.id),t instanceof n&&t.delChildrenFromStorage(this._storage))},n.prototype.clearChildren=function(){for(var t=0;t<this._children.length;t++){var e=this._children[t];this._storage&&(this._storage.delFromMap(e.id),e instanceof n&&e.delChildrenFromStorage(this._storage))}this._children.length=0},n.prototype.eachChild=function(t,e){for(var i=!!e,o=0;o<this._children.length;o++){var s=this._children[o];i?t.call(e,s):t(s)}},n.prototype.traverse=function(t,e){for(var i=!!e,o=0;o<this._children.length;o++){var s=this._children[o];i?t.call(e,s):t(s),"group"===s.type&&s.traverse(t,e)}},n.prototype.addChildrenToStorage=function(t){for(var e=0;e<this._children.length;e++){var i=this._children[e];t.addToMap(i),i instanceof n&&i.addChildrenToStorage(t)}},n.prototype.delChildrenFromStorage=function(t){for(var e=0;e<this._children.length;e++){var i=this._children[e];t.delFromMap(i.id),i instanceof n&&i.delChildrenFromStorage(t)}},n.prototype.modSelf=function(){this.__dirty=!0},i.merge(n.prototype,o.prototype,!0),i.merge(n.prototype,s.prototype,!0),n}),i("zrender/shape/util/PathProxy",["require","../../tool/vector"],function(t){var e=t("../../tool/vector"),i=function(t,e){this.command=t,this.points=e||null},o=function(){this.pathCommands=[],this._ctx=null,this._min=[],this._max=[]};return o.prototype.fastBoundingRect=function(){var t=this._min,i=this._max;t[0]=t[1]=1/0,i[0]=i[1]=-1/0;for(var o=0;o<this.pathCommands.length;o++){var s=this.pathCommands[o],n=s.points;switch(s.command){case"M":e.min(t,t,n),e.max(i,i,n);break;case"L":e.min(t,t,n),e.max(i,i,n);break;case"C":for(var r=0;6>r;r+=2)t[0]=Math.min(t[0],t[0],n[r]),t[1]=Math.min(t[1],t[1],n[r+1]),i[0]=Math.max(i[0],i[0],n[r]),i[1]=Math.max(i[1],i[1],n[r+1]);break;case"Q":for(var r=0;4>r;r+=2)t[0]=Math.min(t[0],t[0],n[r]),t[1]=Math.min(t[1],t[1],n[r+1]),i[0]=Math.max(i[0],i[0],n[r]),i[1]=Math.max(i[1],i[1],n[r+1]);break;case"A":var a=n[0],h=n[1],l=n[2],d=n[3];t[0]=Math.min(t[0],t[0],a-l),t[1]=Math.min(t[1],t[1],h-d),i[0]=Math.max(i[0],i[0],a+l),i[1]=Math.max(i[1],i[1],h+d)}}return{x:t[0],y:t[1],width:i[0]-t[0],height:i[1]-t[1]}},o.prototype.begin=function(t){return this._ctx=t||null,this.pathCommands.length=0,this},o.prototype.moveTo=function(t,e){return this.pathCommands.push(new i("M",[t,e])),this._ctx&&this._ctx.moveTo(t,e),this},o.prototype.lineTo=function(t,e){return this.pathCommands.push(new i("L",[t,e])),this._ctx&&this._ctx.lineTo(t,e),this},o.prototype.bezierCurveTo=function(t,e,o,s,n,r){return this.pathCommands.push(new i("C",[t,e,o,s,n,r])),this._ctx&&this._ctx.bezierCurveTo(t,e,o,s,n,r),this},o.prototype.quadraticCurveTo=function(t,e,o,s){return this.pathCommands.push(new i("Q",[t,e,o,s])),this._ctx&&this._ctx.quadraticCurveTo(t,e,o,s),this},o.prototype.arc=function(t,e,o,s,n,r){return this.pathCommands.push(new i("A",[t,e,o,o,s,n-s,0,r?0:1])),this._ctx&&this._ctx.arc(t,e,o,s,n,r),this},o.prototype.arcTo=function(t,e,i,o,s){return this._ctx&&this._ctx.arcTo(t,e,i,o,s),this},o.prototype.rect=function(t,e,i,o){return this._ctx&&this._ctx.rect(t,e,i,o),this},o.prototype.closePath=function(){return this.pathCommands.push(new i("z")),this._ctx&&this._ctx.closePath(),this},o.prototype.isEmpty=function(){return 0===this.pathCommands.length},o.PathSegment=i,o}),i("zrender/shape/BezierCurve",["require","./Base","../tool/util"],function(t){"use strict";var e=t("./Base"),i=function(t){this.brushTypeOnly="stroke",this.textPosition="end",e.call(this,t)};return i.prototype={type:"bezier-curve",buildPath:function(t,e){t.moveTo(e.xStart,e.yStart),"undefined"!=typeof e.cpX2&&"undefined"!=typeof e.cpY2?t.bezierCurveTo(e.cpX1,e.cpY1,e.cpX2,e.cpY2,e.xEnd,e.yEnd):t.quadraticCurveTo(e.cpX1,e.cpY1,e.xEnd,e.yEnd)},getRect:function(t){if(t.__rect)return t.__rect;var e=Math.min(t.xStart,t.xEnd,t.cpX1),i=Math.min(t.yStart,t.yEnd,t.cpY1),o=Math.max(t.xStart,t.xEnd,t.cpX1),s=Math.max(t.yStart,t.yEnd,t.cpY1),n=t.cpX2,r=t.cpY2;"undefined"!=typeof n&&"undefined"!=typeof r&&(e=Math.min(e,n),i=Math.min(i,r),o=Math.max(o,n),s=Math.max(s,r));var a=t.lineWidth||1;return t.__rect={x:e-a,y:i-a,width:o-e+a,height:s-i+a},t.__rect}},t("../tool/util").inherits(i,e),i}),i("zrender/shape/util/dashedLineTo",[],function(){var t=[5,5];return function(e,i,o,s,n,r){if(e.setLineDash)return t[0]=t[1]=r,e.setLineDash(t),e.moveTo(i,o),void e.lineTo(s,n);r="number"!=typeof r?5:r;var a=s-i,h=n-o,l=Math.floor(Math.sqrt(a*a+h*h)/r);a/=l,h/=l;for(var d=!0,c=0;l>c;++c)d?e.moveTo(i,o):e.lineTo(i,o),d=!d,i+=a,o+=h;e.lineTo(s,n)}}),i("zrender/animation/Clip",["require","./easing"],function(t){function e(t){this._targetPool=t.target||{},this._targetPool instanceof Array||(this._targetPool=[this._targetPool]),this._life=t.life||1e3,this._delay=t.delay||0,this._startTime=(new Date).getTime()+this._delay,this._endTime=this._startTime+1e3*this._life,this.loop="undefined"==typeof t.loop?!1:t.loop,this.gap=t.gap||0,this.easing=t.easing||"Linear",this.onframe=t.onframe,this.ondestroy=t.ondestroy,this.onrestart=t.onrestart}var i=t("./easing");return e.prototype={step:function(t){var e=(t-this._startTime)/this._life;if(!(0>e)){e=Math.min(e,1);var o="string"==typeof this.easing?i[this.easing]:this.easing,s="function"==typeof o?o(e):e;return this.fire("frame",s),1==e?this.loop?(this.restart(),"restart"):(this._needsRemove=!0,"destroy"):null}},restart:function(){var t=(new Date).getTime(),e=(t-this._startTime)%this._life;this._startTime=(new Date).getTime()-e+this.gap,this._needsRemove=!1},fire:function(t,e){for(var i=0,o=this._targetPool.length;o>i;i++)this["on"+t]&&this["on"+t](this._targetPool[i],e)},constructor:e},e}),i("zrender/shape/Polygon",["require","./Base","./util/smoothSpline","./util/smoothBezier","./util/dashedLineTo","../tool/util"],function(t){var e=t("./Base"),i=t("./util/smoothSpline"),o=t("./util/smoothBezier"),s=t("./util/dashedLineTo"),n=function(t){e.call(this,t)};return n.prototype={type:"polygon",buildPath:function(t,e){var n=e.pointList;if(!(n.length<2)){if(e.smooth&&"spline"!==e.smooth){var r=o(n,e.smooth,!0,e.smoothConstraint);t.moveTo(n[0][0],n[0][1]);for(var a,h,l,d=n.length,c=0;d>c;c++)a=r[2*c],h=r[2*c+1],l=n[(c+1)%d],t.bezierCurveTo(a[0],a[1],h[0],h[1],l[0],l[1])}else if("spline"===e.smooth&&(n=i(n,!0)),e.lineType&&"solid"!=e.lineType){if("dashed"==e.lineType||"dotted"==e.lineType){var p=e._dashLength||(e.lineWidth||1)*("dashed"==e.lineType?5:1);e._dashLength=p,t.moveTo(n[0][0],n[0][1]);for(var c=1,u=n.length;u>c;c++)s(t,n[c-1][0],n[c-1][1],n[c][0],n[c][1],p);s(t,n[n.length-1][0],n[n.length-1][1],n[0][0],n[0][1],p)}}else{t.moveTo(n[0][0],n[0][1]);for(var c=1,u=n.length;u>c;c++)t.lineTo(n[c][0],n[c][1]);t.lineTo(n[0][0],n[0][1])}t.closePath()}},getRect:function(t){if(t.__rect)return t.__rect;for(var e=Number.MAX_VALUE,i=Number.MIN_VALUE,o=Number.MAX_VALUE,s=Number.MIN_VALUE,n=t.pointList,r=0,a=n.length;a>r;r++)n[r][0]<e&&(e=n[r][0]),n[r][0]>i&&(i=n[r][0]),n[r][1]<o&&(o=n[r][1]),n[r][1]>s&&(s=n[r][1]);var h;return h="stroke"==t.brushType||"fill"==t.brushType?t.lineWidth||1:0,t.__rect={x:Math.round(e-h/2),y:Math.round(o-h/2),width:i-e+h,height:s-o+h},t.__rect}},t("../tool/util").inherits(n,e),n}),i("echarts/util/shape/normalIsCover",[],function(){return function(t,e){var i=this.transformCoordToLocal(t,e);return t=i[0],e=i[1],this.isCoverRect(t,e)}}),i("zrender/animation/easing",[],function(){var t={Linear:function(t){return t},QuadraticIn:function(t){return t*t},QuadraticOut:function(t){return t*(2-t)},QuadraticInOut:function(t){return(t*=2)<1?.5*t*t:-.5*(--t*(t-2)-1)},CubicIn:function(t){return t*t*t},CubicOut:function(t){return--t*t*t+1},CubicInOut:function(t){return(t*=2)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},QuarticIn:function(t){return t*t*t*t},QuarticOut:function(t){return 1- --t*t*t*t},QuarticInOut:function(t){return(t*=2)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)},QuinticIn:function(t){return t*t*t*t*t},QuinticOut:function(t){return--t*t*t*t*t+1},QuinticInOut:function(t){return(t*=2)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},SinusoidalIn:function(t){return 1-Math.cos(t*Math.PI/2)},SinusoidalOut:function(t){return Math.sin(t*Math.PI/2)},SinusoidalInOut:function(t){return.5*(1-Math.cos(Math.PI*t))},ExponentialIn:function(t){return 0===t?0:Math.pow(1024,t-1)},ExponentialOut:function(t){return 1===t?1:1-Math.pow(2,-10*t)},ExponentialInOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?.5*Math.pow(1024,t-1):.5*(-Math.pow(2,-10*(t-1))+2)},CircularIn:function(t){return 1-Math.sqrt(1-t*t)},CircularOut:function(t){return Math.sqrt(1- --t*t)},CircularInOut:function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},ElasticIn:function(t){var e,i=.1,o=.4;return 0===t?0:1===t?1:(!i||1>i?(i=1,e=o/4):e=o*Math.asin(1/i)/(2*Math.PI),-(i*Math.pow(2,10*(t-=1))*Math.sin(2*(t-e)*Math.PI/o)))},ElasticOut:function(t){var e,i=.1,o=.4;return 0===t?0:1===t?1:(!i||1>i?(i=1,e=o/4):e=o*Math.asin(1/i)/(2*Math.PI),i*Math.pow(2,-10*t)*Math.sin(2*(t-e)*Math.PI/o)+1)},ElasticInOut:function(t){var e,i=.1,o=.4;return 0===t?0:1===t?1:(!i||1>i?(i=1,e=o/4):e=o*Math.asin(1/i)/(2*Math.PI),(t*=2)<1?-.5*i*Math.pow(2,10*(t-=1))*Math.sin(2*(t-e)*Math.PI/o):i*Math.pow(2,-10*(t-=1))*Math.sin(2*(t-e)*Math.PI/o)*.5+1)},BackIn:function(t){var e=1.70158;return t*t*((e+1)*t-e)},BackOut:function(t){var e=1.70158;return--t*t*((e+1)*t+e)+1},BackInOut:function(t){var e=2.5949095;return(t*=2)<1?.5*t*t*((e+1)*t-e):.5*((t-=2)*t*((e+1)*t+e)+2)},BounceIn:function(e){return 1-t.BounceOut(1-e)},BounceOut:function(t){return 1/2.75>t?7.5625*t*t:2/2.75>t?7.5625*(t-=1.5/2.75)*t+.75:2.5/2.75>t?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},BounceInOut:function(e){return.5>e?.5*t.BounceIn(2*e):.5*t.BounceOut(2*e-1)+.5}};return t}),i("zrender/shape/util/smoothBezier",["require","../../tool/vector"],function(t){var e=t("../../tool/vector");return function(t,i,o,s){var n,r,a,h,l=[],d=[],c=[],p=[],u=!!s;if(u){a=[1/0,1/0],h=[-1/0,-1/0];for(var g=0,f=t.length;f>g;g++)e.min(a,a,t[g]),e.max(h,h,t[g]);e.min(a,a,s[0]),e.max(h,h,s[1])}for(var g=0,f=t.length;f>g;g++){var n,r,m=t[g];if(o)n=t[g?g-1:f-1],r=t[(g+1)%f];else{if(0===g||g===f-1){l.push(e.clone(t[g]));continue}n=t[g-1],r=t[g+1]}e.sub(d,r,n),e.scale(d,d,i);var _=e.distance(m,n),y=e.distance(m,r),x=_+y;0!==x&&(_/=x,y/=x),e.scale(c,d,-_),e.scale(p,d,y);var v=e.add([],m,c),b=e.add([],m,p);u&&(e.max(v,v,a),e.min(v,v,h),e.max(b,b,a),e.min(b,b,h)),l.push(v),l.push(b)}return o&&l.push(e.clone(l.shift())),l}}),i("zrender/shape/util/smoothSpline",["require","../../tool/vector"],function(t){function e(t,e,i,o,s,n,r){var a=.5*(i-t),h=.5*(o-e);return(2*(e-i)+a+h)*r+(-3*(e-i)-2*a-h)*n+a*s+e}var i=t("../../tool/vector");return function(t,o){for(var s=t.length,n=[],r=0,a=1;s>a;a++)r+=i.distance(t[a-1],t[a]);var h=r/5;h=s>h?s:h;for(var a=0;h>a;a++){var l,d,c,p=a/(h-1)*(o?s:s-1),u=Math.floor(p),g=p-u,f=t[u%s];o?(l=t[(u-1+s)%s],d=t[(u+1)%s],c=t[(u+2)%s]):(l=t[0===u?u:u-1],d=t[u>s-2?s-1:u+1],c=t[u>s-3?s-1:u+2]);var m=g*g,_=g*m;n.push([e(l[0],f[0],d[0],c[0],g,m,_),e(l[1],f[1],d[1],c[1],g,m,_)])}return n}}),i("echarts/util/ecQuery",["require","zrender/tool/util"],function(t){function e(t,e){if("undefined"!=typeof t){if(!e)return t;e=e.split(".");for(var i=e.length,o=0;i>o;){if(t=t[e[o]],"undefined"==typeof t)return;o++}return t}}function i(t,i){for(var o,s=0,n=t.length;n>s;s++)if(o=e(t[s],i),"undefined"!=typeof o)return o}function o(t,i){for(var o,n=t.length;n--;){var r=e(t[n],i);"undefined"!=typeof r&&("undefined"==typeof o?o=s.clone(r):s.merge(o,r,!0))}return o}var s=t("zrender/tool/util");return{query:e,deepQuery:i,deepMerge:o}}),i("echarts/util/number",[],function(){function t(t){return t.replace(/^\s+/,"").replace(/\s+$/,"")}function e(e,i){return"string"==typeof e?t(e).match(/%$/)?parseFloat(e)/100*i:parseFloat(e):e}function i(t,i){return[e(i[0],t.getWidth()),e(i[1],t.getHeight())]}function o(t,i){i instanceof Array||(i=[0,i]);var o=Math.min(t.getWidth(),t.getHeight())/2;return[e(i[0],o),e(i[1],o)]}function s(t){return isNaN(t)?"-":(t=(t+"").split("."),t[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g,"$1,")+(t.length>1?"."+t[1]:""))}return{parsePercent:e,parseCenter:i,parseRadius:o,addCommas:s}}),i("echarts/data/KDTree",["require","./quickSelect"],function(t){function e(t,e){this.left=null,this.right=null,this.axis=t,this.data=e}var i=t("./quickSelect"),o=function(t,e){t.length&&(e||(e=t[0].array.length),this.dimension=e,this.root=this._buildTree(t,0,t.length-1,0),this._stack=[],this._nearstNList=[])};return o.prototype._buildTree=function(t,o,s,n){if(o>s)return null;var r=Math.floor((o+s)/2);r=i(t,o,s,r,function(t,e){return t.array[n]-e.array[n]});var a=t[r],h=new e(n,a);return n=(n+1)%this.dimension,s>o&&(h.left=this._buildTree(t,o,r-1,n),h.right=this._buildTree(t,r+1,s,n)),h},o.prototype.nearest=function(t,e){var i=this.root,o=this._stack,s=0,n=1/0,r=null;for(i.data!==t&&(n=e(i.data,t),r=i),t.array[i.axis]<i.data.array[i.axis]?(i.right&&(o[s++]=i.right),i.left&&(o[s++]=i.left)):(i.left&&(o[s++]=i.left),i.right&&(o[s++]=i.right));s--;){i=o[s];var a=t.array[i.axis]-i.data.array[i.axis],h=0>a,l=!1;a*=a,n>a&&(a=e(i.data,t),n>a&&i.data!==t&&(n=a,r=i),l=!0),h?(l&&i.right&&(o[s++]=i.right),i.left&&(o[s++]=i.left)):(l&&i.left&&(o[s++]=i.left),i.right&&(o[s++]=i.right))}return r.data},o.prototype._addNearest=function(t,e,i){for(var o=this._nearstNList,s=t-1;s>0&&!(e>=o[s-1].dist);s--)o[s].dist=o[s-1].dist,o[s].node=o[s-1].node;o[s].dist=e,o[s].node=i},o.prototype.nearestN=function(t,e,i,o){if(0>=e)return o.length=0,o;for(var s=this.root,n=this._stack,r=0,a=this._nearstNList,h=0;e>h;h++)a[h]||(a[h]={}),a[h].dist=0,a[h].node=null;var l=i(s.data,t),d=0;for(s.data!==t&&(d++,this._addNearest(d,l,s)),t.array[s.axis]<s.data.array[s.axis]?(s.right&&(n[r++]=s.right),s.left&&(n[r++]=s.left)):(s.left&&(n[r++]=s.left),s.right&&(n[r++]=s.right));r--;){s=n[r];var l=t.array[s.axis]-s.data.array[s.axis],c=0>l,p=!1;
l*=l,(e>d||l<a[d-1].dist)&&(l=i(s.data,t),(e>d||l<a[d-1].dist)&&s.data!==t&&(e>d&&d++,this._addNearest(d,l,s)),p=!0),c?(p&&s.right&&(n[r++]=s.right),s.left&&(n[r++]=s.left)):(p&&s.left&&(n[r++]=s.left),s.right&&(n[r++]=s.right))}for(var h=0;d>h;h++)o[h]=a[h].node.data;return o.length=d,o},o}),i("echarts/data/quickSelect",["require"],function(){function t(t,e){return t-e}function e(t,e,i){var o=t[e];t[e]=t[i],t[i]=o}function i(t,i,o,s,n){for(var r=i;o>i;){var r=Math.round((o+i)/2),a=t[r];e(t,r,o),r=i;for(var h=i;o-1>=h;h++)n(a,t[h])>=0&&(e(t,h,r),r++);if(e(t,o,r),r===s)return r;s>r?i=r+1:o=r-1}return i}function o(e,o,s,n,r){return arguments.length<=3&&(n=o,r=2==arguments.length?t:s,o=0,s=e.length-1),i(e,o,s,n,r)}return o}),i("echarts/component/dataView",["require","./base","../config","zrender/tool/util","../component"],function(t){function e(t,e,o,s,n){i.call(this,t,e,o,s,n),this.dom=n.dom,this._tDom=document.createElement("div"),this._textArea=document.createElement("textArea"),this._buttonRefresh=document.createElement("button"),this._buttonClose=document.createElement("button"),this._hasShow=!1,this._zrHeight=o.getHeight(),this._zrWidth=o.getWidth(),this._tDom.className="echarts-dataview",this.hide(),this.dom.firstChild.appendChild(this._tDom),window.addEventListener?(this._tDom.addEventListener("click",this._stop),this._tDom.addEventListener("mousewheel",this._stop),this._tDom.addEventListener("mousemove",this._stop),this._tDom.addEventListener("mousedown",this._stop),this._tDom.addEventListener("mouseup",this._stop),this._tDom.addEventListener("touchstart",this._stop),this._tDom.addEventListener("touchmove",this._stop),this._tDom.addEventListener("touchend",this._stop)):(this._tDom.attachEvent("onclick",this._stop),this._tDom.attachEvent("onmousewheel",this._stop),this._tDom.attachEvent("onmousemove",this._stop),this._tDom.attachEvent("onmousedown",this._stop),this._tDom.attachEvent("onmouseup",this._stop))}var i=t("./base"),o=t("../config"),s=t("zrender/tool/util");return e.prototype={type:o.COMPONENT_TYPE_DATAVIEW,_lang:["Data View","close","refresh"],_gCssText:"position:absolute;display:block;overflow:hidden;transition:height 0.8s,background-color 1s;-moz-transition:height 0.8s,background-color 1s;-webkit-transition:height 0.8s,background-color 1s;-o-transition:height 0.8s,background-color 1s;z-index:1;left:0;top:0;",hide:function(){this._sizeCssText="width:"+this._zrWidth+"px;height:0px;background-color:#f0ffff;",this._tDom.style.cssText=this._gCssText+this._sizeCssText},show:function(t){this._hasShow=!0;var e=this.query(this.option,"toolbox.feature.dataView.lang")||this._lang;this.option=t,this._tDom.innerHTML='<p style="padding:8px 0;margin:0 0 10px 0;border-bottom:1px solid #eee">'+(e[0]||this._lang[0])+"</p>";var i=this.query(this.option,"toolbox.feature.dataView.optionToContent");"function"!=typeof i?this._textArea.value=this._optionToContent():(this._textArea=document.createElement("div"),this._textArea.innerHTML=i(this.option)),this._textArea.style.cssText="display:block;margin:0 0 8px 0;padding:4px 6px;overflow:auto;width:100%;height:"+(this._zrHeight-100)+"px;",this._tDom.appendChild(this._textArea),this._buttonClose.style.cssText="float:right;padding:1px 6px;",this._buttonClose.innerHTML=e[1]||this._lang[1];var o=this;this._buttonClose.onclick=function(){o.hide()},this._tDom.appendChild(this._buttonClose),this.query(this.option,"toolbox.feature.dataView.readOnly")===!1?(this._buttonRefresh.style.cssText="float:right;margin-right:10px;padding:1px 6px;",this._buttonRefresh.innerHTML=e[2]||this._lang[2],this._buttonRefresh.onclick=function(){o._save()},this._textArea.readOnly=!1,this._textArea.style.cursor="default"):(this._buttonRefresh.style.cssText="display:none",this._textArea.readOnly=!0,this._textArea.style.cursor="text"),this._tDom.appendChild(this._buttonRefresh),this._sizeCssText="width:"+this._zrWidth+"px;height:"+this._zrHeight+"px;background-color:#fff;",this._tDom.style.cssText=this._gCssText+this._sizeCssText},_optionToContent:function(){var t,e,i,s,n,r,a=[],h="";if(this.option.xAxis)for(a=this.option.xAxis instanceof Array?this.option.xAxis:[this.option.xAxis],t=0,s=a.length;s>t;t++)if("category"==(a[t].type||"category")){for(r=[],e=0,i=a[t].data.length;i>e;e++)r.push(this.getDataFromOption(a[t].data[e]));h+=r.join(", ")+"\n\n"}if(this.option.yAxis)for(a=this.option.yAxis instanceof Array?this.option.yAxis:[this.option.yAxis],t=0,s=a.length;s>t;t++)if("category"==a[t].type){for(r=[],e=0,i=a[t].data.length;i>e;e++)r.push(this.getDataFromOption(a[t].data[e]));h+=r.join(", ")+"\n\n"}var l,d=this.option.series;for(t=0,s=d.length;s>t;t++){for(r=[],e=0,i=d[t].data.length;i>e;e++)n=d[t].data[e],l=d[t].type==o.CHART_TYPE_PIE||d[t].type==o.CHART_TYPE_MAP?(n.name||"-")+":":"",d[t].type==o.CHART_TYPE_SCATTER&&(n=this.getDataFromOption(n).join(", ")),r.push(l+this.getDataFromOption(n));h+=(d[t].name||"-")+" : \n",h+=r.join(d[t].type==o.CHART_TYPE_SCATTER?"\n":", "),h+="\n\n"}return h},_save:function(){var t=this.query(this.option,"toolbox.feature.dataView.contentToOption");if("function"!=typeof t){for(var e=this._textArea.value.split("\n"),i=[],s=0,n=e.length;n>s;s++)e[s]=this._trim(e[s]),""!==e[s]&&i.push(e[s]);this._contentToOption(i)}else t(this._textArea,this.option);this.hide();var r=this;setTimeout(function(){r.messageCenter&&r.messageCenter.dispatch(o.EVENT.DATA_VIEW_CHANGED,null,{option:r.option},r.myChart)},r.canvasSupported?800:100)},_contentToOption:function(t){var e,i,s,n,r,a,h,l=[],d=0;if(this.option.xAxis)for(l=this.option.xAxis instanceof Array?this.option.xAxis:[this.option.xAxis],e=0,n=l.length;n>e;e++)if("category"==(l[e].type||"category")){for(a=t[d].split(","),i=0,s=l[e].data.length;s>i;i++)h=this._trim(a[i]||""),r=l[e].data[i],"undefined"!=typeof l[e].data[i].value?l[e].data[i].value=h:l[e].data[i]=h;d++}if(this.option.yAxis)for(l=this.option.yAxis instanceof Array?this.option.yAxis:[this.option.yAxis],e=0,n=l.length;n>e;e++)if("category"==l[e].type){for(a=t[d].split(","),i=0,s=l[e].data.length;s>i;i++)h=this._trim(a[i]||""),r=l[e].data[i],"undefined"!=typeof l[e].data[i].value?l[e].data[i].value=h:l[e].data[i]=h;d++}var c=this.option.series;for(e=0,n=c.length;n>e;e++)if(d++,c[e].type==o.CHART_TYPE_SCATTER)for(var i=0,s=c[e].data.length;s>i;i++)a=t[d],h=a.replace(" ","").split(","),"undefined"!=typeof c[e].data[i].value?c[e].data[i].value=h:c[e].data[i]=h,d++;else{a=t[d].split(",");for(var i=0,s=c[e].data.length;s>i;i++)h=(a[i]||"").replace(/.*:/,""),h=this._trim(h),h="-"!=h&&""!==h?h-0:"-","undefined"!=typeof c[e].data[i].value?c[e].data[i].value=h:c[e].data[i]=h;d++}},_trim:function(t){var e=new RegExp("(^[\\s\\t\\xa0\\u3000]+)|([\\u3000\\xa0\\s\\t]+$)","g");return t.replace(e,"")},_stop:function(t){t=t||window.event,t.stopPropagation?t.stopPropagation():t.cancelBubble=!0},resize:function(){this._zrHeight=this.zr.getHeight(),this._zrWidth=this.zr.getWidth(),this._tDom.offsetHeight>10&&(this._sizeCssText="width:"+this._zrWidth+"px;height:"+this._zrHeight+"px;background-color:#fff;",this._tDom.style.cssText=this._gCssText+this._sizeCssText,this._textArea.style.cssText="display:block;margin:0 0 8px 0;padding:4px 6px;overflow:auto;width:100%;height:"+(this._zrHeight-100)+"px;")},dispose:function(){window.removeEventListener?(this._tDom.removeEventListener("click",this._stop),this._tDom.removeEventListener("mousewheel",this._stop),this._tDom.removeEventListener("mousemove",this._stop),this._tDom.removeEventListener("mousedown",this._stop),this._tDom.removeEventListener("mouseup",this._stop),this._tDom.removeEventListener("touchstart",this._stop),this._tDom.removeEventListener("touchmove",this._stop),this._tDom.removeEventListener("touchend",this._stop)):(this._tDom.detachEvent("onclick",this._stop),this._tDom.detachEvent("onmousewheel",this._stop),this._tDom.detachEvent("onmousemove",this._stop),this._tDom.detachEvent("onmousedown",this._stop),this._tDom.detachEvent("onmouseup",this._stop)),this._buttonRefresh.onclick=null,this._buttonClose.onclick=null,this._hasShow&&(this._tDom.removeChild(this._textArea),this._tDom.removeChild(this._buttonRefresh),this._tDom.removeChild(this._buttonClose)),this._textArea=null,this._buttonRefresh=null,this._buttonClose=null,this.dom.firstChild.removeChild(this._tDom),this._tDom=null}},s.inherits(e,i),t("../component").define("dataView",e),e}),i("zrender/tool/computeBoundingBox",["require","./vector","./curve"],function(t){function e(t,e,i){if(0!==t.length){for(var o=t[0][0],s=t[0][0],n=t[0][1],r=t[0][1],a=1;a<t.length;a++){var h=t[a];h[0]<o&&(o=h[0]),h[0]>s&&(s=h[0]),h[1]<n&&(n=h[1]),h[1]>r&&(r=h[1])}e[0]=o,e[1]=n,i[0]=s,i[1]=r}}function i(t,e,i,o,s,r){var a=[];n.cubicExtrema(t[0],e[0],i[0],o[0],a);for(var h=0;h<a.length;h++)a[h]=n.cubicAt(t[0],e[0],i[0],o[0],a[h]);var l=[];n.cubicExtrema(t[1],e[1],i[1],o[1],l);for(var h=0;h<l.length;h++)l[h]=n.cubicAt(t[1],e[1],i[1],o[1],l[h]);a.push(t[0],o[0]),l.push(t[1],o[1]);var d=Math.min.apply(null,a),c=Math.max.apply(null,a),p=Math.min.apply(null,l),u=Math.max.apply(null,l);s[0]=d,s[1]=p,r[0]=c,r[1]=u}function o(t,e,i,o,s){var r=n.quadraticExtremum(t[0],e[0],i[0]),a=n.quadraticExtremum(t[1],e[1],i[1]);r=Math.max(Math.min(r,1),0),a=Math.max(Math.min(a,1),0);var h=1-r,l=1-a,d=h*h*t[0]+2*h*r*e[0]+r*r*i[0],c=h*h*t[1]+2*h*r*e[1]+r*r*i[1],p=l*l*t[0]+2*l*a*e[0]+a*a*i[0],u=l*l*t[1]+2*l*a*e[1]+a*a*i[1];o[0]=Math.min(t[0],i[0],d,p),o[1]=Math.min(t[1],i[1],c,u),s[0]=Math.max(t[0],i[0],d,p),s[1]=Math.max(t[1],i[1],c,u)}var s=t("./vector"),n=t("./curve"),r=s.create(),a=s.create(),h=s.create(),l=function(t,e,i,o,n,l,d,c){if(Math.abs(o-n)>=2*Math.PI)return d[0]=t-i,d[1]=e-i,c[0]=t+i,void(c[1]=e+i);if(r[0]=Math.cos(o)*i+t,r[1]=Math.sin(o)*i+e,a[0]=Math.cos(n)*i+t,a[1]=Math.sin(n)*i+e,s.min(d,r,a),s.max(c,r,a),o%=2*Math.PI,0>o&&(o+=2*Math.PI),n%=2*Math.PI,0>n&&(n+=2*Math.PI),o>n&&!l?n+=2*Math.PI:n>o&&l&&(o+=2*Math.PI),l){var p=n;n=o,o=p}for(var u=0;n>u;u+=Math.PI/2)u>o&&(h[0]=Math.cos(u)*i+t,h[1]=Math.sin(u)*i+e,s.min(d,h,d),s.max(c,h,c))};return e.cubeBezier=i,e.quadraticBezier=o,e.arc=l,e}),i("echarts/util/shape/Cross",["require","zrender/shape/Base","zrender/shape/Line","zrender/tool/util","./normalIsCover"],function(t){function e(t){i.call(this,t)}var i=t("zrender/shape/Base"),o=t("zrender/shape/Line"),s=t("zrender/tool/util");return e.prototype={type:"cross",buildPath:function(t,e){var i=e.rect;e.xStart=i.x,e.xEnd=i.x+i.width,e.yStart=e.yEnd=e.y,o.prototype.buildPath(t,e),e.xStart=e.xEnd=e.x,e.yStart=i.y,e.yEnd=i.y+i.height,o.prototype.buildPath(t,e)},getRect:function(t){return t.rect},isCover:t("./normalIsCover")},s.inherits(e,i),e}),i("echarts/util/shape/Candle",["require","zrender/shape/Base","zrender/tool/util","./normalIsCover"],function(t){function e(t){i.call(this,t)}var i=t("zrender/shape/Base"),o=t("zrender/tool/util");return e.prototype={type:"candle",_numberOrder:function(t,e){return e-t},buildPath:function(t,e){var i=o.clone(e.y).sort(this._numberOrder);t.moveTo(e.x,i[3]),t.lineTo(e.x,i[2]),t.moveTo(e.x-e.width/2,i[2]),t.rect(e.x-e.width/2,i[2],e.width,i[1]-i[2]),t.moveTo(e.x,i[1]),t.lineTo(e.x,i[0])},getRect:function(t){if(!t.__rect){var e=0;("stroke"==t.brushType||"fill"==t.brushType)&&(e=t.lineWidth||1);var i=o.clone(t.y).sort(this._numberOrder);t.__rect={x:Math.round(t.x-t.width/2-e/2),y:Math.round(i[3]-e/2),width:t.width+e,height:i[0]-i[3]+e}}return t.__rect},isCover:t("./normalIsCover")},o.inherits(e,i),e}),i("echarts/component/categoryAxis",["require","./base","zrender/shape/Text","zrender/shape/Line","zrender/shape/Rectangle","../config","zrender/tool/util","zrender/tool/area","../component"],function(t){function e(t,e,o,s,n,r){if(s.data.length<1)return void console.error("option.data.length < 1.");i.call(this,t,e,o,s,n),this.grid=this.component.grid;for(var a in r)this[a]=r[a];this.refresh(s)}var i=t("./base"),o=t("zrender/shape/Text"),s=t("zrender/shape/Line"),n=t("zrender/shape/Rectangle"),r=t("../config");r.categoryAxis={zlevel:0,z:0,show:!0,position:"bottom",name:"",nameLocation:"end",nameTextStyle:{},boundaryGap:!0,axisLine:{show:!0,onZero:!0,lineStyle:{color:"#48b",width:2,type:"solid"}},axisTick:{show:!0,interval:"auto",inside:!1,length:5,lineStyle:{color:"#333",width:1}},axisLabel:{show:!0,interval:"auto",rotate:0,margin:8,textStyle:{color:"#333"}},splitLine:{show:!0,lineStyle:{color:["#ccc"],width:1,type:"solid"}},splitArea:{show:!1,areaStyle:{color:["rgba(250,250,250,0.3)","rgba(200,200,200,0.3)"]}}};var a=t("zrender/tool/util"),h=t("zrender/tool/area");return e.prototype={type:r.COMPONENT_TYPE_AXIS_CATEGORY,_getReformedLabel:function(t){var e=this.getDataFromOption(this.option.data[t]),i=this.option.data[t].formatter||this.option.axisLabel.formatter;return i&&("function"==typeof i?e=i.call(this.myChart,e):"string"==typeof i&&(e=i.replace("{value}",e))),e},_getInterval:function(){var t=this.option.axisLabel.interval;if("auto"==t){var e=this.option.axisLabel.textStyle.fontSize,i=this.option.data,o=this.option.data.length;if(this.isHorizontal())if(o>3){var s,n,r=this.getGap(),l=!1,d=Math.floor(.5/r);for(d=1>d?1:d,t=Math.floor(15/r);!l&&o>t;){t+=d,l=!0,s=Math.floor(r*t);for(var c=Math.floor((o-1)/t)*t;c>=0;c-=t){if(0!==this.option.axisLabel.rotate)n=e;else if(i[c].textStyle)n=h.getTextWidth(this._getReformedLabel(c),this.getFont(a.merge(i[c].textStyle,this.option.axisLabel.textStyle)));else{var p=this._getReformedLabel(c)+"",u=(p.match(/\w/g)||"").length,g=p.length-u;n=u*e*2/3+g*e}if(n>s){l=!1;break}}}}else t=1;else if(o>3){var r=this.getGap();for(t=Math.floor(11/r);e>r*t-6&&o>t;)t++}else t=1}else t="function"==typeof t?1:t-0+1;return t},_buildShape:function(){if(this._interval=this._getInterval(),this.option.show){this.option.splitArea.show&&this._buildSplitArea(),this.option.splitLine.show&&this._buildSplitLine(),this.option.axisLine.show&&this._buildAxisLine(),this.option.axisTick.show&&this._buildAxisTick(),this.option.axisLabel.show&&this._buildAxisLabel();for(var t=0,e=this.shapeList.length;e>t;t++)this.zr.addShape(this.shapeList[t])}},_buildAxisTick:function(){var t,e=this.option.data,i=this.option.data.length,o=this.option.axisTick,n=o.length,r=o.lineStyle.color,a=o.lineStyle.width,h="function"==typeof o.interval?o.interval:"auto"==o.interval&&"function"==typeof this.option.axisLabel.interval?this.option.axisLabel.interval:!1,l=h?1:"auto"==o.interval?this._interval:o.interval-0+1,d=o.onGap,c=d?this.getGap()/2:"undefined"==typeof d&&this.option.boundaryGap?this.getGap()/2:0,p=c>0?-l:0;if(this.isHorizontal())for(var u,g="bottom"==this.option.position?o.inside?this.grid.getYend()-n-1:this.grid.getYend()+1:o.inside?this.grid.getY()+1:this.grid.getY()-n-1,f=p;i>f;f+=l)(!h||h(f,e[f]))&&(u=this.subPixelOptimize(this.getCoordByIndex(f)+(f>=0?c:0),a),t={_axisShape:"axisTick",zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{xStart:u,yStart:g,xEnd:u,yEnd:g+n,strokeColor:r,lineWidth:a}},this.shapeList.push(new s(t)));else for(var m,_="left"==this.option.position?o.inside?this.grid.getX()+1:this.grid.getX()-n-1:o.inside?this.grid.getXend()-n-1:this.grid.getXend()+1,f=p;i>f;f+=l)(!h||h(f,e[f]))&&(m=this.subPixelOptimize(this.getCoordByIndex(f)-(f>=0?c:0),a),t={_axisShape:"axisTick",zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{xStart:_,yStart:m,xEnd:_+n,yEnd:m,strokeColor:r,lineWidth:a}},this.shapeList.push(new s(t)))},_buildAxisLabel:function(){var t,e,i=this.option.data,s=this.option.data.length,n=this.option.axisLabel,r=n.rotate,h=n.margin,l=n.clickable,d=n.textStyle,c="function"==typeof n.interval?n.interval:!1;if(this.isHorizontal()){var p,u;"bottom"==this.option.position?(p=this.grid.getYend()+h,u="top"):(p=this.grid.getY()-h,u="bottom");for(var g=0;s>g;g+=this._interval)c&&!c(g,i[g])||""===this._getReformedLabel(g)||(e=a.merge(i[g].textStyle||{},d),t={zlevel:this.getZlevelBase(),z:this.getZBase()+3,hoverable:!1,style:{x:this.getCoordByIndex(g),y:p,color:e.color,text:this._getReformedLabel(g),textFont:this.getFont(e),textAlign:e.align||"center",textBaseline:e.baseline||u}},r&&(t.style.textAlign=r>0?"bottom"==this.option.position?"right":"left":"bottom"==this.option.position?"left":"right",t.rotation=[r*Math.PI/180,t.style.x,t.style.y]),this.shapeList.push(new o(this._axisLabelClickable(l,t))))}else{var f,m;"left"==this.option.position?(f=this.grid.getX()-h,m="right"):(f=this.grid.getXend()+h,m="left");for(var g=0;s>g;g+=this._interval)c&&!c(g,i[g])||""===this._getReformedLabel(g)||(e=a.merge(i[g].textStyle||{},d),t={zlevel:this.getZlevelBase(),z:this.getZBase()+3,hoverable:!1,style:{x:f,y:this.getCoordByIndex(g),color:e.color,text:this._getReformedLabel(g),textFont:this.getFont(e),textAlign:e.align||m,textBaseline:e.baseline||0===g&&""!==this.option.name?"bottom":g==s-1&&""!==this.option.name?"top":"middle"}},r&&(t.rotation=[r*Math.PI/180,t.style.x,t.style.y]),this.shapeList.push(new o(this._axisLabelClickable(l,t))))}},_buildSplitLine:function(){var t,e=this.option.data,i=this.option.data.length,o=this.option.splitLine,n=o.lineStyle.type,r=o.lineStyle.width,a=o.lineStyle.color;a=a instanceof Array?a:[a];var h=a.length,l="function"==typeof this.option.axisLabel.interval?this.option.axisLabel.interval:!1,d=o.onGap,c=d?this.getGap()/2:"undefined"==typeof d&&this.option.boundaryGap?this.getGap()/2:0;if(i-=d||"undefined"==typeof d&&this.option.boundaryGap?1:0,this.isHorizontal())for(var p,u=this.grid.getY(),g=this.grid.getYend(),f=0;i>f;f+=this._interval)(!l||l(f,e[f]))&&(p=this.subPixelOptimize(this.getCoordByIndex(f)+c,r),t={zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{xStart:p,yStart:u,xEnd:p,yEnd:g,strokeColor:a[f/this._interval%h],lineType:n,lineWidth:r}},this.shapeList.push(new s(t)));else for(var m,_=this.grid.getX(),y=this.grid.getXend(),f=0;i>f;f+=this._interval)(!l||l(f,e[f]))&&(m=this.subPixelOptimize(this.getCoordByIndex(f)-c,r),t={zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{xStart:_,yStart:m,xEnd:y,yEnd:m,strokeColor:a[f/this._interval%h],lineType:n,lineWidth:r}},this.shapeList.push(new s(t)))},_buildSplitArea:function(){var t,e=this.option.data,i=this.option.splitArea,o=i.areaStyle.color;if(o instanceof Array){var s=o.length,r=this.option.data.length,a="function"==typeof this.option.axisLabel.interval?this.option.axisLabel.interval:!1,h=i.onGap,l=h?this.getGap()/2:"undefined"==typeof h&&this.option.boundaryGap?this.getGap()/2:0;if(this.isHorizontal())for(var d,c=this.grid.getY(),p=this.grid.getHeight(),u=this.grid.getX(),g=0;r>=g;g+=this._interval)a&&!a(g,e[g])&&r>g||(d=r>g?this.getCoordByIndex(g)+l:this.grid.getXend(),t={zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{x:u,y:c,width:d-u,height:p,color:o[g/this._interval%s]}},this.shapeList.push(new n(t)),u=d);else for(var f,m=this.grid.getX(),_=this.grid.getWidth(),y=this.grid.getYend(),g=0;r>=g;g+=this._interval)a&&!a(g,e[g])&&r>g||(f=r>g?this.getCoordByIndex(g)-l:this.grid.getY(),t={zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{x:m,y:f,width:_,height:y-f,color:o[g/this._interval%s]}},this.shapeList.push(new n(t)),y=f)}else t={zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{x:this.grid.getX(),y:this.grid.getY(),width:this.grid.getWidth(),height:this.grid.getHeight(),color:o}},this.shapeList.push(new n(t))},refresh:function(t){t&&(this.option=this.reformOption(t),this.option.axisLabel.textStyle=this.getTextStyle(this.option.axisLabel.textStyle)),this.clear(),this._buildShape()},getGap:function(){var t=this.option.data.length,e=this.isHorizontal()?this.grid.getWidth():this.grid.getHeight();return this.option.boundaryGap?e/t:e/(t>1?t-1:1)},getCoord:function(t){for(var e=this.option.data,i=e.length,o=this.getGap(),s=this.option.boundaryGap?o/2:0,n=0;i>n;n++){if(this.getDataFromOption(e[n])==t)return s=this.isHorizontal()?this.grid.getX()+s:this.grid.getYend()-s;s+=o}},getCoordByIndex:function(t){if(0>t)return this.isHorizontal()?this.grid.getX():this.grid.getYend();if(t>this.option.data.length-1)return this.isHorizontal()?this.grid.getXend():this.grid.getY();var e=this.getGap(),i=this.option.boundaryGap?e/2:0;return i+=t*e,i=this.isHorizontal()?this.grid.getX()+i:this.grid.getYend()-i},getNameByIndex:function(t){return this.getDataFromOption(this.option.data[t])},getIndexByName:function(t){for(var e=this.option.data,i=e.length,o=0;i>o;o++)if(this.getDataFromOption(e[o])==t)return o;return-1},getValueFromCoord:function(){return""},isMainAxis:function(t){return t%this._interval===0}},a.inherits(e,i),t("../component").define("categoryAxis",e),e}),i("echarts/util/shape/Chain",["require","zrender/shape/Base","./Icon","zrender/shape/util/dashedLineTo","zrender/tool/util","zrender/tool/matrix"],function(t){function e(t){i.call(this,t)}var i=t("zrender/shape/Base"),o=t("./Icon"),s=t("zrender/shape/util/dashedLineTo"),n=t("zrender/tool/util"),r=t("zrender/tool/matrix");return e.prototype={type:"chain",brush:function(t,e){var i=this.style;e&&(i=this.getHighlightStyle(i,this.highlightStyle||{})),t.save(),this.setContext(t,i),this.setTransform(t),t.save(),t.beginPath(),this.buildLinePath(t,i),t.stroke(),t.restore(),this.brushSymbol(t,i),t.restore()},buildLinePath:function(t,e){var i=e.x,o=e.y+5,n=e.width,r=e.height/2-10;if(t.moveTo(i,o),t.lineTo(i,o+r),t.moveTo(i+n,o),t.lineTo(i+n,o+r),t.moveTo(i,o+r/2),e.lineType&&"solid"!=e.lineType){if("dashed"==e.lineType||"dotted"==e.lineType){var a=(e.lineWidth||1)*("dashed"==e.lineType?5:1);s(t,i,o+r/2,i+n,o+r/2,a)}}else t.lineTo(i+n,o+r/2)},brushSymbol:function(t,e){var i=e.y+e.height/4;t.save();for(var s,n=e.chainPoint,r=0,a=n.length;a>r;r++){if(s=n[r],"none"!=s.symbol){t.beginPath();var h=s.symbolSize;o.prototype.buildPath(t,{iconType:s.symbol,x:s.x-h,y:i-h,width:2*h,height:2*h,n:s.n}),t.fillStyle=s.isEmpty?"#fff":e.strokeColor,t.closePath(),t.fill(),t.stroke()}s.showLabel&&(t.font=s.textFont,t.fillStyle=s.textColor,t.textAlign=s.textAlign,t.textBaseline=s.textBaseline,s.rotation?(t.save(),this._updateTextTransform(t,s.rotation),t.fillText(s.name,s.textX,s.textY),t.restore()):t.fillText(s.name,s.textX,s.textY))}t.restore()},_updateTextTransform:function(t,e){var i=r.create();if(r.identity(i),0!==e[0]){var o=e[1]||0,s=e[2]||0;(o||s)&&r.translate(i,i,[-o,-s]),r.rotate(i,i,e[0]),(o||s)&&r.translate(i,i,[o,s])}t.transform.apply(t,i)},isCover:function(t,e){var i=this.style;return t>=i.x&&t<=i.x+i.width&&e>=i.y&&e<=i.y+i.height?!0:!1}},n.inherits(e,i),e}),i("echarts/component/valueAxis",["require","./base","zrender/shape/Text","zrender/shape/Line","zrender/shape/Rectangle","../config","../util/date","zrender/tool/util","../util/smartSteps","../util/accMath","../util/smartLogSteps","../component"],function(t){function e(t,e,o,s,n,r,a){if(!a||0===a.length)return void console.err("option.series.length == 0.");i.call(this,t,e,o,s,n),this.series=a,this.grid=this.component.grid;for(var h in r)this[h]=r[h];this.refresh(s,a)}var i=t("./base"),o=t("zrender/shape/Text"),s=t("zrender/shape/Line"),n=t("zrender/shape/Rectangle"),r=t("../config");r.valueAxis={zlevel:0,z:0,show:!0,position:"left",name:"",nameLocation:"end",nameTextStyle:{},boundaryGap:[0,0],axisLine:{show:!0,onZero:!0,lineStyle:{color:"#48b",width:2,type:"solid"}},axisTick:{show:!1,inside:!1,length:5,lineStyle:{color:"#333",width:1}},axisLabel:{show:!0,rotate:0,margin:8,textStyle:{color:"#333"}},splitLine:{show:!0,lineStyle:{color:["#ccc"],width:1,type:"solid"}},splitArea:{show:!1,areaStyle:{color:["rgba(250,250,250,0.3)","rgba(200,200,200,0.3)"]}}};var a=t("../util/date"),h=t("zrender/tool/util");return e.prototype={type:r.COMPONENT_TYPE_AXIS_VALUE,_buildShape:function(){if(this._hasData=!1,this._calculateValue(),this._hasData&&this.option.show){this.option.splitArea.show&&this._buildSplitArea(),this.option.splitLine.show&&this._buildSplitLine(),this.option.axisLine.show&&this._buildAxisLine(),this.option.axisTick.show&&this._buildAxisTick(),this.option.axisLabel.show&&this._buildAxisLabel();for(var t=0,e=this.shapeList.length;e>t;t++)this.zr.addShape(this.shapeList[t])}},_buildAxisTick:function(){var t,e=this._valueList,i=this._valueList.length,o=this.option.axisTick,n=o.length,r=o.lineStyle.color,a=o.lineStyle.width;if(this.isHorizontal())for(var h,l="bottom"===this.option.position?o.inside?this.grid.getYend()-n-1:this.grid.getYend()+1:o.inside?this.grid.getY()+1:this.grid.getY()-n-1,d=0;i>d;d++)h=this.subPixelOptimize(this.getCoord(e[d]),a),t={_axisShape:"axisTick",zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{xStart:h,yStart:l,xEnd:h,yEnd:l+n,strokeColor:r,lineWidth:a}},this.shapeList.push(new s(t));else for(var c,p="left"===this.option.position?o.inside?this.grid.getX()+1:this.grid.getX()-n-1:o.inside?this.grid.getXend()-n-1:this.grid.getXend()+1,d=0;i>d;d++)c=this.subPixelOptimize(this.getCoord(e[d]),a),t={_axisShape:"axisTick",zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{xStart:p,yStart:c,xEnd:p+n,yEnd:c,strokeColor:r,lineWidth:a}},this.shapeList.push(new s(t))},_buildAxisLabel:function(){var t,e=this._valueList,i=this._valueList.length,s=this.option.axisLabel.rotate,n=this.option.axisLabel.margin,r=this.option.axisLabel.clickable,a=this.option.axisLabel.textStyle;if(this.isHorizontal()){var h,l;"bottom"===this.option.position?(h=this.grid.getYend()+n,l="top"):(h=this.grid.getY()-n,l="bottom");for(var d=0;i>d;d++)t={zlevel:this.getZlevelBase(),z:this.getZBase()+3,hoverable:!1,style:{x:this.getCoord(e[d]),y:h,color:"function"==typeof a.color?a.color(e[d]):a.color,text:this._valueLabel[d],textFont:this.getFont(a),textAlign:a.align||"center",textBaseline:a.baseline||l}},s&&(t.style.textAlign=s>0?"bottom"===this.option.position?"right":"left":"bottom"===this.option.position?"left":"right",t.rotation=[s*Math.PI/180,t.style.x,t.style.y]),this.shapeList.push(new o(this._axisLabelClickable(r,t)))}else{var c,p;"left"===this.option.position?(c=this.grid.getX()-n,p="right"):(c=this.grid.getXend()+n,p="left");for(var d=0;i>d;d++)t={zlevel:this.getZlevelBase(),z:this.getZBase()+3,hoverable:!1,style:{x:c,y:this.getCoord(e[d]),color:"function"==typeof a.color?a.color(e[d]):a.color,text:this._valueLabel[d],textFont:this.getFont(a),textAlign:a.align||p,textBaseline:a.baseline||(0===d&&""!==this.option.name?"bottom":d===i-1&&""!==this.option.name?"top":"middle")}},s&&(t.rotation=[s*Math.PI/180,t.style.x,t.style.y]),this.shapeList.push(new o(this._axisLabelClickable(r,t)))}},_buildSplitLine:function(){var t,e=this._valueList,i=this._valueList.length,o=this.option.splitLine,n=o.lineStyle.type,r=o.lineStyle.width,a=o.lineStyle.color;a=a instanceof Array?a:[a];var h=a.length;if(this.isHorizontal())for(var l,d=this.grid.getY(),c=this.grid.getYend(),p=0;i>p;p++)l=this.subPixelOptimize(this.getCoord(e[p]),r),t={zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{xStart:l,yStart:d,xEnd:l,yEnd:c,strokeColor:a[p%h],lineType:n,lineWidth:r}},this.shapeList.push(new s(t));else for(var u,g=this.grid.getX(),f=this.grid.getXend(),p=0;i>p;p++)u=this.subPixelOptimize(this.getCoord(e[p]),r),t={zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{xStart:g,yStart:u,xEnd:f,yEnd:u,strokeColor:a[p%h],lineType:n,lineWidth:r}},this.shapeList.push(new s(t))},_buildSplitArea:function(){var t,e=this.option.splitArea.areaStyle.color;if(e instanceof Array){var i=e.length,o=this._valueList,s=this._valueList.length;if(this.isHorizontal())for(var r,a=this.grid.getY(),h=this.grid.getHeight(),l=this.grid.getX(),d=0;s>=d;d++)r=s>d?this.getCoord(o[d]):this.grid.getXend(),t={zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{x:l,y:a,width:r-l,height:h,color:e[d%i]}},this.shapeList.push(new n(t)),l=r;else for(var c,p=this.grid.getX(),u=this.grid.getWidth(),g=this.grid.getYend(),d=0;s>=d;d++)c=s>d?this.getCoord(o[d]):this.grid.getY(),t={zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{x:p,y:c,width:u,height:g-c,color:e[d%i]}},this.shapeList.push(new n(t)),g=c}else t={zlevel:this.getZlevelBase(),z:this.getZBase(),hoverable:!1,style:{x:this.grid.getX(),y:this.grid.getY(),width:this.grid.getWidth(),height:this.grid.getHeight(),color:e}},this.shapeList.push(new n(t))},_calculateValue:function(){if(isNaN(this.option.min-0)||isNaN(this.option.max-0)){for(var t,e,i={},o=this.component.legend,s=0,n=this.series.length;n>s;s++)!(this.series[s].type!=r.CHART_TYPE_LINE&&this.series[s].type!=r.CHART_TYPE_BAR&&this.series[s].type!=r.CHART_TYPE_SCATTER&&this.series[s].type!=r.CHART_TYPE_K&&this.series[s].type!=r.CHART_TYPE_EVENTRIVER||o&&!o.isSelected(this.series[s].name)||(t=this.series[s].xAxisIndex||0,e=this.series[s].yAxisIndex||0,this.option.xAxisIndex!=t&&this.option.yAxisIndex!=e||!this._calculSum(i,s)));var a;for(var s in i){a=i[s];for(var h=0,l=a.length;l>h;h++)if(!isNaN(a[h])){this._hasData=!0,this._min=a[h],this._max=a[h];break}if(this._hasData)break}for(var s in i){a=i[s];for(var h=0,l=a.length;l>h;h++)isNaN(a[h])||(this._min=Math.min(this._min,a[h]),this._max=Math.max(this._max,a[h]))}var d="log"!==this.option.type?this.option.boundaryGap:[0,0],c=Math.abs(this._max-this._min);this._min=isNaN(this.option.min-0)?this._min-Math.abs(c*d[0]):this.option.min-0,this._max=isNaN(this.option.max-0)?this._max+Math.abs(c*d[1]):this.option.max-0,this._min===this._max&&(0===this._max?this._max=1:this._max>0?this._min=this._max/this.option.splitNumber!=null?this.option.splitNumber:5:this._max=this._max/this.option.splitNumber!=null?this.option.splitNumber:5),"time"===this.option.type?this._reformTimeValue():"log"===this.option.type?this._reformLogValue():this._reformValue(this.option.scale)}else this._hasData=!0,this._min=this.option.min-0,this._max=this.option.max-0,"time"===this.option.type?this._reformTimeValue():"log"===this.option.type?this._reformLogValue():this._customerValue()},_calculSum:function(t,e){var i,o,s=this.series[e].name||"kener";if(this.series[e].stack){var n="__Magic_Key_Positive__"+this.series[e].stack,h="__Magic_Key_Negative__"+this.series[e].stack;t[n]=t[n]||[],t[h]=t[h]||[],t[s]=t[s]||[],o=this.series[e].data;for(var l=0,d=o.length;d>l;l++)i=this.getDataFromOption(o[l]),"-"!==i&&(i-=0,i>=0?null!=t[n][l]?t[n][l]+=i:t[n][l]=i:null!=t[h][l]?t[h][l]+=i:t[h][l]=i,this.option.scale&&t[s].push(i))}else if(t[s]=t[s]||[],this.series[e].type!=r.CHART_TYPE_EVENTRIVER){o=this.series[e].data;for(var l=0,d=o.length;d>l;l++)i=this.getDataFromOption(o[l]),this.series[e].type===r.CHART_TYPE_K?(t[s].push(i[0]),t[s].push(i[1]),t[s].push(i[2]),t[s].push(i[3])):i instanceof Array?(-1!=this.option.xAxisIndex&&t[s].push("time"!=this.option.type?i[0]:a.getNewDate(i[0])),-1!=this.option.yAxisIndex&&t[s].push("time"!=this.option.type?i[1]:a.getNewDate(i[1]))):t[s].push(i)}else{o=this.series[e].data;for(var l=0,d=o.length;d>l;l++)for(var c=o[l].evolution,p=0,u=c.length;u>p;p++)t[s].push(a.getNewDate(c[p].time))}},_reformValue:function(e){var i=t("../util/smartSteps"),o=this.option.splitNumber;!e&&this._min>=0&&this._max>=0&&(this._min=0),!e&&this._min<=0&&this._max<=0&&(this._max=0);var s=i(this._min,this._max,o);o=null!=o?o:s.secs,this._min=s.min,this._max=s.max,this._valueList=s.pnts,this._reformLabelData()},_reformTimeValue:function(){var t=null!=this.option.splitNumber?this.option.splitNumber:5,e=a.getAutoFormatter(this._min,this._max,t),i=e.formatter,o=e.gapValue;this._valueList=[a.getNewDate(this._min)];var s;switch(i){case"week":s=a.nextMonday(this._min);break;case"month":s=a.nextNthOnMonth(this._min,1);break;case"quarter":s=a.nextNthOnQuarterYear(this._min,1);break;case"half-year":s=a.nextNthOnHalfYear(this._min,1);break;case"year":s=a.nextNthOnYear(this._min,1);break;default:72e5>=o?s=(Math.floor(this._min/o)+1)*o:(s=a.getNewDate(this._min- -o),s.setHours(6*Math.round(s.getHours()/6)),s.setMinutes(0),s.setSeconds(0))}for(s-this._min<o/2&&(s-=-o),e=a.getNewDate(s),t*=1.5;t-->=0&&(("month"==i||"quarter"==i||"half-year"==i||"year"==i)&&e.setDate(1),!(this._max-e<o/2));)this._valueList.push(e),e=a.getNewDate(e- -o);this._valueList.push(a.getNewDate(this._max)),this._reformLabelData(function(t){return function(e){return a.format(t,e)
}}(i))},_customerValue:function(){var e=t("../util/accMath"),i=null!=this.option.splitNumber?this.option.splitNumber:5,o=(this._max-this._min)/i;this._valueList=[];for(var s=0;i>=s;s++)this._valueList.push(e.accAdd(this._min,e.accMul(o,s)));this._reformLabelData()},_reformLogValue:function(){var e=this.option,i=t("../util/smartLogSteps")({dataMin:this._min,dataMax:this._max,logPositive:e.logPositive,logLabelBase:e.logLabelBase,splitNumber:e.splitNumber});this._min=i.dataMin,this._max=i.dataMax,this._valueList=i.tickList,this._dataMappingMethods=i.dataMappingMethods,this._reformLabelData(i.labelFormatter)},_reformLabelData:function(t){this._valueLabel=[];var e=this.option.axisLabel.formatter;if(e)for(var i=0,o=this._valueList.length;o>i;i++)"function"==typeof e?this._valueLabel.push(t?e.call(this.myChart,this._valueList[i],t):e.call(this.myChart,this._valueList[i])):"string"==typeof e&&this._valueLabel.push(t?a.format(e,this._valueList[i]):e.replace("{value}",this._valueList[i]));else for(var i=0,o=this._valueList.length;o>i;i++)this._valueLabel.push(t?t(this._valueList[i]):this.numAddCommas(this._valueList[i]))},getExtremum:function(){this._calculateValue();var t=this._dataMappingMethods;return{min:this._min,max:this._max,dataMappingMethods:t?h.merge({},t):null}},refresh:function(t,e){t&&(this.option=this.reformOption(t),this.option.axisLabel.textStyle=h.merge(this.option.axisLabel.textStyle||{},this.ecTheme.textStyle),this.series=e),this.zr&&(this.clear(),this._buildShape())},getCoord:function(t){this._dataMappingMethods&&(t=this._dataMappingMethods.value2Coord(t)),t=t<this._min?this._min:t,t=t>this._max?this._max:t;var e;return e=this.isHorizontal()?this.grid.getX()+(t-this._min)/(this._max-this._min)*this.grid.getWidth():this.grid.getYend()-(t-this._min)/(this._max-this._min)*this.grid.getHeight()},getCoordSize:function(t){return Math.abs(this.isHorizontal()?t/(this._max-this._min)*this.grid.getWidth():t/(this._max-this._min)*this.grid.getHeight())},getValueFromCoord:function(t){var e;return this.isHorizontal()?(t=t<this.grid.getX()?this.grid.getX():t,t=t>this.grid.getXend()?this.grid.getXend():t,e=this._min+(t-this.grid.getX())/this.grid.getWidth()*(this._max-this._min)):(t=t<this.grid.getY()?this.grid.getY():t,t=t>this.grid.getYend()?this.grid.getYend():t,e=this._max-(t-this.grid.getY())/this.grid.getHeight()*(this._max-this._min)),this._dataMappingMethods&&(e=this._dataMappingMethods.coord2Value(e)),e.toFixed(2)-0},isMaindAxis:function(t){for(var e=0,i=this._valueList.length;i>e;e++)if(this._valueList[e]===t)return!0;return!1}},h.inherits(e,i),t("../component").define("valueAxis",e),e}),i("echarts/util/smartSteps",[],function(){function t(t){return w.log(A(t))/w.LN10}function e(t){return w.pow(10,t)}function i(t){return t===E(t)}function o(t,e,o,s){x=s||{},v=x.steps||z,b=x.secs||C,o=L(+o||0)%99,t=+t||0,e=+e||0,S=T=0,"min"in x&&(t=+x.min||0,S=1),"max"in x&&(e=+x.max||0,T=1),t>e&&(e=[t,t=e][0]);var n=e-t;if(S&&T)return y(t,e,o);if((o||5)>n){if(i(t)&&i(e))return u(t,e,o);if(0===n)return g(t,e,o)}return l(t,e,o)}function s(t,i,o,s){s=s||0;var a=n((i-t)/o,-1),h=n(t,-1,1),l=n(i,-1),d=w.min(a.e,h.e,l.e);0===h.c?d=w.min(a.e,l.e):0===l.c&&(d=w.min(a.e,h.e)),r(a,{c:0,e:d}),r(h,a,1),r(l,a),s+=d,t=h.c,i=l.c;for(var c=(i-t)/o,p=e(s),u=0,g=[],f=o+1;f--;)g[f]=(t+c*f)*p;if(0>s){u=m(p),c=+(c*p).toFixed(u),t=+(t*p).toFixed(u),i=+(i*p).toFixed(u);for(var f=g.length;f--;)g[f]=g[f].toFixed(u),0===+g[f]&&(g[f]="0")}else t*=p,i*=p,c*=p;return b=0,v=0,x=0,{min:t,max:i,secs:o,step:c,fix:u,exp:s,pnts:g}}function n(o,s,n){s=L(s%10)||2,0>s&&(i(o)?s=(""+A(o)).replace(/0+$/,"").length||1:(o=o.toFixed(15).replace(/0+$/,""),s=o.replace(".","").replace(/^[-0]+/,"").length,o=+o));var r=E(t(o))-s+1,a=+(o*e(-r)).toFixed(15)||0;return a=n?E(a):M(a),!a&&(r=0),(""+A(a)).length>s&&(r+=1,a/=10),{c:a,e:r}}function r(t,i,o){var s=i.e-t.e;s&&(t.e+=s,t.c*=e(-s),t.c=o?E(t.c):M(t.c))}function a(t,e,i){t.e<e.e?r(e,t,i):r(t,e,i)}function h(t,e){e=e||z,t=n(t);for(var i=t.c,o=0;i>e[o];)o++;if(!e[o])for(i/=10,t.e+=1,o=0;i>e[o];)o++;return t.c=e[o],t}function l(t,e,o){var a,l=o||+b.slice(-1),g=h((e-t)/l,v),m=n(e-t),y=n(t,-1,1),x=n(e,-1);if(r(m,g),r(y,g,1),r(x,g),o?a=c(y,x,l):l=d(y,x),i(t)&&i(e)&&t*e>=0){if(l>e-t)return u(t,e,l);l=p(t,e,o,y,x,l)}var z=f(t,e,y.c,x.c);return y.c=z[0],x.c=z[1],(S||T)&&_(t,e,y,x),s(y.c,x.c,l,x.e)}function d(t,i){for(var o,s,n,r,a=[],l=b.length;l--;)o=b[l],s=h((i.c-t.c)/o,v),s=s.c*e(s.e),n=E(t.c/s)*s,r=M(i.c/s)*s,a[l]={min:n,max:r,step:s,span:r-n};return a.sort(function(t,e){var i=t.span-e.span;return 0===i&&(i=t.step-e.step),i}),a=a[0],o=a.span/a.step,t.c=a.min,i.c=a.max,3>o?2*o:o}function c(t,i,o){for(var s,n,r=i.c,a=(i.c-t.c)/o-1;r>t.c;)a=h(a+1,v),a=a.c*e(a.e),s=a*o,n=M(i.c/a)*a,r=n-s;var l=t.c-r,d=n-i.c,c=l-d;return c>1.1*a&&(c=L(c/a/2)*a,r+=c,n+=c),t.c=r,i.c=n,a}function p(t,o,s,n,r,a){var h=r.c-n.c,l=h/a*e(r.e);if(!i(l)&&(l=E(l),h=l*a,o-t>h&&(l+=1,h=l*a,!s&&l*(a-1)>=o-t&&(a-=1,h=l*a)),h>=o-t)){var d=h-(o-t);n.c=L(t-d/2),r.c=L(o+d/2),n.e=0,r.e=0}return a}function u(t,e,i){if(i=i||5,S)e=t+i;else if(T)t=e-i;else{var o=i-(e-t),n=L(t-o/2),r=L(e+o/2),a=f(t,e,n,r);t=a[0],e=a[1]}return s(t,e,i)}function g(t,e,i){i=i||5;var o=w.min(A(e/i),i)/2.1;return S?e=t+o:T?t=e-o:(t-=o,e+=o),l(t,e,i)}function f(t,e,i,o){return t>=0&&0>i?(o-=i,i=0):0>=e&&o>0&&(i-=o,o=0),[i,o]}function m(t){return t=(+t).toFixed(15).split("."),t.pop().replace(/0+$/,"").length}function _(t,e,i,o){if(S){var s=n(t,4,1);i.e-s.e>6&&(s={c:0,e:i.e}),a(i,s),a(o,s),o.c+=s.c-i.c,i.c=s.c}else if(T){var r=n(e,4);o.e-r.e>6&&(r={c:0,e:o.e}),a(i,r),a(o,r),i.c+=r.c-o.c,o.c=r.c}}function y(t,e,i){var o=i?[i]:b,a=e-t;if(0===a)return e=n(e,3),i=o[0],e.c=L(e.c+i/2),s(e.c-i,e.c,i,e.e);A(e/a)<1e-6&&(e=0),A(t/a)<1e-6&&(t=0);var h,l,d,c=[[5,10],[10,2],[50,10],[100,2]],p=[],u=[],g=n(e-t,3),f=n(t,-1,1),m=n(e,-1);r(f,g,1),r(m,g),a=m.c-f.c,g.c=a;for(var _=o.length;_--;){i=o[_],h=M(a/i),l=h*i-a,d=3*(l+3),d+=2*(i-o[0]+2),i%5===0&&(d-=10);for(var y=c.length;y--;)h%c[y][0]===0&&(d/=c[y][1]);u[_]=[i,h,l,d].join(),p[_]={secs:i,step:h,delta:l,score:d}}return p.sort(function(t,e){return t.score-e.score}),p=p[0],f.c=L(f.c-p.delta/2),m.c=L(m.c+p.delta/2),s(f.c,m.c,p.secs,g.e)}var x,v,b,S,T,z=[10,20,25,50],C=[4,5,6],w=Math,L=w.round,E=w.floor,M=w.ceil,A=w.abs;return o}),i("echarts/util/smartLogSteps",["require","./number"],function(t){function e(t){return i(),m=t||{},o(),s(),[n(),i()][0]}function i(){p=m=y=f=x=v=_=b=u=g=null}function o(){u=m.logLabelBase,null==u?(g="plain",u=10,f=A):(u=+u,1>u&&(u=10),g="exponent",f=z(u)),_=m.splitNumber,null==_&&(_=R);var t=parseFloat(m.dataMin),e=parseFloat(m.dataMax);isFinite(t)||isFinite(e)?isFinite(t)?isFinite(e)?t>e&&(e=[t,t=e][0]):e=t:t=e:t=e=1,p=m.logPositive,null==p&&(p=e>0||0===t),x=p?t:-e,v=p?e:-t,I>x&&(x=I),I>v&&(v=I)}function s(){function t(){_>d&&(_=d);var t=E(h(d/_)),e=L(h(d/t)),i=t*e,o=(i-p)/2,s=E(h(r-o));c(s-r)&&(s-=1),y=-s*f;for(var a=s;n>=a-t;a+=t)b.push(C(u,a))}function e(){for(var t=i(l,0),e=t+2;e>t&&s(t+1)+o(t+1)*O<r;)t++;for(var h=i(a,0),e=h-2;h>e&&s(h-1)+o(h-1)*O>n;)h--;y=-(s(t)*A+o(t)*k);for(var d=t;h>=d;d++){var c=s(d),p=o(d);b.push(C(10,c)*C(2,p))}}function i(t,e){return 3*t+e}function o(t){return t-3*s(t)}function s(t){return E(h(t/3))}b=[];var n=h(z(v)/f),r=h(z(x)/f),a=L(n),l=E(r),d=a-l,p=n-r;"exponent"===g?t():P>=d&&_>P?e():t()}function n(){for(var t=[],e=0,i=b.length;i>e;e++)t[e]=(p?1:-1)*b[e];!p&&t.reverse();var o=a(),s=o.value2Coord,n=s(t[0]),h=s(t[t.length-1]);return n===h&&(n-=1,h+=1),{dataMin:n,dataMax:h,tickList:t,logPositive:p,labelFormatter:r(),dataMappingMethods:o}}function r(){if("exponent"===g){var t=u,e=f;return function(i){if(!isFinite(parseFloat(i)))return"";var o="";return 0>i&&(i=-i,o="-"),o+t+d(z(i)/e)}}return function(t){return isFinite(parseFloat(t))?S.addCommas(l(t)):""}}function a(){var t=p,e=y;return{value2Coord:function(i){return null==i||isNaN(i)||!isFinite(i)?i:(i=parseFloat(i),isFinite(i)?t&&I>i?i=I:!t&&i>-I&&(i=-I):i=I,i=w(i),(t?1:-1)*(z(i)+e))},coord2Value:function(i){return null==i||isNaN(i)||!isFinite(i)?i:(i=parseFloat(i),isFinite(i)||(i=I),t?C(M,i-e):-C(M,-i+e))}}}function h(t){return+Number(+t).toFixed(14)}function l(t){return Number(t).toFixed(15).replace(/\.?0*$/,"")}function d(t){t=l(Math.round(t));for(var e=[],i=0,o=t.length;o>i;i++){var s=t.charAt(i);e.push(D[s]||"")}return e.join("")}function c(t){return t>-I&&I>t}var p,u,g,f,m,_,y,x,v,b,S=t("./number"),T=Math,z=T.log,C=T.pow,w=T.abs,L=T.ceil,E=T.floor,M=T.E,A=T.LN10,k=T.LN2,O=k/A,I=1e-9,R=5,P=2,D={0:"⁰",1:"¹",2:"²",3:"³",4:"⁴",5:"⁵",6:"⁶",7:"⁷",8:"⁸",9:"⁹","-":"⁻"};return e}),i("echarts/util/date",[],function(){function t(t,e,i){i=i>1?i:2;for(var o,s,n,r,a=0,h=d.length;h>a;a++)if(o=d[a].value,s=Math.ceil(e/o)*o-Math.floor(t/o)*o,Math.round(s/o)<=1.2*i){n=d[a].formatter,r=d[a].value;break}return null==n&&(n="year",o=317088e5,s=Math.ceil(e/o)*o-Math.floor(t/o)*o,r=Math.round(s/(i-1)/o)*o),{formatter:n,gapValue:r}}function e(t){return 10>t?"0"+t:t}function i(t,i){("week"==t||"month"==t||"quarter"==t||"half-year"==t||"year"==t)&&(t="MM - dd\nyyyy");var o=l(i),s=o.getFullYear(),n=o.getMonth()+1,r=o.getDate(),a=o.getHours(),h=o.getMinutes(),d=o.getSeconds();return t=t.replace("MM",e(n)),t=t.toLowerCase(),t=t.replace("yyyy",s),t=t.replace("yy",s%100),t=t.replace("dd",e(r)),t=t.replace("d",r),t=t.replace("hh",e(a)),t=t.replace("h",a),t=t.replace("mm",e(h)),t=t.replace("m",h),t=t.replace("ss",e(d)),t=t.replace("s",d)}function o(t){return t=l(t),t.setDate(t.getDate()+8-t.getDay()),t}function s(t,e,i){return t=l(t),t.setMonth(Math.ceil((t.getMonth()+1)/i)*i),t.setDate(e),t}function n(t,e){return s(t,e,1)}function r(t,e){return s(t,e,3)}function a(t,e){return s(t,e,6)}function h(t,e){return s(t,e,12)}function l(t){return t instanceof Date?t:new Date("string"==typeof t?t.replace(/-/g,"/"):t)}var d=[{formatter:"hh : mm : ss",value:1e3},{formatter:"hh : mm : ss",value:5e3},{formatter:"hh : mm : ss",value:1e4},{formatter:"hh : mm : ss",value:15e3},{formatter:"hh : mm : ss",value:3e4},{formatter:"hh : mm\nMM - dd",value:6e4},{formatter:"hh : mm\nMM - dd",value:3e5},{formatter:"hh : mm\nMM - dd",value:6e5},{formatter:"hh : mm\nMM - dd",value:9e5},{formatter:"hh : mm\nMM - dd",value:18e5},{formatter:"hh : mm\nMM - dd",value:36e5},{formatter:"hh : mm\nMM - dd",value:72e5},{formatter:"hh : mm\nMM - dd",value:216e5},{formatter:"hh : mm\nMM - dd",value:432e5},{formatter:"MM - dd\nyyyy",value:864e5},{formatter:"week",value:6048e5},{formatter:"month",value:26784e5},{formatter:"quarter",value:8208e6},{formatter:"half-year",value:16416e6},{formatter:"year",value:32832e6}];return{getAutoFormatter:t,getNewDate:l,format:i,nextMonday:o,nextNthPerNmonth:s,nextNthOnMonth:n,nextNthOnQuarterYear:r,nextNthOnHalfYear:a,nextNthOnYear:h}}),i("echarts/util/shape/HandlePolygon",["require","zrender/shape/Base","zrender/shape/Polygon","zrender/tool/util"],function(t){function e(t){i.call(this,t)}var i=t("zrender/shape/Base"),o=t("zrender/shape/Polygon"),s=t("zrender/tool/util");return e.prototype={type:"handle-polygon",buildPath:function(t,e){o.prototype.buildPath(t,e)},isCover:function(t,e){var i=this.transformCoordToLocal(t,e);t=i[0],e=i[1];var o=this.style.rect;return t>=o.x&&t<=o.x+o.width&&e>=o.y&&e<=o.y+o.height?!0:!1}},s.inherits(e,i),e}),i("zrender",["zrender/zrender"],function(t){return t}),i("echarts",["echarts/echarts"],function(t){return t});var o=e("zrender");o.tool={color:e("zrender/tool/color"),math:e("zrender/tool/math"),util:e("zrender/tool/util"),vector:e("zrender/tool/vector"),area:e("zrender/tool/area"),event:e("zrender/tool/event")},o.animation={Animation:e("zrender/animation/Animation"),Cip:e("zrender/animation/Clip"),easing:e("zrender/animation/easing")};var s=e("echarts");s.config=e("echarts/config"),e("echarts/chart/bar"),e("echarts/chart/line"),e("echarts/chart/pie"),e("echarts/chart/scatter"),e("echarts/chart/gauge"),t.echarts=s,t.zrender=o}(window);
(function()
{
    dockspawn = {version: "0.0.2"};

/**
 * A tab handle represents the tab button on the tab strip
 */
dockspawn.TabHandle = function(parent)
{
    this.parent = parent;
    var undockHandler = dockspawn.TabHandle.prototype._performUndock.bind(this);
    this.elementBase = document.createElement('div');
    this.elementText = document.createElement('div');
    this.elementCloseButton = document.createElement('div');
    this.elementBase.classList.add("tab-handle");
    this.elementBase.classList.add("disable-selection"); // Disable text selection
    this.elementText.classList.add("tab-handle-text");
    this.elementCloseButton.classList.add("tab-handle-close-button");
    this.elementBase.appendChild(this.elementText);
    if (this.parent.host.displayCloseButton)
        this.elementBase.appendChild(this.elementCloseButton);

    this.parent.host.tabListElement.appendChild(this.elementBase);

    var panel = parent.container;
    var title = panel.getRawTitle();
    this.elementText.innerHTML = title;

    // Set the close button text (font awesome)
    var closeIcon = "icon-remove-sign";
    this.elementCloseButton.innerHTML = '<i class="' + closeIcon + '"></i>';

    this._bringToFront(this.elementBase);

    this.undockInitiator = new dockspawn.UndockInitiator(this.elementBase, undockHandler);
    this.undockInitiator.enabled = true;

    this.mouseClickHandler = new dockspawn.EventHandler(this.elementBase, 'click', this.onMouseClicked.bind(this));                     // Button click handler for the tab handle
    this.closeButtonHandler = new dockspawn.EventHandler(this.elementCloseButton, 'mousedown', this.onCloseButtonClicked.bind(this));   // Button click handler for the close button

    this.zIndexCounter = 1000;
};

dockspawn.TabHandle.prototype.updateTitle = function()
{
    if (this.parent.container instanceof dockspawn.PanelContainer)
    {
        var panel = this.parent.container;
        var title = panel.getRawTitle();
        this.elementText.innerHTML = title;
    }
};

dockspawn.TabHandle.prototype.destroy = function()
{
    this.mouseClickHandler.cancel();
    this.closeButtonHandler.cancel();
    removeNode(this.elementBase);
    removeNode(this.elementCloseButton);
    delete this.elementBase;
    delete this.elementCloseButton;
};

dockspawn.TabHandle.prototype._performUndock = function(e, dragOffset)
{
    if (this.parent.container.containerType == "panel")
    {
        this.undockInitiator.enabled = false;
        var panel = this.parent.container;
        return panel.performUndockToDialog(e, dragOffset);
    }
    else
        return null;
};

dockspawn.TabHandle.prototype.onMouseClicked = function()
{
    this.parent.onSelected();
};

dockspawn.TabHandle.prototype.onCloseButtonClicked = function()
{
    // If the page contains a panel element, undock it and destroy it
    if (this.parent.container.containerType == "panel")
    {
        this.undockInitiator.enabled = false;
        var panel = this.parent.container;
        panel.performUndock();
    }
};

dockspawn.TabHandle.prototype.setSelected = function(selected)
{
    var selectedClassName = "tab-handle-selected";
    if (selected)
        this.elementBase.classList.add(selectedClassName);
    else
        this.elementBase.classList.remove(selectedClassName);
};

dockspawn.TabHandle.prototype.setZIndex = function(zIndex)
{
    this.elementBase.style.zIndex = zIndex;
};

dockspawn.TabHandle.prototype._bringToFront = function(element)
{
    element.style.zIndex = this.zIndexCounter;
    this.zIndexCounter++;
};
/**
 * Tab Host control contains tabs known as TabPages.
 * The tab strip can be aligned in different orientations
 */
dockspawn.TabHost = function(tabStripDirection, displayCloseButton)
{
    /**
     * Create a tab host with the tab strip aligned in the [tabStripDirection] direciton
     * Only dockspawn.TabHost.DIRECTION_BOTTOM and dockspawn.TabHost.DIRECTION_TOP are supported
     */
    if (tabStripDirection === undefined)
        tabStripDirection = dockspawn.TabHost.DIRECTION_BOTTOM;
    if (displayCloseButton === undefined)
        displayCloseButton = false;

    this.tabStripDirection = tabStripDirection;
    this.displayCloseButton = displayCloseButton;           // Indicates if the close button next to the tab handle should be displayed
    this.pages = [];
    this.hostElement = document.createElement('div');       // The main tab host DOM element
    this.tabListElement = document.createElement('div');    // Hosts the tab handles
    this.separatorElement = document.createElement('div');  // A seperator line between the tabs and content
    this.contentElement = document.createElement('div');    // Hosts the active tab content
    this.createTabPage = this._createDefaultTabPage;        // Factory for creating tab pages

    if (this.tabStripDirection == dockspawn.TabHost.DIRECTION_BOTTOM)
    {
        this.hostElement.appendChild(this.contentElement);
        this.hostElement.appendChild(this.separatorElement);
        this.hostElement.appendChild(this.tabListElement);
    }
    else if (this.tabStripDirection == dockspawn.TabHost.DIRECTION_TOP)
    {
        // 定制需求，顶部 tab 隐藏掉
        this.tabListElement.classList.add('hide');
        this.separatorElement.classList.add('hide');
        
        this.hostElement.appendChild(this.tabListElement);
        this.hostElement.appendChild(this.separatorElement);
        this.hostElement.appendChild(this.contentElement);
    }
    else
        throw new dockspawn.Exception("Only top and bottom tab strip orientations are supported");

    this.hostElement.classList.add("tab-host");
    this.tabListElement.classList.add("tab-handle-list-container");
    this.separatorElement.classList.add("tab-handle-content-seperator");
    this.contentElement.classList.add("tab-content");
};

// constants
dockspawn.TabHost.DIRECTION_TOP = 0;
dockspawn.TabHost.DIRECTION_BOTTOM = 1;
dockspawn.TabHost.DIRECTION_LEFT = 2;
dockspawn.TabHost.DIRECTION_RIGHT = 3;

dockspawn.TabHost.prototype._createDefaultTabPage = function(tabHost, container)
{
    return new dockspawn.TabPage(tabHost, container);
};

dockspawn.TabHost.prototype.setActiveTab = function(container)
{
    var self = this;
    this.pages.forEach(function(page)
    {
        if (page.container === container)
        {
            self.onTabPageSelected(page);
            return;
        }
    });
};

dockspawn.TabHost.prototype.resize = function(width, height)
{
    this.hostElement.style.width = width + "px";
    this.hostElement.style.height = height + "px";

    var tabHeight = this.tabListElement.clientHeight;
    var separatorHeight = this.separatorElement.clientHeight;
    var contentHeight = height - tabHeight - separatorHeight;
    this.contentElement.style.height = contentHeight + "px";

    if (this.activeTab)
        this.activeTab.resize(width, contentHeight);
};

dockspawn.TabHost.prototype.performLayout = function(children)
{
    // Destroy all existing tab pages
    this.pages.forEach(function(tab)
    {
        tab.destroy();
    });
    this.pages.length = 0;

    var oldActiveTab = this.activeTab;
    delete this.activeTab;

    var childPanels = children.filter(function(child)
    {
        return child.containerType == "panel";
    });

    if (childPanels.length > 0)
    {
        // Rebuild new tab pages
        var self = this;
        childPanels.forEach(function(child)
        {
            var page = self.createTabPage(self, child);
            self.pages.push(page);

            // Restore the active selected tab
            if (oldActiveTab && page.container === oldActiveTab.container)
                self.activeTab = page;
        });
        this._setTabHandlesVisible(true);
    }
    else
        // Do not show an empty tab handle host with zero tabs
        this._setTabHandlesVisible(false);

    if (this.activeTab)
        this.onTabPageSelected(this.activeTab);
};

dockspawn.TabHost.prototype._setTabHandlesVisible = function(visible)
{
    this.tabListElement.style.display = visible ? "block" : "none";
    this.separatorElement.style.display = visible ? "block" : "none";
};

dockspawn.TabHost.prototype.onTabPageSelected = function(page)
{   
    var changedPages = [];

    this.activeTab = page;
    this.pages.forEach(function(tabPage)
    {
        var selected = (tabPage === page);
        if(tabPage.selected !== selected)
            changedPages.push(tabPage);
        tabPage.setSelected(selected);
    });

    // adjust the zIndex of the tabs to have proper shadow/depth effect
    var zIndexDelta = 1;
    var zIndex = 1000;
    this.pages.forEach(function(tabPage)
    {
        tabPage.handle.setZIndex(zIndex);
        var selected = (tabPage == page);
        if (selected)
            zIndexDelta = -1;
        zIndex += zIndexDelta;
    });

    changedPages.forEach(function (tabPage) {
        // 触发 显示/隐藏 事件
        if (this.onTabChanged)
            this.onTabChanged(this, tabPage);
    }, this);

    // If a callback is defined, then notify it of this event
    // if (this.onTabChanged)
    //    this.onTabChanged(this, page);
};

dockspawn.TabHost.prototype.onTabChanged = function (host, page) {
    var ele = page.container.elementContent;
    var cancelld = ele.dispatchEvent(new CustomEvent('dock.tabPage.changed', {detail: page.selected}))
};

dockspawn.TabPage = function(host, container)
{
    if (arguments.length == 0)
        return;

    this.selected = false;
    this.host = host;
    this.container = container;

    this.handle = new dockspawn.TabHandle(this);
    this.containerElement = container.containerElement;

    if (container instanceof dockspawn.PanelContainer)
    {
        var panel = container;
        panel.onTitleChanged = this.onTitleChanged.bind(this);
    }
};

dockspawn.TabPage.prototype.onTitleChanged = function(sender, title)
{
    this.handle.updateTitle();
};

dockspawn.TabPage.prototype.destroy = function()
{
    this.handle.destroy();

    if (this.container instanceof dockspawn.PanelContainer)
    {
        var panel = this.container;
        delete panel.onTitleChanged;
    }
};

dockspawn.TabPage.prototype.onSelected = function()
{
    this.host.onTabPageSelected(this);
};

dockspawn.TabPage.prototype.setSelected = function(flag)
{
    this.selected = flag;
    this.handle.setSelected(flag);

    if (this.selected)
    {
        this.host.contentElement.appendChild(this.containerElement);
        // force a resize again
        var width = this.host.contentElement.clientWidth;
        var height = this.host.contentElement.clientHeight;
        this.container.resize(width, height);
    }
    else
        removeNode(this.containerElement);
};

dockspawn.TabPage.prototype.resize = function(width, height)
{
    this.container.resize(width, height);
};
dockspawn.Dialog = function(panel, dockManager)
{
    this.panel = panel;
    this.zIndexCounter = 1000;
    this.dockManager = dockManager;
    this.eventListener = dockManager;
    this._initialize();
};

dockspawn.Dialog.fromElement = function(id, dockManager)
{
    return new dockspawn.Dialog(new dockspawn.PanelContainer(document.getElementById(id), dockManager), dockManager);
};

dockspawn.Dialog.prototype._initialize = function()
{
    this.panel.floatingDialog = this;
    this.elementDialog = document.createElement('div');
    this.elementDialog.appendChild(this.panel.elementPanel);
    this.draggable = new dockspawn.DraggableContainer(this, this.panel, this.elementDialog, this.panel.elementTitle);
    this.resizable = new dockspawn.ResizableContainer(this, this.draggable, this.draggable.topLevelElement);

    document.body.appendChild(this.elementDialog);
    this.elementDialog.classList.add("dialog-floating");
    this.elementDialog.classList.add("rounded-corner-top");
    this.panel.elementTitle.classList.add("rounded-corner-top");

    this.mouseDownHandler = new dockspawn.EventHandler(this.elementDialog, 'mousedown', this.onMouseDown.bind(this));
    this.resize(this.panel.elementPanel.clientWidth, this.panel.elementPanel.clientHeight);
    this.bringToFront();
};

dockspawn.Dialog.prototype.setPosition = function(x, y)
{
    this.elementDialog.style.left = x + "px";
    this.elementDialog.style.top = y + "px";
};

dockspawn.Dialog.prototype.onMouseDown = function(e)
{
    this.bringToFront();
};

dockspawn.Dialog.prototype.destroy = function()
{
    if (this.mouseDownHandler)
    {
        this.mouseDownHandler.cancel();
        delete this.mouseDownHandler;
    }
    this.elementDialog.classList.remove("rounded-corner-top");
    this.panel.elementTitle.classList.remove("rounded-corner-top");
    removeNode(this.elementDialog);
    this.draggable.removeDecorator();
    removeNode(this.panel.elementPanel);
    delete this.panel.floatingDialog;
};

dockspawn.Dialog.prototype.resize = function(width, height)
{
    this.resizable.resize(width, height);
};

dockspawn.Dialog.prototype.setTitle = function(title)
{
    this.panel.setTitle(title);
};

dockspawn.Dialog.prototype.setTitleIcon = function(iconName)
{
    this.panel.setTitleIcon(iconName);
};

dockspawn.Dialog.prototype.bringToFront = function()
{
    this.elementDialog.style.zIndex = this.zIndexCounter++;
};
dockspawn.DraggableContainer = function(dialog, delegate, topLevelElement, dragHandle)
{
    this.dialog = dialog;
    this.delegate = delegate;
    this.containerElement = delegate.containerElement;
    this.dockManager = delegate.dockManager;
    this.topLevelElement = topLevelElement;
    this.containerType = delegate.containerType;
    this.mouseDownHandler = new dockspawn.EventHandler(dragHandle, 'mousedown', this.onMouseDown.bind(this));
    this.topLevelElement.style.marginLeft = topLevelElement.offsetLeft + "px";
    this.topLevelElement.style.marginTop = topLevelElement.offsetTop + "px";
    this.minimumAllowedChildNodes = delegate.minimumAllowedChildNodes;
};

dockspawn.DraggableContainer.prototype.destroy = function()
{
    this.removeDecorator();
    this.delegate.destroy();
};

dockspawn.DraggableContainer.prototype.saveState = function(state)
{
    this.delegate.saveState(state);
};

dockspawn.DraggableContainer.prototype.loadState = function(state)
{
    this.delegate.loadState(state);
};

dockspawn.DraggableContainer.prototype.setActiveChild = function(child)
{
};

Object.defineProperty(dockspawn.DraggableContainer.prototype, "width", {
    get: function() { return this.delegate.width; }
});

Object.defineProperty(dockspawn.DraggableContainer.prototype, "height", {
    get: function() { return this.delegate.height; }
});

dockspawn.DraggableContainer.prototype.name = function(value)
{
    if (value)
        this.delegate.name = value;
    return this.delegate.name;
};

dockspawn.DraggableContainer.prototype.resize = function(width, height)
{
    this.delegate.resize(width, height);
};

dockspawn.DraggableContainer.prototype.performLayout = function(children)
{
    this.delegate.performLayout(children);
};

dockspawn.DraggableContainer.prototype.removeDecorator = function()
{
    if (this.mouseDownHandler)
    {
        this.mouseDownHandler.cancel();
        delete this.mouseDownHandler;
    }
};

dockspawn.DraggableContainer.prototype.onMouseDown = function(event)
{
    this._startDragging(event);
    this.previousMousePosition = { x: event.pageX, y: event.pageY };
    if (this.mouseMoveHandler)
    {
        this.mouseMoveHandler.cancel();
        delete this.mouseMoveHandler;
    }
    if (this.mouseUpHandler)
    {
        this.mouseUpHandler.cancel();
        delete this.mouseUpHandler;
    }

    this.mouseMoveHandler = new dockspawn.EventHandler(window, 'mousemove', this.onMouseMove.bind(this));
    this.mouseUpHandler = new dockspawn.EventHandler(window, 'mouseup', this.onMouseUp.bind(this));
};

dockspawn.DraggableContainer.prototype.onMouseUp = function(event)
{
    this._stopDragging(event);
    this.mouseMoveHandler.cancel();
    delete this.mouseMoveHandler;
    this.mouseUpHandler.cancel();
    delete this.mouseUpHandler;
};

dockspawn.DraggableContainer.prototype._startDragging = function(event)
{
    if (this.dialog.eventListener)
        this.dialog.eventListener.onDialogDragStarted(this.dialog, event);
    document.body.classList.add("disable-selection");
};

dockspawn.DraggableContainer.prototype._stopDragging = function(event)
{
    if (this.dialog.eventListener)
        this.dialog.eventListener.onDialogDragEnded(this.dialog, event);
    document.body.classList.remove("disable-selection");
};

dockspawn.DraggableContainer.prototype.onMouseMove = function(event)
{
    var currentMousePosition = new Point(event.pageX, event.pageY);
    var dx = Math.floor(currentMousePosition.x - this.previousMousePosition.x);
    var dy = Math.floor(currentMousePosition.y - this.previousMousePosition.y);
    this._performDrag(dx, dy);
    this.previousMousePosition = currentMousePosition;
};

dockspawn.DraggableContainer.prototype._performDrag = function(dx, dy)
{
    var left = dx + getPixels(this.topLevelElement.style.marginLeft);
    var top = dy + getPixels(this.topLevelElement.style.marginTop);
    this.topLevelElement.style.marginLeft = left + "px";
    this.topLevelElement.style.marginTop = top + "px";
};
/**
 * Decorates a dock container with resizer handles around its base element
 * This enables the container to be resized from all directions
 */
dockspawn.ResizableContainer = function(dialog, delegate, topLevelElement)
{
    this.dialog = dialog;
    this.delegate = delegate;
    this.containerElement = delegate.containerElement;
    this.dockManager = delegate.dockManager;
    this.topLevelElement = topLevelElement;
    this.containerType = delegate.containerType;
    this.topLevelElement.style.marginLeft = this.topLevelElement.offsetLeft + "px";
    this.topLevelElement.style.marginTop = this.topLevelElement.offsetTop + "px";
    this.minimumAllowedChildNodes = delegate.minimumAllowedChildNodes;
    this._buildResizeHandles();
    this.readyToProcessNextResize = true;
};

dockspawn.ResizableContainer.prototype.setActiveChild = function(child)
{
};

dockspawn.ResizableContainer.prototype._buildResizeHandles = function()
{
    this.resizeHandles = [];
//    this._buildResizeHandle(true, false, true, false); // Dont need the corner resizer near the close button
    this._buildResizeHandle(false, true, true, false);
    this._buildResizeHandle(true, false, false, true);
    this._buildResizeHandle(false, true, false, true);

    this._buildResizeHandle(true, false, false, false);
    this._buildResizeHandle(false, true, false, false);
    this._buildResizeHandle(false, false, true, false);
    this._buildResizeHandle(false, false, false, true);
};

dockspawn.ResizableContainer.prototype._buildResizeHandle = function(east, west, north, south)
{
    var handle = new ResizeHandle();
    handle.east = east;
    handle.west = west;
    handle.north = north;
    handle.south = south;

    // Create an invisible div for the handle
    handle.element = document.createElement('div');
    this.topLevelElement.appendChild(handle.element);

    // Build the class name for the handle
    var verticalClass = "";
    var horizontalClass = "";
    if (north) verticalClass = "n";
    if (south) verticalClass = "s";
    if (east) horizontalClass = "e";
    if (west) horizontalClass = "w";
    var cssClass = "resize-handle-" + verticalClass + horizontalClass;
    if (verticalClass.length > 0 && horizontalClass.length > 0)
        handle.corner = true;

    handle.element.classList.add(handle.corner ? "resize-handle-corner" : "resize-handle");
    handle.element.classList.add(cssClass);
    this.resizeHandles.push(handle);

    var self = this;
    handle.mouseDownHandler = new dockspawn.EventHandler(handle.element, 'mousedown', function(e) { self.onMouseDown(handle, e); });
};

dockspawn.ResizableContainer.prototype.saveState = function(state)
{
    this.delegate.saveState(state);
};

dockspawn.ResizableContainer.prototype.loadState = function(state)
{
    this.delegate.loadState(state);
};

Object.defineProperty(dockspawn.ResizableContainer.prototype, "width", {
    get: function() { return this.delegate.width; }
});

Object.defineProperty(dockspawn.ResizableContainer.prototype, "height", {
    get: function() { return this.delegate.height; }
});

dockspawn.ResizableContainer.prototype.name = function(value)
{
    if (value)
        this.delegate.name = value;
    return this.delegate.name;
};

dockspawn.ResizableContainer.prototype.resize = function(width, height)
{
    this.delegate.resize(width, height);
    this._adjustResizeHandles(width, height);
};

dockspawn.ResizableContainer.prototype._adjustResizeHandles = function(width, height)
{
    var self = this;
    this.resizeHandles.forEach(function(handle) {
        handle.adjustSize(self.topLevelElement, width, height);
    });
};

dockspawn.ResizableContainer.prototype.performLayout = function(children)
{
    this.delegate.performLayout(children);
};

dockspawn.ResizableContainer.prototype.destroy = function()
{
    this.removeDecorator();
    this.delegate.destroy();
};

dockspawn.ResizableContainer.prototype.removeDecorator = function()
{
};

dockspawn.ResizableContainer.prototype.onMouseMoved = function(handle, e)
{
    if (!this.readyToProcessNextResize)
        return;
    this.readyToProcessNextResize = false;

//    window.requestLayoutFrame(() {
    this.dockManager.suspendLayout();
    var currentMousePosition = new Point(e.pageX, e.pageY);
    var dx = Math.floor(currentMousePosition.x - this.previousMousePosition.x);
    var dy = Math.floor(currentMousePosition.y - this.previousMousePosition.y);
    this._performDrag(handle, dx, dy);
    this.previousMousePosition = currentMousePosition;
    this.readyToProcessNextResize = true;
    this.dockManager.resumeLayout();
//    });
};

dockspawn.ResizableContainer.prototype.onMouseDown = function(handle, event)
{
    this.previousMousePosition = new Point(event.pageX, event.pageY);
    if (handle.mouseMoveHandler)
    {
        handle.mouseMoveHandler.cancel();
        delete handle.mouseMoveHandler
    }
    if (handle.mouseUpHandler)
    {
        handle.mouseUpHandler.cancel();
        delete handle.mouseUpHandler
    }

    // Create the mouse event handlers
    var self = this;
    handle.mouseMoveHandler = new dockspawn.EventHandler(window, 'mousemove', function(e) { self.onMouseMoved(handle, e); });
    handle.mouseUpHandler = new dockspawn.EventHandler(window, 'mouseup', function(e) { self.onMouseUp(handle, e); });

    document.body.classList.add("disable-selection");
};

dockspawn.ResizableContainer.prototype.onMouseUp = function(handle, event)
{
    handle.mouseMoveHandler.cancel();
    handle.mouseUpHandler.cancel();
    delete handle.mouseMoveHandler;
    delete handle.mouseUpHandler;

    document.body.classList.remove("disable-selection");
};

dockspawn.ResizableContainer.prototype._performDrag = function(handle, dx, dy)
{
    var bounds = {};
    bounds.left = getPixels(this.topLevelElement.style.marginLeft);
    bounds.top = getPixels(this.topLevelElement.style.marginTop);
    bounds.width = this.topLevelElement.clientWidth;
    bounds.height = this.topLevelElement.clientHeight;

    if (handle.east) this._resizeEast(dx, bounds);
    if (handle.west) this._resizeWest(dx, bounds);
    if (handle.north) this._resizeNorth(dy, bounds);
    if (handle.south) this._resizeSouth(dy, bounds);
};

dockspawn.ResizableContainer.prototype._resizeWest = function(dx, bounds)
{
    this._resizeContainer(dx, 0, -dx, 0, bounds);
};

dockspawn.ResizableContainer.prototype._resizeEast = function(dx, bounds)
{
    this._resizeContainer(0, 0, dx, 0, bounds);
};

dockspawn.ResizableContainer.prototype._resizeNorth = function(dy, bounds)
{
    this._resizeContainer(0, dy, 0, -dy, bounds);
};

dockspawn.ResizableContainer.prototype._resizeSouth = function(dy, bounds)
{
    this._resizeContainer(0, 0, 0, dy, bounds);
};

dockspawn.ResizableContainer.prototype._resizeContainer = function(leftDelta, topDelta, widthDelta, heightDelta, bounds)
{
    bounds.left += leftDelta;
    bounds.top += topDelta;
    bounds.width += widthDelta;
    bounds.height += heightDelta;

    var minWidth = 50;  // TODO: Move to external configuration
    var minHeight = 50;  // TODO: Move to external configuration
    bounds.width = Math.max(bounds.width, minWidth);
    bounds.height = Math.max(bounds.height, minHeight);

    this.topLevelElement.style.marginLeft = bounds.left + "px";
    this.topLevelElement.style.marginTop = bounds.top + "px";

    this.resize(bounds.width, bounds.height);
};


function ResizeHandle()
{
    this.element = undefined;
    this.handleSize = 6;   // TODO: Get this from DOM
    this.cornerSize = 12;  // TODO: Get this from DOM
    this.east = false;
    this.west = false;
    this.north = false;
    this.south = false;
    this.corner = false;
}

ResizeHandle.prototype.adjustSize = function(container, clientWidth, clientHeight)
{
    if (this.corner)
    {
        if (this.west) this.element.style.left = "0px";
        if (this.east) this.element.style.left = (clientWidth - this.cornerSize) + "px";
        if (this.north) this.element.style.top = "0px";
        if (this.south) this.element.style.top = (clientHeight - this.cornerSize) + "px";
    }
    else
    {
        if (this.west)
        {
            this.element.style.left = "0px";
            this.element.style.top = this.cornerSize + "px";
        }
        if (this.east) {
            this.element.style.left = (clientWidth - this.handleSize) + "px";
            this.element.style.top = this.cornerSize + "px";
        }
        if (this.north) {
            this.element.style.left = this.cornerSize + "px";
            this.element.style.top = "0px";
        }
        if (this.south) {
            this.element.style.left = this.cornerSize + "px";
            this.element.style.top = (clientHeight - this.handleSize) + "px";
        }

        if (this.west || this.east) {
            this.element.style.height = (clientHeight - this.cornerSize * 2) + "px";
        } else {
            this.element.style.width = (clientWidth - this.cornerSize * 2) + "px";
        }
    }
};
dockspawn.Exception = function(message)
{
    this.message = message;
}

dockspawn.Exception.prototype.toString = function()
{
    return this.message;
};
/**
 * Dock manager manages all the dock panels in a hierarchy, similar to visual studio.
 * It owns a Html Div element inside which all panels are docked
 * Initially the document manager takes up the central space and acts as the root node
 */

 dockspawn.DockManager = function(element)
{
    if (element === undefined)
        throw new dockspawn.Exception("Invalid Dock Manager element provided");

    this.element = element;
    this.context = this.dockWheel = this.layoutEngine = this.mouseMoveHandler = undefined;
    this.layoutEventListeners = [];
};

dockspawn.DockManager.prototype.initialize = function()
{
    this.context = new dockspawn.DockManagerContext(this);
    var documentNode = new dockspawn.DockNode(this.context.documentManagerView);
    this.context.model.rootNode = documentNode;
    this.context.model.documentManagerNode = documentNode;
    this.setRootNode(this.context.model.rootNode);
    // Resize the layout
    this.resize(this.element.clientWidth, this.element.clientHeight);
    this.dockWheel = new dockspawn.DockWheel(this);
    this.layoutEngine = new dockspawn.DockLayoutEngine(this);

    this.rebuildLayout(this.context.model.rootNode);
};

dockspawn.DockManager.prototype.rebuildLayout = function(node)
{
    var self = this;
    node.children.forEach(function(child) { self.rebuildLayout(child); });
    node.performLayout();
};

dockspawn.DockManager.prototype.invalidate = function()
{
    this.resize(this.element.clientWidth, this.element.clientHeight);
};

dockspawn.DockManager.prototype.resize = function(width, height)
{
    this.element.style.width = width + "px";
    this.element.style.height = height + "px";
    this.context.model.rootNode.container.resize(width, height);
};

/**
 * Reset the dock model . This happens when the state is loaded from json
 */
dockspawn.DockManager.prototype.setModel = function(model)
{
    removeNode(this.context.documentManagerView.containerElement);
    this.context.model = model;
    this.setRootNode(model.rootNode);

    this.rebuildLayout(model.rootNode);
    this.invalidate();
};

dockspawn.DockManager.prototype.setRootNode = function(node)
{
    if (this.context.model.rootNode)
    {
        // detach it from the dock manager's base element
//      context.model.rootNode.detachFromParent();
    }

    // Attach the new node to the dock manager's base element and set as root node
    node.detachFromParent();
    this.context.model.rootNode = node;
    this.element.appendChild(node.container.containerElement);
};


dockspawn.DockManager.prototype.onDialogDragStarted = function(sender, e)
{
    this.dockWheel.activeNode = this._findNodeOnPoint(e.pageX, e.pageY);
    this.dockWheel.activeDialog = sender;
    this.dockWheel.showWheel();
    if (this.mouseMoveHandler)
    {
        this.mouseMoveHandler.cancel();
        delete this.mouseMoveHandler;
    }
    this.mouseMoveHandler = new dockspawn.EventHandler(window, 'mousemove', this.onMouseMoved.bind(this));
};

dockspawn.DockManager.prototype.onDialogDragEnded = function(sender, e)
{
    if (this.mouseMoveHandler)
    {
        this.mouseMoveHandler.cancel();
        delete this.mouseMoveHandler;
    }
    this.dockWheel.onDialogDropped(sender);
    this.dockWheel.hideWheel();
    delete this.dockWheel.activeDialog;
};

dockspawn.DockManager.prototype.onMouseMoved = function(e)
{
    this.dockWheel.activeNode = this._findNodeOnPoint(e.clientX, e.clientY);
};

/**
 * Perform a DFS on the dock model's tree to find the
 * deepest level panel (i.e. the top-most non-overlapping panel)
 * that is under the mouse cursor
 * Retuns null if no node is found under this point
 */
dockspawn.DockManager.prototype._findNodeOnPoint = function(x, y)
{
    var stack = [];
    stack.push(this.context.model.rootNode);
    var bestMatch;

    while (stack.length > 0)
    {
        var topNode = stack.pop();

        if (isPointInsideNode(x, y, topNode))
        {
            // This node contains the point.
            bestMatch = topNode;

            // Keep looking future down
            [].push.apply(stack, topNode.children);
        }
    }
    return bestMatch;
};

/** Dock the [dialog] to the left of the [referenceNode] node */
dockspawn.DockManager.prototype.dockDialogLeft = function(referenceNode, dialog)
{
    return this._requestDockDialog(referenceNode, dialog, this.layoutEngine.dockLeft.bind(this.layoutEngine));
};

/** Dock the [dialog] to the right of the [referenceNode] node */
dockspawn.DockManager.prototype.dockDialogRight = function(referenceNode, dialog)
{
    return this._requestDockDialog(referenceNode, dialog, this.layoutEngine.dockRight.bind(this.layoutEngine));
};

/** Dock the [dialog] above the [referenceNode] node */
dockspawn.DockManager.prototype.dockDialogUp = function(referenceNode, dialog)
{
    return this._requestDockDialog(referenceNode, dialog, this.layoutEngine.dockUp.bind(this.layoutEngine));
};

/** Dock the [dialog] below the [referenceNode] node */
dockspawn.DockManager.prototype.dockDialogDown = function(referenceNode, dialog)
{
    return this._requestDockDialog(referenceNode, dialog, this.layoutEngine.dockDown.bind(this.layoutEngine));
};

/** Dock the [dialog] as a tab inside the [referenceNode] node */
dockspawn.DockManager.prototype.dockDialogFill = function(referenceNode, dialog)
{
    return this._requestDockDialog(referenceNode, dialog, this.layoutEngine.dockFill.bind(this.layoutEngine));
};

/** Dock the [container] to the left of the [referenceNode] node */
dockspawn.DockManager.prototype.dockLeft = function(referenceNode, container, ratio)
{
    return this._requestDockContainer(referenceNode, container, this.layoutEngine.dockLeft.bind(this.layoutEngine), ratio);
};

/** Dock the [container] to the right of the [referenceNode] node */
dockspawn.DockManager.prototype.dockRight = function(referenceNode,  container, ratio)
{
    return this._requestDockContainer(referenceNode, container, this.layoutEngine.dockRight.bind(this.layoutEngine), ratio);
};

/** Dock the [container] above the [referenceNode] node */
dockspawn.DockManager.prototype.dockUp = function(referenceNode,  container, ratio)
{
    return this._requestDockContainer(referenceNode, container, this.layoutEngine.dockUp.bind(this.layoutEngine), ratio);
};

/** Dock the [container] below the [referenceNode] node */
dockspawn.DockManager.prototype.dockDown = function(referenceNode,  container, ratio)
{
    return this._requestDockContainer(referenceNode, container, this.layoutEngine.dockDown.bind(this.layoutEngine), ratio);
};

/** Dock the [container] as a tab inside the [referenceNode] node */
dockspawn.DockManager.prototype.dockFill = function(referenceNode, container)
{
    return this._requestDockContainer(referenceNode, container, this.layoutEngine.dockFill.bind(this.layoutEngine));
};

dockspawn.DockManager.prototype._requestDockDialog = function(referenceNode, dialog, layoutDockFunction)
{
    // Get the active dialog that was dragged on to the dock wheel
    var panel = dialog.panel;
    var newNode = new dockspawn.DockNode(panel);
    panel.prepareForDocking();
    dialog.destroy();
    layoutDockFunction(referenceNode, newNode);
    this.invalidate();
    return newNode;
};

dockspawn.DockManager.prototype._requestDockContainer = function(referenceNode, container, layoutDockFunction, ratio)
{
    // Get the active dialog that was dragged on to the dock wheel
    var newNode = new dockspawn.DockNode(container);
    if (container.containerType == "panel")
    {
        var panel = container;
        panel.prepareForDocking();
        removeNode(panel.elementPanel);
    }
    layoutDockFunction(referenceNode, newNode);

    if (ratio && newNode.parent &&
        (newNode.parent.container.containerType == "vertical" || newNode.parent.container.containerType == "horizontal"))
    {
        var splitter = newNode.parent.container;
        splitter.setContainerRatio(container, ratio);
    }

    this.rebuildLayout(this.context.model.rootNode);
    this.invalidate();
    return newNode;
};

/**
 * Undocks a panel and converts it into a floating dialog window
 * It is assumed that only leaf nodes (panels) can be undocked
 */
dockspawn.DockManager.prototype.requestUndockToDialog = function(container, event, dragOffset)
{
    var node = this._findNodeFromContainer(container);
    this.layoutEngine.undock(node);

    // Create a new dialog window for the undocked panel
    var dialog = new dockspawn.Dialog(node.container, this);

    // Adjust the relative position
    var dialogWidth = dialog.elementDialog.clientWidth;
    if (dragOffset.x > dialogWidth)
        dragOffset.x = 0.75 * dialogWidth;
    dialog.setPosition(
        event.clientX - dragOffset.x,
        event.clientY - dragOffset.y);
    dialog.draggable.onMouseDown(event);

    return dialog;
};

/** Undocks a panel and converts it into a floating dialog window
 * It is assumed that only leaf nodes (panels) can be undocked
 */
dockspawn.DockManager.prototype.requestUndock = function(container)
{
    var node = this._findNodeFromContainer(container);
    this.layoutEngine.undock(node);
};

/**
 * Removes a dock container from the dock layout hierarcy
 * Returns the node that was removed from the dock tree
 */
dockspawn.DockManager.prototype.requestRemove = function(container)
{
    var node = this._findNodeFromContainer(container);
    var parent = node.parent;
    node.detachFromParent();
    if (parent)
        this.rebuildLayout(parent);
    return node;
};

/** Finds the node that owns the specified [container] */
dockspawn.DockManager.prototype._findNodeFromContainer = function(container)
{
    //this.context.model.rootNode.debug_DumpTree();

    var stack = [];
    stack.push(this.context.model.rootNode);

    while (stack.length > 0)
    {
        var topNode = stack.pop();

        if (topNode.container === container)
            return topNode;
        [].push.apply(stack, topNode.children);
    }

    throw new dockspawn.Exception("Cannot find dock node belonging to the element");
};

dockspawn.DockManager.prototype.addLayoutListener = function(listener)
{
    this.layoutEventListeners.push(listener);
};

dockspawn.DockManager.prototype.removeLayoutListener = function(listener)
{
    this.layoutEventListeners.splice(this.layoutEventListeners.indexOf(listener), 1);
};

dockspawn.DockManager.prototype.suspendLayout = function()
{
    var self = this;
    this.layoutEventListeners.forEach(function(listener) { 
		if (listener.onSuspendLayout) listener.onSuspendLayout(self); 
	});
};

dockspawn.DockManager.prototype.resumeLayout = function()
{
    var self = this;
    this.layoutEventListeners.forEach(function(listener) { 
		if (listener.onResumeLayout) listener.onResumeLayout(self); 
	});
};

dockspawn.DockManager.prototype.notifyOnDock = function(dockNode)
{
    var self = this;
    this.layoutEventListeners.forEach(function(listener) { 
		if (listener.onDock) {
			listener.onDock(self, dockNode); 
		}
	});
};

dockspawn.DockManager.prototype.notifyOnUnDock = function(dockNode)
{
    var self = this;
    this.layoutEventListeners.forEach(function(listener) { 
		if (listener.onUndock) {
			listener.onUndock(self, dockNode); 
		}
	});
};

dockspawn.DockManager.prototype.saveState = function()
{
    var serializer = new dockspawn.DockGraphSerializer();
    return serializer.serialize(this.context.model);
};

dockspawn.DockManager.prototype.loadState = function(json)
{
    var deserializer = new dockspawn.DockGraphDeserializer(this);
    this.context.model = deserializer.deserialize(json);
    this.setModel(this.context.model);
};

//typedef void LayoutEngineDockFunction(dockspawn.DockNode referenceNode, dockspawn.DockNode newNode);

/**
* The Dock Manager notifies the listeners of layout changes so client containers that have
* costly layout structures can detach and reattach themself to avoid reflow
*/
//abstract class LayoutEventListener {
//void onSuspendLayout(dockspawn.DockManager dockManager);
//void onResumeLayout(dockspawn.DockManager dockManager);
//}

dockspawn.DockLayoutEngine = function(dockManager)
{
    this.dockManager = dockManager;
}

/** docks the [newNode] to the left of [referenceNode] */
dockspawn.DockLayoutEngine.prototype.dockLeft = function(referenceNode, newNode)
{
    this._performDock(referenceNode, newNode, "horizontal", true);
};

/** docks the [newNode] to the right of [referenceNode] */
dockspawn.DockLayoutEngine.prototype.dockRight = function(referenceNode, newNode) {
    this._performDock(referenceNode, newNode, "horizontal", false);
};

/** docks the [newNode] to the top of [referenceNode] */
dockspawn.DockLayoutEngine.prototype.dockUp = function(referenceNode, newNode) {
    this._performDock(referenceNode, newNode, "vertical", true);
};

/** docks the [newNode] to the bottom of [referenceNode] */
dockspawn.DockLayoutEngine.prototype.dockDown = function(referenceNode, newNode) {
    this._performDock(referenceNode, newNode, "vertical", false);
};

/** docks the [newNode] by creating a new tab inside [referenceNode] */
dockspawn.DockLayoutEngine.prototype.dockFill = function(referenceNode, newNode) {
    this._performDock(referenceNode, newNode, "fill", false);
};

dockspawn.DockLayoutEngine.prototype.undock = function(node)
{
    var parentNode = node.parent;
    if (!parentNode)
        throw new dockspawn.Exception("Cannot undock.  panel is not a leaf node");

    // Get the position of the node relative to it's siblings
    var siblingIndex = parentNode.children.indexOf(node);

    // Detach the node from the dock manager's tree hierarchy
    node.detachFromParent();

    // Fix the node's parent hierarchy
    if (parentNode.children.length < parentNode.container.minimumAllowedChildNodes) {
        // If the child count falls below the minimum threshold, destroy the parent and merge
        // the children with their grandparents
        var grandParent = parentNode.parent;
        for (var i = 0; i < parentNode.children.length; i++)
        {
            var otherChild = parentNode.children[i];
            if (grandParent)
            {
                // parent node is not a root node
                grandParent.addChildAfter(parentNode, otherChild);
                parentNode.detachFromParent();
                parentNode.container.destroy();
                grandParent.performLayout();
            }
            else
            {
                // Parent is a root node.
                // Make the other child the root node
                parentNode.detachFromParent();
                parentNode.container.destroy();
                this.dockManager.setRootNode(otherChild);
            }
        }
    }
    else
    {
        // the node to be removed has 2 or more other siblings. So it is safe to continue
        // using the parent composite container.
        parentNode.performLayout();

        // Set the next sibling as the active child (e.g. for a Tab host, it would select it as the active tab)
        if (parentNode.children.length > 0)
        {
            var nextActiveSibling = parentNode.children[Math.max(0, siblingIndex - 1)];
            parentNode.container.setActiveChild(nextActiveSibling.container);
        }
    }
    this.dockManager.invalidate();
	this.dockManager.notifyOnUnDock(node);
};

dockspawn.DockLayoutEngine.prototype._performDock = function(referenceNode, newNode, direction, insertBeforeReference)
{
    if (referenceNode.parent && referenceNode.parent.container.containerType == "fill")
        referenceNode = referenceNode.parent;

    if (direction == "fill" && referenceNode.container.containerType == "fill")
    {
        referenceNode.addChild(newNode);
        referenceNode.performLayout();
        referenceNode.container.setActiveChild(newNode.container);
        return;
    }

    // Check if reference node is root node
    var model = this.dockManager.context.model;
    if (referenceNode === model.rootNode)
    {
        var compositeContainer = this._createDockContainer(direction, newNode, referenceNode);
        var compositeNode = new dockspawn.DockNode(compositeContainer);

        if (insertBeforeReference)
        {
            compositeNode.addChild(newNode);
            compositeNode.addChild(referenceNode);
        }
        else
        {
            compositeNode.addChild(referenceNode);
            compositeNode.addChild(newNode);
        }

        // Attach the root node to the dock manager's DOM
		this.dockManager.setRootNode(compositeNode);
        this.dockManager.rebuildLayout(this.dockManager.context.model.rootNode);
        compositeNode.container.setActiveChild(newNode.container);
        return;
    }

    if (referenceNode.parent.container.containerType != direction) {
        var referenceParent = referenceNode.parent;

        // Get the dimensions of the reference node, for resizing later on
        var referenceNodeWidth = referenceNode.container.containerElement.clientWidth;
        var referenceNodeHeight = referenceNode.container.containerElement.clientHeight;

        // Get the dimensions of the reference node, for resizing later on
        var referenceNodeParentWidth = referenceParent.container.containerElement.clientWidth;
        var referenceNodeParentHeight = referenceParent.container.containerElement.clientHeight;

        // Replace the reference node with a new composite node with the reference and new node as it's children
        var compositeContainer = this._createDockContainer(direction, newNode, referenceNode);
        var compositeNode = new dockspawn.DockNode(compositeContainer);

        referenceParent.addChildAfter(referenceNode, compositeNode);
        referenceNode.detachFromParent();
        removeNode(referenceNode.container.containerElement);

        if (insertBeforeReference)
        {
            compositeNode.addChild(newNode);
            compositeNode.addChild(referenceNode);
        }
        else
        {
            compositeNode.addChild(referenceNode);
            compositeNode.addChild(newNode);
        }

        referenceParent.performLayout();
        compositeNode.performLayout();

        compositeNode.container.setActiveChild(newNode.container);
        compositeNode.container.resize(referenceNodeWidth, referenceNodeHeight);
        referenceParent.container.resize(referenceNodeParentWidth, referenceNodeParentHeight);
    }
    else
    {
        // Add as a sibling, since the parent of the reference node is of the right composite type
        var referenceParent = referenceNode.parent;
        if (insertBeforeReference)
            referenceParent.addChildBefore(referenceNode, newNode);
        else
            referenceParent.addChildAfter(referenceNode, newNode);
        referenceParent.performLayout();
        referenceParent.container.setActiveChild(newNode.container);
    }

    // force resize the panel
    var containerWidth = newNode.container.containerElement.clientWidth;
    var containerHeight = newNode.container.containerElement.clientHeight;
    newNode.container.resize(containerWidth, containerHeight);
	
	this.dockManager.notifyOnDock(newNode);
};

dockspawn.DockLayoutEngine.prototype._forceResizeCompositeContainer = function(container)
{
    var width = container.containerElement.clientWidth;
    var height = container.containerElement.clientHeight;
    container.resize(width, height);
};

dockspawn.DockLayoutEngine.prototype._createDockContainer = function(containerType, newNode, referenceNode)
{
    if (containerType == "horizontal")
        return new dockspawn.HorizontalDockContainer(this.dockManager, [newNode.container, referenceNode.container]);
    if (containerType == "vertical")
        return new dockspawn.VerticalDockContainer(this.dockManager, [newNode.container, referenceNode.container]);
    if (containerType == "fill")
        return new dockspawn.FillDockContainer(this.dockManager);
    throw new dockspawn.Exception("Failed to create dock container of type: " + containerType);
};


/**
 * Gets the bounds of the new node if it were to dock with the specified configuration
 * The state is not modified in this function.  It is used for showing a preview of where
 * the panel would be docked when hovered over a dock wheel button
 */
dockspawn.DockLayoutEngine.prototype.getDockBounds = function(referenceNode, containerToDock, direction, insertBeforeReference)
{
    var compositeNode; // The node that contains the splitter / fill node
    var childCount;
    var childPosition;
    if (direction == "fill")
    {
        // Since this is a fill operation, the highlight bounds is the same as the reference node
        // TODO: Create a tab handle highlight to show that it's going to be docked in a tab
        var targetElement = referenceNode.container.containerElement;
        var bounds = new Rectangle();
        bounds.x = targetElement.offsetLeft;
        bounds.y = targetElement.offsetTop;
        bounds.width = targetElement.clientWidth;
        bounds.height= targetElement.clientHeight;
        return bounds;
    }

    if (referenceNode.parent && referenceNode.parent.container.containerType == "fill")
        // Ignore the fill container's child and move one level up
        referenceNode = referenceNode.parent;

    // Flag to indicate of the renference node was replaced with a new composite node with 2 children
    var hierarchyModified = false;
    if (referenceNode.parent && referenceNode.parent.container.containerType == direction) {
        // The parent already is of the desired composite type.  Will be inserted as sibling to the reference node
        compositeNode = referenceNode.parent;
        childCount = compositeNode.children.length;
        childPosition = compositeNode.children.indexOf(referenceNode) + (insertBeforeReference ? 0 : 1);
    } else {
        // The reference node will be replaced with a new composite node of the desired type with 2 children
        compositeNode = referenceNode;
        childCount = 1;   // The newly inserted composite node will contain the reference node
        childPosition = (insertBeforeReference ? 0 : 1);
        hierarchyModified = true;
    }

    var splitBarSize = 5;  // TODO: Get from DOM
    var targetPanelSize = 0;
    var targetPanelStart = 0;
    if (direction == "vertical" || direction == "horizontal")
    {
        // Existing size of the composite container (without the splitter bars).
        // This will also be the final size of the composite (splitter / fill)
        // container after the new panel has been docked
        var compositeSize = this._getVaringDimension(compositeNode.container, direction) - (childCount - 1) * splitBarSize;

        // size of the newly added panel
        var newPanelOriginalSize = this._getVaringDimension(containerToDock, direction);
        var scaleMultiplier = compositeSize / (compositeSize + newPanelOriginalSize);

        // Size of the panel after it has been docked and scaled
        targetPanelSize = newPanelOriginalSize * scaleMultiplier;
        if (hierarchyModified)
            targetPanelStart = insertBeforeReference ? 0 : compositeSize * scaleMultiplier;
        else
        {
            for (var i = 0; i < childPosition; i++)
                targetPanelStart += this._getVaringDimension(compositeNode.children[i].container, direction);
            targetPanelStart *= scaleMultiplier;
        }
    }

    var bounds = new Rectangle();
    if (direction == "vertical")
    {
        bounds.x = compositeNode.container.containerElement.offsetLeft;
        bounds.y = compositeNode.container.containerElement.offsetTop + targetPanelStart;
        bounds.width = compositeNode.container.width;
        bounds.height = targetPanelSize;
    } else if (direction == "horizontal") {
        bounds.x = compositeNode.container.containerElement.offsetLeft + targetPanelStart;
        bounds.y = compositeNode.container.containerElement.offsetTop;
        bounds.width = targetPanelSize;
        bounds.height = compositeNode.container.height;
    }

    return bounds;
};

dockspawn.DockLayoutEngine.prototype._getVaringDimension = function(container, direction)
{
    if (direction == "vertical")
        return container.height;
    if (direction == "horizontal")
        return container.width;
    return 0;
};
dockspawn.DockManagerContext = function(dockManager)
{
    this.dockManager = dockManager;
    this.model = new dockspawn.DockModel();
    this.documentManagerView = new dockspawn.DocumentManagerContainer(this.dockManager);
};
/**
 * The Dock Model contains the tree hierarchy that represents the state of the
 * panel placement within the dock manager.
 */
dockspawn.DockModel = function()
{
    this.rootNode = this.documentManagerNode = undefined;
};

dockspawn.DockNode = function(container)
{
    /** The dock container represented by this node */
    this.container = container;
    this.children = [];
}

dockspawn.DockNode.prototype.detachFromParent = function()
{
    if (this.parent)
    {
        this.parent.removeChild(this);
        delete this.parent;
    }
};

dockspawn.DockNode.prototype.removeChild = function(childNode)
{
    var index = this.children.indexOf(childNode);
    if (index >= 0)
        this.children.splice(index, 1);
};

dockspawn.DockNode.prototype.addChild = function(childNode)
{
    childNode.detachFromParent();
    childNode.parent = this;
    this.children.push(childNode);
};

dockspawn.DockNode.prototype.addChildBefore = function(referenceNode, childNode)
{
    this._addChildWithDirection(referenceNode, childNode, true);
};

dockspawn.DockNode.prototype.addChildAfter = function(referenceNode, childNode)
{
    this._addChildWithDirection(referenceNode, childNode, false);
};

dockspawn.DockNode.prototype._addChildWithDirection = function(referenceNode, childNode, before)
{
    // Detach this node from it's parent first
    childNode.detachFromParent();
    childNode.parent = this;

    var referenceIndex = this.children.indexOf(referenceNode);
    var preList = this.children.slice(0, referenceIndex);
    var postList = this.children.slice(referenceIndex + 1, this.children.length);

    this.children = preList.slice(0);
    if (before)
    {
        this.children.push(childNode);
        this.children.push(referenceNode);
    }
    else
    {
        this.children.push(referenceNode);
        this.children.push(childNode);
    }
    Array.prototype.push.apply(this.children, postList);
};

dockspawn.DockNode.prototype.performLayout = function()
{
    var childContainers = this.children.map(function(childNode) { return childNode.container; });
    this.container.performLayout(childContainers);
};

dockspawn.DockNode.prototype.debug_DumpTree = function(indent)
{
    if (indent === undefined)
        indent = 0;

    var message = this.container.name;
    for (var i = 0; i < indent; i++)
        message = "\t" + message;

    var parentType = this.parent === undefined ? "null" : this.parent.container.containerType;
    console.log(">>" + message + " [" + parentType + "]");

    this.children.forEach(function(childNode) { childNode.debug_DumpTree(indent + 1) });
};
/**
 * Manages the dock overlay buttons that are displayed over the dock manager
 */
dockspawn.DockWheel = function(dockManager)
{
    this.dockManager = dockManager;
    this.elementMainWheel = document.createElement("div");    // Contains the main wheel's 5 dock buttons
    this.elementSideWheel = document.createElement("div");    // Contains the 4 buttons on the side
    this.wheelItems = {};
    var wheelTypes = [
        "left", "right", "top", "down", "fill",     // Main dock wheel buttons
        "left-s", "right-s", "top-s", "down-s"      // Buttons on the extreme 4 sides
    ];
    var self = this;
    wheelTypes.forEach(function(wheelType)
    {
        self.wheelItems[wheelType] = new DockWheelItem(self, wheelType);
        if (wheelType.substr(-2, 2) == "-s")
            // Side button
            self.elementSideWheel.appendChild(self.wheelItems[wheelType].element);
        else
            // Main dock wheel button
            self.elementMainWheel.appendChild(self.wheelItems[wheelType].element);
    });

    var zIndex = 100000;
    this.elementMainWheel.classList.add("dock-wheel-base");
    this.elementSideWheel.classList.add("dock-wheel-base");
    this.elementMainWheel.style.zIndex = zIndex + 1;
    this.elementSideWheel.style.zIndex = zIndex;
    this.elementPanelPreview = document.createElement("div");  // Used for showing the preview of where the panel would be docked
    this.elementPanelPreview.classList.add("dock-wheel-panel-preview");
    this.elementPanelPreview.style.zIndex = zIndex - 1;
    this.activeDialog = undefined;  // The dialog being dragged, when the wheel is visible
    this._activeNode = undefined;
    this._visible = false;
};

/** The node over which the dock wheel is being displayed on */
Object.defineProperty(dockspawn.DockWheel.prototype, "activeNode", {
    get: function() { return this._activeNode; },
    set: function(value)
    {
        var previousValue = this._activeNode;
        this._activeNode = value;

        if (previousValue !== this._activeNode)
        {
            // The active node has been changed.
            // Reattach the wheel to the new node's element and show it again
            if (this._visible)
                this.showWheel();
        }
    }
});

dockspawn.DockWheel.prototype.showWheel = function()
{
    this._visible = true;
    if (!this.activeNode)
    {
        // No active node selected. make sure the wheel is invisible
        removeNode(this.elementMainWheel);
        removeNode(this.elementSideWheel);
        return;
    }

    var element = this.activeNode.container.containerElement;
    var ignore = function (ele) {
        return ele === this.dockManager.context.documentManagerView.element ||
            ele === this.dockManager.context.model.rootNode.container.containerElement;
    }.call(this, element);

    // 定制需求：如果是 document-manager，则不显示 main wheel
    removeNode(this.elementMainWheel);
    if(!ignore) {
        var containerWidth = element.clientWidth;
        var containerHeight = element.clientHeight;
        var baseX = Math.floor(containerWidth / 2) + element.offsetLeft;
        var baseY = Math.floor(containerHeight / 2) + element.offsetTop;
        this.elementMainWheel.style.left = baseX + "px";
        this.elementMainWheel.style.top = baseY + "px";

        element.appendChild(this.elementMainWheel);
    }

    // The positioning of the main dock wheel buttons is done automatically through CSS
    // Dynamically calculate the positions of the buttons on the extreme sides of the dock manager
    var sideMargin = 20;
    var dockManagerWidth = this.dockManager.element.clientWidth;
    var dockManagerHeight = this.dockManager.element.clientHeight;
    var dockManagerOffsetX = this.dockManager.element.offsetLeft;
    var dockManagerOffsetY = this.dockManager.element.offsetTop;

    removeNode(this.elementSideWheel);
    this.dockManager.element.appendChild(this.elementSideWheel);

    if(!ignore) {
        this._setWheelButtonPosition("top-s",    dockManagerWidth / 2, -dockManagerHeight + sideMargin);
        this._setWheelButtonPosition("down-s",   dockManagerWidth / 2, -sideMargin);
    } else {
        // remove them
        removeNode(this.wheelItems['top-s'].element);
        removeNode(this.wheelItems['down-s'].element);
    }
    this._setWheelButtonPosition("left-s",   sideMargin, -dockManagerHeight / 2);
    this._setWheelButtonPosition("right-s",  dockManagerWidth - sideMargin * 2, -dockManagerHeight / 2);
};

dockspawn.DockWheel.prototype._setWheelButtonPosition = function(wheelId, left, top)
{
    var item = this.wheelItems[wheelId];
    var itemHalfWidth = item.element.clientWidth / 2;
    var itemHalfHeight = item.element.clientHeight / 2;

    var x = Math.floor(left - itemHalfWidth);
    var y = Math.floor(top - itemHalfHeight);
//    item.element.style.left = "${x}px";
//    item.element.style.top = "${y}px";
    item.element.style.marginLeft = x + "px";
    item.element.style.marginTop = y + "px";
};

dockspawn.DockWheel.prototype.hideWheel = function()
{
    this._visible = false;
    this.activeNode = undefined;
    removeNode(this.elementMainWheel);
    removeNode(this.elementSideWheel);
    removeNode(this.elementPanelPreview);

    // deactivate all wheels
    for (var wheelType in this.wheelItems)
        this.wheelItems[wheelType].active = false;
};

dockspawn.DockWheel.prototype.onMouseOver = function(wheelItem, e)
{
    if (!this.activeDialog)
        return;

    // Display the preview panel to show where the panel would be docked
    var rootNode = this.dockManager.context.model.rootNode;
    var bounds;
    if (wheelItem.id == "top") {
        bounds = this.dockManager.layoutEngine.getDockBounds(this.activeNode, this.activeDialog.panel, "vertical", true);
    } else if (wheelItem.id == "down") {
        bounds = this.dockManager.layoutEngine.getDockBounds(this.activeNode, this.activeDialog.panel, "vertical", false);
    } else if (wheelItem.id == "left") {
        bounds = this.dockManager.layoutEngine.getDockBounds(this.activeNode, this.activeDialog.panel, "horizontal", true);
    } else if (wheelItem.id == "right") {
        bounds = this.dockManager.layoutEngine.getDockBounds(this.activeNode, this.activeDialog.panel, "horizontal", false);
    } else if (wheelItem.id == "fill") {
        bounds = this.dockManager.layoutEngine.getDockBounds(this.activeNode, this.activeDialog.panel, "fill", false);
    } else if (wheelItem.id == "top-s") {
        bounds = this.dockManager.layoutEngine.getDockBounds(rootNode, this.activeDialog.panel, "vertical", true);
    } else if (wheelItem.id == "down-s") {
        bounds = this.dockManager.layoutEngine.getDockBounds(rootNode, this.activeDialog.panel, "vertical", false);
    } else if (wheelItem.id == "left-s") {
        bounds = this.dockManager.layoutEngine.getDockBounds(rootNode, this.activeDialog.panel, "horizontal", true);
    } else if (wheelItem.id == "right-s") {
        bounds = this.dockManager.layoutEngine.getDockBounds(rootNode, this.activeDialog.panel, "horizontal", false);
    }

    if (bounds)
    {
        this.dockManager.element.appendChild(this.elementPanelPreview);
        this.elementPanelPreview.style.left = Math.round(bounds.x) + "px";
        this.elementPanelPreview.style.top = Math.round(bounds.y) + "px";
        this.elementPanelPreview.style.width = Math.round(bounds.width) + "px";
        this.elementPanelPreview.style.height = Math.round(bounds.height) + "px";
    }
};

dockspawn.DockWheel.prototype.onMouseOut = function(wheelItem, e)
{
    removeNode(this.elementPanelPreview);
};

/**
 * Called if the dialog is dropped in a dock panel.
 * The dialog might not necessarily be dropped in one of the dock wheel buttons,
 * in which case the request will be ignored
 */
dockspawn.DockWheel.prototype.onDialogDropped = function(dialog)
{
    // Check if the dialog was dropped in one of the wheel items
    var wheelItem = this._getActiveWheelItem();
    if (wheelItem)
        this._handleDockRequest(wheelItem, dialog);
};

/**
 * Returns the wheel item which has the mouse cursor on top of it
 */
dockspawn.DockWheel.prototype._getActiveWheelItem = function()
{
    for (var wheelType in this.wheelItems)
    {
        var wheelItem = this.wheelItems[wheelType];
        if (wheelItem.active)
            return wheelItem;
    }
    return undefined;
};

dockspawn.DockWheel.prototype._handleDockRequest = function(wheelItem, dialog)
{
    if (!this.activeNode)
        return;
    if (wheelItem.id == "left") {
        this.dockManager.dockDialogLeft(this.activeNode, dialog);
    } else if (wheelItem.id == "right") {
        this.dockManager.dockDialogRight(this.activeNode, dialog);
    } else if (wheelItem.id == "top") {
        this.dockManager.dockDialogUp(this.activeNode, dialog);
    } else if (wheelItem.id == "down") {
        this.dockManager.dockDialogDown(this.activeNode, dialog);
    } else if (wheelItem.id == "fill") {
        this.dockManager.dockDialogFill(this.activeNode, dialog);
    } else if (wheelItem.id == "left-s") {
        this.dockManager.dockDialogLeft(this.dockManager.context.model.rootNode, dialog);
    } else if (wheelItem.id == "right-s") {
        this.dockManager.dockDialogRight(this.dockManager.context.model.rootNode, dialog);
    } else if (wheelItem.id == "top-s") {
        this.dockManager.dockDialogUp(this.dockManager.context.model.rootNode, dialog);
    } else if (wheelItem.id == "down-s") {
        this.dockManager.dockDialogDown(this.dockManager.context.model.rootNode, dialog);
    }
};

function DockWheelItem(wheel, id)
{
    this.wheel = wheel;
    this.id = id;
    var wheelType = id.replace("-s", "");
    this.element = document.createElement("div");
    this.element.classList.add("dock-wheel-item");
    this.element.classList.add("disable-selection");
    this.element.classList.add("dock-wheel-" + wheelType);
    this.element.classList.add("dock-wheel-" + wheelType + "-icon");
    this.hoverIconClass = "dock-wheel-" + wheelType + "-icon-hover";
    this.mouseOverHandler = new dockspawn.EventHandler(this.element, 'mouseover', this.onMouseMoved.bind(this));
    this.mouseOutHandler = new dockspawn.EventHandler(this.element, 'mouseout', this.onMouseOut.bind(this));
    this.active = false;    // Becomes active when the mouse is hovered over it
};

DockWheelItem.prototype.onMouseMoved = function(e)
{
    this.active = true;
    this.element.classList.add(this.hoverIconClass);
    this.wheel.onMouseOver(this, e);
};

DockWheelItem.prototype.onMouseOut = function(e)
{
    this.active = false;
    this.element.classList.remove(this.hoverIconClass);
    this.wheel.onMouseOut(this, e);
};

dockspawn.FillDockContainer = function(dockManager, tabStripDirection)
{
    if (arguments.length == 0)
        return;

    if (tabStripDirection === undefined)
        tabStripDirection = dockspawn.TabHost.DIRECTION_BOTTOM;

    this.dockManager = dockManager;
    this.tabOrientation = tabStripDirection;
    this.name = getNextId("fill_");
    this.element = document.createElement("div");
    this.containerElement = this.element;
    this.containerType = "fill";
    this.minimumAllowedChildNodes = 2;
    this.element.classList.add("dock-container");
    this.element.classList.add("dock-container-fill");
    this.tabHost = new dockspawn.TabHost(this.tabOrientation);
    this.element.appendChild(this.tabHost.hostElement);
}

dockspawn.FillDockContainer.prototype.setActiveChild = function(child)
{
    this.tabHost.setActiveTab(child);
};

dockspawn.FillDockContainer.prototype.resize = function(width, height)
{
    this.element.style.width = width + "px";
    this.element.style.height = height + "px";
    this.tabHost.resize(width, height);
};

dockspawn.FillDockContainer.prototype.performLayout = function(children)
{
    this.tabHost.performLayout(children);
};

dockspawn.FillDockContainer.prototype.destroy = function()
{
    if (removeNode(this.element))
        delete this.element;
};

dockspawn.FillDockContainer.prototype.saveState = function(state)
{
    state.width = this.width;
    state.height = this.height;
};

dockspawn.FillDockContainer.prototype.loadState = function(state)
{
    this.width = state.width;
    this.height = state.height;
};

Object.defineProperty(dockspawn.FillDockContainer.prototype, "width", {
    get: function() { return this.element.clientWidth; },
    set: function(value) { this.element.style.width = value + "px" }
});

Object.defineProperty(dockspawn.FillDockContainer.prototype, "height", {
    get: function() { return this.element.clientHeight; },
    set: function(value) { this.element.style.height = value + "px" }
});

/**
 * The document manager is then central area of the dock layout hierarchy.
 * This is where more important panels are placed (e.g. the text editor in an IDE,
 * 3D view in a modelling package etc
 */
dockspawn.DocumentManagerContainer = function(dockManager)
{
    dockspawn.FillDockContainer.call(this, dockManager, dockspawn.TabHost.DIRECTION_TOP);
    this.minimumAllowedChildNodes = 0;
    this.element.classList.add("document-manager");
    this.tabHost.createTabPage = this._createDocumentTabPage;
    this.tabHost.displayCloseButton = true;
};
dockspawn.DocumentManagerContainer.prototype = new dockspawn.FillDockContainer();
dockspawn.DocumentManagerContainer.prototype.constructor = dockspawn.DocumentManagerContainer;

dockspawn.DocumentManagerContainer.prototype._createDocumentTabPage = function(tabHost, container)
{
    return new dockspawn.DocumentTabPage(tabHost, container);
};

dockspawn.DocumentManagerContainer.prototype.saveState = function(state)
{
    dockspawn.FillDockContainer.prototype.saveState.call(this, state);
    state.documentManager = true;
};

/** Returns the selected document tab */
dockspawn.DocumentManagerContainer.prototype.selectedTab = function()
{
    return this.tabHost.activeTab;
};

/**
 * Specialized tab page that doesn't display the panel's frame when docked in a tab page
 */
dockspawn.DocumentTabPage = function(host, container)
{
    dockspawn.TabPage.call(this, host, container);

    // If the container is a panel, extract the content element and set it as the tab's content
    if (this.container.containerType == "panel")
    {
        this.panel = container;
        this.containerElement = this.panel.elementContent;

        // detach the container element from the panel's frame.
        // It will be reattached when this tab page is destroyed
        // This enables the panel's frame (title bar etc) to be hidden
        // inside the tab page
        removeNode(this.containerElement);
    }
};
dockspawn.DocumentTabPage.prototype = new dockspawn.TabPage();
dockspawn.DocumentTabPage.prototype.constructor = dockspawn.DocumentTabPage;

dockspawn.DocumentTabPage.prototype.destroy = function()
{
    dockspawn.TabPage.prototype.destroy.call(this);

    // Restore the panel content element back into the panel frame
    removeNode(this.containerElement);
    this.panel.elementContentHost.appendChild(this.containerElement);
};
/**
 * A splitter panel manages the child containers inside it with splitter bars.
 * It can be stacked horizontally or vertically
 */
dockspawn.SplitterPanel = function(childContainers, stackedVertical)
{
    this.childContainers = childContainers;
    this.stackedVertical = stackedVertical;
    this.panelElement = document.createElement('div');
    this.spiltterBars = [];
    this._buildSplitterDOM();
};

dockspawn.SplitterPanel.prototype._buildSplitterDOM = function()
{
    if (this.childContainers.length <= 1)
        throw new dockspawn.Exception("Splitter panel should contain atleast 2 panels");

    this.spiltterBars = [];
    for (var i = 0; i < this.childContainers.length - 1; i++)
    {
        var previousContainer = this.childContainers[i];
        var nextContainer = this.childContainers[i + 1];
        var splitterBar = new dockspawn.SplitterBar(previousContainer, nextContainer, this.stackedVertical);
        this.spiltterBars.push(splitterBar);

        // Add the container and split bar to the panel's base div element
        this._insertContainerIntoPanel(previousContainer);
        this.panelElement.appendChild(splitterBar.barElement);
    }
    this._insertContainerIntoPanel(this.childContainers.slice(-1)[0]);
};

dockspawn.SplitterPanel.prototype.performLayout = function(children)
{
    this.removeFromDOM();

    // rebuild
    this.childContainers = children;
    this._buildSplitterDOM();
};

dockspawn.SplitterPanel.prototype.removeFromDOM = function()
{
    this.childContainers.forEach(function(container)
    {
        if (container.containerElement)
        {
            container.containerElement.classList.remove("splitter-container-vertical");
            container.containerElement.classList.remove("splitter-container-horizontal");
            removeNode(container.containerElement);
        }
    });
    this.spiltterBars.forEach(function(bar) { removeNode(bar.barElement); });
};

dockspawn.SplitterPanel.prototype.destroy = function()
{
    this.removeFromDOM();
    this.panelElement.parentNode.removeChild(this.panelElement);
};

dockspawn.SplitterPanel.prototype._insertContainerIntoPanel = function(container)
{
    if (!container)
    {
        console.log('undefined');
    }

    removeNode(container.containerElement);
    this.panelElement.appendChild(container.containerElement);
    container.containerElement.classList.add(this.stackedVertical ? "splitter-container-vertical" : "splitter-container-horizontal");
};

/**
 * Sets the percentage of space the specified [container] takes in the split panel
 * The percentage is specified in [ratio] and is between 0..1
 * The pixal in [ratio] and is greater than 1
 */
dockspawn.SplitterPanel.prototype.setContainerRatio = function(container, ratio)
{
    var splitPanelSize = this.stackedVertical ? this.panelElement.clientHeight : this.panelElement.clientWidth;
    var newContainerSize = ratio > 1? ratio : splitPanelSize * ratio;
    var barSize = this.stackedVertical ? this.spiltterBars[0].barElement.clientHeight : this.spiltterBars[0].barElement.clientWidth;

    var otherPanelSizeQuota = splitPanelSize - newContainerSize - barSize * this.spiltterBars.length;
    var otherPanelScaleMultipler = otherPanelSizeQuota / splitPanelSize;

    for (var i = 0; i < this.childContainers.length; i++)
    {
        var child = this.childContainers[i];
        var size;
        if (child !== container)
        {
            size = this.stackedVertical ? child.containerElement.clientHeight : child.containerElement.clientWidth;
            size *= otherPanelScaleMultipler;
        }
        else
            size = newContainerSize;

        if (this.stackedVertical)
            child.resize(child.width, Math.floor(size));
        else
            child.resize(Math.floor(size), child.height);
    }
};

dockspawn.SplitterPanel.prototype.resize = function(width, height)
{
    if (this.childContainers.length <= 1)
        return;

    // Adjust the fixed dimension that is common to all (i.e. width, if stacked vertical; height, if stacked horizontally)
    for (var i = 0; i < this.childContainers.length; i++)
    {
        var childContainer = this.childContainers[i];
        if (this.stackedVertical)
            childContainer.resize(width, childContainer.height);
        else
            childContainer.resize(childContainer.width, height);

        if (i < this.spiltterBars.length) {
            var splitBar = this.spiltterBars[i];
            if (this.stackedVertical)
                splitBar.barElement.style.width = width + "px";
            else
                splitBar.barElement.style.height = height + "px";
        }
    }

    // Adjust the varying dimension
    var totalChildPanelSize = 0;
    // Find out how much space existing child containers take up (excluding the splitter bars)
    var self = this;
    this.childContainers.forEach(function(container)
    {
        var size = self.stackedVertical ?
            container.height :
            container.width;
        totalChildPanelSize += size;
    });

    // Get the thickness of the bar
    var barSize = this.stackedVertical ? 
        this.spiltterBars[0].barElement.getBoundingClientRect().height :
        this.spiltterBars[0].barElement.getBoundingClientRect().width;
        // this.spiltterBars[0].barElement.clientHeight : 
        // this.spiltterBars[0].barElement.clientWidth;

    // Find out how much space existing child containers will take after being resized (excluding the splitter bars)
    var targetTotalChildPanelSize = this.stackedVertical ? height : width;
    targetTotalChildPanelSize -= barSize * this.spiltterBars.length;

    // Get the scale multiplier
    totalChildPanelSize = Math.max(totalChildPanelSize, 1);
    var scaleMultiplier = targetTotalChildPanelSize / totalChildPanelSize;

    // Update the size with this multiplier
    var updatedTotalChildPanelSize = 0;
    for (var i = 0; i < this.childContainers.length; i++)
    {
        var child = this.childContainers[i];
        var original = this.stackedVertical ?
            child.containerElement.clientHeight :
            child.containerElement.clientWidth;

        var newSize = Math.floor(original * scaleMultiplier);
        updatedTotalChildPanelSize += newSize;

        // If this is the last node, add any extra pixels to fix the rounding off errors and match the requested size
        if (i == this.childContainers.length - 1)
            newSize += targetTotalChildPanelSize - updatedTotalChildPanelSize;

        // Set the size of the panel
        if (this.stackedVertical)
            child.resize(child.width, newSize);
        else
            child.resize(newSize, child.height);
    }

    this.panelElement.style.width = width + "px";
    this.panelElement.style.height = height + "px";
};

dockspawn.SplitterDockContainer = function(name, dockManager, childContainers)
{
    // for prototype inheritance purposes only
    if (arguments.length == 0)
        return;

    this.name = name;
    this.dockManager = dockManager;
    this.splitterPanel = new dockspawn.SplitterPanel(childContainers, this.stackedVertical);
    this.containerElement = this.splitterPanel.panelElement;
    this.minimumAllowedChildNodes = 2;
}

dockspawn.SplitterDockContainer.prototype.resize = function(width, height)
{
//    if (_cachedWidth == _cachedWidth && _cachedHeight == _height) {
//      // No need to resize
//      return;
//    }
    this.splitterPanel.resize(width, height);
    this._cachedWidth = width;
    this._cachedHeight = height;
};

dockspawn.SplitterDockContainer.prototype.performLayout = function(childContainers)
{
    this.splitterPanel.performLayout(childContainers);
};

dockspawn.SplitterDockContainer.prototype.setActiveChild = function(child)
{
};

dockspawn.SplitterDockContainer.prototype.destroy = function()
{
    this.splitterPanel.destroy();
};

/**
 * Sets the percentage of space the specified [container] takes in the split panel
 * The percentage is specified in [ratio] and is between 0..1
 */
dockspawn.SplitterDockContainer.prototype.setContainerRatio = function(container, ratio)
{
    this.splitterPanel.setContainerRatio(container, ratio);
    this.resize(this.width, this.height);
};

dockspawn.SplitterDockContainer.prototype.saveState = function(state)
{
    state.width = this.width;
    state.height = this.height;
};

dockspawn.SplitterDockContainer.prototype.loadState = function(state)
{
    this.resize(state.width, state.height);
};

Object.defineProperty(dockspawn.SplitterDockContainer.prototype, "width", {
    get: function()
    {
        if (this._cachedWidth === undefined)
            this._cachedWidth = this.splitterPanel.panelElement.clientWidth;
        return this._cachedWidth;
    }
});

Object.defineProperty(dockspawn.SplitterDockContainer.prototype, "height", {
    get: function()
    {
        if (this._cachedHeight === undefined)
            this._cachedHeight = this.splitterPanel.panelElement.clientHeight;
        return this._cachedHeight;
    }
});

dockspawn.HorizontalDockContainer = function(dockManager, childContainers)
{
    this.stackedVertical = false;
    dockspawn.SplitterDockContainer.call(this, getNextId("horizontal_splitter_"), dockManager, childContainers);
    this.containerType = "horizontal";
};
dockspawn.HorizontalDockContainer.prototype = new dockspawn.SplitterDockContainer();
dockspawn.HorizontalDockContainer.prototype.constructor = dockspawn.HorizontalDockContainer;
/**
 * This dock container wraps the specified element on a panel frame with a title bar and close button
 */
dockspawn.PanelContainer = function(elementContent, dockManager, title)
{
    if (!title)
        title = "Panel";
    this.elementContent = elementContent;
    this.dockManager = dockManager;
    this.title = title;
    this.containerType = "panel";
    this.iconName = "icon-circle-arrow-right";
    this.minimumAllowedChildNodes = 0;
    this._floatingDialog = undefined;
    this._initialize();
};

Object.defineProperty(dockspawn.PanelContainer.prototype, "floatingDialog", {
    get: function() { return this._floatingDialog; },
    set: function(value)
    {
        this._floatingDialog = value;
        var canUndock = (this._floatingDialog === undefined);
        this.undockInitiator.enabled = canUndock;
    }
});

dockspawn.PanelContainer.loadFromState = function(state, dockManager)
{
    var elementName = state.element;
    var elementContent = document.getElementById(elementName);
    var ret = new dockspawn.PanelContainer(elementContent, dockManager);
    ret.elementContent = elementContent;
    ret._initialize();
    ret.loadState(state);
    return ret;
};

dockspawn.PanelContainer.prototype.saveState = function(state)
{
    state.element = this.elementContent.id;
    state.width = this.width;
    state.height = this.height;
};

dockspawn.PanelContainer.prototype.loadState = function(state)
{
    this.width = state.width;
    this.height = state.height;
    this.resize(this.width, this.height);
};

dockspawn.PanelContainer.prototype.setActiveChild = function(child)
{
};

Object.defineProperty(dockspawn.PanelContainer.prototype, "containerElement", {
    get: function() { return this.elementPanel; }
});

dockspawn.PanelContainer.prototype._initialize = function()
{
    this.name = getNextId("panel_");
    this.elementPanel = document.createElement('div');
    this.elementTitle = document.createElement('div');
    this.elementTitleText = document.createElement('div');
    this.elementContentHost = document.createElement('div');
    this.elementButtonClose = document.createElement('div');

    this.elementPanel.appendChild(this.elementTitle);
    this.elementTitle.appendChild(this.elementTitleText);
    this.elementTitle.appendChild(this.elementButtonClose);
    this.elementButtonClose.innerHTML = '<i class="glyphicon glyphicon-remove"></i>';
    this.elementButtonClose.classList.add("panel-titlebar-button-close");
    this.elementPanel.appendChild(this.elementContentHost);

    this.elementPanel.classList.add("panel-base");
    this.elementTitle.classList.add("panel-titlebar");
    this.elementTitle.classList.add("disable-selection");
    this.elementTitleText.classList.add("panel-titlebar-text");
    this.elementContentHost.classList.add("panel-content");

    // set the size of the dialog elements based on the panel's size
    var panelWidth = this.elementContent.clientWidth;
    var panelHeight = this.elementContent.clientHeight;
    var titleHeight = this.elementTitle.clientHeight;
    this._setPanelDimensions(panelWidth, panelHeight + titleHeight);

    // Add the panel to the body
    document.body.appendChild(this.elementPanel);

    this.closeButtonClickedHandler = new dockspawn.EventHandler(this.elementButtonClose, 'click', this.onCloseButtonClicked.bind(this));

    removeNode(this.elementContent);
    this.elementContentHost.appendChild(this.elementContent);

    // Extract the title from the content element's attribute
    var contentTitle = this.elementContent.getAttribute('caption');
    var contentIcon = this.elementContent.getAttribute('icon');
    if (contentTitle != null) this.title = contentTitle;
    if (contentIcon != null) this.iconName = contentIcon;
    this._updateTitle();

    this.undockInitiator = new dockspawn.UndockInitiator(this.elementTitle, this.performUndockToDialog.bind(this));
    delete this.floatingDialog;
};

dockspawn.PanelContainer.prototype.destroy = function()
{
    removeNode(this.elementPanel);
    if (this.closeButtonClickedHandler)
    {
        this.closeButtonClickedHandler.cancel();
        delete this.closeButtonClickedHandler;
    }
};

/**
 * Undocks the panel and and converts it to a dialog box
 */
dockspawn.PanelContainer.prototype.performUndockToDialog = function(e, dragOffset)
{
    this.undockInitiator.enabled = false;
    return this.dockManager.requestUndockToDialog(this, e, dragOffset);
};

/**
 * Undocks the container and from the layout hierarchy
 * The container would be removed from the DOM
 */
dockspawn.PanelContainer.prototype.performUndock = function()
{
    this.undockInitiator.enabled = false;
    this.dockManager.requestUndock(this);
};

dockspawn.PanelContainer.prototype.prepareForDocking = function()
{
    this.undockInitiator.enabled = true;
};

Object.defineProperty(dockspawn.PanelContainer.prototype, "width", {
    get: function() { return this._cachedWidth; },
    set: function(value)
    {
        if (value !== this._cachedWidth)
        {
            this._cachedWidth = value;
            this.elementPanel.style.width = value + "px";
        }
    }
});

Object.defineProperty(dockspawn.PanelContainer.prototype, "height", {
    get: function() { return this._cachedHeight; },
    set: function(value)
    {
        if (value !== this._cachedHeight)
        {
            this._cachedHeight = value;
            this.elementPanel.style.height = value + "px";
        }
    }
});

dockspawn.PanelContainer.prototype.resize = function(width,  height)
{
    if (this._cachedWidth == width && this._cachedHeight == height)
    {
        // Already in the desired size
        return;
    }
    this._setPanelDimensions(width, height);
    this._cachedWidth = width;
    this._cachedHeight = height;
};

dockspawn.PanelContainer.prototype._setPanelDimensions = function(width, height)
{
    this.elementTitle.style.width = width + "px";
    this.elementContentHost.style.width = width + "px";
    this.elementContent.style.width = width + "px";
    this.elementPanel.style.width = width + "px";

    var titleBarHeight = this.elementTitle.clientHeight;
    var contentHeight = height - titleBarHeight;
    this.elementContentHost.style.height = contentHeight + "px";
    this.elementContent.style.height = contentHeight + "px";
    this.elementPanel.style.height = height + "px";
};

dockspawn.PanelContainer.prototype.setTitle = function(title)
{
    this.title = title;
    this._updateTitle();
    if (this.onTitleChanged)
        this.onTitleChanged(this, title);
};

dockspawn.PanelContainer.prototype.setTitleIcon = function(iconName)
{
    this.iconName = iconName;
    this._updateTitle();
};

dockspawn.PanelContainer.prototype._updateTitle = function()
{
    this.elementTitleText.innerHTML = '<i class="' + this.iconName + '"></i> ' + this.title;
};

dockspawn.PanelContainer.prototype.getRawTitle = function()
{
    return this.elementTitleText.innerHTML;
};

dockspawn.PanelContainer.prototype.performLayout = function(children)
{
};

dockspawn.PanelContainer.prototype.onCloseButtonClicked = function(e)
{
    if (this.floatingDialog)
        this.floatingDialog.destroy();
    else
    {
        this.performUndock();
        this.destroy();
    }
};

dockspawn.VerticalDockContainer = function(dockManager, childContainers)
{
    this.stackedVertical = true;
    dockspawn.SplitterDockContainer.call(this, getNextId("vertical_splitter_"), dockManager, childContainers);
    this.containerType = "vertical";
};
dockspawn.VerticalDockContainer.prototype = new dockspawn.SplitterDockContainer();
dockspawn.VerticalDockContainer.prototype.constructor = dockspawn.VerticalDockContainer;
dockspawn.SplitterBar = function(previousContainer, nextContainer, stackedVertical)
{
    this.previousContainer = previousContainer; // The panel to the left/top side of the bar, depending on the bar orientation
    this.nextContainer = nextContainer;         // The panel to the right/bottom side of the bar, depending on the bar orientation
    this.stackedVertical = stackedVertical;
    this.barElement = document.createElement('div');
    this.barElement.classList.add(stackedVertical ? "splitbar-horizontal" : "splitbar-vertical");
    this.mouseDownHandler = new dockspawn.EventHandler(this.barElement, 'mousedown', this.onMouseDown.bind(this));
    this.minPanelSize = 50; // TODO: Get from container configuration
    this.readyToProcessNextDrag = true;
};

dockspawn.SplitterBar.prototype.onMouseDown = function(e)
{
    this._startDragging(e);
};

dockspawn.SplitterBar.prototype.onMouseUp = function(e)
{
    this._stopDragging(e);
};

dockspawn.SplitterBar.prototype.onMouseMoved = function(e)
{
    if (!this.readyToProcessNextDrag)
        return;
    this.readyToProcessNextDrag = false;

    var dockManager = this.previousContainer.dockManager;
    dockManager.suspendLayout();
    var dx = e.pageX - this.previousMouseEvent.pageX;
    var dy = e.pageY - this.previousMouseEvent.pageY;
    this._performDrag(dx, dy);
    this.previousMouseEvent = e;
    this.readyToProcessNextDrag = true;
    dockManager.resumeLayout();
};

dockspawn.SplitterBar.prototype._performDrag = function(dx, dy)
{
    var previousWidth = this.previousContainer.containerElement.clientWidth;
    var previousHeight = this.previousContainer.containerElement.clientHeight;
    var nextWidth = this.nextContainer.containerElement.clientWidth;
    var nextHeight = this.nextContainer.containerElement.clientHeight;

    var previousPanelSize = this.stackedVertical ? previousHeight : previousWidth;
    var nextPanelSize = this.stackedVertical ? nextHeight : nextWidth;
    var deltaMovement = this.stackedVertical ? dy : dx;
    var newPreviousPanelSize = previousPanelSize + deltaMovement;
    var newNextPanelSize = nextPanelSize - deltaMovement;

    if (newPreviousPanelSize < this.minPanelSize || newNextPanelSize < this.minPanelSize)
    {
        // One of the panels is smaller than it should be.
        // In that case, check if the small panel's size is being increased
        var continueProcessing = (newPreviousPanelSize < this.minPanelSize && newPreviousPanelSize > previousPanelSize) ||
            (newNextPanelSize < this.minPanelSize && newNextPanelSize > nextPanelSize);

        if (!continueProcessing)
            return;
    }

    if (this.stackedVertical)
    {
        this.previousContainer.resize(previousWidth, newPreviousPanelSize);
        this.nextContainer.resize(nextWidth, newNextPanelSize);
    }
    else
    {
        this.previousContainer.resize(newPreviousPanelSize, previousHeight);
        this.nextContainer.resize(newNextPanelSize, nextHeight);
    }
};

dockspawn.SplitterBar.prototype._startDragging = function(e)
{
    disableGlobalTextSelection();
    if (this.mouseMovedHandler)
    {
        this.mouseMovedHandler.cancel();
        delete this.mouseMovedHandler;
    }
    if (this.mouseUpHandler)
    {
        this.mouseUpHandler.cancel();
        delete this.mouseUpHandler;
    }
    this.mouseMovedHandler = new dockspawn.EventHandler(window, 'mousemove', this.onMouseMoved.bind(this));
    this.mouseUpHandler = new dockspawn.EventHandler(window, 'mouseup', this.onMouseUp.bind(this));
    this.previousMouseEvent = e;
};

dockspawn.SplitterBar.prototype._stopDragging = function(e)
{
    enableGlobalTextSelection();
    document.body.classList.remove("disable-selection");
    if (this.mouseMovedHandler)
    {
        this.mouseMovedHandler.cancel();
        delete this.mouseMovedHandler;
    }
    if (this.mouseUpHandler)
    {
        this.mouseUpHandler.cancel();
        delete this.mouseUpHandler;
    }
};
/**
 * Deserializes the dock layout hierarchy from JSON and creates a dock hierarhcy graph
 */
dockspawn.DockGraphDeserializer = function(dockManager)
{
    this.dockManager = dockManager;
};

dockspawn.DockGraphDeserializer.prototype.deserialize = function(json)
{
    var graphInfo = JSON.parse(_json);
    var model = new dockspawn.DockModel();
    model.rootNode = this._buildGraph(graphInfo);
    return model;
};

dockspawn.DockGraphDeserializer.prototype._buildGraph = function(nodeInfo)
{
    var childrenInfo = nodeInfo.children;
    var children = [];
    var self = this;
    childrenInfo.forEach(function(childInfo)
    {
        var childNode = self._buildGraph(childInfo);
        children.push(childNode);
    });

    // Build the container owned by this node
    var container = this._createContainer(nodeInfo, children);

    // Build the node for this container and attach it's children
    var node = new dockspawn.DockNode(container);
    node.children = children;
    node.children.forEach(function(childNode) { childNode.parent = node; });

    return node;
};

dockspawn.DockGraphDeserializer.prototype._createContainer = function(nodeInfo, children)
{
    var containerType = nodeInfo.containerType;
    var containerState = nodeInfo.state;
    var container;

    var childContainers = [];
    children.forEach(function(childNode) { childContainers.push(childNode.container); });
    childContainers = [];

    if (containerType == "panel")
        container = new dockspawn.PanelContainer.loadFromState(containerState, this.dockManager);
    else if (containerType == "horizontal")
        container = new dockspawn.HorizontalDockContainer(this.dockManager, childContainers);
    else if (containerType == "vertical")
        container = new dockspawn.VerticalDockContainer(this.dockManager, childContainers);
    else if (containerType == "fill")
    {
        // Check if this is a document manager

        // TODO: Layout engine compares the string "fill", so cannot create another subclass type
        // called document_manager and have to resort to this hack. use RTTI in layout engine
        var typeDocumentManager = containerState.documentManager;
        if (typeDocumentManager)
            container = new DocumentManagerContainer(this.dockManager);
        else
            container = new dockspawn.FillDockContainer(this.dockManager);
    }
    else
        throw new dockspawn.Exception("Cannot create dock container of unknown type: " + containerType);

    // Restore the state of the container
    container.loadState(containerState);
    container.performLayout(childContainers);
    return container;
};
/**
 * The serializer saves / loads the state of the dock layout hierarchy
 */
dockspawn.DockGraphSerializer = function()
{
};

dockspawn.DockGraphSerializer.prototype.serialize = function(model)
{
    var graphInfo = this._buildGraphInfo(model.rootNode);
    return JSON.stringify(graphInfo);
};

dockspawn.DockGraphSerializer.prototype._buildGraphInfo = function(node)
{
    var nodeState = {};
    node.container.saveState(nodeState);

    var childrenInfo = [];
    var self = this;
    node.childNodes.forEach(function(childNode) {
        childrenInfo.push(self._buildGraphInfo(childNode));
    });

    var nodeInfo = {};
    nodeInfo.containerType = node.container.containerType;
    nodeInfo.state = nodeState;
    nodeInfo.children = childrenInfo;
    return nodeInfo;
};
function getPixels(pixels)
{
    if (pixels == null)
        return 0;
    return parseInt(pixels.replace("px", ""));
}

function disableGlobalTextSelection()
{
    document.body.classList.add("disable-selection");
}

function enableGlobalTextSelection()
{
    document.body.classList.remove("disable-selection");
}

function isPointInsideNode(px, py, node)
{
    var element = node.container.containerElement;
    var x = element.offsetLeft;
    var y = element.offsetTop;
    var width = element.clientWidth;
    var height = element.clientHeight;

    return (px >= x && px <= x + width && py >= y && py <= y + height);
}

function Rectangle()
{
//    num x;
//    num y;
//    num width;
//    num height;
}

function getNextId(prefix)
{
    return prefix + getNextId.counter++;
}
getNextId.counter = 0;

function removeNode(node)
{
    if (node.parentNode == null)
        return false;
    node.parentNode.removeChild(node);
    return true;
}

function Point(x, y)
{
    this.x = x;
    this.y = y;
}
dockspawn.EventHandler = function(source, eventName, target)
{
    // wrap the target
    this.target = target;
    this.eventName = eventName;
    this.source = source;

    this.source.addEventListener(eventName, this.target);
};

dockspawn.EventHandler.prototype.cancel = function()
{
    this.source.removeEventListener(this.eventName, this.target)
};
/**
 * Listens for events on the [element] and notifies the [listener]
 * if an undock event has been invoked.  An undock event is invoked
 * when the user clicks on the event and drags is beyond the
 * specified [thresholdPixels]
 */
dockspawn.UndockInitiator = function(element, listener, thresholdPixels)
{
    if (!thresholdPixels)
        thresholdPixels = 10;

    this.element = element;
    this.listener = listener;
    this.thresholdPixels = thresholdPixels;
    this._enabled = false;
};

Object.defineProperty(dockspawn.UndockInitiator.prototype, "enabled", {
    get: function() { return this._enabled; },
    set: function(value)
    {
        this._enabled = value;
        if (this._enabled)
        {
            if (this.mouseDownHandler)
            {
                this.mouseDownHandler.cancel();
                delete this.mouseDownHandler;
            }
            this.mouseDownHandler = new dockspawn.EventHandler(this.element, 'mousedown', this.onMouseDown.bind(this));
        }
        else
        {
            if (this.mouseDownHandler)
            {
                this.mouseDownHandler.cancel();
                delete this.mouseDownHandler;
            }
            if (this.mouseUpHandler)
            {
                this.mouseUpHandler.cancel();
                delete this.mouseUpHandler;
            }
            if (this.mouseMoveHandler)
            {
                this.mouseMoveHandler.cancel();
                delete this.mouseMoveHandler;
            }
        }
    }
});

dockspawn.UndockInitiator.prototype.onMouseDown = function(e)
{
    // Make sure we dont do this on floating dialogs
    if (this.enabled)
    {
        if (this.mouseUpHandler)
        {
            this.mouseUpHandler.cancel();
            delete this.mouseUpHandler;
        }
        if (this.mouseMoveHandler)
        {
            this.mouseMoveHandler.cancel();
            delete this.mouseMoveHandler;
        }
        this.mouseUpHandler = new dockspawn.EventHandler(window, 'mouseup', this.onMouseUp.bind(this));
        this.mouseMoveHandler = new dockspawn.EventHandler(window, 'mousemove', this.onMouseMove.bind(this));
        this.dragStartPosition = new Point(e.pageX, e.pageY);
    }
};

dockspawn.UndockInitiator.prototype.onMouseUp = function(e)
{
    if (this.mouseUpHandler)
    {
        this.mouseUpHandler.cancel();
        delete this.mouseUpHandler;
    }
    if (this.mouseMoveHandler)
    {
        this.mouseMoveHandler.cancel();
        delete this.mouseMoveHandler;
    }
};

dockspawn.UndockInitiator.prototype.onMouseMove = function(e)
{
    var position = new Point(e.pageX, e.pageY);
    var dx = position.x - this.dragStartPosition.x;
    var dy = position.y - this.dragStartPosition.y;
    var distance = Math.sqrt(dx * dx + dy * dy);

    if (distance > this.thresholdPixels)
    {
        this.enabled = false;
        this._requestUndock(e);
    }
};

dockspawn.UndockInitiator.prototype._requestUndock = function(e)
{
    var dragOffsetX = this.dragStartPosition.x - this.element.offsetLeft;
    var dragOffsetY = this.dragStartPosition.y - this.element.offsetTop;
    var dragOffset = new Point(dragOffsetX, dragOffsetY);
    this.listener(e, dragOffset);
};

})();


/*
 * Konva JavaScript Framework v0.10.0
 * http://konvajs.github.io/
 * Licensed under the MIT or GPL Version 2 licenses.
 * Date: Tue Oct 27 2015
 *
 * Original work Copyright (C) 2011 - 2013 by Eric Rowell (KineticJS)
 * Modified work Copyright (C) 2014 - 2015 by Anton Lavrenov (Konva)
 *
 * @license
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @namespace Konva
 */
var Konva = {};
(function(root) {
    'use strict';
    var PI_OVER_180 = Math.PI / 180;

    Konva = {
        // public
        version: '0.10.0',

        // private
        stages: [],
        idCounter: 0,
        ids: {},
        names: {},
        shapes: {},
        listenClickTap: false,
        inDblClickWindow: false,

        // configurations
        enableTrace: false,
        traceArrMax: 100,
        dblClickWindow: 400,
        /**
         * Global pixel ratio configuration. KonvaJS automatically detect pixel ratio of current device.
         * But you may override such property, if you want to use your value.
         * @property pixelRatio
         * @default undefined
         * @memberof Konva
         * @example
         * Konva.pixelRatio = 1;
         */
        pixelRatio: undefined,
        /**
         * Drag distance property. If you start to drag a node you may want to wait until pointer is moved to some distance from start point,
         * only then start dragging.
         * @property dragDistance
         * @default 0
         * @memberof Konva
         * @example
         * Konva.dragDistance = 10;
         */
        dragDistance: 0,
        /**
         * Use degree values for angle properties. You may set this property to false if you want to use radiant values.
         * @property angleDeg
         * @default true
         * @memberof Konva
         * @example
         * node.rotation(45); // 45 degrees
         * Konva.angleDeg = false;
         * node.rotation(Math.PI / 2); // PI/2 radian
         */
        angleDeg: true,
         /**
         * Show different warnings about errors or wrong API usage
         * @property showWarnings
         * @default true
         * @memberof Konva
         * @example
         * Konva.showWarnings = false;
         */
        showWarnings: true,



        /**
         * @namespace Filters
         * @memberof Konva
         */
        Filters: {},

        /**
         * returns whether or not drag and drop is currently active
         * @method
         * @memberof Konva
         */
        isDragging: function() {
            var dd = Konva.DD;

            // if DD is not included with the build, then
            // drag and drop is not even possible
            if (dd) {
                return dd.isDragging;
            }
            return false;
        },
        /**
        * returns whether or not a drag and drop operation is ready, but may
        *  not necessarily have started
        * @method
        * @memberof Konva
        */
        isDragReady: function() {
            var dd = Konva.DD;

            // if DD is not included with the build, then
            // drag and drop is not even possible
            if (dd) {
                return !!dd.node;
            }
            return false;
        },
        _addId: function(node, id) {
            if(id !== undefined) {
                this.ids[id] = node;
            }
        },
        _removeId: function(id) {
            if(id !== undefined) {
                delete this.ids[id];
            }
        },
        _addName: function(node, name) {
            if(name) {
                if(!this.names[name]) {
                    this.names[name] = [];
                }
                this.names[name].push(node);
            }
        },
        _removeName: function(name, _id) {
            if(!name) {
                return;
            }
            var nodes = this.names[name];
            if(!nodes) {
                return;
            }
            for(var n = 0; n < nodes.length; n++) {
                var no = nodes[n];
                if(no._id === _id) {
                    nodes.splice(n, 1);
                }
            }
            if(nodes.length === 0) {
                delete this.names[name];
            }
        },
        getAngle: function(angle) {
            return this.angleDeg ? angle * PI_OVER_180 : angle;
        },
        _parseUA: function(userAgent) {
            var ua = userAgent.toLowerCase(),
                // jQuery UA regex
                match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
                /(webkit)[ \/]([\w.]+)/.exec( ua ) ||
                /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
                /(msie) ([\w.]+)/.exec( ua ) ||
                ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
                [],

                // adding mobile flag as well
                mobile = !!(userAgent.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i)),
                ieMobile = !!(userAgent.match(/IEMobile/i));

            return {
                browser: match[ 1 ] || '',
                version: match[ 2 ] || '0',

                // adding mobile flab
                mobile: mobile,
                ieMobile: ieMobile  // If this is true (i.e., WP8), then Konva touch events are executed instead of equivalent Konva mouse events
            };
        },
        // user agent
        UA: undefined
    };

    Konva.UA = Konva._parseUA((root.navigator && root.navigator.userAgent) || '');

})(this);

// Uses Node, AMD or browser globals to create a module.

// If you want something that will work in other stricter CommonJS environments,
// or if you need to create a circular dependency, see commonJsStrict.js

// Defines a module "returnExports" that depends another module called "b".
// Note that the name of the module is implied by the file name. It is best
// if the file name and the exported global have matching names.

// If the 'b' module also uses this type of boilerplate, then
// in the browser, it will create a global .b that is used below.

// If you do not want to support the browser global path, then you
// can remove the `root` use and the passing `this` as the first arg to
// the top function.

// if the module has no dependencies, the above pattern can be simplified to
( function(root, factory) {
    'use strict';
    if( typeof exports === 'object') {
        var KonvaJS = factory();
        // runtime-check for browserify and nw.js (node-webkit)
        if(global.window && global.window.document) {
            Konva.document = global.window.document;
            Konva.window = global.window;
        } else {
            // Node. Does not work with strict CommonJS, but
            // only CommonJS-like enviroments that support module.exports,
            // like Node.
            var Canvas = require('canvas');
            var jsdom = require('jsdom').jsdom;

            Konva.document = jsdom('<!DOCTYPE html><html><head></head><body></body></html>');
            Konva.window = Konva.document.parentWindow;
            Konva.window.Image = Canvas.Image;
            Konva._nodeCanvas = Canvas;
        }

        Konva.root = root;
        module.exports = KonvaJS;
        return;
    }
    else if( typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(factory);
    }
    Konva.document = document;
    Konva.window = window;
    Konva.root = root;
}(this, function() {
    'use strict';
    // Just return a value to define the module export.
    // This example returns an object, but the module
    // can return a function as the exported value.
    return Konva;
}));

/*eslint-disable  eqeqeq, no-cond-assign, no-empty*/
(function() {
    'use strict';
    /**
     * Collection constructor.  Collection extends
     *  Array.  This class is used in conjunction with {@link Konva.Container#get}
     * @constructor
     * @memberof Konva
     */
    Konva.Collection = function() {
        var args = [].slice.call(arguments), length = args.length, i = 0;

        this.length = length;
        for(; i < length; i++) {
            this[i] = args[i];
        }
        return this;
    };
    Konva.Collection.prototype = [];
    /**
     * iterate through node array and run a function for each node.
     *  The node and index is passed into the function
     * @method
     * @memberof Konva.Collection.prototype
     * @param {Function} func
     * @example
     * // get all nodes with name foo inside layer, and set x to 10 for each
     * layer.get('.foo').each(function(shape, n) {
     *   shape.setX(10);
     * });
     */
    Konva.Collection.prototype.each = function(func) {
        for(var n = 0; n < this.length; n++) {
            func(this[n], n);
        }
    };
    /**
     * convert collection into an array
     * @method
     * @memberof Konva.Collection.prototype
     */
    Konva.Collection.prototype.toArray = function() {
        var arr = [],
            len = this.length,
            n;

        for(n = 0; n < len; n++) {
            arr.push(this[n]);
        }
        return arr;
    };
    /**
     * convert array into a collection
     * @method
     * @memberof Konva.Collection
     * @param {Array} arr
     */
    Konva.Collection.toCollection = function(arr) {
        var collection = new Konva.Collection(),
            len = arr.length,
            n;

        for(n = 0; n < len; n++) {
            collection.push(arr[n]);
        }
        return collection;
    };

    // map one method by it's name
    Konva.Collection._mapMethod = function(methodName) {
        Konva.Collection.prototype[methodName] = function() {
            var len = this.length,
                i;

            var args = [].slice.call(arguments);
            for(i = 0; i < len; i++) {
                this[i][methodName].apply(this[i], args);
            }

            return this;
        };
    };

    Konva.Collection.mapMethods = function(constructor) {
        var prot = constructor.prototype;
        for(var methodName in prot) {
            Konva.Collection._mapMethod(methodName);
        }
    };

    /*
    * Last updated November 2011
    * By Simon Sarris
    * www.simonsarris.com
    * sarris@acm.org
    *
    * Free to use and distribute at will
    * So long as you are nice to people, etc
    */

    /*
    * The usage of this class was inspired by some of the work done by a forked
    * project, KineticJS-Ext by Wappworks, which is based on Simon's Transform
    * class.  Modified by Eric Rowell
    */

    /**
     * Transform constructor
     * @constructor
     * @param {Array} [m] Optional six-element matrix
     * @memberof Konva
     */
    Konva.Transform = function(m) {
        this.m = (m && m.slice()) || [1, 0, 0, 1, 0, 0];
    };

    Konva.Transform.prototype = {
        /**
         * Copy Konva.Transform object
         * @method
         * @memberof Konva.Transform.prototype
         * @returns {Konva.Transform}
         */
        copy: function() {
            return new Konva.Transform(this.m);
        },
        /**
         * Transform point
         * @method
         * @memberof Konva.Transform.prototype
         * @param {Object} point 2D point(x, y)
         * @returns {Object} 2D point(x, y)
         */
        point: function(point) {
            var m = this.m;
            return {
                x: m[0] * point.x + m[2] * point.y + m[4],
                y: m[1] * point.x + m[3] * point.y + m[5]
            };
        },
        /**
         * Apply translation
         * @method
         * @memberof Konva.Transform.prototype
         * @param {Number} x
         * @param {Number} y
         * @returns {Konva.Transform}
         */
        translate: function(x, y) {
            this.m[4] += this.m[0] * x + this.m[2] * y;
            this.m[5] += this.m[1] * x + this.m[3] * y;
            return this;
        },
        /**
         * Apply scale
         * @method
         * @memberof Konva.Transform.prototype
         * @param {Number} sx
         * @param {Number} sy
         * @returns {Konva.Transform}
         */
        scale: function(sx, sy) {
            this.m[0] *= sx;
            this.m[1] *= sx;
            this.m[2] *= sy;
            this.m[3] *= sy;
            return this;
        },
        /**
         * Apply rotation
         * @method
         * @memberof Konva.Transform.prototype
         * @param {Number} rad  Angle in radians
         * @returns {Konva.Transform}
         */
        rotate: function(rad) {
            var c = Math.cos(rad);
            var s = Math.sin(rad);
            var m11 = this.m[0] * c + this.m[2] * s;
            var m12 = this.m[1] * c + this.m[3] * s;
            var m21 = this.m[0] * -s + this.m[2] * c;
            var m22 = this.m[1] * -s + this.m[3] * c;
            this.m[0] = m11;
            this.m[1] = m12;
            this.m[2] = m21;
            this.m[3] = m22;
            return this;
        },
        /**
         * Returns the translation
         * @method
         * @memberof Konva.Transform.prototype
         * @returns {Object} 2D point(x, y)
         */
        getTranslation: function() {
            return {
                x: this.m[4],
                y: this.m[5]
            };
        },
        /**
         * Apply skew
         * @method
         * @memberof Konva.Transform.prototype
         * @param {Number} sx
         * @param {Number} sy
         * @returns {Konva.Transform}
         */
        skew: function(sx, sy) {
            var m11 = this.m[0] + this.m[2] * sy;
            var m12 = this.m[1] + this.m[3] * sy;
            var m21 = this.m[2] + this.m[0] * sx;
            var m22 = this.m[3] + this.m[1] * sx;
            this.m[0] = m11;
            this.m[1] = m12;
            this.m[2] = m21;
            this.m[3] = m22;
            return this;
         },
        /**
         * Transform multiplication
         * @method
         * @memberof Konva.Transform.prototype
         * @param {Konva.Transform} matrix
         * @returns {Konva.Transform}
         */
        multiply: function(matrix) {
            var m11 = this.m[0] * matrix.m[0] + this.m[2] * matrix.m[1];
            var m12 = this.m[1] * matrix.m[0] + this.m[3] * matrix.m[1];

            var m21 = this.m[0] * matrix.m[2] + this.m[2] * matrix.m[3];
            var m22 = this.m[1] * matrix.m[2] + this.m[3] * matrix.m[3];

            var dx = this.m[0] * matrix.m[4] + this.m[2] * matrix.m[5] + this.m[4];
            var dy = this.m[1] * matrix.m[4] + this.m[3] * matrix.m[5] + this.m[5];

            this.m[0] = m11;
            this.m[1] = m12;
            this.m[2] = m21;
            this.m[3] = m22;
            this.m[4] = dx;
            this.m[5] = dy;
            return this;
        },
        /**
         * Invert the matrix
         * @method
         * @memberof Konva.Transform.prototype
         * @returns {Konva.Transform}
         */
        invert: function() {
            var d = 1 / (this.m[0] * this.m[3] - this.m[1] * this.m[2]);
            var m0 = this.m[3] * d;
            var m1 = -this.m[1] * d;
            var m2 = -this.m[2] * d;
            var m3 = this.m[0] * d;
            var m4 = d * (this.m[2] * this.m[5] - this.m[3] * this.m[4]);
            var m5 = d * (this.m[1] * this.m[4] - this.m[0] * this.m[5]);
            this.m[0] = m0;
            this.m[1] = m1;
            this.m[2] = m2;
            this.m[3] = m3;
            this.m[4] = m4;
            this.m[5] = m5;
            return this;
        },
        /**
         * return matrix
         * @method
         * @memberof Konva.Transform.prototype
         */
        getMatrix: function() {
            return this.m;
        },
        /**
         * set to absolute position via translation
         * @method
         * @memberof Konva.Transform.prototype
         * @returns {Konva.Transform}
         * @author ericdrowell
         */
        setAbsolutePosition: function(x, y) {
            var m0 = this.m[0],
                m1 = this.m[1],
                m2 = this.m[2],
                m3 = this.m[3],
                m4 = this.m[4],
                m5 = this.m[5],
                yt = ((m0 * (y - m5)) - (m1 * (x - m4))) / ((m0 * m3) - (m1 * m2)),
                xt = (x - m4 - (m2 * yt)) / m0;

            return this.translate(xt, yt);
        }
    };

    // CONSTANTS
    var CONTEXT_2D = '2d',
        OBJECT_ARRAY = '[object Array]',
        OBJECT_NUMBER = '[object Number]',
        OBJECT_STRING = '[object String]',
        PI_OVER_DEG180 = Math.PI / 180,
        DEG180_OVER_PI = 180 / Math.PI,
        HASH = '#',
        EMPTY_STRING = '',
        ZERO = '0',
        KONVA_WARNING = 'Konva warning: ',
        KONVA_ERROR = 'Konva error: ',
        RGB_PAREN = 'rgb(',
        COLORS = {
            aliceblue: [240, 248, 255],
            antiquewhite: [250, 235, 215],
            aqua: [0, 255, 255],
            aquamarine: [127, 255, 212],
            azure: [240, 255, 255],
            beige: [245, 245, 220],
            bisque: [255, 228, 196],
            black: [0, 0, 0],
            blanchedalmond: [255, 235, 205],
            blue: [0, 0, 255],
            blueviolet: [138, 43, 226],
            brown: [165, 42, 42],
            burlywood: [222, 184, 135],
            cadetblue: [95, 158, 160],
            chartreuse: [127, 255, 0],
            chocolate: [210, 105, 30],
            coral: [255, 127, 80],
            cornflowerblue: [100, 149, 237],
            cornsilk: [255, 248, 220],
            crimson: [220, 20, 60],
            cyan: [0, 255, 255],
            darkblue: [0, 0, 139],
            darkcyan: [0, 139, 139],
            darkgoldenrod: [184, 132, 11],
            darkgray: [169, 169, 169],
            darkgreen: [0, 100, 0],
            darkgrey: [169, 169, 169],
            darkkhaki: [189, 183, 107],
            darkmagenta: [139, 0, 139],
            darkolivegreen: [85, 107, 47],
            darkorange: [255, 140, 0],
            darkorchid: [153, 50, 204],
            darkred: [139, 0, 0],
            darksalmon: [233, 150, 122],
            darkseagreen: [143, 188, 143],
            darkslateblue: [72, 61, 139],
            darkslategray: [47, 79, 79],
            darkslategrey: [47, 79, 79],
            darkturquoise: [0, 206, 209],
            darkviolet: [148, 0, 211],
            deeppink: [255, 20, 147],
            deepskyblue: [0, 191, 255],
            dimgray: [105, 105, 105],
            dimgrey: [105, 105, 105],
            dodgerblue: [30, 144, 255],
            firebrick: [178, 34, 34],
            floralwhite: [255, 255, 240],
            forestgreen: [34, 139, 34],
            fuchsia: [255, 0, 255],
            gainsboro: [220, 220, 220],
            ghostwhite: [248, 248, 255],
            gold: [255, 215, 0],
            goldenrod: [218, 165, 32],
            gray: [128, 128, 128],
            green: [0, 128, 0],
            greenyellow: [173, 255, 47],
            grey: [128, 128, 128],
            honeydew: [240, 255, 240],
            hotpink: [255, 105, 180],
            indianred: [205, 92, 92],
            indigo: [75, 0, 130],
            ivory: [255, 255, 240],
            khaki: [240, 230, 140],
            lavender: [230, 230, 250],
            lavenderblush: [255, 240, 245],
            lawngreen: [124, 252, 0],
            lemonchiffon: [255, 250, 205],
            lightblue: [173, 216, 230],
            lightcoral: [240, 128, 128],
            lightcyan: [224, 255, 255],
            lightgoldenrodyellow: [250, 250, 210],
            lightgray: [211, 211, 211],
            lightgreen: [144, 238, 144],
            lightgrey: [211, 211, 211],
            lightpink: [255, 182, 193],
            lightsalmon: [255, 160, 122],
            lightseagreen: [32, 178, 170],
            lightskyblue: [135, 206, 250],
            lightslategray: [119, 136, 153],
            lightslategrey: [119, 136, 153],
            lightsteelblue: [176, 196, 222],
            lightyellow: [255, 255, 224],
            lime: [0, 255, 0],
            limegreen: [50, 205, 50],
            linen: [250, 240, 230],
            magenta: [255, 0, 255],
            maroon: [128, 0, 0],
            mediumaquamarine: [102, 205, 170],
            mediumblue: [0, 0, 205],
            mediumorchid: [186, 85, 211],
            mediumpurple: [147, 112, 219],
            mediumseagreen: [60, 179, 113],
            mediumslateblue: [123, 104, 238],
            mediumspringgreen: [0, 250, 154],
            mediumturquoise: [72, 209, 204],
            mediumvioletred: [199, 21, 133],
            midnightblue: [25, 25, 112],
            mintcream: [245, 255, 250],
            mistyrose: [255, 228, 225],
            moccasin: [255, 228, 181],
            navajowhite: [255, 222, 173],
            navy: [0, 0, 128],
            oldlace: [253, 245, 230],
            olive: [128, 128, 0],
            olivedrab: [107, 142, 35],
            orange: [255, 165, 0],
            orangered: [255, 69, 0],
            orchid: [218, 112, 214],
            palegoldenrod: [238, 232, 170],
            palegreen: [152, 251, 152],
            paleturquoise: [175, 238, 238],
            palevioletred: [219, 112, 147],
            papayawhip: [255, 239, 213],
            peachpuff: [255, 218, 185],
            peru: [205, 133, 63],
            pink: [255, 192, 203],
            plum: [221, 160, 203],
            powderblue: [176, 224, 230],
            purple: [128, 0, 128],
            rebeccapurple: [102, 51, 153],
            red: [255, 0, 0],
            rosybrown: [188, 143, 143],
            royalblue: [65, 105, 225],
            saddlebrown: [139, 69, 19],
            salmon: [250, 128, 114],
            sandybrown: [244, 164, 96],
            seagreen: [46, 139, 87],
            seashell: [255, 245, 238],
            sienna: [160, 82, 45],
            silver: [192, 192, 192],
            skyblue: [135, 206, 235],
            slateblue: [106, 90, 205],
            slategray: [119, 128, 144],
            slategrey: [119, 128, 144],
            snow: [255, 255, 250],
            springgreen: [0, 255, 127],
            steelblue: [70, 130, 180],
            tan: [210, 180, 140],
            teal: [0, 128, 128],
            thistle: [216, 191, 216],
            transparent: [255, 255, 255, 0],
            tomato: [255, 99, 71],
            turquoise: [64, 224, 208],
            violet: [238, 130, 238],
            wheat: [245, 222, 179],
            white: [255, 255, 255],
            whitesmoke: [245, 245, 245],
            yellow: [255, 255, 0],
            yellowgreen: [154, 205, 5]
        },

        RGB_REGEX = /rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/;

    /**
     * @namespace Util
     * @memberof Konva
     */
    Konva.Util = {
        /*
         * cherry-picked utilities from underscore.js
         */
        _isElement: function(obj) {
            return !!(obj && obj.nodeType == 1);
        },
        _isFunction: function(obj) {
            return !!(obj && obj.constructor && obj.call && obj.apply);
        },
        _isObject: function(obj) {
            return (!!obj && obj.constructor === Object);
        },
        _isArray: function(obj) {
            return Object.prototype.toString.call(obj) === OBJECT_ARRAY;
        },
        _isNumber: function(obj) {
            return Object.prototype.toString.call(obj) === OBJECT_NUMBER;
        },
        _isString: function(obj) {
            return Object.prototype.toString.call(obj) === OBJECT_STRING;
        },
        // Returns a function, that, when invoked, will only be triggered at most once
        // during a given window of time. Normally, the throttled function will run
        // as much as it can, without ever going more than once per `wait` duration;
        // but if you'd like to disable the execution on the leading edge, pass
        // `{leading: false}`. To disable execution on the trailing edge, ditto.
        _throttle: function(func, wait, opts) {
            var context, args, result;
            var timeout = null;
            var previous = 0;
            var options = opts || {};
            var later = function() {
                previous = options.leading === false ? 0 : new Date().getTime();
                timeout = null;
                result = func.apply(context, args);
                context = args = null;
            };
            return function() {
                var now = new Date().getTime();
                if (!previous && options.leading === false) {
                    previous = now;
                }
                var remaining = wait - (now - previous);
                context = this;
                args = arguments;
                if (remaining <= 0) {
                  clearTimeout(timeout);
                  timeout = null;
                  previous = now;
                  result = func.apply(context, args);
                  context = args = null;
                } else if (!timeout && options.trailing !== false) {
                  timeout = setTimeout(later, remaining);
                }
                return result;
            };
        },
        /*
         * other utils
         */
        _hasMethods: function(obj) {
            var names = [],
                key;

            for(key in obj) {
                if (!obj.hasOwnProperty(key)) {
                    continue;
                }
                if(this._isFunction(obj[key])) {
                    names.push(key);
                }
            }
            return names.length > 0;
        },
        createCanvasElement: function() {
            var canvas = Konva.document.createElement('canvas');
            // on some environments canvas.style is readonly
            try {
                canvas.style = canvas.style || {};
            } catch (e) {
            }
            return canvas;
        },
        isBrowser: function() {
            return (typeof exports !== 'object');
        },
        _isInDocument: function(el) {
            while(el = el.parentNode) {
                if(el == Konva.document) {
                    return true;
                }
            }
            return false;
        },
        _simplifyArray: function(arr) {
            var retArr = [],
                len = arr.length,
                util = Konva.Util,
                n, val;

            for (n = 0; n < len; n++) {
                val = arr[n];
                if (util._isNumber(val)) {
                    val = Math.round(val * 1000) / 1000;
                }
                else if (!util._isString(val)) {
                    val = val.toString();
                }

                retArr.push(val);
            }

            return retArr;
        },
        /*
         * arg can be an image object or image data
         */
        _getImage: function(arg, callback) {
            var imageObj, canvas;

            // if arg is null or undefined
            if(!arg) {
                callback(null);
            }

            // if arg is already an image object
            else if(this._isElement(arg)) {
                callback(arg);
            }

            // if arg is a string, then it's a data url
            else if(this._isString(arg)) {
                imageObj = new Konva.window.Image();
                imageObj.onload = function() {
                    callback(imageObj);
                };
                imageObj.src = arg;
            }

            //if arg is an object that contains the data property, it's an image object
            else if(arg.data) {
                canvas = Konva.Util.createCanvasElement();
                canvas.width = arg.width;
                canvas.height = arg.height;
                var _context = canvas.getContext(CONTEXT_2D);
                _context.putImageData(arg, 0, 0);
                this._getImage(canvas.toDataURL(), callback);
            }
            else {
                callback(null);
            }
        },
        _getRGBAString: function(obj) {
            var red = obj.red || 0,
                green = obj.green || 0,
                blue = obj.blue || 0,
                alpha = obj.alpha || 1;

            return [
                'rgba(',
                red,
                ',',
                green,
                ',',
                blue,
                ',',
                alpha,
                ')'
            ].join(EMPTY_STRING);
        },
        _rgbToHex: function(r, g, b) {
            return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
        },
        _hexToRgb: function(hex) {
            hex = hex.replace(HASH, EMPTY_STRING);
            var bigint = parseInt(hex, 16);
            return {
                r: (bigint >> 16) & 255,
                g: (bigint >> 8) & 255,
                b: bigint & 255
            };
        },
        /**
         * return random hex color
         * @method
         * @memberof Konva.Util.prototype
         */
        getRandomColor: function() {
            var randColor = (Math.random() * 0xFFFFFF << 0).toString(16);
            while (randColor.length < 6) {
                randColor = ZERO + randColor;
            }
            return HASH + randColor;
        },
        /**
         * return value with default fallback
         * @method
         * @memberof Konva.Util.prototype
         */
        get: function(val, def) {
            if (val === undefined) {
                return def;
            }
            else {
                return val;
            }
        },
        /**
         * get RGB components of a color
         * @method
         * @memberof Konva.Util.prototype
         * @param {String} color
         * @example
         * // each of the following examples return {r:0, g:0, b:255}
         * var rgb = Konva.Util.getRGB('blue');
         * var rgb = Konva.Util.getRGB('#0000ff');
         * var rgb = Konva.Util.getRGB('rgb(0,0,255)');
         */
        getRGB: function(color) {
            var rgb;
            // color string
            if (color in COLORS) {
                rgb = COLORS[color];
                return {
                    r: rgb[0],
                    g: rgb[1],
                    b: rgb[2]
                };
            }
            // hex
            else if (color[0] === HASH) {
                return this._hexToRgb(color.substring(1));
            }
            // rgb string
            else if (color.substr(0, 4) === RGB_PAREN) {
                rgb = RGB_REGEX.exec(color.replace(/ /g, ''));
                return {
                    r: parseInt(rgb[1], 10),
                    g: parseInt(rgb[2], 10),
                    b: parseInt(rgb[3], 10)
                };
            }
            // default
            else {
                return {
                    r: 0,
                    g: 0,
                    b: 0
                };
            }
        },
        // convert any color string to RGBA object
        // from https://github.com/component/color-parser
        colorToRGBA: function(str) {
            str = str || 'black';
            return Konva.Util._namedColorToRBA(str)
                || Konva.Util._hex3ColorToRGBA(str)
                || Konva.Util._hex6ColorToRGBA(str)
                || Konva.Util._rgbColorToRGBA(str)
                || Konva.Util._rgbaColorToRGBA(str);
        },
        // Parse named css color. Like "green"
        _namedColorToRBA: function(str) {
            var c = COLORS[str.toLowerCase()];
            if (!c) {
                return null;
            }
            return {
                r: c[0],
                g: c[1],
                b: c[2],
                a: 1
            };
        },
        // Parse rgb(n, n, n)
        _rgbColorToRGBA: function(str) {
            if (str.indexOf('rgb(') === 0) {
                str = str.match(/rgb\(([^)]+)\)/)[1];
                var parts = str.split(/ *, */).map(Number);
                return {
                    r: parts[0],
                    g: parts[1],
                    b: parts[2],
                    a: 1
                };
            }
        },
        // Parse rgba(n, n, n, n)
        _rgbaColorToRGBA: function(str) {
            if (str.indexOf('rgba(') === 0) {
                str = str.match(/rgba\(([^)]+)\)/)[1];
                var parts = str.split(/ *, */).map(Number);
                return {
                    r: parts[0],
                    g: parts[1],
                    b: parts[2],
                    a: parts[3]
                };
            }

        },
        // Parse #nnnnnn
        _hex6ColorToRGBA: function(str) {
            if ((str[0] === '#') && (str.length === 7)) {
                return {
                    r: parseInt(str.slice(1, 3), 16),
                    g: parseInt(str.slice(3, 5), 16),
                    b: parseInt(str.slice(5, 7), 16),
                    a: 1
                };
            }
        },
        // Parse #nnn
        _hex3ColorToRGBA: function(str) {
            if ((str[0] === '#') && (str.length === 4)) {
                return {
                    r: parseInt(str[1] + str[1], 16),
                    g: parseInt(str[2] + str[2], 16),
                    b: parseInt(str[3] + str[3], 16),
                    a: 1
                };
            }
        },
        // o1 takes precedence over o2
        _merge: function(o1, o2) {
            var retObj = this._clone(o2);
            for(var key in o1) {
                if(this._isObject(o1[key])) {
                    retObj[key] = this._merge(o1[key], retObj[key]);
                }
                else {
                    retObj[key] = o1[key];
                }
            }
            return retObj;
        },
        cloneObject: function(obj) {
            var retObj = {};
            for(var key in obj) {
                if(this._isObject(obj[key])) {
                    retObj[key] = this.cloneObject(obj[key]);
                }
                else if (this._isArray(obj[key])) {
                    retObj[key] = this.cloneArray(obj[key]);
                } else {
                    retObj[key] = obj[key];
                }
            }
            return retObj;
        },
        cloneArray: function(arr) {
            return arr.slice(0);
        },
        _degToRad: function(deg) {
            return deg * PI_OVER_DEG180;
        },
        _radToDeg: function(rad) {
            return rad * DEG180_OVER_PI;
        },
        _capitalize: function(str) {
            return str.charAt(0).toUpperCase() + str.slice(1);
        },
        throw: function(str) {
            throw new Error(KONVA_ERROR + str);
        },
        error: function(str) {
          console.error(KONVA_ERROR + str);
        },
        warn: function(str) {
            /*
             * IE9 on Windows7 64bit will throw a JS error
             * if we don't use window.console in the conditional
             */
            if(Konva.root.console && console.warn && Konva.showWarnings) {
                console.warn(KONVA_WARNING + str);
            }
        },
        extend: function(child, parent) {
            function Ctor() {
                this.constructor = child;
            }
            Ctor.prototype = parent.prototype;
            var oldProto = child.prototype;
            child.prototype = new Ctor();
            for (var key in oldProto) {
                if (oldProto.hasOwnProperty(key)) {
                    child.prototype[key] = oldProto[key];
                }
            }
            child.__super__ = parent.prototype;
            // create reference to parent
            child.super = parent;
        },
        /**
         * adds methods to a constructor prototype
         * @method
         * @memberof Konva.Util.prototype
         * @param {Function} constructor
         * @param {Object} methods
         */
        addMethods: function(constructor, methods) {
            var key;

            for (key in methods) {
                constructor.prototype[key] = methods[key];
            }
        },
        _getControlPoints: function(x0, y0, x1, y1, x2, y2, t) {
            var d01 = Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2)),
                d12 = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)),
                fa = t * d01 / (d01 + d12),
                fb = t * d12 / (d01 + d12),
                p1x = x1 - fa * (x2 - x0),
                p1y = y1 - fa * (y2 - y0),
                p2x = x1 + fb * (x2 - x0),
                p2y = y1 + fb * (y2 - y0);

            return [p1x, p1y, p2x, p2y];
        },
        _expandPoints: function(p, tension) {
            var len = p.length,
                allPoints = [],
                n, cp;

            for (n = 2; n < len - 2; n += 2) {
                cp = Konva.Util._getControlPoints(p[n - 2], p[n - 1], p[n], p[n + 1], p[n + 2], p[n + 3], tension);
                allPoints.push(cp[0]);
                allPoints.push(cp[1]);
                allPoints.push(p[n]);
                allPoints.push(p[n + 1]);
                allPoints.push(cp[2]);
                allPoints.push(cp[3]);
            }

            return allPoints;
        },
        _removeLastLetter: function(str) {
            return str.substring(0, str.length - 1);
        },
        each: function(obj, func) {
            for (var key in obj) {
                func(key, obj[key]);
            }
        },
        _getProjectionToSegment: function(x1, y1, x2, y2, x3, y3) {
            var x, y, dist;

            var pd2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
            if(pd2 == 0) {
                x = x1;
                y = y1;
                dist = (x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2);
            } else {
                var u = ((x3 - x1) * (x2 - x1) + (y3 - y1) * (y2 - y1)) / pd2;
                if(u < 0) {
                    x = x1;
                    y = y1;
                    dist = (x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3);
                } else if (u > 1.0) {
                    x = x2;
                    y = y2;
                    dist = (x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3);
                } else {
                    x = x1 + u * (x2 - x1);
                    y = y1 + u * (y2 - y1);
                    dist = (x - x3) * (x - x3) + (y - y3) * (y - y3);
                }
            }
            return [x, y, dist];
        },
        // line as array of points.
        // line might be closed
        _getProjectionToLine: function(pt, line, isClosed) {
            var pc = Konva.Util.cloneObject(pt);
            var dist = Number.MAX_VALUE;
            line.forEach(function(p1, i) {
                if (!isClosed && i === line.length - 1) {
                    return;
                }
                var p2 = line[(i + 1) % line.length];
                var proj = Konva.Util._getProjectionToSegment(p1.x, p1.y, p2.x, p2.y, pt.x, pt.y);
                var px = proj[0], py = proj[1], pdist = proj[2];
                if (pdist < dist) {
                    pc.x = px;
                    pc.y = py;
                    dist = pdist;
                }
            });
            return pc;
        },
        _prepareArrayForTween: function(startArray, endArray, isClosed) {
            var n, start = [], end = [];
            if (startArray.length > endArray.length) {
                var temp = endArray;
                endArray = startArray;
                startArray = temp;
            }
            for (n = 0; n < startArray.length; n += 2) {
                start.push({
                    x: startArray[n],
                    y: startArray[n + 1]
                });
            }
            for (n = 0; n < endArray.length; n += 2) {
                end.push({
                    x: endArray[n],
                    y: endArray[n + 1]
                });
            }


            var newStart = [];
            end.forEach(function(point) {
                var pr = Konva.Util._getProjectionToLine(point, start, isClosed);
                newStart.push(pr.x);
                newStart.push(pr.y);
            });
            return newStart;
        }
    };
})();

(function() {
    'use strict';
    // calculate pixel ratio
    var canvas = Konva.Util.createCanvasElement(),
        context = canvas.getContext('2d'),
        _pixelRatio = (function(){
            var devicePixelRatio = Konva.window.devicePixelRatio || 1,
            backingStoreRatio = context.webkitBackingStorePixelRatio
                || context.mozBackingStorePixelRatio
                || context.msBackingStorePixelRatio
                || context.oBackingStorePixelRatio
                || context.backingStorePixelRatio
                || 1;
            return devicePixelRatio / backingStoreRatio;
        })();

    /**
     * Canvas Renderer constructor
     * @constructor
     * @abstract
     * @memberof Konva
     * @param {Object} config
     * @param {Number} config.width
     * @param {Number} config.height
     * @param {Number} config.pixelRatio KonvaJS automatically handles pixel ratio adjustments in order to render crisp drawings
     *  on all devices. Most desktops, low end tablets, and low end phones, have device pixel ratios
     *  of 1.  Some high end tablets and phones, like iPhones and iPads (not the mini) have a device pixel ratio
     *  of 2.  Some Macbook Pros, and iMacs also have a device pixel ratio of 2.  Some high end Android devices have pixel
     *  ratios of 2 or 3.  Some browsers like Firefox allow you to configure the pixel ratio of the viewport.  Unless otherwise
     *  specified, the pixel ratio will be defaulted to the actual device pixel ratio.  You can override the device pixel
     *  ratio for special situations, or, if you don't want the pixel ratio to be taken into account, you can set it to 1.
     */
    Konva.Canvas = function(config) {
        this.init(config);
    };

    Konva.Canvas.prototype = {
        init: function(config) {
            var conf = config || {};

            var pixelRatio = conf.pixelRatio || Konva.pixelRatio || _pixelRatio;

            this.pixelRatio = pixelRatio;
            this._canvas = Konva.Util.createCanvasElement();

            // set inline styles
            this._canvas.style.padding = 0;
            this._canvas.style.margin = 0;
            this._canvas.style.border = 0;
            this._canvas.style.background = 'transparent';
            this._canvas.style.position = 'absolute';
            this._canvas.style.top = 0;
            this._canvas.style.left = 0;
        },
        /**
         * get canvas context
         * @method
         * @memberof Konva.Canvas.prototype
         * @returns {CanvasContext} context
         */
        getContext: function() {
            return this.context;
        },
        /**
         * get pixel ratio
         * @method
         * @memberof Konva.Canvas.prototype
         * @returns {Number} pixel ratio
         */
        getPixelRatio: function() {
            return this.pixelRatio;
        },
        /**
         * get pixel ratio
         * @method
         * @memberof Konva.Canvas.prototype
         * @param {Number} pixelRatio KonvaJS automatically handles pixel ratio adustments in order to render crisp drawings
         *  on all devices. Most desktops, low end tablets, and low end phones, have device pixel ratios
         *  of 1.  Some high end tablets and phones, like iPhones and iPads have a device pixel ratio
         *  of 2.  Some Macbook Pros, and iMacs also have a device pixel ratio of 2.  Some high end Android devices have pixel
         *  ratios of 2 or 3.  Some browsers like Firefox allow you to configure the pixel ratio of the viewport.  Unless otherwise
         *  specificed, the pixel ratio will be defaulted to the actual device pixel ratio.  You can override the device pixel
         *  ratio for special situations, or, if you don't want the pixel ratio to be taken into account, you can set it to 1.
         */
        setPixelRatio: function(pixelRatio) {
            var previousRatio = this.pixelRatio;
            this.pixelRatio = pixelRatio;
            this.setSize(this.getWidth() / previousRatio, this.getHeight() / previousRatio);
        },
        /**
         * set width
         * @method
         * @memberof Konva.Canvas.prototype
         * @param {Number} width
         */
        setWidth: function(width) {
            // take into account pixel ratio
            this.width = this._canvas.width = width * this.pixelRatio;
            this._canvas.style.width = width + 'px';

            var pixelRatio = this.pixelRatio,
                _context = this.getContext()._context;
            _context.scale(pixelRatio, pixelRatio);
        },
        /**
         * set height
         * @method
         * @memberof Konva.Canvas.prototype
         * @param {Number} height
         */
        setHeight: function(height) {
            // take into account pixel ratio
            this.height = this._canvas.height = height * this.pixelRatio;
            this._canvas.style.height = height + 'px';
            var pixelRatio = this.pixelRatio,
                _context = this.getContext()._context;
            _context.scale(pixelRatio, pixelRatio);
        },
        /**
         * get width
         * @method
         * @memberof Konva.Canvas.prototype
         * @returns {Number} width
         */
        getWidth: function() {
            return this.width;
        },
        /**
         * get height
         * @method
         * @memberof Konva.Canvas.prototype
         * @returns {Number} height
         */
        getHeight: function() {
            return this.height;
        },
        /**
         * set size
         * @method
         * @memberof Konva.Canvas.prototype
         * @param {Number} width
         * @param {Number} height
         */
        setSize: function(width, height) {
            this.setWidth(width);
            this.setHeight(height);
        },
        /**
         * to data url
         * @method
         * @memberof Konva.Canvas.prototype
         * @param {String} mimeType
         * @param {Number} quality between 0 and 1 for jpg mime types
         * @returns {String} data url string
         */
        toDataURL: function(mimeType, quality) {
            try {
                // If this call fails (due to browser bug, like in Firefox 3.6),
                // then revert to previous no-parameter image/png behavior
                return this._canvas.toDataURL(mimeType, quality);
            }
            catch(e) {
                try {
                    return this._canvas.toDataURL();
                }
                catch(err) {
                    Konva.Util.warn('Unable to get data URL. ' + err.message);
                    return '';
                }
            }
        }
    };

    Konva.SceneCanvas = function(config) {
        var conf = config || {};
        var width = conf.width || 0,
            height = conf.height || 0;

        Konva.Canvas.call(this, conf);
        this.context = new Konva.SceneContext(this);
        this.setSize(width, height);
    };

    Konva.Util.extend(Konva.SceneCanvas, Konva.Canvas);

    Konva.HitCanvas = function(config) {
        var conf = config || {};
        var width = conf.width || 0,
            height = conf.height || 0;

        Konva.Canvas.call(this, conf);
        this.context = new Konva.HitContext(this);
        this.setSize(width, height);
        this.hitCanvas = true;
    };
    Konva.Util.extend(Konva.HitCanvas, Konva.Canvas);

})();

(function() {
    'use strict';
    var COMMA = ',',
        OPEN_PAREN = '(',
        CLOSE_PAREN = ')',
        OPEN_PAREN_BRACKET = '([',
        CLOSE_BRACKET_PAREN = '])',
        SEMICOLON = ';',
        DOUBLE_PAREN = '()',
        // EMPTY_STRING = '',
        EQUALS = '=',
        // SET = 'set',
        CONTEXT_METHODS = [
            'arc',
            'arcTo',
            'beginPath',
            'bezierCurveTo',
            'clearRect',
            'clip',
            'closePath',
            'createLinearGradient',
            'createPattern',
            'createRadialGradient',
            'drawImage',
            'fill',
            'fillText',
            'getImageData',
            'createImageData',
            'lineTo',
            'moveTo',
            'putImageData',
            'quadraticCurveTo',
            'rect',
            'restore',
            'rotate',
            'save',
            'scale',
            'setLineDash',
            'setTransform',
            'stroke',
            'strokeText',
            'transform',
            'translate'
        ];

    var CONTEXT_PROPERTIES = ['fillStyle', 'strokeStyle', 'shadowColor', 'shadowBlur', 'shadowOffsetX',
        'shadowOffsetY', 'lineCap', 'lineJoin', 'lineWidth', 'miterLimit', 'font', 'textAlign', 'textBaseline',
        'globalAlpha', 'globalCompositeOperation'];

    /**
     * Canvas Context constructor
     * @constructor
     * @abstract
     * @memberof Konva
     */
    Konva.Context = function(canvas) {
        this.init(canvas);
    };

    Konva.Context.prototype = {
        init: function(canvas) {
            this.canvas = canvas;
            this._context = canvas._canvas.getContext('2d');

            if (Konva.enableTrace) {
                this.traceArr = [];
                this._enableTrace();
            }
        },
        /**
         * fill shape
         * @method
         * @memberof Konva.Context.prototype
         * @param {Konva.Shape} shape
         */
        fillShape: function(shape) {
            if(shape.getFillEnabled()) {
                this._fill(shape);
            }
        },
        /**
         * stroke shape
         * @method
         * @memberof Konva.Context.prototype
         * @param {Konva.Shape} shape
         */
        strokeShape: function(shape) {
            if(shape.getStrokeEnabled()) {
                this._stroke(shape);
            }
        },
        /**
         * fill then stroke
         * @method
         * @memberof Konva.Context.prototype
         * @param {Konva.Shape} shape
         */
        fillStrokeShape: function(shape) {
            var fillEnabled = shape.getFillEnabled();
            if(fillEnabled) {
                this._fill(shape);
            }
            if(shape.getStrokeEnabled()) {
                this._stroke(shape);
            }
        },
        /**
         * get context trace if trace is enabled
         * @method
         * @memberof Konva.Context.prototype
         * @param {Boolean} relaxed if false, return strict context trace, which includes method names, method parameters
         *  properties, and property values.  If true, return relaxed context trace, which only returns method names and
         *  properites.
         * @returns {String}
         */
        getTrace: function(relaxed) {
            var traceArr = this.traceArr,
                len = traceArr.length,
                str = '',
                n, trace, method, args;

            for (n = 0; n < len; n++) {
                trace = traceArr[n];
                method = trace.method;

                // methods
                if (method) {
                    args = trace.args;
                    str += method;
                    if (relaxed) {
                        str += DOUBLE_PAREN;
                    }
                    else {
                        if (Konva.Util._isArray(args[0])) {
                            str += OPEN_PAREN_BRACKET + args.join(COMMA) + CLOSE_BRACKET_PAREN;
                        }
                        else {
                            str += OPEN_PAREN + args.join(COMMA) + CLOSE_PAREN;
                        }
                    }
                }
                // properties
                else {
                    str += trace.property;
                    if (!relaxed) {
                        str += EQUALS + trace.val;
                    }
                }

                str += SEMICOLON;
            }

            return str;
        },
        /**
         * clear trace if trace is enabled
         * @method
         * @memberof Konva.Context.prototype
         */
        clearTrace: function() {
            this.traceArr = [];
        },
        _trace: function(str) {
            var traceArr = this.traceArr,
                len;

            traceArr.push(str);
            len = traceArr.length;

            if (len >= Konva.traceArrMax) {
                traceArr.shift();
            }
        },
        /**
         * reset canvas context transform
         * @method
         * @memberof Konva.Context.prototype
         */
        reset: function() {
            var pixelRatio = this.getCanvas().getPixelRatio();
            this.setTransform(1 * pixelRatio, 0, 0, 1 * pixelRatio, 0, 0);
        },
        /**
         * get canvas
         * @method
         * @memberof Konva.Context.prototype
         * @returns {Konva.Canvas}
         */
        getCanvas: function() {
            return this.canvas;
        },
        /**
         * clear canvas
         * @method
         * @memberof Konva.Context.prototype
         * @param {Object} [bounds]
         * @param {Number} [bounds.x]
         * @param {Number} [bounds.y]
         * @param {Number} [bounds.width]
         * @param {Number} [bounds.height]
         */
        clear: function(bounds) {
            var canvas = this.getCanvas();

            if (bounds) {
                this.clearRect(bounds.x || 0, bounds.y || 0, bounds.width || 0, bounds.height || 0);
            }
            else {
                this.clearRect(0, 0, canvas.getWidth() / canvas.pixelRatio, canvas.getHeight() / canvas.pixelRatio);
            }
        },
        _applyLineCap: function(shape) {
            var lineCap = shape.getLineCap();
            if(lineCap) {
                this.setAttr('lineCap', lineCap);
            }
        },
        _applyOpacity: function(shape) {
            var absOpacity = shape.getAbsoluteOpacity();
            if(absOpacity !== 1) {
                this.setAttr('globalAlpha', absOpacity);
            }
        },
        _applyLineJoin: function(shape) {
            var lineJoin = shape.getLineJoin();
            if(lineJoin) {
                this.setAttr('lineJoin', lineJoin);
            }
        },
        setAttr: function(attr, val) {
            this._context[attr] = val;
        },

        // context pass through methods
        arc: function() {
            var a = arguments;
            this._context.arc(a[0], a[1], a[2], a[3], a[4], a[5]);
        },
        beginPath: function() {
            this._context.beginPath();
        },
        bezierCurveTo: function() {
            var a = arguments;
            this._context.bezierCurveTo(a[0], a[1], a[2], a[3], a[4], a[5]);
        },
        clearRect: function() {
            var a = arguments;
            this._context.clearRect(a[0], a[1], a[2], a[3]);
        },
        clip: function() {
            this._context.clip();
        },
        closePath: function() {
            this._context.closePath();
        },
        createImageData: function() {
            var a = arguments;
            if(a.length === 2) {
                return this._context.createImageData(a[0], a[1]);
            }
            else if(a.length === 1) {
                return this._context.createImageData(a[0]);
            }
        },
        createLinearGradient: function() {
            var a = arguments;
            return this._context.createLinearGradient(a[0], a[1], a[2], a[3]);
        },
        createPattern: function() {
            var a = arguments;
            return this._context.createPattern(a[0], a[1]);
        },
        createRadialGradient: function() {
            var a = arguments;
            return this._context.createRadialGradient(a[0], a[1], a[2], a[3], a[4], a[5]);
        },
        drawImage: function() {
            var a = arguments,
                _context = this._context;

            if(a.length === 3) {
                _context.drawImage(a[0], a[1], a[2]);
            }
            else if(a.length === 5) {
                _context.drawImage(a[0], a[1], a[2], a[3], a[4]);
            }
            else if(a.length === 9) {
                _context.drawImage(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
            }
        },
        isPointInPath: function(x, y) {
            return this._context.isPointInPath(x, y);
        },
        fill: function() {
            this._context.fill();
        },
        fillRect: function(x, y, width, height) {
            this._context.fillRect(x, y, width, height);
        },
        strokeRect: function(x, y, width, height) {
            this._context.strokeRect(x, y, width, height);
        },
        fillText: function() {
            var a = arguments;
            this._context.fillText(a[0], a[1], a[2]);
        },
        measureText: function(text) {
            return this._context.measureText(text);
        },
        getImageData: function() {
            var a = arguments;
            return this._context.getImageData(a[0], a[1], a[2], a[3]);
        },
        lineTo: function() {
            var a = arguments;
            this._context.lineTo(a[0], a[1]);
        },
        moveTo: function() {
            var a = arguments;
            this._context.moveTo(a[0], a[1]);
        },
        rect: function() {
            var a = arguments;
            this._context.rect(a[0], a[1], a[2], a[3]);
        },
        putImageData: function() {
            var a = arguments;
            this._context.putImageData(a[0], a[1], a[2]);
        },
        quadraticCurveTo: function() {
            var a = arguments;
            this._context.quadraticCurveTo(a[0], a[1], a[2], a[3]);
        },
        restore: function() {
            this._context.restore();
        },
        rotate: function() {
            var a = arguments;
            this._context.rotate(a[0]);
        },
        save: function() {
            this._context.save();
        },
        scale: function() {
            var a = arguments;
            this._context.scale(a[0], a[1]);
        },
        setLineDash: function() {
            var a = arguments,
                _context = this._context;

            // works for Chrome and IE11
            if(this._context.setLineDash) {
                _context.setLineDash(a[0]);
            }
            // verified that this works in firefox
            else if('mozDash' in _context) {
                _context.mozDash = a[0];
            }
            // does not currently work for Safari
            else if('webkitLineDash' in _context) {
                _context.webkitLineDash = a[0];
            }

            // no support for IE9 and IE10
        },
        getLineDash: function() {
            return this._context.getLineDash();
        },
        setTransform: function() {
            var a = arguments;
            this._context.setTransform(a[0], a[1], a[2], a[3], a[4], a[5]);
        },
        stroke: function() {
            this._context.stroke();
        },
        strokeText: function() {
            var a = arguments;
            this._context.strokeText(a[0], a[1], a[2]);
        },
        transform: function() {
            var a = arguments;
            this._context.transform(a[0], a[1], a[2], a[3], a[4], a[5]);
        },
        translate: function() {
            var a = arguments;
            this._context.translate(a[0], a[1]);
        },
        _enableTrace: function() {
            var that = this,
                len = CONTEXT_METHODS.length,
                _simplifyArray = Konva.Util._simplifyArray,
                origSetter = this.setAttr,
                n, args;

            // to prevent creating scope function at each loop
            var func = function(methodName) {
                    var origMethod = that[methodName],
                        ret;

                    that[methodName] = function() {
                        args = _simplifyArray(Array.prototype.slice.call(arguments, 0));
                        ret = origMethod.apply(that, arguments);

                        if (methodName === 'clearRect') {
                            args[2] = args[2] / that.canvas.getPixelRatio();
                            args[3] = args[3] / that.canvas.getPixelRatio();
                        }
                        that._trace({
                            method: methodName,
                            args: args
                        });

                        return ret;
                    };
            };
            // methods
            for (n = 0; n < len; n++) {
                func(CONTEXT_METHODS[n]);
            }

            // attrs
            that.setAttr = function() {
                origSetter.apply(that, arguments);
                that._trace({
                    property: arguments[0],
                    val: arguments[1]
                });
            };
        }
    };

    CONTEXT_PROPERTIES.forEach(function(prop) {
        Object.defineProperty(Konva.Context.prototype, prop, {
            get: function () {
                return this._context[prop];
            },
            set: function (val) {
                this._context[prop] = val;
            }
        });
    });

    Konva.SceneContext = function(canvas) {
        Konva.Context.call(this, canvas);
    };

    Konva.SceneContext.prototype = {
        _fillColor: function(shape) {
            var fill = shape.fill();

            this.setAttr('fillStyle', fill);
            shape._fillFunc(this);
        },
        _fillPattern: function(shape) {
            var fillPatternX = shape.getFillPatternX(),
                fillPatternY = shape.getFillPatternY(),
                fillPatternScale = shape.getFillPatternScale(),
                fillPatternRotation = Konva.getAngle(shape.getFillPatternRotation()),
                fillPatternOffset = shape.getFillPatternOffset();

            if(fillPatternX || fillPatternY) {
                this.translate(fillPatternX || 0, fillPatternY || 0);
            }
            if(fillPatternRotation) {
                this.rotate(fillPatternRotation);
            }
            if(fillPatternScale) {
                this.scale(fillPatternScale.x, fillPatternScale.y);
            }
            if(fillPatternOffset) {
                this.translate(-1 * fillPatternOffset.x, -1 * fillPatternOffset.y);
            }

            this.setAttr('fillStyle', this.createPattern(shape.getFillPatternImage(), shape.getFillPatternRepeat() || 'repeat'));
            this.fill();
        },
        _fillLinearGradient: function(shape) {
            var start = shape.getFillLinearGradientStartPoint(),
                end = shape.getFillLinearGradientEndPoint(),
                colorStops = shape.getFillLinearGradientColorStops(),
                grd = this.createLinearGradient(start.x, start.y, end.x, end.y);

            if (colorStops) {
                // build color stops
                for(var n = 0; n < colorStops.length; n += 2) {
                    grd.addColorStop(colorStops[n], colorStops[n + 1]);
                }
                this.setAttr('fillStyle', grd);
                shape._fillFunc(this);
            }
        },
        _fillRadialGradient: function(shape) {
            var start = shape.getFillRadialGradientStartPoint(),
                end = shape.getFillRadialGradientEndPoint(),
                startRadius = shape.getFillRadialGradientStartRadius(),
                endRadius = shape.getFillRadialGradientEndRadius(),
                colorStops = shape.getFillRadialGradientColorStops(),
                grd = this.createRadialGradient(start.x, start.y, startRadius, end.x, end.y, endRadius);

            // build color stops
            for(var n = 0; n < colorStops.length; n += 2) {
                grd.addColorStop(colorStops[n], colorStops[n + 1]);
            }
            this.setAttr('fillStyle', grd);
            this.fill();
        },
        _fill: function(shape) {
            var hasColor = shape.fill(),
                hasPattern = shape.getFillPatternImage(),
                hasLinearGradient = shape.getFillLinearGradientColorStops(),
                hasRadialGradient = shape.getFillRadialGradientColorStops(),
                fillPriority = shape.getFillPriority();

            // priority fills
            if(hasColor && fillPriority === 'color') {
                this._fillColor(shape);
            }
            else if(hasPattern && fillPriority === 'pattern') {
                this._fillPattern(shape);
            }
            else if(hasLinearGradient && fillPriority === 'linear-gradient') {
                this._fillLinearGradient(shape);
            }
            else if(hasRadialGradient && fillPriority === 'radial-gradient') {
                this._fillRadialGradient(shape);
            }
            // now just try and fill with whatever is available
            else if(hasColor) {
                this._fillColor(shape);
            }
            else if(hasPattern) {
                this._fillPattern(shape);
            }
            else if(hasLinearGradient) {
                this._fillLinearGradient(shape);
            }
            else if(hasRadialGradient) {
                this._fillRadialGradient(shape);
            }
        },
        _stroke: function(shape) {
            var dash = shape.dash(),
                // ignore strokeScaleEnabled for Text
                strokeScaleEnabled = (shape.getStrokeScaleEnabled() || (shape instanceof Konva.Text));

            if(shape.hasStroke()) {
                if (!strokeScaleEnabled) {
                    this.save();
                    this.setTransform(1, 0, 0, 1, 0, 0);
                }

                this._applyLineCap(shape);
                if(dash && shape.dashEnabled()) {
                    this.setLineDash(dash);
                }

                this.setAttr('lineWidth', shape.strokeWidth());
                this.setAttr('strokeStyle', shape.stroke());

                if (!shape.getShadowForStrokeEnabled()) {
                    this.setAttr('shadowColor', 'rgba(0,0,0,0)');
                }
                shape._strokeFunc(this);

                if (!strokeScaleEnabled) {
                    this.restore();
                }
            }
        },
        _applyShadow: function(shape) {
            var util = Konva.Util,
                color = util.get(shape.getShadowRGBA(), 'black'),
                blur = util.get(shape.getShadowBlur(), 5),
                offset = util.get(shape.getShadowOffset(), {
                    x: 0,
                    y: 0
                }),
                m = shape.getAbsoluteTransform().m,
                scaleX = m[0],
                scaleY = m[3];

            this.setAttr('shadowColor', color);
            this.setAttr('shadowBlur', blur);
            this.setAttr('shadowOffsetX', offset.x * scaleX);
            this.setAttr('shadowOffsetY', offset.y * scaleY);
        }
    };
    Konva.Util.extend(Konva.SceneContext, Konva.Context);

    Konva.HitContext = function(canvas) {
        Konva.Context.call(this, canvas);
    };

    Konva.HitContext.prototype = {
        _fill: function(shape) {
            this.save();
            this.setAttr('fillStyle', shape.colorKey);
            shape._fillFuncHit(this);
            this.restore();
        },
        _stroke: function(shape) {
            if(shape.hasStroke() && shape.strokeHitEnabled()) {
                // ignore strokeScaleEnabled for Text
                var strokeScaleEnabled = (shape.getStrokeScaleEnabled() || (shape instanceof Konva.Text));
                if (!strokeScaleEnabled) {
                    this.save();
                    this.setTransform(1, 0, 0, 1, 0, 0);
                }
                this._applyLineCap(shape);
                this.setAttr('lineWidth', shape.strokeWidth());
                this.setAttr('strokeStyle', shape.colorKey);
                shape._strokeFuncHit(this);
                if (!strokeScaleEnabled) {
                    this.restore();
                }
            }
        }
    };
    Konva.Util.extend(Konva.HitContext, Konva.Context);
})();

(function() {
    'use strict';
    // CONSTANTS
    var GET = 'get',
        SET = 'set';

    Konva.Factory = {
        addGetterSetter: function(constructor, attr, def, validator, after) {
            this.addGetter(constructor, attr, def);
            this.addSetter(constructor, attr, validator, after);
            this.addOverloadedGetterSetter(constructor, attr);
        },
        addGetter: function(constructor, attr, def) {
            var method = GET + Konva.Util._capitalize(attr);

            constructor.prototype[method] = function() {
                var val = this.attrs[attr];
                return val === undefined ? def : val;
            };
        },
        addSetter: function(constructor, attr, validator, after) {
            var method = SET + Konva.Util._capitalize(attr);

            constructor.prototype[method] = function(val) {
                if (validator) {
                    val = validator.call(this, val);
                }

                this._setAttr(attr, val);

                if (after) {
                    after.call(this);
                }

                return this;
            };
        },
        addComponentsGetterSetter: function(constructor, attr, components, validator, after) {
            var len = components.length,
                capitalize = Konva.Util._capitalize,
                getter = GET + capitalize(attr),
                setter = SET + capitalize(attr),
                n, component;

            // getter
            constructor.prototype[getter] = function() {
                var ret = {};

                for (n = 0; n < len; n++) {
                    component = components[n];
                    ret[component] = this.getAttr(attr + capitalize(component));
                }

                return ret;
            };

            // setter
            constructor.prototype[setter] = function(val) {
                var oldVal = this.attrs[attr],
                    key;

                if (validator) {
                    val = validator.call(this, val);
                }

                for (key in val) {
                    if (!val.hasOwnProperty(key)) {
                        continue;
                    }
                    this._setAttr(attr + capitalize(key), val[key]);
                }

                this._fireChangeEvent(attr, oldVal, val);

                if (after) {
                    after.call(this);
                }

                return this;
            };

            this.addOverloadedGetterSetter(constructor, attr);
        },
        addOverloadedGetterSetter: function(constructor, attr) {
            var capitalizedAttr = Konva.Util._capitalize(attr),
                setter = SET + capitalizedAttr,
                getter = GET + capitalizedAttr;

            constructor.prototype[attr] = function() {
                // setting
                if (arguments.length) {
                    this[setter](arguments[0]);
                    return this;
                }
                // getting
                return this[getter]();
            };
        },
        addDeprecatedGetterSetter: function(constructor, attr, def, validator) {
            var method = GET + Konva.Util._capitalize(attr);
            var message = attr + ' property is deprecated and will be removed soon. Look at Konva change log for more information.';
            constructor.prototype[method] = function() {
                Konva.Util.error(message);
                var val = this.attrs[attr];
                return val === undefined ? def : val;
            };
            this.addSetter(constructor, attr, validator, function() {
              Konva.Util.error(message);
            });
            this.addOverloadedGetterSetter(constructor, attr);
        },
        backCompat: function(constructor, methods) {
            Konva.Util.each(methods, function(oldMethodName, newMethodName) {
                var method = constructor.prototype[newMethodName];
                constructor.prototype[oldMethodName] = function(){
                    method.apply(this, arguments);
                    Konva.Util.error(oldMethodName + ' method is deprecated and will be removed soon. Use ' + newMethodName + ' instead');
                };
            });
        },
        afterSetFilter: function() {
            this._filterUpToDate = false;
        }
    };

    Konva.Validators = {
        /**
         * @return {number}
         */
        RGBComponent: function(val) {
            if (val > 255) {
                return 255;
            } else if (val < 0) {
                return 0;
            }
            return Math.round(val);
        },
        alphaComponent: function(val) {
            if (val > 1) {
                return 1;
            }
            // chrome does not honor alpha values of 0
            else if (val < 0.0001) {
                return 0.0001;
            }

            return val;
        }
    };
})();

(function(Konva) {
    'use strict';
    // CONSTANTS
    var ABSOLUTE_OPACITY = 'absoluteOpacity',
        ABSOLUTE_TRANSFORM = 'absoluteTransform',
        CHANGE = 'Change',
        CHILDREN = 'children',
        DOT = '.',
        EMPTY_STRING = '',
        GET = 'get',
        ID = 'id',
        KONVA = 'konva',
        LISTENING = 'listening',
        MOUSEENTER = 'mouseenter',
        MOUSELEAVE = 'mouseleave',
        NAME = 'name',
        SET = 'set',
        SHAPE = 'Shape',
        SPACE = ' ',
        STAGE = 'stage',
        TRANSFORM = 'transform',
        UPPER_STAGE = 'Stage',
        VISIBLE = 'visible',
        CLONE_BLACK_LIST = ['id'],

        TRANSFORM_CHANGE_STR = [
            'xChange.konva',
            'yChange.konva',
            'scaleXChange.konva',
            'scaleYChange.konva',
            'skewXChange.konva',
            'skewYChange.konva',
            'rotationChange.konva',
            'offsetXChange.konva',
            'offsetYChange.konva',
            'transformsEnabledChange.konva'
        ].join(SPACE);

    /**
     * Node constructor. Nodes are entities that can be transformed, layered,
     * and have bound events. The stage, layers, groups, and shapes all extend Node.
     * @constructor
     * @memberof Konva
     * @abstract
     * @param {Object} config
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     */
    Konva.Node = function(config) {
        this._init(config);
    };

    Konva.Util.addMethods(Konva.Node, {
        _init: function(config) {
            var that = this;
            this._id = Konva.idCounter++;
            this.eventListeners = {};
            this.attrs = {};
            this._cache = {};
            this._filterUpToDate = false;
            this.setAttrs(config);

            // event bindings for cache handling
            this.on(TRANSFORM_CHANGE_STR, function() {
                this._clearCache(TRANSFORM);
                that._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
            });
            this.on('visibleChange.konva', function() {
                that._clearSelfAndDescendantCache(VISIBLE);
            });
            this.on('listeningChange.konva', function() {
                that._clearSelfAndDescendantCache(LISTENING);
            });
            this.on('opacityChange.konva', function() {
                that._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);
            });
        },
        _clearCache: function(attr){
            if (attr) {
                delete this._cache[attr];
            }
            else {
                this._cache = {};
            }
        },
        _getCache: function(attr, privateGetter){
            var cache = this._cache[attr];

            // if not cached, we need to set it using the private getter method.
            if (cache === undefined) {
                this._cache[attr] = privateGetter.call(this);
            }

            return this._cache[attr];
        },
        /*
         * when the logic for a cached result depends on ancestor propagation, use this
         * method to clear self and children cache
         */
        _clearSelfAndDescendantCache: function(attr) {
            this._clearCache(attr);

            if (this.children) {
                this.getChildren().each(function(node) {
                    node._clearSelfAndDescendantCache(attr);
                });
            }
        },
        /**
        * clear cached canvas
        * @method
        * @memberof Konva.Node.prototype
        * @returns {Konva.Node}
        * @example
        * node.clearCache();
        */
        clearCache: function() {
            delete this._cache.canvas;
            this._filterUpToDate = false;
            return this;
        },
        /**
        *  cache node to improve drawing performance, apply filters, or create more accurate
        *  hit regions. For all basic shapes size of cache canvas will be automatically detected.
        *  If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box
        *  properties. Look at [link to demo page](link to demo page) for more information.
        * @method
        * @memberof Konva.Node.prototype
        * @param {Object} [config]
        * @param {Number} [config.x]
        * @param {Number} [config.y]
        * @param {Number} [config.width]
        * @param {Number} [config.height]
        * @param {Number} [config.offset]  increase canvas size by `offset` pixel in all directions.
        * @param {Boolean} [config.drawBorder] when set to true, a red border will be drawn around the cached
        *  region for debugging purposes
        * @returns {Konva.Node}
        * @example
        * // cache a shape with the x,y position of the bounding box at the center and
        * // the width and height of the bounding box equal to the width and height of
        * // the shape obtained from shape.width() and shape.height()
        * image.cache();
        *
        * // cache a node and define the bounding box position and size
        * node.cache({
        *   x: -30,
        *   y: -30,
        *   width: 100,
        *   height: 200
        * });
        *
        * // cache a node and draw a red border around the bounding box
        * // for debugging purposes
        * node.cache({
        *   x: -30,
        *   y: -30,
        *   width: 100,
        *   height: 200,
        *   offset : 10,
        *   drawBorder: true
        * });
        */
        cache: function(config) {
            var conf = config || {},
                rect = this.getClientRect(true),
                width = conf.width || rect.width,
                height = conf.height || rect.height,
                x = conf.x || rect.x,
                y = conf.y || rect.y,
                offset = conf.offset || 0,
                drawBorder = conf.drawBorder || false;

            if (!width || !height) {
                throw new Error('Width or height of caching configuration equals 0.');
            }

            width += offset * 2;
            height += offset * 2;

            x -= offset;
            y -= offset;


            var cachedSceneCanvas = new Konva.SceneCanvas({
                width: width,
                height: height
            }),
            cachedFilterCanvas = new Konva.SceneCanvas({
                width: width,
                height: height
            }),
            cachedHitCanvas = new Konva.HitCanvas({
                pixelRatio: 1,
                width: width,
                height: height
            }),
            sceneContext = cachedSceneCanvas.getContext(),
            hitContext = cachedHitCanvas.getContext();

            cachedHitCanvas.isCache = true;

            this.clearCache();

            sceneContext.save();
            hitContext.save();

            sceneContext.translate(-x, -y);
            hitContext.translate(-x, -y);

            this.drawScene(cachedSceneCanvas, this, true);
            this.drawHit(cachedHitCanvas, this, true);

            sceneContext.restore();
            hitContext.restore();

            // this will draw a red border around the cached box for
            // debugging purposes
            if (drawBorder) {
                sceneContext.save();
                sceneContext.beginPath();
                sceneContext.rect(0, 0, width, height);
                sceneContext.closePath();
                sceneContext.setAttr('strokeStyle', 'red');
                sceneContext.setAttr('lineWidth', 5);
                sceneContext.stroke();
                sceneContext.restore();
            }

            this._cache.canvas = {
                scene: cachedSceneCanvas,
                filter: cachedFilterCanvas,
                hit: cachedHitCanvas,
                x: x,
                y: y
            };

            return this;
        },
        /**
         * Return client rectangle {x, y, width, height} of node. This rectangle also include all styling (strokes, shadows, etc).
         * The rectangle position is relative to parent container.
         * @method
         * @memberof Konva.Node.prototype
         * @param {Boolean} [skipTransform] flag should we skip transformation to rectangle
         * @returns {Object} rect with {x, y, width, height} properties
         * @example
         * var rect = new Konva.Rect({
         *      width : 100,
         *      height : 100,
         *      x : 50,
         *      y : 50,
         *      strokeWidth : 4,
         *      stroke : 'black',
         *      offsetX : 50,
         *      scaleY : 2
         * });
         *
         * // get client rect without think off transformations (position, rotation, scale, offset, etc)
         * rect.getClientRect(true);
         * // returns {
         * //     x : -2,   // two pixels for stroke / 2
         * //     y : -2,
         * //     width : 104, // increased by 4 for stroke
         * //     height : 104
         * //}
         *
         * // get client rect with transformation applied
         * rect.getClientRect();
         * // returns Object {x: -2, y: 46, width: 104, height: 208}
         */
        getClientRect: function() {
            // abstract method
            // redefine in Container and Shape
            throw new Error('abstract "getClientRect" method call');
        },
        _transformedRect: function(rect) {
            var points = [
                {x: rect.x, y: rect.y},
                {x: rect.x + rect.width, y: rect.y},
                {x: rect.x + rect.width, y: rect.y + rect.height},
                {x: rect.x, y: rect.y + rect.height}
            ];
            var minX, minY, maxX, maxY;
            var trans = this.getTransform();
            points.forEach(function(point) {
                var transformed = trans.point(point);
                if (minX === undefined) {
                    minX = maxX = transformed.x;
                    minY = maxY = transformed.y;
                }
                minX = Math.min(minX, transformed.x);
                minY = Math.min(minY, transformed.y);
                maxX = Math.max(maxX, transformed.x);
                maxY = Math.max(maxY, transformed.y);
            });
            return {
                x: Math.round(minX),
                y: Math.round(minY),
                width: Math.round(maxX - minX),
                height: Math.round(maxY - minY)
            };
        },
        _drawCachedSceneCanvas: function(context) {
            context.save();
            context._applyOpacity(this);
            context.translate(
                this._cache.canvas.x,
                this._cache.canvas.y
            );

            var cacheCanvas = this._getCachedSceneCanvas();
            var ratio = cacheCanvas.pixelRatio;

            context.drawImage(cacheCanvas._canvas, 0, 0, cacheCanvas.width / ratio, cacheCanvas.height / ratio);
            context.restore();
        },
        _drawCachedHitCanvas: function(context) {
            var cachedCanvas = this._cache.canvas,
                hitCanvas = cachedCanvas.hit;
            context.save();
            context.translate(
                this._cache.canvas.x,
                this._cache.canvas.y
            );
            context.drawImage(hitCanvas._canvas, 0, 0);
            context.restore();
        },
        _getCachedSceneCanvas: function() {
            var filters = this.filters(),
                cachedCanvas = this._cache.canvas,
                sceneCanvas = cachedCanvas.scene,
                filterCanvas = cachedCanvas.filter,
                filterContext = filterCanvas.getContext(),
                len, imageData, n, filter;

            if (filters) {
                if (!this._filterUpToDate) {
                    var ratio = sceneCanvas.pixelRatio;

                    try {
                        len = filters.length;
                        filterContext.clear();

                        // copy cached canvas onto filter context
                        filterContext.drawImage(sceneCanvas._canvas, 0, 0, sceneCanvas.getWidth() / ratio, sceneCanvas.getHeight() / ratio);
                        imageData = filterContext.getImageData(0, 0, filterCanvas.getWidth(), filterCanvas.getHeight());

                        // apply filters to filter context
                        for (n = 0; n < len; n++) {
                            filter = filters[n];
                            filter.call(this, imageData);
                            filterContext.putImageData(imageData, 0, 0);
                        }
                    }
                    catch(e) {
                        Konva.Util.warn('Unable to apply filter. ' + e.message);
                    }

                    this._filterUpToDate = true;
                }

                return filterCanvas;
            }
            return sceneCanvas;
        },
        /**
         * bind events to the node. KonvaJS supports mouseover, mousemove,
         *  mouseout, mouseenter, mouseleave, mousedown, mouseup, mousewheel, click, dblclick, touchstart, touchmove,
         *  touchend, tap, dbltap, dragstart, dragmove, and dragend events. The Konva Stage supports
         *  contentMouseover, contentMousemove, contentMouseout, contentMousedown, contentMouseup,
         *  contentClick, contentDblclick, contentTouchstart, contentTouchmove, contentTouchend, contentTap,
         *  and contentDblTap.  Pass in a string of events delimmited by a space to bind multiple events at once
         *  such as 'mousedown mouseup mousemove'. Include a namespace to bind an
         *  event by name such as 'click.foobar'.
         * @method
         * @memberof Konva.Node.prototype
         * @param {String} evtStr e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'
         * @param {Function} handler The handler function is passed an event object
         * @returns {Konva.Node}
         * @example
         * // add click listener
         * node.on('click', function() {
         *   console.log('you clicked me!');
         * });
         *
         * // get the target node
         * node.on('click', function(evt) {
         *   console.log(evt.target);
         * });
         *
         * // stop event propagation
         * node.on('click', function(evt) {
         *   evt.cancelBubble = true;
         * });
         *
         * // bind multiple listeners
         * node.on('click touchstart', function() {
         *   console.log('you clicked/touched me!');
         * });
         *
         * // namespace listener
         * node.on('click.foo', function() {
         *   console.log('you clicked/touched me!');
         * });
         *
         * // get the event type
         * node.on('click tap', function(evt) {
         *   var eventType = evt.type;
         * });
         *
         * // get native event object
         * node.on('click tap', function(evt) {
         *   var nativeEvent = evt.evt;
         * });
         *
         * // for change events, get the old and new val
         * node.on('xChange', function(evt) {
         *   var oldVal = evt.oldVal;
         *   var newVal = evt.newVal;
         * });
         */
        on: function(evtStr, handler) {
            var events = evtStr.split(SPACE),
                len = events.length,
                n, event, parts, baseEvent, name;

             /*
             * loop through types and attach event listeners to
             * each one.  eg. 'click mouseover.namespace mouseout'
             * will create three event bindings
             */
            for(n = 0; n < len; n++) {
                event = events[n];
                parts = event.split(DOT);
                baseEvent = parts[0];
                name = parts[1] || EMPTY_STRING;

                // create events array if it doesn't exist
                if(!this.eventListeners[baseEvent]) {
                    this.eventListeners[baseEvent] = [];
                }

                this.eventListeners[baseEvent].push({
                    name: name,
                    handler: handler
                });
            }

            return this;
        },
        /**
         * remove event bindings from the node. Pass in a string of
         *  event types delimmited by a space to remove multiple event
         *  bindings at once such as 'mousedown mouseup mousemove'.
         *  include a namespace to remove an event binding by name
         *  such as 'click.foobar'. If you only give a name like '.foobar',
         *  all events in that namespace will be removed.
         * @method
         * @memberof Konva.Node.prototype
         * @param {String} evtStr e.g. 'click', 'mousedown touchstart', '.foobar'
         * @returns {Konva.Node}
         * @example
         * // remove listener
         * node.off('click');
         *
         * // remove multiple listeners
         * node.off('click touchstart');
         *
         * // remove listener by name
         * node.off('click.foo');
         */
        off: function(evtStr) {
            var events = (evtStr || '').split(SPACE),
                len = events.length,
                n, t, event, parts, baseEvent, name;

            if (!evtStr) {
                // remove all events
                for(t in this.eventListeners) {
                    this._off(t);
                }
            }
            for(n = 0; n < len; n++) {
                event = events[n];
                parts = event.split(DOT);
                baseEvent = parts[0];
                name = parts[1];

                if(baseEvent) {
                    if(this.eventListeners[baseEvent]) {
                        this._off(baseEvent, name);
                    }
                }
                else {
                    for(t in this.eventListeners) {
                        this._off(t, name);
                    }
                }
            }
            return this;
        },
        // some event aliases for third party integration like HammerJS
        dispatchEvent: function(evt) {
            var e = {
              target: this,
              type: evt.type,
              evt: evt
            };
            this.fire(evt.type, e);
        },
        addEventListener: function(type, handler) {
            // we have to pass native event to handler
            this.on(type, function(evt){
                handler.call(this, evt.evt);
            });
        },
        removeEventListener: function(type) {
            this.off(type);
        },
        /**
         * remove self from parent, but don't destroy
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Konva.Node}
         * @example
         * node.remove();
         */
        remove: function() {
            var parent = this.getParent();

            if(parent && parent.children) {
                parent.children.splice(this.index, 1);
                parent._setChildrenIndices();
                delete this.parent;
            }

            // every cached attr that is calculated via node tree
            // traversal must be cleared when removing a node
            this._clearSelfAndDescendantCache(STAGE);
            this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
            this._clearSelfAndDescendantCache(VISIBLE);
            this._clearSelfAndDescendantCache(LISTENING);
            this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);

            return this;
        },
        /**
         * remove and destroy self
         * @method
         * @memberof Konva.Node.prototype
         * @example
         * node.destroy();
         */
        destroy: function() {
            // remove from ids and names hashes
            Konva._removeId(this.getId());
            Konva._removeName(this.getName(), this._id);

            this.remove();
        },
        /**
         * get attr
         * @method
         * @memberof Konva.Node.prototype
         * @param {String} attr
         * @returns {Integer|String|Object|Array}
         * @example
         * var x = node.getAttr('x');
         */
        getAttr: function(attr) {
            var method = GET + Konva.Util._capitalize(attr);
            if(Konva.Util._isFunction(this[method])) {
                return this[method]();
            }
            // otherwise get directly
            return this.attrs[attr];
        },
        /**
        * get ancestors
        * @method
        * @memberof Konva.Node.prototype
        * @returns {Konva.Collection}
        * @example
        * shape.getAncestors().each(function(node) {
        *   console.log(node.getId());
        * })
        */
        getAncestors: function() {
            var parent = this.getParent(),
                ancestors = new Konva.Collection();

            while (parent) {
                ancestors.push(parent);
                parent = parent.getParent();
            }

            return ancestors;
        },
        /**
         * get attrs object literal
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Object}
         */
        getAttrs: function() {
            return this.attrs || {};
        },
        /**
         * set multiple attrs at once using an object literal
         * @method
         * @memberof Konva.Node.prototype
         * @param {Object} config object containing key value pairs
         * @returns {Konva.Node}
         * @example
         * node.setAttrs({
         *   x: 5,
         *   fill: 'red'
         * });
         */
        setAttrs: function(config) {
            var key, method;

            if(!config) {
                return this;
            }
            for(key in config) {
                if (key === CHILDREN) {
                    continue;
                }
                method = SET + Konva.Util._capitalize(key);
                // use setter if available
                if(Konva.Util._isFunction(this[method])) {
                    this[method](config[key]);
                }
                // otherwise set directly
                else {
                    this._setAttr(key, config[key]);
                }
            }
            return this;
        },
        /**
         * determine if node is listening for events by taking into account ancestors.
         *
         * Parent    | Self      | isListening
         * listening | listening |
         * ----------+-----------+------------
         * T         | T         | T
         * T         | F         | F
         * F         | T         | T
         * F         | F         | F
         * ----------+-----------+------------
         * T         | I         | T
         * F         | I         | F
         * I         | I         | T
         *
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Boolean}
         */
        isListening: function() {
            return this._getCache(LISTENING, this._isListening);
        },
        _isListening: function() {
            var listening = this.getListening(),
                parent = this.getParent();

            // the following conditions are a simplification of the truth table above.
            // please modify carefully
            if (listening === 'inherit') {
                if (parent) {
                    return parent.isListening();
                }
                else {
                    return true;
                }
            }
            else {
                return listening;
            }
        },
        /**
         * determine if node is visible by taking into account ancestors.
         *
         * Parent    | Self      | isVisible
         * visible   | visible   |
         * ----------+-----------+------------
         * T         | T         | T
         * T         | F         | F
         * F         | T         | T
         * F         | F         | F
         * ----------+-----------+------------
         * T         | I         | T
         * F         | I         | F
         * I         | I         | T

         * @method
         * @memberof Konva.Node.prototype
         * @returns {Boolean}
         */
        isVisible: function() {
            return this._getCache(VISIBLE, this._isVisible);
        },
        _isVisible: function() {
            var visible = this.getVisible(),
                parent = this.getParent();

            // the following conditions are a simplification of the truth table above.
            // please modify carefully
            if (visible === 'inherit') {
                if (parent) {
                    return parent.isVisible();
                }
                else {
                    return true;
                }
            }
            else {
                return visible;
            }
        },
        /**
         * determine if listening is enabled by taking into account descendants.  If self or any children
         * have _isListeningEnabled set to true, then self also has listening enabled.
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Boolean}
         */
        shouldDrawHit: function(canvas) {
            var layer = this.getLayer();
            return (canvas && canvas.isCache) || (layer && layer.hitGraphEnabled())
                && this.isListening() && this.isVisible();
        },
        /**
         * show node
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Konva.Node}
         */
        show: function() {
            this.setVisible(true);
            return this;
        },
        /**
         * hide node.  Hidden nodes are no longer detectable
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Konva.Node}
         */
        hide: function() {
            this.setVisible(false);
            return this;
        },
        /**
         * get zIndex relative to the node's siblings who share the same parent
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Integer}
         */
        getZIndex: function() {
            return this.index || 0;
        },
        /**
         * get absolute z-index which takes into account sibling
         *  and ancestor indices
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Integer}
         */
        getAbsoluteZIndex: function() {
            var depth = this.getDepth(),
                that = this,
                index = 0,
                nodes, len, n, child;

            function addChildren(children) {
                nodes = [];
                len = children.length;
                for(n = 0; n < len; n++) {
                    child = children[n];
                    index++;

                    if(child.nodeType !== SHAPE) {
                        nodes = nodes.concat(child.getChildren().toArray());
                    }

                    if(child._id === that._id) {
                        n = len;
                    }
                }

                if(nodes.length > 0 && nodes[0].getDepth() <= depth) {
                    addChildren(nodes);
                }
            }
            if(that.nodeType !== UPPER_STAGE) {
                addChildren(that.getStage().getChildren());
            }

            return index;
        },
        /**
         * get node depth in node tree.  Returns an integer.
         *  e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always
         *  be >= 2
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Integer}
         */
        getDepth: function() {
            var depth = 0,
                parent = this.parent;

            while(parent) {
                depth++;
                parent = parent.parent;
            }
            return depth;
        },
        setPosition: function(pos) {
            this.setX(pos.x);
            this.setY(pos.y);
            return this;
        },
        getPosition: function() {
            return {
                x: this.getX(),
                y: this.getY()
            };
        },
        /**
         * get absolute position relative to the top left corner of the stage container div
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Object}
         */
        getAbsolutePosition: function() {
            var absoluteMatrix = this.getAbsoluteTransform().getMatrix(),
                absoluteTransform = new Konva.Transform(),
                offset = this.offset();

            // clone the matrix array
            absoluteTransform.m = absoluteMatrix.slice();
            absoluteTransform.translate(offset.x, offset.y);

            return absoluteTransform.getTranslation();
        },
        /**
         * set absolute position
         * @method
         * @memberof Konva.Node.prototype
         * @param {Object} pos
         * @param {Number} pos.x
         * @param {Number} pos.y
         * @returns {Konva.Node}
         */
        setAbsolutePosition: function(pos) {
            var origTrans = this._clearTransform(),
                it;

            // don't clear translation
            this.attrs.x = origTrans.x;
            this.attrs.y = origTrans.y;
            delete origTrans.x;
            delete origTrans.y;

            // unravel transform
            it = this.getAbsoluteTransform();

            it.invert();
            it.translate(pos.x, pos.y);
            pos = {
                x: this.attrs.x + it.getTranslation().x,
                y: this.attrs.y + it.getTranslation().y
            };

            this.setPosition({x: pos.x, y: pos.y});
            this._setTransform(origTrans);

            return this;
        },
        _setTransform: function(trans) {
            var key;

            for(key in trans) {
                this.attrs[key] = trans[key];
            }

            this._clearCache(TRANSFORM);
            this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
        },
        _clearTransform: function() {
            var trans = {
                x: this.getX(),
                y: this.getY(),
                rotation: this.getRotation(),
                scaleX: this.getScaleX(),
                scaleY: this.getScaleY(),
                offsetX: this.getOffsetX(),
                offsetY: this.getOffsetY(),
                skewX: this.getSkewX(),
                skewY: this.getSkewY()
            };

            this.attrs.x = 0;
            this.attrs.y = 0;
            this.attrs.rotation = 0;
            this.attrs.scaleX = 1;
            this.attrs.scaleY = 1;
            this.attrs.offsetX = 0;
            this.attrs.offsetY = 0;
            this.attrs.skewX = 0;
            this.attrs.skewY = 0;

            this._clearCache(TRANSFORM);
            this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);

            // return original transform
            return trans;
        },
        /**
         * move node by an amount relative to its current position
         * @method
         * @memberof Konva.Node.prototype
         * @param {Object} change
         * @param {Number} change.x
         * @param {Number} change.y
         * @returns {Konva.Node}
         * @example
         * // move node in x direction by 1px and y direction by 2px
         * node.move({
         *   x: 1,
         *   y: 2)
         * });
         */
        move: function(change) {
            var changeX = change.x,
                changeY = change.y,
                x = this.getX(),
                y = this.getY();

            if(changeX !== undefined) {
                x += changeX;
            }

            if(changeY !== undefined) {
                y += changeY;
            }

            this.setPosition({x: x, y: y});
            return this;
        },
        _eachAncestorReverse: function(func, top) {
            var family = [],
                parent = this.getParent(),
                len, n;

            // if top node is defined, and this node is top node,
            // there's no need to build a family tree.  just execute
            // func with this because it will be the only node
            if (top && top._id === this._id) {
                func(this);
                return true;
            }

            family.unshift(this);

            while(parent && (!top || parent._id !== top._id)) {
                family.unshift(parent);
                parent = parent.parent;
            }

            len = family.length;
            for(n = 0; n < len; n++) {
                func(family[n]);
            }
        },
        /**
         * rotate node by an amount in degrees relative to its current rotation
         * @method
         * @memberof Konva.Node.prototype
         * @param {Number} theta
         * @returns {Konva.Node}
         */
        rotate: function(theta) {
            this.setRotation(this.getRotation() + theta);
            return this;
        },
        /**
         * move node to the top of its siblings
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Boolean}
         */
        moveToTop: function() {
            if (!this.parent) {
                Konva.Util.warn('Node has no parent. moveToTop function is ignored.');
                return false;
            }
            var index = this.index;
            this.parent.children.splice(index, 1);
            this.parent.children.push(this);
            this.parent._setChildrenIndices();
            return true;
        },
        /**
         * move node up
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Boolean} flag is moved or not
         */
        moveUp: function() {
            if (!this.parent) {
                Konva.Util.warn('Node has no parent. moveUp function is ignored.');
                return false;
            }
            var index = this.index,
                len = this.parent.getChildren().length;
            if(index < len - 1) {
                this.parent.children.splice(index, 1);
                this.parent.children.splice(index + 1, 0, this);
                this.parent._setChildrenIndices();
                return true;
            }
            return false;
        },
        /**
         * move node down
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Boolean}
         */
        moveDown: function() {
            if (!this.parent) {
                Konva.Util.warn('Node has no parent. moveDown function is ignored.');
                return false;
            }
            var index = this.index;
            if(index > 0) {
                this.parent.children.splice(index, 1);
                this.parent.children.splice(index - 1, 0, this);
                this.parent._setChildrenIndices();
                return true;
            }
            return false;
        },
        /**
         * move node to the bottom of its siblings
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Boolean}
         */
        moveToBottom: function() {
            if (!this.parent) {
                Konva.Util.warn('Node has no parent. moveToBottom function is ignored.');
                return false;
            }
            var index = this.index;
            if(index > 0) {
                this.parent.children.splice(index, 1);
                this.parent.children.unshift(this);
                this.parent._setChildrenIndices();
                return true;
            }
            return false;
        },
        /**
         * set zIndex relative to siblings
         * @method
         * @memberof Konva.Node.prototype
         * @param {Integer} zIndex
         * @returns {Konva.Node}
         */
        setZIndex: function(zIndex) {
            if (!this.parent) {
                Konva.Util.warn('Node has no parent. zIndex parameter is ignored.');
                return false;
            }
            var index = this.index;
            this.parent.children.splice(index, 1);
            this.parent.children.splice(zIndex, 0, this);
            this.parent._setChildrenIndices();
            return this;
        },
        /**
         * get absolute opacity
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Number}
         */
        getAbsoluteOpacity: function() {
            return this._getCache(ABSOLUTE_OPACITY, this._getAbsoluteOpacity);
        },
        _getAbsoluteOpacity: function() {
            var absOpacity = this.getOpacity();
            if(this.getParent()) {
                absOpacity *= this.getParent().getAbsoluteOpacity();
            }
            return absOpacity;
        },
        /**
         * move node to another container
         * @method
         * @memberof Konva.Node.prototype
         * @param {Container} newContainer
         * @returns {Konva.Node}
         * @example
         * // move node from current layer into layer2
         * node.moveTo(layer2);
         */
        moveTo: function(newContainer) {
            // do nothing if new container is already parent
            if (this.getParent() !== newContainer) {
                this.remove();
                newContainer.add(this);
            }
            return this;
        },
        /**
         * convert Node into an object for serialization.  Returns an object.
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Object}
         */
        toObject: function() {
            var obj = {},
                attrs = this.getAttrs(),
                key, val, getter, defaultValue;

            obj.attrs = {};

            for(key in attrs) {
                val = attrs[key];
                // serialize only attributes that are not function, image, DOM, or objects with methods
                if (Konva.Util._isFunction(val) || Konva.Util._isElement(val) ||
                    (Konva.Util._isObject(val) || Konva.Util._hasMethods(val))) {
                    continue;
                }
                getter = this[key];
                // remove attr value so that we can extract the default value from the getter
                delete attrs[key];
                defaultValue = getter ? getter.call(this) : null;
                // restore attr value
                attrs[key] = val;
                if (defaultValue !== val) {
                    obj.attrs[key] = val;
                }
            }

            obj.className = this.getClassName();
            return obj;
        },
        /**
         * convert Node into a JSON string.  Returns a JSON string.
         * @method
         * @memberof Konva.Node.prototype
         * @returns {String}}
         */
        toJSON: function() {
            return JSON.stringify(this.toObject());
        },
        /**
         * get parent container
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Konva.Node}
         */
        getParent: function() {
            return this.parent;
        },
        /**
         * get layer ancestor
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Konva.Layer}
         */
        getLayer: function() {
            var parent = this.getParent();
            return parent ? parent.getLayer() : null;
        },
        /**
         * get stage ancestor
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Konva.Stage}
         */
        getStage: function() {
            return this._getCache(STAGE, this._getStage);
        },
        _getStage: function() {
            var parent = this.getParent();
            if(parent) {
                return parent.getStage();
            }
            else {
                return undefined;
            }
        },
        /**
         * fire event
         * @method
         * @memberof Konva.Node.prototype
         * @param {String} eventType event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent
         * @param {Event} [evt] event object
         * @param {Boolean} [bubble] setting the value to false, or leaving it undefined, will result in the event
         *  not bubbling.  Setting the value to true will result in the event bubbling.
         * @returns {Konva.Node}
         * @example
         * // manually fire click event
         * node.fire('click');
         *
         * // fire custom event
         * node.fire('foo');
         *
         * // fire custom event with custom event object
         * node.fire('foo', {
         *   bar: 10
         * });
         *
         * // fire click event that bubbles
         * node.fire('click', null, true);
         */
        fire: function(eventType, evt, bubble) {
            // bubble
            if (bubble) {
                this._fireAndBubble(eventType, evt || {});
            }
            // no bubble
            else {
                this._fire(eventType, evt || {});
            }
            return this;
        },
        /**
         * get absolute transform of the node which takes into
         *  account its ancestor transforms
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Konva.Transform}
         */
        getAbsoluteTransform: function(top) {
            // if using an argument, we can't cache the result.
            if (top) {
                return this._getAbsoluteTransform(top);
            }
            // if no argument, we can cache the result
            else {
                return this._getCache(ABSOLUTE_TRANSFORM, this._getAbsoluteTransform);
            }
        },
        _getAbsoluteTransform: function(top) {
            var at = new Konva.Transform(),
                transformsEnabled, trans;

            // start with stage and traverse downwards to self
            this._eachAncestorReverse(function(node) {
                transformsEnabled = node.transformsEnabled();
                trans = node.getTransform();

                if (transformsEnabled === 'all') {
                    at.multiply(trans);
                }
                else if (transformsEnabled === 'position') {
                    at.translate(node.x(), node.y());
                }
            }, top);
            return at;
        },
        /**
         * get transform of the node
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Konva.Transform}
         */
        getTransform: function() {
            return this._getCache(TRANSFORM, this._getTransform);
        },
        _getTransform: function() {
            var m = new Konva.Transform(),
                x = this.getX(),
                y = this.getY(),
                rotation = Konva.getAngle(this.getRotation()),
                scaleX = this.getScaleX(),
                scaleY = this.getScaleY(),
                skewX = this.getSkewX(),
                skewY = this.getSkewY(),
                offsetX = this.getOffsetX(),
                offsetY = this.getOffsetY();

            if(x !== 0 || y !== 0) {
                m.translate(x, y);
            }
            if(rotation !== 0) {
                m.rotate(rotation);
            }
            if(skewX !== 0 || skewY !== 0) {
                m.skew(skewX, skewY);
            }
            if(scaleX !== 1 || scaleY !== 1) {
                m.scale(scaleX, scaleY);
            }
            if(offsetX !== 0 || offsetY !== 0) {
                m.translate(-1 * offsetX, -1 * offsetY);
            }

            return m;
        },
        /**
         * clone node.  Returns a new Node instance with identical attributes.  You can also override
         *  the node properties with an object literal, enabling you to use an existing node as a template
         *  for another node
         * @method
         * @memberof Konva.Node.prototype
         * @param {Object} obj override attrs
         * @returns {Konva.Node}
         * @example
         * // simple clone
         * var clone = node.clone();
         *
         * // clone a node and override the x position
         * var clone = rect.clone({
         *   x: 5
         * });
         */
        clone: function(obj) {
            // instantiate new node
            var attrs = Konva.Util.cloneObject(this.attrs),
                key, allListeners, len, n, listener;
            // filter black attrs
            for (var i in CLONE_BLACK_LIST) {
                var blockAttr = CLONE_BLACK_LIST[i];
                delete attrs[blockAttr];
            }
            // apply attr overrides
            for (key in obj) {
                attrs[key] = obj[key];
            }

            var node = new this.constructor(attrs);
            // copy over listeners
            for(key in this.eventListeners) {
                allListeners = this.eventListeners[key];
                len = allListeners.length;
                for(n = 0; n < len; n++) {
                    listener = allListeners[n];
                    /*
                     * don't include konva namespaced listeners because
                     *  these are generated by the constructors
                     */
                    if(listener.name.indexOf(KONVA) < 0) {
                        // if listeners array doesn't exist, then create it
                        if(!node.eventListeners[key]) {
                            node.eventListeners[key] = [];
                        }
                        node.eventListeners[key].push(listener);
                    }
                }
            }
            return node;
        },
        /**
         * Creates a composite data URL. If MIME type is not
         * specified, then "image/png" will result. For "image/jpeg", specify a quality
         * level as quality (range 0.0 - 1.0)
         * @method
         * @memberof Konva.Node.prototype
         * @param {Object} config
         * @param {String} [config.mimeType] can be "image/png" or "image/jpeg".
         *  "image/png" is the default
         * @param {Number} [config.x] x position of canvas section
         * @param {Number} [config.y] y position of canvas section
         * @param {Number} [config.width] width of canvas section
         * @param {Number} [config.height] height of canvas section
         * @param {Number} [config.quality] jpeg quality.  If using an "image/jpeg" mimeType,
         *  you can specify the quality from 0 to 1, where 0 is very poor quality and 1
         *  is very high quality
         * @paremt {Number} [config.pixelRatio] pixelRatio of ouput image url. Default is 1
         * @returns {String}
         */
        toDataURL: function(config) {
            config = config || {};

            var mimeType = config.mimeType || null,
                quality = config.quality || null,
                stage = this.getStage(),
                x = config.x || 0,
                y = config.y || 0,
                pixelRatio = config.pixelRatio || 1,
                canvas = new Konva.SceneCanvas({
                    width: config.width || this.getWidth() || (stage ? stage.getWidth() : 0),
                    height: config.height || this.getHeight() || (stage ? stage.getHeight() : 0),
                    pixelRatio: pixelRatio
                }),
                context = canvas.getContext();

            context.save();

            if(x || y) {
                context.translate(-1 * x, -1 * y);
            }

            this.drawScene(canvas);
            context.restore();

            return canvas.toDataURL(mimeType, quality);
        },
        /**
         * converts node into an image.  Since the toImage
         *  method is asynchronous, a callback is required.  toImage is most commonly used
         *  to cache complex drawings as an image so that they don't have to constantly be redrawn
         * @method
         * @memberof Konva.Node.prototype
         * @param {Object} config
         * @param {Function} config.callback function executed when the composite has completed
         * @param {String} [config.mimeType] can be "image/png" or "image/jpeg".
         *  "image/png" is the default
         * @param {Number} [config.x] x position of canvas section
         * @param {Number} [config.y] y position of canvas section
         * @param {Number} [config.width] width of canvas section
         * @param {Number} [config.height] height of canvas section
         * @param {Number} [config.quality] jpeg quality.  If using an "image/jpeg" mimeType,
         *  you can specify the quality from 0 to 1, where 0 is very poor quality and 1
         *  is very high quality
         * @paremt {Number} [config.pixelRatio] pixelRatio of ouput image.  Default is 1.
         * @example
         * var image = node.toImage({
         *   callback: function(img) {
         *     // do stuff with img
         *   }
         * });
         */
        toImage: function(config) {
            if (!config || !config.callback) {
                throw 'callback required for toImage method config argument';
            }
            Konva.Util._getImage(this.toDataURL(config), function(img) {
                config.callback(img);
            });
        },
        setSize: function(size) {
            this.setWidth(size.width);
            this.setHeight(size.height);
            return this;
        },
        getSize: function() {
            return {
                width: this.getWidth(),
                height: this.getHeight()
            };
        },
        getWidth: function() {
            return this.attrs.width || 0;
        },
        getHeight: function() {
            return this.attrs.height || 0;
        },
        /**
         * get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.
         * @method
         * @memberof Konva.Node.prototype
         * @returns {String}
         */
        getClassName: function() {
            return this.className || this.nodeType;
        },
        /**
         * get the node type, which may return Stage, Layer, Group, or Node
         * @method
         * @memberof Konva.Node.prototype
         * @returns {String}
         */
        getType: function() {
            return this.nodeType;
        },
        getDragDistance: function() {
            // compare with undefined because we need to track 0 value
            if (this.attrs.dragDistance !== undefined) {
                return this.attrs.dragDistance;
            } else if (this.parent) {
                return this.parent.getDragDistance();
            } else {
                return Konva.dragDistance;
            }
        },
        _get: function(selector) {
            return this.className === selector || this.nodeType === selector ? [this] : [];
        },
        _off: function(type, name) {
            var evtListeners = this.eventListeners[type],
                i, evtName;

            for(i = 0; i < evtListeners.length; i++) {
                evtName = evtListeners[i].name;
                // the following two conditions must be true in order to remove a handler:
                // 1) the current event name cannot be konva unless the event name is konva
                //    this enables developers to force remove a konva specific listener for whatever reason
                // 2) an event name is not specified, or if one is specified, it matches the current event name
                if((evtName !== 'konva' || name === 'konva') && (!name || evtName === name)) {
                    evtListeners.splice(i, 1);
                    if(evtListeners.length === 0) {
                        delete this.eventListeners[type];
                        break;
                    }
                    i--;
                }
            }
        },
        _fireChangeEvent: function(attr, oldVal, newVal) {
            this._fire(attr + CHANGE, {
                oldVal: oldVal,
                newVal: newVal
            });
        },
        setId: function(id) {
            var oldId = this.getId();

            Konva._removeId(oldId);
            Konva._addId(this, id);
            this._setAttr(ID, id);
            return this;
        },
        setName: function(name) {
            var oldNames = (this.getName() || '').split(/\s/g);
            var newNames = (name || '').split(/\s/g);
            var subname, i;
            // remove all subnames
            for(i = 0; i < oldNames.length; i++) {
                subname = oldNames[i];
                if ((newNames.indexOf(subname)) === -1 && subname) {
                    Konva._removeName(subname, this._id);
                }
            }

            // add new names
            for(i = 0; i < newNames.length; i++) {
                subname = newNames[i];
                if ((oldNames.indexOf(subname) === -1) && subname) {
                    Konva._addName(this, subname);
                }
            }

            this._setAttr(NAME, name);
            return this;
        },
        // naming methods
        /**
         * add name to node
         * @method
         * @memberof Konva.Node.prototype
         * @param {String} name
         * @returns {Konva.Node}
         * @example
         * node.name('red');
         * node.addName('selected');
         * node.name(); // return 'red selected'
         */
        addName: function(name) {
            if (!this.hasName(name)) {
                var oldName = this.name();
                var newName = oldName ? (oldName + ' ' + name) : name;
                this.setName(newName);
            }
            return this;
        },
        /**
         * check is node has name
         * @method
         * @memberof Konva.Node.prototype
         * @param {String} name
         * @returns {Boolean}
         * @example
         * node.name('red');
         * node.hasName('red');   // return true
         * node.hasName('selected'); // return false
         */
        hasName: function(name) {
            var names = (this.name() || '').split(/\s/g);
            return names.indexOf(name) !== -1;
        },
        /**
         * remove name from node
         * @method
         * @memberof Konva.Node.prototype
         * @param {String} name
         * @returns {Konva.Node}
         * @example
         * node.name('red selected');
         * node.removeName('selected');
         * node.hasName('selected'); // return false
         * node.name(); // return 'red'
         */
        removeName: function(name) {
            var names = (this.name() || '').split(/\s/g);
            var index = names.indexOf(name);
            if (index !== -1) {
                names.splice(index, 1);
                this.setName(names.join(' '));
            }
        },
        /**
         * set attr
         * @method
         * @memberof Konva.Node.prototype
         * @param {String} attr
         * @param {*} val
         * @returns {Konva.Node}
         * @example
         * node.setAttr('x', 5);
         */
        setAttr: function(attr, val) {
            var method = SET + Konva.Util._capitalize(attr),
                func = this[method];

            if(Konva.Util._isFunction(func)) {
                func.call(this, val);
            }
            // otherwise set directly
            else {
                this._setAttr(attr, val);
            }
            return this;
        },
        _setAttr: function(key, val) {
            var oldVal;
            if(val !== undefined) {
                oldVal = this.attrs[key];
                this.attrs[key] = val;
                this._fireChangeEvent(key, oldVal, val);
            }
        },
        _setComponentAttr: function(key, component, val) {
            var oldVal;
            if(val !== undefined) {
                oldVal = this.attrs[key];

                if (!oldVal) {
                    // set value to default value using getAttr
                    this.attrs[key] = this.getAttr(key);
                }

                this.attrs[key][component] = val;
                this._fireChangeEvent(key, oldVal, val);
            }
        },
        _fireAndBubble: function(eventType, evt, compareShape) {
            var okayToRun = true;

            if(evt && this.nodeType === SHAPE) {
                evt.target = this;
            }

            if(eventType === MOUSEENTER && compareShape && (this._id === compareShape._id || (this.isAncestorOf && this.isAncestorOf(compareShape)))) {
                okayToRun = false;
            }
            else if(eventType === MOUSELEAVE && compareShape && (this._id === compareShape._id || (this.isAncestorOf && this.isAncestorOf(compareShape)))) {
                okayToRun = false;
            }
            if(okayToRun) {
                this._fire(eventType, evt);

                // simulate event bubbling
                var stopBubble = (eventType === MOUSEENTER || eventType === MOUSELEAVE) && ((compareShape && compareShape.isAncestorOf && compareShape.isAncestorOf(this)) || !!(compareShape && compareShape.isAncestorOf));
                if(evt && !evt.cancelBubble && this.parent && this.parent.isListening() && (!stopBubble)) {
                    if(compareShape && compareShape.parent) {
                        this._fireAndBubble.call(this.parent, eventType, evt, compareShape.parent);
                    }
                    else {
                        this._fireAndBubble.call(this.parent, eventType, evt);
                    }
                }
            }
        },
        _fire: function(eventType, evt) {
            var events = this.eventListeners[eventType],
                i;

            evt.type = eventType;

            if (events) {
                for(i = 0; i < events.length; i++) {
                    events[i].handler.call(this, evt);
                }
            }
        },
        /**
         * draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Konva.Node}
         */
        draw: function() {
            this.drawScene();
            this.drawHit();
            return this;
        }
    });

    /**
     * create node with JSON string or an Object.  De-serializtion does not generate custom
     *  shape drawing functions, images, or event handlers (this would make the
     *  serialized object huge).  If your app uses custom shapes, images, and
     *  event handlers (it probably does), then you need to select the appropriate
     *  shapes after loading the stage and set these properties via on(), setDrawFunc(),
     *  and setImage() methods
     * @method
     * @memberof Konva.Node
     * @param {String|Object} json string or object
     * @param {Element} [container] optional container dom element used only if you're
     *  creating a stage node
     */
    Konva.Node.create = function(data, container) {
        if (Konva.Util._isString(data)) {
            data = JSON.parse(data);
        }
        return this._createNode(data, container);
    };
    Konva.Node._createNode = function(obj, container) {
        var className = Konva.Node.prototype.getClassName.call(obj),
            children = obj.children,
            no, len, n;

        // if container was passed in, add it to attrs
        if(container) {
            obj.attrs.container = container;
        }

        no = new Konva[className](obj.attrs);
        if(children) {
            len = children.length;
            for(n = 0; n < len; n++) {
                no.add(this._createNode(children[n]));
            }
        }

        return no;
    };


    // =========================== add getters setters ===========================

    Konva.Factory.addOverloadedGetterSetter(Konva.Node, 'position');
    /**
     * get/set node position relative to parent
     * @name position
     * @method
     * @memberof Konva.Node.prototype
     * @param {Object} pos
     * @param {Number} pos.x
     * @param {Number} pos.y
     * @returns {Object}
     * @example
     * // get position
     * var position = node.position();
     *
     * // set position
     * node.position({
     *   x: 5
     *   y: 10
     * });
     */

    Konva.Factory.addGetterSetter(Konva.Node, 'x', 0);

    /**
     * get/set x position
     * @name x
     * @method
     * @memberof Konva.Node.prototype
     * @param {Number} x
     * @returns {Object}
     * @example
     * // get x
     * var x = node.x();
     *
     * // set x
     * node.x(5);
     */

    Konva.Factory.addGetterSetter(Konva.Node, 'y', 0);

    /**
     * get/set y position
     * @name y
     * @method
     * @memberof Konva.Node.prototype
     * @param {Number} y
     * @returns {Integer}
     * @example
     * // get y
     * var y = node.y();
     *
     * // set y
     * node.y(5);
     */

    Konva.Factory.addGetterSetter(Konva.Node, 'opacity', 1);

    /**
     * get/set opacity.  Opacity values range from 0 to 1.
     *  A node with an opacity of 0 is fully transparent, and a node
     *  with an opacity of 1 is fully opaque
     * @name opacity
     * @method
     * @memberof Konva.Node.prototype
     * @param {Object} opacity
     * @returns {Number}
     * @example
     * // get opacity
     * var opacity = node.opacity();
     *
     * // set opacity
     * node.opacity(0.5);
     */

    Konva.Factory.addGetter(Konva.Node, 'name');
    Konva.Factory.addOverloadedGetterSetter(Konva.Node, 'name');

    /**
     * get/set name
     * @name name
     * @method
     * @memberof Konva.Node.prototype
     * @param {String} name
     * @returns {String}
     * @example
     * // get name
     * var name = node.name();
     *
     * // set name
     * node.name('foo');
     *
     * // also node may have multiple names (as css classes)
     * node.name('foo bar');
     */

    Konva.Factory.addGetter(Konva.Node, 'id');
    Konva.Factory.addOverloadedGetterSetter(Konva.Node, 'id');

    /**
     * get/set id. Id is global for whole page.
     * @name id
     * @method
     * @memberof Konva.Node.prototype
     * @param {String} id
     * @returns {String}
     * @example
     * // get id
     * var name = node.id();
     *
     * // set id
     * node.id('foo');
     */

    Konva.Factory.addGetterSetter(Konva.Node, 'rotation', 0);

    /**
     * get/set rotation in degrees
     * @name rotation
     * @method
     * @memberof Konva.Node.prototype
     * @param {Number} rotation
     * @returns {Number}
     * @example
     * // get rotation in degrees
     * var rotation = node.rotation();
     *
     * // set rotation in degrees
     * node.rotation(45);
     */

    Konva.Factory.addComponentsGetterSetter(Konva.Node, 'scale', ['x', 'y']);

    /**
     * get/set scale
     * @name scale
     * @param {Object} scale
     * @param {Number} scale.x
     * @param {Number} scale.y
     * @method
     * @memberof Konva.Node.prototype
     * @returns {Object}
     * @example
     * // get scale
     * var scale = node.scale();
     *
     * // set scale
     * shape.scale({
     *   x: 2
     *   y: 3
     * });
     */

    Konva.Factory.addGetterSetter(Konva.Node, 'scaleX', 1);

    /**
     * get/set scale x
     * @name scaleX
     * @param {Number} x
     * @method
     * @memberof Konva.Node.prototype
     * @returns {Number}
     * @example
     * // get scale x
     * var scaleX = node.scaleX();
     *
     * // set scale x
     * node.scaleX(2);
     */

    Konva.Factory.addGetterSetter(Konva.Node, 'scaleY', 1);

    /**
     * get/set scale y
     * @name scaleY
     * @param {Number} y
     * @method
     * @memberof Konva.Node.prototype
     * @returns {Number}
     * @example
     * // get scale y
     * var scaleY = node.scaleY();
     *
     * // set scale y
     * node.scaleY(2);
     */

    Konva.Factory.addComponentsGetterSetter(Konva.Node, 'skew', ['x', 'y']);

    /**
     * get/set skew
     * @name skew
     * @param {Object} skew
     * @param {Number} skew.x
     * @param {Number} skew.y
     * @method
     * @memberof Konva.Node.prototype
     * @returns {Object}
     * @example
     * // get skew
     * var skew = node.skew();
     *
     * // set skew
     * node.skew({
     *   x: 20
     *   y: 10
     * });
     */

    Konva.Factory.addGetterSetter(Konva.Node, 'skewX', 0);

    /**
     * get/set skew x
     * @name skewX
     * @param {Number} x
     * @method
     * @memberof Konva.Node.prototype
     * @returns {Number}
     * @example
     * // get skew x
     * var skewX = node.skewX();
     *
     * // set skew x
     * node.skewX(3);
     */

    Konva.Factory.addGetterSetter(Konva.Node, 'skewY', 0);

    /**
     * get/set skew y
     * @name skewY
     * @param {Number} y
     * @method
     * @memberof Konva.Node.prototype
     * @returns {Number}
     * @example
     * // get skew y
     * var skewY = node.skewY();
     *
     * // set skew y
     * node.skewY(3);
     */

    Konva.Factory.addComponentsGetterSetter(Konva.Node, 'offset', ['x', 'y']);

    /**
     * get/set offset.  Offsets the default position and rotation point
     * @method
     * @memberof Konva.Node.prototype
     * @param {Object} offset
     * @param {Number} offset.x
     * @param {Number} offset.y
     * @returns {Object}
     * @example
     * // get offset
     * var offset = node.offset();
     *
     * // set offset
     * node.offset({
     *   x: 20
     *   y: 10
     * });
     */

    Konva.Factory.addGetterSetter(Konva.Node, 'offsetX', 0);

    /**
     * get/set offset x
     * @name offsetX
     * @method
     * @memberof Konva.Node.prototype
     * @param {Number} x
     * @returns {Number}
     * @example
     * // get offset x
     * var offsetX = node.offsetX();
     *
     * // set offset x
     * node.offsetX(3);
     */

    Konva.Factory.addGetterSetter(Konva.Node, 'offsetY', 0);

    /**
     * get/set offset y
     * @name offsetY
     * @method
     * @memberof Konva.Node.prototype
     * @param {Number} y
     * @returns {Number}
     * @example
     * // get offset y
     * var offsetY = node.offsetY();
     *
     * // set offset y
     * node.offsetY(3);
     */

    Konva.Factory.addSetter(Konva.Node, 'dragDistance');
    Konva.Factory.addOverloadedGetterSetter(Konva.Node, 'dragDistance');

    /**
     * get/set drag distance
     * @name dragDistance
     * @method
     * @memberof Konva.Node.prototype
     * @param {Number} distance
     * @returns {Number}
     * @example
     * // get drag distance
     * var dragDistance = node.dragDistance();
     *
     * // set distance
     * // node starts dragging only if pointer moved more then 3 pixels
     * node.dragDistance(3);
     * // or set globally
     * Konva.dragDistance = 3;
     */


    Konva.Factory.addSetter(Konva.Node, 'width', 0);
    Konva.Factory.addOverloadedGetterSetter(Konva.Node, 'width');
    /**
     * get/set width
     * @name width
     * @method
     * @memberof Konva.Node.prototype
     * @param {Number} width
     * @returns {Number}
     * @example
     * // get width
     * var width = node.width();
     *
     * // set width
     * node.width(100);
     */

    Konva.Factory.addSetter(Konva.Node, 'height', 0);
    Konva.Factory.addOverloadedGetterSetter(Konva.Node, 'height');
    /**
     * get/set height
     * @name height
     * @method
     * @memberof Konva.Node.prototype
     * @param {Number} height
     * @returns {Number}
     * @example
     * // get height
     * var height = node.height();
     *
     * // set height
     * node.height(100);
     */

    Konva.Factory.addGetterSetter(Konva.Node, 'listening', 'inherit');
    /**
     * get/set listenig attr.  If you need to determine if a node is listening or not
     *   by taking into account its parents, use the isListening() method
     * @name listening
     * @method
     * @memberof Konva.Node.prototype
     * @param {Boolean|String} listening Can be "inherit", true, or false.  The default is "inherit".
     * @returns {Boolean|String}
     * @example
     * // get listening attr
     * var listening = node.listening();
     *
     * // stop listening for events
     * node.listening(false);
     *
     * // listen for events
     * node.listening(true);
     *
     * // listen to events according to the parent
     * node.listening('inherit');
     */

    Konva.Factory.addGetterSetter(Konva.Node, 'filters', undefined, function(val) {this._filterUpToDate = false; return val; });
    /**
     * get/set filters.  Filters are applied to cached canvases
     * @name filters
     * @method
     * @memberof Konva.Node.prototype
     * @param {Array} filters array of filters
     * @returns {Array}
     * @example
     * // get filters
     * var filters = node.filters();
     *
     * // set a single filter
     * node.cache();
     * node.filters([Konva.Filters.Blur]);
     *
     * // set multiple filters
     * node.cache();
     * node.filters([
     *   Konva.Filters.Blur,
     *   Konva.Filters.Sepia,
     *   Konva.Filters.Invert
     * ]);
     */

    Konva.Factory.addGetterSetter(Konva.Node, 'visible', 'inherit');
    /**
     * get/set visible attr.  Can be "inherit", true, or false.  The default is "inherit".
     *   If you need to determine if a node is visible or not
     *   by taking into account its parents, use the isVisible() method
     * @name visible
     * @method
     * @memberof Konva.Node.prototype
     * @param {Boolean|String} visible
     * @returns {Boolean|String}
     * @example
     * // get visible attr
     * var visible = node.visible();
     *
     * // make invisible
     * node.visible(false);
     *
     * // make visible
     * node.visible(true);
     *
     * // make visible according to the parent
     * node.visible('inherit');
     */

    Konva.Factory.addGetterSetter(Konva.Node, 'transformsEnabled', 'all');

    /**
     * get/set transforms that are enabled.  Can be "all", "none", or "position".  The default
     *  is "all"
     * @name transformsEnabled
     * @method
     * @memberof Konva.Node.prototype
     * @param {String} enabled
     * @returns {String}
     * @example
     * // enable position transform only to improve draw performance
     * node.transformsEnabled('position');
     *
     * // enable all transforms
     * node.transformsEnabled('all');
     */



    /**
     * get/set node size
     * @name size
     * @method
     * @memberof Konva.Node.prototype
     * @param {Object} size
     * @param {Number} size.width
     * @param {Number} size.height
     * @returns {Object}
     * @example
     * // get node size
     * var size = node.size();
     * var x = size.x;
     * var y = size.y;
     *
     * // set size
     * node.size({
     *   width: 100,
     *   height: 200
     * });
     */
    Konva.Factory.addOverloadedGetterSetter(Konva.Node, 'size');

    Konva.Factory.backCompat(Konva.Node, {
        rotateDeg: 'rotate',
        setRotationDeg: 'setRotation',
        getRotationDeg: 'getRotation'
    });

    Konva.Collection.mapMethods(Konva.Node);
})(Konva);

(function() {
    'use strict';
    /**
    * Grayscale Filter
    * @function
    * @memberof Konva.Filters
    * @param {Object} imageData
    * @example
    * node.cache();
    * node.filters([Konva.Filters.Grayscale]);
    */
    Konva.Filters.Grayscale = function(imageData) {
        var data = imageData.data,
            len = data.length,
            i, brightness;

        for(i = 0; i < len; i += 4) {
            brightness = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];
            // red
            data[i] = brightness;
            // green
            data[i + 1] = brightness;
            // blue
            data[i + 2] = brightness;
        }
    };
})();

(function() {
    'use strict';
    /**
     * Brighten Filter.
     * @function
     * @memberof Konva.Filters
     * @param {Object} imageData
     * @example
     * node.cache();
     * node.filters([Konva.Filters.Brighten]);
     * node.brightness(0.8);
     */
    Konva.Filters.Brighten = function(imageData) {
        var brightness = this.brightness() * 255,
            data = imageData.data,
            len = data.length,
            i;

        for(i = 0; i < len; i += 4) {
            // red
            data[i] += brightness;
            // green
            data[i + 1] += brightness;
            // blue
            data[i + 2] += brightness;
        }
    };

    Konva.Factory.addGetterSetter(Konva.Node, 'brightness', 0, null, Konva.Factory.afterSetFilter);
    /**
    * get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values
    *  brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.
    * @name brightness
    * @method
    * @memberof Konva.Node.prototype
    * @param {Number} brightness value between -1 and 1
    * @returns {Number}
    */

})();

(function() {
    'use strict';
    /**
    * Invert Filter
    * @function
    * @memberof Konva.Filters
    * @param {Object} imageData
    * @example
    * node.cache();
    * node.filters([Konva.Filters.Invert]);
    */
    Konva.Filters.Invert = function(imageData) {
        var data = imageData.data,
            len = data.length,
            i;

        for(i = 0; i < len; i += 4) {
            // red
            data[i] = 255 - data[i];
            // green
            data[i + 1] = 255 - data[i + 1];
            // blue
            data[i + 2] = 255 - data[i + 2];
        }
    };
})();

/*
 the Gauss filter
 master repo: https://github.com/pavelpower/kineticjsGaussFilter
*/
(function() {
    'use strict';
    /*

     StackBlur - a fast almost Gaussian Blur For Canvas

     Version:   0.5
     Author:    Mario Klingemann
     Contact:   mario@quasimondo.com
     Website:   http://www.quasimondo.com/StackBlurForCanvas
     Twitter:   @quasimondo

     In case you find this class useful - especially in commercial projects -
     I am not totally unhappy for a small donation to my PayPal account
     mario@quasimondo.de

     Or support me on flattr:
     https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript

     Copyright (c) 2010 Mario Klingemann

     Permission is hereby granted, free of charge, to any person
     obtaining a copy of this software and associated documentation
     files (the "Software"), to deal in the Software without
     restriction, including without limitation the rights to use,
     copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the
     Software is furnished to do so, subject to the following
     conditions:

     The above copyright notice and this permission notice shall be
     included in all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
     NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
     OTHER DEALINGS IN THE SOFTWARE.
     */

    function BlurStack() {
        this.r = 0;
        this.g = 0;
        this.b = 0;
        this.a = 0;
        this.next = null;
    }

    var mul_table = [
        512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512,
        454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512,
        482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456,
        437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512,
        497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328,
        320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456,
        446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335,
        329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512,
        505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405,
        399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328,
        324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271,
        268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456,
        451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388,
        385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335,
        332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292,
        289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259
    ];

    var shg_table = [
        9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17,
        17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19,
        19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,
        20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21,
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,
        22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
        22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23,
        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
        23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24
    ];

    function filterGaussBlurRGBA( imageData, radius) {

        var pixels = imageData.data,
            width = imageData.width,
            height = imageData.height;

        var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum,
            r_out_sum, g_out_sum, b_out_sum, a_out_sum,
            r_in_sum, g_in_sum, b_in_sum, a_in_sum,
            pr, pg, pb, pa, rbs;

        var div = radius + radius + 1,
            widthMinus1 = width - 1,
            heightMinus1 = height - 1,
            radiusPlus1 = radius + 1,
            sumFactor = radiusPlus1 * ( radiusPlus1 + 1 ) / 2,
            stackStart = new BlurStack(),
            stackEnd = null,
            stack = stackStart,
            stackIn = null,
            stackOut = null,
            mul_sum = mul_table[radius],
            shg_sum = shg_table[radius];

        for ( i = 1; i < div; i++ ) {
            stack = stack.next = new BlurStack();
            if ( i === radiusPlus1 ){
                stackEnd = stack;
            }
        }

        stack.next = stackStart;

        yw = yi = 0;

        for ( y = 0; y < height; y++ )
        {
            r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;

            r_out_sum = radiusPlus1 * ( pr = pixels[yi] );
            g_out_sum = radiusPlus1 * ( pg = pixels[yi + 1] );
            b_out_sum = radiusPlus1 * ( pb = pixels[yi + 2] );
            a_out_sum = radiusPlus1 * ( pa = pixels[yi + 3] );

            r_sum += sumFactor * pr;
            g_sum += sumFactor * pg;
            b_sum += sumFactor * pb;
            a_sum += sumFactor * pa;

            stack = stackStart;

            for( i = 0; i < radiusPlus1; i++ )
            {
                stack.r = pr;
                stack.g = pg;
                stack.b = pb;
                stack.a = pa;
                stack = stack.next;
            }

            for( i = 1; i < radiusPlus1; i++ )
            {
                p = yi + (( widthMinus1 < i ? widthMinus1 : i ) << 2 );
                r_sum += ( stack.r = ( pr = pixels[p])) * ( rbs = radiusPlus1 - i );
                g_sum += ( stack.g = ( pg = pixels[p + 1])) * rbs;
                b_sum += ( stack.b = ( pb = pixels[p + 2])) * rbs;
                a_sum += ( stack.a = ( pa = pixels[p + 3])) * rbs;

                r_in_sum += pr;
                g_in_sum += pg;
                b_in_sum += pb;
                a_in_sum += pa;

                stack = stack.next;
            }


            stackIn = stackStart;
            stackOut = stackEnd;
            for ( x = 0; x < width; x++ )
            {
                pixels[yi + 3] = pa = (a_sum * mul_sum) >> shg_sum;
                if ( pa !== 0 )
                {
                    pa = 255 / pa;
                    pixels[yi] = ((r_sum * mul_sum) >> shg_sum) * pa;
                    pixels[yi + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;
                    pixels[yi + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;
                } else {
                    pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;
                }

                r_sum -= r_out_sum;
                g_sum -= g_out_sum;
                b_sum -= b_out_sum;
                a_sum -= a_out_sum;

                r_out_sum -= stackIn.r;
                g_out_sum -= stackIn.g;
                b_out_sum -= stackIn.b;
                a_out_sum -= stackIn.a;

                p = (yw + ( ( p = x + radius + 1 ) < widthMinus1 ? p : widthMinus1 ) ) << 2;

                r_in_sum += ( stackIn.r = pixels[p]);
                g_in_sum += ( stackIn.g = pixels[p + 1]);
                b_in_sum += ( stackIn.b = pixels[p + 2]);
                a_in_sum += ( stackIn.a = pixels[p + 3]);

                r_sum += r_in_sum;
                g_sum += g_in_sum;
                b_sum += b_in_sum;
                a_sum += a_in_sum;

                stackIn = stackIn.next;

                r_out_sum += ( pr = stackOut.r );
                g_out_sum += ( pg = stackOut.g );
                b_out_sum += ( pb = stackOut.b );
                a_out_sum += ( pa = stackOut.a );

                r_in_sum -= pr;
                g_in_sum -= pg;
                b_in_sum -= pb;
                a_in_sum -= pa;

                stackOut = stackOut.next;

                yi += 4;
            }
            yw += width;
        }


        for ( x = 0; x < width; x++ )
        {
            g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;

            yi = x << 2;
            r_out_sum = radiusPlus1 * ( pr = pixels[yi]);
            g_out_sum = radiusPlus1 * ( pg = pixels[yi + 1]);
            b_out_sum = radiusPlus1 * ( pb = pixels[yi + 2]);
            a_out_sum = radiusPlus1 * ( pa = pixels[yi + 3]);

            r_sum += sumFactor * pr;
            g_sum += sumFactor * pg;
            b_sum += sumFactor * pb;
            a_sum += sumFactor * pa;

            stack = stackStart;

            for( i = 0; i < radiusPlus1; i++ )
            {
                stack.r = pr;
                stack.g = pg;
                stack.b = pb;
                stack.a = pa;
                stack = stack.next;
            }

            yp = width;

            for( i = 1; i <= radius; i++ )
            {
                yi = ( yp + x ) << 2;

                r_sum += ( stack.r = ( pr = pixels[yi])) * ( rbs = radiusPlus1 - i );
                g_sum += ( stack.g = ( pg = pixels[yi + 1])) * rbs;
                b_sum += ( stack.b = ( pb = pixels[yi + 2])) * rbs;
                a_sum += ( stack.a = ( pa = pixels[yi + 3])) * rbs;

                r_in_sum += pr;
                g_in_sum += pg;
                b_in_sum += pb;
                a_in_sum += pa;

                stack = stack.next;

                if( i < heightMinus1 )
                {
                    yp += width;
                }
            }

            yi = x;
            stackIn = stackStart;
            stackOut = stackEnd;
            for ( y = 0; y < height; y++ )
            {
                p = yi << 2;
                pixels[p + 3] = pa = (a_sum * mul_sum) >> shg_sum;
                if ( pa > 0 )
                {
                    pa = 255 / pa;
                    pixels[p] = ((r_sum * mul_sum) >> shg_sum ) * pa;
                    pixels[p + 1] = ((g_sum * mul_sum) >> shg_sum ) * pa;
                    pixels[p + 2] = ((b_sum * mul_sum) >> shg_sum ) * pa;
                } else {
                    pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;
                }

                r_sum -= r_out_sum;
                g_sum -= g_out_sum;
                b_sum -= b_out_sum;
                a_sum -= a_out_sum;

                r_out_sum -= stackIn.r;
                g_out_sum -= stackIn.g;
                b_out_sum -= stackIn.b;
                a_out_sum -= stackIn.a;

                p = ( x + (( ( p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1 ) * width )) << 2;

                r_sum += ( r_in_sum += ( stackIn.r = pixels[p]));
                g_sum += ( g_in_sum += ( stackIn.g = pixels[p + 1]));
                b_sum += ( b_in_sum += ( stackIn.b = pixels[p + 2]));
                a_sum += ( a_in_sum += ( stackIn.a = pixels[p + 3]));

                stackIn = stackIn.next;

                r_out_sum += ( pr = stackOut.r );
                g_out_sum += ( pg = stackOut.g );
                b_out_sum += ( pb = stackOut.b );
                a_out_sum += ( pa = stackOut.a );

                r_in_sum -= pr;
                g_in_sum -= pg;
                b_in_sum -= pb;
                a_in_sum -= pa;

                stackOut = stackOut.next;

                yi += width;
            }
        }
    }

    /**
     * Blur Filter
     * @function
     * @name Blur
     * @memberof Konva.Filters
     * @param {Object} imageData
     * @example
     * node.cache();
     * node.filters([Konva.Filters.Blur]);
     * node.blurRadius(10);
     */
    Konva.Filters.Blur = function Blur(imageData) {
        var radius = Math.round(this.blurRadius());

        if (radius > 0) {
            filterGaussBlurRGBA(imageData, radius);
        }
    };

    Konva.Factory.addGetterSetter(Konva.Node, 'blurRadius', 0, null, Konva.Factory.afterSetFilter);

    /**
    * get/set blur radius. Use with {@link Konva.Filters.Blur} filter
    * @name blurRadius
    * @method
    * @memberof Konva.Node.prototype
    * @param {Integer} radius
    * @returns {Integer}
    */
})();

/*eslint-disable  max-depth */
(function() {
	'use strict';
	function pixelAt(idata, x, y) {
		var idx = (y * idata.width + x) * 4;
		var d = [];
		d.push(idata.data[idx++], idata.data[idx++], idata.data[idx++], idata.data[idx++]);
		return d;
	}

	function rgbDistance(p1, p2) {
		return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2) + Math.pow(p1[2] - p2[2], 2));
	}

	function rgbMean(pTab) {
		var m = [0, 0, 0];

		for (var i = 0; i < pTab.length; i++) {
			m[0] += pTab[i][0];
			m[1] += pTab[i][1];
			m[2] += pTab[i][2];
		}

		m[0] /= pTab.length;
		m[1] /= pTab.length;
		m[2] /= pTab.length;

		return m;
	}

	function backgroundMask(idata, threshold) {
		var rgbv_no = pixelAt(idata, 0, 0);
		var rgbv_ne = pixelAt(idata, idata.width - 1, 0);
		var rgbv_so = pixelAt(idata, 0, idata.height - 1);
		var rgbv_se = pixelAt(idata, idata.width - 1, idata.height - 1);


		var thres = threshold || 10;
		if (rgbDistance(rgbv_no, rgbv_ne) < thres && rgbDistance(rgbv_ne, rgbv_se) < thres && rgbDistance(rgbv_se, rgbv_so) < thres && rgbDistance(rgbv_so, rgbv_no) < thres) {

			// Mean color
			var mean = rgbMean([rgbv_ne, rgbv_no, rgbv_se, rgbv_so]);

			// Mask based on color distance
			var mask = [];
			for (var i = 0; i < idata.width * idata.height; i++) {
				var d = rgbDistance(mean, [idata.data[i * 4], idata.data[i * 4 + 1], idata.data[i * 4 + 2]]);
				mask[i] = (d < thres) ? 0 : 255;
			}

			return mask;
		}
	}

	function applyMask(idata, mask) {
		for (var i = 0; i < idata.width * idata.height; i++) {
			idata.data[4 * i + 3] = mask[i];
		}
	}

	function erodeMask(mask, sw, sh) {

		var weights = [1, 1, 1, 1, 0, 1, 1, 1, 1];
		var side = Math.round(Math.sqrt(weights.length));
		var halfSide = Math.floor(side / 2);

		var maskResult = [];
		for (var y = 0; y < sh; y++) {
			for (var x = 0; x < sw; x++) {

				var so = y * sw + x;
				var a = 0;
				for (var cy = 0; cy < side; cy++) {
					for (var cx = 0; cx < side; cx++) {
						var scy = y + cy - halfSide;
						var scx = x + cx - halfSide;

						if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {

							var srcOff = scy * sw + scx;
							var wt = weights[cy * side + cx];

							a += mask[srcOff] * wt;
						}
					}
				}

				maskResult[so] = (a === 255 * 8) ? 255 : 0;
			}
		}

		return maskResult;
	}

	function dilateMask(mask, sw, sh) {

		var weights = [1, 1, 1, 1, 1, 1, 1, 1, 1];
		var side = Math.round(Math.sqrt(weights.length));
		var halfSide = Math.floor(side / 2);

		var maskResult = [];
		for (var y = 0; y < sh; y++) {
			for (var x = 0; x < sw; x++) {

				var so = y * sw + x;
				var a = 0;
				for (var cy = 0; cy < side; cy++) {
					for (var cx = 0; cx < side; cx++) {
						var scy = y + cy - halfSide;
						var scx = x + cx - halfSide;

						if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {

							var srcOff = scy * sw + scx;
							var wt = weights[cy * side + cx];

							a += mask[srcOff] * wt;
						}
					}
				}

				maskResult[so] = (a >= 255 * 4) ? 255 : 0;
			}
		}

		return maskResult;
	}

	function smoothEdgeMask(mask, sw, sh) {

		var weights = [1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9];
		var side = Math.round(Math.sqrt(weights.length));
		var halfSide = Math.floor(side / 2);

		var maskResult = [];
		for (var y = 0; y < sh; y++) {
			for (var x = 0; x < sw; x++) {

				var so = y * sw + x;
				var a = 0;
				for (var cy = 0; cy < side; cy++) {
					for (var cx = 0; cx < side; cx++) {
						var scy = y + cy - halfSide;
						var scx = x + cx - halfSide;

						if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {

							var srcOff = scy * sw + scx;
							var wt = weights[cy * side + cx];

							a += mask[srcOff] * wt;
						}
					}
				}

				maskResult[so] = a;
			}
		}

		return maskResult;
	}

	/**
	 * Mask Filter
	 * @function
	 * @name Mask
	 * @memberof Konva.Filters
	 * @param {Object} imageData
	 * @example
     * node.cache();
     * node.filters([Konva.Filters.Mask]);
     * node.threshold(200);
	 */
	Konva.Filters.Mask = function(imageData) {
		// Detect pixels close to the background color
		var threshold = this.threshold(),
        mask = backgroundMask(imageData, threshold);
		if (mask) {
			// Erode
			mask = erodeMask(mask, imageData.width, imageData.height);

			// Dilate
			mask = dilateMask(mask, imageData.width, imageData.height);

			// Gradient
			mask = smoothEdgeMask(mask, imageData.width, imageData.height);

			// Apply mask
			applyMask(imageData, mask);

			// todo : Update hit region function according to mask
		}

		return imageData;
	};

	Konva.Factory.addGetterSetter(Konva.Node, 'threshold', 0, null, Konva.Factory.afterSetFilter);
})();

(function () {
    'use strict';
    /**
     * RGB Filter
     * @function
     * @name RGB
     * @memberof Konva.Filters
     * @param {Object} imageData
     * @author ippo615
     * @example
     * node.cache();
     * node.filters([Konva.Filters.RGB]);
     * node.blue(120);
     * node.green(200);
     */
    Konva.Filters.RGB = function (imageData) {
        var data = imageData.data,
            nPixels = data.length,
            red = this.red(),
            green = this.green(),
            blue = this.blue(),
            i, brightness;

        for (i = 0; i < nPixels; i += 4) {
            brightness = (0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2]) / 255;
            data[i] = brightness * red; // r
            data[i + 1] = brightness * green; // g
            data[i + 2] = brightness * blue; // b
            data[i + 3] = data[i + 3]; // alpha
        }
    };

    Konva.Factory.addGetterSetter(Konva.Node, 'red', 0, function(val) {
        this._filterUpToDate = false;
        if (val > 255) {
            return 255;
        }
        else if (val < 0) {
            return 0;
        }
        else {
            return Math.round(val);
        }
    });
    /**
    * get/set filter red value. Use with {@link Konva.Filters.RGB} filter.
    * @name red
    * @method
    * @memberof Konva.Node.prototype
    * @param {Integer} red value between 0 and 255
    * @returns {Integer}
    */

    Konva.Factory.addGetterSetter(Konva.Node, 'green', 0, function(val) {
        this._filterUpToDate = false;
        if (val > 255) {
            return 255;
        }
        else if (val < 0) {
            return 0;
        }
        else {
            return Math.round(val);
        }
    });
    /**
    * get/set filter green value. Use with {@link Konva.Filters.RGB} filter.
    * @name green
    * @method
    * @memberof Konva.Node.prototype
    * @param {Integer} green value between 0 and 255
    * @returns {Integer}
    */

    Konva.Factory.addGetterSetter(Konva.Node, 'blue', 0, Konva.Validators.RGBComponent, Konva.Factory.afterSetFilter);
    /**
    * get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.
    * @name blue
    * @method
    * @memberof Konva.Node.prototype
    * @param {Integer} blue value between 0 and 255
    * @returns {Integer}
    */
})();

(function () {
    'use strict';
    /**
     * RGBA Filter
     * @function
     * @name RGBA
     * @memberof Konva.Filters
     * @param {Object} imageData
     * @author codefo
     * @example
     * node.cache();
     * node.filters([Konva.Filters.RGBA]);
     * node.blue(120);
     * node.green(200);
     * node.alpha(0.3);
     */
    Konva.Filters.RGBA = function (imageData) {
        var data = imageData.data,
            nPixels = data.length,
            red = this.red(),
            green = this.green(),
            blue = this.blue(),
            alpha = this.alpha(),
            i, ia;

        for (i = 0; i < nPixels; i += 4) {
            ia = 1 - alpha;

            data[i] = red * alpha + data[i] * ia; // r
            data[i + 1] = green * alpha + data[i + 1] * ia; // g
            data[i + 2] = blue * alpha + data[i + 2] * ia; // b
        }
    };

    Konva.Factory.addGetterSetter(Konva.Node, 'red', 0, function(val) {
        this._filterUpToDate = false;
        if (val > 255) {
            return 255;
        }
        else if (val < 0) {
            return 0;
        }
        else {
            return Math.round(val);
        }
    });
    /**
    * get/set filter red value. Use with {@link Konva.Filters.RGBA} filter.
    * @name red
    * @method
    * @memberof Konva.Node.prototype
    * @param {Integer} red value between 0 and 255
    * @returns {Integer}
    */

    Konva.Factory.addGetterSetter(Konva.Node, 'green', 0, function(val) {
        this._filterUpToDate = false;
        if (val > 255) {
            return 255;
        }
        else if (val < 0) {
            return 0;
        }
        else {
            return Math.round(val);
        }
    });
    /**
    * get/set filter green value. Use with {@link Konva.Filters.RGBA} filter.
    * @name green
    * @method
    * @memberof Konva.Node.prototype
    * @param {Integer} green value between 0 and 255
    * @returns {Integer}
    */

    Konva.Factory.addGetterSetter(Konva.Node, 'blue', 0, Konva.Validators.RGBComponent, Konva.Factory.afterSetFilter);
    /**
    * get/set filter blue value. Use with {@link Konva.Filters.RGBA} filter.
    * @name blue
    * @method
    * @memberof Konva.Node.prototype
    * @param {Integer} blue value between 0 and 255
    * @returns {Integer}
    */

    Konva.Factory.addGetterSetter(Konva.Node, 'alpha', 1, function(val) {
        this._filterUpToDate = false;
        if (val > 1) {
            return 1;
        }
        else if (val < 0) {
            return 0;
        }
        else {
            return val;
        }
    });
    /**
     * get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.
     * @name alpha
     * @method
     * @memberof Konva.Node.prototype
     * @param {Float} alpha value between 0 and 1
     * @returns {Float}
     */
})();

(function () {
    'use strict';
    /**
    * HSV Filter. Adjusts the hue, saturation and value
    * @function
    * @name HSV
    * @memberof Konva.Filters
    * @param {Object} imageData
    * @author ippo615
    * @example
    * image.filters([Konva.Filters.HSV]);
    * image.value(200);
    */

    Konva.Filters.HSV = function (imageData) {
        var data = imageData.data,
            nPixels = data.length,
            v = Math.pow(2, this.value()),
            s = Math.pow(2, this.saturation()),
            h = Math.abs((this.hue()) + 360) % 360,
            i;

        // Basis for the technique used:
        // http://beesbuzz.biz/code/hsv_color_transforms.php
        // V is the value multiplier (1 for none, 2 for double, 0.5 for half)
        // S is the saturation multiplier (1 for none, 2 for double, 0.5 for half)
        // H is the hue shift in degrees (0 to 360)
        // vsu = V*S*cos(H*PI/180);
        // vsw = V*S*sin(H*PI/180);
        //[ .299V+.701vsu+.168vsw    .587V-.587vsu+.330vsw    .114V-.114vsu-.497vsw ] [R]
        //[ .299V-.299vsu-.328vsw    .587V+.413vsu+.035vsw    .114V-.114vsu+.292vsw ]*[G]
        //[ .299V-.300vsu+1.25vsw    .587V-.588vsu-1.05vsw    .114V+.886vsu-.203vsw ] [B]

        // Precompute the values in the matrix:
        var vsu = v * s * Math.cos(h * Math.PI / 180),
            vsw = v * s * Math.sin(h * Math.PI / 180);
        // (result spot)(source spot)
        var rr = 0.299 * v + 0.701 * vsu + 0.167 * vsw,
            rg = 0.587 * v - 0.587 * vsu + 0.330 * vsw,
            rb = 0.114 * v - 0.114 * vsu - 0.497 * vsw;
        var gr = 0.299 * v - 0.299 * vsu - 0.328 * vsw,
            gg = 0.587 * v + 0.413 * vsu + 0.035 * vsw,
            gb = 0.114 * v - 0.114 * vsu + 0.293 * vsw;
        var br = 0.299 * v - 0.300 * vsu + 1.250 * vsw,
            bg = 0.587 * v - 0.586 * vsu - 1.050 * vsw,
            bb = 0.114 * v + 0.886 * vsu - 0.200 * vsw;

        var r, g, b, a;

        for (i = 0; i < nPixels; i += 4) {
            r = data[i + 0];
            g = data[i + 1];
            b = data[i + 2];
            a = data[i + 3];

            data[i + 0] = rr * r + rg * g + rb * b;
            data[i + 1] = gr * r + gg * g + gb * b;
            data[i + 2] = br * r + bg * g + bb * b;
            data[i + 3] = a; // alpha
        }

    };

    Konva.Factory.addGetterSetter(Konva.Node, 'hue', 0, null, Konva.Factory.afterSetFilter);
    /**
    * get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.
    * @name hue
    * @method
    * @memberof Konva.Node.prototype
    * @param {Number} hue value between 0 and 359
    * @returns {Number}
    */

    Konva.Factory.addGetterSetter(Konva.Node, 'saturation', 0, null, Konva.Factory.afterSetFilter);
    /**
    * get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.
    * @name saturation
    * @method
    * @memberof Konva.Node.prototype
    * @param {Number} saturation 0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..
    * @returns {Number}
    */

    Konva.Factory.addGetterSetter(Konva.Node, 'value', 0, null, Konva.Factory.afterSetFilter);
    /**
    * get/set hsv value. Use with {@link Konva.Filters.HSV} filter.
    * @name value
    * @method
    * @memberof Konva.Node.prototype
    * @param {Number} value 0 is no change, -1.0 halves the value, 1.0 doubles, etc..
    * @returns {Number}
    */

})();

(function () {
    'use strict';

    Konva.Factory.addGetterSetter(Konva.Node, 'hue', 0, null, Konva.Factory.afterSetFilter);
    /**
    * get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.
    * @name hue
    * @method
    * @memberof Konva.Node.prototype
    * @param {Number} hue value between 0 and 359
    * @returns {Number}
    */

    Konva.Factory.addGetterSetter(Konva.Node, 'saturation', 0, null, Konva.Factory.afterSetFilter);
    /**
    * get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.
    * @name saturation
    * @method
    * @memberof Konva.Node.prototype
    * @param {Number} saturation 0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..
    * @returns {Number}
    */

    Konva.Factory.addGetterSetter(Konva.Node, 'luminance', 0, null, Konva.Factory.afterSetFilter);
    /**
    * get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.
    * @name value
    * @method
    * @memberof Konva.Node.prototype
    * @param {Number} value 0 is no change, -1.0 halves the value, 1.0 doubles, etc..
    * @returns {Number}
    */

    /**
    * HSL Filter. Adjusts the hue, saturation and luminance (or lightness)
    * @function
    * @memberof Konva.Filters
    * @param {Object} imageData
    * @author ippo615
    * @example
    * image.filters([Konva.Filters.HSL]);
    * image.luminance(200);
    */

    Konva.Filters.HSL = function (imageData) {
        var data = imageData.data,
            nPixels = data.length,
            v = 1,
            s = Math.pow(2, this.saturation()),
            h = Math.abs((this.hue()) + 360) % 360,
            l = this.luminance() * 127,
            i;

        // Basis for the technique used:
        // http://beesbuzz.biz/code/hsv_color_transforms.php
        // V is the value multiplier (1 for none, 2 for double, 0.5 for half)
        // S is the saturation multiplier (1 for none, 2 for double, 0.5 for half)
        // H is the hue shift in degrees (0 to 360)
        // vsu = V*S*cos(H*PI/180);
        // vsw = V*S*sin(H*PI/180);
        //[ .299V+.701vsu+.168vsw    .587V-.587vsu+.330vsw    .114V-.114vsu-.497vsw ] [R]
        //[ .299V-.299vsu-.328vsw    .587V+.413vsu+.035vsw    .114V-.114vsu+.292vsw ]*[G]
        //[ .299V-.300vsu+1.25vsw    .587V-.588vsu-1.05vsw    .114V+.886vsu-.203vsw ] [B]

        // Precompute the values in the matrix:
        var vsu = v * s * Math.cos(h * Math.PI / 180),
            vsw = v * s * Math.sin(h * Math.PI / 180);
        // (result spot)(source spot)
        var rr = 0.299 * v + 0.701 * vsu + 0.167 * vsw,
            rg = 0.587 * v - 0.587 * vsu + 0.330 * vsw,
            rb = 0.114 * v - 0.114 * vsu - 0.497 * vsw;
        var gr = 0.299 * v - 0.299 * vsu - 0.328 * vsw,
            gg = 0.587 * v + 0.413 * vsu + 0.035 * vsw,
            gb = 0.114 * v - 0.114 * vsu + 0.293 * vsw;
        var br = 0.299 * v - 0.300 * vsu + 1.250 * vsw,
            bg = 0.587 * v - 0.586 * vsu - 1.050 * vsw,
            bb = 0.114 * v + 0.886 * vsu - 0.200 * vsw;

        var r, g, b, a;

        for (i = 0; i < nPixels; i += 4) {
            r = data[i + 0];
            g = data[i + 1];
            b = data[i + 2];
            a = data[i + 3];

            data[i + 0] = rr * r + rg * g + rb * b + l;
            data[i + 1] = gr * r + gg * g + gb * b + l;
            data[i + 2] = br * r + bg * g + bb * b + l;
            data[i + 3] = a; // alpha
        }
    };
})();

(function () {
    'use strict';
    /**
     * Emboss Filter.
     * Pixastic Lib - Emboss filter - v0.1.0
     * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
     * License: [http://www.pixastic.com/lib/license.txt]
     * @function
     * @memberof Konva.Filters
     * @param {Object} imageData
     * @example
     * node.cache();
     * node.filters([Konva.Filters.Emboss]);
     * node.embossStrength(0.8);
     * node.embossWhiteLevel(0.3);
     * node.embossDirection('right');
     * node.embossBlend(true);
     */
    Konva.Filters.Emboss = function (imageData) {

        // pixastic strength is between 0 and 10.  I want it between 0 and 1
        // pixastic greyLevel is between 0 and 255.  I want it between 0 and 1.  Also,
        // a max value of greyLevel yields a white emboss, and the min value yields a black
        // emboss.  Therefore, I changed greyLevel to whiteLevel
        var strength = this.embossStrength() * 10,
            greyLevel = this.embossWhiteLevel() * 255,
            direction = this.embossDirection(),
            blend = this.embossBlend(),
            dirY = 0,
            dirX = 0,
            data = imageData.data,
            w = imageData.width,
            h = imageData.height,
            w4 = w * 4,
            y = h;

        switch (direction) {
            case 'top-left':
                dirY = -1;
                dirX = -1;
                break;
            case 'top':
                dirY = -1;
                dirX = 0;
                break;
            case 'top-right':
                dirY = -1;
                dirX = 1;
                break;
            case 'right':
                dirY = 0;
                dirX = 1;
                break;
            case 'bottom-right':
                dirY = 1;
                dirX = 1;
                break;
            case 'bottom':
                dirY = 1;
                dirX = 0;
                break;
            case 'bottom-left':
                dirY = 1;
                dirX = -1;
                break;
            case 'left':
                dirY = 0;
                dirX = -1;
                break;
        }

        do {
            var offsetY = (y - 1) * w4;

            var otherY = dirY;
            if (y + otherY < 1){
                otherY = 0;
            }
            if (y + otherY > h) {
                otherY = 0;
            }

            var offsetYOther = (y - 1 + otherY) * w * 4;

            var x = w;
            do {
                var offset = offsetY + (x - 1) * 4;

                var otherX = dirX;
                if (x + otherX < 1){
                    otherX = 0;
                }
                if (x + otherX > w) {
                    otherX = 0;
                }

                var offsetOther = offsetYOther + (x - 1 + otherX) * 4;

                var dR = data[offset] - data[offsetOther];
                var dG = data[offset + 1] - data[offsetOther + 1];
                var dB = data[offset + 2] - data[offsetOther + 2];

                var dif = dR;
                var absDif = dif > 0 ? dif : -dif;

                var absG = dG > 0 ? dG : -dG;
                var absB = dB > 0 ? dB : -dB;

                if (absG > absDif) {
                    dif = dG;
                }
                if (absB > absDif) {
                    dif = dB;
                }

                dif *= strength;

                if (blend) {
                    var r = data[offset] + dif;
                    var g = data[offset + 1] + dif;
                    var b = data[offset + 2] + dif;

                    data[offset] = (r > 255) ? 255 : (r < 0 ? 0 : r);
                    data[offset + 1] = (g > 255) ? 255 : (g < 0 ? 0 : g);
                    data[offset + 2] = (b > 255) ? 255 : (b < 0 ? 0 : b);
                } else {
                    var grey = greyLevel - dif;
                    if (grey < 0) {
                        grey = 0;
                    } else if (grey > 255) {
                        grey = 255;
                    }

                    data[offset] = data[offset + 1] = data[offset + 2] = grey;
                }

            } while (--x);
        } while (--y);
    };

    Konva.Factory.addGetterSetter(Konva.Node, 'embossStrength', 0.5, null, Konva.Factory.afterSetFilter);
    /**
    * get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.
    * @name embossStrength
    * @method
    * @memberof Konva.Node.prototype
    * @param {Number} level between 0 and 1.  Default is 0.5
    * @returns {Number}
    */

    Konva.Factory.addGetterSetter(Konva.Node, 'embossWhiteLevel', 0.5, null, Konva.Factory.afterSetFilter);
    /**
    * get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.
    * @name embossWhiteLevel
    * @method
    * @memberof Konva.Node.prototype
    * @param {Number} embossWhiteLevel between 0 and 1.  Default is 0.5
    * @returns {Number}
    */

    Konva.Factory.addGetterSetter(Konva.Node, 'embossDirection', 'top-left', null, Konva.Factory.afterSetFilter);
    /**
    * get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.
    * @name embossDirection
    * @method
    * @memberof Konva.Node.prototype
    * @param {String} embossDirection can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left
    *   The default is top-left
    * @returns {String}
    */

    Konva.Factory.addGetterSetter(Konva.Node, 'embossBlend', false, null, Konva.Factory.afterSetFilter);
    /**
    * get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.
    * @name embossBlend
    * @method
    * @memberof Konva.Node.prototype
    * @param {Boolean} embossBlend
    * @returns {Boolean}
    */
})();

(function () {
    'use strict';
    function remap(fromValue, fromMin, fromMax, toMin, toMax) {
        // Compute the range of the data
        var fromRange = fromMax - fromMin,
          toRange = toMax - toMin,
          toValue;

        // If either range is 0, then the value can only be mapped to 1 value
        if (fromRange === 0) {
            return toMin + toRange / 2;
        }
        if (toRange === 0) {
            return toMin;
        }

        // (1) untranslate, (2) unscale, (3) rescale, (4) retranslate
        toValue = (fromValue - fromMin) / fromRange;
        toValue = (toRange * toValue) + toMin;

        return toValue;
    }


    /**
    * Enhance Filter. Adjusts the colors so that they span the widest
    *  possible range (ie 0-255). Performs w*h pixel reads and w*h pixel
    *  writes.
    * @function
    * @name Enhance
    * @memberof Konva.Filters
    * @param {Object} imageData
    * @author ippo615
    * @example
    * node.cache();
    * node.filters([Konva.Filters.Enhance]);
    * node.enhance(0.4);
    */
    Konva.Filters.Enhance = function (imageData) {
        var data = imageData.data,
            nSubPixels = data.length,
            rMin = data[0], rMax = rMin, r,
            gMin = data[1], gMax = gMin, g,
            bMin = data[2], bMax = bMin, b,
            i;

        // If we are not enhancing anything - don't do any computation
        var enhanceAmount = this.enhance();
        if( enhanceAmount === 0 ){ return; }

        // 1st Pass - find the min and max for each channel:
        for (i = 0; i < nSubPixels; i += 4) {
            r = data[i + 0];
            if (r < rMin) { rMin = r; }
            else if (r > rMax) { rMax = r; }
            g = data[i + 1];
            if (g < gMin) { gMin = g; } else
            if (g > gMax) { gMax = g; }
            b = data[i + 2];
            if (b < bMin) { bMin = b; } else
            if (b > bMax) { bMax = b; }
            //a = data[i + 3];
            //if (a < aMin) { aMin = a; } else
            //if (a > aMax) { aMax = a; }
        }

        // If there is only 1 level - don't remap
        if( rMax === rMin ){ rMax = 255; rMin = 0; }
        if( gMax === gMin ){ gMax = 255; gMin = 0; }
        if( bMax === bMin ){ bMax = 255; bMin = 0; }

        var rMid, rGoalMax, rGoalMin,
            gMid, gGoalMax, gGoalMin,
            bMid, bGoalMax, bGoalMin;

        // If the enhancement is positive - stretch the histogram
        if ( enhanceAmount > 0 ){
            rGoalMax = rMax + enhanceAmount * (255 - rMax);
            rGoalMin = rMin - enhanceAmount * (rMin - 0);
            gGoalMax = gMax + enhanceAmount * (255 - gMax);
            gGoalMin = gMin - enhanceAmount * (gMin - 0);
            bGoalMax = bMax + enhanceAmount * (255 - bMax);
            bGoalMin = bMin - enhanceAmount * (bMin - 0);
        // If the enhancement is negative -   compress the histogram
        } else {
            rMid = (rMax + rMin) * 0.5;
            rGoalMax = rMax + enhanceAmount * (rMax - rMid);
            rGoalMin = rMin + enhanceAmount * (rMin - rMid);
            gMid = (gMax + gMin) * 0.5;
            gGoalMax = gMax + enhanceAmount * (gMax - gMid);
            gGoalMin = gMin + enhanceAmount * (gMin - gMid);
            bMid = (bMax + bMin) * 0.5;
            bGoalMax = bMax + enhanceAmount * (bMax - bMid);
            bGoalMin = bMin + enhanceAmount * (bMin - bMid);
        }

        // Pass 2 - remap everything, except the alpha
        for (i = 0; i < nSubPixels; i += 4) {
            data[i + 0] = remap(data[i + 0], rMin, rMax, rGoalMin, rGoalMax);
            data[i + 1] = remap(data[i + 1], gMin, gMax, gGoalMin, gGoalMax);
            data[i + 2] = remap(data[i + 2], bMin, bMax, bGoalMin, bGoalMax);
            //data[i + 3] = remap(data[i + 3], aMin, aMax, aGoalMin, aGoalMax);
        }
    };

    Konva.Factory.addGetterSetter(Konva.Node, 'enhance', 0, null, Konva.Factory.afterSetFilter);

    /**
    * get/set enhance. Use with {@link Konva.Filters.Enhance} filter.
    * @name enhance
    * @method
    * @memberof Konva.Node.prototype
    * @param {Float} amount
    * @returns {Float}
    */
})();

(function () {
    'use strict';
    /**
     * Posterize Filter. Adjusts the channels so that there are no more
     *  than n different values for that channel. This is also applied
     *  to the alpha channel.
     * @function
     * @name Posterize
     * @author ippo615
     * @memberof Konva.Filters
     * @param {Object} imageData
     * @example
     * node.cache();
     * node.filters([Konva.Filters.Posterize]);
     * node.levels(0.8);
     */

    Konva.Filters.Posterize = function (imageData) {
        // level must be between 1 and 255
        var levels = Math.round(this.levels() * 254) + 1,
            data = imageData.data,
            len = data.length,
            scale = (255 / levels),
            i;

        for (i = 0; i < len; i += 1) {
            data[i] = Math.floor(data[i] / scale) * scale;
        }
    };

    Konva.Factory.addGetterSetter(Konva.Node, 'levels', 0.5, null, Konva.Factory.afterSetFilter);

    /**
    * get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.
    * @name levels
    * @method
    * @memberof Konva.Node.prototype
    * @param {Number} level between 0 and 1
    * @returns {Number}
    */
})();

(function () {
    'use strict';

    /**
     * Noise Filter. Randomly adds or substracts to the color channels
     * @function
     * @name Noise
     * @memberof Konva.Filters
     * @param {Object} imageData
     * @author ippo615
     * @example
     * node.cache();
     * node.filters([Konva.Filters.Noise]);
     * node.noise(0.8);
     */
    Konva.Filters.Noise = function (imageData) {
        var amount = this.noise() * 255,
            data = imageData.data,
            nPixels = data.length,
            half = amount / 2,
            i;

        for (i = 0; i < nPixels; i += 4) {
            data[i + 0] += half - 2 * half * Math.random();
            data[i + 1] += half - 2 * half * Math.random();
            data[i + 2] += half - 2 * half * Math.random();
        }
    };

    Konva.Factory.addGetterSetter(Konva.Node, 'noise', 0.2, null, Konva.Factory.afterSetFilter);

    /**
    * get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.
    * @name noise
    * @method
    * @memberof Konva.Node.prototype
    * @param {Number} noise
    * @returns {Number}
    */
})();

/*eslint-disable max-depth */
(function () {
    'use strict';
    /**
     * Pixelate Filter. Averages groups of pixels and redraws
     *  them as larger pixels
     * @function
     * @name Pixelate
     * @memberof Konva.Filters
     * @param {Object} imageData
     * @author ippo615
     * @example
     * node.cache();
     * node.filters([Konva.Filters.Pixelate]);
     * node.pixelSize(10);
     */

    Konva.Filters.Pixelate = function (imageData) {

        var pixelSize = Math.ceil(this.pixelSize()),
            width = imageData.width,
            height = imageData.height,
            x, y, i,
            //pixelsPerBin = pixelSize * pixelSize,
            red, green, blue, alpha,
            nBinsX = Math.ceil(width / pixelSize),
            nBinsY = Math.ceil(height / pixelSize),
            xBinStart, xBinEnd, yBinStart, yBinEnd,
            xBin, yBin, pixelsInBin;
        imageData = imageData.data;

        for (xBin = 0; xBin < nBinsX; xBin += 1) {
            for (yBin = 0; yBin < nBinsY; yBin += 1) {

                // Initialize the color accumlators to 0
                red = 0;
                green = 0;
                blue = 0;
                alpha = 0;

                // Determine which pixels are included in this bin
                xBinStart = xBin * pixelSize;
                xBinEnd = xBinStart + pixelSize;
                yBinStart = yBin * pixelSize;
                yBinEnd = yBinStart + pixelSize;

                // Add all of the pixels to this bin!
                pixelsInBin = 0;
                for (x = xBinStart; x < xBinEnd; x += 1) {
                    if( x >= width ){ continue; }
                    for (y = yBinStart; y < yBinEnd; y += 1) {
                        if( y >= height ){ continue; }
                        i = (width * y + x) * 4;
                        red += imageData[i + 0];
                        green += imageData[i + 1];
                        blue += imageData[i + 2];
                        alpha += imageData[i + 3];
                        pixelsInBin += 1;
                    }
                }

                // Make sure the channels are between 0-255
                red = red / pixelsInBin;
                green = green / pixelsInBin;
                blue = blue / pixelsInBin;

                // Draw this bin
                for (x = xBinStart; x < xBinEnd; x += 1) {
                    if( x >= width ){ continue; }
                    for (y = yBinStart; y < yBinEnd; y += 1) {
                        if( y >= height ){ continue; }
                        i = (width * y + x) * 4;
                        imageData[i + 0] = red;
                        imageData[i + 1] = green;
                        imageData[i + 2] = blue;
                        imageData[i + 3] = alpha;
                    }
                }
            }
        }

    };

    Konva.Factory.addGetterSetter(Konva.Node, 'pixelSize', 8, null, Konva.Factory.afterSetFilter);

    /**
    * get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.
    * @name pixelSize
    * @method
    * @memberof Konva.Node.prototype
    * @param {Integer} pixelSize
    * @returns {Integer}
    */
})();

(function () {
    'use strict';
    /**
     * Threshold Filter. Pushes any value above the mid point to
     *  the max and any value below the mid point to the min.
     *  This affects the alpha channel.
     * @function
     * @name Threshold
     * @memberof Konva.Filters
     * @param {Object} imageData
     * @author ippo615
     * @example
     * node.cache();
     * node.filters([Konva.Filters.Threshold]);
     * node.threshold(0.1);
     */

    Konva.Filters.Threshold = function (imageData) {
        var level = this.threshold() * 255,
            data = imageData.data,
            len = data.length,
            i;

        for (i = 0; i < len; i += 1) {
            data[i] = data[i] < level ? 0 : 255;
        }
    };

    Konva.Factory.addGetterSetter(Konva.Node, 'threshold', 0.5, null, Konva.Factory.afterSetFilter);

    /**
    * get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.
    * @name threshold
    * @method
    * @memberof Konva.Node.prototype
    * @param {Number} threshold
    * @returns {Number}
    */
})();

(function() {
    'use strict';
    /**
     * Sepia Filter
     * Based on: Pixastic Lib - Sepia filter - v0.1.0
     * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
     * @function
     * @name Sepia
     * @memberof Konva.Filters
     * @param {Object} imageData
     * @author Jacob Seidelin <jseidelin@nihilogic.dk>
     * @license MPL v1.1 [http://www.pixastic.com/lib/license.txt]
     * @example
     * node.cache();
     * node.filters([Konva.Filters.Sepia]);
     */
    Konva.Filters.Sepia = function (imageData) {
        var data = imageData.data,
            w = imageData.width,
            y = imageData.height,
            w4 = w * 4,
            offsetY, x, offset, or, og, ob, r, g, b;

        do {
            offsetY = (y - 1) * w4;
            x = w;
            do {
                offset = offsetY + (x - 1) * 4;

                or = data[offset];
                og = data[offset + 1];
                ob = data[offset + 2];

                r = or * 0.393 + og * 0.769 + ob * 0.189;
                g = or * 0.349 + og * 0.686 + ob * 0.168;
                b = or * 0.272 + og * 0.534 + ob * 0.131;

                data[offset] = r > 255 ? 255 : r;
                data[offset + 1] = g > 255 ? 255 : g;
                data[offset + 2] = b > 255 ? 255 : b;
                data[offset + 3] = data[offset + 3];
            } while (--x);
        } while (--y);
    };
})();

(function () {
    'use strict';
    /**
     * Solarize Filter
     * Pixastic Lib - Solarize filter - v0.1.0
     * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
     * License: [http://www.pixastic.com/lib/license.txt]
     * @function
     * @name Solarize
     * @memberof Konva.Filters
     * @param {Object} imageData
     * @example
     * node.cache();
     * node.filters([Konva.Filters.Solarize]);
     */
    Konva.Filters.Solarize = function (imageData) {
        var data = imageData.data,
            w = imageData.width,
            h = imageData.height,
            w4 = w * 4,
            y = h;

        do {
            var offsetY = (y - 1) * w4;
            var x = w;
            do {
                var offset = offsetY + (x - 1) * 4;
                var r = data[offset];
                var g = data[offset + 1];
                var b = data[offset + 2];

                if (r > 127) {
                    r = 255 - r;
                }
                if (g > 127) {
                    g = 255 - g;
                }
                if (b > 127) {
                    b = 255 - b;
                }

                data[offset] = r;
                data[offset + 1] = g;
                data[offset + 2] = b;
            } while (--x);
        } while (--y);
    };
})();



(function () {
    'use strict';

  /*
   * ToPolar Filter. Converts image data to polar coordinates. Performs
   *  w*h*4 pixel reads and w*h pixel writes. The r axis is placed along
   *  what would be the y axis and the theta axis along the x axis.
   * @function
   * @author ippo615
   * @memberof Konva.Filters
   * @param {ImageData} src, the source image data (what will be transformed)
   * @param {ImageData} dst, the destination image data (where it will be saved)
   * @param {Object} opt
   * @param {Number} [opt.polarCenterX] horizontal location for the center of the circle,
   *  default is in the middle
   * @param {Number} [opt.polarCenterY] vertical location for the center of the circle,
   *  default is in the middle
   */

    var ToPolar = function(src, dst, opt){

        var srcPixels = src.data,
            dstPixels = dst.data,
            xSize = src.width,
            ySize = src.height,
            xMid = opt.polarCenterX || xSize / 2,
            yMid = opt.polarCenterY || ySize / 2,
            i, x, y, r = 0, g = 0, b = 0, a = 0;

        // Find the largest radius
        var rad, rMax = Math.sqrt( xMid * xMid + yMid * yMid );
        x = xSize - xMid;
        y = ySize - yMid;
        rad = Math.sqrt( x * x + y * y );
        rMax = (rad > rMax) ? rad : rMax;

        // We'll be uisng y as the radius, and x as the angle (theta=t)
        var rSize = ySize,
            tSize = xSize,
            radius, theta;

        // We want to cover all angles (0-360) and we need to convert to
        // radians (*PI/180)
        var conversion = 360 / tSize * Math.PI / 180, sin, cos;

        // var x1, x2, x1i, x2i, y1, y2, y1i, y2i, scale;

        for( theta = 0; theta < tSize; theta += 1 ){
            sin = Math.sin(theta * conversion);
            cos = Math.cos(theta * conversion);
            for( radius = 0; radius < rSize; radius += 1 ){
                x = Math.floor(xMid + rMax * radius / rSize * cos);
                y = Math.floor(yMid + rMax * radius / rSize * sin);
                i = (y * xSize + x) * 4;
                r = srcPixels[i + 0];
                g = srcPixels[i + 1];
                b = srcPixels[i + 2];
                a = srcPixels[i + 3];

                // Store it
                //i = (theta * xSize  +  radius) * 4;
                i = (theta + radius * xSize) * 4;
                dstPixels[i + 0] = r;
                dstPixels[i + 1] = g;
                dstPixels[i + 2] = b;
                dstPixels[i + 3] = a;

            }
        }
    };

    /*
     * FromPolar Filter. Converts image data from polar coordinates back to rectangular.
     *  Performs w*h*4 pixel reads and w*h pixel writes.
     * @function
     * @author ippo615
     * @memberof Konva.Filters
     * @param {ImageData} src, the source image data (what will be transformed)
     * @param {ImageData} dst, the destination image data (where it will be saved)
     * @param {Object} opt
     * @param {Number} [opt.polarCenterX] horizontal location for the center of the circle,
     *  default is in the middle
     * @param {Number} [opt.polarCenterY] vertical location for the center of the circle,
     *  default is in the middle
     * @param {Number} [opt.polarRotation] amount to rotate the image counterclockwis,
     *  0 is no rotation, 360 degrees is a full rotation
     */

    var FromPolar = function(src, dst, opt){

        var srcPixels = src.data,
            dstPixels = dst.data,
            xSize = src.width,
            ySize = src.height,
            xMid = opt.polarCenterX || xSize / 2,
            yMid = opt.polarCenterY || ySize / 2,
            i, x, y, dx, dy, r = 0, g = 0, b = 0, a = 0;


        // Find the largest radius
        var rad, rMax = Math.sqrt( xMid * xMid + yMid * yMid );
        x = xSize - xMid;
        y = ySize - yMid;
        rad = Math.sqrt( x * x + y * y );
        rMax = (rad > rMax) ? rad : rMax;

        // We'll be uisng x as the radius, and y as the angle (theta=t)
        var rSize = ySize,
        tSize = xSize,
        radius, theta,
        phaseShift = opt.polarRotation || 0;

        // We need to convert to degrees and we need to make sure
        // it's between (0-360)
        // var conversion = tSize/360*180/Math.PI;
        //var conversion = tSize/360*180/Math.PI;

        var x1, y1;

        for( x = 0; x < xSize; x += 1 ){
            for( y = 0; y < ySize; y += 1 ){
                dx = x - xMid;
                dy = y - yMid;
                radius = Math.sqrt(dx * dx + dy * dy) * rSize / rMax;
                theta = (Math.atan2(dy, dx) * 180 / Math.PI + 360 + phaseShift) % 360;
                theta = theta * tSize / 360;
                x1 = Math.floor(theta);
                y1 = Math.floor(radius);
                i = (y1 * xSize + x1) * 4;
                r = srcPixels[i + 0];
                g = srcPixels[i + 1];
                b = srcPixels[i + 2];
                a = srcPixels[i + 3];

                // Store it
                i = (y * xSize + x) * 4;
                dstPixels[i + 0] = r;
                dstPixels[i + 1] = g;
                dstPixels[i + 2] = b;
                dstPixels[i + 3] = a;
            }
        }

    };

    //Konva.Filters.ToPolar = Konva.Util._FilterWrapDoubleBuffer(ToPolar);
    //Konva.Filters.FromPolar = Konva.Util._FilterWrapDoubleBuffer(FromPolar);

    // create a temporary canvas for working - shared between multiple calls
    var tempCanvas = Konva.Util.createCanvasElement();

    /*
     * Kaleidoscope Filter.
     * @function
     * @name Kaleidoscope
     * @author ippo615
     * @memberof Konva.Filters
     * @example
     * node.cache();
     * node.filters([Konva.Filters.Kaleidoscope]);
     * node.kaleidoscopePower(3);
     * node.kaleidoscopeAngle(45);
     */
    Konva.Filters.Kaleidoscope = function(imageData){
        var xSize = imageData.width,
            ySize = imageData.height;

        var x, y, xoff, i, r, g, b, a, srcPos, dstPos;
        var power = Math.round( this.kaleidoscopePower() );
        var angle = Math.round( this.kaleidoscopeAngle() );
        var offset = Math.floor(xSize * (angle % 360) / 360);

        if( power < 1 ){return; }

        // Work with our shared buffer canvas
        tempCanvas.width = xSize;
        tempCanvas.height = ySize;
        var scratchData = tempCanvas.getContext('2d').getImageData(0, 0, xSize, ySize);

        // Convert thhe original to polar coordinates
        ToPolar( imageData, scratchData, {
            polarCenterX: xSize / 2,
            polarCenterY: ySize / 2
        });

        // Determine how big each section will be, if it's too small
        // make it bigger
        var minSectionSize = xSize / Math.pow(2, power);
        while( minSectionSize <= 8){
            minSectionSize = minSectionSize * 2;
            power -= 1;
        }
        minSectionSize = Math.ceil(minSectionSize);
        var sectionSize = minSectionSize;

        // Copy the offset region to 0
        // Depending on the size of filter and location of the offset we may need
        // to copy the section backwards to prevent it from rewriting itself
        var xStart = 0,
          xEnd = sectionSize,
          xDelta = 1;
        if( offset + minSectionSize > xSize ){
            xStart = sectionSize;
            xEnd = 0;
            xDelta = -1;
        }
        for( y = 0; y < ySize; y += 1 ){
            for( x = xStart; x !== xEnd; x += xDelta ){
                xoff = Math.round(x + offset) % xSize;
                srcPos = (xSize * y + xoff) * 4;
                r = scratchData.data[srcPos + 0];
                g = scratchData.data[srcPos + 1];
                b = scratchData.data[srcPos + 2];
                a = scratchData.data[srcPos + 3];
                dstPos = (xSize * y + x) * 4;
                scratchData.data[dstPos + 0] = r;
                scratchData.data[dstPos + 1] = g;
                scratchData.data[dstPos + 2] = b;
                scratchData.data[dstPos + 3] = a;
            }
        }

        // Perform the actual effect
        for( y = 0; y < ySize; y += 1 ){
            sectionSize = Math.floor( minSectionSize );
            for( i = 0; i < power; i += 1 ){
                for( x = 0; x < sectionSize + 1; x += 1 ){
                    srcPos = (xSize * y + x) * 4;
                    r = scratchData.data[srcPos + 0];
                    g = scratchData.data[srcPos + 1];
                    b = scratchData.data[srcPos + 2];
                    a = scratchData.data[srcPos + 3];
                    dstPos = (xSize * y + sectionSize * 2 - x - 1) * 4;
                    scratchData.data[dstPos + 0] = r;
                    scratchData.data[dstPos + 1] = g;
                    scratchData.data[dstPos + 2] = b;
                    scratchData.data[dstPos + 3] = a;
                }
                sectionSize *= 2;
            }
        }

        // Convert back from polar coordinates
        FromPolar(scratchData, imageData, {polarRotation: 0});
    };

    /**
    * get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.
    * @name kaleidoscopePower
    * @method
    * @memberof Konva.Node.prototype
    * @param {Integer} power of kaleidoscope
    * @returns {Integer}
    */
    Konva.Factory.addGetterSetter(Konva.Node, 'kaleidoscopePower', 2, null, Konva.Factory.afterSetFilter);

    /**
    * get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.
    * @name kaleidoscopeAngle
    * @method
    * @memberof Konva.Node.prototype
    * @param {Integer} degrees
    * @returns {Integer}
    */
    Konva.Factory.addGetterSetter(Konva.Node, 'kaleidoscopeAngle', 0, null, Konva.Factory.afterSetFilter);

})();

(function() {
    'use strict';

    function isValidSelector(selector) {
        if (typeof selector !== 'string') {
            return false;
        }
        var firstChar = selector[0];
        return firstChar === '#' || firstChar === '.' || firstChar === firstChar.toUpperCase();
    }
    /**
     * Container constructor.&nbsp; Containers are used to contain nodes or other containers
     * @constructor
     * @memberof Konva
     * @augments Konva.Node
     * @abstract
     * @param {Object} config
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * * @param {Object} [config.clip] set clip
     * @param {Number} [config.clipX] set clip x
     * @param {Number} [config.clipY] set clip y
     * @param {Number} [config.clipWidth] set clip width
     * @param {Number} [config.clipHeight] set clip height

     */
    Konva.Container = function(config) {
        this.__init(config);
    };

    Konva.Util.addMethods(Konva.Container, {
        __init: function(config) {
            this.children = new Konva.Collection();
            Konva.Node.call(this, config);
        },
        /**
         * returns a {@link Konva.Collection} of direct descendant nodes
         * @method
         * @memberof Konva.Container.prototype
         * @param {Function} [filterFunc] filter function
         * @returns {Konva.Collection}
         * @example
         * // get all children
         * var children = layer.getChildren();
         *
         * // get only circles
         * var circles = layer.getChildren(function(node){
         *    return node.getClassName() === 'Circle';
         * });
         */
        getChildren: function(filterFunc) {
            if (!filterFunc) {
                return this.children;
            }

            var results = new Konva.Collection();
            this.children.each(function(child){
                if (filterFunc(child)) {
                    results.push(child);
                }
            });
            return results;
        },
        /**
         * determine if node has children
         * @method
         * @memberof Konva.Container.prototype
         * @returns {Boolean}
         */
        hasChildren: function() {
            return this.getChildren().length > 0;
        },
        /**
         * remove all children
         * @method
         * @memberof Konva.Container.prototype
         */
        removeChildren: function() {
            var children = Konva.Collection.toCollection(this.children);
            var child;
            for (var i = 0; i < children.length; i++) {
                child = children[i];
                // reset parent to prevent many _setChildrenIndices calls
                delete child.parent;
                child.index = 0;
                if (child.hasChildren()) {
                    child.removeChildren();
                }
                child.remove();
            }
            children = null;
            this.children = new Konva.Collection();
            return this;
        },
        /**
         * destroy all children
         * @method
         * @memberof Konva.Container.prototype
         */
        destroyChildren: function() {
           var children = Konva.Collection.toCollection(this.children);
            var child;
            for (var i = 0; i < children.length; i++) {
                child = children[i];
                // reset parent to prevent many _setChildrenIndices calls
                delete child.parent;
                child.index = 0;
                child.destroy();
            }
            children = null;
            this.children = new Konva.Collection();
            return this;
        },
        /**
         * Add node or nodes to container.
         * @method
         * @memberof Konva.Container.prototype
         * @param {...Konva.Node} child
         * @returns {Container}
         * @example
         * layer.add(shape1, shape2, shape3);
         */
        add: function(child) {
            if (arguments.length > 1) {
                for (var i = 0; i < arguments.length; i++) {
                    this.add(arguments[i]);
                }
                return this;
            }
            if (child.getParent()) {
                child.moveTo(this);
                return this;
            }
            var children = this.children;
            this._validateAdd(child);
            child.index = children.length;
            child.parent = this;
            children.push(child);
            this._fire('add', {
                child: child
            });

            // if node under drag we need to update drag animation
            if (Konva.DD && child.isDragging()) {
                Konva.DD.anim.setLayers(child.getLayer());
            }

            // chainable
            return this;
        },
        destroy: function() {
            // destroy children
            if (this.hasChildren()) {
                this.destroyChildren();
            }
            // then destroy self
            Konva.Node.prototype.destroy.call(this);
        },
        /**
         * return a {@link Konva.Collection} of nodes that match the selector.  Use '#' for id selections
         * and '.' for name selections.  You can also select by type or class name. Pass multiple selectors
         * separated by a space.
         * @method
         * @memberof Konva.Container.prototype
         * @param {String} selector
         * @returns {Collection}
         * @example
         * // select node with id foo
         * var node = stage.find('#foo');
         *
         * // select nodes with name bar inside layer
         * var nodes = layer.find('.bar');
         *
         * // select all groups inside layer
         * var nodes = layer.find('Group');
         *
         * // select all rectangles inside layer
         * var nodes = layer.find('Rect');
         *
         * // select node with an id of foo or a name of bar inside layer
         * var nodes = layer.find('#foo, .bar');
         */
        find: function(selector) {
            var retArr = [],
                selectorArr = selector.replace(/ /g, '').split(','),
                len = selectorArr.length,
                n, i, sel, arr, node, children, clen;

            for (n = 0; n < len; n++) {
                sel = selectorArr[n];
                if (!isValidSelector(sel)) {
                    Konva.Util.warn('Selector "' + sel + '" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".');
                    Konva.Util.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".');
                    Konva.Util.warn('Konva is awesome, right?');
                }
                // id selector
                if(sel.charAt(0) === '#') {
                    node = this._getNodeById(sel.slice(1));
                    if(node) {
                        retArr.push(node);
                    }
                }
                // name selector
                else if(sel.charAt(0) === '.') {
                    arr = this._getNodesByName(sel.slice(1));
                    retArr = retArr.concat(arr);
                }
                // unrecognized selector, pass to children
                else {
                    children = this.getChildren();
                    clen = children.length;
                    for(i = 0; i < clen; i++) {
                        retArr = retArr.concat(children[i]._get(sel));
                    }
                }
            }

            return Konva.Collection.toCollection(retArr);
        },
        /**
         * return a first node from `find` method
         * @method
         * @memberof Konva.Container.prototype
         * @param {String} selector
         * @returns {Konva.Node}
         * @example
         * // select node with id foo
         * var node = stage.findOne('#foo');
         *
         * // select node with name bar inside layer
         * var nodes = layer.findOne('.bar');
         */
        findOne: function(selector) {
            return this.find(selector)[0];
        },
        _getNodeById: function(key) {
            var node = Konva.ids[key];

            if(node !== undefined && this.isAncestorOf(node)) {
                return node;
            }
            return null;
        },
        _getNodesByName: function(key) {
            var arr = Konva.names[key] || [];
            return this._getDescendants(arr);
        },
        _get: function(selector) {
            var retArr = Konva.Node.prototype._get.call(this, selector);
            var children = this.getChildren();
            var len = children.length;
            for(var n = 0; n < len; n++) {
                retArr = retArr.concat(children[n]._get(selector));
            }
            return retArr;
        },
        // extenders
        toObject: function() {
            var obj = Konva.Node.prototype.toObject.call(this);

            obj.children = [];

            var children = this.getChildren();
            var len = children.length;
            for(var n = 0; n < len; n++) {
                var child = children[n];
                obj.children.push(child.toObject());
            }

            return obj;
        },
        _getDescendants: function(arr) {
            var retArr = [];
            var len = arr.length;
            for(var n = 0; n < len; n++) {
                var node = arr[n];
                if(this.isAncestorOf(node)) {
                    retArr.push(node);
                }
            }

            return retArr;
        },
        /**
         * determine if node is an ancestor
         * of descendant
         * @method
         * @memberof Konva.Container.prototype
         * @param {Konva.Node} node
         */
        isAncestorOf: function(node) {
            var parent = node.getParent();
            while(parent) {
                if(parent._id === this._id) {
                    return true;
                }
                parent = parent.getParent();
            }

            return false;
        },
        clone: function(obj) {
            // call super method
            var node = Konva.Node.prototype.clone.call(this, obj);

            this.getChildren().each(function(no) {
                node.add(no.clone());
            });
            return node;
        },
        /**
         * get all shapes that intersect a point.  Note: because this method must clear a temporary
         * canvas and redraw every shape inside the container, it should only be used for special sitations
         * because it performs very poorly.  Please use the {@link Konva.Stage#getIntersection} method if at all possible
         * because it performs much better
         * @method
         * @memberof Konva.Container.prototype
         * @param {Object} pos
         * @param {Number} pos.x
         * @param {Number} pos.y
         * @returns {Array} array of shapes
         */
        getAllIntersections: function(pos) {
            var arr = [];

            this.find('Shape').each(function(shape) {
                if(shape.isVisible() && shape.intersects(pos)) {
                    arr.push(shape);
                }
            });

            return arr;
        },
        _setChildrenIndices: function() {
            this.children.each(function(child, n) {
                child.index = n;
            });
        },
        drawScene: function(can, top, caching) {
            var layer = this.getLayer(),
                canvas = can || (layer && layer.getCanvas()),
                context = canvas && canvas.getContext(),
                cachedCanvas = this._cache.canvas,
                cachedSceneCanvas = cachedCanvas && cachedCanvas.scene;

            if (this.isVisible()) {
                if (!caching && cachedSceneCanvas) {
                    context.save();
                    layer._applyTransform(this, context, top);
                    this._drawCachedSceneCanvas(context);
                    context.restore();
                }
                else {
                    this._drawChildren(canvas, 'drawScene', top, false, caching);
                }
            }
            return this;
        },
        drawHit: function(can, top, caching) {
            var layer = this.getLayer(),
                canvas = can || (layer && layer.hitCanvas),
                context = canvas && canvas.getContext(),
                cachedCanvas = this._cache.canvas,
                cachedHitCanvas = cachedCanvas && cachedCanvas.hit;

            if (this.shouldDrawHit(canvas)) {
                if (layer) {
                    layer.clearHitCache();
                }
                if (!caching && cachedHitCanvas) {
                    context.save();
                    layer._applyTransform(this, context, top);
                    this._drawCachedHitCanvas(context);
                    context.restore();
                }
                else {
                    this._drawChildren(canvas, 'drawHit', top);
                }
            }
            return this;
        },
        _drawChildren: function(canvas, drawMethod, top, caching, skipBuffer) {
            var layer = this.getLayer(),
                context = canvas && canvas.getContext(),
                clipWidth = this.getClipWidth(),
                clipHeight = this.getClipHeight(),
                hasClip = clipWidth && clipHeight,
                clipX, clipY;

            if (hasClip && layer) {
                clipX = this.getClipX();
                clipY = this.getClipY();

                context.save();
                layer._applyTransform(this, context);
                context.beginPath();
                context.rect(clipX, clipY, clipWidth, clipHeight);
                context.clip();
                context.reset();
            }

            this.children.each(function(child) {
                child[drawMethod](canvas, top, caching, skipBuffer);
            });

            if (hasClip) {
                context.restore();
            }
        },
        shouldDrawHit: function(canvas) {
            var layer = this.getLayer();
            var dd = Konva.DD;
            var layerUnderDrag = dd && Konva.isDragging() && (Konva.DD.anim.getLayers().indexOf(layer) !== -1);
            return (canvas && canvas.isCache) || (layer && layer.hitGraphEnabled())
                && this.isVisible() && !layerUnderDrag;
        },
        getClientRect: function(skipTransform) {
            var minX, minY, maxX, maxY;
            var selfRect = {
                x: 0,
                y: 0,
                width: 0,
                height: 0
            };
            this.children.each(function(child) {
                var rect = child.getClientRect();

                // skip invisible children (like empty groups)
                // or don't skip... hmmm...
                // if (rect.width === 0 && rect.height === 0) {
                //     return;
                // }

                if (minX === undefined) { // initial value for first child
                    minX = rect.x;
                    minY = rect.y;
                    maxX = rect.x + rect.width;
                    maxY = rect.y + rect.height;
                } else {
                    minX = Math.min(minX, rect.x);
                    minY = Math.min(minY, rect.y);
                    maxX = Math.max(maxX, rect.x + rect.width);
                    maxY = Math.max(maxY, rect.y + rect.height);
                }

            });

            if (this.children.length !== 0) {
                selfRect = {
                    x: minX,
                    y: minY,
                    width: maxX - minX,
                    height: maxY - minY
                };
            }

            if (!skipTransform) {
                return this._transformedRect(selfRect);
            }
            return selfRect;
        }
    });

    Konva.Util.extend(Konva.Container, Konva.Node);
    // deprecated methods
    Konva.Container.prototype.get = Konva.Container.prototype.find;

    // add getters setters
    Konva.Factory.addComponentsGetterSetter(Konva.Container, 'clip', ['x', 'y', 'width', 'height']);
    /**
     * get/set clip
     * @method
     * @name clip
     * @memberof Konva.Container.prototype
     * @param {Object} clip
     * @param {Number} clip.x
     * @param {Number} clip.y
     * @param {Number} clip.width
     * @param {Number} clip.height
     * @returns {Object}
     * @example
     * // get clip
     * var clip = container.clip();
     *
     * // set clip
     * container.setClip({
     *   x: 20,
     *   y: 20,
     *   width: 20,
     *   height: 20
     * });
     */

    Konva.Factory.addGetterSetter(Konva.Container, 'clipX');
    /**
     * get/set clip x
     * @name clipX
     * @method
     * @memberof Konva.Container.prototype
     * @param {Number} x
     * @returns {Number}
     * @example
     * // get clip x
     * var clipX = container.clipX();
     *
     * // set clip x
     * container.clipX(10);
     */

    Konva.Factory.addGetterSetter(Konva.Container, 'clipY');
    /**
     * get/set clip y
     * @name clipY
     * @method
     * @memberof Konva.Container.prototype
     * @param {Number} y
     * @returns {Number}
     * @example
     * // get clip y
     * var clipY = container.clipY();
     *
     * // set clip y
     * container.clipY(10);
     */

    Konva.Factory.addGetterSetter(Konva.Container, 'clipWidth');
    /**
     * get/set clip width
     * @name clipWidth
     * @method
     * @memberof Konva.Container.prototype
     * @param {Number} width
     * @returns {Number}
     * @example
     * // get clip width
     * var clipWidth = container.clipWidth();
     *
     * // set clip width
     * container.clipWidth(100);
     */

    Konva.Factory.addGetterSetter(Konva.Container, 'clipHeight');
    /**
     * get/set clip height
     * @name clipHeight
     * @method
     * @memberof Konva.Container.prototype
     * @param {Number} height
     * @returns {Number}
     * @example
     * // get clip height
     * var clipHeight = container.clipHeight();
     *
     * // set clip height
     * container.clipHeight(100);
     */

    Konva.Collection.mapMethods(Konva.Container);
})();

(function(Konva) {
    'use strict';
    var HAS_SHADOW = 'hasShadow';
    var SHADOW_RGBA = 'shadowRGBA';

    function _fillFunc(context) {
        context.fill();
    }
    function _strokeFunc(context) {
        context.stroke();
    }
    function _fillFuncHit(context) {
        context.fill();
    }
    function _strokeFuncHit(context) {
        context.stroke();
    }

    function _clearHasShadowCache() {
        this._clearCache(HAS_SHADOW);
    }

    function _clearGetShadowRGBACache() {
        this._clearCache(SHADOW_RGBA);
    }

    /**
     * Shape constructor.  Shapes are primitive objects such as rectangles,
     *  circles, text, lines, etc.
     * @constructor
     * @memberof Konva
     * @augments Konva.Node
     * @param {Object} config
     * @param {String} [config.fill] fill color
     * @param {Image} [config.fillPatternImage] fill pattern image
     * @param {Number} [config.fillPatternX]
     * @param {Number} [config.fillPatternY]
     * @param {Object} [config.fillPatternOffset] object with x and y component
     * @param {Number} [config.fillPatternOffsetX] 
     * @param {Number} [config.fillPatternOffsetY] 
     * @param {Object} [config.fillPatternScale] object with x and y component
     * @param {Number} [config.fillPatternScaleX]
     * @param {Number} [config.fillPatternScaleY]
     * @param {Number} [config.fillPatternRotation]
     * @param {String} [config.fillPatternRepeat] can be "repeat", "repeat-x", "repeat-y", or "no-repeat".  The default is "no-repeat"
     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientStartPointX]
     * @param {Number} [config.fillLinearGradientStartPointY]
     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientEndPointX]
     * @param {Number} [config.fillLinearGradientEndPointY]
     * @param {Array} [config.fillLinearGradientColorStops] array of color stops
     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientStartPointX]
     * @param {Number} [config.fillRadialGradientStartPointY]
     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientEndPointX] 
     * @param {Number} [config.fillRadialGradientEndPointY] 
     * @param {Number} [config.fillRadialGradientStartRadius]
     * @param {Number} [config.fillRadialGradientEndRadius]
     * @param {Array} [config.fillRadialGradientColorStops] array of color stops
     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true
     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration
     * @param {String} [config.stroke] stroke color
     * @param {Number} [config.strokeWidth] stroke width
     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true
     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true
     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true
     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true
     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true
     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default
     *  is miter
     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default
     *  is butt
     * @param {String} [config.shadowColor]
     * @param {Number} [config.shadowBlur]
     * @param {Object} [config.shadowOffset] object with x and y component
     * @param {Number} [config.shadowOffsetX]
     * @param {Number} [config.shadowOffsetY]
     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number
     *  between 0 and 1
     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true
     * @param {Array} [config.dash]
     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * var customShape = new Konva.Shape({
         *   x: 5,
         *   y: 10,
         *   fill: 'red',
         *   // a Konva.Canvas renderer is passed into the drawFunc function
         *   drawFunc: function(context) {
         *     context.beginPath();
         *     context.moveTo(200, 50);
         *     context.lineTo(420, 80);
         *     context.quadraticCurveTo(300, 100, 260, 170);
         *     context.closePath();
         *     context.fillStrokeShape(this);
         *   }
         *});
     */
    Konva.Shape = function(config) {
        this.__init(config);
    };

    Konva.Util.addMethods(Konva.Shape, {
        __init: function(config) {
            this.nodeType = 'Shape';
            this._fillFunc = _fillFunc;
            this._strokeFunc = _strokeFunc;
            this._fillFuncHit = _fillFuncHit;
            this._strokeFuncHit = _strokeFuncHit;

            // set colorKey
            var shapes = Konva.shapes;
            var key;

            while(true) {
                key = Konva.Util.getRandomColor();
                if(key && !( key in shapes)) {
                    break;
                }
            }

            this.colorKey = key;
            shapes[key] = this;

            // call super constructor
            Konva.Node.call(this, config);

            this.on('shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva', _clearHasShadowCache);

            this.on('shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva', _clearGetShadowRGBACache);
        },
        hasChildren: function() {
            return false;
        },
        getChildren: function() {
            return [];
        },
        /**
         * get canvas context tied to the layer
         * @method
         * @memberof Konva.Shape.prototype
         * @returns {Konva.Context}
         */
        getContext: function() {
            return this.getLayer().getContext();
        },
        /**
         * get canvas renderer tied to the layer.  Note that this returns a canvas renderer, not a canvas element
         * @method
         * @memberof Konva.Shape.prototype
         * @returns {Konva.Canvas}
         */
        getCanvas: function() {
            return this.getLayer().getCanvas();
        },
        /**
         * returns whether or not a shadow will be rendered
         * @method
         * @memberof Konva.Shape.prototype
         * @returns {Boolean}
         */
        hasShadow: function() {
            return this._getCache(HAS_SHADOW, this._hasShadow);
        },
        _hasShadow: function() {
            return this.getShadowEnabled() && (this.getShadowOpacity() !== 0 && !!(this.getShadowColor() || this.getShadowBlur() || this.getShadowOffsetX() || this.getShadowOffsetY()));
        },
        getShadowRGBA: function() {
            return this._getCache(SHADOW_RGBA, this._getShadowRGBA);
        },
        _getShadowRGBA: function() {
            if (this.hasShadow()) {
                var rgba = Konva.Util.colorToRGBA(this.shadowColor());
                return 'rgba(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ',' + (rgba.a * (this.getShadowOpacity() || 1)) + ')';
            }
        },
        /**
         * returns whether or not the shape will be filled
         * @method
         * @memberof Konva.Shape.prototype
         * @returns {Boolean}
         */
        hasFill: function() {
            return !!(this.getFill() || this.getFillPatternImage() || this.getFillLinearGradientColorStops() || this.getFillRadialGradientColorStops());
        },
        /**
         * returns whether or not the shape will be stroked
         * @method
         * @memberof Konva.Shape.prototype
         * @returns {Boolean}
         */
        hasStroke: function() {
            return !!(this.stroke());
        },
        /**
         * determines if point is in the shape, regardless if other shapes are on top of it.  Note: because
         *  this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times
         *  consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible
         *  because it performs much better
         * @method
         * @memberof Konva.Shape.prototype
         * @param {Object} point
         * @param {Number} point.x
         * @param {Number} point.y
         * @returns {Boolean}
         */
        intersects: function(point) {
            var stage = this.getStage(),
                bufferHitCanvas = stage.bufferHitCanvas,
                p;

            bufferHitCanvas.getContext().clear();
            this.drawScene(bufferHitCanvas);
            p = bufferHitCanvas.context.getImageData(Math.round(point.x), Math.round(point.y), 1, 1).data;
            return p[3] > 0;
        },
        // extends Node.prototype.destroy
        destroy: function() {
            Konva.Node.prototype.destroy.call(this);
            delete Konva.shapes[this.colorKey];
        },
        _useBufferCanvas: function(caching) {
            return !caching && (this.perfectDrawEnabled() && (this.getAbsoluteOpacity() !== 1) && this.hasFill() && this.hasStroke() && this.getStage()) ||
                   (this.perfectDrawEnabled() && this.hasShadow() && (this.getAbsoluteOpacity() !== 1) && this.hasFill() && this.hasStroke() && this.getStage());
        },
        /**
         * return self rectangle (x, y, width, height) of shape.
         * This method are not taken into account transformation and styles.
         * @method
         * @memberof Konva.Node.prototype
         * @returns {Object} rect with {x, y, width, height} properties
         * @example
         *
         * rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}
         * circle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}
         *
         */
        getSelfRect: function() {
            var size = this.getSize();
            return {
                x: this._centroid ? Math.round(-size.width / 2) : 0,
                y: this._centroid ? Math.round(-size.height / 2) : 0,
                width: size.width,
                height: size.height
            };
        },
        getClientRect: function(skipTransform) {
            var fillRect = this.getSelfRect();

            var strokeWidth = (this.hasStroke() && this.strokeWidth()) || 0;
            var fillAndStrokeWidth = fillRect.width + strokeWidth;
            var fillAndStrokeHeight = fillRect.height + strokeWidth;

            var shadowOffsetX = this.shadowOffsetX();
            var shadowOffsetY = this.shadowOffsetY();

            var preWidth = fillAndStrokeWidth + Math.abs(shadowOffsetX);
            var preHeight = fillAndStrokeHeight + Math.abs(shadowOffsetY);

            var blurRadius = (this.hasShadow() && this.shadowBlur() || 0);

            var width = preWidth + blurRadius * 2;
            var height = preHeight + blurRadius * 2;

            // if stroke, for example = 3
            // we need to set x to 1.5, but after Math.round it will be 2
            // as we have additional offset we need to increase width and height by 1 pixel
            var roundingOffset = 0;
            if (Math.round(strokeWidth / 2) !== strokeWidth / 2) {
                roundingOffset = 1;
            }
            var rect = {
                width: width + roundingOffset,
                height: height + roundingOffset,
                x: -Math.round(strokeWidth / 2 + blurRadius) + Math.min(shadowOffsetX, 0) + fillRect.x,
                y: -Math.round(strokeWidth / 2 + blurRadius) + Math.min(shadowOffsetY, 0) + fillRect.y
            };
            if (!skipTransform) {
                return this._transformedRect(rect);
            }
            return rect;
        },
        drawScene: function(can, top, caching, skipBuffer) {
            var layer = this.getLayer(),
                canvas = can || layer.getCanvas(),
                context = canvas.getContext(),
                cachedCanvas = this._cache.canvas,
                drawFunc = this.sceneFunc(),
                hasShadow = this.hasShadow(),
                hasStroke = this.hasStroke(),
                stage, bufferCanvas, bufferContext;

            if(!this.isVisible()) {
                return this;
            }
            if (cachedCanvas) {
                context.save();
                layer._applyTransform(this, context, top);
                this._drawCachedSceneCanvas(context);
                context.restore();
                return this;
            }
            if (!drawFunc) {
                return this;
            }
            context.save();
            // if buffer canvas is needed
            if (this._useBufferCanvas(caching) && !skipBuffer) {
                stage = this.getStage();
                bufferCanvas = stage.bufferCanvas;
                bufferContext = bufferCanvas.getContext();
                bufferContext.clear();
                bufferContext.save();
                bufferContext._applyLineJoin(this);
                // layer might be undefined if we are using cache before adding to layer
                if (!caching) {
                    if (layer) {
                        layer._applyTransform(this, bufferContext, top);
                    } else {
                        var m = this.getAbsoluteTransform(top).getMatrix();
                        context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
                    }
                }

                drawFunc.call(this, bufferContext);
                bufferContext.restore();

                if (hasShadow && !canvas.hitCanvas) {
                        context.save();
                        context._applyShadow(this);
                        context._applyOpacity(this);
                        context.drawImage(bufferCanvas._canvas, 0, 0);
                        context.restore();
                } else {
                    context._applyOpacity(this);
                    context.drawImage(bufferCanvas._canvas, 0, 0);
                }
            }
            // if buffer canvas is not needed
            else {
                context._applyLineJoin(this);
                // layer might be undefined if we are using cache before adding to layer
                if (!caching) {
                    if (layer) {
                        layer._applyTransform(this, context, top);
                    } else {
                        var o = this.getAbsoluteTransform(top).getMatrix();
                        context.transform(o[0], o[1], o[2], o[3], o[4], o[5]);
                    }
                }

                if (hasShadow && hasStroke && !canvas.hitCanvas) {
                    context.save();
                    // apply shadow
                    if (!caching) {
                        context._applyOpacity(this);
                    }
                    context._applyShadow(this);
                    drawFunc.call(this, context);
                    context.restore();
                    // if shape has stroke we need to redraw shape
                    // otherwise we will see a shadow under stroke (and over fill)
                    // but I think this is unexpected behavior
                    if (this.hasFill() && this.getShadowForStrokeEnabled()) {
                        drawFunc.call(this, context);
                    }
                } else if (hasShadow && !canvas.hitCanvas) {
                    context.save();
                    if (!caching) {
                        context._applyOpacity(this);
                    }
                    context._applyShadow(this);
                    drawFunc.call(this, context);
                    context.restore();
                } else {
                    if (!caching) {
                        context._applyOpacity(this);
                    }
                    drawFunc.call(this, context);
                }
            }
            context.restore();
            return this;
        },
        drawHit: function(can, top, caching) {
            var layer = this.getLayer(),
                canvas = can || layer.hitCanvas,
                context = canvas.getContext(),
                drawFunc = this.hitFunc() || this.sceneFunc(),
                cachedCanvas = this._cache.canvas,
                cachedHitCanvas = cachedCanvas && cachedCanvas.hit;

            if(!this.shouldDrawHit(canvas)) {
                return this;
            }
            if (layer) {
                layer.clearHitCache();
            }
            if (cachedHitCanvas) {
                context.save();
                layer._applyTransform(this, context, top);
                this._drawCachedHitCanvas(context);
                context.restore();
                return this;
            }
            if (!drawFunc) {
                return this;
            }
            context.save();
            context._applyLineJoin(this);
            if (!caching) {
                if (layer) {
                    layer._applyTransform(this, context, top);
                } else {
                    var o = this.getAbsoluteTransform(top).getMatrix();
                    context.transform(o[0], o[1], o[2], o[3], o[4], o[5]);
                }
            }
            drawFunc.call(this, context);
            context.restore();
            return this;
        },
        /**
        * draw hit graph using the cached scene canvas
        * @method
        * @memberof Konva.Shape.prototype
        * @param {Integer} alphaThreshold alpha channel threshold that determines whether or not
        *  a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.
        *  The default is 0
        * @returns {Konva.Shape}
        * @example
        * shape.cache();
        * shape.drawHitFromCache();
        */
        drawHitFromCache: function(alphaThreshold) {
            var threshold = alphaThreshold || 0,
                cachedCanvas = this._cache.canvas,
                sceneCanvas = this._getCachedSceneCanvas(),
                hitCanvas = cachedCanvas.hit,
                hitContext = hitCanvas.getContext(),
                hitWidth = hitCanvas.getWidth(),
                hitHeight = hitCanvas.getHeight(),
                hitImageData, hitData, len, rgbColorKey, i, alpha;

            hitContext.clear();
            hitContext.drawImage(sceneCanvas._canvas, 0, 0, hitWidth, hitHeight);

            try {
                hitImageData = hitContext.getImageData(0, 0, hitWidth, hitHeight);
                hitData = hitImageData.data;
                len = hitData.length;
                rgbColorKey = Konva.Util._hexToRgb(this.colorKey);

                // replace non transparent pixels with color key
                for(i = 0; i < len; i += 4) {
                    alpha = hitData[i + 3];
                    if (alpha > threshold) {
                        hitData[i] = rgbColorKey.r;
                        hitData[i + 1] = rgbColorKey.g;
                        hitData[i + 2] = rgbColorKey.b;
                        hitData[i + 3] = 255;
                    }
                    else {
                        hitData[i + 3] = 0;
                    }
                }
                hitContext.putImageData(hitImageData, 0, 0);
            }
            catch(e) {
                Konva.Util.error('Unable to draw hit graph from cached scene canvas. ' + e.message);
            }

            return this;
        }
    });
    Konva.Util.extend(Konva.Shape, Konva.Node);

    // add getters and setters
    Konva.Factory.addGetterSetter(Konva.Shape, 'stroke');

    /**
     * get/set stroke color
     * @name stroke
     * @method
     * @memberof Konva.Shape.prototype
     * @param {String} color
     * @returns {String}
     * @example
     * // get stroke color
     * var stroke = shape.stroke();
     *
     * // set stroke color with color string
     * shape.stroke('green');
     *
     * // set stroke color with hex
     * shape.stroke('#00ff00');
     *
     * // set stroke color with rgb
     * shape.stroke('rgb(0,255,0)');
     *
     * // set stroke color with rgba and make it 50% opaque
     * shape.stroke('rgba(0,255,0,0.5');
     */

    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'strokeRed', 0, Konva.Validators.RGBComponent);
    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'strokeGreen', 0, Konva.Validators.RGBComponent);
    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'strokeBlue', 0, Konva.Validators.RGBComponent);
    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'strokeAlpha', 1, Konva.Validators.alphaComponent);


    Konva.Factory.addGetterSetter(Konva.Shape, 'strokeWidth', 2);

    /**
     * get/set stroke width
     * @name strokeWidth
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} strokeWidth
     * @returns {Number}
     * @example
     * // get stroke width
     * var strokeWidth = shape.strokeWidth();
     *
     * // set stroke width
     * shape.strokeWidth();
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'strokeHitEnabled', true);

    /**
     * get/set strokeHitEnabled property. Useful for performance optimization.
     * You may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area
     * of shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`
     * will be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)
     * Default value is true
     * @name strokeHitEnabled
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Boolean} strokeHitEnabled
     * @returns {Boolean}
     * @example
     * // get strokeHitEnabled
     * var strokeHitEnabled = shape.strokeHitEnabled();
     *
     * // set strokeHitEnabled
     * shape.strokeHitEnabled();
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'perfectDrawEnabled', true);

    /**
     * get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to improve performance.
     * See http://konvajs.github.io/docs/performance/Disable_Perfect_Draw.html for more information.
     * Default value is true
     * @name perfectDrawEnabled
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Boolean} perfectDrawEnabled
     * @returns {Boolean}
     * @example
     * // get perfectDrawEnabled
     * var perfectDrawEnabled = shape.perfectDrawEnabled();
     *
     * // set perfectDrawEnabled
     * shape.perfectDrawEnabled();
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'shadowForStrokeEnabled', true);

    /**
     * get/set shadowForStrokeEnabled. Useful for performance optimization.
     * You may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will be no draw shadow for stroke.
     * Remember if you set `shadowForStrokeEnabled = false` for non closed line - that line with have no shadow!.
     * Default value is true
     * @name shadowForStrokeEnabled
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Boolean} shadowForStrokeEnabled
     * @returns {Boolean}
     * @example
     * // get shadowForStrokeEnabled
     * var shadowForStrokeEnabled = shape.shadowForStrokeEnabled();
     *
     * // set shadowForStrokeEnabled
     * shape.shadowForStrokeEnabled();
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'lineJoin');

    /**
     * get/set line join.  Can be miter, round, or bevel.  The
     *  default is miter
     * @name lineJoin
     * @method
     * @memberof Konva.Shape.prototype
     * @param {String} lineJoin
     * @returns {String}
     * @example
     * // get line join
     * var lineJoin = shape.lineJoin();
     *
     * // set line join
     * shape.lineJoin('round');
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'lineCap');

    /**
     * get/set line cap.  Can be butt, round, or square
     * @name lineCap
     * @method
     * @memberof Konva.Shape.prototype
     * @param {String} lineCap
     * @returns {String}
     * @example
     * // get line cap
     * var lineCap = shape.lineCap();
     *
     * // set line cap
     * shape.lineCap('round');
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'sceneFunc');

    /**
     * get/set scene draw function
     * @name sceneFunc
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Function} drawFunc drawing function
     * @returns {Function}
     * @example
     * // get scene draw function
     * var sceneFunc = shape.sceneFunc();
     *
     * // set scene draw function
     * shape.sceneFunc(function(context) {
     *   context.beginPath();
     *   context.rect(0, 0, this.width(), this.height());
     *   context.closePath();
     *   context.fillStrokeShape(this);
     * });
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'hitFunc');

    /**
     * get/set hit draw function
     * @name hitFunc
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Function} drawFunc drawing function
     * @returns {Function}
     * @example
     * // get hit draw function
     * var hitFunc = shape.hitFunc();
     *
     * // set hit draw function
     * shape.hitFunc(function(context) {
     *   context.beginPath();
     *   context.rect(0, 0, this.width(), this.height());
     *   context.closePath();
     *   context.fillStrokeShape(this);
     * });
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'dash');

    /**
     * get/set dash array for stroke.
     * @name dash
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Array} dash
     * @returns {Array}
     * @example
     *  // apply dashed stroke that is 10px long and 5 pixels apart
     *  line.dash([10, 5]);
     *  // apply dashed stroke that is made up of alternating dashed
     *  // lines that are 10px long and 20px apart, and dots that have
     *  // a radius of 5px and are 20px apart
     *  line.dash([10, 20, 0.001, 20]);
     */


    Konva.Factory.addGetterSetter(Konva.Shape, 'shadowColor');

    /**
     * get/set shadow color
     * @name shadowColor
     * @method
     * @memberof Konva.Shape.prototype
     * @param {String} color
     * @returns {String}
     * @example
     * // get shadow color
     * var shadow = shape.shadowColor();
     *
     * // set shadow color with color string
     * shape.shadowColor('green');
     *
     * // set shadow color with hex
     * shape.shadowColor('#00ff00');
     *
     * // set shadow color with rgb
     * shape.shadowColor('rgb(0,255,0)');
     *
     * // set shadow color with rgba and make it 50% opaque
     * shape.shadowColor('rgba(0,255,0,0.5');
     */

    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'shadowRed', 0, Konva.Validators.RGBComponent);
    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'shadowGreen', 0, Konva.Validators.RGBComponent);
    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'shadowBlue', 0, Konva.Validators.RGBComponent);
    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'shadowAlpha', 1, Konva.Validators.alphaComponent);

    Konva.Factory.addGetterSetter(Konva.Shape, 'shadowBlur');

    /**
     * get/set shadow blur
     * @name shadowBlur
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} blur
     * @returns {Number}
     * @example
     * // get shadow blur
     * var shadowBlur = shape.shadowBlur();
     *
     * // set shadow blur
     * shape.shadowBlur(10);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'shadowOpacity');

    /**
     * get/set shadow opacity.  must be a value between 0 and 1
     * @name shadowOpacity
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} opacity
     * @returns {Number}
     * @example
     * // get shadow opacity
     * var shadowOpacity = shape.shadowOpacity();
     *
     * // set shadow opacity
     * shape.shadowOpacity(0.5);
     */

    Konva.Factory.addComponentsGetterSetter(Konva.Shape, 'shadowOffset', ['x', 'y']);

    /**
     * get/set shadow offset
     * @name shadowOffset
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Object} offset
     * @param {Number} offset.x
     * @param {Number} offset.y
     * @returns {Object}
     * @example
     * // get shadow offset
     * var shadowOffset = shape.shadowOffset();
     *
     * // set shadow offset
     * shape.shadowOffset({
     *   x: 20
     *   y: 10
     * });
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'shadowOffsetX', 0);

     /**
     * get/set shadow offset x
     * @name shadowOffsetX
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} x
     * @returns {Number}
     * @example
     * // get shadow offset x
     * var shadowOffsetX = shape.shadowOffsetX();
     *
     * // set shadow offset x
     * shape.shadowOffsetX(5);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'shadowOffsetY', 0);

     /**
     * get/set shadow offset y
     * @name shadowOffsetY
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} y
     * @returns {Number}
     * @example
     * // get shadow offset y
     * var shadowOffsetY = shape.shadowOffsetY();
     *
     * // set shadow offset y
     * shape.shadowOffsetY(5);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternImage');

    /**
     * get/set fill pattern image
     * @name fillPatternImage
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Image} image object
     * @returns {Image}
     * @example
     * // get fill pattern image
     * var fillPatternImage = shape.fillPatternImage();
     *
     * // set fill pattern image
     * var imageObj = new Image();
     * imageObj.onload = function() {
     *   shape.fillPatternImage(imageObj);
     * };
     * imageObj.src = 'path/to/image/jpg';
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fill');

    /**
     * get/set fill color
     * @name fill
     * @method
     * @memberof Konva.Shape.prototype
     * @param {String} color
     * @returns {String}
     * @example
     * // get fill color
     * var fill = shape.fill();
     *
     * // set fill color with color string
     * shape.fill('green');
     *
     * // set fill color with hex
     * shape.fill('#00ff00');
     *
     * // set fill color with rgb
     * shape.fill('rgb(0,255,0)');
     *
     * // set fill color with rgba and make it 50% opaque
     * shape.fill('rgba(0,255,0,0.5');
     *
     * // shape without fill
     * shape.fill(null);
     */

    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'fillRed', 0, Konva.Validators.RGBComponent);
    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'fillGreen', 0, Konva.Validators.RGBComponent);
    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'fillBlue', 0, Konva.Validators.RGBComponent);
    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'fillAlpha', 1, Konva.Validators.alphaComponent);

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternX', 0);

    /**
     * get/set fill pattern x
     * @name fillPatternX
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} x
     * @returns {Number}
     * @example
     * // get fill pattern x
     * var fillPatternX = shape.fillPatternX();
     * // set fill pattern x
     * shape.fillPatternX(20);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternY', 0);

    /**
     * get/set fill pattern y
     * @name fillPatternY
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} y
     * @returns {Number}
     * @example
     * // get fill pattern y
     * var fillPatternY = shape.fillPatternY();
     * // set fill pattern y
     * shape.fillPatternY(20);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillLinearGradientColorStops');

    /**
     * get/set fill linear gradient color stops
     * @name fillLinearGradientColorStops
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Array} colorStops
     * @returns {Array} colorStops
     * @example
     * // get fill linear gradient color stops
     * var colorStops = shape.fillLinearGradientColorStops();
     *
     * // create a linear gradient that starts with red, changes to blue
     * // halfway through, and then changes to green
     * shape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillRadialGradientStartRadius', 0);

    /**
     * get/set fill radial gradient start radius
     * @name fillRadialGradientStartRadius
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} radius
     * @returns {Number}
     * @example
     * // get radial gradient start radius
     * var startRadius = shape.fillRadialGradientStartRadius();
     *
     * // set radial gradient start radius
     * shape.fillRadialGradientStartRadius(0);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillRadialGradientEndRadius', 0);

    /**
     * get/set fill radial gradient end radius
     * @name fillRadialGradientEndRadius
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} radius
     * @returns {Number}
     * @example
     * // get radial gradient end radius
     * var endRadius = shape.fillRadialGradientEndRadius();
     *
     * // set radial gradient end radius
     * shape.fillRadialGradientEndRadius(100);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillRadialGradientColorStops');

    /**
     * get/set fill radial gradient color stops
     * @name fillRadialGradientColorStops
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} colorStops
     * @returns {Array}
     * @example
     * // get fill radial gradient color stops
     * var colorStops = shape.fillRadialGradientColorStops();
     *
     * // create a radial gradient that starts with red, changes to blue
     * // halfway through, and then changes to green
     * shape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternRepeat', 'repeat');

    /**
     * get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'
     * @name fillPatternRepeat
     * @method
     * @memberof Konva.Shape.prototype
     * @param {String} repeat
     * @returns {String}
     * @example
     * // get fill pattern repeat
     * var repeat = shape.fillPatternRepeat();
     *
     * // repeat pattern in x direction only
     * shape.fillPatternRepeat('repeat-x');
     *
     * // do not repeat the pattern
     * shape.fillPatternRepeat('no repeat');
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillEnabled', true);

    /**
     * get/set fill enabled flag
     * @name fillEnabled
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Boolean} enabled
     * @returns {Boolean}
     * @example
     * // get fill enabled flag
     * var fillEnabled = shape.fillEnabled();
     *
     * // disable fill
     * shape.fillEnabled(false);
     *
     * // enable fill
     * shape.fillEnabled(true);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'strokeEnabled', true);

    /**
     * get/set stroke enabled flag
     * @name strokeEnabled
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Boolean} enabled
     * @returns {Boolean}
     * @example
     * // get stroke enabled flag
     * var strokeEnabled = shape.strokeEnabled();
     *
     * // disable stroke
     * shape.strokeEnabled(false);
     *
     * // enable stroke
     * shape.strokeEnabled(true);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'shadowEnabled', true);

    /**
     * get/set shadow enabled flag
     * @name shadowEnabled
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Boolean} enabled
     * @returns {Boolean}
     * @example
     * // get shadow enabled flag
     * var shadowEnabled = shape.shadowEnabled();
     *
     * // disable shadow
     * shape.shadowEnabled(false);
     *
     * // enable shadow
     * shape.shadowEnabled(true);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'dashEnabled', true);

    /**
     * get/set dash enabled flag
     * @name dashEnabled
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Boolean} enabled
     * @returns {Boolean}
     * @example
     * // get dash enabled flag
     * var dashEnabled = shape.dashEnabled();
     *
     * // disable dash
     * shape.dashEnabled(false);
     *
     * // enable dash
     * shape.dashEnabled(true);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'strokeScaleEnabled', true);

    /**
     * get/set strokeScale enabled flag
     * @name strokeScaleEnabled
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Boolean} enabled
     * @returns {Boolean}
     * @example
     * // get stroke scale enabled flag
     * var strokeScaleEnabled = shape.strokeScaleEnabled();
     *
     * // disable stroke scale
     * shape.strokeScaleEnabled(false);
     *
     * // enable stroke scale
     * shape.strokeScaleEnabled(true);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPriority', 'color');

    /**
     * get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.
     *   This is handy if you want to toggle between different fill types.
     * @name fillPriority
     * @method
     * @memberof Konva.Shape.prototype
     * @param {String} priority
     * @returns {String}
     * @example
     * // get fill priority
     * var fillPriority = shape.fillPriority();
     *
     * // set fill priority
     * shape.fillPriority('linear-gradient');
     */

    Konva.Factory.addComponentsGetterSetter(Konva.Shape, 'fillPatternOffset', ['x', 'y']);

    /**
     * get/set fill pattern offset
     * @name fillPatternOffset
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Object} offset
     * @param {Number} offset.x
     * @param {Number} offset.y
     * @returns {Object}
     * @example
     * // get fill pattern offset
     * var patternOffset = shape.fillPatternOffset();
     *
     * // set fill pattern offset
     * shape.fillPatternOffset({
     *   x: 20
     *   y: 10
     * });
     */


    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternOffsetX', 0);
    /**
     * get/set fill pattern offset x
     * @name fillPatternOffsetX
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} x
     * @returns {Number}
     * @example
     * // get fill pattern offset x
     * var patternOffsetX = shape.fillPatternOffsetX();
     *
     * // set fill pattern offset x
     * shape.fillPatternOffsetX(20);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternOffsetY', 0);
    /**
     * get/set fill pattern offset y
     * @name fillPatternOffsetY
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} y
     * @returns {Number}
     * @example
     * // get fill pattern offset y
     * var patternOffsetY = shape.fillPatternOffsetY();
     *
     * // set fill pattern offset y
     * shape.fillPatternOffsetY(10);
     */

    Konva.Factory.addComponentsGetterSetter(Konva.Shape, 'fillPatternScale', ['x', 'y']);

    /**
     * get/set fill pattern scale
     * @name fillPatternScale
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Object} scale
     * @param {Number} scale.x
     * @param {Number} scale.y
     * @returns {Object}
     * @example
     * // get fill pattern scale
     * var patternScale = shape.fillPatternScale();
     *
     * // set fill pattern scale
     * shape.fillPatternScale({
     *   x: 2
     *   y: 2
     * });
     */


    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternScaleX', 1);
    /**
     * get/set fill pattern scale x
     * @name fillPatternScaleX
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} x
     * @returns {Number}
     * @example
     * // get fill pattern scale x
     * var patternScaleX = shape.fillPatternScaleX();
     *
     * // set fill pattern scale x
     * shape.fillPatternScaleX(2);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternScaleY', 1);
    /**
     * get/set fill pattern scale y
     * @name fillPatternScaleY
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} y
     * @returns {Number}
     * @example
     * // get fill pattern scale y
     * var patternScaleY = shape.fillPatternScaleY();
     *
     * // set fill pattern scale y
     * shape.fillPatternScaleY(2);
     */

    Konva.Factory.addComponentsGetterSetter(Konva.Shape, 'fillLinearGradientStartPoint', ['x', 'y']);

    /**
     * get/set fill linear gradient start point
     * @name fillLinearGradientStartPoint
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Object} startPoint
     * @param {Number} startPoint.x
     * @param {Number} startPoint.y
     * @returns {Object}
     * @example
     * // get fill linear gradient start point
     * var startPoint = shape.fillLinearGradientStartPoint();
     *
     * // set fill linear gradient start point
     * shape.fillLinearGradientStartPoint({
     *   x: 20
     *   y: 10
     * });
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillLinearGradientStartPointX', 0);
    /**
     * get/set fill linear gradient start point x
     * @name fillLinearGradientStartPointX
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} x
     * @returns {Number}
     * @example
     * // get fill linear gradient start point x
     * var startPointX = shape.fillLinearGradientStartPointX();
     *
     * // set fill linear gradient start point x
     * shape.fillLinearGradientStartPointX(20);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillLinearGradientStartPointY', 0);
    /**
     * get/set fill linear gradient start point y
     * @name fillLinearGradientStartPointY
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} y
     * @returns {Number}
     * @example
     * // get fill linear gradient start point y
     * var startPointY = shape.fillLinearGradientStartPointY();
     *
     * // set fill linear gradient start point y
     * shape.fillLinearGradientStartPointY(20);
     */

    Konva.Factory.addComponentsGetterSetter(Konva.Shape, 'fillLinearGradientEndPoint', ['x', 'y']);

    /**
     * get/set fill linear gradient end point
     * @name fillLinearGradientEndPoint
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Object} endPoint
     * @param {Number} endPoint.x
     * @param {Number} endPoint.y
     * @returns {Object}
     * @example
     * // get fill linear gradient end point
     * var endPoint = shape.fillLinearGradientEndPoint();
     *
     * // set fill linear gradient end point
     * shape.fillLinearGradientEndPoint({
     *   x: 20
     *   y: 10
     * });
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillLinearGradientEndPointX', 0);
    /**
     * get/set fill linear gradient end point x
     * @name fillLinearGradientEndPointX
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} x
     * @returns {Number}
     * @example
     * // get fill linear gradient end point x
     * var endPointX = shape.fillLinearGradientEndPointX();
     *
     * // set fill linear gradient end point x
     * shape.fillLinearGradientEndPointX(20);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillLinearGradientEndPointY', 0);
    /**
     * get/set fill linear gradient end point y
     * @name fillLinearGradientEndPointY
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} y
     * @returns {Number}
     * @example
     * // get fill linear gradient end point y
     * var endPointY = shape.fillLinearGradientEndPointY();
     *
     * // set fill linear gradient end point y
     * shape.fillLinearGradientEndPointY(20);
     */

    Konva.Factory.addComponentsGetterSetter(Konva.Shape, 'fillRadialGradientStartPoint', ['x', 'y']);

    /**
     * get/set fill radial gradient start point
     * @name fillRadialGradientStartPoint
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Object} startPoint
     * @param {Number} startPoint.x
     * @param {Number} startPoint.y
     * @returns {Object}
     * @example
     * // get fill radial gradient start point
     * var startPoint = shape.fillRadialGradientStartPoint();
     *
     * // set fill radial gradient start point
     * shape.fillRadialGradientStartPoint({
     *   x: 20
     *   y: 10
     * });
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillRadialGradientStartPointX', 0);
    /**
     * get/set fill radial gradient start point x
     * @name fillRadialGradientStartPointX
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} x
     * @returns {Number}
     * @example
     * // get fill radial gradient start point x
     * var startPointX = shape.fillRadialGradientStartPointX();
     *
     * // set fill radial gradient start point x
     * shape.fillRadialGradientStartPointX(20);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillRadialGradientStartPointY', 0);
    /**
     * get/set fill radial gradient start point y
     * @name fillRadialGradientStartPointY
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} y
     * @returns {Number}
     * @example
     * // get fill radial gradient start point y
     * var startPointY = shape.fillRadialGradientStartPointY();
     *
     * // set fill radial gradient start point y
     * shape.fillRadialGradientStartPointY(20);
     */

    Konva.Factory.addComponentsGetterSetter(Konva.Shape, 'fillRadialGradientEndPoint', ['x', 'y']);

    /**
     * get/set fill radial gradient end point
     * @name fillRadialGradientEndPoint
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Object} endPoint
     * @param {Number} endPoint.x
     * @param {Number} endPoint.y
     * @returns {Object}
     * @example
     * // get fill radial gradient end point
     * var endPoint = shape.fillRadialGradientEndPoint();
     *
     * // set fill radial gradient end point
     * shape.fillRadialGradientEndPoint({
     *   x: 20
     *   y: 10
     * });
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillRadialGradientEndPointX', 0);
    /**
     * get/set fill radial gradient end point x
     * @name fillRadialGradientEndPointX
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} x
     * @returns {Number}
     * @example
     * // get fill radial gradient end point x
     * var endPointX = shape.fillRadialGradientEndPointX();
     *
     * // set fill radial gradient end point x
     * shape.fillRadialGradientEndPointX(20);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillRadialGradientEndPointY', 0);
    /**
     * get/set fill radial gradient end point y
     * @name fillRadialGradientEndPointY
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} y
     * @returns {Number}
     * @example
     * // get fill radial gradient end point y
     * var endPointY = shape.fillRadialGradientEndPointY();
     *
     * // set fill radial gradient end point y
     * shape.fillRadialGradientEndPointY(20);
     */

    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternRotation', 0);

    /**
     * get/set fill pattern rotation in degrees
     * @name fillPatternRotation
     * @method
     * @memberof Konva.Shape.prototype
     * @param {Number} rotation
     * @returns {Konva.Shape}
     * @example
     * // get fill pattern rotation
     * var patternRotation = shape.fillPatternRotation();
     *
     * // set fill pattern rotation
     * shape.fillPatternRotation(20);
     */


    Konva.Factory.backCompat(Konva.Shape, {
        dashArray: 'dash',
        getDashArray: 'getDash',
        setDashArray: 'getDash',

        drawFunc: 'sceneFunc',
        getDrawFunc: 'getSceneFunc',
        setDrawFunc: 'setSceneFunc',

        drawHitFunc: 'hitFunc',
        getDrawHitFunc: 'getHitFunc',
        setDrawHitFunc: 'setHitFunc'
    });

    Konva.Collection.mapMethods(Konva.Shape);
})(Konva);

(function() {
    'use strict';
    // CONSTANTS
    var STAGE = 'Stage',
        STRING = 'string',
        PX = 'px',

        MOUSEOUT = 'mouseout',
        MOUSELEAVE = 'mouseleave',
        MOUSEOVER = 'mouseover',
        MOUSEENTER = 'mouseenter',
        MOUSEMOVE = 'mousemove',
        MOUSEDOWN = 'mousedown',
        MOUSEUP = 'mouseup',
        CLICK = 'click',
        DBL_CLICK = 'dblclick',
        TOUCHSTART = 'touchstart',
        TOUCHEND = 'touchend',
        TAP = 'tap',
        DBL_TAP = 'dbltap',
        TOUCHMOVE = 'touchmove',
        DOMMOUSESCROLL = 'DOMMouseScroll',
        MOUSEWHEEL = 'mousewheel',
        WHEEL = 'wheel',

        CONTENT_MOUSEOUT = 'contentMouseout',
        CONTENT_MOUSEOVER = 'contentMouseover',
        CONTENT_MOUSEMOVE = 'contentMousemove',
        CONTENT_MOUSEDOWN = 'contentMousedown',
        CONTENT_MOUSEUP = 'contentMouseup',
        CONTENT_CLICK = 'contentClick',
        CONTENT_DBL_CLICK = 'contentDblclick',
        CONTENT_TOUCHSTART = 'contentTouchstart',
        CONTENT_TOUCHEND = 'contentTouchend',
        CONTENT_DBL_TAP = 'contentDbltap',
        CONTENT_TOUCHMOVE = 'contentTouchmove',

        DIV = 'div',
        RELATIVE = 'relative',
        KONVA_CONTENT = 'konvajs-content',
        SPACE = ' ',
        UNDERSCORE = '_',
        CONTAINER = 'container',
        EMPTY_STRING = '',
        EVENTS = [MOUSEDOWN, MOUSEMOVE, MOUSEUP, MOUSEOUT, TOUCHSTART, TOUCHMOVE, TOUCHEND, MOUSEOVER, DOMMOUSESCROLL, MOUSEWHEEL, WHEEL],

        // cached variables
        eventsLength = EVENTS.length;

    function addEvent(ctx, eventName) {
        ctx.content.addEventListener(eventName, function(evt) {
            ctx[UNDERSCORE + eventName](evt);
        }, false);
    }

    /**
     * Stage constructor.  A stage is used to contain multiple layers
     * @constructor
     * @memberof Konva
     * @augments Konva.Container
     * @param {Object} config
     * @param {String|Element} config.container Container id or DOM element
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * var stage = new Konva.Stage({
         *   width: 500,
         *   height: 800,
         *   container: 'containerId'
         * });
     */
    Konva.Stage = function(config) {
        this.___init(config);
    };

    Konva.Util.addMethods(Konva.Stage, {
        ___init: function(config) {
            this.nodeType = STAGE;
            // call super constructor
            Konva.Container.call(this, config);
            this._id = Konva.idCounter++;
            this._buildDOM();
            this._bindContentEvents();
            this._enableNestedTransforms = false;
            Konva.stages.push(this);
        },
        _validateAdd: function(child) {
            if (child.getType() !== 'Layer') {
                Konva.Util.throw('You may only add layers to the stage.');
            }
        },
        /**
         * set container dom element which contains the stage wrapper div element
         * @method
         * @memberof Konva.Stage.prototype
         * @param {DomElement} container can pass in a dom element or id string
         */
        setContainer: function(container) {
            if( typeof container === STRING) {
                var id = container;
                container = Konva.document.getElementById(container);
                if (!container) {
                    throw 'Can not find container in document with id ' + id;
                }
            }
            this._setAttr(CONTAINER, container);
            return this;
        },
        shouldDrawHit: function() {
            return true;
        },
        draw: function() {
            Konva.Node.prototype.draw.call(this);
            return this;
        },
        /**
         * draw layer scene graphs
         * @name draw
         * @method
         * @memberof Konva.Stage.prototype
         */

        /**
         * draw layer hit graphs
         * @name drawHit
         * @method
         * @memberof Konva.Stage.prototype
         */

        /**
         * set height
         * @method
         * @memberof Konva.Stage.prototype
         * @param {Number} height
         */
        setHeight: function(height) {
            Konva.Node.prototype.setHeight.call(this, height);
            this._resizeDOM();
            return this;
        },
        /**
         * set width
         * @method
         * @memberof Konva.Stage.prototype
         * @param {Number} width
         */
        setWidth: function(width) {
            Konva.Node.prototype.setWidth.call(this, width);
            this._resizeDOM();
            return this;
        },
        /**
         * clear all layers
         * @method
         * @memberof Konva.Stage.prototype
         */
        clear: function() {
            var layers = this.children,
                len = layers.length,
                n;

            for(n = 0; n < len; n++) {
                layers[n].clear();
            }
            return this;
        },
        clone: function(obj) {
            if (!obj) {
                obj = {};
            }
            obj.container = Konva.document.createElement(DIV);
            return Konva.Container.prototype.clone.call(this, obj);
        },
        /**
         * destroy stage
         * @method
         * @memberof Konva.Stage.prototype
         */
        destroy: function() {
            var content = this.content;
            Konva.Container.prototype.destroy.call(this);

            if(content && Konva.Util._isInDocument(content)) {
                this.getContainer().removeChild(content);
            }
            var index = Konva.stages.indexOf(this);
            if (index > -1) {
                Konva.stages.splice(index, 1);
            }
        },
        /**
         * get pointer position which can be a touch position or mouse position
         * @method
         * @memberof Konva.Stage.prototype
         * @returns {Object}
         */
        getPointerPosition: function() {
            return this.pointerPos;
        },
        getStage: function() {
            return this;
        },
        /**
         * get stage content div element which has the
         *  the class name "konvajs-content"
         * @method
         * @memberof Konva.Stage.prototype
         */
        getContent: function() {
            return this.content;
        },
        /**
         * Creates a composite data URL
         * @method
         * @memberof Konva.Stage.prototype
         * @param {Object} config
         * @param {Function} [config.callback] function executed when the composite has completed. Deprecated as method is sync now.
         * @param {String} [config.mimeType] can be "image/png" or "image/jpeg".
         *  "image/png" is the default
         * @param {Number} [config.x] x position of canvas section
         * @param {Number} [config.y] y position of canvas section
         * @param {Number} [config.width] width of canvas section
         * @param {Number} [config.height] height of canvas section
         * @param {Number} [config.quality] jpeg quality.  If using an "image/jpeg" mimeType,
         *  you can specify the quality from 0 to 1, where 0 is very poor quality and 1
         *  is very high quality
         */
        toDataURL: function(config) {
            config = config || {};

            var mimeType = config.mimeType || null,
                quality = config.quality || null,
                x = config.x || 0,
                y = config.y || 0,
                canvas = new Konva.SceneCanvas({
                    width: config.width || this.getWidth(),
                    height: config.height || this.getHeight(),
                    pixelRatio: config.pixelRatio
                }),
                _context = canvas.getContext()._context,
                layers = this.children;

            if(x || y) {
                _context.translate(-1 * x, -1 * y);
            }


            layers.each(function(layer) {
                var width = layer.getCanvas().getWidth();
                var height = layer.getCanvas().getHeight();
                var ratio = layer.getCanvas().getPixelRatio();
                _context.drawImage(layer.getCanvas()._canvas, 0, 0, width / ratio, height / ratio);
            });
            var src = canvas.toDataURL(mimeType, quality);

            if (config.callback) {
                config.callback(src);
            }

            return src;
        },
        /**
         * converts stage into an image.
         * @method
         * @memberof Konva.Stage.prototype
         * @param {Object} config
         * @param {Function} config.callback function executed when the composite has completed
         * @param {String} [config.mimeType] can be "image/png" or "image/jpeg".
         *  "image/png" is the default
         * @param {Number} [config.x] x position of canvas section
         * @param {Number} [config.y] y position of canvas section
         * @param {Number} [config.width] width of canvas section
         * @param {Number} [config.height] height of canvas section
         * @param {Number} [config.quality] jpeg quality.  If using an "image/jpeg" mimeType,
         *  you can specify the quality from 0 to 1, where 0 is very poor quality and 1
         *  is very high quality
         */
        toImage: function(config) {
            var cb = config.callback;

            config.callback = function(dataUrl) {
                Konva.Util._getImage(dataUrl, function(img) {
                    cb(img);
                });
            };
            this.toDataURL(config);
        },
        /**
         * get visible intersection shape. This is the preferred
         *  method for determining if a point intersects a shape or not
         * @method
         * @memberof Konva.Stage.prototype
         * @param {Object} pos
         * @param {Number} pos.x
         * @param {Number} pos.y
         * @returns {Konva.Shape}
         */
        getIntersection: function(pos) {
            var layers = this.getChildren(),
                len = layers.length,
                end = len - 1,
                n, shape;

            for(n = end; n >= 0; n--) {
                shape = layers[n].getIntersection(pos);
                if (shape) {
                    return shape;
                }
            }

            return null;
        },
        _resizeDOM: function() {
            if(this.content) {
                var width = this.getWidth(),
                    height = this.getHeight(),
                    layers = this.getChildren(),
                    len = layers.length,
                    n, layer;

                // set content dimensions
                this.content.style.width = width + PX;
                this.content.style.height = height + PX;

                this.bufferCanvas.setSize(width, height);
                this.bufferHitCanvas.setSize(width, height);

                // set layer dimensions
                for(n = 0; n < len; n++) {
                    layer = layers[n];
                    layer.setSize(width, height);
                    layer.draw();
                }
            }
        },
        /**
         * add layer or layers to stage
         * @method
         * @memberof Konva.Stage.prototype
         * @param {...Konva.Layer} layer
         * @example
         * stage.add(layer1, layer2, layer3);
         */
        add: function(layer) {
            if (arguments.length > 1) {
                for (var i = 0; i < arguments.length; i++) {
                    this.add(arguments[i]);
                }
                return this;
            }
            Konva.Container.prototype.add.call(this, layer);
            layer._setCanvasSize(this.width(), this.height());

            // draw layer and append canvas to container
            layer.draw();
            this.content.appendChild(layer.canvas._canvas);

            // chainable
            return this;
        },
        getParent: function() {
            return null;
        },
        getLayer: function() {
            return null;
        },
        /**
         * returns a {@link Konva.Collection} of layers
         * @method
         * @memberof Konva.Stage.prototype
         */
        getLayers: function() {
            return this.getChildren();
        },
        _bindContentEvents: function() {
            for (var n = 0; n < eventsLength; n++) {
                addEvent(this, EVENTS[n]);
            }
        },
        _mouseover: function(evt) {
            if (!Konva.UA.mobile) {
                this._setPointerPosition(evt);
                this._fire(CONTENT_MOUSEOVER, {evt: evt});
            }
        },
        _mouseout: function(evt) {
            if (!Konva.UA.mobile) {
                this._setPointerPosition(evt);
                var targetShape = this.targetShape;

                if(targetShape && !Konva.isDragging()) {
                    targetShape._fireAndBubble(MOUSEOUT, {evt: evt});
                    targetShape._fireAndBubble(MOUSELEAVE, {evt: evt});
                    this.targetShape = null;
                }
                this.pointerPos = undefined;

                this._fire(CONTENT_MOUSEOUT, {evt: evt});
            }
        },
        _mousemove: function(evt) {
            // workaround for mobile IE to force touch event when unhandled pointer event elevates into a mouse event
            if (Konva.UA.ieMobile) {
                return this._touchmove(evt);
            }
            // workaround fake mousemove event in chrome browser https://code.google.com/p/chromium/issues/detail?id=161464
            if ((typeof evt.movementX !== 'undefined' || typeof evt.movementY !== 'undefined') && evt.movementY === 0 && evt.movementX === 0) {
                return null;
            }
            if (Konva.UA.mobile) {
                return null;
            }
            this._setPointerPosition(evt);
            var shape;

            if (!Konva.isDragging()) {
                shape = this.getIntersection(this.getPointerPosition());
                if(shape && shape.isListening()) {
                    if(!Konva.isDragging() && (!this.targetShape || this.targetShape._id !== shape._id)) {
                        if(this.targetShape) {
                            this.targetShape._fireAndBubble(MOUSEOUT, {evt: evt}, shape);
                            this.targetShape._fireAndBubble(MOUSELEAVE, {evt: evt}, shape);
                        }
                        shape._fireAndBubble(MOUSEOVER, {evt: evt}, this.targetShape);
                        shape._fireAndBubble(MOUSEENTER, {evt: evt}, this.targetShape);
                        this.targetShape = shape;
                    }
                    else {
                        shape._fireAndBubble(MOUSEMOVE, {evt: evt});
                    }
                }
                /*
                 * if no shape was detected, clear target shape and try
                 * to run mouseout from previous target shape
                 */
                else {
                    if(this.targetShape && !Konva.isDragging()) {
                        this.targetShape._fireAndBubble(MOUSEOUT, {evt: evt});
                        this.targetShape._fireAndBubble(MOUSELEAVE, {evt: evt});
                        this.targetShape = null;
                    }

                }

                // content event
                this._fire(CONTENT_MOUSEMOVE, {evt: evt});
            }

            // always call preventDefault for desktop events because some browsers
            // try to drag and drop the canvas element
            if (evt.preventDefault) {
                evt.preventDefault();
            }
        },
        _mousedown: function(evt) {
            // workaround for mobile IE to force touch event when unhandled pointer event elevates into a mouse event
            if (Konva.UA.ieMobile) {
                return this._touchstart(evt);
            }
            if (!Konva.UA.mobile) {
                this._setPointerPosition(evt);
                var shape = this.getIntersection(this.getPointerPosition());

                Konva.listenClickTap = true;

                if (shape && shape.isListening()) {
                    this.clickStartShape = shape;
                    shape._fireAndBubble(MOUSEDOWN, {evt: evt});
                }

                // content event
                this._fire(CONTENT_MOUSEDOWN, {evt: evt});
            }

            // always call preventDefault for desktop events because some browsers
            // try to drag and drop the canvas element
            if (evt.preventDefault) {
                evt.preventDefault();
            }
        },
        _mouseup: function(evt) {

            // workaround for mobile IE to force touch event when unhandled pointer event elevates into a mouse event
            if (Konva.UA.ieMobile) {
                return this._touchend(evt);
            }
            if (!Konva.UA.mobile) {
                this._setPointerPosition(evt);
                var shape = this.getIntersection(this.getPointerPosition()),
                    clickStartShape = this.clickStartShape,
                    fireDblClick = false,
                    dd = Konva.DD;

                if(Konva.inDblClickWindow) {
                    fireDblClick = true;
                    Konva.inDblClickWindow = false;
                }
                // don't set inDblClickWindow after dragging
                else if (!dd || !dd.justDragged) {
                    Konva.inDblClickWindow = true;
                } else if (dd) {
                    dd.justDragged = false;
                }

                setTimeout(function() {
                    Konva.inDblClickWindow = false;
                }, Konva.dblClickWindow);

                if (shape && shape.isListening()) {
                    shape._fireAndBubble(MOUSEUP, {evt: evt});

                    // detect if click or double click occurred
                    if(Konva.listenClickTap && clickStartShape && clickStartShape._id === shape._id) {
                        shape._fireAndBubble(CLICK, {evt: evt});

                        if(fireDblClick) {
                            shape._fireAndBubble(DBL_CLICK, {evt: evt});
                        }
                    }
                }
                // content events
                this._fire(CONTENT_MOUSEUP, {evt: evt});
                if (Konva.listenClickTap) {
                    this._fire(CONTENT_CLICK, {evt: evt});
                    if(fireDblClick) {
                        this._fire(CONTENT_DBL_CLICK, {evt: evt});
                    }
                }

                Konva.listenClickTap = false;
            }

            // always call preventDefault for desktop events because some browsers
            // try to drag and drop the canvas element
            if (evt.preventDefault) {
                evt.preventDefault();
            }
        },
        _touchstart: function(evt) {
            this._setPointerPosition(evt);
            var shape = this.getIntersection(this.getPointerPosition());

            Konva.listenClickTap = true;

            if (shape && shape.isListening()) {
                this.tapStartShape = shape;
                shape._fireAndBubble(TOUCHSTART, {evt: evt});

                // only call preventDefault if the shape is listening for events
                if (shape.isListening() && evt.preventDefault) {
                    evt.preventDefault();
                }
            }
            // content event
            this._fire(CONTENT_TOUCHSTART, {evt: evt});
        },
        _touchend: function(evt) {
            this._setPointerPosition(evt);
            var shape = this.getIntersection(this.getPointerPosition()),
                fireDblClick = false;

            if(Konva.inDblClickWindow) {
                fireDblClick = true;
                Konva.inDblClickWindow = false;
            }
            else {
                Konva.inDblClickWindow = true;
            }

            setTimeout(function() {
                Konva.inDblClickWindow = false;
            }, Konva.dblClickWindow);

            if (shape && shape.isListening()) {
                shape._fireAndBubble(TOUCHEND, {evt: evt});

                // detect if tap or double tap occurred
                if(Konva.listenClickTap && shape._id === this.tapStartShape._id) {
                    shape._fireAndBubble(TAP, {evt: evt});

                    if(fireDblClick) {
                        shape._fireAndBubble(DBL_TAP, {evt: evt});
                    }
                }
                // only call preventDefault if the shape is listening for events
                if (shape.isListening() && evt.preventDefault) {
                    evt.preventDefault();
                }
            }
            // content events
            if (Konva.listenClickTap) {
                this._fire(CONTENT_TOUCHEND, {evt: evt});
                if(fireDblClick) {
                    this._fire(CONTENT_DBL_TAP, {evt: evt});
                }
            }

            Konva.listenClickTap = false;
        },
        _touchmove: function(evt) {
            this._setPointerPosition(evt);
            var dd = Konva.DD,
                shape;
            if (!Konva.isDragging()) {
                shape = this.getIntersection(this.getPointerPosition());
                if (shape && shape.isListening()) {
                    shape._fireAndBubble(TOUCHMOVE, {evt: evt});
                    // only call preventDefault if the shape is listening for events
                    if (shape.isListening() && evt.preventDefault) {
                        evt.preventDefault();
                    }
                }
                this._fire(CONTENT_TOUCHMOVE, {evt: evt});
            }
            if(dd) {
                if (Konva.isDragging()) {
                    evt.preventDefault();
                }
            }
        },
        _DOMMouseScroll: function(evt) {
            this._mousewheel(evt);
        },
        _mousewheel: function(evt) {
            this._setPointerPosition(evt);
            var shape = this.getIntersection(this.getPointerPosition());

            if (shape && shape.isListening()) {
                shape._fireAndBubble(MOUSEWHEEL, {evt: evt});
            }
        },
        _wheel: function(evt) {
            this._mousewheel(evt);
        },
        _setPointerPosition: function(evt) {
            var contentPosition = this._getContentPosition(),
                x = null,
                y = null;
            evt = evt ? evt : window.event;

            // touch events
            if(evt.touches !== undefined) {
                // currently, only handle one finger
                if (evt.touches.length > 0) {

                    var touch = evt.touches[0];
                    // get the information for finger #1
                    x = touch.clientX - contentPosition.left;
                    y = touch.clientY - contentPosition.top;
                }
            }
            // mouse events
            else {
                if (!contentPosition) {
                    x = evt.offsetX;
                    y = evt.offetY;
                }
                // we unfortunately have to use UA detection here because accessing
                // the layerX or layerY properties in newer versions of Chrome
                // throws a JS warning.  layerX and layerY are required for FF
                // when the container is transformed via CSS.
                else if (Konva.UA.browser === 'mozilla') {
                    x = evt.layerX || (evt.clientX - contentPosition.left);
                    y = evt.layerY || (evt.clientY - contentPosition.top);
                } else {
                    x = evt.clientX - contentPosition.left;
                    y = evt.clientY - contentPosition.top;
                }
            }

            if (x !== null && y !== null) {
                this.pointerPos = {
                    x: x,
                    y: y
                };
            }
        },
        _getContentPosition: function() {
            var rect = this.content.getBoundingClientRect ? this.content.getBoundingClientRect() : { top: 0, left: 0 };
            return {
                top: rect.top,
                left: rect.left
            };
        },
        _buildDOM: function() {
            var container = this.getContainer();
            if (!container) {
                if (Konva.Util.isBrowser()) {
                    throw 'Stage has no container. A container is required.';
                } else {
                    // automatically create element for jsdom in nodejs env
                    container = Konva.document.createElement(DIV);
                }
            }
            // clear content inside container
            container.innerHTML = EMPTY_STRING;

            // content
            this.content = Konva.document.createElement(DIV);
            this.content.style.position = RELATIVE;
            this.content.className = KONVA_CONTENT;
            this.content.setAttribute('role', 'presentation');
            container.appendChild(this.content);

            // the buffer canvas pixel ratio must be 1 because it is used as an
            // intermediate canvas before copying the result onto a scene canvas.
            // not setting it to 1 will result in an over compensation
            this.bufferCanvas = new Konva.SceneCanvas({
                pixelRatio: 1
            });
            this.bufferHitCanvas = new Konva.HitCanvas();

            this._resizeDOM();
        },
        _onContent: function(typesStr, handler) {
            var types = typesStr.split(SPACE),
                len = types.length,
                n, baseEvent;

            for(n = 0; n < len; n++) {
                baseEvent = types[n];
                this.content.addEventListener(baseEvent, handler, false);
            }
        },
        // currently cache function is now working for stage, because stage has no its own canvas element
        // TODO: may be it is better to cache all children layers?
        cache: function() {
            Konva.Util.warn('Cache function is not allowed for stage. You may use cache only for layers, groups and shapes.');
        },
        clearCache: function() {
        }
    });
    Konva.Util.extend(Konva.Stage, Konva.Container);

    // add getters and setters
    Konva.Factory.addGetter(Konva.Stage, 'container');
    Konva.Factory.addOverloadedGetterSetter(Konva.Stage, 'container');

    /**
     * get container DOM element
     * @name container
     * @method
     * @memberof Konva.Stage.prototype
     * @returns {DomElement} container
     * @example
     * // get container
     * var container = stage.container();
     * // set container
     * var container = document.createElement('div');
     * body.appendChild(container);
     * stage.container(container);
     */

})();

(function() {
    'use strict';
    /**
     * BaseLayer constructor.
     * @constructor
     * @memberof Konva
     * @augments Konva.Container
     * @param {Object} config
     * @param {Boolean} [config.clearBeforeDraw] set this property to false if you don't want
     * to clear the canvas before each layer draw.  The default value is true.
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * * @param {Object} [config.clip] set clip
     * @param {Number} [config.clipX] set clip x
     * @param {Number} [config.clipY] set clip y
     * @param {Number} [config.clipWidth] set clip width
     * @param {Number} [config.clipHeight] set clip height

     * @example
     * var layer = new Konva.Layer();
     */
    Konva.BaseLayer = function(config) {
        this.___init(config);
    };

    Konva.Util.addMethods(Konva.BaseLayer, {
        ___init: function(config) {
            this.nodeType = 'Layer';
            Konva.Container.call(this, config);
        },
        createPNGStream: function() {
            return this.canvas._canvas.createPNGStream();
        },
        /**
         * get layer canvas
         * @method
         * @memberof Konva.BaseLayer.prototype
         */
        getCanvas: function() {
            return this.canvas;
        },
        /**
         * get layer hit canvas
         * @method
         * @memberof Konva.BaseLayer.prototype
         */
        getHitCanvas: function() {
            return this.hitCanvas;
        },
        /**
         * get layer canvas context
         * @method
         * @memberof Konva.BaseLayer.prototype
         */
        getContext: function() {
            return this.getCanvas().getContext();
        },
        /**
         * clear scene and hit canvas contexts tied to the layer
         * @method
         * @memberof Konva.BaseLayer.prototype
         * @param {Object} [bounds]
         * @param {Number} [bounds.x]
         * @param {Number} [bounds.y]
         * @param {Number} [bounds.width]
         * @param {Number} [bounds.height]
         * @example
         * layer.clear();
         * layer.clear({
         *   x : 0,
         *   y : 0,
         *   width : 100,
         *   height : 100
         * });
         */
        clear: function(bounds) {
            this.getContext().clear(bounds);
            return this;
        },
        clearHitCache: function() {
            this._hitImageData = undefined;
        },
        // extend Node.prototype.setZIndex
        setZIndex: function(index) {
            Konva.Node.prototype.setZIndex.call(this, index);
            var stage = this.getStage();
            if(stage) {
                stage.content.removeChild(this.getCanvas()._canvas);

                if(index < stage.getChildren().length - 1) {
                    stage.content.insertBefore(this.getCanvas()._canvas, stage.getChildren()[index + 1].getCanvas()._canvas);
                }
                else {
                    stage.content.appendChild(this.getCanvas()._canvas);
                }
            }
            return this;
        },
        // extend Node.prototype.moveToTop
        moveToTop: function() {
            Konva.Node.prototype.moveToTop.call(this);
            var stage = this.getStage();
            if(stage) {
                stage.content.removeChild(this.getCanvas()._canvas);
                stage.content.appendChild(this.getCanvas()._canvas);
            }
        },
        // extend Node.prototype.moveUp
        moveUp: function() {
            var moved = Konva.Node.prototype.moveUp.call(this);
            if (!moved){
                return;
            }
            var stage = this.getStage();
            if(!stage) {
                return;
            }
            stage.content.removeChild(this.getCanvas()._canvas);

            if(this.index < stage.getChildren().length - 1) {
                stage.content.insertBefore(this.getCanvas()._canvas, stage.getChildren()[this.index + 1].getCanvas()._canvas);
            } else {
                stage.content.appendChild(this.getCanvas()._canvas);
            }
        },
        // extend Node.prototype.moveDown
        moveDown: function() {
            if(Konva.Node.prototype.moveDown.call(this)) {
                var stage = this.getStage();
                if(stage) {
                    var children = stage.getChildren();
                    stage.content.removeChild(this.getCanvas()._canvas);
                    stage.content.insertBefore(this.getCanvas()._canvas, children[this.index + 1].getCanvas()._canvas);
                }
            }
        },
        // extend Node.prototype.moveToBottom
        moveToBottom: function() {
            if(Konva.Node.prototype.moveToBottom.call(this)) {
                var stage = this.getStage();
                if(stage) {
                    var children = stage.getChildren();
                    stage.content.removeChild(this.getCanvas()._canvas);
                    stage.content.insertBefore(this.getCanvas()._canvas, children[1].getCanvas()._canvas);
                }
            }
        },
        getLayer: function() {
            return this;
        },
        remove: function() {
            var _canvas = this.getCanvas()._canvas;

            Konva.Node.prototype.remove.call(this);

            if(_canvas && _canvas.parentNode && Konva.Util._isInDocument(_canvas)) {
                _canvas.parentNode.removeChild(_canvas);
            }
            return this;
        },
        getStage: function() {
            return this.parent;
        },
        setSize: function(width, height) {
            this.canvas.setSize(width, height);
        },
        /**
         * get/set width of layer.getter return width of stage. setter doing nothing.
         * if you want change width use `stage.width(value);`
         * @name width
         * @method
         * @memberof Konva.BaseLayer.prototype
         * @returns {Number}
         * @example
         * var width = layer.width();
         */
        getWidth: function() {
            if (this.parent) {
                return this.parent.getWidth();
            }
        },
        setWidth: function() {
            Konva.Util.warn('Can not change width of layer. Use "stage.width(value)" function instead.');
        },
        /**
         * get/set height of layer.getter return height of stage. setter doing nothing.
         * if you want change height use `stage.height(value);`
         * @name height
         * @method
         * @memberof Konva.BaseLayer.prototype
         * @returns {Number}
         * @example
         * var height = layer.height();
         */
        getHeight: function() {
            if (this.parent) {
                return this.parent.getHeight();
            }
        },
        setHeight: function() {
            Konva.Util.warn('Can not change height of layer. Use "stage.height(value)" function instead.');
        },
        // the apply transform method is handled by the Layer and FastLayer class
        // because it is up to the layer to decide if an absolute or relative transform
        // should be used
        _applyTransform: function(shape, context, top) {
            var m = shape.getAbsoluteTransform(top).getMatrix();
            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
        }
    });
    Konva.Util.extend(Konva.BaseLayer, Konva.Container);

    // add getters and setters
    Konva.Factory.addGetterSetter(Konva.BaseLayer, 'clearBeforeDraw', true);
    /**
     * get/set clearBeforeDraw flag which determines if the layer is cleared or not
     *  before drawing
     * @name clearBeforeDraw
     * @method
     * @memberof Konva.BaseLayer.prototype
     * @param {Boolean} clearBeforeDraw
     * @returns {Boolean}
     * @example
     * // get clearBeforeDraw flag
     * var clearBeforeDraw = layer.clearBeforeDraw();
     *
     * // disable clear before draw
     * layer.clearBeforeDraw(false);
     *
     * // enable clear before draw
     * layer.clearBeforeDraw(true);
     */

    Konva.Collection.mapMethods(Konva.BaseLayer);
})();

(function() {
    'use strict';
    // constants
    var HASH = '#',
        BEFORE_DRAW = 'beforeDraw',
        DRAW = 'draw',

        /*
         * 2 - 3 - 4
         * |       |
         * 1 - 0   5
         *         |
         * 8 - 7 - 6
         */
        INTERSECTION_OFFSETS = [
            {x: 0, y: 0},  // 0
            {x: -1, y: 0}, // 1
            {x: -1, y: -1}, // 2
            {x: 0, y: -1}, // 3
            {x: 1, y: -1}, // 4
            {x: 1, y: 0}, // 5
            {x: 1, y: 1}, // 6
            {x: 0, y: 1}, // 7
            {x: -1, y: 1}  // 8
        ],
        INTERSECTION_OFFSETS_LEN = INTERSECTION_OFFSETS.length;

    /**
     * Layer constructor.  Layers are tied to their own canvas element and are used
     * to contain groups or shapes.
     * @constructor
     * @memberof Konva
     * @augments Konva.BaseLayer
     * @param {Object} config
     * @param {Boolean} [config.clearBeforeDraw] set this property to false if you don't want
     * to clear the canvas before each layer draw.  The default value is true.
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * * @param {Object} [config.clip] set clip
     * @param {Number} [config.clipX] set clip x
     * @param {Number} [config.clipY] set clip y
     * @param {Number} [config.clipWidth] set clip width
     * @param {Number} [config.clipHeight] set clip height

     * @example
     * var layer = new Konva.Layer();
     */
    Konva.Layer = function(config) {
        this.____init(config);
    };

    Konva.Util.addMethods(Konva.Layer, {
        ____init: function(config) {
            this.nodeType = 'Layer';
            this.canvas = new Konva.SceneCanvas();
            this.hitCanvas = new Konva.HitCanvas({
                pixelRatio: 1
            });
            // call super constructor
            Konva.BaseLayer.call(this, config);
        },
        _setCanvasSize: function(width, height) {
            this.canvas.setSize(width, height);
            this.hitCanvas.setSize(width, height);
        },
        _validateAdd: function(child) {
            var type = child.getType();
            if (type !== 'Group' && type !== 'Shape') {
                Konva.Util.throw('You may only add groups and shapes to a layer.');
            }
        },
        /**
         * get visible intersection shape. This is the preferred
         * method for determining if a point intersects a shape or not
         * @method
         * @memberof Konva.Layer.prototype
         * @param {Object} pos
         * @param {Number} pos.x
         * @param {Number} pos.y
         * @returns {Konva.Shape}
         */
        getIntersection: function(pos) {
            var obj, i, intersectionOffset, shape;

            if(!this.hitGraphEnabled() || !this.isVisible()) {
                return null;
            }
            // in some cases antialiased area may be bigger than 1px
            // it is possible if we will cache node, then scale it a lot
            // TODO: check { 0; 0 } point before loop, and remove it from INTERSECTION_OFFSETS.
            var spiralSearchDistance = 1;
            var continueSearch = false;
            while (true) {
                for (i = 0; i < INTERSECTION_OFFSETS_LEN; i++) {
                    intersectionOffset = INTERSECTION_OFFSETS[i];
                    obj = this._getIntersection({
                        x: pos.x + intersectionOffset.x * spiralSearchDistance,
                        y: pos.y + intersectionOffset.y * spiralSearchDistance
                    });
                    shape = obj.shape;
                    if (shape) {
                        return shape;
                    }
                    // we should continue search if we found antialiased pixel
                    // that means our node somewhere very close
                    continueSearch = !!obj.antialiased;
                    // stop search if found empty pixel
                    if (!obj.antialiased) {
                        break;
                    }
                }
                // if no shape, and no antialiased pixel, we should end searching
                if (continueSearch) {
                    spiralSearchDistance += 1;
                } else {
                    return null;
                }
            }
        },
        _getImageData: function(x, y) {
            var width = this.hitCanvas.width || 1,
                height = this.hitCanvas.height || 1,
                index = (Math.round(y) * width ) + Math.round(x);

            if (!this._hitImageData) {
                this._hitImageData = this.hitCanvas.context.getImageData(0, 0, width, height);
            }

            return [
                this._hitImageData.data[4 * index + 0], // Red
                this._hitImageData.data[4 * index + 1], // Green
                this._hitImageData.data[4 * index + 2], // Blue
                this._hitImageData.data[4 * index + 3] // Alpha
            ];
        },
        _getIntersection: function(pos) {
            var ratio = this.hitCanvas.pixelRatio;
            var p = this.hitCanvas.context.getImageData(Math.round(pos.x * ratio), Math.round(pos.y * ratio), 1, 1).data,
                p3 = p[3],
                colorKey, shape;
            // fully opaque pixel
            if(p3 === 255) {
                colorKey = Konva.Util._rgbToHex(p[0], p[1], p[2]);
                shape = Konva.shapes[HASH + colorKey];
                if (shape) {
                    return {
                        shape: shape
                    };
                }
                return {
                    antialiased: true
                };
            }
            // antialiased pixel
            else if(p3 > 0) {
                return {
                    antialiased: true
                };
            }
            // empty pixel
            return {};
        },
        drawScene: function(can, top) {
            var layer = this.getLayer(),
                canvas = can || (layer && layer.getCanvas());

            this._fire(BEFORE_DRAW, {
                node: this
            });

            if(this.getClearBeforeDraw()) {
                canvas.getContext().clear();
            }

            Konva.Container.prototype.drawScene.call(this, canvas, top);

            this._fire(DRAW, {
                node: this
            });

            return this;
        },
        drawHit: function(can, top) {
            var layer = this.getLayer(),
                canvas = can || (layer && layer.hitCanvas);

            if(layer && layer.getClearBeforeDraw()) {
                layer.getHitCanvas().getContext().clear();
            }

            Konva.Container.prototype.drawHit.call(this, canvas, top);
            this.imageData = null; // Clear imageData cache
            return this;
        },
        clear: function(bounds) {
            Konva.BaseLayer.prototype.clear.call(this, bounds);
            this.getHitCanvas().getContext().clear(bounds);
            this.imageData = null; // Clear getImageData cache
            return this;
        },
        // extend Node.prototype.setVisible
        setVisible: function(visible) {
            Konva.Node.prototype.setVisible.call(this, visible);
            if(visible) {
                this.getCanvas()._canvas.style.display = 'block';
                this.hitCanvas._canvas.style.display = 'block';
            }
            else {
                this.getCanvas()._canvas.style.display = 'none';
                this.hitCanvas._canvas.style.display = 'none';
            }
            return this;
        },
        /**
         * enable hit graph
         * @name enableHitGraph
         * @method
         * @memberof Konva.Layer.prototype
         * @returns {Layer}
         */
        enableHitGraph: function() {
            this.setHitGraphEnabled(true);
            return this;
        },
        /**
         * disable hit graph
         * @name disableHitGraph
         * @method
         * @memberof Konva.Layer.prototype
         * @returns {Layer}
         */
        disableHitGraph: function() {
            this.setHitGraphEnabled(false);
            return this;
        },
        setSize: function(width, height) {
            Konva.BaseLayer.prototype.setSize.call(this, width, height);
            this.hitCanvas.setSize(width, height);
        }
    });
    Konva.Util.extend(Konva.Layer, Konva.BaseLayer);

    Konva.Factory.addGetterSetter(Konva.Layer, 'hitGraphEnabled', true);
    /**
     * get/set hitGraphEnabled flag.  Disabling the hit graph will greatly increase
     *  draw performance because the hit graph will not be redrawn each time the layer is
     *  drawn.  This, however, also disables mouse/touch event detection
     * @name hitGraphEnabled
     * @method
     * @memberof Konva.Layer.prototype
     * @param {Boolean} enabled
     * @returns {Boolean}
     * @example
     * // get hitGraphEnabled flag
     * var hitGraphEnabled = layer.hitGraphEnabled();
     *
     * // disable hit graph
     * layer.hitGraphEnabled(false);
     *
     * // enable hit graph
     * layer.hitGraphEnabled(true);
     */
    Konva.Collection.mapMethods(Konva.Layer);
})();

(function() {
    'use strict';
    /**
     * FastLayer constructor. Layers are tied to their own canvas element and are used
     * to contain shapes only.  If you don't need node nesting, mouse and touch interactions,
     * or event pub/sub, you should use FastLayer instead of Layer to create your layers.
     * It renders about 2x faster than normal layers.
     * @constructor
     * @memberof Konva
     * @augments Konva.BaseLayer
     * @param {Object} config
     * @param {Boolean} [config.clearBeforeDraw] set this property to false if you don't want
     * to clear the canvas before each layer draw.  The default value is true.
     * @param {Boolean} [config.visible]
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * * @param {Object} [config.clip] set clip
     * @param {Number} [config.clipX] set clip x
     * @param {Number} [config.clipY] set clip y
     * @param {Number} [config.clipWidth] set clip width
     * @param {Number} [config.clipHeight] set clip height

     * @example
     * var layer = new Konva.FastLayer();
     */
    Konva.FastLayer = function(config) {
        this.____init(config);
    };

    Konva.Util.addMethods(Konva.FastLayer, {
        ____init: function(config) {
            this.nodeType = 'Layer';
            this.canvas = new Konva.SceneCanvas();
            // call super constructor
            Konva.BaseLayer.call(this, config);
        },
        _validateAdd: function(child) {
            var type = child.getType();
            if (type !== 'Shape') {
                Konva.Util.throw('You may only add shapes to a fast layer.');
            }
        },
        _setCanvasSize: function(width, height) {
            this.canvas.setSize(width, height);
        },
        hitGraphEnabled: function() {
            return false;
        },
        getIntersection: function() {
            return null;
        },
        drawScene: function(can) {
            var layer = this.getLayer(),
                canvas = can || (layer && layer.getCanvas());

            if(this.getClearBeforeDraw()) {
                canvas.getContext().clear();
            }

            Konva.Container.prototype.drawScene.call(this, canvas);

            return this;
        },
        draw: function() {
            this.drawScene();
            return this;
        },
        // extend Node.prototype.setVisible
        setVisible: function(visible) {
            Konva.Node.prototype.setVisible.call(this, visible);
            if(visible) {
                this.getCanvas()._canvas.style.display = 'block';
            }
            else {
                this.getCanvas()._canvas.style.display = 'none';
            }
            return this;
        }
    });
    Konva.Util.extend(Konva.FastLayer, Konva.BaseLayer);

    Konva.Collection.mapMethods(Konva.FastLayer);
})();

(function() {
    'use strict';
    /**
     * Group constructor.  Groups are used to contain shapes or other groups.
     * @constructor
     * @memberof Konva
     * @augments Konva.Container
     * @param {Object} config
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * * @param {Object} [config.clip] set clip
     * @param {Number} [config.clipX] set clip x
     * @param {Number} [config.clipY] set clip y
     * @param {Number} [config.clipWidth] set clip width
     * @param {Number} [config.clipHeight] set clip height

     * @example
     * var group = new Konva.Group();
     */
    Konva.Group = function(config) {
        this.___init(config);
    };

    Konva.Util.addMethods(Konva.Group, {
        ___init: function(config) {
            this.nodeType = 'Group';
            // call super constructor
            Konva.Container.call(this, config);
        },
        _validateAdd: function(child) {
            var type = child.getType();
            if (type !== 'Group' && type !== 'Shape') {
                Konva.Util.throw('You may only add groups and shapes to groups.');
            }
        }
    });
    Konva.Util.extend(Konva.Group, Konva.Container);

    Konva.Collection.mapMethods(Konva.Group);
})();

(function(Konva) {
    'use strict';
    var BATCH_DRAW_STOP_TIME_DIFF = 500;

    var now = (function() {
        if (Konva.root.performance && Konva.root.performance.now) {
            return function() {
                return Konva.root.performance.now();
            };
        }

        return function() {
            return new Date().getTime();
        };
    })();

    function FRAF(callback) {
        setTimeout(callback, 1000 / 60);
    }

    var RAF = (function(){
        return Konva.root.requestAnimationFrame
            || Konva.root.webkitRequestAnimationFrame
            || Konva.root.mozRequestAnimationFrame
            || Konva.root.oRequestAnimationFrame
            || Konva.root.msRequestAnimationFrame
            || FRAF;
    })();



    function requestAnimFrame() {
        return RAF.apply(Konva.root, arguments);
    }

    /**
     * Animation constructor.  A stage is used to contain multiple layers and handle
     * @constructor
     * @memberof Konva
     * @param {Function} func function executed on each animation frame.  The function is passed a frame object, which contains
     *  timeDiff, lastTime, time, and frameRate properties.  The timeDiff property is the number of milliseconds that have passed
     *  since the last animation frame.  The lastTime property is time in milliseconds that elapsed from the moment the animation started
     *  to the last animation frame.  The time property is the time in milliseconds that ellapsed from the moment the animation started
     *  to the current animation frame.  The frameRate property is the current frame rate in frames / second. Return false from function,
     *  if you don't need to redraw layer/layers on some frames.
     * @param {Konva.Layer|Array} [layers] layer(s) to be redrawn on each animation frame. Can be a layer, an array of layers, or null.
     *  Not specifying a node will result in no redraw.
     * @example
     * // move a node to the right at 50 pixels / second
     * var velocity = 50;
     *
     * var anim = new Konva.Animation(function(frame) {
     *   var dist = velocity * (frame.timeDiff / 1000);
     *   node.move(dist, 0);
     * }, layer);
     *
     * anim.start();
     */
    Konva.Animation = function(func, layers) {
        var Anim = Konva.Animation;
        this.func = func;
        this.setLayers(layers);
        this.id = Anim.animIdCounter++;
        this.frame = {
            time: 0,
            timeDiff: 0,
            lastTime: now()
        };
    };
    /*
     * Animation methods
     */
    Konva.Animation.prototype = {
        /**
         * set layers to be redrawn on each animation frame
         * @method
         * @memberof Konva.Animation.prototype
         * @param {Konva.Layer|Array} [layers] layer(s) to be redrawn.&nbsp; Can be a layer, an array of layers, or null.  Not specifying a node will result in no redraw.
         * @return {Konva.Animation} this
         */
        setLayers: function(layers) {
            var lays = [];
            // if passing in no layers
            if (!layers) {
                lays = [];
            }
            // if passing in an array of Layers
            // NOTE: layers could be an array or Konva.Collection.  for simplicity, I'm just inspecting
            // the length property to check for both cases
            else if (layers.length > 0) {
                lays = layers;
            }
            // if passing in a Layer
            else {
                lays = [layers];
            }

            this.layers = lays;
            return this;
        },
        /**
         * get layers
         * @method
         * @memberof Konva.Animation.prototype
         * @return {Array} Array of Konva.Layer
         */
        getLayers: function() {
            return this.layers;
        },
        /**
         * add layer.  Returns true if the layer was added, and false if it was not
         * @method
         * @memberof Konva.Animation.prototype
         * @param {Konva.Layer} layer to add
         * @return {Bool} true if layer is added to animation, otherwise false
         */
        addLayer: function(layer) {
            var layers = this.layers,
                len = layers.length, n;

            // don't add the layer if it already exists
            for (n = 0; n < len; n++) {
                if (layers[n]._id === layer._id){
                    return false;
                }
            }

            this.layers.push(layer);
            return true;
        },
        /**
         * determine if animation is running or not.  returns true or false
         * @method
         * @memberof Konva.Animation.prototype
         * @return {Bool} is animation running?
         */
        isRunning: function() {
            var a = Konva.Animation,
                animations = a.animations,
                len = animations.length,
                n;

            for(n = 0; n < len; n++) {
                if(animations[n].id === this.id) {
                    return true;
                }
            }
            return false;
        },
        /**
         * start animation
         * @method
         * @memberof Konva.Animation.prototype
         * @return {Konva.Animation} this
         */
        start: function() {
            var Anim = Konva.Animation;
            this.stop();
            this.frame.timeDiff = 0;
            this.frame.lastTime = now();
            Anim._addAnimation(this);
            return this;
        },
        /**
         * stop animation
         * @method
         * @memberof Konva.Animation.prototype
         * @return {Konva.Animation} this
         */
        stop: function() {
            Konva.Animation._removeAnimation(this);
            return this;
        },
        _updateFrameObject: function(time) {
            this.frame.timeDiff = time - this.frame.lastTime;
            this.frame.lastTime = time;
            this.frame.time += this.frame.timeDiff;
            this.frame.frameRate = 1000 / this.frame.timeDiff;
        }
    };
    Konva.Animation.animations = [];
    Konva.Animation.animIdCounter = 0;
    Konva.Animation.animRunning = false;

    Konva.Animation._addAnimation = function(anim) {
        this.animations.push(anim);
        this._handleAnimation();
    };
    Konva.Animation._removeAnimation = function(anim) {
        var id = anim.id,
            animations = this.animations,
            len = animations.length,
            n;

        for(n = 0; n < len; n++) {
            if(animations[n].id === id) {
                this.animations.splice(n, 1);
                break;
            }
        }
    };

    Konva.Animation._runFrames = function() {
        var layerHash = {},
            animations = this.animations,
            anim, layers, func, n, i, layersLen, layer, key, needRedraw;
        /*
         * loop through all animations and execute animation
         *  function.  if the animation object has specified node,
         *  we can add the node to the nodes hash to eliminate
         *  drawing the same node multiple times.  The node property
         *  can be the stage itself or a layer
         */
        /*
         * WARNING: don't cache animations.length because it could change while
         * the for loop is running, causing a JS error
         */

        for(n = 0; n < animations.length; n++) {
            anim = animations[n];
            layers = anim.layers;
            func = anim.func;


            anim._updateFrameObject(now());
            layersLen = layers.length;

            // if animation object has a function, execute it
            if (func) {
                // allow anim bypassing drawing
                needRedraw = (func.call(anim, anim.frame) !== false);
            } else {
                needRedraw = true;
            }
            if (!needRedraw) {
                continue;
            }
            for (i = 0; i < layersLen; i++) {
                layer = layers[i];

                if (layer._id !== undefined) {
                    layerHash[layer._id] = layer;
                }
            }
        }

        for (key in layerHash) {
            if (!layerHash.hasOwnProperty(key)) {
                continue;
            }
            layerHash[key].draw();
        }
    };
    Konva.Animation._animationLoop = function() {
        var Anim = Konva.Animation;
        if(Anim.animations.length) {
            requestAnimFrame(Anim._animationLoop);
            Anim._runFrames();
        }
        else {
            Anim.animRunning = false;
        }
    };
    Konva.Animation._handleAnimation = function() {
        if(!this.animRunning) {
            this.animRunning = true;
            this._animationLoop();
        }
    };

    var moveTo = Konva.Node.prototype.moveTo;
    Konva.Node.prototype.moveTo = function(container) {
        moveTo.call(this, container);
    };

    /**
     * batch draw
     * @method
     * @return {Konva.Layer} this
     * @memberof Konva.Base.prototype
     */
    Konva.BaseLayer.prototype.batchDraw = function() {
        var that = this,
            Anim = Konva.Animation;

        if (!this.batchAnim) {
            this.batchAnim = new Anim(function() {
                if (that.lastBatchDrawTime && now() - that.lastBatchDrawTime > BATCH_DRAW_STOP_TIME_DIFF) {
                    that.batchAnim.stop();
                }
            }, this);
        }

        this.lastBatchDrawTime = now();

        if (!this.batchAnim.isRunning()) {
            this.draw();
            this.batchAnim.start();
        }
        return this;
    };

    /**
     * batch draw
     * @method
     * @return {Konva.Stage} this
     * @memberof Konva.Stage.prototype
     */
    Konva.Stage.prototype.batchDraw = function() {
        this.getChildren().each(function(layer) {
            layer.batchDraw();
        });
        return this;
    };
})(Konva);

(function() {
    'use strict';
    var blacklist = {
        node: 1,
        duration: 1,
        easing: 1,
        onFinish: 1,
        yoyo: 1
    },

    PAUSED = 1,
    PLAYING = 2,
    REVERSING = 3,

    idCounter = 0,
    colorAttrs = ['fill', 'stroke', 'shadowColor'];

    var Tween = function(prop, propFunc, func, begin, finish, duration, yoyo) {
        this.prop = prop;
        this.propFunc = propFunc;
        this.begin = begin;
        this._pos = begin;
        this.duration = duration;
        this._change = 0;
        this.prevPos = 0;
        this.yoyo = yoyo;
        this._time = 0;
        this._position = 0;
        this._startTime = 0;
        this._finish = 0;
        this.func = func;
        this._change = finish - this.begin;
        this.pause();
    };
    /*
     * Tween methods
     */
    Tween.prototype = {
        fire: function(str) {
            var handler = this[str];
            if (handler) {
                handler();
            }
        },
        setTime: function(t) {
            if(t > this.duration) {
                if(this.yoyo) {
                    this._time = this.duration;
                    this.reverse();
                }
                else {
                    this.finish();
                }
            }
            else if(t < 0) {
                if(this.yoyo) {
                    this._time = 0;
                    this.play();
                }
                else {
                    this.reset();
                }
            }
            else {
                this._time = t;
                this.update();
            }
        },
        getTime: function() {
            return this._time;
        },
        setPosition: function(p) {
            this.prevPos = this._pos;
            this.propFunc(p);
            this._pos = p;
        },
        getPosition: function(t) {
            if(t === undefined) {
                t = this._time;
            }
            return this.func(t, this.begin, this._change, this.duration);
        },
        play: function() {
            this.state = PLAYING;
            this._startTime = this.getTimer() - this._time;
            this.onEnterFrame();
            this.fire('onPlay');
        },
        reverse: function() {
            this.state = REVERSING;
            this._time = this.duration - this._time;
            this._startTime = this.getTimer() - this._time;
            this.onEnterFrame();
            this.fire('onReverse');
        },
        seek: function(t) {
            this.pause();
            this._time = t;
            this.update();
            this.fire('onSeek');
        },
        reset: function() {
            this.pause();
            this._time = 0;
            this.update();
            this.fire('onReset');
        },
        finish: function() {
            this.pause();
            this._time = this.duration;
            this.update();
            this.fire('onFinish');
        },
        update: function() {
            this.setPosition(this.getPosition(this._time));
        },
        onEnterFrame: function() {
            var t = this.getTimer() - this._startTime;
            if(this.state === PLAYING) {
                this.setTime(t);
            }
            else if (this.state === REVERSING) {
                this.setTime(this.duration - t);
            }
        },
        pause: function() {
            this.state = PAUSED;
            this.fire('onPause');
        },
        getTimer: function() {
            return new Date().getTime();
        }
    };

    /**
     * Tween constructor.  Tweens enable you to animate a node between the current state and a new state.
     *  You can play, pause, reverse, seek, reset, and finish tweens.  By default, tweens are animated using
     *  a linear easing.  For more tweening options, check out {@link Konva.Easings}
     * @constructor
     * @memberof Konva
     * @example
     * // instantiate new tween which fully rotates a node in 1 second
     * var tween = new Konva.Tween({
     *   node: node,
     *   rotationDeg: 360,
     *   duration: 1,
     *   easing: Konva.Easings.EaseInOut
     * });
     *
     * // play tween
     * tween.play();
     *
     * // pause tween
     * tween.pause();
     */
    Konva.Tween = function(config) {
        var that = this,
            node = config.node,
            nodeId = node._id,
            duration,
            easing = config.easing || Konva.Easings.Linear,
            yoyo = !!config.yoyo,
            key;

        if (typeof config.duration === 'undefined') {
            duration = 1;
        } else if (config.duration === 0) {  // zero is bad value for duration
            duration = 0.001;
        } else {
            duration = config.duration;
        }
        this.node = node;
        this._id = idCounter++;

        this.anim = new Konva.Animation(function() {
            that.tween.onEnterFrame();
        }, node.getLayer() || ((node instanceof Konva.Stage) ? node.getLayers() : null));

        this.tween = new Tween(key, function(i) {
            that._tweenFunc(i);
        }, easing, 0, 1, duration * 1000, yoyo);

        this._addListeners();

        // init attrs map
        if (!Konva.Tween.attrs[nodeId]) {
            Konva.Tween.attrs[nodeId] = {};
        }
        if (!Konva.Tween.attrs[nodeId][this._id]) {
            Konva.Tween.attrs[nodeId][this._id] = {};
        }
        // init tweens map
        if (!Konva.Tween.tweens[nodeId]) {
            Konva.Tween.tweens[nodeId] = {};
        }

        for (key in config) {
            if (blacklist[key] === undefined) {
                this._addAttr(key, config[key]);
            }
        }

        this.reset();

        // callbacks
        this.onFinish = config.onFinish;
        this.onReset = config.onReset;
    };

    // start/diff object = attrs.nodeId.tweenId.attr
    Konva.Tween.attrs = {};
    // tweenId = tweens.nodeId.attr
    Konva.Tween.tweens = {};

    Konva.Tween.prototype = {
        _addAttr: function(key, end) {
            var node = this.node,
                nodeId = node._id,
                start, diff, tweenId, n, len, trueEnd, trueStart;

            // remove conflict from tween map if it exists
            tweenId = Konva.Tween.tweens[nodeId][key];

            if (tweenId) {
                delete Konva.Tween.attrs[nodeId][tweenId][key];
            }

            // add to tween map
            start = node.getAttr(key);

            if (Konva.Util._isArray(end)) {
                diff = [];
                len = Math.max(end.length, start.length);

                if (key === 'points' && end.length !== start.length) {
                    // before tweening points we need to make sure that start.length === end.length
                    // Konva.Util._prepareArrayForTween thinking that end.length > start.length

                    if (end.length > start.length) {
                        // so in this case we will increase number of starting points
                        trueStart = start;
                        start = Konva.Util._prepareArrayForTween(start, end, node.closed());
                    } else {
                        // in this case we will increase number of eding points
                        trueEnd = end;
                        end = Konva.Util._prepareArrayForTween(end, start, node.closed());
                    }
                }

                for (n = 0; n < len; n++) {
                    diff.push((end[n]) - (start[n]));
                }

            } else if (colorAttrs.indexOf(key) !== -1) {
                start = Konva.Util.colorToRGBA(start);
                var endRGBA = Konva.Util.colorToRGBA(end);
                diff = {
                    r: endRGBA.r - start.r,
                    g: endRGBA.g - start.g,
                    b: endRGBA.b - start.b,
                    a: endRGBA.a - start.a
                };
            } else {
                diff = end - start;
            }

            Konva.Tween.attrs[nodeId][this._id][key] = {
                start: start,
                diff: diff,
                end: end,
                trueEnd: trueEnd,
                trueStart: trueStart
            };
            Konva.Tween.tweens[nodeId][key] = this._id;
        },
        _tweenFunc: function(i) {
            var node = this.node,
                attrs = Konva.Tween.attrs[node._id][this._id],
                key, attr, start, diff, newVal, n, len, end;

            for (key in attrs) {
                attr = attrs[key];
                start = attr.start;
                diff = attr.diff;
                end = attr.end;

                if (Konva.Util._isArray(start)) {
                    newVal = [];
                    len = Math.max(start.length, end.length);
                    for (n = 0; n < len; n++) {
                        newVal.push((start[n] || 0) + (diff[n] * i));
                    }
                } else if (colorAttrs.indexOf(key) !== -1) {
                    newVal = 'rgba(' +
                            Math.round(start.r + diff.r * i) + ',' +
                            Math.round(start.g + diff.g * i) + ',' +
                            Math.round(start.b + diff.b * i) + ',' +
                            (start.a + diff.a * i) + ')';
                } else {
                    newVal = start + (diff * i);
                }

                node.setAttr(key, newVal);
            }
        },
        _addListeners: function() {
            var that = this;

            // start listeners
            this.tween.onPlay = function() {
                that.anim.start();
            };
            this.tween.onReverse = function() {
                that.anim.start();
            };

            // stop listeners
            this.tween.onPause = function() {
                that.anim.stop();
            };
            this.tween.onFinish = function() {
                var node = that.node;

                // after tweening  points of line we need to set original end
                var attrs = Konva.Tween.attrs[node._id][that._id];
                if (attrs.points && attrs.points.trueEnd) {
                    node.points(attrs.points.trueEnd);
                }

                if (that.onFinish) {
                    that.onFinish.call(that);
                }
            };
            this.tween.onReset = function() {
                var node = that.node;
                // after tweening  points of line we need to set original start
                var attrs = Konva.Tween.attrs[node._id][that._id];
                if (attrs.points && attrs.points.trueStart) {
                    node.points(attrs.points.trueStart);
                }

                if (that.onReset) {
                    that.onReset();
                }
            };
        },
        /**
         * play
         * @method
         * @memberof Konva.Tween.prototype
         * @returns {Tween}
         */
        play: function() {
            this.tween.play();
            return this;
        },
        /**
         * reverse
         * @method
         * @memberof Konva.Tween.prototype
         * @returns {Tween}
         */
        reverse: function() {
            this.tween.reverse();
            return this;
        },
        /**
         * reset
         * @method
         * @memberof Konva.Tween.prototype
         * @returns {Tween}
         */
        reset: function() {
            this.tween.reset();
            return this;
        },
        /**
         * seek
         * @method
         * @memberof Konva.Tween.prototype
         * @param {Integer} t time in seconds between 0 and the duration
         * @returns {Tween}
         */
        seek: function(t) {
            this.tween.seek(t * 1000);
            return this;
        },
        /**
         * pause
         * @method
         * @memberof Konva.Tween.prototype
         * @returns {Tween}
         */
        pause: function() {
            this.tween.pause();
            return this;
        },
        /**
         * finish
         * @method
         * @memberof Konva.Tween.prototype
         * @returns {Tween}
         */
        finish: function() {
            this.tween.finish();
            return this;
        },
        /**
         * destroy
         * @method
         * @memberof Konva.Tween.prototype
         */
        destroy: function() {
            var nodeId = this.node._id,
                thisId = this._id,
                attrs = Konva.Tween.tweens[nodeId],
                key;

            this.pause();

            for (key in attrs) {
                delete Konva.Tween.tweens[nodeId][key];
            }

            delete Konva.Tween.attrs[nodeId][thisId];
        }
    };

    /**
     * Tween node properties. Shorter usage of {@link Konva.Tween} object.
     *
     * @method Konva.Node#to
     * @memberof Konva.Node
     * @param {Object} [params] tween params
     * @example
     *
     * circle.to({
     *  x : 50,
     *  duration : 0.5
     * });
     */
    Konva.Node.prototype.to = function(params) {
        var onFinish = params.onFinish;
        params.node = this;
        params.onFinish = function() {
            this.destroy();
            if (onFinish) {
                onFinish();
            }
        };
        var tween = new Konva.Tween(params);
        tween.play();
    };

    /*
    * These eases were ported from an Adobe Flash tweening library to JavaScript
    * by Xaric
    */

    /**
     * @namespace Easings
     * @memberof Konva
     */
    Konva.Easings = {
        /**
        * back ease in
        * @function
        * @memberof Konva.Easings
        */
        'BackEaseIn': function(t, b, c, d) {
            var s = 1.70158;
            return c * (t /= d) * t * ((s + 1) * t - s) + b;
        },
        /**
        * back ease out
        * @function
        * @memberof Konva.Easings
        */
        'BackEaseOut': function(t, b, c, d) {
            var s = 1.70158;
            return c * (( t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
        },
        /**
        * back ease in out
        * @function
        * @memberof Konva.Easings
        */
        'BackEaseInOut': function(t, b, c, d) {
            var s = 1.70158;
            if((t /= d / 2) < 1) {
                return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;
            }
            return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;
        },
        /**
        * elastic ease in
        * @function
        * @memberof Konva.Easings
        */
        'ElasticEaseIn': function(t, b, c, d, a, p) {
            // added s = 0
            var s = 0;
            if(t === 0) {
                return b;
            }
            if((t /= d) === 1) {
                return b + c;
            }
            if(!p) {
                p = d * 0.3;
            }
            if(!a || a < Math.abs(c)) {
                a = c;
                s = p / 4;
            }
            else {
                s = p / (2 * Math.PI) * Math.asin(c / a);
            }
            return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
        },
        /**
        * elastic ease out
        * @function
        * @memberof Konva.Easings
        */
        'ElasticEaseOut': function(t, b, c, d, a, p) {
            // added s = 0
            var s = 0;
            if(t === 0) {
                return b;
            }
            if((t /= d) === 1) {
                return b + c;
            }
            if(!p) {
                p = d * 0.3;
            }
            if(!a || a < Math.abs(c)) {
                a = c;
                s = p / 4;
            }
            else {
                s = p / (2 * Math.PI) * Math.asin(c / a);
            }
            return (a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b);
        },
        /**
        * elastic ease in out
        * @function
        * @memberof Konva.Easings
        */
        'ElasticEaseInOut': function(t, b, c, d, a, p) {
            // added s = 0
            var s = 0;
            if(t === 0) {
                return b;
            }
            if((t /= d / 2) === 2) {
                return b + c;
            }
            if(!p) {
                p = d * (0.3 * 1.5);
            }
            if(!a || a < Math.abs(c)) {
                a = c;
                s = p / 4;
            }
            else {
                s = p / (2 * Math.PI) * Math.asin(c / a);
            }
            if(t < 1) {
                return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
            }
            return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;
        },
        /**
        * bounce ease out
        * @function
        * @memberof Konva.Easings
        */
        'BounceEaseOut': function(t, b, c, d) {
            if((t /= d) < (1 / 2.75)) {
                return c * (7.5625 * t * t) + b;
            }
            else if(t < (2 / 2.75)) {
                return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;
            }
            else if(t < (2.5 / 2.75)) {
                return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;
            }
            else {
                return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;
            }
        },
        /**
        * bounce ease in
        * @function
        * @memberof Konva.Easings
        */
        'BounceEaseIn': function(t, b, c, d) {
            return c - Konva.Easings.BounceEaseOut(d - t, 0, c, d) + b;
        },
        /**
        * bounce ease in out
        * @function
        * @memberof Konva.Easings
        */
        'BounceEaseInOut': function(t, b, c, d) {
            if(t < d / 2) {
                return Konva.Easings.BounceEaseIn(t * 2, 0, c, d) * 0.5 + b;
            }
            else {
                return Konva.Easings.BounceEaseOut(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
            }
        },
        /**
        * ease in
        * @function
        * @memberof Konva.Easings
        */
        'EaseIn': function(t, b, c, d) {
            return c * (t /= d) * t + b;
        },
        /**
        * ease out
        * @function
        * @memberof Konva.Easings
        */
        'EaseOut': function(t, b, c, d) {
            return -c * (t /= d) * (t - 2) + b;
        },
        /**
        * ease in out
        * @function
        * @memberof Konva.Easings
        */
        'EaseInOut': function(t, b, c, d) {
            if((t /= d / 2) < 1) {
                return c / 2 * t * t + b;
            }
            return -c / 2 * ((--t) * (t - 2) - 1) + b;
        },
        /**
        * strong ease in
        * @function
        * @memberof Konva.Easings
        */
        'StrongEaseIn': function(t, b, c, d) {
            return c * (t /= d) * t * t * t * t + b;
        },
        /**
        * strong ease out
        * @function
        * @memberof Konva.Easings
        */
        'StrongEaseOut': function(t, b, c, d) {
            return c * (( t = t / d - 1) * t * t * t * t + 1) + b;
        },
        /**
        * strong ease in out
        * @function
        * @memberof Konva.Easings
        */
        'StrongEaseInOut': function(t, b, c, d) {
            if((t /= d / 2) < 1) {
                return c / 2 * t * t * t * t * t + b;
            }
            return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
        },
        /**
        * linear
        * @function
        * @memberof Konva.Easings
        */
        'Linear': function(t, b, c, d) {
            return c * t / d + b;
        }
    };
})();

(function() {
    'use strict';
    Konva.DD = {
        // properties
        anim: new Konva.Animation(function() {
            var b = this.dirty;
            this.dirty = false;
            return b;
        }),
        isDragging: false,
        justDragged: false,
        offset: {
            x: 0,
            y: 0
        },
        node: null,

        // methods
        _drag: function(evt) {
            var dd = Konva.DD,
                node = dd.node;

            if(node) {
               if(!dd.isDragging) {
                    var pos = node.getStage().getPointerPosition();
                    var dragDistance = node.dragDistance();
                    var distance = Math.max(
                        Math.abs(pos.x - dd.startPointerPos.x),
                        Math.abs(pos.y - dd.startPointerPos.y)
                    );
                    if (distance < dragDistance) {
                        return;
                    }
                }


                node.getStage()._setPointerPosition(evt);
                node._setDragPosition(evt);
                if(!dd.isDragging) {
                    dd.isDragging = true;
                    node.fire('dragstart', {
                        type: 'dragstart',
                        target: node,
                        evt: evt
                    }, true);
                }

                // execute ondragmove if defined
                node.fire('dragmove', {
                    type: 'dragmove',
                    target: node,
                    evt: evt
                }, true);
            }
        },
        _endDragBefore: function(evt) {
            var dd = Konva.DD,
                node = dd.node,
                layer;

            if(node) {
                layer = node.getLayer();
                dd.anim.stop();

                // only fire dragend event if the drag and drop
                // operation actually started.
                if(dd.isDragging) {
                    dd.isDragging = false;
                    dd.justDragged = true;
                    Konva.listenClickTap = false;

                    if (evt) {
                        evt.dragEndNode = node;
                    }
                }

                delete dd.node;

                (layer || node).draw();
            }
        },
        _endDragAfter: function(evt) {
            evt = evt || {};
            var dragEndNode = evt.dragEndNode;

            if (evt && dragEndNode) {
                dragEndNode.fire('dragend', {
                    type: 'dragend',
                    target: dragEndNode,
                    evt: evt
                }, true);
            }
        }
    };

    // Node extenders

    /**
     * initiate drag and drop
     * @method
     * @memberof Konva.Node.prototype
     */
    Konva.Node.prototype.startDrag = function() {
        var dd = Konva.DD,
            stage = this.getStage(),
            layer = this.getLayer(),
            pos = stage.getPointerPosition(),
            ap = this.getAbsolutePosition();

        if(pos) {
            if (dd.node) {
                dd.node.stopDrag();
            }

            dd.node = this;
            dd.startPointerPos = pos;
            dd.offset.x = pos.x - ap.x;
            dd.offset.y = pos.y - ap.y;
            dd.anim.setLayers(layer || this.getLayers());
            dd.anim.start();

            this._setDragPosition();
        }
    };

    Konva.Node.prototype._setDragPosition = function(evt) {
        var dd = Konva.DD,
            pos = this.getStage().getPointerPosition(),
            dbf = this.getDragBoundFunc();
        if (!pos) {
            return;
        }
        var newNodePos = {
            x: pos.x - dd.offset.x,
            y: pos.y - dd.offset.y
        };

        if(dbf !== undefined) {
            newNodePos = dbf.call(this, newNodePos, evt);
        }
        this.setAbsolutePosition(newNodePos);

        if (!this._lastPos || this._lastPos.x !== newNodePos.x ||
            this._lastPos.y !== newNodePos.y) {
            dd.anim.dirty = true;
        }

        this._lastPos = newNodePos;
    };

    /**
     * stop drag and drop
     * @method
     * @memberof Konva.Node.prototype
     */
    Konva.Node.prototype.stopDrag = function() {
        var dd = Konva.DD,
            evt = {};
        dd._endDragBefore(evt);
        dd._endDragAfter(evt);
    };

    Konva.Node.prototype.setDraggable = function(draggable) {
        this._setAttr('draggable', draggable);
        this._dragChange();
    };

    var origDestroy = Konva.Node.prototype.destroy;

    Konva.Node.prototype.destroy = function() {
        var dd = Konva.DD;

        // stop DD
        if(dd.node && dd.node._id === this._id) {

            this.stopDrag();
        }

        origDestroy.call(this);
    };

    /**
     * determine if node is currently in drag and drop mode
     * @method
     * @memberof Konva.Node.prototype
     */
    Konva.Node.prototype.isDragging = function() {
        var dd = Konva.DD;
        return !!(dd.node && dd.node._id === this._id && dd.isDragging);
    };

    Konva.Node.prototype._listenDrag = function() {
        var that = this;

        this._dragCleanup();

        if (this.getClassName() === 'Stage') {
            this.on('contentMousedown.konva contentTouchstart.konva', function(evt) {
                if(!Konva.DD.node) {
                    that.startDrag(evt);
                }
            });
        }
        else {
            this.on('mousedown.konva touchstart.konva', function(evt) {
                // ignore right and middle buttons
                if (evt.evt.button === 1 || evt.evt.button === 2) {
                    return;
                }
                if(!Konva.DD.node) {
                    that.startDrag(evt);
                }
            });
        }

        // listening is required for drag and drop
        /*
        this._listeningEnabled = true;
        this._clearSelfAndAncestorCache('listeningEnabled');
        */
    };

    Konva.Node.prototype._dragChange = function() {
        if(this.attrs.draggable) {
            this._listenDrag();
        }
        else {
            // remove event listeners
            this._dragCleanup();

            /*
             * force drag and drop to end
             * if this node is currently in
             * drag and drop mode
             */
            var stage = this.getStage();
            var dd = Konva.DD;
            if(stage && dd.node && dd.node._id === this._id) {
                dd.node.stopDrag();
            }
        }
    };

    Konva.Node.prototype._dragCleanup = function() {
        if (this.getClassName() === 'Stage') {
            this.off('contentMousedown.konva');
            this.off('contentTouchstart.konva');
        } else {
            this.off('mousedown.konva');
            this.off('touchstart.konva');
        }
    };

    Konva.Factory.addGetterSetter(Konva.Node, 'dragBoundFunc');

    /**
     * get/set drag bound function.  This is used to override the default
     *  drag and drop position
     * @name dragBoundFunc
     * @method
     * @memberof Konva.Node.prototype
     * @param {Function} dragBoundFunc
     * @returns {Function}
     * @example
     * // get drag bound function
     * var dragBoundFunc = node.dragBoundFunc();
     *
     * // create vertical drag and drop
     * node.dragBoundFunc(function(pos){
     *   return {
     *     x: this.getAbsolutePosition().x,
     *     y: pos.y
     *   };
     * });
     */

    Konva.Factory.addGetter(Konva.Node, 'draggable', false);
    Konva.Factory.addOverloadedGetterSetter(Konva.Node, 'draggable');

     /**
     * get/set draggable flag
     * @name draggable
     * @method
     * @memberof Konva.Node.prototype
     * @param {Boolean} draggable
     * @returns {Boolean}
     * @example
     * // get draggable flag
     * var draggable = node.draggable();
     *
     * // enable drag and drop
     * node.draggable(true);
     *
     * // disable drag and drop
     * node.draggable(false);
     */

    var html = Konva.document.documentElement;
    html.addEventListener('mouseup', Konva.DD._endDragBefore, true);
    html.addEventListener('touchend', Konva.DD._endDragBefore, true);

    html.addEventListener('mousemove', Konva.DD._drag);
    html.addEventListener('touchmove', Konva.DD._drag);

    html.addEventListener('mouseup', Konva.DD._endDragAfter, false);
    html.addEventListener('touchend', Konva.DD._endDragAfter, false);

})();

(function() {
    'use strict';
    /**
     * Rect constructor
     * @constructor
     * @memberof Konva
     * @augments Konva.Shape
     * @param {Object} config
     * @param {Number} [config.cornerRadius]
     * @param {String} [config.fill] fill color
     * @param {Image} [config.fillPatternImage] fill pattern image
     * @param {Number} [config.fillPatternX]
     * @param {Number} [config.fillPatternY]
     * @param {Object} [config.fillPatternOffset] object with x and y component
     * @param {Number} [config.fillPatternOffsetX] 
     * @param {Number} [config.fillPatternOffsetY] 
     * @param {Object} [config.fillPatternScale] object with x and y component
     * @param {Number} [config.fillPatternScaleX]
     * @param {Number} [config.fillPatternScaleY]
     * @param {Number} [config.fillPatternRotation]
     * @param {String} [config.fillPatternRepeat] can be "repeat", "repeat-x", "repeat-y", or "no-repeat".  The default is "no-repeat"
     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientStartPointX]
     * @param {Number} [config.fillLinearGradientStartPointY]
     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientEndPointX]
     * @param {Number} [config.fillLinearGradientEndPointY]
     * @param {Array} [config.fillLinearGradientColorStops] array of color stops
     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientStartPointX]
     * @param {Number} [config.fillRadialGradientStartPointY]
     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientEndPointX] 
     * @param {Number} [config.fillRadialGradientEndPointY] 
     * @param {Number} [config.fillRadialGradientStartRadius]
     * @param {Number} [config.fillRadialGradientEndRadius]
     * @param {Array} [config.fillRadialGradientColorStops] array of color stops
     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true
     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration
     * @param {String} [config.stroke] stroke color
     * @param {Number} [config.strokeWidth] stroke width
     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true
     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true
     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true
     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true
     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true
     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default
     *  is miter
     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default
     *  is butt
     * @param {String} [config.shadowColor]
     * @param {Number} [config.shadowBlur]
     * @param {Object} [config.shadowOffset] object with x and y component
     * @param {Number} [config.shadowOffsetX]
     * @param {Number} [config.shadowOffsetY]
     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number
     *  between 0 and 1
     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true
     * @param {Array} [config.dash]
     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * var rect = new Konva.Rect({
     *   width: 100,
     *   height: 50,
     *   fill: 'red',
     *   stroke: 'black',
     *   strokeWidth: 5
     * });
     */
    Konva.Rect = function(config) {
        this.___init(config);
    };

    Konva.Rect.prototype = {
        ___init: function(config) {
            Konva.Shape.call(this, config);
            this.className = 'Rect';
            this.sceneFunc(this._sceneFunc);
        },
        _sceneFunc: function(context) {
            var cornerRadius = this.getCornerRadius(),
                width = this.getWidth(),
                height = this.getHeight();

            context.beginPath();

            if(!cornerRadius) {
                // simple rect - don't bother doing all that complicated maths stuff.
                context.rect(0, 0, width, height);
            } else {
                // arcTo would be nicer, but browser support is patchy (Opera)
                cornerRadius = Math.min(cornerRadius, width / 2, height / 2);
                context.moveTo(cornerRadius, 0);
                context.lineTo(width - cornerRadius, 0);
                context.arc(width - cornerRadius, cornerRadius, cornerRadius, Math.PI * 3 / 2, 0, false);
                context.lineTo(width, height - cornerRadius);
                context.arc(width - cornerRadius, height - cornerRadius, cornerRadius, 0, Math.PI / 2, false);
                context.lineTo(cornerRadius, height);
                context.arc(cornerRadius, height - cornerRadius, cornerRadius, Math.PI / 2, Math.PI, false);
                context.lineTo(0, cornerRadius);
                context.arc(cornerRadius, cornerRadius, cornerRadius, Math.PI, Math.PI * 3 / 2, false);
            }
            context.closePath();
            context.fillStrokeShape(this);
        }
    };

    Konva.Util.extend(Konva.Rect, Konva.Shape);

    Konva.Factory.addGetterSetter(Konva.Rect, 'cornerRadius', 0);
    /**
     * get/set corner radius
     * @name cornerRadius
     * @method
     * @memberof Konva.Rect.prototype
     * @param {Number} cornerRadius
     * @returns {Number}
     * @example
     * // get corner radius
     * var cornerRadius = rect.cornerRadius();
     *
     * // set corner radius
     * rect.cornerRadius(10);
     */

    Konva.Collection.mapMethods(Konva.Rect);
})();

(function() {
    'use strict';
    // the 0.0001 offset fixes a bug in Chrome 27
    var PIx2 = (Math.PI * 2) - 0.0001,
        CIRCLE = 'Circle';

    /**
     * Circle constructor
     * @constructor
     * @memberof Konva
     * @augments Konva.Shape
     * @param {Object} config
     * @param {Number} config.radius
     * @param {String} [config.fill] fill color
     * @param {Image} [config.fillPatternImage] fill pattern image
     * @param {Number} [config.fillPatternX]
     * @param {Number} [config.fillPatternY]
     * @param {Object} [config.fillPatternOffset] object with x and y component
     * @param {Number} [config.fillPatternOffsetX] 
     * @param {Number} [config.fillPatternOffsetY] 
     * @param {Object} [config.fillPatternScale] object with x and y component
     * @param {Number} [config.fillPatternScaleX]
     * @param {Number} [config.fillPatternScaleY]
     * @param {Number} [config.fillPatternRotation]
     * @param {String} [config.fillPatternRepeat] can be "repeat", "repeat-x", "repeat-y", or "no-repeat".  The default is "no-repeat"
     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientStartPointX]
     * @param {Number} [config.fillLinearGradientStartPointY]
     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientEndPointX]
     * @param {Number} [config.fillLinearGradientEndPointY]
     * @param {Array} [config.fillLinearGradientColorStops] array of color stops
     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientStartPointX]
     * @param {Number} [config.fillRadialGradientStartPointY]
     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientEndPointX] 
     * @param {Number} [config.fillRadialGradientEndPointY] 
     * @param {Number} [config.fillRadialGradientStartRadius]
     * @param {Number} [config.fillRadialGradientEndRadius]
     * @param {Array} [config.fillRadialGradientColorStops] array of color stops
     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true
     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration
     * @param {String} [config.stroke] stroke color
     * @param {Number} [config.strokeWidth] stroke width
     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true
     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true
     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true
     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true
     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true
     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default
     *  is miter
     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default
     *  is butt
     * @param {String} [config.shadowColor]
     * @param {Number} [config.shadowBlur]
     * @param {Object} [config.shadowOffset] object with x and y component
     * @param {Number} [config.shadowOffsetX]
     * @param {Number} [config.shadowOffsetY]
     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number
     *  between 0 and 1
     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true
     * @param {Array} [config.dash]
     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * // create circle
     * var circle = new Konva.Circle({
     *   radius: 40,
     *   fill: 'red',
     *   stroke: 'black'
     *   strokeWidth: 5
     * });
     */
    Konva.Circle = function(config) {
        this.___init(config);
    };

    Konva.Circle.prototype = {
        _centroid: true,
        ___init: function(config) {
            // call super constructor
            Konva.Shape.call(this, config);
            this.className = CIRCLE;
            this.sceneFunc(this._sceneFunc);
        },
        _sceneFunc: function(context) {
            context.beginPath();
            context.arc(0, 0, this.getRadius(), 0, PIx2, false);
            context.closePath();
            context.fillStrokeShape(this);
        },
        // implements Shape.prototype.getWidth()
        getWidth: function() {
            return this.getRadius() * 2;
        },
        // implements Shape.prototype.getHeight()
        getHeight: function() {
            return this.getRadius() * 2;
        },
        // implements Shape.prototype.setWidth()
        setWidth: function(width) {
            Konva.Node.prototype.setWidth.call(this, width);
            if (this.radius() !== width / 2) {
                this.setRadius(width / 2);
            }
        },
        // implements Shape.prototype.setHeight()
        setHeight: function(height) {
            Konva.Node.prototype.setHeight.call(this, height);
            if (this.radius() !== height / 2) {
                this.setRadius(height / 2);
            }
        }
    };
    Konva.Util.extend(Konva.Circle, Konva.Shape);

    // add getters setters
    Konva.Factory.addGetterSetter(Konva.Circle, 'radius', 0);
    Konva.Factory.addOverloadedGetterSetter(Konva.Circle, 'radius');

    /**
     * get/set radius
     * @name radius
     * @method
     * @memberof Konva.Circle.prototype
     * @param {Number} radius
     * @returns {Number}
     * @example
     * // get radius
     * var radius = circle.radius();
     *
     * // set radius
     * circle.radius(10);
     */

    Konva.Collection.mapMethods(Konva.Circle);
})();

(function() {
    'use strict';
    // the 0.0001 offset fixes a bug in Chrome 27
    var PIx2 = (Math.PI * 2) - 0.0001,
        ELLIPSE = 'Ellipse';

    /**
     * Ellipse constructor
     * @constructor
     * @augments Konva.Shape
     * @param {Object} config
     * @param {Object} config.radius defines x and y radius
     * @param {String} [config.fill] fill color
     * @param {Image} [config.fillPatternImage] fill pattern image
     * @param {Number} [config.fillPatternX]
     * @param {Number} [config.fillPatternY]
     * @param {Object} [config.fillPatternOffset] object with x and y component
     * @param {Number} [config.fillPatternOffsetX] 
     * @param {Number} [config.fillPatternOffsetY] 
     * @param {Object} [config.fillPatternScale] object with x and y component
     * @param {Number} [config.fillPatternScaleX]
     * @param {Number} [config.fillPatternScaleY]
     * @param {Number} [config.fillPatternRotation]
     * @param {String} [config.fillPatternRepeat] can be "repeat", "repeat-x", "repeat-y", or "no-repeat".  The default is "no-repeat"
     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientStartPointX]
     * @param {Number} [config.fillLinearGradientStartPointY]
     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientEndPointX]
     * @param {Number} [config.fillLinearGradientEndPointY]
     * @param {Array} [config.fillLinearGradientColorStops] array of color stops
     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientStartPointX]
     * @param {Number} [config.fillRadialGradientStartPointY]
     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientEndPointX] 
     * @param {Number} [config.fillRadialGradientEndPointY] 
     * @param {Number} [config.fillRadialGradientStartRadius]
     * @param {Number} [config.fillRadialGradientEndRadius]
     * @param {Array} [config.fillRadialGradientColorStops] array of color stops
     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true
     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration
     * @param {String} [config.stroke] stroke color
     * @param {Number} [config.strokeWidth] stroke width
     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true
     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true
     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true
     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true
     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true
     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default
     *  is miter
     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default
     *  is butt
     * @param {String} [config.shadowColor]
     * @param {Number} [config.shadowBlur]
     * @param {Object} [config.shadowOffset] object with x and y component
     * @param {Number} [config.shadowOffsetX]
     * @param {Number} [config.shadowOffsetY]
     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number
     *  between 0 and 1
     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true
     * @param {Array} [config.dash]
     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * var ellipse = new Konva.Ellipse({
     *   radius : {
     *     x : 50,
     *     y : 50
     *   },
     *   fill: 'red'
     * });
     */
    Konva.Ellipse = function(config) {
        this.___init(config);
    };

    Konva.Ellipse.prototype = {
        _centroid: true,
        ___init: function(config) {
            // call super constructor
            Konva.Shape.call(this, config);
            this.className = ELLIPSE;
            this.sceneFunc(this._sceneFunc);
        },
        _sceneFunc: function(context) {
            var rx = this.getRadiusX(),
                ry = this.getRadiusY();

            context.beginPath();
            context.save();
            if(rx !== ry) {
                context.scale(1, ry / rx);
            }
            context.arc(0, 0, rx, 0, PIx2, false);
            context.restore();
            context.closePath();
            context.fillStrokeShape(this);
        },
        // implements Shape.prototype.getWidth()
        getWidth: function() {
            return this.getRadiusX() * 2;
        },
        // implements Shape.prototype.getHeight()
        getHeight: function() {
            return this.getRadiusY() * 2;
        },
        // implements Shape.prototype.setWidth()
        setWidth: function(width) {
            Konva.Node.prototype.setWidth.call(this, width);
            this.setRadius({
                x: width / 2
            });
        },
        // implements Shape.prototype.setHeight()
        setHeight: function(height) {
            Konva.Node.prototype.setHeight.call(this, height);
            this.setRadius({
                y: height / 2
            });
        }
    };
    Konva.Util.extend(Konva.Ellipse, Konva.Shape);

    // add getters setters
    Konva.Factory.addComponentsGetterSetter(Konva.Ellipse, 'radius', ['x', 'y']);

    /**
     * get/set radius
     * @name radius
     * @method
     * @memberof Konva.Ellipse.prototype
     * @param {Object} radius
     * @param {Number} radius.x
     * @param {Number} radius.y
     * @returns {Object}
     * @example
     * // get radius
     * var radius = ellipse.radius();
     *
     * // set radius
     * ellipse.radius({
     *   x: 200,
     *   y: 100
     * });
     */

    Konva.Factory.addGetterSetter(Konva.Ellipse, 'radiusX', 0);
    /**
     * get/set radius x
     * @name radiusX
     * @method
     * @memberof Konva.Ellipse.prototype
     * @param {Number} x
     * @returns {Number}
     * @example
     * // get radius x
     * var radiusX = ellipse.radiusX();
     *
     * // set radius x
     * ellipse.radiusX(200);
     */

    Konva.Factory.addGetterSetter(Konva.Ellipse, 'radiusY', 0);
    /**
     * get/set radius y
     * @name radiusY
     * @method
     * @memberof Konva.Ellipse.prototype
     * @param {Number} y
     * @returns {Number}
     * @example
     * // get radius y
     * var radiusY = ellipse.radiusY();
     *
     * // set radius y
     * ellipse.radiusY(200);
     */

    Konva.Collection.mapMethods(Konva.Ellipse);

})();

(function() {
    'use strict';
    // the 0.0001 offset fixes a bug in Chrome 27
    var PIx2 = (Math.PI * 2) - 0.0001;
    /**
     * Ring constructor
     * @constructor
     * @augments Konva.Shape
     * @param {Object} config
     * @param {Number} config.innerRadius
     * @param {Number} config.outerRadius
     * @param {Boolean} [config.clockwise]
     * @param {String} [config.fill] fill color
     * @param {Image} [config.fillPatternImage] fill pattern image
     * @param {Number} [config.fillPatternX]
     * @param {Number} [config.fillPatternY]
     * @param {Object} [config.fillPatternOffset] object with x and y component
     * @param {Number} [config.fillPatternOffsetX] 
     * @param {Number} [config.fillPatternOffsetY] 
     * @param {Object} [config.fillPatternScale] object with x and y component
     * @param {Number} [config.fillPatternScaleX]
     * @param {Number} [config.fillPatternScaleY]
     * @param {Number} [config.fillPatternRotation]
     * @param {String} [config.fillPatternRepeat] can be "repeat", "repeat-x", "repeat-y", or "no-repeat".  The default is "no-repeat"
     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientStartPointX]
     * @param {Number} [config.fillLinearGradientStartPointY]
     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientEndPointX]
     * @param {Number} [config.fillLinearGradientEndPointY]
     * @param {Array} [config.fillLinearGradientColorStops] array of color stops
     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientStartPointX]
     * @param {Number} [config.fillRadialGradientStartPointY]
     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientEndPointX] 
     * @param {Number} [config.fillRadialGradientEndPointY] 
     * @param {Number} [config.fillRadialGradientStartRadius]
     * @param {Number} [config.fillRadialGradientEndRadius]
     * @param {Array} [config.fillRadialGradientColorStops] array of color stops
     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true
     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration
     * @param {String} [config.stroke] stroke color
     * @param {Number} [config.strokeWidth] stroke width
     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true
     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true
     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true
     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true
     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true
     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default
     *  is miter
     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default
     *  is butt
     * @param {String} [config.shadowColor]
     * @param {Number} [config.shadowBlur]
     * @param {Object} [config.shadowOffset] object with x and y component
     * @param {Number} [config.shadowOffsetX]
     * @param {Number} [config.shadowOffsetY]
     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number
     *  between 0 and 1
     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true
     * @param {Array} [config.dash]
     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * var ring = new Konva.Ring({
     *   innerRadius: 40,
     *   outerRadius: 80,
     *   fill: 'red',
     *   stroke: 'black',
     *   strokeWidth: 5
     * });
     */
    Konva.Ring = function(config) {
        this.___init(config);
    };

    Konva.Ring.prototype = {
        _centroid: true,
        ___init: function(config) {
            // call super constructor
            Konva.Shape.call(this, config);
            this.className = 'Ring';
            this.sceneFunc(this._sceneFunc);
        },
        _sceneFunc: function(context) {
            context.beginPath();
            context.arc(0, 0, this.getInnerRadius(), 0, PIx2, false);
            context.moveTo(this.getOuterRadius(), 0);
            context.arc(0, 0, this.getOuterRadius(), PIx2, 0, true);
            context.closePath();
            context.fillStrokeShape(this);
        },
        // implements Shape.prototype.getWidth()
        getWidth: function() {
            return this.getOuterRadius() * 2;
        },
        // implements Shape.prototype.getHeight()
        getHeight: function() {
            return this.getOuterRadius() * 2;
        },
        // implements Shape.prototype.setWidth()
        setWidth: function(width) {
            Konva.Node.prototype.setWidth.call(this, width);
            if (this.outerRadius() !== width / 2) {
                this.setOuterRadius(width / 2);
            }
        },
        // implements Shape.prototype.setHeight()
        setHeight: function(height) {
            Konva.Node.prototype.setHeight.call(this, height);
            if (this.outerRadius() !== height / 2) {
                this.setOuterRadius(height / 2);
            }
        },
        setOuterRadius: function(val) {
            this._setAttr('outerRadius', val);
            this.setWidth(val * 2);
            this.setHeight(val * 2);
        }
    };
    Konva.Util.extend(Konva.Ring, Konva.Shape);

    // add getters setters
    Konva.Factory.addGetterSetter(Konva.Ring, 'innerRadius', 0);

    /**
     * get/set innerRadius
     * @name innerRadius
     * @method
     * @memberof Konva.Ring.prototype
     * @param {Number} innerRadius
     * @returns {Number}
     * @example
     * // get inner radius
     * var innerRadius = ring.innerRadius();
     *
     * // set inner radius
     * ring.innerRadius(20);
     */
    Konva.Factory.addGetter(Konva.Ring, 'outerRadius', 0);
    Konva.Factory.addOverloadedGetterSetter(Konva.Ring, 'outerRadius');

    /**
     * get/set outerRadius
     * @name outerRadius
     * @method
     * @memberof Konva.Ring.prototype
     * @param {Number} outerRadius
     * @returns {Number}
     * @example
     * // get outer radius
     * var outerRadius = ring.outerRadius();
     *
     * // set outer radius
     * ring.outerRadius(20);
     */

    Konva.Collection.mapMethods(Konva.Ring);
})();

(function() {
    'use strict';
    /**
     * Wedge constructor
     * @constructor
     * @augments Konva.Shape
     * @param {Object} config
     * @param {Number} config.angle in degrees
     * @param {Number} config.radius
     * @param {Boolean} [config.clockwise]
     * @param {String} [config.fill] fill color
     * @param {Image} [config.fillPatternImage] fill pattern image
     * @param {Number} [config.fillPatternX]
     * @param {Number} [config.fillPatternY]
     * @param {Object} [config.fillPatternOffset] object with x and y component
     * @param {Number} [config.fillPatternOffsetX] 
     * @param {Number} [config.fillPatternOffsetY] 
     * @param {Object} [config.fillPatternScale] object with x and y component
     * @param {Number} [config.fillPatternScaleX]
     * @param {Number} [config.fillPatternScaleY]
     * @param {Number} [config.fillPatternRotation]
     * @param {String} [config.fillPatternRepeat] can be "repeat", "repeat-x", "repeat-y", or "no-repeat".  The default is "no-repeat"
     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientStartPointX]
     * @param {Number} [config.fillLinearGradientStartPointY]
     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientEndPointX]
     * @param {Number} [config.fillLinearGradientEndPointY]
     * @param {Array} [config.fillLinearGradientColorStops] array of color stops
     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientStartPointX]
     * @param {Number} [config.fillRadialGradientStartPointY]
     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientEndPointX] 
     * @param {Number} [config.fillRadialGradientEndPointY] 
     * @param {Number} [config.fillRadialGradientStartRadius]
     * @param {Number} [config.fillRadialGradientEndRadius]
     * @param {Array} [config.fillRadialGradientColorStops] array of color stops
     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true
     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration
     * @param {String} [config.stroke] stroke color
     * @param {Number} [config.strokeWidth] stroke width
     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true
     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true
     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true
     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true
     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true
     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default
     *  is miter
     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default
     *  is butt
     * @param {String} [config.shadowColor]
     * @param {Number} [config.shadowBlur]
     * @param {Object} [config.shadowOffset] object with x and y component
     * @param {Number} [config.shadowOffsetX]
     * @param {Number} [config.shadowOffsetY]
     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number
     *  between 0 and 1
     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true
     * @param {Array} [config.dash]
     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * // draw a wedge that's pointing downwards
     * var wedge = new Konva.Wedge({
     *   radius: 40,
     *   fill: 'red',
     *   stroke: 'black'
     *   strokeWidth: 5,
     *   angleDeg: 60,
     *   rotationDeg: -120
     * });
     */
    Konva.Wedge = function(config) {
        this.___init(config);
    };

    Konva.Wedge.prototype = {
        _centroid: true,
        ___init: function(config) {
            // call super constructor
            Konva.Shape.call(this, config);
            this.className = 'Wedge';
            this.sceneFunc(this._sceneFunc);
        },
        _sceneFunc: function(context) {
            context.beginPath();
            context.arc(0, 0, this.getRadius(), 0, Konva.getAngle(this.getAngle()), this.getClockwise());
            context.lineTo(0, 0);
            context.closePath();
            context.fillStrokeShape(this);
        },
        // implements Shape.prototype.getWidth()
        getWidth: function() {
            return this.getRadius() * 2;
        },
        // implements Shape.prototype.getHeight()
        getHeight: function() {
            return this.getRadius() * 2;
        },
        // implements Shape.prototype.setWidth()
        setWidth: function(width) {
            Konva.Node.prototype.setWidth.call(this, width);
            if (this.radius() !== width / 2) {
                this.setRadius(width / 2);
            }
        },
        // implements Shape.prototype.setHeight()
        setHeight: function(height) {
            Konva.Node.prototype.setHeight.call(this, height);
            if (this.radius() !== height / 2) {
                this.setRadius(height / 2);
            }
        }
    };
    Konva.Util.extend(Konva.Wedge, Konva.Shape);

    // add getters setters
    Konva.Factory.addGetterSetter(Konva.Wedge, 'radius', 0);

    /**
     * get/set radius
     * @name radius
     * @method
     * @memberof Konva.Wedge.prototype
     * @param {Number} radius
     * @returns {Number}
     * @example
     * // get radius
     * var radius = wedge.radius();
     *
     * // set radius
     * wedge.radius(10);
     */

    Konva.Factory.addGetterSetter(Konva.Wedge, 'angle', 0);

    /**
     * get/set angle in degrees
     * @name angle
     * @method
     * @memberof Konva.Wedge.prototype
     * @param {Number} angle
     * @returns {Number}
     * @example
     * // get angle
     * var angle = wedge.angle();
     *
     * // set angle
     * wedge.angle(20);
     */

    Konva.Factory.addGetterSetter(Konva.Wedge, 'clockwise', false);

    /**
     * get/set clockwise flag
     * @name clockwise
     * @method
     * @memberof Konva.Wedge.prototype
     * @param {Number} clockwise
     * @returns {Number}
     * @example
     * // get clockwise flag
     * var clockwise = wedge.clockwise();
     *
     * // draw wedge counter-clockwise
     * wedge.clockwise(false);
     *
     * // draw wedge clockwise
     * wedge.clockwise(true);
     */

    Konva.Factory.backCompat(Konva.Wedge, {
        angleDeg: 'angle',
        getAngleDeg: 'getAngle',
        setAngleDeg: 'setAngle'
    });

    Konva.Collection.mapMethods(Konva.Wedge);
})();

(function() {
    'use strict';
    /**
     * Arc constructor
     * @constructor
     * @augments Konva.Shape
     * @param {Object} config
     * @param {Number} config.angle in degrees
     * @param {Number} config.innerRadius
     * @param {Number} config.outerRadius
     * @param {Boolean} [config.clockwise]
     * @param {String} [config.fill] fill color
     * @param {Image} [config.fillPatternImage] fill pattern image
     * @param {Number} [config.fillPatternX]
     * @param {Number} [config.fillPatternY]
     * @param {Object} [config.fillPatternOffset] object with x and y component
     * @param {Number} [config.fillPatternOffsetX] 
     * @param {Number} [config.fillPatternOffsetY] 
     * @param {Object} [config.fillPatternScale] object with x and y component
     * @param {Number} [config.fillPatternScaleX]
     * @param {Number} [config.fillPatternScaleY]
     * @param {Number} [config.fillPatternRotation]
     * @param {String} [config.fillPatternRepeat] can be "repeat", "repeat-x", "repeat-y", or "no-repeat".  The default is "no-repeat"
     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientStartPointX]
     * @param {Number} [config.fillLinearGradientStartPointY]
     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientEndPointX]
     * @param {Number} [config.fillLinearGradientEndPointY]
     * @param {Array} [config.fillLinearGradientColorStops] array of color stops
     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientStartPointX]
     * @param {Number} [config.fillRadialGradientStartPointY]
     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientEndPointX] 
     * @param {Number} [config.fillRadialGradientEndPointY] 
     * @param {Number} [config.fillRadialGradientStartRadius]
     * @param {Number} [config.fillRadialGradientEndRadius]
     * @param {Array} [config.fillRadialGradientColorStops] array of color stops
     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true
     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration
     * @param {String} [config.stroke] stroke color
     * @param {Number} [config.strokeWidth] stroke width
     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true
     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true
     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true
     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true
     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true
     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default
     *  is miter
     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default
     *  is butt
     * @param {String} [config.shadowColor]
     * @param {Number} [config.shadowBlur]
     * @param {Object} [config.shadowOffset] object with x and y component
     * @param {Number} [config.shadowOffsetX]
     * @param {Number} [config.shadowOffsetY]
     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number
     *  between 0 and 1
     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true
     * @param {Array} [config.dash]
     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * // draw a Arc that's pointing downwards
     * var arc = new Konva.Arc({
     *   innerRadius: 40,
     *   outerRadius: 80,
     *   fill: 'red',
     *   stroke: 'black'
     *   strokeWidth: 5,
     *   angle: 60,
     *   rotationDeg: -120
     * });
     */
    Konva.Arc = function(config) {
        this.___init(config);
    };

    Konva.Arc.prototype = {
        _centroid: true,
        ___init: function(config) {
            // call super constructor
            Konva.Shape.call(this, config);
            this.className = 'Arc';
            this.sceneFunc(this._sceneFunc);
        },
        _sceneFunc: function(context) {
            var angle = Konva.getAngle(this.angle()),
                clockwise = this.clockwise();

            context.beginPath();
            context.arc(0, 0, this.getOuterRadius(), 0, angle, clockwise);
            context.arc(0, 0, this.getInnerRadius(), angle, 0, !clockwise);
            context.closePath();
            context.fillStrokeShape(this);
        },
        // implements Shape.prototype.getWidth()
        getWidth: function() {
            return this.getOuterRadius() * 2;
        },
        // implements Shape.prototype.getHeight()
        getHeight: function() {
            return this.getOuterRadius() * 2;
        },
        // implements Shape.prototype.setWidth()
        setWidth: function(width) {
            Konva.Node.prototype.setWidth.call(this, width);
            if (this.getOuterRadius() !== width / 2) {
                this.setOuterRadius(width / 2);
            }
        },
        // implements Shape.prototype.setHeight()
        setHeight: function(height) {
            Konva.Node.prototype.setHeight.call(this, height);
            if (this.getOuterRadius() !== height / 2) {
                this.setOuterRadius(height / 2);
            }
        }
    };
    Konva.Util.extend(Konva.Arc, Konva.Shape);

    // add getters setters
    Konva.Factory.addGetterSetter(Konva.Arc, 'innerRadius', 0);

    /**
     * get/set innerRadius
     * @name innerRadius
     * @method
     * @memberof Konva.Arc.prototype
     * @param {Number} innerRadius
     * @returns {Number}
     * @example
     * // get inner radius
     * var innerRadius = arc.innerRadius();
     *
     * // set inner radius
     * arc.innerRadius(20);
     */

    Konva.Factory.addGetterSetter(Konva.Arc, 'outerRadius', 0);

    /**
     * get/set outerRadius
     * @name outerRadius
     * @method
     * @memberof Konva.Arc.prototype
     * @param {Number} outerRadius
     * @returns {Number}
     * @example
     * // get outer radius
     * var outerRadius = arc.outerRadius();
     *
     * // set outer radius
     * arc.outerRadius(20);
     */

    Konva.Factory.addGetterSetter(Konva.Arc, 'angle', 0);

    /**
     * get/set angle in degrees
     * @name angle
     * @method
     * @memberof Konva.Arc.prototype
     * @param {Number} angle
     * @returns {Number}
     * @example
     * // get angle
     * var angle = arc.angle();
     *
     * // set angle
     * arc.angle(20);
     */

    Konva.Factory.addGetterSetter(Konva.Arc, 'clockwise', false);

    /**
     * get/set clockwise flag
     * @name clockwise
     * @method
     * @memberof Konva.Arc.prototype
     * @param {Boolean} clockwise
     * @returns {Boolean}
     * @example
     * // get clockwise flag
     * var clockwise = arc.clockwise();
     *
     * // draw arc counter-clockwise
     * arc.clockwise(false);
     *
     * // draw arc clockwise
     * arc.clockwise(true);
     */

    Konva.Collection.mapMethods(Konva.Arc);
})();

(function() {
    'use strict';
    // CONSTANTS
    var IMAGE = 'Image';

    /**
     * Image constructor
     * @constructor
     * @memberof Konva
     * @augments Konva.Shape
     * @param {Object} config
     * @param {Image} config.image
     * @param {Object} [config.crop]
     * @param {String} [config.fill] fill color
     * @param {Image} [config.fillPatternImage] fill pattern image
     * @param {Number} [config.fillPatternX]
     * @param {Number} [config.fillPatternY]
     * @param {Object} [config.fillPatternOffset] object with x and y component
     * @param {Number} [config.fillPatternOffsetX] 
     * @param {Number} [config.fillPatternOffsetY] 
     * @param {Object} [config.fillPatternScale] object with x and y component
     * @param {Number} [config.fillPatternScaleX]
     * @param {Number} [config.fillPatternScaleY]
     * @param {Number} [config.fillPatternRotation]
     * @param {String} [config.fillPatternRepeat] can be "repeat", "repeat-x", "repeat-y", or "no-repeat".  The default is "no-repeat"
     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientStartPointX]
     * @param {Number} [config.fillLinearGradientStartPointY]
     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientEndPointX]
     * @param {Number} [config.fillLinearGradientEndPointY]
     * @param {Array} [config.fillLinearGradientColorStops] array of color stops
     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientStartPointX]
     * @param {Number} [config.fillRadialGradientStartPointY]
     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientEndPointX] 
     * @param {Number} [config.fillRadialGradientEndPointY] 
     * @param {Number} [config.fillRadialGradientStartRadius]
     * @param {Number} [config.fillRadialGradientEndRadius]
     * @param {Array} [config.fillRadialGradientColorStops] array of color stops
     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true
     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration
     * @param {String} [config.stroke] stroke color
     * @param {Number} [config.strokeWidth] stroke width
     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true
     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true
     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true
     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true
     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true
     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default
     *  is miter
     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default
     *  is butt
     * @param {String} [config.shadowColor]
     * @param {Number} [config.shadowBlur]
     * @param {Object} [config.shadowOffset] object with x and y component
     * @param {Number} [config.shadowOffsetX]
     * @param {Number} [config.shadowOffsetY]
     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number
     *  between 0 and 1
     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true
     * @param {Array} [config.dash]
     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * var imageObj = new Image();
     * imageObj.onload = function() {
     *   var image = new Konva.Image({
     *     x: 200,
     *     y: 50,
     *     image: imageObj,
     *     width: 100,
     *     height: 100
     *   });
     * };
     * imageObj.src = '/path/to/image.jpg'
     */
    Konva.Image = function(config) {
        this.___init(config);
    };

    Konva.Image.prototype = {
        ___init: function(config) {
            // call super constructor
            Konva.Shape.call(this, config);
            this.className = IMAGE;
            this.sceneFunc(this._sceneFunc);
            this.hitFunc(this._hitFunc);
        },
        _useBufferCanvas: function() {
            return (this.hasShadow() || this.getAbsoluteOpacity() !== 1) && this.hasStroke() && this.getStage();
        },
        _sceneFunc: function(context) {
            var width = this.getWidth(),
                height = this.getHeight(),
                image = this.getImage(),
                cropWidth, cropHeight, params;

            if (image) {
                cropWidth = this.getCropWidth();
                cropHeight = this.getCropHeight();
                if (cropWidth && cropHeight) {
                    params = [image, this.getCropX(), this.getCropY(), cropWidth, cropHeight, 0, 0, width, height];
                } else {
                    params = [image, 0, 0, width, height];
                }
            }

            if (this.hasFill() || this.hasStroke()) {
                context.beginPath();
                context.rect(0, 0, width, height);
                context.closePath();
                context.fillStrokeShape(this);
            }

            if (image) {
                context.drawImage.apply(context, params);
            }
        },
        _hitFunc: function(context) {
            var width = this.getWidth(),
                height = this.getHeight();

            context.beginPath();
            context.rect(0, 0, width, height);
            context.closePath();
            context.fillStrokeShape(this);
        },
        getWidth: function() {
            var image = this.getImage();
            return this.attrs.width || (image ? image.width : 0);
        },
        getHeight: function() {
            var image = this.getImage();
            return this.attrs.height || (image ? image.height : 0);
        }
    };
    Konva.Util.extend(Konva.Image, Konva.Shape);

    // add getters setters
    Konva.Factory.addGetterSetter(Konva.Image, 'image');

    /**
     * set image
     * @name setImage
     * @method
     * @memberof Konva.Image.prototype
     * @param {Image} image
     */

    /**
     * get image
     * @name getImage
     * @method
     * @memberof Konva.Image.prototype
     * @returns {Image}
     */

    Konva.Factory.addComponentsGetterSetter(Konva.Image, 'crop', ['x', 'y', 'width', 'height']);
    /**
     * get/set crop
     * @method
     * @name crop
     * @memberof Konva.Image.prototype
     * @param {Object} crop
     * @param {Number} crop.x
     * @param {Number} crop.y
     * @param {Number} crop.width
     * @param {Number} crop.height
     * @returns {Object}
     * @example
     * // get crop
     * var crop = image.crop();
     *
     * // set crop
     * image.crop({
     *   x: 20,
     *   y: 20,
     *   width: 20,
     *   height: 20
     * });
     */

    Konva.Factory.addGetterSetter(Konva.Image, 'cropX', 0);
    /**
     * get/set crop x
     * @method
     * @name cropX
     * @memberof Konva.Image.prototype
     * @param {Number} x
     * @returns {Number}
     * @example
     * // get crop x
     * var cropX = image.cropX();
     *
     * // set crop x
     * image.cropX(20);
     */

    Konva.Factory.addGetterSetter(Konva.Image, 'cropY', 0);
    /**
     * get/set crop y
     * @name cropY
     * @method
     * @memberof Konva.Image.prototype
     * @param {Number} y
     * @returns {Number}
     * @example
     * // get crop y
     * var cropY = image.cropY();
     *
     * // set crop y
     * image.cropY(20);
     */

    Konva.Factory.addGetterSetter(Konva.Image, 'cropWidth', 0);
    /**
     * get/set crop width
     * @name cropWidth
     * @method
     * @memberof Konva.Image.prototype
     * @param {Number} width
     * @returns {Number}
     * @example
     * // get crop width
     * var cropWidth = image.cropWidth();
     *
     * // set crop width
     * image.cropWidth(20);
     */

    Konva.Factory.addGetterSetter(Konva.Image, 'cropHeight', 0);
    /**
     * get/set crop height
     * @name cropHeight
     * @method
     * @memberof Konva.Image.prototype
     * @param {Number} height
     * @returns {Number}
     * @example
     * // get crop height
     * var cropHeight = image.cropHeight();
     *
     * // set crop height
     * image.cropHeight(20);
     */

    Konva.Collection.mapMethods(Konva.Image);

    /**
     * load image from given url and create `Konva.Image` instance
     * @method
     * @memberof Konva.Image
     * @param {String} url image source
     * @param {Function} callback with Konva.Image instance as first argument
     * @example
     *  Konva.Image.fromURL(imageURL, function(image){
     *    // image is Konva.Image instance
     *    layer.add(image);
     *    layer.draw();
     *  });
     */
    Konva.Image.fromURL = function(url, callback) {
        var img = new Image();
        img.onload = function() {
          var image = new Konva.Image({
            image: img
          });
          callback(image);
        };
        img.src = url;
    };
})();

/*eslint-disable max-depth */
(function() {
    'use strict';
    // constants
    var AUTO = 'auto',
        //CANVAS = 'canvas',
        CENTER = 'center',
        CHANGE_KONVA = 'Change.konva',
        CONTEXT_2D = '2d',
        DASH = '-',
        EMPTY_STRING = '',
        LEFT = 'left',
        TEXT = 'text',
        TEXT_UPPER = 'Text',
        MIDDLE = 'middle',
        NORMAL = 'normal',
        PX_SPACE = 'px ',
        SPACE = ' ',
        RIGHT = 'right',
        WORD = 'word',
        CHAR = 'char',
        NONE = 'none',
        ATTR_CHANGE_LIST = ['fontFamily', 'fontSize', 'fontStyle', 'fontVariant', 'padding', 'align', 'lineHeight', 'text', 'width', 'height', 'wrap'],

        // cached variables
        attrChangeListLen = ATTR_CHANGE_LIST.length,
        dummyContext = Konva.Util.createCanvasElement().getContext(CONTEXT_2D);

    /**
     * Text constructor
     * @constructor
     * @memberof Konva
     * @augments Konva.Shape
     * @param {Object} config
     * @param {String} [config.fontFamily] default is Arial
     * @param {Number} [config.fontSize] in pixels.  Default is 12
     * @param {String} [config.fontStyle] can be normal, bold, or italic.  Default is normal
     * @param {String} [config.fontVariant] can be normal or small-caps.  Default is normal
     * @param {String} config.text
     * @param {String} [config.align] can be left, center, or right
     * @param {Number} [config.padding]
     * @param {Number} [config.width] default is auto
     * @param {Number} [config.height] default is auto
     * @param {Number} [config.lineHeight] default is 1
     * @param {String} [config.wrap] can be word, char, or none. Default is word
     * @param {String} [config.fill] fill color
     * @param {Image} [config.fillPatternImage] fill pattern image
     * @param {Number} [config.fillPatternX]
     * @param {Number} [config.fillPatternY]
     * @param {Object} [config.fillPatternOffset] object with x and y component
     * @param {Number} [config.fillPatternOffsetX] 
     * @param {Number} [config.fillPatternOffsetY] 
     * @param {Object} [config.fillPatternScale] object with x and y component
     * @param {Number} [config.fillPatternScaleX]
     * @param {Number} [config.fillPatternScaleY]
     * @param {Number} [config.fillPatternRotation]
     * @param {String} [config.fillPatternRepeat] can be "repeat", "repeat-x", "repeat-y", or "no-repeat".  The default is "no-repeat"
     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientStartPointX]
     * @param {Number} [config.fillLinearGradientStartPointY]
     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientEndPointX]
     * @param {Number} [config.fillLinearGradientEndPointY]
     * @param {Array} [config.fillLinearGradientColorStops] array of color stops
     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientStartPointX]
     * @param {Number} [config.fillRadialGradientStartPointY]
     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientEndPointX] 
     * @param {Number} [config.fillRadialGradientEndPointY] 
     * @param {Number} [config.fillRadialGradientStartRadius]
     * @param {Number} [config.fillRadialGradientEndRadius]
     * @param {Array} [config.fillRadialGradientColorStops] array of color stops
     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true
     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration
     * @param {String} [config.stroke] stroke color
     * @param {Number} [config.strokeWidth] stroke width
     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true
     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true
     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true
     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true
     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true
     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default
     *  is miter
     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default
     *  is butt
     * @param {String} [config.shadowColor]
     * @param {Number} [config.shadowBlur]
     * @param {Object} [config.shadowOffset] object with x and y component
     * @param {Number} [config.shadowOffsetX]
     * @param {Number} [config.shadowOffsetY]
     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number
     *  between 0 and 1
     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true
     * @param {Array} [config.dash]
     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * var text = new Konva.Text({
     *   x: 10,
     *   y: 15,
     *   text: 'Simple Text',
     *   fontSize: 30,
     *   fontFamily: 'Calibri',
     *   fill: 'green'
     * });
     */
    Konva.Text = function(config) {
        this.___init(config);
    };
    function _fillFunc(context) {
        context.fillText(this.partialText, 0, 0);
    }
    function _strokeFunc(context) {
        context.strokeText(this.partialText, 0, 0);
    }

    Konva.Text.prototype = {
        ___init: function(config) {
            config = config || {};

            // set default color to black
            if (!config.fillLinearGradientColorStops && !config.fillRadialGradientColorStops) {
                config.fill = config.fill || 'black';
            }

            if (config.width === undefined) {
                config.width = AUTO;
            }
            if (config.height === undefined) {
                config.height = AUTO;
            }

            // call super constructor
            Konva.Shape.call(this, config);

            this._fillFunc = _fillFunc;
            this._strokeFunc = _strokeFunc;
            this.className = TEXT_UPPER;

            // update text data for certain attr changes
            for(var n = 0; n < attrChangeListLen; n++) {
                this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);
            }

            this._setTextData();
            this.sceneFunc(this._sceneFunc);
            this.hitFunc(this._hitFunc);
        },
        _sceneFunc: function(context) {
            var p = this.getPadding(),
                textHeight = this.getTextHeight(),
                lineHeightPx = this.getLineHeight() * textHeight,
                textArr = this.textArr,
                textArrLen = textArr.length,
                totalWidth = this.getWidth(),
                n;

            context.setAttr('font', this._getContextFont());

            context.setAttr('textBaseline', MIDDLE);
            context.setAttr('textAlign', LEFT);
            context.save();
            if (p) {
                context.translate(p, 0);
                context.translate(0, p + textHeight / 2);
            } else {
                context.translate(0, textHeight / 2);
            }


            // draw text lines
            for(n = 0; n < textArrLen; n++) {
                var obj = textArr[n],
                    text = obj.text,
                    width = obj.width;

                // horizontal alignment
                context.save();
                if(this.getAlign() === RIGHT) {
                    context.translate(totalWidth - width - p * 2, 0);
                }
                else if(this.getAlign() === CENTER) {
                    context.translate((totalWidth - width - p * 2) / 2, 0);
                }

                this.partialText = text;

                context.fillStrokeShape(this);
                context.restore();
                context.translate(0, lineHeightPx);
            }
            context.restore();
        },
        _hitFunc: function(context) {
            var width = this.getWidth(),
                height = this.getHeight();

            context.beginPath();
            context.rect(0, 0, width, height);
            context.closePath();
            context.fillStrokeShape(this);
        },
        setText: function(text) {
            var str = Konva.Util._isString(text) ? text : text.toString();
            this._setAttr(TEXT, str);
            return this;
        },
        /**
         * get width of text area, which includes padding
         * @method
         * @memberof Konva.Text.prototype
         * @returns {Number}
         */
        getWidth: function() {
            return this.attrs.width === AUTO ? this.getTextWidth() + this.getPadding() * 2 : this.attrs.width;
        },
        /**
         * get the height of the text area, which takes into account multi-line text, line heights, and padding
         * @method
         * @memberof Konva.Text.prototype
         * @returns {Number}
         */
        getHeight: function() {
            return this.attrs.height === AUTO ? (this.getTextHeight() * this.textArr.length * this.getLineHeight()) + this.getPadding() * 2 : this.attrs.height;
        },
        /**
         * get text width
         * @method
         * @memberof Konva.Text.prototype
         * @returns {Number}
         */
        getTextWidth: function() {
            return this.textWidth;
        },
        /**
         * get text height
         * @method
         * @memberof Konva.Text.prototype
         * @returns {Number}
         */
        getTextHeight: function() {
            return this.textHeight;
        },
        _getTextSize: function(text) {
            var _context = dummyContext,
                fontSize = this.getFontSize(),
                metrics;

            _context.save();
            _context.font = this._getContextFont();

            metrics = _context.measureText(text);
            _context.restore();
            return {
                width: metrics.width,
                height: parseInt(fontSize, 10)
            };
        },
        _getContextFont: function() {
            return this.getFontStyle() + SPACE + this.getFontVariant() + SPACE + this.getFontSize() + PX_SPACE + this.getFontFamily();
        },
        _addTextLine: function (line, width) {
            return this.textArr.push({text: line, width: width});
        },
        _getTextWidth: function (text) {
            return dummyContext.measureText(text).width;
        },
        _setTextData: function () {
            var lines = this.getText().split('\n'),
                fontSize = +this.getFontSize(),
                textWidth = 0,
                lineHeightPx = this.getLineHeight() * fontSize,
                width = this.attrs.width,
                height = this.attrs.height,
                fixedWidth = width !== AUTO,
                fixedHeight = height !== AUTO,
                padding = this.getPadding(),
                maxWidth = width - padding * 2,
                maxHeightPx = height - padding * 2,
                currentHeightPx = 0,
                wrap = this.getWrap(),
                shouldWrap = wrap !== NONE,
                wrapAtWord = wrap !== CHAR && shouldWrap;

            this.textArr = [];
            dummyContext.save();
            dummyContext.font = this._getContextFont();
            for (var i = 0, max = lines.length; i < max; ++i) {
                var line = lines[i],
                    lineWidth = this._getTextWidth(line);
                if (fixedWidth && lineWidth > maxWidth) {
                    /*
                     * if width is fixed and line does not fit entirely
                     * break the line into multiple fitting lines
                     */
                    while (line.length > 0) {
                        /*
                         * use binary search to find the longest substring that
                         * that would fit in the specified width
                         */
                        var low = 0, high = line.length,
                            match = '', matchWidth = 0;
                        while (low < high) {
                            var mid = (low + high) >>> 1,
                                substr = line.slice(0, mid + 1),
                                substrWidth = this._getTextWidth(substr);
                            if (substrWidth <= maxWidth) {
                                low = mid + 1;
                                match = substr;
                                matchWidth = substrWidth;
                            } else {
                                high = mid;
                            }
                        }
                        /*
                         * 'low' is now the index of the substring end
                         * 'match' is the substring
                         * 'matchWidth' is the substring width in px
                         */
                        if (match) {
                            // a fitting substring was found
                            if (wrapAtWord) {
                                // try to find a space or dash where wrapping could be done
                                var wrapIndex = Math.max(match.lastIndexOf(SPACE),
                                                          match.lastIndexOf(DASH)) + 1;
                                if (wrapIndex > 0) {
                                    // re-cut the substring found at the space/dash position
                                    low = wrapIndex;
                                    match = match.slice(0, low);
                                    matchWidth = this._getTextWidth(match);
                                }
                            }
                            this._addTextLine(match, matchWidth);
                            textWidth = Math.max(textWidth, matchWidth);
                            currentHeightPx += lineHeightPx;
                            if (!shouldWrap ||
                                (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx)) {
                                /*
                                 * stop wrapping if wrapping is disabled or if adding
                                 * one more line would overflow the fixed height
                                 */
                                break;
                            }
                            line = line.slice(low);
                            if (line.length > 0) {
                                // Check if the remaining text would fit on one line
                                lineWidth = this._getTextWidth(line);
                                if (lineWidth <= maxWidth) {
                                    // if it does, add the line and break out of the loop
                                    this._addTextLine(line, lineWidth);
                                    currentHeightPx += lineHeightPx;
                                    textWidth = Math.max(textWidth, lineWidth);
                                    break;
                                }
                            }
                        } else {
                            // not even one character could fit in the element, abort
                            break;
                        }
                    }
                } else {
                    // element width is automatically adjusted to max line width
                    this._addTextLine(line, lineWidth);
                    currentHeightPx += lineHeightPx;
                    textWidth = Math.max(textWidth, lineWidth);
                }
                // if element height is fixed, abort if adding one more line would overflow
                if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {
                    break;
                }
            }
            dummyContext.restore();
            this.textHeight = fontSize;
            this.textWidth = textWidth;
        }
    };
    Konva.Util.extend(Konva.Text, Konva.Shape);

    // add getters setters
    Konva.Factory.addGetterSetter(Konva.Text, 'fontFamily', 'Arial');

    /**
     * get/set font family
     * @name fontFamily
     * @method
     * @memberof Konva.Text.prototype
     * @param {String} fontFamily
     * @returns {String}
     * @example
     * // get font family
     * var fontFamily = text.fontFamily();
     *
     * // set font family
     * text.fontFamily('Arial');
     */

    Konva.Factory.addGetterSetter(Konva.Text, 'fontSize', 12);

    /**
     * get/set font size in pixels
     * @name fontSize
     * @method
     * @memberof Konva.Text.prototype
     * @param {Number} fontSize
     * @returns {Number}
     * @example
     * // get font size
     * var fontSize = text.fontSize();
     *
     * // set font size to 22px
     * text.fontSize(22);
     */

    Konva.Factory.addGetterSetter(Konva.Text, 'fontStyle', NORMAL);

    /**
     * set font style.  Can be 'normal', 'italic', or 'bold'.  'normal' is the default.
     * @name fontStyle
     * @method
     * @memberof Konva.Text.prototype
     * @param {String} fontStyle
     * @returns {String}
     * @example
     * // get font style
     * var fontStyle = text.fontStyle();
     *
     * // set font style
     * text.fontStyle('bold');
     */

    Konva.Factory.addGetterSetter(Konva.Text, 'fontVariant', NORMAL);

    /**
     * set font variant.  Can be 'normal' or 'small-caps'.  'normal' is the default.
     * @name fontVariant
     * @method
     * @memberof Konva.Text.prototype
     * @param {String} fontVariant
     * @returns {String}
     * @example
     * // get font variant
     * var fontVariant = text.fontVariant();
     *
     * // set font variant
     * text.fontVariant('small-caps');
     */

    Konva.Factory.addGetterSetter(Konva.Text, 'padding', 0);

    /**
     * set padding
     * @name padding
     * @method
     * @memberof Konva.Text.prototype
     * @param {Number} padding
     * @returns {Number}
     * @example
     * // get padding
     * var padding = text.padding();
     *
     * // set padding to 10 pixels
     * text.padding(10);
     */

    Konva.Factory.addGetterSetter(Konva.Text, 'align', LEFT);

    /**
     * get/set horizontal align of text.  Can be 'left', 'center', or 'right'
     * @name align
     * @method
     * @memberof Konva.Text.prototype
     * @param {String} align
     * @returns {String}
     * @example
     * // get text align
     * var align = text.align();
     *
     * // center text
     * text.align('center');
     *
     * // align text to right
     * text.align('right');
     */

    Konva.Factory.addGetterSetter(Konva.Text, 'lineHeight', 1);

    /**
     * get/set line height.  The default is 1.
     * @name lineHeight
     * @method
     * @memberof Konva.Text.prototype
     * @param {Number} lineHeight
     * @returns {Number}
     * @example
     * // get line height
     * var lineHeight = text.lineHeight();
     *
     * // set the line height
     * text.lineHeight(2);
     */

    Konva.Factory.addGetterSetter(Konva.Text, 'wrap', WORD);

    /**
     * get/set wrap.  Can be word, char, or none. Default is word.
     * @name wrap
     * @method
     * @memberof Konva.Text.prototype
     * @param {String} wrap
     * @returns {String}
     * @example
     * // get wrap
     * var wrap = text.wrap();
     *
     * // set wrap
     * text.wrap('word');
     */

    Konva.Factory.addGetter(Konva.Text, 'text', EMPTY_STRING);
    Konva.Factory.addOverloadedGetterSetter(Konva.Text, 'text');

    /**
     * get/set text
     * @name getText
     * @method
     * @memberof Konva.Text.prototype
     * @param {String} text
     * @returns {String}
     * @example
     * // get text
     * var text = text.text();
     *
     * // set text
     * text.text('Hello world!');
     */

    Konva.Collection.mapMethods(Konva.Text);
})();

(function () {
    'use strict';
    /**
     * Line constructor.&nbsp; Lines are defined by an array of points and
     *  a tension
     * @constructor
     * @memberof Konva
     * @augments Konva.Shape
     * @param {Object} config
     * @param {Array} config.points
     * @param {Number} [config.tension] Higher values will result in a more curvy line.  A value of 0 will result in no interpolation.
     *   The default is 0
     * @param {Boolean} [config.closed] defines whether or not the line shape is closed, creating a polygon or blob
     * @param {String} [config.fill] fill color
     * @param {Image} [config.fillPatternImage] fill pattern image
     * @param {Number} [config.fillPatternX]
     * @param {Number} [config.fillPatternY]
     * @param {Object} [config.fillPatternOffset] object with x and y component
     * @param {Number} [config.fillPatternOffsetX] 
     * @param {Number} [config.fillPatternOffsetY] 
     * @param {Object} [config.fillPatternScale] object with x and y component
     * @param {Number} [config.fillPatternScaleX]
     * @param {Number} [config.fillPatternScaleY]
     * @param {Number} [config.fillPatternRotation]
     * @param {String} [config.fillPatternRepeat] can be "repeat", "repeat-x", "repeat-y", or "no-repeat".  The default is "no-repeat"
     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientStartPointX]
     * @param {Number} [config.fillLinearGradientStartPointY]
     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientEndPointX]
     * @param {Number} [config.fillLinearGradientEndPointY]
     * @param {Array} [config.fillLinearGradientColorStops] array of color stops
     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientStartPointX]
     * @param {Number} [config.fillRadialGradientStartPointY]
     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientEndPointX] 
     * @param {Number} [config.fillRadialGradientEndPointY] 
     * @param {Number} [config.fillRadialGradientStartRadius]
     * @param {Number} [config.fillRadialGradientEndRadius]
     * @param {Array} [config.fillRadialGradientColorStops] array of color stops
     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true
     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration
     * @param {String} [config.stroke] stroke color
     * @param {Number} [config.strokeWidth] stroke width
     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true
     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true
     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true
     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true
     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true
     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default
     *  is miter
     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default
     *  is butt
     * @param {String} [config.shadowColor]
     * @param {Number} [config.shadowBlur]
     * @param {Object} [config.shadowOffset] object with x and y component
     * @param {Number} [config.shadowOffsetX]
     * @param {Number} [config.shadowOffsetY]
     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number
     *  between 0 and 1
     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true
     * @param {Array} [config.dash]
     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * var line = new Konva.Line({
     *   x: 100,
     *   y: 50,
     *   points: [73, 70, 340, 23, 450, 60, 500, 20],
     *   stroke: 'red',
     *   tension: 1
     * });
     */
    Konva.Line = function (config) {
        this.___init(config);
    };

    Konva.Line.prototype = {
        ___init: function (config) {
            // call super constructor
            Konva.Shape.call(this, config);
            this.className = 'Line';

            this.on('pointsChange.konva tensionChange.konva closedChange.konva', function () {
                this._clearCache('tensionPoints');
            });

            this.sceneFunc(this._sceneFunc);
        },
        _sceneFunc: function (context) {
            var points = this.getPoints(),
                length = points.length,
                tension = this.getTension(),
                closed = this.getClosed(),
                tp, len, n;

            if (!length) {
                return;
            }

            context.beginPath();
            context.moveTo(points[0], points[1]);

            // tension
            if (tension !== 0 && length > 4) {
                tp = this.getTensionPoints();
                len = tp.length;
                n = closed ? 0 : 4;

                if (!closed) {
                    context.quadraticCurveTo(tp[0], tp[1], tp[2], tp[3]);
                }

                while (n < len - 2) {
                    context.bezierCurveTo(tp[n++], tp[n++], tp[n++], tp[n++], tp[n++], tp[n++]);
                }

                if (!closed) {
                    context.quadraticCurveTo(tp[len - 2], tp[len - 1], points[length - 2], points[length - 1]);
                }
            }
            // no tension
            else {
                for (n = 2; n < length; n += 2) {
                    context.lineTo(points[n], points[n + 1]);
                }
            }

            // closed e.g. polygons and blobs
            if (closed) {
                context.closePath();
                context.fillStrokeShape(this);
            }
            // open e.g. lines and splines
            else {
                context.strokeShape(this);
            }
        },
        getTensionPoints: function () {
            return this._getCache('tensionPoints', this._getTensionPoints);
        },
        _getTensionPoints: function () {
            if (this.getClosed()) {
                return this._getTensionPointsClosed();
            } else {
                return Konva.Util._expandPoints(this.getPoints(), this.getTension());
            }
        },
        _getTensionPointsClosed: function () {
            var p = this.getPoints(),
                len = p.length,
                tension = this.getTension(),
                util = Konva.Util,
                firstControlPoints = util._getControlPoints(
                    p[len - 2],
                    p[len - 1],
                    p[0],
                    p[1],
                    p[2],
                    p[3],
                    tension
                ),
                lastControlPoints = util._getControlPoints(
                    p[len - 4],
                    p[len - 3],
                    p[len - 2],
                    p[len - 1],
                    p[0],
                    p[1],
                    tension
                ),
                middle = Konva.Util._expandPoints(p, tension),
                tp = [
                    firstControlPoints[2],
                    firstControlPoints[3]
                ]
                .concat(middle)
                .concat([
                    lastControlPoints[0],
                    lastControlPoints[1],
                    p[len - 2],
                    p[len - 1],
                    lastControlPoints[2],
                    lastControlPoints[3],
                    firstControlPoints[0],
                    firstControlPoints[1],
                    p[0],
                    p[1]
                ]);

            return tp;
        },
        getWidth: function () {
            return this.getSelfRect().width;
        },
        getHeight: function () {
            return this.getSelfRect().height;
        },
        // overload size detection
        getSelfRect: function () {
            var points;
            if (this.getTension() !== 0) {
                points = this._getTensionPoints();
            } else {
                points = this.getPoints();
            }
            var minX = points[0];
            var maxX = points[0];
            var minY = points[1];
            var maxY = points[1];
            var x, y;
            for (var i = 0; i < points.length / 2; i++) {
                x = points[i * 2];
                y = points[i * 2 + 1];
                minX = Math.min(minX, x);
                maxX = Math.max(maxX, x);
                minY = Math.min(minY, y);
                maxY = Math.max(maxY, y);
            }
            return {
                x: Math.round(minX),
                y: Math.round(minY),
                width: Math.round(maxX - minX),
                height: Math.round(maxY - minY)
            };
        }
    };
    Konva.Util.extend(Konva.Line, Konva.Shape);

    // add getters setters
    Konva.Factory.addGetterSetter(Konva.Line, 'closed', false);

    /**
     * get/set closed flag.  The default is false
     * @name closed
     * @method
     * @memberof Konva.Line.prototype
     * @param {Boolean} closed
     * @returns {Boolean}
     * @example
     * // get closed flag
     * var closed = line.closed();
     *
     * // close the shape
     * line.closed(true);
     *
     * // open the shape
     * line.closed(false);
     */

    Konva.Factory.addGetterSetter(Konva.Line, 'tension', 0);

    /**
     * get/set tension
     * @name tension
     * @method
     * @memberof Konva.Line.prototype
     * @param {Number} Higher values will result in a more curvy line.  A value of 0 will result in no interpolation.
     *   The default is 0
     * @returns {Number}
     * @example
     * // get tension
     * var tension = line.tension();
     *
     * // set tension
     * line.tension(3);
     */

    Konva.Factory.addGetterSetter(Konva.Line, 'points', []);
    /**
     * get/set points array
     * @name points
     * @method
     * @memberof Konva.Line.prototype
     * @param {Array} points
     * @returns {Array}
     * @example
     * // get points
     * var points = line.points();
     *
     * // set points
     * line.points([10, 20, 30, 40, 50, 60]);
     *
     * // push a new point
     * line.points(line.points().concat([70, 80]));
     */

    Konva.Collection.mapMethods(Konva.Line);
})();

(function() {
    'use strict';
    /**
     * Sprite constructor
     * @constructor
     * @memberof Konva
     * @augments Konva.Shape
     * @param {Object} config
     * @param {String} config.animation animation key
     * @param {Object} config.animations animation map
     * @param {Integer} [config.frameIndex] animation frame index
     * @param {Image} config.image image object
     * @param {String} [config.fill] fill color
     * @param {Image} [config.fillPatternImage] fill pattern image
     * @param {Number} [config.fillPatternX]
     * @param {Number} [config.fillPatternY]
     * @param {Object} [config.fillPatternOffset] object with x and y component
     * @param {Number} [config.fillPatternOffsetX] 
     * @param {Number} [config.fillPatternOffsetY] 
     * @param {Object} [config.fillPatternScale] object with x and y component
     * @param {Number} [config.fillPatternScaleX]
     * @param {Number} [config.fillPatternScaleY]
     * @param {Number} [config.fillPatternRotation]
     * @param {String} [config.fillPatternRepeat] can be "repeat", "repeat-x", "repeat-y", or "no-repeat".  The default is "no-repeat"
     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientStartPointX]
     * @param {Number} [config.fillLinearGradientStartPointY]
     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientEndPointX]
     * @param {Number} [config.fillLinearGradientEndPointY]
     * @param {Array} [config.fillLinearGradientColorStops] array of color stops
     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientStartPointX]
     * @param {Number} [config.fillRadialGradientStartPointY]
     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientEndPointX] 
     * @param {Number} [config.fillRadialGradientEndPointY] 
     * @param {Number} [config.fillRadialGradientStartRadius]
     * @param {Number} [config.fillRadialGradientEndRadius]
     * @param {Array} [config.fillRadialGradientColorStops] array of color stops
     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true
     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration
     * @param {String} [config.stroke] stroke color
     * @param {Number} [config.strokeWidth] stroke width
     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true
     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true
     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true
     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true
     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true
     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default
     *  is miter
     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default
     *  is butt
     * @param {String} [config.shadowColor]
     * @param {Number} [config.shadowBlur]
     * @param {Object} [config.shadowOffset] object with x and y component
     * @param {Number} [config.shadowOffsetX]
     * @param {Number} [config.shadowOffsetY]
     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number
     *  between 0 and 1
     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true
     * @param {Array} [config.dash]
     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * var imageObj = new Image();
     * imageObj.onload = function() {
     *   var sprite = new Konva.Sprite({
     *     x: 200,
     *     y: 100,
     *     image: imageObj,
     *     animation: 'standing',
     *     animations: {
     *       standing: [
     *         // x, y, width, height (6 frames)
     *         0, 0, 49, 109,
     *         52, 0, 49, 109,
     *         105, 0, 49, 109,
     *         158, 0, 49, 109,
     *         210, 0, 49, 109,
     *         262, 0, 49, 109
     *       ],
     *       kicking: [
     *         // x, y, width, height (6 frames)
     *         0, 109, 45, 98,
     *         45, 109, 45, 98,
     *         95, 109, 63, 98,
     *         156, 109, 70, 98,
     *         229, 109, 60, 98,
     *         287, 109, 41, 98
     *       ]
     *     },
     *     frameRate: 7,
     *     frameIndex: 0
     *   });
     * };
     * imageObj.src = '/path/to/image.jpg'
     */
    Konva.Sprite = function(config) {
        this.___init(config);
    };

    Konva.Sprite.prototype = {
        ___init: function(config) {
            // call super constructor
            Konva.Shape.call(this, config);
            this.className = 'Sprite';

            this._updated = true;
            var that = this;
            this.anim = new Konva.Animation(function() {
                // if we don't need to redraw layer we should return false
                var updated = that._updated;
                that._updated = false;
                return updated;
            });
            this.on('animationChange.konva', function() {
                // reset index when animation changes
                this.frameIndex(0);
            });
            this.on('frameIndexChange.konva', function() {
                this._updated = true;
            });
            // smooth change for frameRate
            this.on('frameRateChange.konva', function() {
                if (!this.anim.isRunning()) {
                    return;
                }
                clearInterval(this.interval);
                this._setInterval();
            });

            this.sceneFunc(this._sceneFunc);
            this.hitFunc(this._hitFunc);
        },
        _sceneFunc: function(context) {
            var anim = this.getAnimation(),
                index = this.frameIndex(),
                ix4 = index * 4,
                set = this.getAnimations()[anim],
                offsets = this.frameOffsets(),
                x = set[ix4 + 0],
                y = set[ix4 + 1],
                width = set[ix4 + 2],
                height = set[ix4 + 3],
                shapeWidth = this.width(),
                shapeHeight = this.height(),
                image = this.getImage();

            if (this.hasFill() || this.hasStroke()) {
                context.beginPath();
                context.rect(0, 0, shapeWidth, shapeHeight);
                context.closePath();
                context.fillStrokeShape(this);
            }

            if(image) {
                if (offsets) {
                    var offset = offsets[anim],
                    ix2 = index * 2;
                    context.drawImage(image, x, y, width, height, offset[ix2 + 0], offset[ix2 + 1], shapeWidth, shapeHeight);
                } else {
                    context.drawImage(image, x, y, width, height, 0, 0, shapeWidth, shapeHeight);
                }
            }
        },
        _hitFunc: function(context) {
            var anim = this.getAnimation(),
                index = this.frameIndex(),
                ix4 = index * 4,
                set = this.getAnimations()[anim],
                offsets = this.frameOffsets(),
                shapeWidth = this.width(),
                shapeHeight = this.height();

            context.beginPath();
            if (offsets) {
                var offset = offsets[anim];
                var ix2 = index * 2;
                context.rect(offset[ix2 + 0], offset[ix2 + 1], shapeWidth, shapeHeight);
            } else {
                context.rect(0, 0, shapeWidth, shapeHeight);
            }
            context.closePath();
            context.fillShape(this);
        },
        _useBufferCanvas: function() {
            return (this.hasShadow() || this.getAbsoluteOpacity() !== 1) && this.hasStroke();
        },
        _setInterval: function() {
            var that = this;
            this.interval = setInterval(function() {
                that._updateIndex();
            }, 1000 / this.getFrameRate());
        },
        /**
         * start sprite animation
         * @method
         * @memberof Konva.Sprite.prototype
         */
        start: function() {
            var layer = this.getLayer();

            /*
             * animation object has no executable function because
             *  the updates are done with a fixed FPS with the setInterval
             *  below.  The anim object only needs the layer reference for
             *  redraw
             */
            this.anim.setLayers(layer);
            this._setInterval();
            this.anim.start();
        },
        /**
         * stop sprite animation
         * @method
         * @memberof Konva.Sprite.prototype
         */
        stop: function() {
            this.anim.stop();
            clearInterval(this.interval);
        },
        /**
         * determine if animation of sprite is running or not.  returns true or false
         * @method
         * @memberof Konva.Animation.prototype
         * @returns {Boolean}
         */
        isRunning: function() {
            return this.anim.isRunning();
        },
        _updateIndex: function() {
            var index = this.frameIndex(),
                animation = this.getAnimation(),
                animations = this.getAnimations(),
                anim = animations[animation],
                len = anim.length / 4;

            if(index < len - 1) {
                this.frameIndex(index + 1);
            }
            else {
                this.frameIndex(0);
            }
        }
    };
    Konva.Util.extend(Konva.Sprite, Konva.Shape);

    // add getters setters
    Konva.Factory.addGetterSetter(Konva.Sprite, 'animation');

    /**
     * get/set animation key
     * @name animation
     * @method
     * @memberof Konva.Sprite.prototype
     * @param {String} anim animation key
     * @returns {String}
     * @example
     * // get animation key
     * var animation = sprite.animation();
     *
     * // set animation key
     * sprite.animation('kicking');
     */

    Konva.Factory.addGetterSetter(Konva.Sprite, 'animations');

    /**
     * get/set animations map
     * @name animations
     * @method
     * @memberof Konva.Sprite.prototype
     * @param {Object} animations
     * @returns {Object}
     * @example
     * // get animations map
     * var animations = sprite.animations();
     *
     * // set animations map
     * sprite.animations({
     *   standing: [
     *     // x, y, width, height (6 frames)
     *     0, 0, 49, 109,
     *     52, 0, 49, 109,
     *     105, 0, 49, 109,
     *     158, 0, 49, 109,
     *     210, 0, 49, 109,
     *     262, 0, 49, 109
     *   ],
     *   kicking: [
     *     // x, y, width, height (6 frames)
     *     0, 109, 45, 98,
     *     45, 109, 45, 98,
     *     95, 109, 63, 98,
     *     156, 109, 70, 98,
     *     229, 109, 60, 98,
     *     287, 109, 41, 98
     *   ]
     * });
     */

    Konva.Factory.addGetterSetter(Konva.Sprite, 'frameOffsets');

    /**
    * get/set offsets map
    * @name offsets
    * @method
    * @memberof Konva.Sprite.prototype
    * @param {Object} offsets
    * @returns {Object}
    * @example
    * // get offsets map
    * var offsets = sprite.offsets();
    *
    * // set offsets map
    * sprite.offsets({
    *   standing: [
    *     // x, y (6 frames)
    *     0, 0,
    *     0, 0,
    *     5, 0,
    *     0, 0,
    *     0, 3,
    *     2, 0
    *   ],
    *   kicking: [
    *     // x, y (6 frames)
    *     0, 5,
    *     5, 0,
    *     10, 0,
    *     0, 0,
    *     2, 1,
    *     0, 0
    *   ]
    * });
    */

    Konva.Factory.addGetterSetter(Konva.Sprite, 'image');

    /**
     * get/set image
     * @name image
     * @method
     * @memberof Konva.Sprite.prototype
     * @param {Image} image
     * @returns {Image}
     * @example
     * // get image
     * var image = sprite.image();
     *
     * // set image
     * sprite.image(imageObj);
     */

    Konva.Factory.addGetterSetter(Konva.Sprite, 'frameIndex', 0);

    /**
     * set/set animation frame index
     * @name frameIndex
     * @method
     * @memberof Konva.Sprite.prototype
     * @param {Integer} frameIndex
     * @returns {Integer}
     * @example
     * // get animation frame index
     * var frameIndex = sprite.frameIndex();
     *
     * // set animation frame index
     * sprite.frameIndex(3);
     */

    Konva.Factory.addGetterSetter(Konva.Sprite, 'frameRate', 17);

    /**
     * get/set frame rate in frames per second.  Increase this number to make the sprite
     *  animation run faster, and decrease the number to make the sprite animation run slower
     *  The default is 17 frames per second
     * @name frameRate
     * @method
     * @memberof Konva.Sprite.prototype
     * @param {Integer} frameRate
     * @returns {Integer}
     * @example
     * // get frame rate
     * var frameRate = sprite.frameRate();
     *
     * // set frame rate to 2 frames per second
     * sprite.frameRate(2);
     */

    Konva.Factory.backCompat(Konva.Sprite, {
        index: 'frameIndex',
        getIndex: 'getFrameIndex',
        setIndex: 'setFrameIndex'
    });

    Konva.Collection.mapMethods(Konva.Sprite);
})();

/*eslint-disable  no-shadow, max-len, max-depth */
(function () {
    'use strict';
    /**
     * Path constructor.
     * @author Jason Follas
     * @constructor
     * @memberof Konva
     * @augments Konva.Shape
     * @param {Object} config
     * @param {String} config.data SVG data string
     * @param {String} [config.fill] fill color
     * @param {Image} [config.fillPatternImage] fill pattern image
     * @param {Number} [config.fillPatternX]
     * @param {Number} [config.fillPatternY]
     * @param {Object} [config.fillPatternOffset] object with x and y component
     * @param {Number} [config.fillPatternOffsetX] 
     * @param {Number} [config.fillPatternOffsetY] 
     * @param {Object} [config.fillPatternScale] object with x and y component
     * @param {Number} [config.fillPatternScaleX]
     * @param {Number} [config.fillPatternScaleY]
     * @param {Number} [config.fillPatternRotation]
     * @param {String} [config.fillPatternRepeat] can be "repeat", "repeat-x", "repeat-y", or "no-repeat".  The default is "no-repeat"
     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientStartPointX]
     * @param {Number} [config.fillLinearGradientStartPointY]
     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientEndPointX]
     * @param {Number} [config.fillLinearGradientEndPointY]
     * @param {Array} [config.fillLinearGradientColorStops] array of color stops
     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientStartPointX]
     * @param {Number} [config.fillRadialGradientStartPointY]
     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientEndPointX] 
     * @param {Number} [config.fillRadialGradientEndPointY] 
     * @param {Number} [config.fillRadialGradientStartRadius]
     * @param {Number} [config.fillRadialGradientEndRadius]
     * @param {Array} [config.fillRadialGradientColorStops] array of color stops
     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true
     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration
     * @param {String} [config.stroke] stroke color
     * @param {Number} [config.strokeWidth] stroke width
     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true
     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true
     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true
     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true
     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true
     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default
     *  is miter
     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default
     *  is butt
     * @param {String} [config.shadowColor]
     * @param {Number} [config.shadowBlur]
     * @param {Object} [config.shadowOffset] object with x and y component
     * @param {Number} [config.shadowOffsetX]
     * @param {Number} [config.shadowOffsetY]
     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number
     *  between 0 and 1
     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true
     * @param {Array} [config.dash]
     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * var path = new Konva.Path({
     *   x: 240,
     *   y: 40,
     *   data: 'M12.582,9.551C3.251,16.237,0.921,29.021,7.08,38.564l-2.36,1.689l4.893,2.262l4.893,2.262l-0.568-5.36l-0.567-5.359l-2.365,1.694c-4.657-7.375-2.83-17.185,4.352-22.33c7.451-5.338,17.817-3.625,23.156,3.824c5.337,7.449,3.625,17.813-3.821,23.152l2.857,3.988c9.617-6.893,11.827-20.277,4.935-29.896C35.591,4.87,22.204,2.658,12.582,9.551z',
     *   fill: 'green',
     *   scale: 2
     * });
     */
    Konva.Path = function (config) {
        this.___init(config);
    };

    Konva.Path.prototype = {
        ___init: function (config) {
            this.dataArray = [];
            var that = this;

            // call super constructor
            Konva.Shape.call(this, config);
            this.className = 'Path';

            this.dataArray = Konva.Path.parsePathData(this.getData());
            this.on('dataChange.konva', function () {
                that.dataArray = Konva.Path.parsePathData(this.getData());
            });

            this.sceneFunc(this._sceneFunc);
        },
        _sceneFunc: function(context) {
            var ca = this.dataArray,
                closedPath = false;

            // context position
            context.beginPath();
            for (var n = 0; n < ca.length; n++) {
                var c = ca[n].command;
                var p = ca[n].points;
                switch (c) {
                    case 'L':
                        context.lineTo(p[0], p[1]);
                        break;
                    case 'M':
                        context.moveTo(p[0], p[1]);
                        break;
                    case 'C':
                        context.bezierCurveTo(p[0], p[1], p[2], p[3], p[4], p[5]);
                        break;
                    case 'Q':
                        context.quadraticCurveTo(p[0], p[1], p[2], p[3]);
                        break;
                    case 'A':
                        var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6], fs = p[7];

                        var r = (rx > ry) ? rx : ry;
                        var scaleX = (rx > ry) ? 1 : rx / ry;
                        var scaleY = (rx > ry) ? ry / rx : 1;

                        context.translate(cx, cy);
                        context.rotate(psi);
                        context.scale(scaleX, scaleY);
                        context.arc(0, 0, r, theta, theta + dTheta, 1 - fs);
                        context.scale(1 / scaleX, 1 / scaleY);
                        context.rotate(-psi);
                        context.translate(-cx, -cy);

                        break;
                    case 'z':
                        context.closePath();
                        closedPath = true;
                        break;
                }
            }

            if (closedPath) {
                context.fillStrokeShape(this);
            }
            else {
                context.strokeShape(this);
            }
        },
        getSelfRect: function() {
            var points = [];
            this.dataArray.forEach(function(data) {
                points = points.concat(data.points);
            });
            var minX = points[0];
            var maxX = points[0];
            var minY = points[0];
            var maxY = points[0];
            var x, y;
            for (var i = 0; i < points.length / 2; i++) {
                x = points[i * 2]; y = points[i * 2 + 1];
                minX = Math.min(minX, x);
                maxX = Math.max(maxX, x);
                minY = Math.min(minY, y);
                maxY = Math.max(maxY, y);
            }
            return {
                x: Math.round(minX),
                y: Math.round(minY),
                width: Math.round(maxX - minX),
                height: Math.round(maxY - minY)
            };
        }
    };
    Konva.Util.extend(Konva.Path, Konva.Shape);

    Konva.Path.getLineLength = function(x1, y1, x2, y2) {
        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    };
    Konva.Path.getPointOnLine = function(dist, P1x, P1y, P2x, P2y, fromX, fromY) {
        if(fromX === undefined) {
            fromX = P1x;
        }
        if(fromY === undefined) {
            fromY = P1y;
        }

        var m = (P2y - P1y) / ((P2x - P1x) + 0.00000001);
        var run = Math.sqrt(dist * dist / (1 + m * m));
        if(P2x < P1x) {
            run *= -1;
        }
        var rise = m * run;
        var pt;

        if (P2x === P1x) { // vertical line
            pt = {
                x: fromX,
                y: fromY + rise
            };
        } else if((fromY - P1y) / ((fromX - P1x) + 0.00000001) === m) {
            pt = {
                x: fromX + run,
                y: fromY + rise
            };
        }
        else {
            var ix, iy;

            var len = this.getLineLength(P1x, P1y, P2x, P2y);
            if(len < 0.00000001) {
                return undefined;
            }
            var u = (((fromX - P1x) * (P2x - P1x)) + ((fromY - P1y) * (P2y - P1y)));
            u = u / (len * len);
            ix = P1x + u * (P2x - P1x);
            iy = P1y + u * (P2y - P1y);

            var pRise = this.getLineLength(fromX, fromY, ix, iy);
            var pRun = Math.sqrt(dist * dist - pRise * pRise);
            run = Math.sqrt(pRun * pRun / (1 + m * m));
            if(P2x < P1x) {
                run *= -1;
            }
            rise = m * run;
            pt = {
                x: ix + run,
                y: iy + rise
            };
        }

        return pt;
    };

    Konva.Path.getPointOnCubicBezier = function(pct, P1x, P1y, P2x, P2y, P3x, P3y, P4x, P4y) {
        function CB1(t) {
            return t * t * t;
        }
        function CB2(t) {
            return 3 * t * t * (1 - t);
        }
        function CB3(t) {
            return 3 * t * (1 - t) * (1 - t);
        }
        function CB4(t) {
            return (1 - t) * (1 - t) * (1 - t);
        }
        var x = P4x * CB1(pct) + P3x * CB2(pct) + P2x * CB3(pct) + P1x * CB4(pct);
        var y = P4y * CB1(pct) + P3y * CB2(pct) + P2y * CB3(pct) + P1y * CB4(pct);

        return {
            x: x,
            y: y
        };
    };
    Konva.Path.getPointOnQuadraticBezier = function(pct, P1x, P1y, P2x, P2y, P3x, P3y) {
        function QB1(t) {
            return t * t;
        }
        function QB2(t) {
            return 2 * t * (1 - t);
        }
        function QB3(t) {
            return (1 - t) * (1 - t);
        }
        var x = P3x * QB1(pct) + P2x * QB2(pct) + P1x * QB3(pct);
        var y = P3y * QB1(pct) + P2y * QB2(pct) + P1y * QB3(pct);

        return {
            x: x,
            y: y
        };
    };
    Konva.Path.getPointOnEllipticalArc = function(cx, cy, rx, ry, theta, psi) {
        var cosPsi = Math.cos(psi), sinPsi = Math.sin(psi);
        var pt = {
            x: rx * Math.cos(theta),
            y: ry * Math.sin(theta)
        };
        return {
            x: cx + (pt.x * cosPsi - pt.y * sinPsi),
            y: cy + (pt.x * sinPsi + pt.y * cosPsi)
        };
    };
    /*
     * get parsed data array from the data
     *  string.  V, v, H, h, and l data are converted to
     *  L data for the purpose of high performance Path
     *  rendering
     */
    Konva.Path.parsePathData = function(data) {
        // Path Data Segment must begin with a moveTo
        //m (x y)+  Relative moveTo (subsequent points are treated as lineTo)
        //M (x y)+  Absolute moveTo (subsequent points are treated as lineTo)
        //l (x y)+  Relative lineTo
        //L (x y)+  Absolute LineTo
        //h (x)+    Relative horizontal lineTo
        //H (x)+    Absolute horizontal lineTo
        //v (y)+    Relative vertical lineTo
        //V (y)+    Absolute vertical lineTo
        //z (closepath)
        //Z (closepath)
        //c (x1 y1 x2 y2 x y)+ Relative Bezier curve
        //C (x1 y1 x2 y2 x y)+ Absolute Bezier curve
        //q (x1 y1 x y)+       Relative Quadratic Bezier
        //Q (x1 y1 x y)+       Absolute Quadratic Bezier
        //t (x y)+    Shorthand/Smooth Relative Quadratic Bezier
        //T (x y)+    Shorthand/Smooth Absolute Quadratic Bezier
        //s (x2 y2 x y)+       Shorthand/Smooth Relative Bezier curve
        //S (x2 y2 x y)+       Shorthand/Smooth Absolute Bezier curve
        //a (rx ry x-axis-rotation large-arc-flag sweep-flag x y)+     Relative Elliptical Arc
        //A (rx ry x-axis-rotation large-arc-flag sweep-flag x y)+  Absolute Elliptical Arc

        // return early if data is not defined
        if(!data) {
            return [];
        }

        // command string
        var cs = data;

        // command chars
        var cc = ['m', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z', 'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'];
        // convert white spaces to commas
        cs = cs.replace(new RegExp(' ', 'g'), ',');
        // create pipes so that we can split the data
        for(var n = 0; n < cc.length; n++) {
            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
        }
        // create array
        var arr = cs.split('|');
        var ca = [];
        // init context point
        var cpx = 0;
        var cpy = 0;
        for( n = 1; n < arr.length; n++) {
            var str = arr[n];
            var c = str.charAt(0);
            str = str.slice(1);
            // remove ,- for consistency
            str = str.replace(new RegExp(',-', 'g'), '-');
            // add commas so that it's easy to split
            str = str.replace(new RegExp('-', 'g'), ',-');
            str = str.replace(new RegExp('e,-', 'g'), 'e-');
            var p = str.split(',');
            if(p.length > 0 && p[0] === '') {
                p.shift();
            }
            // convert strings to floats
            for(var i = 0; i < p.length; i++) {
                p[i] = parseFloat(p[i]);
            }
            while(p.length > 0) {
                if(isNaN(p[0])) {// case for a trailing comma before next command
                    break;
                }

                var cmd = null;
                var points = [];
                var startX = cpx, startY = cpy;
                // Move var from within the switch to up here (jshint)
                var prevCmd, ctlPtx, ctlPty;     // Ss, Tt
                var rx, ry, psi, fa, fs, x1, y1; // Aa


                // convert l, H, h, V, and v to L
                switch (c) {

                    // Note: Keep the lineTo's above the moveTo's in this switch
                    case 'l':
                        cpx += p.shift();
                        cpy += p.shift();
                        cmd = 'L';
                        points.push(cpx, cpy);
                        break;
                    case 'L':
                        cpx = p.shift();
                        cpy = p.shift();
                        points.push(cpx, cpy);
                        break;

                    // Note: lineTo handlers need to be above this point
                    case 'm':
                        var dx = p.shift();
                        var dy = p.shift();
                        cpx += dx;
                        cpy += dy;
                        cmd = 'M';
                        // After closing the path move the current position
                        // to the the first point of the path (if any).
                        if(ca.length > 2 && ca[ca.length - 1].command === 'z'){
                            for(var idx = ca.length - 2; idx >= 0; idx--){
                                if(ca[idx].command === 'M'){
                                    cpx = ca[idx].points[0] + dx;
                                    cpy = ca[idx].points[1] + dy;
                                    break;
                                }
                            }
                        }
                        points.push(cpx, cpy);
                        c = 'l';
                        // subsequent points are treated as relative lineTo
                        break;
                    case 'M':
                        cpx = p.shift();
                        cpy = p.shift();
                        cmd = 'M';
                        points.push(cpx, cpy);
                        c = 'L';
                        // subsequent points are treated as absolute lineTo
                        break;

                    case 'h':
                        cpx += p.shift();
                        cmd = 'L';
                        points.push(cpx, cpy);
                        break;
                    case 'H':
                        cpx = p.shift();
                        cmd = 'L';
                        points.push(cpx, cpy);
                        break;
                    case 'v':
                        cpy += p.shift();
                        cmd = 'L';
                        points.push(cpx, cpy);
                        break;
                    case 'V':
                        cpy = p.shift();
                        cmd = 'L';
                        points.push(cpx, cpy);
                        break;
                    case 'C':
                        points.push(p.shift(), p.shift(), p.shift(), p.shift());
                        cpx = p.shift();
                        cpy = p.shift();
                        points.push(cpx, cpy);
                        break;
                    case 'c':
                        points.push(cpx + p.shift(), cpy + p.shift(), cpx + p.shift(), cpy + p.shift());
                        cpx += p.shift();
                        cpy += p.shift();
                        cmd = 'C';
                        points.push(cpx, cpy);
                        break;
                    case 'S':
                        ctlPtx = cpx;
                        ctlPty = cpy;
                        prevCmd = ca[ca.length - 1];
                        if(prevCmd.command === 'C') {
                            ctlPtx = cpx + (cpx - prevCmd.points[2]);
                            ctlPty = cpy + (cpy - prevCmd.points[3]);
                        }
                        points.push(ctlPtx, ctlPty, p.shift(), p.shift());
                        cpx = p.shift();
                        cpy = p.shift();
                        cmd = 'C';
                        points.push(cpx, cpy);
                        break;
                    case 's':
                        ctlPtx = cpx;
                        ctlPty = cpy;
                        prevCmd = ca[ca.length - 1];
                        if(prevCmd.command === 'C') {
                            ctlPtx = cpx + (cpx - prevCmd.points[2]);
                            ctlPty = cpy + (cpy - prevCmd.points[3]);
                        }
                        points.push(ctlPtx, ctlPty, cpx + p.shift(), cpy + p.shift());
                        cpx += p.shift();
                        cpy += p.shift();
                        cmd = 'C';
                        points.push(cpx, cpy);
                        break;
                    case 'Q':
                        points.push(p.shift(), p.shift());
                        cpx = p.shift();
                        cpy = p.shift();
                        points.push(cpx, cpy);
                        break;
                    case 'q':
                        points.push(cpx + p.shift(), cpy + p.shift());
                        cpx += p.shift();
                        cpy += p.shift();
                        cmd = 'Q';
                        points.push(cpx, cpy);
                        break;
                    case 'T':
                        ctlPtx = cpx;
                        ctlPty = cpy;
                        prevCmd = ca[ca.length - 1];
                        if(prevCmd.command === 'Q') {
                            ctlPtx = cpx + (cpx - prevCmd.points[0]);
                            ctlPty = cpy + (cpy - prevCmd.points[1]);
                        }
                        cpx = p.shift();
                        cpy = p.shift();
                        cmd = 'Q';
                        points.push(ctlPtx, ctlPty, cpx, cpy);
                        break;
                    case 't':
                        ctlPtx = cpx;
                        ctlPty = cpy;
                        prevCmd = ca[ca.length - 1];
                        if(prevCmd.command === 'Q') {
                            ctlPtx = cpx + (cpx - prevCmd.points[0]);
                            ctlPty = cpy + (cpy - prevCmd.points[1]);
                        }
                        cpx += p.shift();
                        cpy += p.shift();
                        cmd = 'Q';
                        points.push(ctlPtx, ctlPty, cpx, cpy);
                        break;
                    case 'A':
                        rx = p.shift();
                        ry = p.shift();
                        psi = p.shift();
                        fa = p.shift();
                        fs = p.shift();
                        x1 = cpx;
                        y1 = cpy;
                        cpx = p.shift();
                        cpy = p.shift();
                        cmd = 'A';
                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);
                        break;
                    case 'a':
                        rx = p.shift();
                        ry = p.shift();
                        psi = p.shift();
                        fa = p.shift();
                        fs = p.shift();
                        x1 = cpx;
                        y1 = cpy; cpx += p.shift();
                        cpy += p.shift();
                        cmd = 'A';
                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);
                        break;
                }

                ca.push({
                    command: cmd || c,
                    points: points,
                    start: {
                        x: startX,
                        y: startY
                    },
                    pathLength: this.calcLength(startX, startY, cmd || c, points)
                });
            }

            if(c === 'z' || c === 'Z') {
                ca.push({
                    command: 'z',
                    points: [],
                    start: undefined,
                    pathLength: 0
                });
            }
        }

        return ca;
    };
    Konva.Path.calcLength = function(x, y, cmd, points) {
        var len, p1, p2, t;
        var path = Konva.Path;

        switch (cmd) {
            case 'L':
                return path.getLineLength(x, y, points[0], points[1]);
            case 'C':
                // Approximates by breaking curve into 100 line segments
                len = 0.0;
                p1 = path.getPointOnCubicBezier(0, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);
                for( t = 0.01; t <= 1; t += 0.01) {
                    p2 = path.getPointOnCubicBezier(t, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);
                    len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
                    p1 = p2;
                }
                return len;
            case 'Q':
                // Approximates by breaking curve into 100 line segments
                len = 0.0;
                p1 = path.getPointOnQuadraticBezier(0, x, y, points[0], points[1], points[2], points[3]);
                for( t = 0.01; t <= 1; t += 0.01) {
                    p2 = path.getPointOnQuadraticBezier(t, x, y, points[0], points[1], points[2], points[3]);
                    len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
                    p1 = p2;
                }
                return len;
            case 'A':
                // Approximates by breaking curve into line segments
                len = 0.0;
                var start = points[4];
                // 4 = theta
                var dTheta = points[5];
                // 5 = dTheta
                var end = points[4] + dTheta;
                var inc = Math.PI / 180.0;
                // 1 degree resolution
                if(Math.abs(start - end) < inc) {
                    inc = Math.abs(start - end);
                }
                // Note: for purpose of calculating arc length, not going to worry about rotating X-axis by angle psi
                p1 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);
                if(dTheta < 0) {// clockwise
                    for( t = start - inc; t > end; t -= inc) {
                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);
                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
                        p1 = p2;
                    }
                }
                else {// counter-clockwise
                    for( t = start + inc; t < end; t += inc) {
                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);
                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
                        p1 = p2;
                    }
                }
                p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);
                len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);

                return len;
        }

        return 0;
    };
    Konva.Path.convertEndpointToCenterParameterization = function(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg) {
        // Derived from: http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes
        var psi = psiDeg * (Math.PI / 180.0);
        var xp = Math.cos(psi) * (x1 - x2) / 2.0 + Math.sin(psi) * (y1 - y2) / 2.0;
        var yp = -1 * Math.sin(psi) * (x1 - x2) / 2.0 + Math.cos(psi) * (y1 - y2) / 2.0;

        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);

        if(lambda > 1) {
            rx *= Math.sqrt(lambda);
            ry *= Math.sqrt(lambda);
        }

        var f = Math.sqrt((((rx * rx) * (ry * ry)) - ((rx * rx) * (yp * yp)) - ((ry * ry) * (xp * xp))) / ((rx * rx) * (yp * yp) + (ry * ry) * (xp * xp)));

        if(fa === fs) {
            f *= -1;
        }
        if(isNaN(f)) {
            f = 0;
        }

        var cxp = f * rx * yp / ry;
        var cyp = f * -ry * xp / rx;

        var cx = (x1 + x2) / 2.0 + Math.cos(psi) * cxp - Math.sin(psi) * cyp;
        var cy = (y1 + y2) / 2.0 + Math.sin(psi) * cxp + Math.cos(psi) * cyp;

        var vMag = function(v) {
            return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
        };
        var vRatio = function(u, v) {
            return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
        };
        var vAngle = function(u, v) {
            return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
        };
        var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
        var u = [(xp - cxp) / rx, (yp - cyp) / ry];
        var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
        var dTheta = vAngle(u, v);

        if(vRatio(u, v) <= -1) {
            dTheta = Math.PI;
        }
        if(vRatio(u, v) >= 1) {
            dTheta = 0;
        }
        if(fs === 0 && dTheta > 0) {
            dTheta = dTheta - 2 * Math.PI;
        }
        if(fs === 1 && dTheta < 0) {
            dTheta = dTheta + 2 * Math.PI;
        }
        return [cx, cy, rx, ry, theta, dTheta, psi, fs];
    };
    // add getters setters
    Konva.Factory.addGetterSetter(Konva.Path, 'data');

    /**
     * set SVG path data string.  This method
     *  also automatically parses the data string
     *  into a data array.  Currently supported SVG data:
     *  M, m, L, l, H, h, V, v, Q, q, T, t, C, c, S, s, A, a, Z, z
     * @name setData
     * @method
     * @memberof Konva.Path.prototype
     * @param {String} SVG path command string
     */

    /**
     * get SVG path data string
     * @name getData
     * @method
     * @memberof Konva.Path.prototype
     */

    Konva.Collection.mapMethods(Konva.Path);
})();

(function() {
    'use strict';
    var EMPTY_STRING = '',
        //CALIBRI = 'Calibri',
        NORMAL = 'normal';

    /**
     * Path constructor.
     * @author Jason Follas
     * @constructor
     * @memberof Konva
     * @augments Konva.Shape
     * @param {Object} config
     * @param {String} [config.fontFamily] default is Calibri
     * @param {Number} [config.fontSize] default is 12
     * @param {String} [config.fontStyle] can be normal, bold, or italic.  Default is normal
     * @param {String} [config.fontVariant] can be normal or small-caps.  Default is normal
     * @param {String} config.text
     * @param {String} config.data SVG data string
     * @param {String} [config.fill] fill color
     * @param {Image} [config.fillPatternImage] fill pattern image
     * @param {Number} [config.fillPatternX]
     * @param {Number} [config.fillPatternY]
     * @param {Object} [config.fillPatternOffset] object with x and y component
     * @param {Number} [config.fillPatternOffsetX] 
     * @param {Number} [config.fillPatternOffsetY] 
     * @param {Object} [config.fillPatternScale] object with x and y component
     * @param {Number} [config.fillPatternScaleX]
     * @param {Number} [config.fillPatternScaleY]
     * @param {Number} [config.fillPatternRotation]
     * @param {String} [config.fillPatternRepeat] can be "repeat", "repeat-x", "repeat-y", or "no-repeat".  The default is "no-repeat"
     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientStartPointX]
     * @param {Number} [config.fillLinearGradientStartPointY]
     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientEndPointX]
     * @param {Number} [config.fillLinearGradientEndPointY]
     * @param {Array} [config.fillLinearGradientColorStops] array of color stops
     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientStartPointX]
     * @param {Number} [config.fillRadialGradientStartPointY]
     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientEndPointX] 
     * @param {Number} [config.fillRadialGradientEndPointY] 
     * @param {Number} [config.fillRadialGradientStartRadius]
     * @param {Number} [config.fillRadialGradientEndRadius]
     * @param {Array} [config.fillRadialGradientColorStops] array of color stops
     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true
     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration
     * @param {String} [config.stroke] stroke color
     * @param {Number} [config.strokeWidth] stroke width
     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true
     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true
     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true
     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true
     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true
     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default
     *  is miter
     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default
     *  is butt
     * @param {String} [config.shadowColor]
     * @param {Number} [config.shadowBlur]
     * @param {Object} [config.shadowOffset] object with x and y component
     * @param {Number} [config.shadowOffsetX]
     * @param {Number} [config.shadowOffsetY]
     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number
     *  between 0 and 1
     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true
     * @param {Array} [config.dash]
     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * var textpath = new Konva.TextPath({
     *   x: 100,
     *   y: 50,
     *   fill: '#333',
     *   fontSize: '24',
     *   fontFamily: 'Arial',
     *   text: 'All the world\'s a stage, and all the men and women merely players.',
     *   data: 'M10,10 C0,0 10,150 100,100 S300,150 400,50'
     * });
     */
    Konva.TextPath = function(config) {
        this.___init(config);
    };

    function _fillFunc(context) {
        context.fillText(this.partialText, 0, 0);
    }
    function _strokeFunc(context) {
        context.strokeText(this.partialText, 0, 0);
    }

    Konva.TextPath.prototype = {
        ___init: function(config) {
            var that = this;
            this.dummyCanvas = Konva.Util.createCanvasElement();
            this.dataArray = [];

            // call super constructor
            Konva.Shape.call(this, config);

            // overrides
            // TODO: shouldn't this be on the prototype?
            this._fillFunc = _fillFunc;
            this._strokeFunc = _strokeFunc;
            this._fillFuncHit = _fillFunc;
            this._strokeFuncHit = _strokeFunc;

            this.className = 'TextPath';

            this.dataArray = Konva.Path.parsePathData(this.attrs.data);
            this.on('dataChange.konva', function() {
                that.dataArray = Konva.Path.parsePathData(this.attrs.data);
            });

            // update text data for certain attr changes
            this.on('textChange.konva textStroke.konva textStrokeWidth.konva', that._setTextData);
            that._setTextData();
            this.sceneFunc(this._sceneFunc);
        },
        _sceneFunc: function(context) {
            context.setAttr('font', this._getContextFont());
            context.setAttr('textBaseline', 'middle');
            context.setAttr('textAlign', 'left');
            context.save();

            var glyphInfo = this.glyphInfo;
            for(var i = 0; i < glyphInfo.length; i++) {
                context.save();

                var p0 = glyphInfo[i].p0;

                context.translate(p0.x, p0.y);
                context.rotate(glyphInfo[i].rotation);
                this.partialText = glyphInfo[i].text;

                context.fillStrokeShape(this);
                context.restore();

                //// To assist with debugging visually, uncomment following
                // context.beginPath();
                // if (i % 2)
                // context.strokeStyle = 'cyan';
                // else
                // context.strokeStyle = 'green';
                // var p1 = glyphInfo[i].p1;
                // context.moveTo(p0.x, p0.y);
                // context.lineTo(p1.x, p1.y);
                // context.stroke();
            }
            context.restore();
        },
        /**
         * get text width in pixels
         * @method
         * @memberof Konva.TextPath.prototype
         */
        getTextWidth: function() {
            return this.textWidth;
        },
        /**
         * get text height in pixels
         * @method
         * @memberof Konva.TextPath.prototype
         */
        getTextHeight: function() {
            return this.textHeight;
        },
        /**
         * set text
         * @method
         * @memberof Konva.TextPath.prototype
         * @param {String} text
         */
        setText: function(text) {
            Konva.Text.prototype.setText.call(this, text);
        },
        _getTextSize: function(text) {
            var dummyCanvas = this.dummyCanvas;
            var _context = dummyCanvas.getContext('2d');

            _context.save();

            _context.font = this._getContextFont();
            var metrics = _context.measureText(text);

            _context.restore();

            return {
                width: metrics.width,
                height: parseInt(this.attrs.fontSize, 10)
            };
        },
        _setTextData: function() {

            var that = this;
            var size = this._getTextSize(this.attrs.text);
            this.textWidth = size.width;
            this.textHeight = size.height;

            this.glyphInfo = [];

            var charArr = this.attrs.text.split('');

            var p0, p1, pathCmd;

            var pIndex = -1;
            var currentT = 0;

            var getNextPathSegment = function() {
                currentT = 0;
                var pathData = that.dataArray;

                for(var j = pIndex + 1; j < pathData.length; j++) {
                    if(pathData[j].pathLength > 0) {
                        pIndex = j;

                        return pathData[j];
                    }
                    else if(pathData[j].command === 'M') {
                        p0 = {
                            x: pathData[j].points[0],
                            y: pathData[j].points[1]
                        };
                    }
                }

                return {};
            };
            var findSegmentToFitCharacter = function(c) {

                var glyphWidth = that._getTextSize(c).width;

                var currLen = 0;
                var attempts = 0;

                p1 = undefined;
                while(Math.abs(glyphWidth - currLen) / glyphWidth > 0.01 && attempts < 25) {
                    attempts++;
                    var cumulativePathLength = currLen;
                    while(pathCmd === undefined) {
                        pathCmd = getNextPathSegment();

                        if(pathCmd && cumulativePathLength + pathCmd.pathLength < glyphWidth) {
                            cumulativePathLength += pathCmd.pathLength;
                            pathCmd = undefined;
                        }
                    }

                    if(pathCmd === {} || p0 === undefined) {
                        return undefined;
                    }

                    var needNewSegment = false;

                    switch (pathCmd.command) {
                        case 'L':
                            if(Konva.Path.getLineLength(p0.x, p0.y, pathCmd.points[0], pathCmd.points[1]) > glyphWidth) {
                                p1 = Konva.Path.getPointOnLine(glyphWidth, p0.x, p0.y, pathCmd.points[0], pathCmd.points[1], p0.x, p0.y);
                            }
                            else {
                                pathCmd = undefined;
                            }
                            break;
                        case 'A':

                            var start = pathCmd.points[4];
                            // 4 = theta
                            var dTheta = pathCmd.points[5];
                            // 5 = dTheta
                            var end = pathCmd.points[4] + dTheta;

                            if(currentT === 0){
                                currentT = start + 0.00000001;
                            }
                            // Just in case start is 0
                            else if(glyphWidth > currLen) {
                                currentT += (Math.PI / 180.0) * dTheta / Math.abs(dTheta);
                            }
                            else {
                                currentT -= Math.PI / 360.0 * dTheta / Math.abs(dTheta);
                            }

                            // Credit for bug fix: @therth https://github.com/ericdrowell/KonvaJS/issues/249
                            // Old code failed to render text along arc of this path: "M 50 50 a 150 50 0 0 1 250 50 l 50 0"
                            if(dTheta < 0 && currentT < end || dTheta >= 0 && currentT > end) {
                                currentT = end;
                                needNewSegment = true;
                            }
                            p1 = Konva.Path.getPointOnEllipticalArc(pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], currentT, pathCmd.points[6]);
                            break;
                        case 'C':
                            if(currentT === 0) {
                                if(glyphWidth > pathCmd.pathLength) {
                                    currentT = 0.00000001;
                                }
                                else {
                                    currentT = glyphWidth / pathCmd.pathLength;
                                }
                            }
                            else if(glyphWidth > currLen) {
                                currentT += (glyphWidth - currLen) / pathCmd.pathLength;
                            }
                            else {
                                currentT -= (currLen - glyphWidth) / pathCmd.pathLength;
                            }

                            if(currentT > 1.0) {
                                currentT = 1.0;
                                needNewSegment = true;
                            }
                            p1 = Konva.Path.getPointOnCubicBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], pathCmd.points[4], pathCmd.points[5]);
                            break;
                        case 'Q':
                            if(currentT === 0) {
                                currentT = glyphWidth / pathCmd.pathLength;
                            }
                            else if(glyphWidth > currLen) {
                                currentT += (glyphWidth - currLen) / pathCmd.pathLength;
                            }
                            else {
                                currentT -= (currLen - glyphWidth) / pathCmd.pathLength;
                            }

                            if(currentT > 1.0) {
                                currentT = 1.0;
                                needNewSegment = true;
                            }
                            p1 = Konva.Path.getPointOnQuadraticBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3]);
                            break;

                    }

                    if(p1 !== undefined) {
                        currLen = Konva.Path.getLineLength(p0.x, p0.y, p1.x, p1.y);
                    }

                    if(needNewSegment) {
                        needNewSegment = false;
                        pathCmd = undefined;
                    }
                }
            };
            for(var i = 0; i < charArr.length; i++) {

                // Find p1 such that line segment between p0 and p1 is approx. width of glyph
                findSegmentToFitCharacter(charArr[i]);

                if(p0 === undefined || p1 === undefined) {
                    break;
                }

                var width = Konva.Path.getLineLength(p0.x, p0.y, p1.x, p1.y);

                // Note: Since glyphs are rendered one at a time, any kerning pair data built into the font will not be used.
                // Can foresee having a rough pair table built in that the developer can override as needed.

                var kern = 0;
                // placeholder for future implementation

                var midpoint = Konva.Path.getPointOnLine(kern + width / 2.0, p0.x, p0.y, p1.x, p1.y);

                var rotation = Math.atan2((p1.y - p0.y), (p1.x - p0.x));
                this.glyphInfo.push({
                    transposeX: midpoint.x,
                    transposeY: midpoint.y,
                    text: charArr[i],
                    rotation: rotation,
                    p0: p0,
                    p1: p1
                });
                p0 = p1;
            }
        },
        getSelfRect: function() {
            var points = [];
            var fontSize = this.fontSize();

            this.glyphInfo.forEach(function(info) {
                points.push(info.p0.x);
                points.push(info.p0.y);
                points.push(info.p1.x);
                points.push(info.p1.y);
            });
            var minX = points[0];
            var maxX = points[0];
            var minY = points[0];
            var maxY = points[0];
            var x, y;
            for (var i = 0; i < points.length / 2; i++) {
                x = points[i * 2]; y = points[i * 2 + 1];
                minX = Math.min(minX, x);
                maxX = Math.max(maxX, x);
                minY = Math.min(minY, y);
                maxY = Math.max(maxY, y);
            }
            return {
                x: Math.round(minX) - fontSize,
                y: Math.round(minY) - fontSize,
                width: Math.round(maxX - minX) + fontSize * 2,
                height: Math.round(maxY - minY) + fontSize * 2
            };
        }
    };

    // map TextPath methods to Text
    Konva.TextPath.prototype._getContextFont = Konva.Text.prototype._getContextFont;

    Konva.Util.extend(Konva.TextPath, Konva.Shape);

    // add setters and getters
    Konva.Factory.addGetterSetter(Konva.TextPath, 'fontFamily', 'Arial');

    /**
     * set font family
     * @name setFontFamily
     * @method
     * @memberof Konva.TextPath.prototype
     * @param {String} fontFamily
     */

     /**
     * get font family
     * @name getFontFamily
     * @method
     * @memberof Konva.TextPath.prototype
     */

    Konva.Factory.addGetterSetter(Konva.TextPath, 'fontSize', 12);

    /**
     * set font size
     * @name setFontSize
     * @method
     * @memberof Konva.TextPath.prototype
     * @param {int} fontSize
     */

     /**
     * get font size
     * @name getFontSize
     * @method
     * @memberof Konva.TextPath.prototype
     */

    Konva.Factory.addGetterSetter(Konva.TextPath, 'fontStyle', NORMAL);

    /**
     * set font style.  Can be 'normal', 'italic', or 'bold'.  'normal' is the default.
     * @name setFontStyle
     * @method
     * @memberof Konva.TextPath.prototype
     * @param {String} fontStyle
     */

     /**
     * get font style
     * @name getFontStyle
     * @method
     * @memberof Konva.TextPath.prototype
     */

    Konva.Factory.addGetterSetter(Konva.TextPath, 'fontVariant', NORMAL);

    /**
     * set font variant.  Can be 'normal' or 'small-caps'.  'normal' is the default.
     * @name setFontVariant
     * @method
     * @memberof Konva.TextPath.prototype
     * @param {String} fontVariant
     */

    /**
     * @get font variant
     * @name getFontVariant
     * @method
     * @memberof Konva.TextPath.prototype
     */

    Konva.Factory.addGetter(Konva.TextPath, 'text', EMPTY_STRING);

    /**
     * get text
     * @name getText
     * @method
     * @memberof Konva.TextPath.prototype
     */

    Konva.Collection.mapMethods(Konva.TextPath);
})();

(function() {
    'use strict';
    /**
     * RegularPolygon constructor.&nbsp; Examples include triangles, squares, pentagons, hexagons, etc.
     * @constructor
     * @memberof Konva
     * @augments Konva.Shape
     * @param {Object} config
     * @param {Number} config.sides
     * @param {Number} config.radius
     * @param {String} [config.fill] fill color
     * @param {Image} [config.fillPatternImage] fill pattern image
     * @param {Number} [config.fillPatternX]
     * @param {Number} [config.fillPatternY]
     * @param {Object} [config.fillPatternOffset] object with x and y component
     * @param {Number} [config.fillPatternOffsetX] 
     * @param {Number} [config.fillPatternOffsetY] 
     * @param {Object} [config.fillPatternScale] object with x and y component
     * @param {Number} [config.fillPatternScaleX]
     * @param {Number} [config.fillPatternScaleY]
     * @param {Number} [config.fillPatternRotation]
     * @param {String} [config.fillPatternRepeat] can be "repeat", "repeat-x", "repeat-y", or "no-repeat".  The default is "no-repeat"
     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientStartPointX]
     * @param {Number} [config.fillLinearGradientStartPointY]
     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientEndPointX]
     * @param {Number} [config.fillLinearGradientEndPointY]
     * @param {Array} [config.fillLinearGradientColorStops] array of color stops
     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientStartPointX]
     * @param {Number} [config.fillRadialGradientStartPointY]
     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientEndPointX] 
     * @param {Number} [config.fillRadialGradientEndPointY] 
     * @param {Number} [config.fillRadialGradientStartRadius]
     * @param {Number} [config.fillRadialGradientEndRadius]
     * @param {Array} [config.fillRadialGradientColorStops] array of color stops
     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true
     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration
     * @param {String} [config.stroke] stroke color
     * @param {Number} [config.strokeWidth] stroke width
     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true
     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true
     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true
     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true
     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true
     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default
     *  is miter
     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default
     *  is butt
     * @param {String} [config.shadowColor]
     * @param {Number} [config.shadowBlur]
     * @param {Object} [config.shadowOffset] object with x and y component
     * @param {Number} [config.shadowOffsetX]
     * @param {Number} [config.shadowOffsetY]
     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number
     *  between 0 and 1
     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true
     * @param {Array} [config.dash]
     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * var hexagon = new Konva.RegularPolygon({
     *   x: 100,
     *   y: 200,
     *   sides: 6,
     *   radius: 70,
     *   fill: 'red',
     *   stroke: 'black',
     *   strokeWidth: 4
     * });
     */
    Konva.RegularPolygon = function(config) {
        this.___init(config);
    };

    Konva.RegularPolygon.prototype = {
        _centroid: true,
        ___init: function(config) {
            // call super constructor
            Konva.Shape.call(this, config);
            this.className = 'RegularPolygon';
            this.sceneFunc(this._sceneFunc);
        },
        _sceneFunc: function(context) {
            var sides = this.attrs.sides,
                radius = this.attrs.radius,
                n, x, y;

            context.beginPath();
            context.moveTo(0, 0 - radius);

            for(n = 1; n < sides; n++) {
                x = radius * Math.sin(n * 2 * Math.PI / sides);
                y = -1 * radius * Math.cos(n * 2 * Math.PI / sides);
                context.lineTo(x, y);
            }
            context.closePath();
            context.fillStrokeShape(this);
        },
        getWidth: function() {
            return this.getRadius() * 2;
        },
        // implements Shape.prototype.getHeight()
        getHeight: function() {
            return this.getRadius() * 2;
        },
        // implements Shape.prototype.setWidth()
        setWidth: function(width) {
            Konva.Node.prototype.setWidth.call(this, width);
            if (this.radius() !== width / 2) {
                this.setRadius(width / 2);
            }
        },
        // implements Shape.prototype.setHeight()
        setHeight: function(height) {
            Konva.Node.prototype.setHeight.call(this, height);
            if (this.radius() !== height / 2) {
                this.setRadius(height / 2);
            }
        }
    };
    Konva.Util.extend(Konva.RegularPolygon, Konva.Shape);

    // add getters setters
    Konva.Factory.addGetterSetter(Konva.RegularPolygon, 'radius', 0);

    /**
     * set radius
     * @name setRadius
     * @method
     * @memberof Konva.RegularPolygon.prototype
     * @param {Number} radius
     */

     /**
     * get radius
     * @name getRadius
     * @method
     * @memberof Konva.RegularPolygon.prototype
     */

    Konva.Factory.addGetterSetter(Konva.RegularPolygon, 'sides', 0);

    /**
     * set number of sides
     * @name setSides
     * @method
     * @memberof Konva.RegularPolygon.prototype
     * @param {int} sides
     */

    /**
     * get number of sides
     * @name getSides
     * @method
     * @memberof Konva.RegularPolygon.prototype
     */

    Konva.Collection.mapMethods(Konva.RegularPolygon);
})();

(function() {
    'use strict';
    /**
     * Star constructor
     * @constructor
     * @memberof Konva
     * @augments Konva.Shape
     * @param {Object} config
     * @param {Integer} config.numPoints
     * @param {Number} config.innerRadius
     * @param {Number} config.outerRadius
     * @param {String} [config.fill] fill color
     * @param {Image} [config.fillPatternImage] fill pattern image
     * @param {Number} [config.fillPatternX]
     * @param {Number} [config.fillPatternY]
     * @param {Object} [config.fillPatternOffset] object with x and y component
     * @param {Number} [config.fillPatternOffsetX] 
     * @param {Number} [config.fillPatternOffsetY] 
     * @param {Object} [config.fillPatternScale] object with x and y component
     * @param {Number} [config.fillPatternScaleX]
     * @param {Number} [config.fillPatternScaleY]
     * @param {Number} [config.fillPatternRotation]
     * @param {String} [config.fillPatternRepeat] can be "repeat", "repeat-x", "repeat-y", or "no-repeat".  The default is "no-repeat"
     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientStartPointX]
     * @param {Number} [config.fillLinearGradientStartPointY]
     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientEndPointX]
     * @param {Number} [config.fillLinearGradientEndPointY]
     * @param {Array} [config.fillLinearGradientColorStops] array of color stops
     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientStartPointX]
     * @param {Number} [config.fillRadialGradientStartPointY]
     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientEndPointX] 
     * @param {Number} [config.fillRadialGradientEndPointY] 
     * @param {Number} [config.fillRadialGradientStartRadius]
     * @param {Number} [config.fillRadialGradientEndRadius]
     * @param {Array} [config.fillRadialGradientColorStops] array of color stops
     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true
     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration
     * @param {String} [config.stroke] stroke color
     * @param {Number} [config.strokeWidth] stroke width
     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true
     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true
     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true
     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true
     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true
     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default
     *  is miter
     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default
     *  is butt
     * @param {String} [config.shadowColor]
     * @param {Number} [config.shadowBlur]
     * @param {Object} [config.shadowOffset] object with x and y component
     * @param {Number} [config.shadowOffsetX]
     * @param {Number} [config.shadowOffsetY]
     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number
     *  between 0 and 1
     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true
     * @param {Array} [config.dash]
     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * var star = new Konva.Star({
     *   x: 100,
     *   y: 200,
     *   numPoints: 5,
     *   innerRadius: 70,
     *   outerRadius: 70,
     *   fill: 'red',
     *   stroke: 'black',
     *   strokeWidth: 4
     * });
     */
    Konva.Star = function(config) {
        this.___init(config);
    };

    Konva.Star.prototype = {
        _centroid: true,
        ___init: function(config) {
            // call super constructor
            Konva.Shape.call(this, config);
            this.className = 'Star';
            this.sceneFunc(this._sceneFunc);
        },
        _sceneFunc: function(context) {
            var innerRadius = this.innerRadius(),
                outerRadius = this.outerRadius(),
                numPoints = this.numPoints();

            context.beginPath();
            context.moveTo(0, 0 - outerRadius);

            for(var n = 1; n < numPoints * 2; n++) {
                var radius = n % 2 === 0 ? outerRadius : innerRadius;
                var x = radius * Math.sin(n * Math.PI / numPoints);
                var y = -1 * radius * Math.cos(n * Math.PI / numPoints);
                context.lineTo(x, y);
            }
            context.closePath();

            context.fillStrokeShape(this);
        },
        // implements Shape.prototype.getWidth()
        getWidth: function() {
            return this.getOuterRadius() * 2;
        },
        // implements Shape.prototype.getHeight()
        getHeight: function() {
            return this.getOuterRadius() * 2;
        },
        // implements Shape.prototype.setWidth()
        setWidth: function(width) {
            Konva.Node.prototype.setWidth.call(this, width);
            if (this.outerRadius() !== width / 2) {
                this.setOuterRadius(width / 2);
            }
        },
        // implements Shape.prototype.setHeight()
        setHeight: function(height) {
            Konva.Node.prototype.setHeight.call(this, height);
            if (this.outerRadius() !== height / 2) {
                this.setOuterRadius(height / 2);
            }
        }
    };
    Konva.Util.extend(Konva.Star, Konva.Shape);

    // add getters setters
    Konva.Factory.addGetterSetter(Konva.Star, 'numPoints', 5);

    /**
     * set number of points
     * @name setNumPoints
     * @method
     * @memberof Konva.Star.prototype
     * @param {Integer} points
     */

     /**
     * get number of points
     * @name getNumPoints
     * @method
     * @memberof Konva.Star.prototype
     */

    Konva.Factory.addGetterSetter(Konva.Star, 'innerRadius', 0);

    /**
     * set inner radius
     * @name setInnerRadius
     * @method
     * @memberof Konva.Star.prototype
     * @param {Number} radius
     */

     /**
     * get inner radius
     * @name getInnerRadius
     * @method
     * @memberof Konva.Star.prototype
     */

    Konva.Factory.addGetterSetter(Konva.Star, 'outerRadius', 0);

    /**
     * set outer radius
     * @name setOuterRadius
     * @method
     * @memberof Konva.Star.prototype
     * @param {Number} radius
     */

     /**
     * get outer radius
     * @name getOuterRadius
     * @method
     * @memberof Konva.Star.prototype
     */

    Konva.Collection.mapMethods(Konva.Star);
})();

(function() {
    'use strict';
    // constants
    var ATTR_CHANGE_LIST = ['fontFamily', 'fontSize', 'fontStyle', 'padding', 'lineHeight', 'text'],
        CHANGE_KONVA = 'Change.konva',
        NONE = 'none',
        UP = 'up',
        RIGHT = 'right',
        DOWN = 'down',
        LEFT = 'left',
        LABEL = 'Label',

     // cached variables
     attrChangeListLen = ATTR_CHANGE_LIST.length;

    /**
     * Label constructor.&nbsp; Labels are groups that contain a Text and Tag shape
     * @constructor
     * @memberof Konva
     * @param {Object} config
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * // create label
     * var label = new Konva.Label({
     *   x: 100,
     *   y: 100,
     *   draggable: true
     * });
     *
     * // add a tag to the label
     * label.add(new Konva.Tag({
     *   fill: '#bbb',
     *   stroke: '#333',
     *   shadowColor: 'black',
     *   shadowBlur: 10,
     *   shadowOffset: [10, 10],
     *   shadowOpacity: 0.2,
     *   lineJoin: 'round',
     *   pointerDirection: 'up',
     *   pointerWidth: 20,
     *   pointerHeight: 20,
     *   cornerRadius: 5
     * }));
     *
     * // add text to the label
     * label.add(new Konva.Text({
     *   text: 'Hello World!',
     *   fontSize: 50,
     *   lineHeight: 1.2,
     *   padding: 10,
     *   fill: 'green'
     *  }));
     */
    Konva.Label = function(config) {
        this.____init(config);
    };

    Konva.Label.prototype = {
        ____init: function(config) {
            var that = this;

            Konva.Group.call(this, config);
            this.className = LABEL;

            this.on('add.konva', function(evt) {
                that._addListeners(evt.child);
                that._sync();
            });
        },
        /**
         * get Text shape for the label.  You need to access the Text shape in order to update
         * the text properties
         * @name getText
         * @method
         * @memberof Konva.Label.prototype
         */
        getText: function() {
            return this.find('Text')[0];
        },
        /**
         * get Tag shape for the label.  You need to access the Tag shape in order to update
         * the pointer properties and the corner radius
         * @name getTag
         * @method
         * @memberof Konva.Label.prototype
         */
        getTag: function() {
            return this.find('Tag')[0];
        },
        _addListeners: function(text) {
            var that = this,
                n;
            var func = function(){
                    that._sync();
                };

            // update text data for certain attr changes
            for(n = 0; n < attrChangeListLen; n++) {
                text.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, func);
            }
        },
        getWidth: function() {
            return this.getText().getWidth();
        },
        getHeight: function() {
            return this.getText().getHeight();
        },
        _sync: function() {
            var text = this.getText(),
                tag = this.getTag(),
                width, height, pointerDirection, pointerWidth, x, y, pointerHeight;

            if (text && tag) {
                width = text.getWidth();
                height = text.getHeight();
                pointerDirection = tag.getPointerDirection();
                pointerWidth = tag.getPointerWidth();
                pointerHeight = tag.getPointerHeight();
                x = 0;
                y = 0;

                switch(pointerDirection) {
                    case UP:
                        x = width / 2;
                        y = -1 * pointerHeight;
                        break;
                    case RIGHT:
                        x = width + pointerWidth;
                        y = height / 2;
                        break;
                    case DOWN:
                        x = width / 2;
                        y = height + pointerHeight;
                        break;
                    case LEFT:
                        x = -1 * pointerWidth;
                        y = height / 2;
                        break;
                }

                tag.setAttrs({
                    x: -1 * x,
                    y: -1 * y,
                    width: width,
                    height: height
                });

                text.setAttrs({
                    x: -1 * x,
                    y: -1 * y
                });
            }
        }
    };

    Konva.Util.extend(Konva.Label, Konva.Group);

    Konva.Collection.mapMethods(Konva.Label);

    /**
     * Tag constructor.&nbsp; A Tag can be configured
     *  to have a pointer element that points up, right, down, or left
     * @constructor
     * @memberof Konva
     * @param {Object} config
     * @param {String} [config.pointerDirection] can be up, right, down, left, or none; the default
     *  is none.  When a pointer is present, the positioning of the label is relative to the tip of the pointer.
     * @param {Number} [config.pointerWidth]
     * @param {Number} [config.pointerHeight]
     * @param {Number} [config.cornerRadius]
     */
    Konva.Tag = function(config) {
        this.___init(config);
    };

    Konva.Tag.prototype = {
        ___init: function(config) {
            Konva.Shape.call(this, config);
            this.className = 'Tag';
            this.sceneFunc(this._sceneFunc);
        },
        _sceneFunc: function(context) {
            var width = this.getWidth(),
                height = this.getHeight(),
                pointerDirection = this.getPointerDirection(),
                pointerWidth = this.getPointerWidth(),
                pointerHeight = this.getPointerHeight(),
                cornerRadius = this.getCornerRadius();

            context.beginPath();
            context.moveTo(0, 0);

            if (pointerDirection === UP) {
                context.lineTo((width - pointerWidth) / 2, 0);
                context.lineTo(width / 2, -1 * pointerHeight);
                context.lineTo((width + pointerWidth) / 2, 0);
            }

            if(!cornerRadius) {
                context.lineTo(width, 0);
            } else {
                context.lineTo(width - cornerRadius, 0);
                context.arc(width - cornerRadius, cornerRadius, cornerRadius, Math.PI * 3 / 2, 0, false);
            }

            if (pointerDirection === RIGHT) {
                context.lineTo(width, (height - pointerHeight) / 2);
                context.lineTo(width + pointerWidth, height / 2);
                context.lineTo(width, (height + pointerHeight) / 2);
            }

            if(!cornerRadius) {
                context.lineTo(width, height);
            } else {
                context.lineTo(width, height - cornerRadius);
                context.arc(width - cornerRadius, height - cornerRadius, cornerRadius, 0, Math.PI / 2, false);
            }

            if (pointerDirection === DOWN) {
                context.lineTo((width + pointerWidth) / 2, height);
                context.lineTo(width / 2, height + pointerHeight);
                context.lineTo((width - pointerWidth) / 2, height);
            }

            if(!cornerRadius) {
                context.lineTo(0, height);
            } else {
                context.lineTo(cornerRadius, height);
                context.arc(cornerRadius, height - cornerRadius, cornerRadius, Math.PI / 2, Math.PI, false);
            }

            if (pointerDirection === LEFT) {
                context.lineTo(0, (height + pointerHeight) / 2);
                context.lineTo(-1 * pointerWidth, height / 2);
                context.lineTo(0, (height - pointerHeight) / 2);
            }

            if(cornerRadius) {
                context.lineTo(0, cornerRadius);
                context.arc(cornerRadius, cornerRadius, cornerRadius, Math.PI, Math.PI * 3 / 2, false);
            }

            context.closePath();
            context.fillStrokeShape(this);
        },
        getSelfRect: function() {
            var x = 0,
                y = 0,
                pointerWidth = this.getPointerWidth(),
                pointerHeight = this.getPointerHeight(),
                direction = this.pointerDirection(),
                width = this.getWidth(),
                height = this.getHeight();

            if (direction === UP) {
                y -= pointerHeight;
                height += pointerHeight;
            } else if (direction === DOWN) {
                height += pointerHeight;
            } else if (direction === LEFT) {
                // ARGH!!! I have no idea why should I used magic 1.5!!!!!!!!!
                x -= pointerWidth * 1.5;
                width += pointerWidth;
            } else if (direction === RIGHT) {
                width += pointerWidth * 1.5;
            }
            return {
                x: x,
                y: y,
                width: width,
                height: height
            };
        }
    };

    Konva.Util.extend(Konva.Tag, Konva.Shape);
    Konva.Factory.addGetterSetter(Konva.Tag, 'pointerDirection', NONE);

    /**
     * set pointer Direction
     * @name setPointerDirection
     * @method
     * @memberof Konva.Tag.prototype
     * @param {String} pointerDirection can be up, right, down, left, or none.  The
     *  default is none
     */

     /**
     * get pointer Direction
     * @name getPointerDirection
     * @method
     * @memberof Konva.Tag.prototype
     */

    Konva.Factory.addGetterSetter(Konva.Tag, 'pointerWidth', 0);

    /**
     * set pointer width
     * @name setPointerWidth
     * @method
     * @memberof Konva.Tag.prototype
     * @param {Number} pointerWidth
     */

     /**
     * get pointer width
     * @name getPointerWidth
     * @method
     * @memberof Konva.Tag.prototype
     */

    Konva.Factory.addGetterSetter(Konva.Tag, 'pointerHeight', 0);

    /**
     * set pointer height
     * @name setPointerHeight
     * @method
     * @memberof Konva.Tag.prototype
     * @param {Number} pointerHeight
     */

     /**
     * get pointer height
     * @name getPointerHeight
     * @method
     * @memberof Konva.Tag.prototype
     */

    Konva.Factory.addGetterSetter(Konva.Tag, 'cornerRadius', 0);

    /**
     * set corner radius
     * @name setCornerRadius
     * @method
     * @memberof Konva.Tag.prototype
     * @param {Number} corner radius
     */

    /**
     * get corner radius
     * @name getCornerRadius
     * @method
     * @memberof Konva.Tag.prototype
     */

    Konva.Collection.mapMethods(Konva.Tag);
})();

(function() {
    'use strict';
    /**
     * Arrow constructor
     * @constructor
     * @memberof Konva
     * @augments Konva.Shape
     * @param {Object} config
     * @param {Array} config.points
     * @param {Number} [config.tension] Higher values will result in a more curvy line.  A value of 0 will result in no interpolation.
     *   The default is 0
     * @param {Number} config.pointerLength
     * @param {Number} config.pointerWidth
     * @param {String} [config.fill] fill color
     * @param {Image} [config.fillPatternImage] fill pattern image
     * @param {Number} [config.fillPatternX]
     * @param {Number} [config.fillPatternY]
     * @param {Object} [config.fillPatternOffset] object with x and y component
     * @param {Number} [config.fillPatternOffsetX] 
     * @param {Number} [config.fillPatternOffsetY] 
     * @param {Object} [config.fillPatternScale] object with x and y component
     * @param {Number} [config.fillPatternScaleX]
     * @param {Number} [config.fillPatternScaleY]
     * @param {Number} [config.fillPatternRotation]
     * @param {String} [config.fillPatternRepeat] can be "repeat", "repeat-x", "repeat-y", or "no-repeat".  The default is "no-repeat"
     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientStartPointX]
     * @param {Number} [config.fillLinearGradientStartPointY]
     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component
     * @param {Number} [config.fillLinearGradientEndPointX]
     * @param {Number} [config.fillLinearGradientEndPointY]
     * @param {Array} [config.fillLinearGradientColorStops] array of color stops
     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientStartPointX]
     * @param {Number} [config.fillRadialGradientStartPointY]
     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component
     * @param {Number} [config.fillRadialGradientEndPointX] 
     * @param {Number} [config.fillRadialGradientEndPointY] 
     * @param {Number} [config.fillRadialGradientStartRadius]
     * @param {Number} [config.fillRadialGradientEndRadius]
     * @param {Array} [config.fillRadialGradientColorStops] array of color stops
     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true
     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration
     * @param {String} [config.stroke] stroke color
     * @param {Number} [config.strokeWidth] stroke width
     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true
     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true
     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true
     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true
     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true
     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default
     *  is miter
     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default
     *  is butt
     * @param {String} [config.shadowColor]
     * @param {Number} [config.shadowBlur]
     * @param {Object} [config.shadowOffset] object with x and y component
     * @param {Number} [config.shadowOffsetX]
     * @param {Number} [config.shadowOffsetY]
     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number
     *  between 0 and 1
     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true
     * @param {Array} [config.dash]
     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true
     * @param {Number} [config.x]
     * @param {Number} [config.y]
     * @param {Number} [config.width]
     * @param {Number} [config.height]
     * @param {Boolean} [config.visible]
     * @param {Boolean} [config.listening] whether or not the node is listening for events
     * @param {String} [config.id] unique id
     * @param {String} [config.name] non-unique name
     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1
     * @param {Object} [config.scale] set scale
     * @param {Number} [config.scaleX] set scale x
     * @param {Number} [config.scaleY] set scale y
     * @param {Number} [config.rotation] rotation in degrees
     * @param {Object} [config.offset] offset from center point and rotation point
     * @param {Number} [config.offsetX] set offset x
     * @param {Number} [config.offsetY] set offset y
     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop
     *  the entire stage by dragging any portion of the stage
     * @param {Number} [config.dragDistance]
     * @param {Function} [config.dragBoundFunc]
     * @example
     * var line = new Konva.Line({
     *   points: [73, 70, 340, 23, 450, 60, 500, 20],
     *   stroke: 'red',
     *   tension: 1,
     *   pointerLength : 10,
     *   pointerWidth : 12
     * });
     */
    Konva.Arrow = function(config) {
        this.____init(config);
    };

    Konva.Arrow.prototype = {
        ____init: function(config) {
            // call super constructor
            Konva.Line.call(this, config);
            this.className = 'Arrow';
        },
        _sceneFunc: function(ctx) {
            var PI2 = Math.PI * 2;
            var points = this.points();
            var n = points.length;
            var dx = points[n - 2] - points[n - 4];
            var dy = points[n - 1] - points[n - 3];
            var radians = (Math.atan2(dy, dx) + PI2) % PI2;
            var length = this.pointerLength();
            var width = this.pointerWidth();

            ctx.save();
            ctx.beginPath();
            ctx.translate(points[n - 2], points[n - 1]);
            ctx.rotate(radians);
            ctx.moveTo(0, 0);
            ctx.lineTo(-length, width / 2);
            ctx.lineTo(-length, -width / 2);
            ctx.closePath();
            ctx.restore();

            if (this.pointerAtBeginning()) {
                ctx.save();
                ctx.translate(points[0], points[1]);
                dx = points[2] - points[0];
                dy = points[3] - points[1];
                ctx.rotate((Math.atan2(-dy, -dx) + PI2) % PI2);
                ctx.moveTo(0, 0);
                ctx.lineTo(-10, 6);
                ctx.lineTo(-10, -6);
                ctx.closePath();
                ctx.restore();
            }

            ctx.fillStrokeShape(this);
            Konva.Line.prototype._sceneFunc.apply(this, arguments);
        }
    };

    Konva.Util.extend(Konva.Arrow, Konva.Line);
    /**
     * get/set pointerLength
     * @name pointerLength
     * @method
     * @memberof Konva.Arrow.prototype
     * @param {Number} Length of pointer of arrow.
     *   The default is 10.
     * @returns {Number}
     * @example
     * // get tension
     * var pointerLength = line.pointerLength();
     *
     * // set tension
     * line.pointerLength(15);
     */

    Konva.Factory.addGetterSetter(Konva.Arrow, 'pointerLength', 10);
    /**
     * get/set pointerWidth
     * @name pointerWidth
     * @method
     * @memberof Konva.Arrow.prototype
     * @param {Number} Width of pointer of arrow.
     *   The default is 10.
     * @returns {Number}
     * @example
     * // get tension
     * var pointerWidth = line.pointerWidth();
     *
     * // set tension
     * line.pointerWidth(15);
     */

    Konva.Factory.addGetterSetter(Konva.Arrow, 'pointerWidth', 10);
    /**
     * get/set pointerAtBeginning
     * @name pointerAtBeginning
     * @method
     * @memberof Konva.Arrow.prototype
     * @param {Number} Should pointer displayed at beginning of arrow.
     *   The default is false.
     * @returns {Boolean}
     * @example
     * // get tension
     * var pointerAtBeginning = line.pointerAtBeginning();
     *
     * // set tension
     * line.pointerAtBeginning(true);
     */

    Konva.Factory.addGetterSetter(Konva.Arrow, 'pointerAtBeginning', false);
    Konva.Collection.mapMethods(Konva.Arrow);

})();



/*
 * JQuery zTree core v3.5.19.1
 * http://zTree.me/
 *
 * Copyright (c) 2010 Hunter.z
 *
 * Licensed same as jquery - MIT License
 * http://www.opensource.org/licenses/mit-license.php
 *
 * email: hunter.z@263.net
 * Date: 2015-10-26
 */
(function(q){var I,J,K,L,M,N,v,s={},w={},x={},O={treeId:"",treeObj:null,view:{addDiyDom:null,autoCancelSelected:!0,dblClickExpand:!0,expandSpeed:"fast",fontCss:{},nameIsHTML:!1,selectedMulti:!0,showIcon:!0,showLine:!0,showTitle:!0,txtSelectedEnable:!1},data:{key:{children:"children",name:"name",title:"",url:"url",icon:"icon"},simpleData:{enable:!1,idKey:"id",pIdKey:"pId",rootPId:null},keep:{parent:!1,leaf:!1}},async:{enable:!1,contentType:"application/x-www-form-urlencoded",type:"post",dataType:"text",
url:"",autoParam:[],otherParam:[],dataFilter:null},callback:{beforeAsync:null,beforeClick:null,beforeDblClick:null,beforeRightClick:null,beforeMouseDown:null,beforeMouseUp:null,beforeExpand:null,beforeCollapse:null,beforeRemove:null,onAsyncError:null,onAsyncSuccess:null,onNodeCreated:null,onClick:null,onDblClick:null,onRightClick:null,onMouseDown:null,onMouseUp:null,onExpand:null,onCollapse:null,onRemove:null}},y=[function(b){var a=b.treeObj,c=f.event;a.bind(c.NODECREATED,function(a,c,g){j.apply(b.callback.onNodeCreated,
[a,c,g])});a.bind(c.CLICK,function(a,c,g,m,h){j.apply(b.callback.onClick,[c,g,m,h])});a.bind(c.EXPAND,function(a,c,g){j.apply(b.callback.onExpand,[a,c,g])});a.bind(c.COLLAPSE,function(a,c,g){j.apply(b.callback.onCollapse,[a,c,g])});a.bind(c.ASYNC_SUCCESS,function(a,c,g,h){j.apply(b.callback.onAsyncSuccess,[a,c,g,h])});a.bind(c.ASYNC_ERROR,function(a,c,g,h,f,i){j.apply(b.callback.onAsyncError,[a,c,g,h,f,i])});a.bind(c.REMOVE,function(a,c,g){j.apply(b.callback.onRemove,[a,c,g])});a.bind(c.SELECTED,
function(a,c,g){j.apply(b.callback.onSelected,[c,g])});a.bind(c.UNSELECTED,function(a,c,g){j.apply(b.callback.onUnSelected,[c,g])})}],z=[function(b){var a=f.event;b.treeObj.unbind(a.NODECREATED).unbind(a.CLICK).unbind(a.EXPAND).unbind(a.COLLAPSE).unbind(a.ASYNC_SUCCESS).unbind(a.ASYNC_ERROR).unbind(a.REMOVE).unbind(a.SELECTED).unbind(a.UNSELECTED)}],A=[function(b){var a=h.getCache(b);a||(a={},h.setCache(b,a));a.nodes=[];a.doms=[]}],B=[function(b,a,c,d,e,g){if(c){var m=h.getRoot(b),f=b.data.key.children;
c.level=a;c.tId=b.treeId+"_"+ ++m.zId;c.parentTId=d?d.tId:null;c.open=typeof c.open=="string"?j.eqs(c.open,"true"):!!c.open;c[f]&&c[f].length>0?(c.isParent=!0,c.zAsync=!0):(c.isParent=typeof c.isParent=="string"?j.eqs(c.isParent,"true"):!!c.isParent,c.open=c.isParent&&!b.async.enable?c.open:!1,c.zAsync=!c.isParent);c.isFirstNode=e;c.isLastNode=g;c.getParentNode=function(){return h.getNodeCache(b,c.parentTId)};c.getPreNode=function(){return h.getPreNode(b,c)};c.getNextNode=function(){return h.getNextNode(b,
c)};c.getIndex=function(){return h.getNodeIndex(b,c)};c.getPath=function(){return h.getNodePath(b,c)};c.isAjaxing=!1;h.fixPIdKeyValue(b,c)}}],u=[function(b){var a=b.target,c=h.getSetting(b.data.treeId),d="",e=null,g="",m="",i=null,n=null,k=null;if(j.eqs(b.type,"mousedown"))m="mousedown";else if(j.eqs(b.type,"mouseup"))m="mouseup";else if(j.eqs(b.type,"contextmenu"))m="contextmenu";else if(j.eqs(b.type,"click"))if(j.eqs(a.tagName,"span")&&a.getAttribute("treeNode"+f.id.SWITCH)!==null)d=j.getNodeMainDom(a).id,
g="switchNode";else{if(k=j.getMDom(c,a,[{tagName:"a",attrName:"treeNode"+f.id.A}]))d=j.getNodeMainDom(k).id,g="clickNode"}else if(j.eqs(b.type,"dblclick")&&(m="dblclick",k=j.getMDom(c,a,[{tagName:"a",attrName:"treeNode"+f.id.A}])))d=j.getNodeMainDom(k).id,g="switchNode";if(m.length>0&&d.length==0&&(k=j.getMDom(c,a,[{tagName:"a",attrName:"treeNode"+f.id.A}])))d=j.getNodeMainDom(k).id;if(d.length>0)switch(e=h.getNodeCache(c,d),g){case "switchNode":e.isParent?j.eqs(b.type,"click")||j.eqs(b.type,"dblclick")&&
j.apply(c.view.dblClickExpand,[c.treeId,e],c.view.dblClickExpand)?i=I:g="":g="";break;case "clickNode":i=J}switch(m){case "mousedown":n=K;break;case "mouseup":n=L;break;case "dblclick":n=M;break;case "contextmenu":n=N}return{stop:!1,node:e,nodeEventType:g,nodeEventCallback:i,treeEventType:m,treeEventCallback:n}}],C=[function(b){var a=h.getRoot(b);a||(a={},h.setRoot(b,a));a[b.data.key.children]=[];a.expandTriggerFlag=!1;a.curSelectedList=[];a.noSelection=!0;a.createdNodes=[];a.zId=0;a._ver=(new Date).getTime()}],
D=[],E=[],F=[],G=[],H=[],h={addNodeCache:function(b,a){h.getCache(b).nodes[h.getNodeCacheId(a.tId)]=a},getNodeCacheId:function(b){return b.substring(b.lastIndexOf("_")+1)},addAfterA:function(b){E.push(b)},addBeforeA:function(b){D.push(b)},addInnerAfterA:function(b){G.push(b)},addInnerBeforeA:function(b){F.push(b)},addInitBind:function(b){y.push(b)},addInitUnBind:function(b){z.push(b)},addInitCache:function(b){A.push(b)},addInitNode:function(b){B.push(b)},addInitProxy:function(b,a){a?u.splice(0,0,
b):u.push(b)},addInitRoot:function(b){C.push(b)},addNodesData:function(b,a,c,d){var e=b.data.key.children;a[e]?c>=a[e].length&&(c=-1):(a[e]=[],c=-1);if(a[e].length>0&&c===0)a[e][0].isFirstNode=!1,i.setNodeLineIcos(b,a[e][0]);else if(a[e].length>0&&c<0)a[e][a[e].length-1].isLastNode=!1,i.setNodeLineIcos(b,a[e][a[e].length-1]);a.isParent=!0;c<0?a[e]=a[e].concat(d):(b=[c,0].concat(d),a[e].splice.apply(a[e],b))},addSelectedNode:function(b,a){var c=h.getRoot(b);h.isSelectedNode(b,a)||c.curSelectedList.push(a)},
addCreatedNode:function(b,a){(b.callback.onNodeCreated||b.view.addDiyDom)&&h.getRoot(b).createdNodes.push(a)},addZTreeTools:function(b){H.push(b)},exSetting:function(b){q.extend(!0,O,b)},fixPIdKeyValue:function(b,a){b.data.simpleData.enable&&(a[b.data.simpleData.pIdKey]=a.parentTId?a.getParentNode()[b.data.simpleData.idKey]:b.data.simpleData.rootPId)},getAfterA:function(b,a,c){for(var d=0,e=E.length;d<e;d++)E[d].apply(this,arguments)},getBeforeA:function(b,a,c){for(var d=0,e=D.length;d<e;d++)D[d].apply(this,
arguments)},getInnerAfterA:function(b,a,c){for(var d=0,e=G.length;d<e;d++)G[d].apply(this,arguments)},getInnerBeforeA:function(b,a,c){for(var d=0,e=F.length;d<e;d++)F[d].apply(this,arguments)},getCache:function(b){return x[b.treeId]},getNodeIndex:function(b,a){if(!a)return null;for(var c=b.data.key.children,d=a.parentTId?a.getParentNode():h.getRoot(b),e=0,g=d[c].length-1;e<=g;e++)if(d[c][e]===a)return e;return-1},getNextNode:function(b,a){if(!a)return null;for(var c=b.data.key.children,d=a.parentTId?
a.getParentNode():h.getRoot(b),e=0,g=d[c].length-1;e<=g;e++)if(d[c][e]===a)return e==g?null:d[c][e+1];return null},getNodeByParam:function(b,a,c,d){if(!a||!c)return null;for(var e=b.data.key.children,g=0,f=a.length;g<f;g++){if(a[g][c]==d)return a[g];var i=h.getNodeByParam(b,a[g][e],c,d);if(i)return i}return null},getNodeCache:function(b,a){if(!a)return null;var c=x[b.treeId].nodes[h.getNodeCacheId(a)];return c?c:null},getNodeName:function(b,a){return""+a[b.data.key.name]},getNodePath:function(b,a){if(!a)return null;
var c;(c=a.parentTId?a.getParentNode().getPath():[])&&c.push(a);return c},getNodeTitle:function(b,a){return""+a[b.data.key.title===""?b.data.key.name:b.data.key.title]},getNodes:function(b){return h.getRoot(b)[b.data.key.children]},getNodesByParam:function(b,a,c,d){if(!a||!c)return[];for(var e=b.data.key.children,g=[],f=0,i=a.length;f<i;f++)a[f][c]==d&&g.push(a[f]),g=g.concat(h.getNodesByParam(b,a[f][e],c,d));return g},getNodesByParamFuzzy:function(b,a,c,d){if(!a||!c)return[];for(var e=b.data.key.children,
g=[],d=d.toLowerCase(),f=0,i=a.length;f<i;f++)typeof a[f][c]=="string"&&a[f][c].toLowerCase().indexOf(d)>-1&&g.push(a[f]),g=g.concat(h.getNodesByParamFuzzy(b,a[f][e],c,d));return g},getNodesByFilter:function(b,a,c,d,e){if(!a)return d?null:[];for(var g=b.data.key.children,f=d?null:[],i=0,n=a.length;i<n;i++){if(j.apply(c,[a[i],e],!1)){if(d)return a[i];f.push(a[i])}var k=h.getNodesByFilter(b,a[i][g],c,d,e);if(d&&k)return k;f=d?k:f.concat(k)}return f},getPreNode:function(b,a){if(!a)return null;for(var c=
b.data.key.children,d=a.parentTId?a.getParentNode():h.getRoot(b),e=0,g=d[c].length;e<g;e++)if(d[c][e]===a)return e==0?null:d[c][e-1];return null},getRoot:function(b){return b?w[b.treeId]:null},getRoots:function(){return w},getSetting:function(b){return s[b]},getSettings:function(){return s},getZTreeTools:function(b){return(b=this.getRoot(this.getSetting(b)))?b.treeTools:null},initCache:function(b){for(var a=0,c=A.length;a<c;a++)A[a].apply(this,arguments)},initNode:function(b,a,c,d,e,g){for(var f=
0,h=B.length;f<h;f++)B[f].apply(this,arguments)},initRoot:function(b){for(var a=0,c=C.length;a<c;a++)C[a].apply(this,arguments)},isSelectedNode:function(b,a){for(var c=h.getRoot(b),d=0,e=c.curSelectedList.length;d<e;d++)if(a===c.curSelectedList[d])return!0;return!1},removeNodeCache:function(b,a){var c=b.data.key.children;if(a[c])for(var d=0,e=a[c].length;d<e;d++)arguments.callee(b,a[c][d]);h.getCache(b).nodes[h.getNodeCacheId(a.tId)]=null},removeSelectedNode:function(b,a){for(var c=h.getRoot(b),d=
0,e=c.curSelectedList.length;d<e;d++)if(a===c.curSelectedList[d]||!h.getNodeCache(b,c.curSelectedList[d].tId))c.curSelectedList.splice(d,1),b.treeObj.trigger(f.event.UNSELECTED,[b.treeId,a]),d--,e--},setCache:function(b,a){x[b.treeId]=a},setRoot:function(b,a){w[b.treeId]=a},setZTreeTools:function(b,a){for(var c=0,d=H.length;c<d;c++)H[c].apply(this,arguments)},transformToArrayFormat:function(b,a){if(!a)return[];var c=b.data.key.children,d=[];if(j.isArray(a))for(var e=0,g=a.length;e<g;e++)d.push(a[e]),
a[e][c]&&(d=d.concat(h.transformToArrayFormat(b,a[e][c])));else d.push(a),a[c]&&(d=d.concat(h.transformToArrayFormat(b,a[c])));return d},transformTozTreeFormat:function(b,a){var c,d,e=b.data.simpleData.idKey,g=b.data.simpleData.pIdKey,f=b.data.key.children;if(!e||e==""||!a)return[];if(j.isArray(a)){var h=[],i=[];for(c=0,d=a.length;c<d;c++)i[a[c][e]]=a[c];for(c=0,d=a.length;c<d;c++)i[a[c][g]]&&a[c][e]!=a[c][g]?(i[a[c][g]][f]||(i[a[c][g]][f]=[]),i[a[c][g]][f].push(a[c])):h.push(a[c]);return h}else return[a]}},
l={bindEvent:function(b){for(var a=0,c=y.length;a<c;a++)y[a].apply(this,arguments)},unbindEvent:function(b){for(var a=0,c=z.length;a<c;a++)z[a].apply(this,arguments)},bindTree:function(b){var a={treeId:b.treeId},c=b.treeObj;b.view.txtSelectedEnable||c.bind("selectstart",v).css({"-moz-user-select":"-moz-none"});c.bind("click",a,l.proxy);c.bind("dblclick",a,l.proxy);c.bind("mouseover",a,l.proxy);c.bind("mouseout",a,l.proxy);c.bind("mousedown",a,l.proxy);c.bind("mouseup",a,l.proxy);c.bind("contextmenu",
a,l.proxy)},unbindTree:function(b){b.treeObj.unbind("selectstart",v).unbind("click",l.proxy).unbind("dblclick",l.proxy).unbind("mouseover",l.proxy).unbind("mouseout",l.proxy).unbind("mousedown",l.proxy).unbind("mouseup",l.proxy).unbind("contextmenu",l.proxy)},doProxy:function(b){for(var a=[],c=0,d=u.length;c<d;c++){var e=u[c].apply(this,arguments);a.push(e);if(e.stop)break}return a},proxy:function(b){var a=h.getSetting(b.data.treeId);if(!j.uCanDo(a,b))return!0;for(var a=l.doProxy(b),c=!0,d=0,e=a.length;d<
e;d++){var g=a[d];g.nodeEventCallback&&(c=g.nodeEventCallback.apply(g,[b,g.node])&&c);g.treeEventCallback&&(c=g.treeEventCallback.apply(g,[b,g.node])&&c)}return c}};I=function(b,a){var c=h.getSetting(b.data.treeId);if(a.open){if(j.apply(c.callback.beforeCollapse,[c.treeId,a],!0)==!1)return!0}else if(j.apply(c.callback.beforeExpand,[c.treeId,a],!0)==!1)return!0;h.getRoot(c).expandTriggerFlag=!0;i.switchNode(c,a);return!0};J=function(b,a){var c=h.getSetting(b.data.treeId),d=c.view.autoCancelSelected&&
(b.ctrlKey||b.metaKey)&&h.isSelectedNode(c,a)?0:c.view.autoCancelSelected&&(b.ctrlKey||b.metaKey)&&c.view.selectedMulti?2:1;if(j.apply(c.callback.beforeClick,[c.treeId,a,d],!0)==!1)return!0;d===0?i.cancelPreSelectedNode(c,a):i.selectNode(c,a,d===2);c.treeObj.trigger(f.event.CLICK,[b,c.treeId,a,d]);return!0};K=function(b,a){var c=h.getSetting(b.data.treeId);j.apply(c.callback.beforeMouseDown,[c.treeId,a],!0)&&j.apply(c.callback.onMouseDown,[b,c.treeId,a]);return!0};L=function(b,a){var c=h.getSetting(b.data.treeId);
j.apply(c.callback.beforeMouseUp,[c.treeId,a],!0)&&j.apply(c.callback.onMouseUp,[b,c.treeId,a]);return!0};M=function(b,a){var c=h.getSetting(b.data.treeId);j.apply(c.callback.beforeDblClick,[c.treeId,a],!0)&&j.apply(c.callback.onDblClick,[b,c.treeId,a]);return!0};N=function(b,a){var c=h.getSetting(b.data.treeId);j.apply(c.callback.beforeRightClick,[c.treeId,a],!0)&&j.apply(c.callback.onRightClick,[b,c.treeId,a]);return typeof c.callback.onRightClick!="function"};v=function(b){b=b.originalEvent.srcElement.nodeName.toLowerCase();
return b==="input"||b==="textarea"};var j={apply:function(b,a,c){return typeof b=="function"?b.apply(P,a?a:[]):c},canAsync:function(b,a){var c=b.data.key.children;return b.async.enable&&a&&a.isParent&&!(a.zAsync||a[c]&&a[c].length>0)},clone:function(b){if(b===null)return null;var a=j.isArray(b)?[]:{},c;for(c in b)a[c]=b[c]instanceof Date?new Date(b[c].getTime()):typeof b[c]==="object"?arguments.callee(b[c]):b[c];return a},eqs:function(b,a){return b.toLowerCase()===a.toLowerCase()},isArray:function(b){return Object.prototype.toString.apply(b)===
"[object Array]"},$:function(b,a,c){a&&typeof a!="string"&&(c=a,a="");return typeof b=="string"?q(b,c?c.treeObj.get(0).ownerDocument:null):q("#"+b.tId+a,c?c.treeObj:null)},getMDom:function(b,a,c){if(!a)return null;for(;a&&a.id!==b.treeId;){for(var d=0,e=c.length;a.tagName&&d<e;d++)if(j.eqs(a.tagName,c[d].tagName)&&a.getAttribute(c[d].attrName)!==null)return a;a=a.parentNode}return null},getNodeMainDom:function(b){return q(b).parent("li").get(0)||q(b).parentsUntil("li").parent().get(0)},isChildOrSelf:function(b,
a){return q(b).closest("#"+a).length>0},uCanDo:function(){return!0}},i={addNodes:function(b,a,c,d,e){if(!b.data.keep.leaf||!a||a.isParent)if(j.isArray(d)||(d=[d]),b.data.simpleData.enable&&(d=h.transformTozTreeFormat(b,d)),a){var g=k(a,f.id.SWITCH,b),m=k(a,f.id.ICON,b),o=k(a,f.id.UL,b);if(!a.open)i.replaceSwitchClass(a,g,f.folder.CLOSE),i.replaceIcoClass(a,m,f.folder.CLOSE),a.open=!1,o.css({display:"none"});h.addNodesData(b,a,c,d);i.createNodes(b,a.level+1,d,a,c);e||i.expandCollapseParentNode(b,a,
!0)}else h.addNodesData(b,h.getRoot(b),c,d),i.createNodes(b,0,d,null,c)},appendNodes:function(b,a,c,d,e,g,f){if(!c)return[];var j=[],k=b.data.key.children,l=(d?d:h.getRoot(b))[k],r,Q;if(!l||e>=l.length)e=-1;for(var t=0,q=c.length;t<q;t++){var p=c[t];g&&(r=(e===0||l.length==c.length)&&t==0,Q=e<0&&t==c.length-1,h.initNode(b,a,p,d,r,Q,f),h.addNodeCache(b,p));r=[];p[k]&&p[k].length>0&&(r=i.appendNodes(b,a+1,p[k],p,-1,g,f&&p.open));f&&(i.makeDOMNodeMainBefore(j,b,p),i.makeDOMNodeLine(j,b,p),h.getBeforeA(b,
p,j),i.makeDOMNodeNameBefore(j,b,p),h.getInnerBeforeA(b,p,j),i.makeDOMNodeIcon(j,b,p),h.getInnerAfterA(b,p,j),i.makeDOMNodeNameAfter(j,b,p),h.getAfterA(b,p,j),p.isParent&&p.open&&i.makeUlHtml(b,p,j,r.join("")),i.makeDOMNodeMainAfter(j,b,p),h.addCreatedNode(b,p))}return j},appendParentULDom:function(b,a){var c=[],d=k(a,b);!d.get(0)&&a.parentTId&&(i.appendParentULDom(b,a.getParentNode()),d=k(a,b));var e=k(a,f.id.UL,b);e.get(0)&&e.remove();e=i.appendNodes(b,a.level+1,a[b.data.key.children],a,-1,!1,!0);
i.makeUlHtml(b,a,c,e.join(""));d.append(c.join(""))},asyncNode:function(b,a,c,d){var e,g;if(a&&!a.isParent)return j.apply(d),!1;else if(a&&a.isAjaxing)return!1;else if(j.apply(b.callback.beforeAsync,[b.treeId,a],!0)==!1)return j.apply(d),!1;if(a)a.isAjaxing=!0,k(a,f.id.ICON,b).attr({style:"","class":f.className.BUTTON+" "+f.className.ICO_LOADING});var m={};for(e=0,g=b.async.autoParam.length;a&&e<g;e++){var o=b.async.autoParam[e].split("="),n=o;o.length>1&&(n=o[1],o=o[0]);m[n]=a[o]}if(j.isArray(b.async.otherParam))for(e=
0,g=b.async.otherParam.length;e<g;e+=2)m[b.async.otherParam[e]]=b.async.otherParam[e+1];else for(var l in b.async.otherParam)m[l]=b.async.otherParam[l];var r=h.getRoot(b)._ver;q.ajax({contentType:b.async.contentType,cache:!1,type:b.async.type,url:j.apply(b.async.url,[b.treeId,a],b.async.url),data:m,dataType:b.async.dataType,success:function(e){if(r==h.getRoot(b)._ver){var g=[];try{g=!e||e.length==0?[]:typeof e=="string"?eval("("+e+")"):e}catch(m){g=e}if(a)a.isAjaxing=null,a.zAsync=!0;i.setNodeLineIcos(b,
a);g&&g!==""?(g=j.apply(b.async.dataFilter,[b.treeId,a,g],g),i.addNodes(b,a,-1,g?j.clone(g):[],!!c)):i.addNodes(b,a,-1,[],!!c);b.treeObj.trigger(f.event.ASYNC_SUCCESS,[b.treeId,a,e]);j.apply(d)}},error:function(c,d,e){if(r==h.getRoot(b)._ver){if(a)a.isAjaxing=null;i.setNodeLineIcos(b,a);b.treeObj.trigger(f.event.ASYNC_ERROR,[b.treeId,a,c,d,e])}}});return!0},cancelPreSelectedNode:function(b,a,c){var d=h.getRoot(b).curSelectedList,e,g;for(e=d.length-1;e>=0;e--)if(g=d[e],a===g||!a&&(!c||c!==g))if(k(g,
f.id.A,b).removeClass(f.node.CURSELECTED),a){h.removeSelectedNode(b,a);break}else d.splice(e,1),b.treeObj.trigger(f.event.UNSELECTED,[b.treeId,g])},createNodeCallback:function(b){if(b.callback.onNodeCreated||b.view.addDiyDom)for(var a=h.getRoot(b);a.createdNodes.length>0;){var c=a.createdNodes.shift();j.apply(b.view.addDiyDom,[b.treeId,c]);b.callback.onNodeCreated&&b.treeObj.trigger(f.event.NODECREATED,[b.treeId,c])}},createNodes:function(b,a,c,d,e){if(c&&c.length!=0){var g=h.getRoot(b),j=b.data.key.children,
j=!d||d.open||!!k(d[j][0],b).get(0);g.createdNodes=[];var a=i.appendNodes(b,a,c,d,e,!0,j),o,n;d?(d=k(d,f.id.UL,b),d.get(0)&&(o=d)):o=b.treeObj;o&&(e>=0&&(n=o.children()[e]),e>=0&&n?q(n).before(a.join("")):o.append(a.join("")));i.createNodeCallback(b)}},destroy:function(b){b&&(h.initCache(b),h.initRoot(b),l.unbindTree(b),l.unbindEvent(b),b.treeObj.empty(),delete s[b.treeId])},expandCollapseNode:function(b,a,c,d,e){var g=h.getRoot(b),m=b.data.key.children;if(a){if(g.expandTriggerFlag){var o=e,e=function(){o&&
o();a.open?b.treeObj.trigger(f.event.EXPAND,[b.treeId,a]):b.treeObj.trigger(f.event.COLLAPSE,[b.treeId,a])};g.expandTriggerFlag=!1}if(!a.open&&a.isParent&&(!k(a,f.id.UL,b).get(0)||a[m]&&a[m].length>0&&!k(a[m][0],b).get(0)))i.appendParentULDom(b,a),i.createNodeCallback(b);if(a.open==c)j.apply(e,[]);else{var c=k(a,f.id.UL,b),g=k(a,f.id.SWITCH,b),n=k(a,f.id.ICON,b);a.isParent?(a.open=!a.open,a.iconOpen&&a.iconClose&&n.attr("style",i.makeNodeIcoStyle(b,a)),a.open?(i.replaceSwitchClass(a,g,f.folder.OPEN),
i.replaceIcoClass(a,n,f.folder.OPEN),d==!1||b.view.expandSpeed==""?(c.show(),j.apply(e,[])):a[m]&&a[m].length>0?c.slideDown(b.view.expandSpeed,e):(c.show(),j.apply(e,[]))):(i.replaceSwitchClass(a,g,f.folder.CLOSE),i.replaceIcoClass(a,n,f.folder.CLOSE),d==!1||b.view.expandSpeed==""||!(a[m]&&a[m].length>0)?(c.hide(),j.apply(e,[])):c.slideUp(b.view.expandSpeed,e))):j.apply(e,[])}}else j.apply(e,[])},expandCollapseParentNode:function(b,a,c,d,e){a&&(a.parentTId?(i.expandCollapseNode(b,a,c,d),a.parentTId&&
i.expandCollapseParentNode(b,a.getParentNode(),c,d,e)):i.expandCollapseNode(b,a,c,d,e))},expandCollapseSonNode:function(b,a,c,d,e){var g=h.getRoot(b),f=b.data.key.children,g=a?a[f]:g[f],f=a?!1:d,j=h.getRoot(b).expandTriggerFlag;h.getRoot(b).expandTriggerFlag=!1;if(g)for(var k=0,l=g.length;k<l;k++)g[k]&&i.expandCollapseSonNode(b,g[k],c,f);h.getRoot(b).expandTriggerFlag=j;i.expandCollapseNode(b,a,c,d,e)},isSelectedNode:function(b,a){if(!a)return!1;var c=h.getRoot(b).curSelectedList,d;for(d=c.length-
1;d>=0;d--)if(a===c[d])return!0;return!1},makeDOMNodeIcon:function(b,a,c){var d=h.getNodeName(a,c),d=a.view.nameIsHTML?d:d.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");b.push("<span id='",c.tId,f.id.ICON,"' title='' treeNode",f.id.ICON," class='",i.makeNodeIcoClass(a,c),"' style='",i.makeNodeIcoStyle(a,c),"'></span><span id='",c.tId,f.id.SPAN,"'>",d,"</span>")},makeDOMNodeLine:function(b,a,c){b.push("<span id='",c.tId,f.id.SWITCH,"' title='' class='",i.makeNodeLineClass(a,c),"' treeNode",
f.id.SWITCH,"></span>")},makeDOMNodeMainAfter:function(b){b.push("</li>")},makeDOMNodeMainBefore:function(b,a,c){b.push("<li id='",c.tId,"' class='",f.className.LEVEL,c.level,"' tabindex='0' hidefocus='true' treenode>")},makeDOMNodeNameAfter:function(b){b.push("</a>")},makeDOMNodeNameBefore:function(b,a,c){var d=h.getNodeTitle(a,c),e=i.makeNodeUrl(a,c),g=i.makeNodeFontCss(a,c),m=[],k;for(k in g)m.push(k,":",g[k],";");b.push("<a id='",c.tId,f.id.A,"' class='",f.className.LEVEL,c.level,"' treeNode",
f.id.A,' onclick="',c.click||"",'" ',e!=null&&e.length>0?"href='"+e+"'":""," target='",i.makeNodeTarget(c),"' style='",m.join(""),"'");j.apply(a.view.showTitle,[a.treeId,c],a.view.showTitle)&&d&&b.push("title='",d.replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),"'");b.push(">")},makeNodeFontCss:function(b,a){var c=j.apply(b.view.fontCss,[b.treeId,a],b.view.fontCss);return c&&typeof c!="function"?c:{}},makeNodeIcoClass:function(b,a){var c=["ico"];a.isAjaxing||(c[0]=(a.iconSkin?a.iconSkin+
"_":"")+c[0],a.isParent?c.push(a.open?f.folder.OPEN:f.folder.CLOSE):c.push(f.folder.DOCU));return f.className.BUTTON+" "+c.join("_")},makeNodeIcoStyle:function(b,a){var c=[];if(!a.isAjaxing){var d=a.isParent&&a.iconOpen&&a.iconClose?a.open?a.iconOpen:a.iconClose:a[b.data.key.icon];d&&c.push("background:url(",d,") 0 0 no-repeat;");(b.view.showIcon==!1||!j.apply(b.view.showIcon,[b.treeId,a],!0))&&c.push("width:0px;height:0px;")}return c.join("")},makeNodeLineClass:function(b,a){var c=[];b.view.showLine?
a.level==0&&a.isFirstNode&&a.isLastNode?c.push(f.line.ROOT):a.level==0&&a.isFirstNode?c.push(f.line.ROOTS):a.isLastNode?c.push(f.line.BOTTOM):c.push(f.line.CENTER):c.push(f.line.NOLINE);a.isParent?c.push(a.open?f.folder.OPEN:f.folder.CLOSE):c.push(f.folder.DOCU);return i.makeNodeLineClassEx(a)+c.join("_")},makeNodeLineClassEx:function(b){return f.className.BUTTON+" "+f.className.LEVEL+b.level+" "+f.className.SWITCH+" "},makeNodeTarget:function(b){return b.target||"_blank"},makeNodeUrl:function(b,
a){var c=b.data.key.url;return a[c]?a[c]:null},makeUlHtml:function(b,a,c,d){c.push("<ul id='",a.tId,f.id.UL,"' class='",f.className.LEVEL,a.level," ",i.makeUlLineClass(b,a),"' style='display:",a.open?"block":"none","'>");c.push(d);c.push("</ul>")},makeUlLineClass:function(b,a){return b.view.showLine&&!a.isLastNode?f.line.LINE:""},removeChildNodes:function(b,a){if(a){var c=b.data.key.children,d=a[c];if(d){for(var e=0,g=d.length;e<g;e++)h.removeNodeCache(b,d[e]);h.removeSelectedNode(b);delete a[c];
b.data.keep.parent?k(a,f.id.UL,b).empty():(a.isParent=!1,a.open=!1,c=k(a,f.id.SWITCH,b),d=k(a,f.id.ICON,b),i.replaceSwitchClass(a,c,f.folder.DOCU),i.replaceIcoClass(a,d,f.folder.DOCU),k(a,f.id.UL,b).remove())}}},setFirstNode:function(b,a){var c=b.data.key.children;if(a[c].length>0)a[c][0].isFirstNode=!0},setLastNode:function(b,a){var c=b.data.key.children,d=a[c].length;if(d>0)a[c][d-1].isLastNode=!0},removeNode:function(b,a){var c=h.getRoot(b),d=b.data.key.children,e=a.parentTId?a.getParentNode():
c;a.isFirstNode=!1;a.isLastNode=!1;a.getPreNode=function(){return null};a.getNextNode=function(){return null};if(h.getNodeCache(b,a.tId)){k(a,b).remove();h.removeNodeCache(b,a);h.removeSelectedNode(b,a);for(var g=0,j=e[d].length;g<j;g++)if(e[d][g].tId==a.tId){e[d].splice(g,1);break}i.setFirstNode(b,e);i.setLastNode(b,e);var o,g=e[d].length;if(!b.data.keep.parent&&g==0)e.isParent=!1,e.open=!1,g=k(e,f.id.UL,b),j=k(e,f.id.SWITCH,b),o=k(e,f.id.ICON,b),i.replaceSwitchClass(e,j,f.folder.DOCU),i.replaceIcoClass(e,
o,f.folder.DOCU),g.css("display","none");else if(b.view.showLine&&g>0){var n=e[d][g-1],g=k(n,f.id.UL,b),j=k(n,f.id.SWITCH,b);o=k(n,f.id.ICON,b);e==c?e[d].length==1?i.replaceSwitchClass(n,j,f.line.ROOT):(c=k(e[d][0],f.id.SWITCH,b),i.replaceSwitchClass(e[d][0],c,f.line.ROOTS),i.replaceSwitchClass(n,j,f.line.BOTTOM)):i.replaceSwitchClass(n,j,f.line.BOTTOM);g.removeClass(f.line.LINE)}}},replaceIcoClass:function(b,a,c){if(a&&!b.isAjaxing&&(b=a.attr("class"),b!=void 0)){b=b.split("_");switch(c){case f.folder.OPEN:case f.folder.CLOSE:case f.folder.DOCU:b[b.length-
1]=c}a.attr("class",b.join("_"))}},replaceSwitchClass:function(b,a,c){if(a){var d=a.attr("class");if(d!=void 0){d=d.split("_");switch(c){case f.line.ROOT:case f.line.ROOTS:case f.line.CENTER:case f.line.BOTTOM:case f.line.NOLINE:d[0]=i.makeNodeLineClassEx(b)+c;break;case f.folder.OPEN:case f.folder.CLOSE:case f.folder.DOCU:d[1]=c}a.attr("class",d.join("_"));c!==f.folder.DOCU?a.removeAttr("disabled"):a.attr("disabled","disabled")}}},selectNode:function(b,a,c){c||i.cancelPreSelectedNode(b,null,a);k(a,
f.id.A,b).addClass(f.node.CURSELECTED);h.addSelectedNode(b,a);b.treeObj.trigger(f.event.SELECTED,[b.treeId,a])},setNodeFontCss:function(b,a){var c=k(a,f.id.A,b),d=i.makeNodeFontCss(b,a);d&&c.css(d)},setNodeLineIcos:function(b,a){if(a){var c=k(a,f.id.SWITCH,b),d=k(a,f.id.UL,b),e=k(a,f.id.ICON,b),g=i.makeUlLineClass(b,a);g.length==0?d.removeClass(f.line.LINE):d.addClass(g);c.attr("class",i.makeNodeLineClass(b,a));a.isParent?c.removeAttr("disabled"):c.attr("disabled","disabled");e.removeAttr("style");
e.attr("style",i.makeNodeIcoStyle(b,a));e.attr("class",i.makeNodeIcoClass(b,a))}},setNodeName:function(b,a){var c=h.getNodeTitle(b,a),d=k(a,f.id.SPAN,b);d.empty();b.view.nameIsHTML?d.html(h.getNodeName(b,a)):d.text(h.getNodeName(b,a));j.apply(b.view.showTitle,[b.treeId,a],b.view.showTitle)&&k(a,f.id.A,b).attr("title",!c?"":c)},setNodeTarget:function(b,a){k(a,f.id.A,b).attr("target",i.makeNodeTarget(a))},setNodeUrl:function(b,a){var c=k(a,f.id.A,b),d=i.makeNodeUrl(b,a);d==null||d.length==0?c.removeAttr("href"):
c.attr("href",d)},switchNode:function(b,a){a.open||!j.canAsync(b,a)?i.expandCollapseNode(b,a,!a.open):b.async.enable?i.asyncNode(b,a)||i.expandCollapseNode(b,a,!a.open):a&&i.expandCollapseNode(b,a,!a.open)}};q.fn.zTree={consts:{className:{BUTTON:"button",LEVEL:"level",ICO_LOADING:"ico_loading",SWITCH:"switch"},event:{NODECREATED:"ztree_nodeCreated",CLICK:"ztree_click",EXPAND:"ztree_expand",COLLAPSE:"ztree_collapse",ASYNC_SUCCESS:"ztree_async_success",ASYNC_ERROR:"ztree_async_error",REMOVE:"ztree_remove",
SELECTED:"ztree_selected",UNSELECTED:"ztree_unselected"},id:{A:"_a",ICON:"_ico",SPAN:"_span",SWITCH:"_switch",UL:"_ul"},line:{ROOT:"root",ROOTS:"roots",CENTER:"center",BOTTOM:"bottom",NOLINE:"noline",LINE:"line"},folder:{OPEN:"open",CLOSE:"close",DOCU:"docu"},node:{CURSELECTED:"curSelectedNode"}},_z:{tools:j,view:i,event:l,data:h},getZTreeObj:function(b){return(b=h.getZTreeTools(b))?b:null},destroy:function(b){if(b&&b.length>0)i.destroy(h.getSetting(b));else for(var a in s)i.destroy(s[a])},init:function(b,
a,c){var d=j.clone(O);q.extend(!0,d,a);d.treeId=b.attr("id");d.treeObj=b;d.treeObj.empty();s[d.treeId]=d;if(typeof document.body.style.maxHeight==="undefined")d.view.expandSpeed="";h.initRoot(d);b=h.getRoot(d);a=d.data.key.children;c=c?j.clone(j.isArray(c)?c:[c]):[];b[a]=d.data.simpleData.enable?h.transformTozTreeFormat(d,c):c;h.initCache(d);l.unbindTree(d);l.bindTree(d);l.unbindEvent(d);l.bindEvent(d);c={setting:d,addNodes:function(a,b,c,f){function h(){i.addNodes(d,a,b,l,f==!0)}a||(a=null);if(a&&
!a.isParent&&d.data.keep.leaf)return null;var k=parseInt(b,10);isNaN(k)?(f=!!c,c=b,b=-1):b=k;if(!c)return null;var l=j.clone(j.isArray(c)?c:[c]);j.canAsync(d,a)?i.asyncNode(d,a,f,h):h();return l},cancelSelectedNode:function(a){i.cancelPreSelectedNode(d,a)},destroy:function(){i.destroy(d)},expandAll:function(a){a=!!a;i.expandCollapseSonNode(d,null,a,!0);return a},expandNode:function(a,b,c,f,n){if(!a||!a.isParent)return null;b!==!0&&b!==!1&&(b=!a.open);if((n=!!n)&&b&&j.apply(d.callback.beforeExpand,
[d.treeId,a],!0)==!1)return null;else if(n&&!b&&j.apply(d.callback.beforeCollapse,[d.treeId,a],!0)==!1)return null;b&&a.parentTId&&i.expandCollapseParentNode(d,a.getParentNode(),b,!1);if(b===a.open&&!c)return null;h.getRoot(d).expandTriggerFlag=n;if(!j.canAsync(d,a)&&c)i.expandCollapseSonNode(d,a,b,!0,function(){if(f!==!1)try{k(a,d).focus().blur()}catch(b){}});else if(a.open=!b,i.switchNode(this.setting,a),f!==!1)try{k(a,d).focus().blur()}catch(l){}return b},getNodes:function(){return h.getNodes(d)},
getNodeByParam:function(a,b,c){return!a?null:h.getNodeByParam(d,c?c[d.data.key.children]:h.getNodes(d),a,b)},getNodeByTId:function(a){return h.getNodeCache(d,a)},getNodesByParam:function(a,b,c){return!a?null:h.getNodesByParam(d,c?c[d.data.key.children]:h.getNodes(d),a,b)},getNodesByParamFuzzy:function(a,b,c){return!a?null:h.getNodesByParamFuzzy(d,c?c[d.data.key.children]:h.getNodes(d),a,b)},getNodesByFilter:function(a,b,c,f){b=!!b;return!a||typeof a!="function"?b?null:[]:h.getNodesByFilter(d,c?c[d.data.key.children]:
h.getNodes(d),a,b,f)},getNodeIndex:function(a){if(!a)return null;for(var b=d.data.key.children,c=a.parentTId?a.getParentNode():h.getRoot(d),f=0,i=c[b].length;f<i;f++)if(c[b][f]==a)return f;return-1},getSelectedNodes:function(){for(var a=[],b=h.getRoot(d).curSelectedList,c=0,f=b.length;c<f;c++)a.push(b[c]);return a},isSelectedNode:function(a){return h.isSelectedNode(d,a)},reAsyncChildNodes:function(a,b,c){if(this.setting.async.enable){var j=!a;j&&(a=h.getRoot(d));if(b=="refresh"){for(var b=this.setting.data.key.children,
l=0,q=a[b]?a[b].length:0;l<q;l++)h.removeNodeCache(d,a[b][l]);h.removeSelectedNode(d);a[b]=[];j?this.setting.treeObj.empty():k(a,f.id.UL,d).empty()}i.asyncNode(this.setting,j?null:a,!!c)}},refresh:function(){this.setting.treeObj.empty();var a=h.getRoot(d),b=a[d.data.key.children];h.initRoot(d);a[d.data.key.children]=b;h.initCache(d);i.createNodes(d,0,a[d.data.key.children],null,-1)},removeChildNodes:function(a){if(!a)return null;var b=a[d.data.key.children];i.removeChildNodes(d,a);return b?b:null},
removeNode:function(a,b){a&&(b=!!b,b&&j.apply(d.callback.beforeRemove,[d.treeId,a],!0)==!1||(i.removeNode(d,a),b&&this.setting.treeObj.trigger(f.event.REMOVE,[d.treeId,a])))},selectNode:function(a,b){if(a&&j.uCanDo(d)){b=d.view.selectedMulti&&b;if(a.parentTId)i.expandCollapseParentNode(d,a.getParentNode(),!0,!1,function(){try{k(a,d).focus().blur()}catch(b){}});else try{k(a,d).focus().blur()}catch(c){}i.selectNode(d,a,b)}},transformTozTreeNodes:function(a){return h.transformTozTreeFormat(d,a)},transformToArray:function(a){return h.transformToArrayFormat(d,
a)},updateNode:function(a){a&&k(a,d).get(0)&&j.uCanDo(d)&&(i.setNodeName(d,a),i.setNodeTarget(d,a),i.setNodeUrl(d,a),i.setNodeLineIcos(d,a),i.setNodeFontCss(d,a))}};b.treeTools=c;h.setZTreeTools(d,c);b[a]&&b[a].length>0?i.createNodes(d,0,b[a],null,-1):d.async.enable&&d.async.url&&d.async.url!==""&&i.asyncNode(d);return c}};var P=q.fn.zTree,k=j.$,f=P.consts})(jQuery);

/*
 * JQuery zTree excheck v3.5.19.1
 * http://zTree.me/
 *
 * Copyright (c) 2010 Hunter.z
 *
 * Licensed same as jquery - MIT License
 * http://www.opensource.org/licenses/mit-license.php
 *
 * email: hunter.z@263.net
 * Date: 2015-10-26
 */
(function(m){var p,q,r,o={event:{CHECK:"ztree_check"},id:{CHECK:"_check"},checkbox:{STYLE:"checkbox",DEFAULT:"chk",DISABLED:"disable",FALSE:"false",TRUE:"true",FULL:"full",PART:"part",FOCUS:"focus"},radio:{STYLE:"radio",TYPE_ALL:"all",TYPE_LEVEL:"level"}},v={check:{enable:!1,autoCheckTrigger:!1,chkStyle:o.checkbox.STYLE,nocheckInherit:!1,chkDisabledInherit:!1,radioType:o.radio.TYPE_LEVEL,chkboxType:{Y:"ps",N:"ps"}},data:{key:{checked:"checked"}},callback:{beforeCheck:null,onCheck:null}};p=function(c,
a){if(a.chkDisabled===!0)return!1;var b=g.getSetting(c.data.treeId),d=b.data.key.checked;if(k.apply(b.callback.beforeCheck,[b.treeId,a],!0)==!1)return!0;a[d]=!a[d];e.checkNodeRelation(b,a);d=n(a,j.id.CHECK,b);e.setChkClass(b,d,a);e.repairParentChkClassWithSelf(b,a);b.treeObj.trigger(j.event.CHECK,[c,b.treeId,a]);return!0};q=function(c,a){if(a.chkDisabled===!0)return!1;var b=g.getSetting(c.data.treeId),d=n(a,j.id.CHECK,b);a.check_Focus=!0;e.setChkClass(b,d,a);return!0};r=function(c,a){if(a.chkDisabled===
!0)return!1;var b=g.getSetting(c.data.treeId),d=n(a,j.id.CHECK,b);a.check_Focus=!1;e.setChkClass(b,d,a);return!0};m.extend(!0,m.fn.zTree.consts,o);m.extend(!0,m.fn.zTree._z,{tools:{},view:{checkNodeRelation:function(c,a){var b,d,h,i=c.data.key.children,l=c.data.key.checked;b=j.radio;if(c.check.chkStyle==b.STYLE){var f=g.getRadioCheckedList(c);if(a[l])if(c.check.radioType==b.TYPE_ALL){for(d=f.length-1;d>=0;d--)b=f[d],b[l]&&b!=a&&(b[l]=!1,f.splice(d,1),e.setChkClass(c,n(b,j.id.CHECK,c),b),b.parentTId!=
a.parentTId&&e.repairParentChkClassWithSelf(c,b));f.push(a)}else{f=a.parentTId?a.getParentNode():g.getRoot(c);for(d=0,h=f[i].length;d<h;d++)b=f[i][d],b[l]&&b!=a&&(b[l]=!1,e.setChkClass(c,n(b,j.id.CHECK,c),b))}else if(c.check.radioType==b.TYPE_ALL)for(d=0,h=f.length;d<h;d++)if(a==f[d]){f.splice(d,1);break}}else a[l]&&(!a[i]||a[i].length==0||c.check.chkboxType.Y.indexOf("s")>-1)&&e.setSonNodeCheckBox(c,a,!0),!a[l]&&(!a[i]||a[i].length==0||c.check.chkboxType.N.indexOf("s")>-1)&&e.setSonNodeCheckBox(c,
a,!1),a[l]&&c.check.chkboxType.Y.indexOf("p")>-1&&e.setParentNodeCheckBox(c,a,!0),!a[l]&&c.check.chkboxType.N.indexOf("p")>-1&&e.setParentNodeCheckBox(c,a,!1)},makeChkClass:function(c,a){var b=c.data.key.checked,d=j.checkbox,h=j.radio,i="",i=a.chkDisabled===!0?d.DISABLED:a.halfCheck?d.PART:c.check.chkStyle==h.STYLE?a.check_Child_State<1?d.FULL:d.PART:a[b]?a.check_Child_State===2||a.check_Child_State===-1?d.FULL:d.PART:a.check_Child_State<1?d.FULL:d.PART,b=c.check.chkStyle+"_"+(a[b]?d.TRUE:d.FALSE)+
"_"+i,b=a.check_Focus&&a.chkDisabled!==!0?b+"_"+d.FOCUS:b;return j.className.BUTTON+" "+d.DEFAULT+" "+b},repairAllChk:function(c,a){if(c.check.enable&&c.check.chkStyle===j.checkbox.STYLE)for(var b=c.data.key.checked,d=c.data.key.children,h=g.getRoot(c),i=0,l=h[d].length;i<l;i++){var f=h[d][i];f.nocheck!==!0&&f.chkDisabled!==!0&&(f[b]=a);e.setSonNodeCheckBox(c,f,a)}},repairChkClass:function(c,a){if(a&&(g.makeChkFlag(c,a),a.nocheck!==!0)){var b=n(a,j.id.CHECK,c);e.setChkClass(c,b,a)}},repairParentChkClass:function(c,
a){if(a&&a.parentTId){var b=a.getParentNode();e.repairChkClass(c,b);e.repairParentChkClass(c,b)}},repairParentChkClassWithSelf:function(c,a){if(a){var b=c.data.key.children;a[b]&&a[b].length>0?e.repairParentChkClass(c,a[b][0]):e.repairParentChkClass(c,a)}},repairSonChkDisabled:function(c,a,b,d){if(a){var h=c.data.key.children;if(a.chkDisabled!=b)a.chkDisabled=b;e.repairChkClass(c,a);if(a[h]&&d)for(var i=0,l=a[h].length;i<l;i++)e.repairSonChkDisabled(c,a[h][i],b,d)}},repairParentChkDisabled:function(c,
a,b,d){if(a){if(a.chkDisabled!=b&&d)a.chkDisabled=b;e.repairChkClass(c,a);e.repairParentChkDisabled(c,a.getParentNode(),b,d)}},setChkClass:function(c,a,b){a&&(b.nocheck===!0?a.hide():a.show(),a.attr("class",e.makeChkClass(c,b)))},setParentNodeCheckBox:function(c,a,b,d){var h=c.data.key.children,i=c.data.key.checked,l=n(a,j.id.CHECK,c);d||(d=a);g.makeChkFlag(c,a);a.nocheck!==!0&&a.chkDisabled!==!0&&(a[i]=b,e.setChkClass(c,l,a),c.check.autoCheckTrigger&&a!=d&&c.treeObj.trigger(j.event.CHECK,[null,c.treeId,
a]));if(a.parentTId){l=!0;if(!b)for(var h=a.getParentNode()[h],f=0,k=h.length;f<k;f++)if(h[f].nocheck!==!0&&h[f].chkDisabled!==!0&&h[f][i]||(h[f].nocheck===!0||h[f].chkDisabled===!0)&&h[f].check_Child_State>0){l=!1;break}l&&e.setParentNodeCheckBox(c,a.getParentNode(),b,d)}},setSonNodeCheckBox:function(c,a,b,d){if(a){var h=c.data.key.children,i=c.data.key.checked,l=n(a,j.id.CHECK,c);d||(d=a);var f=!1;if(a[h])for(var k=0,m=a[h].length;k<m&&a.chkDisabled!==!0;k++){var o=a[h][k];e.setSonNodeCheckBox(c,
o,b,d);o.chkDisabled===!0&&(f=!0)}if(a!=g.getRoot(c)&&a.chkDisabled!==!0){f&&a.nocheck!==!0&&g.makeChkFlag(c,a);if(a.nocheck!==!0&&a.chkDisabled!==!0){if(a[i]=b,!f)a.check_Child_State=a[h]&&a[h].length>0?b?2:0:-1}else a.check_Child_State=-1;e.setChkClass(c,l,a);c.check.autoCheckTrigger&&a!=d&&a.nocheck!==!0&&a.chkDisabled!==!0&&c.treeObj.trigger(j.event.CHECK,[null,c.treeId,a])}}}},event:{},data:{getRadioCheckedList:function(c){for(var a=g.getRoot(c).radioCheckedList,b=0,d=a.length;b<d;b++)g.getNodeCache(c,
a[b].tId)||(a.splice(b,1),b--,d--);return a},getCheckStatus:function(c,a){if(!c.check.enable||a.nocheck||a.chkDisabled)return null;var b=c.data.key.checked;return{checked:a[b],half:a.halfCheck?a.halfCheck:c.check.chkStyle==j.radio.STYLE?a.check_Child_State===2:a[b]?a.check_Child_State>-1&&a.check_Child_State<2:a.check_Child_State>0}},getTreeCheckedNodes:function(c,a,b,d){if(!a)return[];for(var h=c.data.key.children,i=c.data.key.checked,e=b&&c.check.chkStyle==j.radio.STYLE&&c.check.radioType==j.radio.TYPE_ALL,
d=!d?[]:d,f=0,k=a.length;f<k;f++){if(a[f].nocheck!==!0&&a[f].chkDisabled!==!0&&a[f][i]==b&&(d.push(a[f]),e))break;g.getTreeCheckedNodes(c,a[f][h],b,d);if(e&&d.length>0)break}return d},getTreeChangeCheckedNodes:function(c,a,b){if(!a)return[];for(var d=c.data.key.children,h=c.data.key.checked,b=!b?[]:b,i=0,e=a.length;i<e;i++)a[i].nocheck!==!0&&a[i].chkDisabled!==!0&&a[i][h]!=a[i].checkedOld&&b.push(a[i]),g.getTreeChangeCheckedNodes(c,a[i][d],b);return b},makeChkFlag:function(c,a){if(a){var b=c.data.key.children,
d=c.data.key.checked,h=-1;if(a[b])for(var i=0,e=a[b].length;i<e;i++){var f=a[b][i],g=-1;if(c.check.chkStyle==j.radio.STYLE)if(g=f.nocheck===!0||f.chkDisabled===!0?f.check_Child_State:f.halfCheck===!0?2:f[d]?2:f.check_Child_State>0?2:0,g==2){h=2;break}else g==0&&(h=0);else if(c.check.chkStyle==j.checkbox.STYLE)if(g=f.nocheck===!0||f.chkDisabled===!0?f.check_Child_State:f.halfCheck===!0?1:f[d]?f.check_Child_State===-1||f.check_Child_State===2?2:1:f.check_Child_State>0?1:0,g===1){h=1;break}else if(g===
2&&h>-1&&i>0&&g!==h){h=1;break}else if(h===2&&g>-1&&g<2){h=1;break}else g>-1&&(h=g)}a.check_Child_State=h}}}});var m=m.fn.zTree,k=m._z.tools,j=m.consts,e=m._z.view,g=m._z.data,n=k.$;g.exSetting(v);g.addInitBind(function(c){c.treeObj.bind(j.event.CHECK,function(a,b,d,h){a.srcEvent=b;k.apply(c.callback.onCheck,[a,d,h])})});g.addInitUnBind(function(c){c.treeObj.unbind(j.event.CHECK)});g.addInitCache(function(){});g.addInitNode(function(c,a,b,d){if(b){a=c.data.key.checked;typeof b[a]=="string"&&(b[a]=
k.eqs(b[a],"true"));b[a]=!!b[a];b.checkedOld=b[a];if(typeof b.nocheck=="string")b.nocheck=k.eqs(b.nocheck,"true");b.nocheck=!!b.nocheck||c.check.nocheckInherit&&d&&!!d.nocheck;if(typeof b.chkDisabled=="string")b.chkDisabled=k.eqs(b.chkDisabled,"true");b.chkDisabled=!!b.chkDisabled||c.check.chkDisabledInherit&&d&&!!d.chkDisabled;if(typeof b.halfCheck=="string")b.halfCheck=k.eqs(b.halfCheck,"true");b.halfCheck=!!b.halfCheck;b.check_Child_State=-1;b.check_Focus=!1;b.getCheckStatus=function(){return g.getCheckStatus(c,
b)};c.check.chkStyle==j.radio.STYLE&&c.check.radioType==j.radio.TYPE_ALL&&b[a]&&g.getRoot(c).radioCheckedList.push(b)}});g.addInitProxy(function(c){var a=c.target,b=g.getSetting(c.data.treeId),d="",h=null,e="",l=null;if(k.eqs(c.type,"mouseover")){if(b.check.enable&&k.eqs(a.tagName,"span")&&a.getAttribute("treeNode"+j.id.CHECK)!==null)d=k.getNodeMainDom(a).id,e="mouseoverCheck"}else if(k.eqs(c.type,"mouseout")){if(b.check.enable&&k.eqs(a.tagName,"span")&&a.getAttribute("treeNode"+j.id.CHECK)!==null)d=
k.getNodeMainDom(a).id,e="mouseoutCheck"}else if(k.eqs(c.type,"click")&&b.check.enable&&k.eqs(a.tagName,"span")&&a.getAttribute("treeNode"+j.id.CHECK)!==null)d=k.getNodeMainDom(a).id,e="checkNode";if(d.length>0)switch(h=g.getNodeCache(b,d),e){case "checkNode":l=p;break;case "mouseoverCheck":l=q;break;case "mouseoutCheck":l=r}return{stop:e==="checkNode",node:h,nodeEventType:e,nodeEventCallback:l,treeEventType:"",treeEventCallback:null}},!0);g.addInitRoot(function(c){g.getRoot(c).radioCheckedList=[]});
g.addBeforeA(function(c,a,b){c.check.enable&&(g.makeChkFlag(c,a),b.push("<span ID='",a.tId,j.id.CHECK,"' class='",e.makeChkClass(c,a),"' treeNode",j.id.CHECK,a.nocheck===!0?" style='display:none;'":"","></span>"))});g.addZTreeTools(function(c,a){a.checkNode=function(a,b,c,g){var f=this.setting.data.key.checked;if(a.chkDisabled!==!0&&(b!==!0&&b!==!1&&(b=!a[f]),g=!!g,(a[f]!==b||c)&&!(g&&k.apply(this.setting.callback.beforeCheck,[this.setting.treeId,a],!0)==!1)&&k.uCanDo(this.setting)&&this.setting.check.enable&&
a.nocheck!==!0))a[f]=b,b=n(a,j.id.CHECK,this.setting),(c||this.setting.check.chkStyle===j.radio.STYLE)&&e.checkNodeRelation(this.setting,a),e.setChkClass(this.setting,b,a),e.repairParentChkClassWithSelf(this.setting,a),g&&this.setting.treeObj.trigger(j.event.CHECK,[null,this.setting.treeId,a])};a.checkAllNodes=function(a){e.repairAllChk(this.setting,!!a)};a.getCheckedNodes=function(a){var b=this.setting.data.key.children;return g.getTreeCheckedNodes(this.setting,g.getRoot(this.setting)[b],a!==!1)};
a.getChangeCheckedNodes=function(){var a=this.setting.data.key.children;return g.getTreeChangeCheckedNodes(this.setting,g.getRoot(this.setting)[a])};a.setChkDisabled=function(a,b,c,g){b=!!b;c=!!c;e.repairSonChkDisabled(this.setting,a,b,!!g);e.repairParentChkDisabled(this.setting,a.getParentNode(),b,c)};var b=a.updateNode;a.updateNode=function(c,g){b&&b.apply(a,arguments);if(c&&this.setting.check.enable&&n(c,this.setting).get(0)&&k.uCanDo(this.setting)){var i=n(c,j.id.CHECK,this.setting);(g==!0||this.setting.check.chkStyle===
j.radio.STYLE)&&e.checkNodeRelation(this.setting,c);e.setChkClass(this.setting,i,c);e.repairParentChkClassWithSelf(this.setting,c)}}});var s=e.createNodes;e.createNodes=function(c,a,b,d,g){s&&s.apply(e,arguments);b&&e.repairParentChkClassWithSelf(c,d)};var t=e.removeNode;e.removeNode=function(c,a){var b=a.getParentNode();t&&t.apply(e,arguments);a&&b&&(e.repairChkClass(c,b),e.repairParentChkClass(c,b))};var u=e.appendNodes;e.appendNodes=function(c,a,b,d,h,i,j){var f="";u&&(f=u.apply(e,arguments));
d&&g.makeChkFlag(c,d);return f}})(jQuery);

/*
 * JQuery zTree exHideNodes v3.5.21
 * http://zTree.me/
 *
 * Copyright (c) 2010 Hunter.z
 *
 * Licensed same as jquery - MIT License
 * http://www.opensource.org/licenses/mit-license.php
 *
 * email: hunter.z@263.net
 * Date: 2016-02-17
 */
(function(i){i.extend(!0,i.fn.zTree._z,{view:{clearOldFirstNode:function(c,a){for(var b=a.getNextNode();b;){if(b.isFirstNode){b.isFirstNode=!1;d.setNodeLineIcos(c,b);break}if(b.isLastNode)break;b=b.getNextNode()}},clearOldLastNode:function(c,a,b){for(a=a.getPreNode();a;){if(a.isLastNode){a.isLastNode=!1;b&&d.setNodeLineIcos(c,a);break}if(a.isFirstNode)break;a=a.getPreNode()}},makeDOMNodeMainBefore:function(c,a,b){c.push("<li ",b.isHidden?"style='display:none;' ":"","id='",b.tId,"' class='",l.className.LEVEL,
b.level,"' tabindex='0' hidefocus='true' treenode>")},showNode:function(c,a){a.isHidden=!1;f.initShowForExCheck(c,a);j(a,c).show()},showNodes:function(c,a,b){if(a&&a.length!=0){var e={},g,k;for(g=0,k=a.length;g<k;g++){var h=a[g];if(!e[h.parentTId]){var i=h.getParentNode();e[h.parentTId]=i===null?f.getRoot(c):h.getParentNode()}d.showNode(c,h,b)}for(var j in e)a=e[j][c.data.key.children],d.setFirstNodeForShow(c,a),d.setLastNodeForShow(c,a)}},hideNode:function(c,a){a.isHidden=!0;a.isFirstNode=!1;a.isLastNode=
!1;f.initHideForExCheck(c,a);d.cancelPreSelectedNode(c,a);j(a,c).hide()},hideNodes:function(c,a,b){if(a&&a.length!=0){var e={},g,k;for(g=0,k=a.length;g<k;g++){var h=a[g];if((h.isFirstNode||h.isLastNode)&&!e[h.parentTId]){var i=h.getParentNode();e[h.parentTId]=i===null?f.getRoot(c):h.getParentNode()}d.hideNode(c,h,b)}for(var j in e)a=e[j][c.data.key.children],d.setFirstNodeForHide(c,a),d.setLastNodeForHide(c,a)}},setFirstNode:function(c,a){var b=c.data.key.children,e=a[b].length;e>0&&!a[b][0].isHidden?
a[b][0].isFirstNode=!0:e>0&&d.setFirstNodeForHide(c,a[b])},setLastNode:function(c,a){var b=c.data.key.children,e=a[b].length;e>0&&!a[b][0].isHidden?a[b][e-1].isLastNode=!0:e>0&&d.setLastNodeForHide(c,a[b])},setFirstNodeForHide:function(c,a){var b,e,g;for(e=0,g=a.length;e<g;e++){b=a[e];if(b.isFirstNode)break;if(!b.isHidden&&!b.isFirstNode){b.isFirstNode=!0;d.setNodeLineIcos(c,b);break}else b=null}return b},setFirstNodeForShow:function(c,a){var b,e,g,f,h;for(e=0,g=a.length;e<g;e++)if(b=a[e],!f&&!b.isHidden&&
b.isFirstNode){f=b;break}else if(!f&&!b.isHidden&&!b.isFirstNode)b.isFirstNode=!0,f=b,d.setNodeLineIcos(c,b);else if(f&&b.isFirstNode){b.isFirstNode=!1;h=b;d.setNodeLineIcos(c,b);break}return{"new":f,old:h}},setLastNodeForHide:function(c,a){var b,e;for(e=a.length-1;e>=0;e--){b=a[e];if(b.isLastNode)break;if(!b.isHidden&&!b.isLastNode){b.isLastNode=!0;d.setNodeLineIcos(c,b);break}else b=null}return b},setLastNodeForShow:function(c,a){var b,e,g,f;for(e=a.length-1;e>=0;e--)if(b=a[e],!g&&!b.isHidden&&
b.isLastNode){g=b;break}else if(!g&&!b.isHidden&&!b.isLastNode)b.isLastNode=!0,g=b,d.setNodeLineIcos(c,b);else if(g&&b.isLastNode){b.isLastNode=!1;f=b;d.setNodeLineIcos(c,b);break}return{"new":g,old:f}}},data:{initHideForExCheck:function(c,a){if(a.isHidden&&c.check&&c.check.enable){if(typeof a._nocheck=="undefined")a._nocheck=!!a.nocheck,a.nocheck=!0;a.check_Child_State=-1;d.repairParentChkClassWithSelf&&d.repairParentChkClassWithSelf(c,a)}},initShowForExCheck:function(c,a){if(!a.isHidden&&c.check&&
c.check.enable){if(typeof a._nocheck!="undefined")a.nocheck=a._nocheck,delete a._nocheck;if(d.setChkClass){var b=j(a,l.id.CHECK,c);d.setChkClass(c,b,a)}d.repairParentChkClassWithSelf&&d.repairParentChkClassWithSelf(c,a)}}}});var i=i.fn.zTree,m=i._z.tools,l=i.consts,d=i._z.view,f=i._z.data,j=m.$;f.addInitNode(function(c,a,b){if(typeof b.isHidden=="string")b.isHidden=m.eqs(b.isHidden,"true");b.isHidden=!!b.isHidden;f.initHideForExCheck(c,b)});f.addBeforeA(function(){});f.addZTreeTools(function(c,a){a.showNodes=
function(a,b){d.showNodes(c,a,b)};a.showNode=function(a,b){a&&d.showNodes(c,[a],b)};a.hideNodes=function(a,b){d.hideNodes(c,a,b)};a.hideNode=function(a,b){a&&d.hideNodes(c,[a],b)};var b=a.checkNode;if(b)a.checkNode=function(c,d,f,h){(!c||!c.isHidden)&&b.apply(a,arguments)}});var n=f.initNode;f.initNode=function(c,a,b,e,g,i,h){var j=(e?e:f.getRoot(c))[c.data.key.children];f.tmpHideFirstNode=d.setFirstNodeForHide(c,j);f.tmpHideLastNode=d.setLastNodeForHide(c,j);h&&(d.setNodeLineIcos(c,f.tmpHideFirstNode),
d.setNodeLineIcos(c,f.tmpHideLastNode));g=f.tmpHideFirstNode===b;i=f.tmpHideLastNode===b;n&&n.apply(f,arguments);h&&i&&d.clearOldLastNode(c,b,h)};var o=f.makeChkFlag;if(o)f.makeChkFlag=function(c,a){(!a||!a.isHidden)&&o.apply(f,arguments)};var p=f.getTreeCheckedNodes;if(p)f.getTreeCheckedNodes=function(c,a,b,e){if(a&&a.length>0){var d=a[0].getParentNode();if(d&&d.isHidden)return[]}return p.apply(f,arguments)};var q=f.getTreeChangeCheckedNodes;if(q)f.getTreeChangeCheckedNodes=function(c,a,b){if(a&&
a.length>0){var d=a[0].getParentNode();if(d&&d.isHidden)return[]}return q.apply(f,arguments)};var r=d.expandCollapseSonNode;if(r)d.expandCollapseSonNode=function(c,a,b,e,f){(!a||!a.isHidden)&&r.apply(d,arguments)};var s=d.setSonNodeCheckBox;if(s)d.setSonNodeCheckBox=function(c,a,b,e){(!a||!a.isHidden)&&s.apply(d,arguments)};var t=d.repairParentChkClassWithSelf;if(t)d.repairParentChkClassWithSelf=function(c,a){(!a||!a.isHidden)&&t.apply(d,arguments)}})(jQuery);

/*
 * JQuery zTree exedit v3.5.19.1
 * http://zTree.me/
 *
 * Copyright (c) 2010 Hunter.z
 *
 * Licensed same as jquery - MIT License
 * http://www.opensource.org/licenses/mit-license.php
 *
 * email: hunter.z@263.net
 * Date: 2015-10-26
 */
(function(v){var I={event:{DRAG:"ztree_drag",DROP:"ztree_drop",RENAME:"ztree_rename",DRAGMOVE:"ztree_dragmove"},id:{EDIT:"_edit",INPUT:"_input",REMOVE:"_remove"},move:{TYPE_INNER:"inner",TYPE_PREV:"prev",TYPE_NEXT:"next"},node:{CURSELECTED_EDIT:"curSelectedNode_Edit",TMPTARGET_TREE:"tmpTargetzTree",TMPTARGET_NODE:"tmpTargetNode"}},x={onHoverOverNode:function(b,a){var c=m.getSetting(b.data.treeId),d=m.getRoot(c);if(d.curHoverNode!=a)x.onHoverOutNode(b);d.curHoverNode=a;f.addHoverDom(c,a)},onHoverOutNode:function(b){var b=
m.getSetting(b.data.treeId),a=m.getRoot(b);if(a.curHoverNode&&!m.isSelectedNode(b,a.curHoverNode))f.removeTreeDom(b,a.curHoverNode),a.curHoverNode=null},onMousedownNode:function(b,a){function c(b){if(B.dragFlag==0&&Math.abs(N-b.clientX)<e.edit.drag.minMoveSize&&Math.abs(O-b.clientY)<e.edit.drag.minMoveSize)return!0;var a,c,n,k,i;i=e.data.key.children;M.css("cursor","pointer");if(B.dragFlag==0){if(g.apply(e.callback.beforeDrag,[e.treeId,l],!0)==!1)return r(b),!0;for(a=0,c=l.length;a<c;a++){if(a==0)B.dragNodeShowBefore=
[];n=l[a];n.isParent&&n.open?(f.expandCollapseNode(e,n,!n.open),B.dragNodeShowBefore[n.tId]=!0):B.dragNodeShowBefore[n.tId]=!1}B.dragFlag=1;t.showHoverDom=!1;g.showIfameMask(e,!0);n=!0;k=-1;if(l.length>1){var j=l[0].parentTId?l[0].getParentNode()[i]:m.getNodes(e);i=[];for(a=0,c=j.length;a<c;a++)if(B.dragNodeShowBefore[j[a].tId]!==void 0&&(n&&k>-1&&k+1!==a&&(n=!1),i.push(j[a]),k=a),l.length===i.length){l=i;break}}n&&(H=l[0].getPreNode(),R=l[l.length-1].getNextNode());D=o("<ul class='zTreeDragUL'></ul>",
e);for(a=0,c=l.length;a<c;a++)n=l[a],n.editNameFlag=!1,f.selectNode(e,n,a>0),f.removeTreeDom(e,n),a>e.edit.drag.maxShowNodeNum-1||(k=o("<li id='"+n.tId+"_tmp'></li>",e),k.append(o(n,d.id.A,e).clone()),k.css("padding","0"),k.children("#"+n.tId+d.id.A).removeClass(d.node.CURSELECTED),D.append(k),a==e.edit.drag.maxShowNodeNum-1&&(k=o("<li id='"+n.tId+"_moretmp'><a>  ...  </a></li>",e),D.append(k)));D.attr("id",l[0].tId+d.id.UL+"_tmp");D.addClass(e.treeObj.attr("class"));D.appendTo(M);A=o("<span class='tmpzTreeMove_arrow'></span>",
e);A.attr("id","zTreeMove_arrow_tmp");A.appendTo(M);e.treeObj.trigger(d.event.DRAG,[b,e.treeId,l])}if(B.dragFlag==1){s&&A.attr("id")==b.target.id&&u&&b.clientX+F.scrollLeft()+2>v("#"+u+d.id.A,s).offset().left?(n=v("#"+u+d.id.A,s),b.target=n.length>0?n.get(0):b.target):s&&(s.removeClass(d.node.TMPTARGET_TREE),u&&v("#"+u+d.id.A,s).removeClass(d.node.TMPTARGET_NODE+"_"+d.move.TYPE_PREV).removeClass(d.node.TMPTARGET_NODE+"_"+I.move.TYPE_NEXT).removeClass(d.node.TMPTARGET_NODE+"_"+I.move.TYPE_INNER));
u=s=null;J=!1;h=e;n=m.getSettings();for(var y in n)if(n[y].treeId&&n[y].edit.enable&&n[y].treeId!=e.treeId&&(b.target.id==n[y].treeId||v(b.target).parents("#"+n[y].treeId).length>0))J=!0,h=n[y];y=F.scrollTop();k=F.scrollLeft();i=h.treeObj.offset();a=h.treeObj.get(0).scrollHeight;n=h.treeObj.get(0).scrollWidth;c=b.clientY+y-i.top;var p=h.treeObj.height()+i.top-b.clientY-y,q=b.clientX+k-i.left,x=h.treeObj.width()+i.left-b.clientX-k;i=c<e.edit.drag.borderMax&&c>e.edit.drag.borderMin;var j=p<e.edit.drag.borderMax&&
p>e.edit.drag.borderMin,K=q<e.edit.drag.borderMax&&q>e.edit.drag.borderMin,G=x<e.edit.drag.borderMax&&x>e.edit.drag.borderMin,p=c>e.edit.drag.borderMin&&p>e.edit.drag.borderMin&&q>e.edit.drag.borderMin&&x>e.edit.drag.borderMin,q=i&&h.treeObj.scrollTop()<=0,x=j&&h.treeObj.scrollTop()+h.treeObj.height()+10>=a,P=K&&h.treeObj.scrollLeft()<=0,Q=G&&h.treeObj.scrollLeft()+h.treeObj.width()+10>=n;if(b.target&&g.isChildOrSelf(b.target,h.treeId)){for(var E=b.target;E&&E.tagName&&!g.eqs(E.tagName,"li")&&E.id!=
h.treeId;)E=E.parentNode;var S=!0;for(a=0,c=l.length;a<c;a++)if(n=l[a],E.id===n.tId){S=!1;break}else if(o(n,e).find("#"+E.id).length>0){S=!1;break}if(S&&b.target&&g.isChildOrSelf(b.target,E.id+d.id.A))s=v(E),u=E.id}n=l[0];if(p&&g.isChildOrSelf(b.target,h.treeId)){if(!s&&(b.target.id==h.treeId||q||x||P||Q)&&(J||!J&&n.parentTId))s=h.treeObj;i?h.treeObj.scrollTop(h.treeObj.scrollTop()-10):j&&h.treeObj.scrollTop(h.treeObj.scrollTop()+10);K?h.treeObj.scrollLeft(h.treeObj.scrollLeft()-10):G&&h.treeObj.scrollLeft(h.treeObj.scrollLeft()+
10);s&&s!=h.treeObj&&s.offset().left<h.treeObj.offset().left&&h.treeObj.scrollLeft(h.treeObj.scrollLeft()+s.offset().left-h.treeObj.offset().left)}D.css({top:b.clientY+y+3+"px",left:b.clientX+k+3+"px"});i=a=0;if(s&&s.attr("id")!=h.treeId){var z=u==null?null:m.getNodeCache(h,u);c=(b.ctrlKey||b.metaKey)&&e.edit.drag.isMove&&e.edit.drag.isCopy||!e.edit.drag.isMove&&e.edit.drag.isCopy;a=!!(H&&u===H.tId);i=!!(R&&u===R.tId);k=n.parentTId&&n.parentTId==u;n=(c||!i)&&g.apply(h.edit.drag.prev,[h.treeId,l,z],
!!h.edit.drag.prev);a=(c||!a)&&g.apply(h.edit.drag.next,[h.treeId,l,z],!!h.edit.drag.next);G=(c||!k)&&!(h.data.keep.leaf&&!z.isParent)&&g.apply(h.edit.drag.inner,[h.treeId,l,z],!!h.edit.drag.inner);if(!n&&!a&&!G){if(s=null,u="",w=d.move.TYPE_INNER,A.css({display:"none"}),window.zTreeMoveTimer)clearTimeout(window.zTreeMoveTimer),window.zTreeMoveTargetNodeTId=null}else{c=v("#"+u+d.id.A,s);i=z.isLastNode?null:v("#"+z.getNextNode().tId+d.id.A,s.next());j=c.offset().top;k=c.offset().left;K=n?G?0.25:a?
0.5:1:-1;G=a?G?0.75:n?0.5:0:-1;y=(b.clientY+y-j)/c.height();(K==1||y<=K&&y>=-0.2)&&n?(a=1-A.width(),i=j-A.height()/2,w=d.move.TYPE_PREV):(G==0||y>=G&&y<=1.2)&&a?(a=1-A.width(),i=i==null||z.isParent&&z.open?j+c.height()-A.height()/2:i.offset().top-A.height()/2,w=d.move.TYPE_NEXT):(a=5-A.width(),i=j,w=d.move.TYPE_INNER);A.css({display:"block",top:i+"px",left:k+a+"px"});c.addClass(d.node.TMPTARGET_NODE+"_"+w);if(T!=u||U!=w)L=(new Date).getTime();if(z&&z.isParent&&w==d.move.TYPE_INNER&&(y=!0,window.zTreeMoveTimer&&
window.zTreeMoveTargetNodeTId!==z.tId?(clearTimeout(window.zTreeMoveTimer),window.zTreeMoveTargetNodeTId=null):window.zTreeMoveTimer&&window.zTreeMoveTargetNodeTId===z.tId&&(y=!1),y))window.zTreeMoveTimer=setTimeout(function(){w==d.move.TYPE_INNER&&z&&z.isParent&&!z.open&&(new Date).getTime()-L>h.edit.drag.autoOpenTime&&g.apply(h.callback.beforeDragOpen,[h.treeId,z],!0)&&(f.switchNode(h,z),h.edit.drag.autoExpandTrigger&&h.treeObj.trigger(d.event.EXPAND,[h.treeId,z]))},h.edit.drag.autoOpenTime+50),
window.zTreeMoveTargetNodeTId=z.tId}}else if(w=d.move.TYPE_INNER,s&&g.apply(h.edit.drag.inner,[h.treeId,l,null],!!h.edit.drag.inner)?s.addClass(d.node.TMPTARGET_TREE):s=null,A.css({display:"none"}),window.zTreeMoveTimer)clearTimeout(window.zTreeMoveTimer),window.zTreeMoveTargetNodeTId=null;T=u;U=w;e.treeObj.trigger(d.event.DRAGMOVE,[b,e.treeId,l])}return!1}function r(b){if(window.zTreeMoveTimer)clearTimeout(window.zTreeMoveTimer),window.zTreeMoveTargetNodeTId=null;U=T=null;F.unbind("mousemove",c);
F.unbind("mouseup",r);F.unbind("selectstart",k);M.css("cursor","auto");s&&(s.removeClass(d.node.TMPTARGET_TREE),u&&v("#"+u+d.id.A,s).removeClass(d.node.TMPTARGET_NODE+"_"+d.move.TYPE_PREV).removeClass(d.node.TMPTARGET_NODE+"_"+I.move.TYPE_NEXT).removeClass(d.node.TMPTARGET_NODE+"_"+I.move.TYPE_INNER));g.showIfameMask(e,!1);t.showHoverDom=!0;if(B.dragFlag!=0){B.dragFlag=0;var a,i,j;for(a=0,i=l.length;a<i;a++)j=l[a],j.isParent&&B.dragNodeShowBefore[j.tId]&&!j.open&&(f.expandCollapseNode(e,j,!j.open),
delete B.dragNodeShowBefore[j.tId]);D&&D.remove();A&&A.remove();var p=(b.ctrlKey||b.metaKey)&&e.edit.drag.isMove&&e.edit.drag.isCopy||!e.edit.drag.isMove&&e.edit.drag.isCopy;!p&&s&&u&&l[0].parentTId&&u==l[0].parentTId&&w==d.move.TYPE_INNER&&(s=null);if(s){var q=u==null?null:m.getNodeCache(h,u);if(g.apply(e.callback.beforeDrop,[h.treeId,l,q,w,p],!0)==!1)f.selectNodes(x,l);else{var C=p?g.clone(l):l;a=function(){if(J){if(!p)for(var a=0,c=l.length;a<c;a++)f.removeNode(e,l[a]);w==d.move.TYPE_INNER?f.addNodes(h,
q,-1,C):f.addNodes(h,q.getParentNode(),w==d.move.TYPE_PREV?q.getIndex():q.getIndex()+1,C)}else if(p&&w==d.move.TYPE_INNER)f.addNodes(h,q,-1,C);else if(p)f.addNodes(h,q.getParentNode(),w==d.move.TYPE_PREV?q.getIndex():q.getIndex()+1,C);else if(w!=d.move.TYPE_NEXT)for(a=0,c=C.length;a<c;a++)f.moveNode(h,q,C[a],w,!1);else for(a=-1,c=C.length-1;a<c;c--)f.moveNode(h,q,C[c],w,!1);f.selectNodes(h,C);o(C[0],e).focus().blur();e.treeObj.trigger(d.event.DROP,[b,h.treeId,C,q,w,p])};w==d.move.TYPE_INNER&&g.canAsync(h,
q)?f.asyncNode(h,q,!1,a):a()}}else f.selectNodes(x,l),e.treeObj.trigger(d.event.DROP,[b,e.treeId,l,null,null,null])}}function k(){return!1}var i,j,e=m.getSetting(b.data.treeId),B=m.getRoot(e),t=m.getRoots();if(b.button==2||!e.edit.enable||!e.edit.drag.isCopy&&!e.edit.drag.isMove)return!0;var p=b.target,q=m.getRoot(e).curSelectedList,l=[];if(m.isSelectedNode(e,a))for(i=0,j=q.length;i<j;i++){if(q[i].editNameFlag&&g.eqs(p.tagName,"input")&&p.getAttribute("treeNode"+d.id.INPUT)!==null)return!0;l.push(q[i]);
if(l[0].parentTId!==q[i].parentTId){l=[a];break}}else l=[a];f.editNodeBlur=!0;f.cancelCurEditNode(e);var F=v(e.treeObj.get(0).ownerDocument),M=v(e.treeObj.get(0).ownerDocument.body),D,A,s,J=!1,h=e,x=e,H,R,T=null,U=null,u=null,w=d.move.TYPE_INNER,N=b.clientX,O=b.clientY,L=(new Date).getTime();g.uCanDo(e)&&F.bind("mousemove",c);F.bind("mouseup",r);F.bind("selectstart",k);b.preventDefault&&b.preventDefault();return!0}};v.extend(!0,v.fn.zTree.consts,I);v.extend(!0,v.fn.zTree._z,{tools:{getAbs:function(b){b=
b.getBoundingClientRect();return[b.left+(document.body.scrollLeft+document.documentElement.scrollLeft),b.top+(document.body.scrollTop+document.documentElement.scrollTop)]},inputFocus:function(b){b.get(0)&&(b.focus(),g.setCursorPosition(b.get(0),b.val().length))},inputSelect:function(b){b.get(0)&&(b.focus(),b.select())},setCursorPosition:function(b,a){if(b.setSelectionRange)b.focus(),b.setSelectionRange(a,a);else if(b.createTextRange){var c=b.createTextRange();c.collapse(!0);c.moveEnd("character",
a);c.moveStart("character",a);c.select()}},showIfameMask:function(b,a){for(var c=m.getRoot(b);c.dragMaskList.length>0;)c.dragMaskList[0].remove(),c.dragMaskList.shift();if(a)for(var d=o("iframe",b),f=0,i=d.length;f<i;f++){var j=d.get(f),e=g.getAbs(j),j=o("<div id='zTreeMask_"+f+"' class='zTreeMask' style='top:"+e[1]+"px; left:"+e[0]+"px; width:"+j.offsetWidth+"px; height:"+j.offsetHeight+"px;'></div>",b);j.appendTo(o("body",b));c.dragMaskList.push(j)}}},view:{addEditBtn:function(b,a){if(!(a.editNameFlag||
o(a,d.id.EDIT,b).length>0)&&g.apply(b.edit.showRenameBtn,[b.treeId,a],b.edit.showRenameBtn)){var c=o(a,d.id.A,b),r="<span class='"+d.className.BUTTON+" edit' id='"+a.tId+d.id.EDIT+"' title='"+g.apply(b.edit.renameTitle,[b.treeId,a],b.edit.renameTitle)+"' treeNode"+d.id.EDIT+" style='display:none;'></span>";c.append(r);o(a,d.id.EDIT,b).bind("click",function(){if(!g.uCanDo(b)||g.apply(b.callback.beforeEditName,[b.treeId,a],!0)==!1)return!1;f.editNode(b,a);return!1}).show()}},addRemoveBtn:function(b,
a){if(!(a.editNameFlag||o(a,d.id.REMOVE,b).length>0)&&g.apply(b.edit.showRemoveBtn,[b.treeId,a],b.edit.showRemoveBtn)){var c=o(a,d.id.A,b),r="<span class='"+d.className.BUTTON+" remove' id='"+a.tId+d.id.REMOVE+"' title='"+g.apply(b.edit.removeTitle,[b.treeId,a],b.edit.removeTitle)+"' treeNode"+d.id.REMOVE+" style='display:none;'></span>";c.append(r);o(a,d.id.REMOVE,b).bind("click",function(){if(!g.uCanDo(b)||g.apply(b.callback.beforeRemove,[b.treeId,a],!0)==!1)return!1;f.removeNode(b,a);b.treeObj.trigger(d.event.REMOVE,
[b.treeId,a]);return!1}).bind("mousedown",function(){return!0}).show()}},addHoverDom:function(b,a){if(m.getRoots().showHoverDom)a.isHover=!0,b.edit.enable&&(f.addEditBtn(b,a),f.addRemoveBtn(b,a)),g.apply(b.view.addHoverDom,[b.treeId,a])},cancelCurEditNode:function(b,a,c){var r=m.getRoot(b),k=b.data.key.name,i=r.curEditNode;if(i){var j=r.curEditInput,a=a?a:c?i[k]:j.val();if(g.apply(b.callback.beforeRename,[b.treeId,i,a,c],!0)===!1)return!1;i[k]=a;o(i,d.id.A,b).removeClass(d.node.CURSELECTED_EDIT);
j.unbind();f.setNodeName(b,i);i.editNameFlag=!1;r.curEditNode=null;r.curEditInput=null;f.selectNode(b,i,!1);b.treeObj.trigger(d.event.RENAME,[b.treeId,i,c])}return r.noSelection=!0},editNode:function(b,a){var c=m.getRoot(b);f.editNodeBlur=!1;if(m.isSelectedNode(b,a)&&c.curEditNode==a&&a.editNameFlag)setTimeout(function(){g.inputFocus(c.curEditInput)},0);else{var r=b.data.key.name;a.editNameFlag=!0;f.removeTreeDom(b,a);f.cancelCurEditNode(b);f.selectNode(b,a,!1);o(a,d.id.SPAN,b).html("<input type=text class='rename' id='"+
a.tId+d.id.INPUT+"' treeNode"+d.id.INPUT+" >");var k=o(a,d.id.INPUT,b);k.attr("value",a[r]);b.edit.editNameSelectAll?g.inputSelect(k):g.inputFocus(k);k.bind("blur",function(){f.editNodeBlur||f.cancelCurEditNode(b)}).bind("keydown",function(a){a.keyCode=="13"?(f.editNodeBlur=!0,f.cancelCurEditNode(b)):a.keyCode=="27"&&f.cancelCurEditNode(b,null,!0)}).bind("click",function(){return!1}).bind("dblclick",function(){return!1});o(a,d.id.A,b).addClass(d.node.CURSELECTED_EDIT);c.curEditInput=k;c.noSelection=
!1;c.curEditNode=a}},moveNode:function(b,a,c,r,k,i){var j=m.getRoot(b),e=b.data.key.children;if(a!=c&&(!b.data.keep.leaf||!a||a.isParent||r!=d.move.TYPE_INNER)){var g=c.parentTId?c.getParentNode():j,t=a===null||a==j;t&&a===null&&(a=j);if(t)r=d.move.TYPE_INNER;j=a.parentTId?a.getParentNode():j;if(r!=d.move.TYPE_PREV&&r!=d.move.TYPE_NEXT)r=d.move.TYPE_INNER;if(r==d.move.TYPE_INNER)if(t)c.parentTId=null;else{if(!a.isParent)a.isParent=!0,a.open=!!a.open,f.setNodeLineIcos(b,a);c.parentTId=a.tId}var p;
t?p=t=b.treeObj:(!i&&r==d.move.TYPE_INNER?f.expandCollapseNode(b,a,!0,!1):i||f.expandCollapseNode(b,a.getParentNode(),!0,!1),t=o(a,b),p=o(a,d.id.UL,b),t.get(0)&&!p.get(0)&&(p=[],f.makeUlHtml(b,a,p,""),t.append(p.join(""))),p=o(a,d.id.UL,b));var q=o(c,b);q.get(0)?t.get(0)||q.remove():q=f.appendNodes(b,c.level,[c],null,-1,!1,!0).join("");p.get(0)&&r==d.move.TYPE_INNER?p.append(q):t.get(0)&&r==d.move.TYPE_PREV?t.before(q):t.get(0)&&r==d.move.TYPE_NEXT&&t.after(q);var l=-1,v=0,x=null,t=null,D=c.level;
if(c.isFirstNode){if(l=0,g[e].length>1)x=g[e][1],x.isFirstNode=!0}else if(c.isLastNode)l=g[e].length-1,x=g[e][l-1],x.isLastNode=!0;else for(p=0,q=g[e].length;p<q;p++)if(g[e][p].tId==c.tId){l=p;break}l>=0&&g[e].splice(l,1);if(r!=d.move.TYPE_INNER)for(p=0,q=j[e].length;p<q;p++)j[e][p].tId==a.tId&&(v=p);if(r==d.move.TYPE_INNER){a[e]||(a[e]=[]);if(a[e].length>0)t=a[e][a[e].length-1],t.isLastNode=!1;a[e].splice(a[e].length,0,c);c.isLastNode=!0;c.isFirstNode=a[e].length==1}else a.isFirstNode&&r==d.move.TYPE_PREV?
(j[e].splice(v,0,c),t=a,t.isFirstNode=!1,c.parentTId=a.parentTId,c.isFirstNode=!0,c.isLastNode=!1):a.isLastNode&&r==d.move.TYPE_NEXT?(j[e].splice(v+1,0,c),t=a,t.isLastNode=!1,c.parentTId=a.parentTId,c.isFirstNode=!1,c.isLastNode=!0):(r==d.move.TYPE_PREV?j[e].splice(v,0,c):j[e].splice(v+1,0,c),c.parentTId=a.parentTId,c.isFirstNode=!1,c.isLastNode=!1);m.fixPIdKeyValue(b,c);m.setSonNodeLevel(b,c.getParentNode(),c);f.setNodeLineIcos(b,c);f.repairNodeLevelClass(b,c,D);!b.data.keep.parent&&g[e].length<
1?(g.isParent=!1,g.open=!1,a=o(g,d.id.UL,b),r=o(g,d.id.SWITCH,b),e=o(g,d.id.ICON,b),f.replaceSwitchClass(g,r,d.folder.DOCU),f.replaceIcoClass(g,e,d.folder.DOCU),a.css("display","none")):x&&f.setNodeLineIcos(b,x);t&&f.setNodeLineIcos(b,t);b.check&&b.check.enable&&f.repairChkClass&&(f.repairChkClass(b,g),f.repairParentChkClassWithSelf(b,g),g!=c.parent&&f.repairParentChkClassWithSelf(b,c));i||f.expandCollapseParentNode(b,c.getParentNode(),!0,k)}},removeEditBtn:function(b,a){o(a,d.id.EDIT,b).unbind().remove()},
removeRemoveBtn:function(b,a){o(a,d.id.REMOVE,b).unbind().remove()},removeTreeDom:function(b,a){a.isHover=!1;f.removeEditBtn(b,a);f.removeRemoveBtn(b,a);g.apply(b.view.removeHoverDom,[b.treeId,a])},repairNodeLevelClass:function(b,a,c){if(c!==a.level){var f=o(a,b),g=o(a,d.id.A,b),b=o(a,d.id.UL,b),c=d.className.LEVEL+c,a=d.className.LEVEL+a.level;f.removeClass(c);f.addClass(a);g.removeClass(c);g.addClass(a);b.removeClass(c);b.addClass(a)}},selectNodes:function(b,a){for(var c=0,d=a.length;c<d;c++)f.selectNode(b,
a[c],c>0)}},event:{},data:{setSonNodeLevel:function(b,a,c){if(c){var d=b.data.key.children;c.level=a?a.level+1:0;if(c[d])for(var a=0,f=c[d].length;a<f;a++)c[d][a]&&m.setSonNodeLevel(b,c,c[d][a])}}}});var H=v.fn.zTree,g=H._z.tools,d=H.consts,f=H._z.view,m=H._z.data,o=g.$;m.exSetting({edit:{enable:!1,editNameSelectAll:!1,showRemoveBtn:!0,showRenameBtn:!0,removeTitle:"remove",renameTitle:"rename",drag:{autoExpandTrigger:!1,isCopy:!0,isMove:!0,prev:!0,next:!0,inner:!0,minMoveSize:5,borderMax:10,borderMin:-5,
maxShowNodeNum:5,autoOpenTime:500}},view:{addHoverDom:null,removeHoverDom:null},callback:{beforeDrag:null,beforeDragOpen:null,beforeDrop:null,beforeEditName:null,beforeRename:null,onDrag:null,onDragMove:null,onDrop:null,onRename:null}});m.addInitBind(function(b){var a=b.treeObj,c=d.event;a.bind(c.RENAME,function(a,c,d,f){g.apply(b.callback.onRename,[a,c,d,f])});a.bind(c.DRAG,function(a,c,d,f){g.apply(b.callback.onDrag,[c,d,f])});a.bind(c.DRAGMOVE,function(a,c,d,f){g.apply(b.callback.onDragMove,[c,
d,f])});a.bind(c.DROP,function(a,c,d,f,e,m,o){g.apply(b.callback.onDrop,[c,d,f,e,m,o])})});m.addInitUnBind(function(b){var b=b.treeObj,a=d.event;b.unbind(a.RENAME);b.unbind(a.DRAG);b.unbind(a.DRAGMOVE);b.unbind(a.DROP)});m.addInitCache(function(){});m.addInitNode(function(b,a,c){if(c)c.isHover=!1,c.editNameFlag=!1});m.addInitProxy(function(b){var a=b.target,c=m.getSetting(b.data.treeId),f=b.relatedTarget,k="",i=null,j="",e=null,o=null;if(g.eqs(b.type,"mouseover")){if(o=g.getMDom(c,a,[{tagName:"a",
attrName:"treeNode"+d.id.A}]))k=g.getNodeMainDom(o).id,j="hoverOverNode"}else if(g.eqs(b.type,"mouseout"))o=g.getMDom(c,f,[{tagName:"a",attrName:"treeNode"+d.id.A}]),o||(k="remove",j="hoverOutNode");else if(g.eqs(b.type,"mousedown")&&(o=g.getMDom(c,a,[{tagName:"a",attrName:"treeNode"+d.id.A}])))k=g.getNodeMainDom(o).id,j="mousedownNode";if(k.length>0)switch(i=m.getNodeCache(c,k),j){case "mousedownNode":e=x.onMousedownNode;break;case "hoverOverNode":e=x.onHoverOverNode;break;case "hoverOutNode":e=
x.onHoverOutNode}return{stop:!1,node:i,nodeEventType:j,nodeEventCallback:e,treeEventType:"",treeEventCallback:null}});m.addInitRoot(function(b){var b=m.getRoot(b),a=m.getRoots();b.curEditNode=null;b.curEditInput=null;b.curHoverNode=null;b.dragFlag=0;b.dragNodeShowBefore=[];b.dragMaskList=[];a.showHoverDom=!0});m.addZTreeTools(function(b,a){a.cancelEditName=function(a){m.getRoot(this.setting).curEditNode&&f.cancelCurEditNode(this.setting,a?a:null,!0)};a.copyNode=function(a,b,k,i){if(!b)return null;
if(a&&!a.isParent&&this.setting.data.keep.leaf&&k===d.move.TYPE_INNER)return null;var j=this,e=g.clone(b);if(!a)a=null,k=d.move.TYPE_INNER;k==d.move.TYPE_INNER?(b=function(){f.addNodes(j.setting,a,-1,[e],i)},g.canAsync(this.setting,a)?f.asyncNode(this.setting,a,i,b):b()):(f.addNodes(this.setting,a.parentNode,-1,[e],i),f.moveNode(this.setting,a,e,k,!1,i));return e};a.editName=function(a){a&&a.tId&&a===m.getNodeCache(this.setting,a.tId)&&(a.parentTId&&f.expandCollapseParentNode(this.setting,a.getParentNode(),
!0),f.editNode(this.setting,a))};a.moveNode=function(a,b,k,i){function j(){f.moveNode(e.setting,a,b,k,!1,i)}if(!b)return b;if(a&&!a.isParent&&this.setting.data.keep.leaf&&k===d.move.TYPE_INNER)return null;else if(a&&(b.parentTId==a.tId&&k==d.move.TYPE_INNER||o(b,this.setting).find("#"+a.tId).length>0))return null;else a||(a=null);var e=this;g.canAsync(this.setting,a)&&k===d.move.TYPE_INNER?f.asyncNode(this.setting,a,i,j):j();return b};a.setEditable=function(a){this.setting.edit.enable=a;return this.refresh()}});
var N=f.cancelPreSelectedNode;f.cancelPreSelectedNode=function(b,a){for(var c=m.getRoot(b).curSelectedList,d=0,g=c.length;d<g;d++)if(!a||a===c[d])if(f.removeTreeDom(b,c[d]),a)break;N&&N.apply(f,arguments)};var O=f.createNodes;f.createNodes=function(b,a,c,d,g){O&&O.apply(f,arguments);c&&f.repairParentChkClassWithSelf&&f.repairParentChkClassWithSelf(b,d)};var V=f.makeNodeUrl;f.makeNodeUrl=function(b,a){return b.edit.enable?null:V.apply(f,arguments)};var L=f.removeNode;f.removeNode=function(b,a){var c=
m.getRoot(b);if(c.curEditNode===a)c.curEditNode=null;L&&L.apply(f,arguments)};var P=f.selectNode;f.selectNode=function(b,a,c){var d=m.getRoot(b);if(m.isSelectedNode(b,a)&&d.curEditNode==a&&a.editNameFlag)return!1;P&&P.apply(f,arguments);f.addHoverDom(b,a);return!0};var Q=g.uCanDo;g.uCanDo=function(b,a){var c=m.getRoot(b);if(a&&(g.eqs(a.type,"mouseover")||g.eqs(a.type,"mouseout")||g.eqs(a.type,"mousedown")||g.eqs(a.type,"mouseup")))return!0;if(c.curEditNode)f.editNodeBlur=!1,c.curEditInput.focus();
return!c.curEditNode&&(Q?Q.apply(f,arguments):!0)}})(jQuery);


/**
 * ueditor完整配置项
 * 可以在这里配置整个编辑器的特性
 */
/**************************提示********************************
 * 所有被注释的配置项均为UEditor默认值。
 * 修改默认配置请首先确保已经完全明确该参数的真实用途。
 * 主要有两种修改方案，一种是取消此处注释，然后修改成对应参数；另一种是在实例化编辑器时传入对应参数。
 * 当升级编辑器时，可直接使用旧版配置文件替换新版配置文件,不用担心旧版配置文件中因缺少新功能所需的参数而导致脚本报错。
 **************************提示********************************/

(function () {

    /**
     * 编辑器资源文件根路径。它所表示的含义是：以编辑器实例化页面为当前路径，指向编辑器资源文件（即dialog等文件夹）的路径。
     * 鉴于很多同学在使用编辑器的时候出现的种种路径问题，此处强烈建议大家使用"相对于网站根目录的相对路径"进行配置。
     * "相对于网站根目录的相对路径"也就是以斜杠开头的形如"/myProject/ueditor/"这样的路径。
     * 如果站点中有多个不在同一层级的页面需要实例化编辑器，且引用了同一UEditor的时候，此处的URL可能不适用于每个页面的编辑器。
     * 因此，UEditor提供了针对不同页面的编辑器可单独配置的根路径，具体来说，在需要实例化编辑器的页面最顶部写上如下代码即可。当然，需要令此处的URL等于对应的配置。
     * window.UEDITOR_HOME_URL = "/xxxx/xxxx/";
     */
    window.UEDITOR_HOME_URL = '/static/scripts/lib/ueditor/';
    var URL = window.UEDITOR_HOME_URL || getUEBasePath();

    /**
     * 配置项主体。注意，此处所有涉及到路径的配置别遗漏URL变量。
     */
    window.UEDITOR_CONFIG = {

        //为编辑器实例添加一个路径，这个不能被注释
        UEDITOR_HOME_URL: URL

        // 服务器统一请求接口路径
        , serverUrl: URL + "jsp/controller.jsp"

        //工具栏上的所有的功能按钮和下拉框，可以在new编辑器的实例时选择自己需要的从新定义
        
        , toolbars: [[
            'source', '|', 'undo', 'redo', '|',
            'bold', 'italic', 'underline', 'fontborder', 'strikethrough', 'superscript', 'subscript', 'removeformat', 'formatmatch', 'autotypeset', 'pasteplain', '|', 'forecolor', 'backcolor', 'insertorderedlist', 'insertunorderedlist', 'selectall', 'cleardoc', '|',
            'rowspacingtop', 'rowspacingbottom', 'lineheight', '|',
            'customstyle', 'paragraph', 'fontfamily', 'fontsize', '|',
            /*'directionalityltr', 'directionalityrtl', 'indent', '|',*/
            'justifyleft', 'justifycenter', 'justifyright', 'justifyjustify', '|', 'touppercase', 'tolowercase', '|',
            'link', 'unlink', /*'anchor',*/ '|', 'imagenone', 'imageleft', 'imageright', /*'imagecenter',*/ '|',
            'simpleupload', /*'insertimage',*/ 'emotion', /*'insertvideo', 'music', 'attachment',*/ 'map', 'gmap', /*'insertframe',*/ /*'insertcode',*/ 'pagebreak', 'background', '|',
            'horizontal', 'date', 'time', 'spechars', 'snapscreen', '|',
            'inserttable', 'deletetable', 'insertparagraphbeforetable', 'insertrow', 'deleterow', 'insertcol', 'deletecol', 'mergecells', 'mergeright', 'mergedown', 'splittocells', 'splittorows', 'splittocols', 'charts', '|',
            'print', 'preview', 'searchreplace', 'drafts'
        ]]
        //当鼠标放在工具栏上时显示的tooltip提示,留空支持自动多语言配置，否则以配置值为准
        //,labelMap:{
        //    'anchor':'', 'undo':''
        //}

        //语言配置项,默认是zh-cn。有需要的话也可以使用如下这样的方式来自动多语言切换，当然，前提条件是lang文件夹下存在对应的语言文件：
        //lang值也可以通过自动获取 (navigator.language||navigator.browserLanguage ||navigator.userLanguage).toLowerCase()
        //,lang:"zh-cn"
        //,langPath:URL +"lang/"

        //主题配置项,默认是default。有需要的话也可以使用如下这样的方式来自动多主题切换，当然，前提条件是themes文件夹下存在对应的主题文件：
        //现有如下皮肤:default
        //,theme:'default'
        //,themePath:URL +"themes/"

        ,zIndex : 1100     //编辑器层级的基数,默认是900

        //针对getAllHtml方法，会在对应的head标签中增加该编码设置。
        //,charset:"utf-8"

        //若实例化编辑器的页面手动修改的domain，此处需要设置为true
        //,customDomain:false

        //常用配置项目
        //,isShow : true    //默认显示编辑器

        //,textarea:'editorValue' // 提交表单时，服务器获取编辑器提交内容的所用的参数，多实例时可以给容器name属性，会将name给定的值最为每个实例的键值，不用每次实例化的时候都设置这个值

        //,initialContent:'欢迎使用ueditor!'    //初始化编辑器的内容,也可以通过textarea/script给值，看官网例子

        //,autoClearinitialContent:true //是否自动清除编辑器初始内容，注意：如果focus属性设置为true,这个也为真，那么编辑器一上来就会触发导致初始化的内容看不到了

        //,focus:false //初始化时，是否让编辑器获得焦点true或false

        //如果自定义，最好给p标签如下的行高，要不输入中文时，会有跳动感
        //,initialStyle:'p{line-height:1em}'//编辑器层级的基数,可以用来改变字体等

        //,iframeCssUrl: URL + '/themes/iframe.css' //给编辑器内部引入一个css文件

        //,initialFrameWidth:1000  //初始化编辑器宽度,默认1000
        //,initialFrameHeight:320  //初始化编辑器高度,默认320

        //,readonly : false //编辑器初始化结束后,编辑区域是否是只读的，默认是false

        //,autoClearEmptyNode : true //getContent时，是否删除空的inlineElement节点（包括嵌套的情况）

        //启用自动保存
        ,enableAutoSave: false
        //自动保存间隔时间， 单位ms
        ,saveInterval: 50000000000

        //,fullscreen : false //是否开启初始化时即全屏，默认关闭

        //,imagePopup:true      //图片操作的浮层开关，默认打开

        //粘贴只保留标签，去除标签所有属性
        //,retainOnlyLabelPasted: false

        //,pasteplain:false  //是否默认为纯文本粘贴。false为不使用纯文本粘贴，true为使用纯文本粘贴
        //纯文本粘贴模式下的过滤规则
        //'filterTxtRules' : function(){
        //    function transP(node){
        //        node.tagName = 'p';
        //        node.setStyle();
        //    }
        //    return {
        //        //直接删除及其字节点内容
        //        '-' : 'script style object iframe embed input select',
        //        'p': {$:{}},
        //        'br':{$:{}},
        //        'div':{'$':{}},
        //        'li':{'$':{}},
        //        'caption':transP,
        //        'th':transP,
        //        'tr':transP,
        //        'h1':transP,'h2':transP,'h3':transP,'h4':transP,'h5':transP,'h6':transP,
        //        'td':function(node){
        //            //没有内容的td直接删掉
        //            var txt = !!node.innerText();
        //            if(txt){
        //                node.parentNode.insertAfter(UE.uNode.createText(' &nbsp; &nbsp;'),node);
        //            }
        //            node.parentNode.removeChild(node,node.innerText())
        //        }
        //    }
        //}()

        //,allHtmlEnabled:false //提交到后台的数据是否包含整个html字符串

        //insertorderedlist
        //有序列表的下拉配置,值留空时支持多语言自动识别，若配置值，则以此值为准
        //,'insertorderedlist':{
        //      //自定的样式
        //        'num':'1,2,3...',
        //        'num1':'1),2),3)...',
        //        'num2':'(1),(2),(3)...',
        //        'cn':'一,二,三....',
        //        'cn1':'一),二),三)....',
        //        'cn2':'(一),(二),(三)....',
        //     //系统自带
        //     'decimal' : '' ,         //'1,2,3...'
        //     'lower-alpha' : '' ,    // 'a,b,c...'
        //     'lower-roman' : '' ,    //'i,ii,iii...'
        //     'upper-alpha' : '' , lang   //'A,B,C'
        //     'upper-roman' : ''      //'I,II,III...'
        //}

        //insertunorderedlist
        //无序列表的下拉配置，值留空时支持多语言自动识别，若配置值，则以此值为准
        //,insertunorderedlist : { //自定的样式
        //    'dash' :'— 破折号', //-破折号
        //    'dot':' 。 小圆圈', //系统自带
        //    'circle' : '',  // '○ 小圆圈'
        //    'disc' : '',    // '● 小圆点'
        //    'square' : ''   //'■ 小方块'
        //}
        //,listDefaultPaddingLeft : '30'//默认的左边缩进的基数倍
        //,listiconpath : 'http://bs.baidu.com/listicon/'//自定义标号的路径
        //,maxListLevel : 3 //限制可以tab的级数, 设置-1为不限制

        //,autoTransWordToList:false  //禁止word中粘贴进来的列表自动变成列表标签

        //fontfamily
        //字体设置 label留空支持多语言自动切换，若配置，则以配置值为准
        //,'fontfamily':[
        //    { label:'',name:'songti',val:'宋体,SimSun'},
        //    { label:'',name:'kaiti',val:'楷体,楷体_GB2312, SimKai'},
        //    { label:'',name:'yahei',val:'微软雅黑,Microsoft YaHei'},
        //    { label:'',name:'heiti',val:'黑体, SimHei'},
        //    { label:'',name:'lishu',val:'隶书, SimLi'},
        //    { label:'',name:'andaleMono',val:'andale mono'},
        //    { label:'',name:'arial',val:'arial, helvetica,sans-serif'},
        //    { label:'',name:'arialBlack',val:'arial black,avant garde'},
        //    { label:'',name:'comicSansMs',val:'comic sans ms'},
        //    { label:'',name:'impact',val:'impact,chicago'},
        //    { label:'',name:'timesNewRoman',val:'times new roman'}
        //]

        //fontsize
        //字号
        //,'fontsize':[10, 11, 12, 14, 16, 18, 20, 24, 36]

        //paragraph
        //段落格式 值留空时支持多语言自动识别，若配置，则以配置值为准
        //,'paragraph':{'p':'', 'h1':'', 'h2':'', 'h3':'', 'h4':'', 'h5':'', 'h6':''}

        //rowspacingtop
        //段间距 值和显示的名字相同
        //,'rowspacingtop':['5', '10', '15', '20', '25']

        //rowspacingBottom
        //段间距 值和显示的名字相同
        //,'rowspacingbottom':['5', '10', '15', '20', '25']

        //lineheight
        //行内间距 值和显示的名字相同
        //,'lineheight':['1', '1.5','1.75','2', '3', '4', '5']

        //customstyle
        //自定义样式，不支持国际化，此处配置值即可最后显示值
        //block的元素是依据设置段落的逻辑设置的，inline的元素依据BIU的逻辑设置
        //尽量使用一些常用的标签
        //参数说明
        //tag 使用的标签名字
        //label 显示的名字也是用来标识不同类型的标识符，注意这个值每个要不同，
        //style 添加的样式
        //每一个对象就是一个自定义的样式
        //,'customstyle':[
        //    {tag:'h1', name:'tc', label:'', style:'border-bottom:#ccc 2px solid;padding:0 4px 0 0;text-align:center;margin:0 0 20px 0;'},
        //    {tag:'h1', name:'tl',label:'', style:'border-bottom:#ccc 2px solid;padding:0 4px 0 0;margin:0 0 10px 0;'},
        //    {tag:'span',name:'im', label:'', style:'font-style:italic;font-weight:bold'},
        //    {tag:'span',name:'hi', label:'', style:'font-style:italic;font-weight:bold;color:rgb(51, 153, 204)'}
        //]

        //快捷菜单
        //,shortcutMenu:["fontfamily", "fontsize", "bold", "italic", "underline", "forecolor", "backcolor", "insertorderedlist", "insertunorderedlist"]

        //tab
        //点击tab键时移动的距离,tabSize倍数，tabNode什么字符做为单位
        //,tabSize:4
        //,tabNode:'&nbsp;'

        //removeFormat
        //清除格式时可以删除的标签和属性
        //removeForamtTags标签
        //,removeFormatTags:'b,big,code,del,dfn,em,font,i,ins,kbd,q,samp,small,span,strike,strong,sub,sup,tt,u,var'
        //removeFormatAttributes属性
        //,removeFormatAttributes:'class,style,lang,width,height,align,hspace,valign'

        //undo
        //可以最多回退的次数,默认20
        //,maxUndoCount:20
        //当输入的字符数超过该值时，保存一次现场
        //,maxInputCount:1

        //scaleEnabled
        //是否可以拉伸长高,默认true(当开启时，自动长高失效)
        //,scaleEnabled:false
        //,minFrameWidth:800    //编辑器拖动时最小宽度,默认800
        //,minFrameHeight:220  //编辑器拖动时最小高度,默认220

        //autotypeset
        //自动排版参数
        //,autotypeset: {
        //    mergeEmptyline: true,           //合并空行
        //    removeClass: true,              //去掉冗余的class
        //    removeEmptyline: false,         //去掉空行
        //    textAlign:"left",               //段落的排版方式，可以是 left,right,center,justify 去掉这个属性表示不执行排版
        //    imageBlockLine: 'center',       //图片的浮动方式，独占一行剧中,左右浮动，默认: center,left,right,none 去掉这个属性表示不执行排版
        //    pasteFilter: false,             //根据规则过滤没事粘贴进来的内容
        //    clearFontSize: false,           //去掉所有的内嵌字号，使用编辑器默认的字号
        //    clearFontFamily: false,         //去掉所有的内嵌字体，使用编辑器默认的字体
        //    removeEmptyNode: false,         // 去掉空节点
        //    //可以去掉的标签
        //    removeTagNames: {标签名字:1},
        //    indent: false,                  // 行首缩进
        //    indentValue : '2em',            //行首缩进的大小
        //    bdc2sb: false,
        //    tobdc: false
        //}

        //tableDragable
        //表格是否可以拖拽
        //,tableDragable: true

        //,disabledTableInTable:true  //禁止表格嵌套

        //sourceEditor
        //源码的查看方式,codemirror 是代码高亮，textarea是文本框,默认是codemirror
        //注意默认codemirror只能在ie8+和非ie中使用
        //,sourceEditor:"codemirror"
        //如果sourceEditor是codemirror，还用配置一下两个参数
        //codeMirrorJsUrl js加载的路径，默认是 URL + "third-party/codemirror/codemirror.js"
        //,codeMirrorJsUrl:URL + "third-party/codemirror/codemirror.js"
        //codeMirrorCssUrl css加载的路径，默认是 URL + "third-party/codemirror/codemirror.css"
        //,codeMirrorCssUrl:URL + "third-party/codemirror/codemirror.css"
        //编辑器初始化完成后是否进入源码模式，默认为否。
        //,sourceEditorFirst:false

        //iframeUrlMap
        //dialog内容的路径 ～会被替换成URL,垓属性一旦打开，将覆盖所有的dialog的默认路径
        //,iframeUrlMap:{
        //    'anchor':'~/dialogs/anchor/anchor.html',
        //}
        ,autoHeightEnabled: false
        ,wordCount: false
    };

    function getUEBasePath(docUrl, confUrl) {

        return getBasePath(docUrl || self.document.URL || self.location.href, confUrl || getConfigFilePath());

    }

    function getConfigFilePath() {

        var configPath = document.getElementsByTagName('script');

        return configPath[ configPath.length - 1 ].src;

    }

    function getBasePath(docUrl, confUrl) {

        var basePath = confUrl;


        if (/^(\/|\\\\)/.test(confUrl)) {

            basePath = /^.+?\w(\/|\\\\)/.exec(docUrl)[0] + confUrl.replace(/^(\/|\\\\)/, '');

        } else if (!/^[a-z]+:/i.test(confUrl)) {

            docUrl = docUrl.split("#")[0].split("?")[0].replace(/[^\\\/]+$/, '');

            basePath = docUrl + "" + confUrl;

        }

        return optimizationPath(basePath);

    }

    function optimizationPath(path) {

        var protocol = /^[a-z]+:\/\//.exec(path)[ 0 ],
            tmp = null,
            res = [];

        path = path.replace(protocol, "").split("?")[0].split("#")[0];

        path = path.replace(/\\/g, '/').split(/\//);

        path[ path.length - 1 ] = "";

        while (path.length) {

            if (( tmp = path.shift() ) === "..") {
                res.pop();
            } else if (tmp !== ".") {
                res.push(tmp);
            }

        }

        return protocol + res.join("/");

    }

    window.UE = {
        getUEBasePath: getUEBasePath
    };

})();

/*!
 * UEditor
 * version: ueditor
 * build: Thu May 29 2014 16:47:57 GMT+0800 (中国标准时间)
 */

(function(){

// editor.js
UEDITOR_CONFIG = window.UEDITOR_CONFIG || {};

var baidu = window.baidu || {};

window.baidu = baidu;

window.UE = baidu.editor =  window.UE || {};

UE.plugins = {};

UE.commands = {};

UE.instants = {};

UE.I18N = {};

UE._customizeUI = {};

UE.version = "1.4.3";

var dom = UE.dom = {};

// core/browser.js
/**
 * 浏览器判断模块
 * @file
 * @module UE.browser
 * @since 1.2.6.1
 */

/**
 * 提供浏览器检测的模块
 * @unfile
 * @module UE.browser
 */
var browser = UE.browser = function(){
    var agent = navigator.userAgent.toLowerCase(),
        opera = window.opera,
        browser = {
        /**
         * @property {boolean} ie 检测当前浏览器是否为IE
         * @example
         * ```javascript
         * if ( UE.browser.ie ) {
         *     console.log( '当前浏览器是IE' );
         * }
         * ```
         */
        ie		:  /(msie\s|trident.*rv:)([\w.]+)/.test(agent),

        /**
         * @property {boolean} opera 检测当前浏览器是否为Opera
         * @example
         * ```javascript
         * if ( UE.browser.opera ) {
         *     console.log( '当前浏览器是Opera' );
         * }
         * ```
         */
        opera	: ( !!opera && opera.version ),

        /**
         * @property {boolean} webkit 检测当前浏览器是否是webkit内核的浏览器
         * @example
         * ```javascript
         * if ( UE.browser.webkit ) {
         *     console.log( '当前浏览器是webkit内核浏览器' );
         * }
         * ```
         */
        webkit	: ( agent.indexOf( ' applewebkit/' ) > -1 ),

        /**
         * @property {boolean} mac 检测当前浏览器是否是运行在mac平台下
         * @example
         * ```javascript
         * if ( UE.browser.mac ) {
         *     console.log( '当前浏览器运行在mac平台下' );
         * }
         * ```
         */
        mac	: ( agent.indexOf( 'macintosh' ) > -1 ),

        /**
         * @property {boolean} quirks 检测当前浏览器是否处于“怪异模式”下
         * @example
         * ```javascript
         * if ( UE.browser.quirks ) {
         *     console.log( '当前浏览器运行处于“怪异模式”' );
         * }
         * ```
         */
        quirks : ( document.compatMode == 'BackCompat' )
    };

    /**
    * @property {boolean} gecko 检测当前浏览器内核是否是gecko内核
    * @example
    * ```javascript
    * if ( UE.browser.gecko ) {
    *     console.log( '当前浏览器内核是gecko内核' );
    * }
    * ```
    */
    browser.gecko =( navigator.product == 'Gecko' && !browser.webkit && !browser.opera && !browser.ie);

    var version = 0;

    // Internet Explorer 6.0+
    if ( browser.ie ){

        var v1 =  agent.match(/(?:msie\s([\w.]+))/);
        var v2 = agent.match(/(?:trident.*rv:([\w.]+))/);
        if(v1 && v2 && v1[1] && v2[1]){
            version = Math.max(v1[1]*1,v2[1]*1);
        }else if(v1 && v1[1]){
            version = v1[1]*1;
        }else if(v2 && v2[1]){
            version = v2[1]*1;
        }else{
            version = 0;
        }

        browser.ie11Compat = document.documentMode == 11;
        /**
         * @property { boolean } ie9Compat 检测浏览器模式是否为 IE9 兼容模式
         * @warning 如果浏览器不是IE， 则该值为undefined
         * @example
         * ```javascript
         * if ( UE.browser.ie9Compat ) {
         *     console.log( '当前浏览器运行在IE9兼容模式下' );
         * }
         * ```
         */
        browser.ie9Compat = document.documentMode == 9;

        /**
         * @property { boolean } ie8 检测浏览器是否是IE8浏览器
         * @warning 如果浏览器不是IE， 则该值为undefined
         * @example
         * ```javascript
         * if ( UE.browser.ie8 ) {
         *     console.log( '当前浏览器是IE8浏览器' );
         * }
         * ```
         */
        browser.ie8 = !!document.documentMode;

        /**
         * @property { boolean } ie8Compat 检测浏览器模式是否为 IE8 兼容模式
         * @warning 如果浏览器不是IE， 则该值为undefined
         * @example
         * ```javascript
         * if ( UE.browser.ie8Compat ) {
         *     console.log( '当前浏览器运行在IE8兼容模式下' );
         * }
         * ```
         */
        browser.ie8Compat = document.documentMode == 8;

        /**
         * @property { boolean } ie7Compat 检测浏览器模式是否为 IE7 兼容模式
         * @warning 如果浏览器不是IE， 则该值为undefined
         * @example
         * ```javascript
         * if ( UE.browser.ie7Compat ) {
         *     console.log( '当前浏览器运行在IE7兼容模式下' );
         * }
         * ```
         */
        browser.ie7Compat = ( ( version == 7 && !document.documentMode )
                || document.documentMode == 7 );

        /**
         * @property { boolean } ie6Compat 检测浏览器模式是否为 IE6 模式 或者怪异模式
         * @warning 如果浏览器不是IE， 则该值为undefined
         * @example
         * ```javascript
         * if ( UE.browser.ie6Compat ) {
         *     console.log( '当前浏览器运行在IE6模式或者怪异模式下' );
         * }
         * ```
         */
        browser.ie6Compat = ( version < 7 || browser.quirks );

        browser.ie9above = version > 8;

        browser.ie9below = version < 9;

        browser.ie11above = version > 10;

        browser.ie11below = version < 11;

    }

    // Gecko.
    if ( browser.gecko ){
        var geckoRelease = agent.match( /rv:([\d\.]+)/ );
        if ( geckoRelease )
        {
            geckoRelease = geckoRelease[1].split( '.' );
            version = geckoRelease[0] * 10000 + ( geckoRelease[1] || 0 ) * 100 + ( geckoRelease[2] || 0 ) * 1;
        }
    }

    /**
     * @property { Number } chrome 检测当前浏览器是否为Chrome, 如果是，则返回Chrome的大版本号
     * @warning 如果浏览器不是chrome， 则该值为undefined
     * @example
     * ```javascript
     * if ( UE.browser.chrome ) {
     *     console.log( '当前浏览器是Chrome' );
     * }
     * ```
     */
    if (/chrome\/(\d+\.\d)/i.test(agent)) {
        browser.chrome = + RegExp['\x241'];
    }

    /**
     * @property { Number } safari 检测当前浏览器是否为Safari, 如果是，则返回Safari的大版本号
     * @warning 如果浏览器不是safari， 则该值为undefined
     * @example
     * ```javascript
     * if ( UE.browser.safari ) {
     *     console.log( '当前浏览器是Safari' );
     * }
     * ```
     */
    if(/(\d+\.\d)?(?:\.\d)?\s+safari\/?(\d+\.\d+)?/i.test(agent) && !/chrome/i.test(agent)){
    	browser.safari = + (RegExp['\x241'] || RegExp['\x242']);
    }


    // Opera 9.50+
    if ( browser.opera )
        version = parseFloat( opera.version() );

    // WebKit 522+ (Safari 3+)
    if ( browser.webkit )
        version = parseFloat( agent.match( / applewebkit\/(\d+)/ )[1] );

    /**
     * @property { Number } version 检测当前浏览器版本号
     * @remind
     * <ul>
     *     <li>IE系列返回值为5,6,7,8,9,10等</li>
     *     <li>gecko系列会返回10900，158900等</li>
     *     <li>webkit系列会返回其build号 (如 522等)</li>
     * </ul>
     * @example
     * ```javascript
     * console.log( '当前浏览器版本号是： ' + UE.browser.version );
     * ```
     */
    browser.version = version;

    /**
     * @property { boolean } isCompatible 检测当前浏览器是否能够与UEditor良好兼容
     * @example
     * ```javascript
     * if ( UE.browser.isCompatible ) {
     *     console.log( '浏览器与UEditor能够良好兼容' );
     * }
     * ```
     */
    browser.isCompatible =
        !browser.mobile && (
        ( browser.ie && version >= 6 ) ||
        ( browser.gecko && version >= 10801 ) ||
        ( browser.opera && version >= 9.5 ) ||
        ( browser.air && version >= 1 ) ||
        ( browser.webkit && version >= 522 ) ||
        false );
    return browser;
}();
//快捷方式
var ie = browser.ie,
    webkit = browser.webkit,
    gecko = browser.gecko,
    opera = browser.opera;

// core/utils.js
/**
 * 工具函数包
 * @file
 * @module UE.utils
 * @since 1.2.6.1
 */

/**
 * UEditor封装使用的静态工具函数
 * @module UE.utils
 * @unfile
 */

var utils = UE.utils = {

    /**
     * 用给定的迭代器遍历对象
     * @method each
     * @param { Object } obj 需要遍历的对象
     * @param { Function } iterator 迭代器， 该方法接受两个参数， 第一个参数是当前所处理的value， 第二个参数是当前遍历对象的key
     * @example
     * ```javascript
     * var demoObj = {
     *     key1: 1,
     *     key2: 2
     * };
     *
     * //output: key1: 1, key2: 2
     * UE.utils.each( demoObj, funciton ( value, key ) {
     *
     *     console.log( key + ":" + value );
     *
     * } );
     * ```
     */

    /**
     * 用给定的迭代器遍历数组或类数组对象
     * @method each
     * @param { Array } array 需要遍历的数组或者类数组
     * @param { Function } iterator 迭代器， 该方法接受两个参数， 第一个参数是当前所处理的value， 第二个参数是当前遍历对象的key
     * @example
     * ```javascript
     * var divs = document.getElmentByTagNames( "div" );
     *
     * //output: 0: DIV, 1: DIV ...
     * UE.utils.each( divs, funciton ( value, key ) {
     *
     *     console.log( key + ":" + value.tagName );
     *
     * } );
     * ```
     */
    each : function(obj, iterator, context) {
        if (obj == null) return;
        if (obj.length === +obj.length) {
            for (var i = 0, l = obj.length; i < l; i++) {
                if(iterator.call(context, obj[i], i, obj) === false)
                    return false;
            }
        } else {
            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    if(iterator.call(context, obj[key], key, obj) === false)
                        return false;
                }
            }
        }
    },

    /**
     * 以给定对象作为原型创建一个新对象
     * @method makeInstance
     * @param { Object } protoObject 该对象将作为新创建对象的原型
     * @return { Object } 新的对象， 该对象的原型是给定的protoObject对象
     * @example
     * ```javascript
     *
     * var protoObject = { sayHello: function () { console.log('Hello UEditor!'); } };
     *
     * var newObject = UE.utils.makeInstance( protoObject );
     * //output: Hello UEditor!
     * newObject.sayHello();
     * ```
     */
    makeInstance:function (obj) {
        var noop = new Function();
        noop.prototype = obj;
        obj = new noop;
        noop.prototype = null;
        return obj;
    },

    /**
     * 将source对象中的属性扩展到target对象上
     * @method extend
     * @remind 该方法将强制把source对象上的属性复制到target对象上
     * @see UE.utils.extend(Object,Object,Boolean)
     * @param { Object } target 目标对象， 新的属性将附加到该对象上
     * @param { Object } source 源对象， 该对象的属性会被附加到target对象上
     * @return { Object } 返回target对象
     * @example
     * ```javascript
     *
     * var target = { name: 'target', sex: 1 },
     *      source = { name: 'source', age: 17 };
     *
     * UE.utils.extend( target, source );
     *
     * //output: { name: 'source', sex: 1, age: 17 }
     * console.log( target );
     *
     * ```
     */

    /**
     * 将source对象中的属性扩展到target对象上， 根据指定的isKeepTarget值决定是否保留目标对象中与
     * 源对象属性名相同的属性值。
     * @method extend
     * @param { Object } target 目标对象， 新的属性将附加到该对象上
     * @param { Object } source 源对象， 该对象的属性会被附加到target对象上
     * @param { Boolean } isKeepTarget 是否保留目标对象中与源对象中属性名相同的属性
     * @return { Object } 返回target对象
     * @example
     * ```javascript
     *
     * var target = { name: 'target', sex: 1 },
     *      source = { name: 'source', age: 17 };
     *
     * UE.utils.extend( target, source, true );
     *
     * //output: { name: 'target', sex: 1, age: 17 }
     * console.log( target );
     *
     * ```
     */
    extend:function (t, s, b) {
        if (s) {
            for (var k in s) {
                if (!b || !t.hasOwnProperty(k)) {
                    t[k] = s[k];
                }
            }
        }
        return t;
    },

    /**
     * 将给定的多个对象的属性复制到目标对象target上
     * @method extend2
     * @remind 该方法将强制把源对象上的属性复制到target对象上
     * @remind 该方法支持两个及以上的参数， 从第二个参数开始， 其属性都会被复制到第一个参数上。 如果遇到同名的属性，
     *          将会覆盖掉之前的值。
     * @param { Object } target 目标对象， 新的属性将附加到该对象上
     * @param { Object... } source 源对象， 支持多个对象， 该对象的属性会被附加到target对象上
     * @return { Object } 返回target对象
     * @example
     * ```javascript
     *
     * var target = {},
     *     source1 = { name: 'source', age: 17 },
     *     source2 = { title: 'dev' };
     *
     * UE.utils.extend2( target, source1, source2 );
     *
     * //output: { name: 'source', age: 17, title: 'dev' }
     * console.log( target );
     *
     * ```
     */
    extend2:function (t) {
        var a = arguments;
        for (var i = 1; i < a.length; i++) {
            var x = a[i];
            for (var k in x) {
                if (!t.hasOwnProperty(k)) {
                    t[k] = x[k];
                }
            }
        }
        return t;
    },

    /**
     * 模拟继承机制， 使得subClass继承自superClass
     * @method inherits
     * @param { Object } subClass 子类对象
     * @param { Object } superClass 超类对象
     * @warning 该方法只能让subClass继承超类的原型， subClass对象自身的属性和方法不会被继承
     * @return { Object } 继承superClass后的子类对象
     * @example
     * ```javascript
     * function SuperClass(){
     *     this.name = "小李";
     * }
     *
     * SuperClass.prototype = {
     *     hello:function(str){
     *         console.log(this.name + str);
     *     }
     * }
     *
     * function SubClass(){
     *     this.name = "小张";
     * }
     *
     * UE.utils.inherits(SubClass,SuperClass);
     *
     * var sub = new SubClass();
     * //output: '小张早上好!
     * sub.hello("早上好!");
     * ```
     */
    inherits:function (subClass, superClass) {
        var oldP = subClass.prototype,
            newP = utils.makeInstance(superClass.prototype);
        utils.extend(newP, oldP, true);
        subClass.prototype = newP;
        return (newP.constructor = subClass);
    },

    /**
     * 用指定的context对象作为函数fn的上下文
     * @method bind
     * @param { Function } fn 需要绑定上下文的函数对象
     * @param { Object } content 函数fn新的上下文对象
     * @return { Function } 一个新的函数， 该函数作为原始函数fn的代理， 将完成fn的上下文调换工作。
     * @example
     * ```javascript
     *
     * var name = 'window',
     *     newTest = null;
     *
     * function test () {
     *     console.log( this.name );
     * }
     *
     * newTest = UE.utils.bind( test, { name: 'object' } );
     *
     * //output: object
     * newTest();
     *
     * //output: window
     * test();
     *
     * ```
     */
    bind:function (fn, context) {
        return function () {
            return fn.apply(context, arguments);
        };
    },

    /**
     * 创建延迟指定时间后执行的函数fn
     * @method defer
     * @param { Function } fn 需要延迟执行的函数对象
     * @param { int } delay 延迟的时间， 单位是毫秒
     * @warning 该方法的时间控制是不精确的，仅仅只能保证函数的执行是在给定的时间之后，
     *           而不能保证刚好到达延迟时间时执行。
     * @return { Function } 目标函数fn的代理函数， 只有执行该函数才能起到延时效果
     * @example
     * ```javascript
     * var start = 0;
     *
     * function test(){
     *     console.log( new Date() - start );
     * }
     *
     * var testDefer = UE.utils.defer( test, 1000 );
     * //
     * start = new Date();
     * //output: (大约在1000毫秒之后输出) 1000
     * testDefer();
     * ```
     */

    /**
     * 创建延迟指定时间后执行的函数fn, 如果在延迟时间内再次执行该方法， 将会根据指定的exclusion的值，
     * 决定是否取消前一次函数的执行， 如果exclusion的值为true， 则取消执行，反之，将继续执行前一个方法。
     * @method defer
     * @param { Function } fn 需要延迟执行的函数对象
     * @param { int } delay 延迟的时间， 单位是毫秒
     * @param { Boolean } exclusion 如果在延迟时间内再次执行该函数，该值将决定是否取消执行前一次函数的执行，
     *                     值为true表示取消执行， 反之则将在执行前一次函数之后才执行本次函数调用。
     * @warning 该方法的时间控制是不精确的，仅仅只能保证函数的执行是在给定的时间之后，
     *           而不能保证刚好到达延迟时间时执行。
     * @return { Function } 目标函数fn的代理函数， 只有执行该函数才能起到延时效果
     * @example
     * ```javascript
     *
     * function test(){
     *     console.log(1);
     * }
     *
     * var testDefer = UE.utils.defer( test, 1000, true );
     *
     * //output: (两次调用仅有一次输出) 1
     * testDefer();
     * testDefer();
     * ```
     */
    defer:function (fn, delay, exclusion) {
        var timerID;
        return function () {
            if (exclusion) {
                clearTimeout(timerID);
            }
            timerID = setTimeout(fn, delay);
        };
    },

    /**
     * 获取元素item在数组array中首次出现的位置, 如果未找到item， 则返回-1
     * @method indexOf
     * @remind 该方法的匹配过程使用的是恒等“===”
     * @param { Array } array 需要查找的数组对象
     * @param { * } item 需要在目标数组中查找的值
     * @return { int } 返回item在目标数组array中首次出现的位置， 如果在数组中未找到item， 则返回-1
     * @example
     * ```javascript
     * var item = 1,
     *     arr = [ 3, 4, 6, 8, 1, 1, 2 ];
     *
     * //output: 4
     * console.log( UE.utils.indexOf( arr, item ) );
     * ```
     */

    /**
     * 获取元素item数组array中首次出现的位置, 如果未找到item， 则返回-1。通过start的值可以指定搜索的起始位置。
     * @method indexOf
     * @remind 该方法的匹配过程使用的是恒等“===”
     * @param { Array } array 需要查找的数组对象
     * @param { * } item 需要在目标数组中查找的值
     * @param { int } start 搜索的起始位置
     * @return { int } 返回item在目标数组array中的start位置之后首次出现的位置， 如果在数组中未找到item， 则返回-1
     * @example
     * ```javascript
     * var item = 1,
     *     arr = [ 3, 4, 6, 8, 1, 2, 8, 3, 2, 1, 1, 4 ];
     *
     * //output: 9
     * console.log( UE.utils.indexOf( arr, item, 5 ) );
     * ```
     */
    indexOf:function (array, item, start) {
        var index = -1;
        start = this.isNumber(start) ? start : 0;
        this.each(array, function (v, i) {
            if (i >= start && v === item) {
                index = i;
                return false;
            }
        });
        return index;
    },

    /**
     * 移除数组array中所有的元素item
     * @method removeItem
     * @param { Array } array 要移除元素的目标数组
     * @param { * } item 将要被移除的元素
     * @remind 该方法的匹配过程使用的是恒等“===”
     * @example
     * ```javascript
     * var arr = [ 4, 5, 7, 1, 3, 4, 6 ];
     *
     * UE.utils.removeItem( arr, 4 );
     * //output: [ 5, 7, 1, 3, 6 ]
     * console.log( arr );
     *
     * ```
     */
    removeItem:function (array, item) {
        for (var i = 0, l = array.length; i < l; i++) {
            if (array[i] === item) {
                array.splice(i, 1);
                i--;
            }
        }
    },

    /**
     * 删除字符串str的首尾空格
     * @method trim
     * @param { String } str 需要删除首尾空格的字符串
     * @return { String } 删除了首尾的空格后的字符串
     * @example
     * ```javascript
     *
     * var str = " UEdtior ";
     *
     * //output: 9
     * console.log( str.length );
     *
     * //output: 7
     * console.log( UE.utils.trim( " UEdtior " ).length );
     *
     * //output: 9
     * console.log( str.length );
     *
     *  ```
     */
    trim:function (str) {
        return str.replace(/(^[ \t\n\r]+)|([ \t\n\r]+$)/g, '');
    },

    /**
     * 将字符串str以','分隔成数组后，将该数组转换成哈希对象， 其生成的hash对象的key为数组中的元素， value为1
     * @method listToMap
     * @warning 该方法在生成的hash对象中，会为每一个key同时生成一个另一个全大写的key。
     * @param { String } str 该字符串将被以','分割为数组， 然后进行转化
     * @return { Object } 转化之后的hash对象
     * @example
     * ```javascript
     *
     * //output: Object {UEdtior: 1, UEDTIOR: 1, Hello: 1, HELLO: 1}
     * console.log( UE.utils.listToMap( 'UEdtior,Hello' ) );
     *
     * ```
     */

    /**
     * 将字符串数组转换成哈希对象， 其生成的hash对象的key为数组中的元素， value为1
     * @method listToMap
     * @warning 该方法在生成的hash对象中，会为每一个key同时生成一个另一个全大写的key。
     * @param { Array } arr 字符串数组
     * @return { Object } 转化之后的hash对象
     * @example
     * ```javascript
     *
     * //output: Object {UEdtior: 1, UEDTIOR: 1, Hello: 1, HELLO: 1}
     * console.log( UE.utils.listToMap( [ 'UEdtior', 'Hello' ] ) );
     *
     * ```
     */
    listToMap:function (list) {
        if (!list)return {};
        list = utils.isArray(list) ? list : list.split(',');
        for (var i = 0, ci, obj = {}; ci = list[i++];) {
            obj[ci.toUpperCase()] = obj[ci] = 1;
        }
        return obj;
    },

    /**
     * 将str中的html符号转义,将转义“'，&，<，"，>”五个字符
     * @method unhtml
     * @param { String } str 需要转义的字符串
     * @return { String } 转义后的字符串
     * @example
     * ```javascript
     * var html = '<body>&</body>';
     *
     * //output: &lt;body&gt;&amp;&lt;/body&gt;
     * console.log( UE.utils.unhtml( html ) );
     *
     * ```
     */
    unhtml:function (str, reg) {
        return str ? str.replace(reg || /[&<">'](?:(amp|lt|quot|gt|#39|nbsp|#\d+);)?/g, function (a, b) {
            if (b) {
                return a;
            } else {
                return {
                    '<':'&lt;',
                    '&':'&amp;',
                    '"':'&quot;',
                    '>':'&gt;',
                    "'":'&#39;'
                }[a]
            }

        }) : '';
    },

    /**
     * 将str中的转义字符还原成html字符
     * @see UE.utils.unhtml(String);
     * @method html
     * @param { String } str 需要逆转义的字符串
     * @return { String } 逆转义后的字符串
     * @example
     * ```javascript
     *
     * var str = '&lt;body&gt;&amp;&lt;/body&gt;';
     *
     * //output: <body>&</body>
     * console.log( UE.utils.html( str ) );
     *
     * ```
     */
    html:function (str) {
        return str ? str.replace(/&((g|l|quo)t|amp|#39|nbsp);/g, function (m) {
            return {
                '&lt;':'<',
                '&amp;':'&',
                '&quot;':'"',
                '&gt;':'>',
                '&#39;':"'",
                '&nbsp;':' '
            }[m]
        }) : '';
    },

    /**
     * 将css样式转换为驼峰的形式
     * @method cssStyleToDomStyle
     * @param { String } cssName 需要转换的css样式名
     * @return { String } 转换成驼峰形式后的css样式名
     * @example
     * ```javascript
     *
     * var str = 'border-top';
     *
     * //output: borderTop
     * console.log( UE.utils.cssStyleToDomStyle( str ) );
     *
     * ```
     */
    cssStyleToDomStyle:function () {
        var test = document.createElement('div').style,
            cache = {
                'float':test.cssFloat != undefined ? 'cssFloat' : test.styleFloat != undefined ? 'styleFloat' : 'float'
            };

        return function (cssName) {
            return cache[cssName] || (cache[cssName] = cssName.toLowerCase().replace(/-./g, function (match) {
                return match.charAt(1).toUpperCase();
            }));
        };
    }(),

    /**
     * 动态加载文件到doc中
     * @method loadFile
     * @param { DomDocument } document 需要加载资源文件的文档对象
     * @param { Object } options 加载资源文件的属性集合， 取值请参考代码示例
     * @example
     * ```javascript
     *
     * UE.utils.loadFile( document, {
     *     src:"test.js",
     *     tag:"script",
     *     type:"text/javascript",
     *     defer:"defer"
     * } );
     *
     * ```
     */

    /**
     * 动态加载文件到doc中，加载成功后执行的回调函数fn
     * @method loadFile
     * @param { DomDocument } document 需要加载资源文件的文档对象
     * @param { Object } options 加载资源文件的属性集合， 该集合支持的值是script标签和style标签支持的所有属性。
     * @param { Function } fn 资源文件加载成功之后执行的回调
     * @warning 对于在同一个文档中多次加载同一URL的文件， 该方法会在第一次加载之后缓存该请求，
     *           在此之后的所有同一URL的请求， 将会直接触发回调。
     * @example
     * ```javascript
     *
     * UE.utils.loadFile( document, {
     *     src:"test.js",
     *     tag:"script",
     *     type:"text/javascript",
     *     defer:"defer"
     * }, function () {
     *     console.log('加载成功');
     * } );
     *
     * ```
     */
    loadFile:function () {
        var tmpList = [];

        function getItem(doc, obj) {
            try {
                for (var i = 0, ci; ci = tmpList[i++];) {
                    if (ci.doc === doc && ci.url == (obj.src || obj.href)) {
                        return ci;
                    }
                }
            } catch (e) {
                return null;
            }

        }

        return function (doc, obj, fn) {
            var item = getItem(doc, obj);
            if (item) {
                if (item.ready) {
                    fn && fn();
                } else {
                    item.funs.push(fn)
                }
                return;
            }
            tmpList.push({
                doc:doc,
                url:obj.src || obj.href,
                funs:[fn]
            });
            if (!doc.body) {
                var html = [];
                for (var p in obj) {
                    if (p == 'tag')continue;
                    html.push(p + '="' + obj[p] + '"')
                }
                doc.write('<' + obj.tag + ' ' + html.join(' ') + ' ></' + obj.tag + '>');
                return;
            }
            if (obj.id && doc.getElementById(obj.id)) {
                return;
            }
            var element = doc.createElement(obj.tag);
            delete obj.tag;
            for (var p in obj) {
                element.setAttribute(p, obj[p]);
            }
            element.onload = element.onreadystatechange = function () {
                if (!this.readyState || /loaded|complete/.test(this.readyState)) {
                    item = getItem(doc, obj);
                    if (item.funs.length > 0) {
                        item.ready = 1;
                        for (var fi; fi = item.funs.pop();) {
                            fi();
                        }
                    }
                    element.onload = element.onreadystatechange = null;
                }
            };
            element.onerror = function () {
                throw Error('The load ' + (obj.href || obj.src) + ' fails,check the url settings of file ueditor.config.js ')
            };
            doc.getElementsByTagName("head")[0].appendChild(element);
        }
    }(),

    /**
     * 判断obj对象是否为空
     * @method isEmptyObject
     * @param { * } obj 需要判断的对象
     * @remind 如果判断的对象是NULL， 将直接返回true， 如果是数组且为空， 返回true， 如果是字符串， 且字符串为空，
     *          返回true， 如果是普通对象， 且该对象没有任何实例属性， 返回true
     * @return { Boolean } 对象是否为空
     * @example
     * ```javascript
     *
     * //output: true
     * console.log( UE.utils.isEmptyObject( {} ) );
     *
     * //output: true
     * console.log( UE.utils.isEmptyObject( [] ) );
     *
     * //output: true
     * console.log( UE.utils.isEmptyObject( "" ) );
     *
     * //output: false
     * console.log( UE.utils.isEmptyObject( { key: 1 } ) );
     *
     * //output: false
     * console.log( UE.utils.isEmptyObject( [1] ) );
     *
     * //output: false
     * console.log( UE.utils.isEmptyObject( "1" ) );
     *
     * ```
     */
    isEmptyObject:function (obj) {
        if (obj == null) return true;
        if (this.isArray(obj) || this.isString(obj)) return obj.length === 0;
        for (var key in obj) if (obj.hasOwnProperty(key)) return false;
        return true;
    },

    /**
     * 把rgb格式的颜色值转换成16进制格式
     * @method fixColor
     * @param { String } rgb格式的颜色值
     * @param { String }
     * @example
     * rgb(255,255,255)  => "#ffffff"
     */
    fixColor:function (name, value) {
        if (/color/i.test(name) && /rgba?/.test(value)) {
            var array = value.split(",");
            if (array.length > 3)
                return "";
            value = "#";
            for (var i = 0, color; color = array[i++];) {
                color = parseInt(color.replace(/[^\d]/gi, ''), 10).toString(16);
                value += color.length == 1 ? "0" + color : color;
            }
            value = value.toUpperCase();
        }
        return  value;
    },
    /**
     * 只针对border,padding,margin做了处理，因为性能问题
     * @public
     * @function
     * @param {String}    val style字符串
     */
    optCss:function (val) {
        var padding, margin, border;
        val = val.replace(/(padding|margin|border)\-([^:]+):([^;]+);?/gi, function (str, key, name, val) {
            if (val.split(' ').length == 1) {
                switch (key) {
                    case 'padding':
                        !padding && (padding = {});
                        padding[name] = val;
                        return '';
                    case 'margin':
                        !margin && (margin = {});
                        margin[name] = val;
                        return '';
                    case 'border':
                        return val == 'initial' ? '' : str;
                }
            }
            return str;
        });

        function opt(obj, name) {
            if (!obj) {
                return '';
            }
            var t = obj.top , b = obj.bottom, l = obj.left, r = obj.right, val = '';
            if (!t || !l || !b || !r) {
                for (var p in obj) {
                    val += ';' + name + '-' + p + ':' + obj[p] + ';';
                }
            } else {
                val += ';' + name + ':' +
                    (t == b && b == l && l == r ? t :
                        t == b && l == r ? (t + ' ' + l) :
                            l == r ? (t + ' ' + l + ' ' + b) : (t + ' ' + r + ' ' + b + ' ' + l)) + ';'
            }
            return val;
        }

        val += opt(padding, 'padding') + opt(margin, 'margin');
        return val.replace(/^[ \n\r\t;]*|[ \n\r\t]*$/, '').replace(/;([ \n\r\t]+)|\1;/g, ';')
            .replace(/(&((l|g)t|quot|#39))?;{2,}/g, function (a, b) {
                return b ? b + ";;" : ';'
            });
    },

    /**
     * 克隆对象
     * @method clone
     * @param { Object } source 源对象
     * @return { Object } source的一个副本
     */

    /**
     * 深度克隆对象，将source的属性克隆到target对象， 会覆盖target重名的属性。
     * @method clone
     * @param { Object } source 源对象
     * @param { Object } target 目标对象
     * @return { Object } 附加了source对象所有属性的target对象
     */
    clone:function (source, target) {
        var tmp;
        target = target || {};
        for (var i in source) {
            if (source.hasOwnProperty(i)) {
                tmp = source[i];
                if (typeof tmp == 'object') {
                    target[i] = utils.isArray(tmp) ? [] : {};
                    utils.clone(source[i], target[i])
                } else {
                    target[i] = tmp;
                }
            }
        }
        return target;
    },

    /**
     * 把cm／pt为单位的值转换为px为单位的值
     * @method transUnitToPx
     * @param { String } 待转换的带单位的字符串
     * @return { String } 转换为px为计量单位的值的字符串
     * @example
     * ```javascript
     *
     * //output: 500px
     * console.log( UE.utils.transUnitToPx( '20cm' ) );
     *
     * //output: 27px
     * console.log( UE.utils.transUnitToPx( '20pt' ) );
     *
     * ```
     */
    transUnitToPx:function (val) {
        if (!/(pt|cm)/.test(val)) {
            return val
        }
        var unit;
        val.replace(/([\d.]+)(\w+)/, function (str, v, u) {
            val = v;
            unit = u;
        });
        switch (unit) {
            case 'cm':
                val = parseFloat(val) * 25;
                break;
            case 'pt':
                val = Math.round(parseFloat(val) * 96 / 72);
        }
        return val + (val ? 'px' : '');
    },

    /**
     * 在dom树ready之后执行给定的回调函数
     * @method domReady
     * @remind 如果在执行该方法的时候， dom树已经ready， 那么回调函数将立刻执行
     * @param { Function } fn dom树ready之后的回调函数
     * @example
     * ```javascript
     *
     * UE.utils.domReady( function () {
     *
     *     console.log('123');
     *
     * } );
     *
     * ```
     */
    domReady:function () {

        var fnArr = [];

        function doReady(doc) {
            //确保onready只执行一次
            doc.isReady = true;
            for (var ci; ci = fnArr.pop(); ci()) {
            }
        }

        return function (onready, win) {
            win = win || window;
            var doc = win.document;
            onready && fnArr.push(onready);
            if (doc.readyState === "complete") {
                doReady(doc);
            } else {
                doc.isReady && doReady(doc);
                if (browser.ie && browser.version != 11) {
                    (function () {
                        if (doc.isReady) return;
                        try {
                            doc.documentElement.doScroll("left");
                        } catch (error) {
                            setTimeout(arguments.callee, 0);
                            return;
                        }
                        doReady(doc);
                    })();
                    win.attachEvent('onload', function () {
                        doReady(doc)
                    });
                } else {
                    doc.addEventListener("DOMContentLoaded", function () {
                        doc.removeEventListener("DOMContentLoaded", arguments.callee, false);
                        doReady(doc);
                    }, false);
                    win.addEventListener('load', function () {
                        doReady(doc)
                    }, false);
                }
            }

        }
    }(),

    /**
     * 动态添加css样式
     * @method cssRule
     * @param { String } 节点名称
     * @grammar UE.utils.cssRule('添加的样式的节点名称',['样式'，'放到哪个document上'])
     * @grammar UE.utils.cssRule('body','body{background:#ccc}') => null  //给body添加背景颜色
     * @grammar UE.utils.cssRule('body') =>样式的字符串  //取得key值为body的样式的内容,如果没有找到key值先关的样式将返回空，例如刚才那个背景颜色，将返回 body{background:#ccc}
     * @grammar UE.utils.cssRule('body',document) => 返回指定key的样式，并且指定是哪个document
     * @grammar UE.utils.cssRule('body','') =>null //清空给定的key值的背景颜色
     */
    cssRule:browser.ie && browser.version != 11 ? function (key, style, doc) {
        var indexList, index;
        if(style === undefined || style && style.nodeType && style.nodeType == 9){
            //获取样式
            doc = style && style.nodeType && style.nodeType == 9 ? style : (doc || document);
            indexList = doc.indexList || (doc.indexList = {});
            index = indexList[key];
            if(index !==  undefined){
                return doc.styleSheets[index].cssText
            }
            return undefined;
        }
        doc = doc || document;
        indexList = doc.indexList || (doc.indexList = {});
        index = indexList[key];
        //清除样式
        if(style === ''){
            if(index!== undefined){
                doc.styleSheets[index].cssText = '';
                delete indexList[key];
                return true
            }
            return false;
        }

        //添加样式
        if(index!== undefined){
            sheetStyle =  doc.styleSheets[index];
        }else{
            sheetStyle = doc.createStyleSheet('', index = doc.styleSheets.length);
            indexList[key] = index;
        }
        sheetStyle.cssText = style;
    }: function (key, style, doc) {
        var head, node;
        if(style === undefined || style && style.nodeType && style.nodeType == 9){
            //获取样式
            doc = style && style.nodeType && style.nodeType == 9 ? style : (doc || document);
            node = doc.getElementById(key);
            return node ? node.innerHTML : undefined;
        }
        doc = doc || document;
        node = doc.getElementById(key);

        //清除样式
        if(style === ''){
            if(node){
                node.parentNode.removeChild(node);
                return true
            }
            return false;
        }

        //添加样式
        if(node){
            node.innerHTML = style;
        }else{
            node = doc.createElement('style');
            node.id = key;
            node.innerHTML = style;
            doc.getElementsByTagName('head')[0].appendChild(node);
        }
    },
    sort:function(array,compareFn){
        compareFn = compareFn || function(item1, item2){ return item1.localeCompare(item2);};
        for(var i= 0,len = array.length; i<len; i++){
            for(var j = i,length = array.length; j<length; j++){
                if(compareFn(array[i], array[j]) > 0){
                    var t = array[i];
                    array[i] = array[j];
                    array[j] = t;
                }
            }
        }
        return array;
    },
    serializeParam:function (json) {
        var strArr = [];
        for (var i in json) {
            //忽略默认的几个参数
            if(i=="method" || i=="timeout" || i=="async") continue;
            //传递过来的对象和函数不在提交之列
            if (!((typeof json[i]).toLowerCase() == "function" || (typeof json[i]).toLowerCase() == "object")) {
                strArr.push( encodeURIComponent(i) + "="+encodeURIComponent(json[i]) );
            } else if (utils.isArray(json[i])) {
                //支持传数组内容
                for(var j = 0; j < json[i].length; j++) {
                    strArr.push( encodeURIComponent(i) + "[]="+encodeURIComponent(json[i][j]) );
                }
            }
        }
        return strArr.join("&");
    },
    formatUrl:function (url) {
        var u = url.replace(/&&/g, '&');
        u = u.replace(/\?&/g, '?');
        u = u.replace(/&$/g, '');
        u = u.replace(/&#/g, '#');
        u = u.replace(/&+/g, '&');
        return u;
    },
    isCrossDomainUrl:function (url) {
        var a = document.createElement('a');
        a.href = url;
        if (browser.ie) {
            a.href = a.href;
        }
        return !(a.protocol == location.protocol && a.hostname == location.hostname &&
        (a.port == location.port || (a.port == '80' && location.port == '') || (a.port == '' && location.port == '80')));
    },
    clearEmptyAttrs : function(obj){
        for(var p in obj){
            if(obj[p] === ''){
                delete obj[p]
            }
        }
        return obj;
    },
    str2json : function(s){

        if (!utils.isString(s)) return null;
        if (window.JSON) {
            return JSON.parse(s);
        } else {
            return (new Function("return " + utils.trim(s || '')))();
        }

    },
    json2str : (function(){

        if (window.JSON) {

            return JSON.stringify;

        } else {

            var escapeMap = {
                "\b": '\\b',
                "\t": '\\t',
                "\n": '\\n',
                "\f": '\\f',
                "\r": '\\r',
                '"' : '\\"',
                "\\": '\\\\'
            };

            function encodeString(source) {
                if (/["\\\x00-\x1f]/.test(source)) {
                    source = source.replace(
                        /["\\\x00-\x1f]/g,
                        function (match) {
                            var c = escapeMap[match];
                            if (c) {
                                return c;
                            }
                            c = match.charCodeAt();
                            return "\\u00"
                            + Math.floor(c / 16).toString(16)
                            + (c % 16).toString(16);
                        });
                }
                return '"' + source + '"';
            }

            function encodeArray(source) {
                var result = ["["],
                    l = source.length,
                    preComma, i, item;

                for (i = 0; i < l; i++) {
                    item = source[i];

                    switch (typeof item) {
                        case "undefined":
                        case "function":
                        case "unknown":
                            break;
                        default:
                            if(preComma) {
                                result.push(',');
                            }
                            result.push(utils.json2str(item));
                            preComma = 1;
                    }
                }
                result.push("]");
                return result.join("");
            }

            function pad(source) {
                return source < 10 ? '0' + source : source;
            }

            function encodeDate(source){
                return '"' + source.getFullYear() + "-"
                + pad(source.getMonth() + 1) + "-"
                + pad(source.getDate()) + "T"
                + pad(source.getHours()) + ":"
                + pad(source.getMinutes()) + ":"
                + pad(source.getSeconds()) + '"';
            }

            return function (value) {
                switch (typeof value) {
                    case 'undefined':
                        return 'undefined';

                    case 'number':
                        return isFinite(value) ? String(value) : "null";

                    case 'string':
                        return encodeString(value);

                    case 'boolean':
                        return String(value);

                    default:
                        if (value === null) {
                            return 'null';
                        } else if (utils.isArray(value)) {
                            return encodeArray(value);
                        } else if (utils.isDate(value)) {
                            return encodeDate(value);
                        } else {
                            var result = ['{'],
                                encode = utils.json2str,
                                preComma,
                                item;

                            for (var key in value) {
                                if (Object.prototype.hasOwnProperty.call(value, key)) {
                                    item = value[key];
                                    switch (typeof item) {
                                        case 'undefined':
                                        case 'unknown':
                                        case 'function':
                                            break;
                                        default:
                                            if (preComma) {
                                                result.push(',');
                                            }
                                            preComma = 1;
                                            result.push(encode(key) + ':' + encode(item));
                                    }
                                }
                            }
                            result.push('}');
                            return result.join('');
                        }
                }
            };
        }

    })()

};
/**
 * 判断给定的对象是否是字符串
 * @method isString
 * @param { * } object 需要判断的对象
 * @return { Boolean } 给定的对象是否是字符串
 */

/**
 * 判断给定的对象是否是数组
 * @method isArray
 * @param { * } object 需要判断的对象
 * @return { Boolean } 给定的对象是否是数组
 */

/**
 * 判断给定的对象是否是一个Function
 * @method isFunction
 * @param { * } object 需要判断的对象
 * @return { Boolean } 给定的对象是否是Function
 */

/**
 * 判断给定的对象是否是Number
 * @method isNumber
 * @param { * } object 需要判断的对象
 * @return { Boolean } 给定的对象是否是Number
 */

/**
 * 判断给定的对象是否是一个正则表达式
 * @method isRegExp
 * @param { * } object 需要判断的对象
 * @return { Boolean } 给定的对象是否是正则表达式
 */

/**
 * 判断给定的对象是否是一个普通对象
 * @method isObject
 * @param { * } object 需要判断的对象
 * @return { Boolean } 给定的对象是否是普通对象
 */
utils.each(['String', 'Function', 'Array', 'Number', 'RegExp', 'Object', 'Date'], function (v) {
    UE.utils['is' + v] = function (obj) {
        return Object.prototype.toString.apply(obj) == '[object ' + v + ']';
    }
});

// core/EventBase.js
/**
 * UE采用的事件基类
 * @file
 * @module UE
 * @class EventBase
 * @since 1.2.6.1
 */

/**
 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
 * @unfile
 * @module UE
 */

/**
 * UE采用的事件基类，继承此类的对应类将获取addListener,removeListener,fireEvent方法。
 * 在UE中，Editor以及所有ui实例都继承了该类，故可以在对应的ui对象以及editor对象上使用上述方法。
 * @unfile
 * @module UE
 * @class EventBase
 */

/**
 * 通过此构造器，子类可以继承EventBase获取事件监听的方法
 * @constructor
 * @example
 * ```javascript
 * UE.EventBase.call(editor);
 * ```
 */
var EventBase = UE.EventBase = function () {};

EventBase.prototype = {

    /**
     * 注册事件监听器
     * @method addListener
     * @param { String } types 监听的事件名称，同时监听多个事件使用空格分隔
     * @param { Function } fn 监听的事件被触发时，会执行该回调函数
     * @waining 事件被触发时，监听的函数假如返回的值恒等于true，回调函数的队列中后面的函数将不执行
     * @example
     * ```javascript
     * editor.addListener('selectionchange',function(){
     *      console.log("选区已经变化！");
     * })
     * editor.addListener('beforegetcontent aftergetcontent',function(type){
     *         if(type == 'beforegetcontent'){
     *             //do something
     *         }else{
     *             //do something
     *         }
     *         console.log(this.getContent) // this是注册的事件的编辑器实例
     * })
     * ```
     * @see UE.EventBase:fireEvent(String)
     */
    addListener:function (types, listener) {
        types = utils.trim(types).split(/\s+/);
        for (var i = 0, ti; ti = types[i++];) {
            getListener(this, ti, true).push(listener);
        }
    },

    on : function(types, listener){
      return this.addListener(types,listener);
    },
    off : function(types, listener){
        return this.removeListener(types, listener)
    },
    trigger:function(){
        return this.fireEvent.apply(this,arguments);
    },
    /**
     * 移除事件监听器
     * @method removeListener
     * @param { String } types 移除的事件名称，同时移除多个事件使用空格分隔
     * @param { Function } fn 移除监听事件的函数引用
     * @example
     * ```javascript
     * //changeCallback为方法体
     * editor.removeListener("selectionchange",changeCallback);
     * ```
     */
    removeListener:function (types, listener) {
        types = utils.trim(types).split(/\s+/);
        for (var i = 0, ti; ti = types[i++];) {
            utils.removeItem(getListener(this, ti) || [], listener);
        }
    },

    /**
     * 触发事件
     * @method fireEvent
     * @param { String } types 触发的事件名称，同时触发多个事件使用空格分隔
     * @remind 该方法会触发addListener
     * @return { * } 返回触发事件的队列中，最后执行的回调函数的返回值
     * @example
     * ```javascript
     * editor.fireEvent("selectionchange");
     * ```
     */

    /**
     * 触发事件
     * @method fireEvent
     * @param { String } types 触发的事件名称，同时触发多个事件使用空格分隔
     * @param { *... } options 可选参数，可以传入一个或多个参数，会传给事件触发的回调函数
     * @return { * } 返回触发事件的队列中，最后执行的回调函数的返回值
     * @example
     * ```javascript
     *
     * editor.addListener( "selectionchange", function ( type, arg1, arg2 ) {
     *
     *     console.log( arg1 + " " + arg2 );
     *
     * } );
     *
     * //触发selectionchange事件， 会执行上面的事件监听器
     * //output: Hello World
     * editor.fireEvent("selectionchange", "Hello", "World");
     * ```
     */
    fireEvent:function () {
        var types = arguments[0];
        types = utils.trim(types).split(' ');
        for (var i = 0, ti; ti = types[i++];) {
            var listeners = getListener(this, ti),
                r, t, k;
            if (listeners) {
                k = listeners.length;
                while (k--) {
                    if(!listeners[k])continue;
                    t = listeners[k].apply(this, arguments);
                    if(t === true){
                        return t;
                    }
                    if (t !== undefined) {
                        r = t;
                    }
                }
            }
            if (t = this['on' + ti.toLowerCase()]) {
                r = t.apply(this, arguments);
            }
        }
        return r;
    }
};
/**
 * 获得对象所拥有监听类型的所有监听器
 * @unfile
 * @module UE
 * @since 1.2.6.1
 * @method getListener
 * @public
 * @param { Object } obj  查询监听器的对象
 * @param { String } type 事件类型
 * @param { Boolean } force  为true且当前所有type类型的侦听器不存在时，创建一个空监听器数组
 * @return { Array } 监听器数组
 */
function getListener(obj, type, force) {
    var allListeners;
    type = type.toLowerCase();
    return ( ( allListeners = ( obj.__allListeners || force && ( obj.__allListeners = {} ) ) )
        && ( allListeners[type] || force && ( allListeners[type] = [] ) ) );
}



// core/dtd.js
///import editor.js
///import core/dom/dom.js
///import core/utils.js
/**
 * dtd html语义化的体现类
 * @constructor
 * @namespace dtd
 */
var dtd = dom.dtd = (function() {
    function _( s ) {
        for (var k in s) {
            s[k.toUpperCase()] = s[k];
        }
        return s;
    }
    var X = utils.extend2;
    var A = _({isindex:1,fieldset:1}),
        B = _({input:1,button:1,select:1,textarea:1,label:1}),
        C = X( _({a:1}), B ),
        D = X( {iframe:1}, C ),
        E = _({hr:1,ul:1,menu:1,div:1,blockquote:1,noscript:1,table:1,center:1,address:1,dir:1,pre:1,h5:1,dl:1,h4:1,noframes:1,h6:1,ol:1,h1:1,h3:1,h2:1}),
        F = _({ins:1,del:1,script:1,style:1}),
        G = X( _({b:1,acronym:1,bdo:1,'var':1,'#':1,abbr:1,code:1,br:1,i:1,cite:1,kbd:1,u:1,strike:1,s:1,tt:1,strong:1,q:1,samp:1,em:1,dfn:1,span:1}), F ),
        H = X( _({sub:1,img:1,embed:1,object:1,sup:1,basefont:1,map:1,applet:1,font:1,big:1,small:1}), G ),
        I = X( _({p:1}), H ),
        J = X( _({iframe:1}), H, B ),
        K = _({img:1,embed:1,noscript:1,br:1,kbd:1,center:1,button:1,basefont:1,h5:1,h4:1,samp:1,h6:1,ol:1,h1:1,h3:1,h2:1,form:1,font:1,'#':1,select:1,menu:1,ins:1,abbr:1,label:1,code:1,table:1,script:1,cite:1,input:1,iframe:1,strong:1,textarea:1,noframes:1,big:1,small:1,span:1,hr:1,sub:1,bdo:1,'var':1,div:1,object:1,sup:1,strike:1,dir:1,map:1,dl:1,applet:1,del:1,isindex:1,fieldset:1,ul:1,b:1,acronym:1,a:1,blockquote:1,i:1,u:1,s:1,tt:1,address:1,q:1,pre:1,p:1,em:1,dfn:1}),

        L = X( _({a:0}), J ),//a不能被切开，所以把他
        M = _({tr:1}),
        N = _({'#':1}),
        O = X( _({param:1}), K ),
        P = X( _({form:1}), A, D, E, I ),
        Q = _({li:1,ol:1,ul:1}),
        R = _({style:1,script:1}),
        S = _({base:1,link:1,meta:1,title:1}),
        T = X( S, R ),
        U = _({head:1,body:1}),
        V = _({html:1});

    var block = _({address:1,blockquote:1,center:1,dir:1,div:1,dl:1,fieldset:1,form:1,h1:1,h2:1,h3:1,h4:1,h5:1,h6:1,hr:1,isindex:1,menu:1,noframes:1,ol:1,p:1,pre:1,table:1,ul:1}),

        empty =  _({area:1,base:1,basefont:1,br:1,col:1,command:1,dialog:1,embed:1,hr:1,img:1,input:1,isindex:1,keygen:1,link:1,meta:1,param:1,source:1,track:1,wbr:1});

    return  _({

        // $ 表示自定的属性

        // body外的元素列表.
        $nonBodyContent: X( V, U, S ),

        //块结构元素列表
        $block : block,

        //内联元素列表
        $inline : L,

        $inlineWithA : X(_({a:1}),L),

        $body : X( _({script:1,style:1}), block ),

        $cdata : _({script:1,style:1}),

        //自闭和元素
        $empty : empty,

        //不是自闭合，但不能让range选中里边
        $nonChild : _({iframe:1,textarea:1}),
        //列表元素列表
        $listItem : _({dd:1,dt:1,li:1}),

        //列表根元素列表
        $list: _({ul:1,ol:1,dl:1}),

        //不能认为是空的元素
        $isNotEmpty : _({table:1,ul:1,ol:1,dl:1,iframe:1,area:1,base:1,col:1,hr:1,img:1,embed:1,input:1,link:1,meta:1,param:1,h1:1,h2:1,h3:1,h4:1,h5:1,h6:1}),

        //如果没有子节点就可以删除的元素列表，像span,a
        $removeEmpty : _({a:1,abbr:1,acronym:1,address:1,b:1,bdo:1,big:1,cite:1,code:1,del:1,dfn:1,em:1,font:1,i:1,ins:1,label:1,kbd:1,q:1,s:1,samp:1,small:1,span:1,strike:1,strong:1,sub:1,sup:1,tt:1,u:1,'var':1}),

        $removeEmptyBlock : _({'p':1,'div':1}),

        //在table元素里的元素列表
        $tableContent : _({caption:1,col:1,colgroup:1,tbody:1,td:1,tfoot:1,th:1,thead:1,tr:1,table:1}),
        //不转换的标签
        $notTransContent : _({pre:1,script:1,style:1,textarea:1}),
        html: U,
        head: T,
        style: N,
        script: N,
        body: P,
        base: {},
        link: {},
        meta: {},
        title: N,
        col : {},
        tr : _({td:1,th:1}),
        img : {},
        embed: {},
        colgroup : _({thead:1,col:1,tbody:1,tr:1,tfoot:1}),
        noscript : P,
        td : P,
        br : {},
        th : P,
        center : P,
        kbd : L,
        button : X( I, E ),
        basefont : {},
        h5 : L,
        h4 : L,
        samp : L,
        h6 : L,
        ol : Q,
        h1 : L,
        h3 : L,
        option : N,
        h2 : L,
        form : X( A, D, E, I ),
        select : _({optgroup:1,option:1}),
        font : L,
        ins : L,
        menu : Q,
        abbr : L,
        label : L,
        table : _({thead:1,col:1,tbody:1,tr:1,colgroup:1,caption:1,tfoot:1}),
        code : L,
        tfoot : M,
        cite : L,
        li : P,
        input : {},
        iframe : P,
        strong : L,
        textarea : N,
        noframes : P,
        big : L,
        small : L,
        //trace:
        span :_({'#':1,br:1,b:1,strong:1,u:1,i:1,em:1,sub:1,sup:1,strike:1,span:1}),
        hr : L,
        dt : L,
        sub : L,
        optgroup : _({option:1}),
        param : {},
        bdo : L,
        'var' : L,
        div : P,
        object : O,
        sup : L,
        dd : P,
        strike : L,
        area : {},
        dir : Q,
        map : X( _({area:1,form:1,p:1}), A, F, E ),
        applet : O,
        dl : _({dt:1,dd:1}),
        del : L,
        isindex : {},
        fieldset : X( _({legend:1}), K ),
        thead : M,
        ul : Q,
        acronym : L,
        b : L,
        a : X( _({a:1}), J ),
        blockquote :X(_({td:1,tr:1,tbody:1,li:1}),P),
        caption : L,
        i : L,
        u : L,
        tbody : M,
        s : L,
        address : X( D, I ),
        tt : L,
        legend : L,
        q : L,
        pre : X( G, C ),
        p : X(_({'a':1}),L),
        em :L,
        dfn : L
    });
})();


// core/domUtils.js
/**
 * Dom操作工具包
 * @file
 * @module UE.dom.domUtils
 * @since 1.2.6.1
 */

/**
 * Dom操作工具包
 * @unfile
 * @module UE.dom.domUtils
 */
function getDomNode(node, start, ltr, startFromChild, fn, guard) {
    var tmpNode = startFromChild && node[start],
        parent;
    !tmpNode && (tmpNode = node[ltr]);
    while (!tmpNode && (parent = (parent || node).parentNode)) {
        if (parent.tagName == 'BODY' || guard && !guard(parent)) {
            return null;
        }
        tmpNode = parent[ltr];
    }
    if (tmpNode && fn && !fn(tmpNode)) {
        return  getDomNode(tmpNode, start, ltr, false, fn);
    }
    return tmpNode;
}
var attrFix = ie && browser.version < 9 ? {
        tabindex:"tabIndex",
        readonly:"readOnly",
        "for":"htmlFor",
        "class":"className",
        maxlength:"maxLength",
        cellspacing:"cellSpacing",
        cellpadding:"cellPadding",
        rowspan:"rowSpan",
        colspan:"colSpan",
        usemap:"useMap",
        frameborder:"frameBorder"
    } : {
        tabindex:"tabIndex",
        readonly:"readOnly"
    },
    styleBlock = utils.listToMap([
        '-webkit-box', '-moz-box', 'block' ,
        'list-item' , 'table' , 'table-row-group' ,
        'table-header-group', 'table-footer-group' ,
        'table-row' , 'table-column-group' , 'table-column' ,
        'table-cell' , 'table-caption'
    ]);
var domUtils = dom.domUtils = {
    //节点常量
    NODE_ELEMENT:1,
    NODE_DOCUMENT:9,
    NODE_TEXT:3,
    NODE_COMMENT:8,
    NODE_DOCUMENT_FRAGMENT:11,

    //位置关系
    POSITION_IDENTICAL:0,
    POSITION_DISCONNECTED:1,
    POSITION_FOLLOWING:2,
    POSITION_PRECEDING:4,
    POSITION_IS_CONTAINED:8,
    POSITION_CONTAINS:16,
    //ie6使用其他的会有一段空白出现
    fillChar:ie && browser.version == '6' ? '\ufeff' : '\u200B',
    //-------------------------Node部分--------------------------------
    keys:{
        /*Backspace*/ 8:1, /*Delete*/ 46:1,
        /*Shift*/ 16:1, /*Ctrl*/ 17:1, /*Alt*/ 18:1,
        37:1, 38:1, 39:1, 40:1,
        13:1 /*enter*/
    },
    /**
     * 获取节点A相对于节点B的位置关系
     * @method getPosition
     * @param { Node } nodeA 需要查询位置关系的节点A
     * @param { Node } nodeB 需要查询位置关系的节点B
     * @return { Number } 节点A与节点B的关系
     * @example
     * ```javascript
     * //output: 20
     * var position = UE.dom.domUtils.getPosition( document.documentElement, document.body );
     *
     * switch ( position ) {
     *
     *      //0
     *      case UE.dom.domUtils.POSITION_IDENTICAL:
     *          console.log('元素相同');
     *          break;
     *      //1
     *      case UE.dom.domUtils.POSITION_DISCONNECTED:
     *          console.log('两个节点在不同的文档中');
     *          break;
     *      //2
     *      case UE.dom.domUtils.POSITION_FOLLOWING:
     *          console.log('节点A在节点B之后');
     *          break;
     *      //4
     *      case UE.dom.domUtils.POSITION_PRECEDING;
     *          console.log('节点A在节点B之前');
     *          break;
     *      //8
     *      case UE.dom.domUtils.POSITION_IS_CONTAINED:
     *          console.log('节点A被节点B包含');
     *          break;
     *      case 10:
     *          console.log('节点A被节点B包含且节点A在节点B之后');
     *          break;
     *      //16
     *      case UE.dom.domUtils.POSITION_CONTAINS:
     *          console.log('节点A包含节点B');
     *          break;
     *      case 20:
     *          console.log('节点A包含节点B且节点A在节点B之前');
     *          break;
     *
     * }
     * ```
     */
    getPosition:function (nodeA, nodeB) {
        // 如果两个节点是同一个节点
        if (nodeA === nodeB) {
            // domUtils.POSITION_IDENTICAL
            return 0;
        }
        var node,
            parentsA = [nodeA],
            parentsB = [nodeB];
        node = nodeA;
        while (node = node.parentNode) {
            // 如果nodeB是nodeA的祖先节点
            if (node === nodeB) {
                // domUtils.POSITION_IS_CONTAINED + domUtils.POSITION_FOLLOWING
                return 10;
            }
            parentsA.push(node);
        }
        node = nodeB;
        while (node = node.parentNode) {
            // 如果nodeA是nodeB的祖先节点
            if (node === nodeA) {
                // domUtils.POSITION_CONTAINS + domUtils.POSITION_PRECEDING
                return 20;
            }
            parentsB.push(node);
        }
        parentsA.reverse();
        parentsB.reverse();
        if (parentsA[0] !== parentsB[0]) {
            // domUtils.POSITION_DISCONNECTED
            return 1;
        }
        var i = -1;
        while (i++, parentsA[i] === parentsB[i]) {
        }
        nodeA = parentsA[i];
        nodeB = parentsB[i];
        while (nodeA = nodeA.nextSibling) {
            if (nodeA === nodeB) {
                // domUtils.POSITION_PRECEDING
                return 4
            }
        }
        // domUtils.POSITION_FOLLOWING
        return  2;
    },

    /**
     * 检测节点node在父节点中的索引位置
     * @method getNodeIndex
     * @param { Node } node 需要检测的节点对象
     * @return { Number } 该节点在父节点中的位置
     * @see UE.dom.domUtils.getNodeIndex(Node,Boolean)
     */

    /**
     * 检测节点node在父节点中的索引位置， 根据给定的mergeTextNode参数决定是否要合并多个连续的文本节点为一个节点
     * @method getNodeIndex
     * @param { Node } node 需要检测的节点对象
     * @param { Boolean } mergeTextNode 是否合并多个连续的文本节点为一个节点
     * @return { Number } 该节点在父节点中的位置
     * @example
     * ```javascript
     *
     *      var node = document.createElement("div");
     *
     *      node.appendChild( document.createTextNode( "hello" ) );
     *      node.appendChild( document.createTextNode( "world" ) );
     *      node.appendChild( node = document.createElement( "div" ) );
     *
     *      //output: 2
     *      console.log( UE.dom.domUtils.getNodeIndex( node ) );
     *
     *      //output: 1
     *      console.log( UE.dom.domUtils.getNodeIndex( node, true ) );
     *
     * ```
     */
    getNodeIndex:function (node, ignoreTextNode) {
        var preNode = node,
            i = 0;
        while (preNode = preNode.previousSibling) {
            if (ignoreTextNode && preNode.nodeType == 3) {
                if(preNode.nodeType != preNode.nextSibling.nodeType ){
                    i++;
                }
                continue;
            }
            i++;
        }
        return i;
    },

    /**
     * 检测节点node是否在给定的document对象上
     * @method inDoc
     * @param { Node } node 需要检测的节点对象
     * @param { DomDocument } doc 需要检测的document对象
     * @return { Boolean } 该节点node是否在给定的document的dom树上
     * @example
     * ```javascript
     *
     * var node = document.createElement("div");
     *
     * //output: false
     * console.log( UE.do.domUtils.inDoc( node, document ) );
     *
     * document.body.appendChild( node );
     *
     * //output: true
     * console.log( UE.do.domUtils.inDoc( node, document ) );
     *
     * ```
     */
    inDoc:function (node, doc) {
        return domUtils.getPosition(node, doc) == 10;
    },
    /**
     * 根据给定的过滤规则filterFn， 查找符合该过滤规则的node节点的第一个祖先节点，
     * 查找的起点是给定node节点的父节点。
     * @method findParent
     * @param { Node } node 需要查找的节点
     * @param { Function } filterFn 自定义的过滤方法。
     * @warning 查找的终点是到body节点为止
     * @remind 自定义的过滤方法filterFn接受一个Node对象作为参数， 该对象代表当前执行检测的祖先节点。 如果该
     *          节点满足过滤条件， 则要求返回true， 这时将直接返回该节点作为findParent()的结果， 否则， 请返回false。
     * @return { Node | Null } 如果找到符合过滤条件的节点， 就返回该节点， 否则返回NULL
     * @example
     * ```javascript
     * var filterNode = UE.dom.domUtils.findParent( document.body.firstChild, function ( node ) {
     *
     *     //由于查找的终点是body节点， 所以永远也不会匹配当前过滤器的条件， 即这里永远会返回false
     *     return node.tagName === "HTML";
     *
     * } );
     *
     * //output: true
     * console.log( filterNode === null );
     * ```
     */

    /**
     * 根据给定的过滤规则filterFn， 查找符合该过滤规则的node节点的第一个祖先节点，
     * 如果includeSelf的值为true，则查找的起点是给定的节点node， 否则， 起点是node的父节点
     * @method findParent
     * @param { Node } node 需要查找的节点
     * @param { Function } filterFn 自定义的过滤方法。
     * @param { Boolean } includeSelf 查找过程是否包含自身
     * @warning 查找的终点是到body节点为止
     * @remind 自定义的过滤方法filterFn接受一个Node对象作为参数， 该对象代表当前执行检测的祖先节点。 如果该
     *          节点满足过滤条件， 则要求返回true， 这时将直接返回该节点作为findParent()的结果， 否则， 请返回false。
     * @remind 如果includeSelf为true， 则过滤器第一次执行时的参数会是节点本身。
     *          反之， 过滤器第一次执行时的参数将是该节点的父节点。
     * @return { Node | Null } 如果找到符合过滤条件的节点， 就返回该节点， 否则返回NULL
     * @example
     * ```html
     * <body>
     *
     *      <div id="test">
     *      </div>
     *
     *      <script type="text/javascript">
     *
     *          //output: DIV, BODY
     *          var filterNode = UE.dom.domUtils.findParent( document.getElementById( "test" ), function ( node ) {
     *
     *              console.log( node.tagName );
     *              return false;
     *
     *          }, true );
     *
     *      </script>
     * </body>
     * ```
     */
    findParent:function (node, filterFn, includeSelf) {
        if (node && !domUtils.isBody(node)) {
            node = includeSelf ? node : node.parentNode;
            while (node) {
                if (!filterFn || filterFn(node) || domUtils.isBody(node)) {
                    return filterFn && !filterFn(node) && domUtils.isBody(node) ? null : node;
                }
                node = node.parentNode;
            }
        }
        return null;
    },
    /**
     * 查找node的节点名为tagName的第一个祖先节点， 查找的起点是node节点的父节点。
     * @method findParentByTagName
     * @param { Node } node 需要查找的节点对象
     * @param { Array } tagNames 需要查找的父节点的名称数组
     * @warning 查找的终点是到body节点为止
     * @return { Node | NULL } 如果找到符合条件的节点， 则返回该节点， 否则返回NULL
     * @example
     * ```javascript
     * var node = UE.dom.domUtils.findParentByTagName( document.getElementsByTagName("div")[0], [ "BODY" ] );
     * //output: BODY
     * console.log( node.tagName );
     * ```
     */

    /**
     * 查找node的节点名为tagName的祖先节点， 如果includeSelf的值为true，则查找的起点是给定的节点node，
     * 否则， 起点是node的父节点。
     * @method findParentByTagName
     * @param { Node } node 需要查找的节点对象
     * @param { Array } tagNames 需要查找的父节点的名称数组
     * @param { Boolean } includeSelf 查找过程是否包含node节点自身
     * @warning 查找的终点是到body节点为止
     * @return { Node | NULL } 如果找到符合条件的节点， 则返回该节点， 否则返回NULL
     * @example
     * ```javascript
     * var queryTarget = document.getElementsByTagName("div")[0];
     * var node = UE.dom.domUtils.findParentByTagName( queryTarget, [ "DIV" ], true );
     * //output: true
     * console.log( queryTarget === node );
     * ```
     */
    findParentByTagName:function (node, tagNames, includeSelf, excludeFn) {
        tagNames = utils.listToMap(utils.isArray(tagNames) ? tagNames : [tagNames]);
        return domUtils.findParent(node, function (node) {
            return tagNames[node.tagName] && !(excludeFn && excludeFn(node));
        }, includeSelf);
    },
    /**
     * 查找节点node的祖先节点集合， 查找的起点是给定节点的父节点，结果集中不包含给定的节点。
     * @method findParents
     * @param { Node } node 需要查找的节点对象
     * @return { Array } 给定节点的祖先节点数组
     * @grammar UE.dom.domUtils.findParents(node)  => Array  //返回一个祖先节点数组集合，不包含自身
     * @grammar UE.dom.domUtils.findParents(node,includeSelf)  => Array  //返回一个祖先节点数组集合，includeSelf指定是否包含自身
     * @grammar UE.dom.domUtils.findParents(node,includeSelf,filterFn)  => Array  //返回一个祖先节点数组集合，filterFn指定过滤条件，返回true的node将被选取
     * @grammar UE.dom.domUtils.findParents(node,includeSelf,filterFn,closerFirst)  => Array  //返回一个祖先节点数组集合，closerFirst为true的话，node的直接父亲节点是数组的第0个
     */

    /**
     * 查找节点node的祖先节点集合， 如果includeSelf的值为true，
     * 则返回的结果集中允许出现当前给定的节点， 否则， 该节点不会出现在其结果集中。
     * @method findParents
     * @param { Node } node 需要查找的节点对象
     * @param { Boolean } includeSelf 查找的结果中是否允许包含当前查找的节点对象
     * @return { Array } 给定节点的祖先节点数组
     */
    findParents:function (node, includeSelf, filterFn, closerFirst) {
        var parents = includeSelf && ( filterFn && filterFn(node) || !filterFn ) ? [node] : [];
        while (node = domUtils.findParent(node, filterFn)) {
            parents.push(node);
        }
        return closerFirst ? parents : parents.reverse();
    },

    /**
     * 在节点node后面插入新节点newNode
     * @method insertAfter
     * @param { Node } node 目标节点
     * @param { Node } newNode 新插入的节点， 该节点将置于目标节点之后
     * @return { Node } 新插入的节点
     */
    insertAfter:function (node, newNode) {
        return node.nextSibling ? node.parentNode.insertBefore(newNode, node.nextSibling):
            node.parentNode.appendChild(newNode);
    },

    /**
     * 删除节点node及其下属的所有节点
     * @method remove
     * @param { Node } node 需要删除的节点对象
     * @return { Node } 返回刚删除的节点对象
     * @example
     * ```html
     * <div id="test">
     *     <div id="child">你好</div>
     * </div>
     * <script>
     *     UE.dom.domUtils.remove( document.body, false );
     *     //output: false
     *     console.log( document.getElementById( "child" ) !== null );
     * </script>
     * ```
     */

    /**
     * 删除节点node，并根据keepChildren的值决定是否保留子节点
     * @method remove
     * @param { Node } node 需要删除的节点对象
     * @param { Boolean } keepChildren 是否需要保留子节点
     * @return { Node } 返回刚删除的节点对象
     * @example
     * ```html
     * <div id="test">
     *     <div id="child">你好</div>
     * </div>
     * <script>
     *     UE.dom.domUtils.remove( document.body, true );
     *     //output: true
     *     console.log( document.getElementById( "child" ) !== null );
     * </script>
     * ```
     */
    remove:function (node, keepChildren) {
        var parent = node.parentNode,
            child;
        if (parent) {
            if (keepChildren && node.hasChildNodes()) {
                while (child = node.firstChild) {
                    parent.insertBefore(child, node);
                }
            }
            parent.removeChild(node);
        }
        return node;
    },

    /**
     * 取得node节点的下一个兄弟节点， 如果该节点其后没有兄弟节点， 则递归查找其父节点之后的第一个兄弟节点，
     * 直到找到满足条件的节点或者递归到BODY节点之后才会结束。
     * @method getNextDomNode
     * @param { Node } node 需要获取其后的兄弟节点的节点对象
     * @return { Node | NULL } 如果找满足条件的节点， 则返回该节点， 否则返回NULL
     * @example
     * ```html
     *     <body>
     *      <div id="test">
     *          <span></span>
     *      </div>
     *      <i>xxx</i>
     * </body>
     * <script>
     *
     *     //output: i节点
     *     console.log( UE.dom.domUtils.getNextDomNode( document.getElementById( "test" ) ) );
     *
     * </script>
     * ```
     * @example
     * ```html
     * <body>
     *      <div>
     *          <span></span>
     *          <i id="test">xxx</i>
     *      </div>
     *      <b>xxx</b>
     * </body>
     * <script>
     *
     *     //由于id为test的i节点之后没有兄弟节点， 则查找其父节点（div）后面的兄弟节点
     *     //output: b节点
     *     console.log( UE.dom.domUtils.getNextDomNode( document.getElementById( "test" ) ) );
     *
     * </script>
     * ```
     */

    /**
     * 取得node节点的下一个兄弟节点， 如果startFromChild的值为ture，则先获取其子节点，
     * 如果有子节点则直接返回第一个子节点；如果没有子节点或者startFromChild的值为false，
     * 则执行<a href="#UE.dom.domUtils.getNextDomNode(Node)">getNextDomNode(Node node)</a>的查找过程。
     * @method getNextDomNode
     * @param { Node } node 需要获取其后的兄弟节点的节点对象
     * @param { Boolean } startFromChild 查找过程是否从其子节点开始
     * @return { Node | NULL } 如果找满足条件的节点， 则返回该节点， 否则返回NULL
     * @see UE.dom.domUtils.getNextDomNode(Node)
     */
    getNextDomNode:function (node, startFromChild, filterFn, guard) {
        return getDomNode(node, 'firstChild', 'nextSibling', startFromChild, filterFn, guard);
    },
    getPreDomNode:function (node, startFromChild, filterFn, guard) {
        return getDomNode(node, 'lastChild', 'previousSibling', startFromChild, filterFn, guard);
    },
    /**
     * 检测节点node是否属是UEditor定义的bookmark节点
     * @method isBookmarkNode
     * @private
     * @param { Node } node 需要检测的节点对象
     * @return { Boolean } 是否是bookmark节点
     * @example
     * ```html
     * <span id="_baidu_bookmark_1"></span>
     * <script>
     *      var bookmarkNode = document.getElementById("_baidu_bookmark_1");
     *      //output: true
     *      console.log( UE.dom.domUtils.isBookmarkNode( bookmarkNode ) );
     * </script>
     * ```
     */
    isBookmarkNode:function (node) {
        return node.nodeType == 1 && node.id && /^_baidu_bookmark_/i.test(node.id);
    },
    /**
     * 获取节点node所属的window对象
     * @method  getWindow
     * @param { Node } node 节点对象
     * @return { Window } 当前节点所属的window对象
     * @example
     * ```javascript
     * //output: true
     * console.log( UE.dom.domUtils.getWindow( document.body ) === window );
     * ```
     */
    getWindow:function (node) {
        var doc = node.ownerDocument || node;
        return doc.defaultView || doc.parentWindow;
    },
    /**
     * 获取离nodeA与nodeB最近的公共的祖先节点
     * @method  getCommonAncestor
     * @param { Node } nodeA 第一个节点
     * @param { Node } nodeB 第二个节点
     * @remind 如果给定的两个节点是同一个节点， 将直接返回该节点。
     * @return { Node | NULL } 如果未找到公共节点， 返回NULL， 否则返回最近的公共祖先节点。
     * @example
     * ```javascript
     * var commonAncestor = UE.dom.domUtils.getCommonAncestor( document.body, document.body.firstChild );
     * //output: true
     * console.log( commonAncestor.tagName.toLowerCase() === 'body' );
     * ```
     */
    getCommonAncestor:function (nodeA, nodeB) {
        if (nodeA === nodeB)
            return nodeA;
        var parentsA = [nodeA] , parentsB = [nodeB], parent = nodeA, i = -1;
        while (parent = parent.parentNode) {
            if (parent === nodeB) {
                return parent;
            }
            parentsA.push(parent);
        }
        parent = nodeB;
        while (parent = parent.parentNode) {
            if (parent === nodeA)
                return parent;
            parentsB.push(parent);
        }
        parentsA.reverse();
        parentsB.reverse();
        while (i++, parentsA[i] === parentsB[i]) {
        }
        return i == 0 ? null : parentsA[i - 1];

    },
    /**
     * 清除node节点左右连续为空的兄弟inline节点
     * @method clearEmptySibling
     * @param { Node } node 执行的节点对象， 如果该节点的左右连续的兄弟节点是空的inline节点，
     * 则这些兄弟节点将被删除
     * @grammar UE.dom.domUtils.clearEmptySibling(node,ignoreNext)  //ignoreNext指定是否忽略右边空节点
     * @grammar UE.dom.domUtils.clearEmptySibling(node,ignoreNext,ignorePre)  //ignorePre指定是否忽略左边空节点
     * @example
     * ```html
     * <body>
     *     <div></div>
     *     <span id="test"></span>
     *     <i></i>
     *     <b></b>
     *     <em>xxx</em>
     *     <span></span>
     * </body>
     * <script>
     *
     *      UE.dom.domUtils.clearEmptySibling( document.getElementById( "test" ) );
     *
     *      //output: <div></div><span id="test"></span><em>xxx</em><span></span>
     *      console.log( document.body.innerHTML );
     *
     * </script>
     * ```
     */

    /**
     * 清除node节点左右连续为空的兄弟inline节点， 如果ignoreNext的值为true，
     * 则忽略对右边兄弟节点的操作。
     * @method clearEmptySibling
     * @param { Node } node 执行的节点对象， 如果该节点的左右连续的兄弟节点是空的inline节点，
     * @param { Boolean } ignoreNext 是否忽略忽略对右边的兄弟节点的操作
     * 则这些兄弟节点将被删除
     * @see UE.dom.domUtils.clearEmptySibling(Node)
     */

    /**
     * 清除node节点左右连续为空的兄弟inline节点， 如果ignoreNext的值为true，
     * 则忽略对右边兄弟节点的操作， 如果ignorePre的值为true，则忽略对左边兄弟节点的操作。
     * @method clearEmptySibling
     * @param { Node } node 执行的节点对象， 如果该节点的左右连续的兄弟节点是空的inline节点，
     * @param { Boolean } ignoreNext 是否忽略忽略对右边的兄弟节点的操作
     * @param { Boolean } ignorePre 是否忽略忽略对左边的兄弟节点的操作
     * 则这些兄弟节点将被删除
     * @see UE.dom.domUtils.clearEmptySibling(Node)
     */
    clearEmptySibling:function (node, ignoreNext, ignorePre) {
        function clear(next, dir) {
            var tmpNode;
            while (next && !domUtils.isBookmarkNode(next) && (domUtils.isEmptyInlineElement(next)
                //这里不能把空格算进来会吧空格干掉，出现文字间的空格丢掉了
                || !new RegExp('[^\t\n\r' + domUtils.fillChar + ']').test(next.nodeValue) )) {
                tmpNode = next[dir];
                domUtils.remove(next);
                next = tmpNode;
            }
        }
        !ignoreNext && clear(node.nextSibling, 'nextSibling');
        !ignorePre && clear(node.previousSibling, 'previousSibling');
    },
    /**
     * 将一个文本节点textNode拆分成两个文本节点，offset指定拆分位置
     * @method split
     * @param { Node } textNode 需要拆分的文本节点对象
     * @param { int } offset 需要拆分的位置， 位置计算从0开始
     * @return { Node } 拆分后形成的新节点
     * @example
     * ```html
     * <div id="test">abcdef</div>
     * <script>
     *      var newNode = UE.dom.domUtils.split( document.getElementById( "test" ).firstChild, 3 );
     *      //output: def
     *      console.log( newNode.nodeValue );
     * </script>
     * ```
     */
    split:function (node, offset) {
        var doc = node.ownerDocument;
        if (browser.ie && offset == node.nodeValue.length) {
            var next = doc.createTextNode('');
            return domUtils.insertAfter(node, next);
        }
        var retval = node.splitText(offset);
        //ie8下splitText不会跟新childNodes,我们手动触发他的更新
        if (browser.ie8) {
            var tmpNode = doc.createTextNode('');
            domUtils.insertAfter(retval, tmpNode);
            domUtils.remove(tmpNode);
        }
        return retval;
    },

    /**
     * 检测文本节点textNode是否为空节点（包括空格、换行、占位符等字符）
     * @method  isWhitespace
     * @param { Node } node 需要检测的节点对象
     * @return { Boolean } 检测的节点是否为空
     * @example
     * ```html
     * <div id="test">
     *
     * </div>
     * <script>
     *      //output: true
     *      console.log( UE.dom.domUtils.isWhitespace( document.getElementById("test").firstChild ) );
     * </script>
     * ```
     */
    isWhitespace:function (node) {
        return !new RegExp('[^ \t\n\r' + domUtils.fillChar + ']').test(node.nodeValue);
    },
    /**
     * 获取元素element相对于viewport的位置坐标
     * @method getXY
     * @param { Node } element 需要计算位置的节点对象
     * @return { Object } 返回形如{x:left,y:top}的一个key-value映射对象， 其中键x代表水平偏移距离，
     *                          y代表垂直偏移距离。
     *
     * @example
     * ```javascript
     * var location = UE.dom.domUtils.getXY( document.getElementById("test") );
     * //output: test的坐标为: 12, 24
     * console.log( 'test的坐标为： ', location.x, ',', location.y );
     * ```
     */
    getXY:function (element) {
        var x = 0, y = 0;
        while (element.offsetParent) {
            y += element.offsetTop;
            x += element.offsetLeft;
            element = element.offsetParent;
        }
        return { 'x':x, 'y':y};
    },
    /**
     * 为元素element绑定原生DOM事件，type为事件类型，handler为处理函数
     * @method on
     * @param { Node } element 需要绑定事件的节点对象
     * @param { String } type 绑定的事件类型
     * @param { Function } handler 事件处理器
     * @example
     * ```javascript
     * UE.dom.domUtils.on(document.body,"click",function(e){
     *     //e为事件对象，this为被点击元素对戏那个
     * });
     * ```
     */

    /**
     * 为元素element绑定原生DOM事件，type为事件类型，handler为处理函数
     * @method on
     * @param { Node } element 需要绑定事件的节点对象
     * @param { Array } type 绑定的事件类型数组
     * @param { Function } handler 事件处理器
     * @example
     * ```javascript
     * UE.dom.domUtils.on(document.body,["click","mousedown"],function(evt){
     *     //evt为事件对象，this为被点击元素对象
     * });
     * ```
     */
    on:function (element, type, handler) {

        var types = utils.isArray(type) ? type : utils.trim(type).split(/\s+/),
            k = types.length;
        if (k) while (k--) {
            type = types[k];
            if (element.addEventListener) {
                element.addEventListener(type, handler, false);
            } else {
                if (!handler._d) {
                    handler._d = {
                        els : []
                    };
                }
                var key = type + handler.toString(),index = utils.indexOf(handler._d.els,element);
                if (!handler._d[key] || index == -1) {
                    if(index == -1){
                        handler._d.els.push(element);
                    }
                    if(!handler._d[key]){
                        handler._d[key] = function (evt) {
                            return handler.call(evt.srcElement, evt || window.event);
                        };
                    }


                    element.attachEvent('on' + type, handler._d[key]);
                }
            }
        }
        element = null;
    },
    /**
     * 解除DOM事件绑定
     * @method un
     * @param { Node } element 需要解除事件绑定的节点对象
     * @param { String } type 需要接触绑定的事件类型
     * @param { Function } handler 对应的事件处理器
     * @example
     * ```javascript
     * UE.dom.domUtils.un(document.body,"click",function(evt){
     *     //evt为事件对象，this为被点击元素对象
     * });
     * ```
     */

    /**
     * 解除DOM事件绑定
     * @method un
     * @param { Node } element 需要解除事件绑定的节点对象
     * @param { Array } type 需要接触绑定的事件类型数组
     * @param { Function } handler 对应的事件处理器
     * @example
     * ```javascript
     * UE.dom.domUtils.un(document.body, ["click","mousedown"],function(evt){
     *     //evt为事件对象，this为被点击元素对象
     * });
     * ```
     */
    un:function (element, type, handler) {
        var types = utils.isArray(type) ? type : utils.trim(type).split(/\s+/),
            k = types.length;
        if (k) while (k--) {
            type = types[k];
            if (element.removeEventListener) {
                element.removeEventListener(type, handler, false);
            } else {
                var key = type + handler.toString();
                try{
                    element.detachEvent('on' + type, handler._d ? handler._d[key] : handler);
                }catch(e){}
                if (handler._d && handler._d[key]) {
                    var index = utils.indexOf(handler._d.els,element);
                    if(index!=-1){
                        handler._d.els.splice(index,1);
                    }
                    handler._d.els.length == 0 && delete handler._d[key];
                }
            }
        }
    },

    /**
     * 比较节点nodeA与节点nodeB是否具有相同的标签名、属性名以及属性值
     * @method  isSameElement
     * @param { Node } nodeA 需要比较的节点
     * @param { Node } nodeB 需要比较的节点
     * @return { Boolean } 两个节点是否具有相同的标签名、属性名以及属性值
     * @example
     * ```html
     * <span style="font-size:12px">ssss</span>
     * <span style="font-size:12px">bbbbb</span>
     * <span style="font-size:13px">ssss</span>
     * <span style="font-size:14px">bbbbb</span>
     *
     * <script>
     *
     *     var nodes = document.getElementsByTagName( "span" );
     *
     *     //output: true
     *     console.log( UE.dom.domUtils.isSameElement( nodes[0], nodes[1] ) );
     *
     *     //output: false
     *     console.log( UE.dom.domUtils.isSameElement( nodes[2], nodes[3] ) );
     *
     * </script>
     * ```
     */
    isSameElement:function (nodeA, nodeB) {
        if (nodeA.tagName != nodeB.tagName) {
            return false;
        }
        var thisAttrs = nodeA.attributes,
            otherAttrs = nodeB.attributes;
        if (!ie && thisAttrs.length != otherAttrs.length) {
            return false;
        }
        var attrA, attrB, al = 0, bl = 0;
        for (var i = 0; attrA = thisAttrs[i++];) {
            if (attrA.nodeName == 'style') {
                if (attrA.specified) {
                    al++;
                }
                if (domUtils.isSameStyle(nodeA, nodeB)) {
                    continue;
                } else {
                    return false;
                }
            }
            if (ie) {
                if (attrA.specified) {
                    al++;
                    attrB = otherAttrs.getNamedItem(attrA.nodeName);
                } else {
                    continue;
                }
            } else {
                attrB = nodeB.attributes[attrA.nodeName];
            }
            if (!attrB.specified || attrA.nodeValue != attrB.nodeValue) {
                return false;
            }
        }
        // 有可能attrB的属性包含了attrA的属性之外还有自己的属性
        if (ie) {
            for (i = 0; attrB = otherAttrs[i++];) {
                if (attrB.specified) {
                    bl++;
                }
            }
            if (al != bl) {
                return false;
            }
        }
        return true;
    },

    /**
     * 判断节点nodeA与节点nodeB的元素的style属性是否一致
     * @method isSameStyle
     * @param { Node } nodeA 需要比较的节点
     * @param { Node } nodeB 需要比较的节点
     * @return { Boolean } 两个节点是否具有相同的style属性值
     * @example
     * ```html
     * <span style="font-size:12px">ssss</span>
     * <span style="font-size:12px">bbbbb</span>
     * <span style="font-size:13px">ssss</span>
     * <span style="font-size:14px">bbbbb</span>
     *
     * <script>
     *
     *     var nodes = document.getElementsByTagName( "span" );
     *
     *     //output: true
     *     console.log( UE.dom.domUtils.isSameStyle( nodes[0], nodes[1] ) );
     *
     *     //output: false
     *     console.log( UE.dom.domUtils.isSameStyle( nodes[2], nodes[3] ) );
     *
     * </script>
     * ```
     */
    isSameStyle:function (nodeA, nodeB) {
        var styleA = nodeA.style.cssText.replace(/( ?; ?)/g, ';').replace(/( ?: ?)/g, ':'),
            styleB = nodeB.style.cssText.replace(/( ?; ?)/g, ';').replace(/( ?: ?)/g, ':');
        if (browser.opera) {
            styleA = nodeA.style;
            styleB = nodeB.style;
            if (styleA.length != styleB.length)
                return false;
            for (var p in styleA) {
                if (/^(\d+|csstext)$/i.test(p)) {
                    continue;
                }
                if (styleA[p] != styleB[p]) {
                    return false;
                }
            }
            return true;
        }
        if (!styleA || !styleB) {
            return styleA == styleB;
        }
        styleA = styleA.split(';');
        styleB = styleB.split(';');
        if (styleA.length != styleB.length) {
            return false;
        }
        for (var i = 0, ci; ci = styleA[i++];) {
            if (utils.indexOf(styleB, ci) == -1) {
                return false;
            }
        }
        return true;
    },
    /**
     * 检查节点node是否为block元素
     * @method isBlockElm
     * @param { Node } node 需要检测的节点对象
     * @return { Boolean } 是否是block元素节点
     * @warning 该方法的判断规则如下： 如果该元素原本是block元素， 则不论该元素当前的css样式是什么都会返回true；
     *          否则，检测该元素的css样式， 如果该元素当前是block元素， 则返回true。 其余情况下都返回false。
     * @example
     * ```html
     * <span id="test1" style="display: block"></span>
     * <span id="test2"></span>
     * <div id="test3" style="display: inline"></div>
     *
     * <script>
     *
     *     //output: true
     *     console.log( UE.dom.domUtils.isBlockElm( document.getElementById("test1") ) );
     *
     *     //output: false
     *     console.log( UE.dom.domUtils.isBlockElm( document.getElementById("test2") ) );
     *
     *     //output: true
     *     console.log( UE.dom.domUtils.isBlockElm( document.getElementById("test3") ) );
     *
     * </script>
     * ```
     */
    isBlockElm:function (node) {
        return node.nodeType == 1 && (dtd.$block[node.tagName] || styleBlock[domUtils.getComputedStyle(node, 'display')]) && !dtd.$nonChild[node.tagName];
    },
    /**
     * 检测node节点是否为body节点
     * @method isBody
     * @param { Element } node 需要检测的dom元素
     * @return { Boolean } 给定的元素是否是body元素
     * @example
     * ```javascript
     * //output: true
     * console.log( UE.dom.domUtils.isBody( document.body ) );
     * ```
     */
    isBody:function (node) {
        return  node && node.nodeType == 1 && node.tagName.toLowerCase() == 'body';
    },
    /**
     * 以node节点为分界，将该节点的指定祖先节点parent拆分成两个独立的节点，
     * 拆分形成的两个节点之间是node节点
     * @method breakParent
     * @param { Node } node 作为分界的节点对象
     * @param { Node } parent 该节点必须是node节点的祖先节点， 且是block节点。
     * @return { Node } 给定的node分界节点
     * @example
     * ```javascript
     *
     *      var node = document.createElement("span"),
     *          wrapNode = document.createElement( "div" ),
     *          parent = document.createElement("p");
     *
     *      parent.appendChild( node );
     *      wrapNode.appendChild( parent );
     *
     *      //拆分前
     *      //output: <p><span></span></p>
     *      console.log( wrapNode.innerHTML );
     *
     *
     *      UE.dom.domUtils.breakParent( node, parent );
     *      //拆分后
     *      //output: <p></p><span></span><p></p>
     *      console.log( wrapNode.innerHTML );
     *
     * ```
     */
    breakParent:function (node, parent) {
        var tmpNode,
            parentClone = node,
            clone = node,
            leftNodes,
            rightNodes;
        do {
            parentClone = parentClone.parentNode;
            if (leftNodes) {
                tmpNode = parentClone.cloneNode(false);
                tmpNode.appendChild(leftNodes);
                leftNodes = tmpNode;
                tmpNode = parentClone.cloneNode(false);
                tmpNode.appendChild(rightNodes);
                rightNodes = tmpNode;
            } else {
                leftNodes = parentClone.cloneNode(false);
                rightNodes = leftNodes.cloneNode(false);
            }
            while (tmpNode = clone.previousSibling) {
                leftNodes.insertBefore(tmpNode, leftNodes.firstChild);
            }
            while (tmpNode = clone.nextSibling) {
                rightNodes.appendChild(tmpNode);
            }
            clone = parentClone;
        } while (parent !== parentClone);
        tmpNode = parent.parentNode;
        tmpNode.insertBefore(leftNodes, parent);
        tmpNode.insertBefore(rightNodes, parent);
        tmpNode.insertBefore(node, rightNodes);
        domUtils.remove(parent);
        return node;
    },
    /**
     * 检查节点node是否是空inline节点
     * @method  isEmptyInlineElement
     * @param { Node } node 需要检测的节点对象
     * @return { Number }  如果给定的节点是空的inline节点， 则返回1, 否则返回0。
     * @example
     * ```html
     * <b><i></i></b> => 1
     * <b><i></i><u></u></b> => 1
     * <b></b> => 1
     * <b>xx<i></i></b> => 0
     * ```
     */
    isEmptyInlineElement:function (node) {
        if (node.nodeType != 1 || !dtd.$removeEmpty[ node.tagName ]) {
            return 0;
        }
        node = node.firstChild;
        while (node) {
            //如果是创建的bookmark就跳过
            if (domUtils.isBookmarkNode(node)) {
                return 0;
            }
            if (node.nodeType == 1 && !domUtils.isEmptyInlineElement(node) ||
                node.nodeType == 3 && !domUtils.isWhitespace(node)
                ) {
                return 0;
            }
            node = node.nextSibling;
        }
        return 1;

    },

    /**
     * 删除node节点下首尾两端的空白文本子节点
     * @method trimWhiteTextNode
     * @param { Element } node 需要执行删除操作的元素对象
     * @example
     * ```javascript
     *      var node = document.createElement("div");
     *
     *      node.appendChild( document.createTextNode( "" ) );
     *
     *      node.appendChild( document.createElement("div") );
     *
     *      node.appendChild( document.createTextNode( "" ) );
     *
     *      //3
     *      console.log( node.childNodes.length );
     *
     *      UE.dom.domUtils.trimWhiteTextNode( node );
     *
     *      //1
     *      console.log( node.childNodes.length );
     * ```
     */
    trimWhiteTextNode:function (node) {
        function remove(dir) {
            var child;
            while ((child = node[dir]) && child.nodeType == 3 && domUtils.isWhitespace(child)) {
                node.removeChild(child);
            }
        }
        remove('firstChild');
        remove('lastChild');
    },

    /**
     * 合并node节点下相同的子节点
     * @name mergeChild
     * @desc
     * UE.dom.domUtils.mergeChild(node,tagName) //tagName要合并的子节点的标签
     * @example
     * <p><span style="font-size:12px;">xx<span style="font-size:12px;">aa</span>xx</span></p>
     * ==> UE.dom.domUtils.mergeChild(node,'span')
     * <p><span style="font-size:12px;">xxaaxx</span></p>
     */
    mergeChild:function (node, tagName, attrs) {
        var list = domUtils.getElementsByTagName(node, node.tagName.toLowerCase());
        for (var i = 0, ci; ci = list[i++];) {
            if (!ci.parentNode || domUtils.isBookmarkNode(ci)) {
                continue;
            }
            //span单独处理
            if (ci.tagName.toLowerCase() == 'span') {
                if (node === ci.parentNode) {
                    domUtils.trimWhiteTextNode(node);
                    if (node.childNodes.length == 1) {
                        node.style.cssText = ci.style.cssText + ";" + node.style.cssText;
                        domUtils.remove(ci, true);
                        continue;
                    }
                }
                ci.style.cssText = node.style.cssText + ';' + ci.style.cssText;
                if (attrs) {
                    var style = attrs.style;
                    if (style) {
                        style = style.split(';');
                        for (var j = 0, s; s = style[j++];) {
                            ci.style[utils.cssStyleToDomStyle(s.split(':')[0])] = s.split(':')[1];
                        }
                    }
                }
                if (domUtils.isSameStyle(ci, node)) {
                    domUtils.remove(ci, true);
                }
                continue;
            }
            if (domUtils.isSameElement(node, ci)) {
                domUtils.remove(ci, true);
            }
        }
    },

    /**
     * 原生方法getElementsByTagName的封装
     * @method getElementsByTagName
     * @param { Node } node 目标节点对象
     * @param { String } tagName 需要查找的节点的tagName， 多个tagName以空格分割
     * @return { Array } 符合条件的节点集合
     */
    getElementsByTagName:function (node, name,filter) {
        if(filter && utils.isString(filter)){
           var className = filter;
           filter =  function(node){return domUtils.hasClass(node,className)}
        }
        name = utils.trim(name).replace(/[ ]{2,}/g,' ').split(' ');
        var arr = [];
        for(var n = 0,ni;ni=name[n++];){
            var list = node.getElementsByTagName(ni);
            for (var i = 0, ci; ci = list[i++];) {
                if(!filter || filter(ci))
                    arr.push(ci);
            }
        }

        return arr;
    },
    /**
     * 将节点node提取到父节点上
     * @method mergeToParent
     * @param { Element } node 需要提取的元素对象
     * @example
     * ```html
     * <div id="parent">
     *     <div id="sub">
     *         <span id="child"></span>
     *     </div>
     * </div>
     *
     * <script>
     *
     *     var child = document.getElementById( "child" );
     *
     *     //output: sub
     *     console.log( child.parentNode.id );
     *
     *     UE.dom.domUtils.mergeToParent( child );
     *
     *     //output: parent
     *     console.log( child.parentNode.id );
     *
     * </script>
     * ```
     */
    mergeToParent:function (node) {
        var parent = node.parentNode;
        while (parent && dtd.$removeEmpty[parent.tagName]) {
            if (parent.tagName == node.tagName || parent.tagName == 'A') {//针对a标签单独处理
                domUtils.trimWhiteTextNode(parent);
                //span需要特殊处理  不处理这样的情况 <span stlye="color:#fff">xxx<span style="color:#ccc">xxx</span>xxx</span>
                if (parent.tagName == 'SPAN' && !domUtils.isSameStyle(parent, node)
                    || (parent.tagName == 'A' && node.tagName == 'SPAN')) {
                    if (parent.childNodes.length > 1 || parent !== node.parentNode) {
                        node.style.cssText = parent.style.cssText + ";" + node.style.cssText;
                        parent = parent.parentNode;
                        continue;
                    } else {
                        parent.style.cssText += ";" + node.style.cssText;
                        //trace:952 a标签要保持下划线
                        if (parent.tagName == 'A') {
                            parent.style.textDecoration = 'underline';
                        }
                    }
                }
                if (parent.tagName != 'A') {
                    parent === node.parentNode && domUtils.remove(node, true);
                    break;
                }
            }
            parent = parent.parentNode;
        }
    },
    /**
     * 合并节点node的左右兄弟节点
     * @method mergeSibling
     * @param { Element } node 需要合并的目标节点
     * @example
     * ```html
     * <b>xxxx</b><b id="test">ooo</b><b>xxxx</b>
     *
     * <script>
     *     var demoNode = document.getElementById("test");
     *     UE.dom.domUtils.mergeSibling( demoNode );
     *     //output: xxxxoooxxxx
     *     console.log( demoNode.innerHTML );
     * </script>
     * ```
     */

    /**
     * 合并节点node的左右兄弟节点， 可以根据给定的条件选择是否忽略合并左节点。
     * @method mergeSibling
     * @param { Element } node 需要合并的目标节点
     * @param { Boolean } ignorePre 是否忽略合并左节点
     * @example
     * ```html
     * <b>xxxx</b><b id="test">ooo</b><b>xxxx</b>
     *
     * <script>
     *     var demoNode = document.getElementById("test");
     *     UE.dom.domUtils.mergeSibling( demoNode, true );
     *     //output: oooxxxx
     *     console.log( demoNode.innerHTML );
     * </script>
     * ```
     */

    /**
     * 合并节点node的左右兄弟节点，可以根据给定的条件选择是否忽略合并左右节点。
     * @method mergeSibling
     * @param { Element } node 需要合并的目标节点
     * @param { Boolean } ignorePre 是否忽略合并左节点
     * @param { Boolean } ignoreNext 是否忽略合并右节点
     * @remind 如果同时忽略左右节点， 则该操作什么也不会做
     * @example
     * ```html
     * <b>xxxx</b><b id="test">ooo</b><b>xxxx</b>
     *
     * <script>
     *     var demoNode = document.getElementById("test");
     *     UE.dom.domUtils.mergeSibling( demoNode, false, true );
     *     //output: xxxxooo
     *     console.log( demoNode.innerHTML );
     * </script>
     * ```
     */
    mergeSibling:function (node, ignorePre, ignoreNext) {
        function merge(rtl, start, node) {
            var next;
            if ((next = node[rtl]) && !domUtils.isBookmarkNode(next) && next.nodeType == 1 && domUtils.isSameElement(node, next)) {
                while (next.firstChild) {
                    if (start == 'firstChild') {
                        node.insertBefore(next.lastChild, node.firstChild);
                    } else {
                        node.appendChild(next.firstChild);
                    }
                }
                domUtils.remove(next);
            }
        }
        !ignorePre && merge('previousSibling', 'firstChild', node);
        !ignoreNext && merge('nextSibling', 'lastChild', node);
    },

    /**
     * 设置节点node及其子节点不会被选中
     * @method unSelectable
     * @param { Element } node 需要执行操作的dom元素
     * @remind 执行该操作后的节点， 将不能被鼠标选中
     * @example
     * ```javascript
     * UE.dom.domUtils.unSelectable( document.body );
     * ```
     */
    unSelectable:ie && browser.ie9below || browser.opera ? function (node) {
        //for ie9
        node.onselectstart = function () {
            return false;
        };
        node.onclick = node.onkeyup = node.onkeydown = function () {
            return false;
        };
        node.unselectable = 'on';
        node.setAttribute("unselectable", "on");
        for (var i = 0, ci; ci = node.all[i++];) {
            switch (ci.tagName.toLowerCase()) {
                case 'iframe' :
                case 'textarea' :
                case 'input' :
                case 'select' :
                    break;
                default :
                    ci.unselectable = 'on';
                    node.setAttribute("unselectable", "on");
            }
        }
    } : function (node) {
        node.style.MozUserSelect =
            node.style.webkitUserSelect =
                node.style.msUserSelect =
                    node.style.KhtmlUserSelect = 'none';
    },
    /**
     * 删除节点node上的指定属性名称的属性
     * @method  removeAttributes
     * @param { Node } node 需要删除属性的节点对象
     * @param { String } attrNames 可以是空格隔开的多个属性名称，该操作将会依次删除相应的属性
     * @example
     * ```html
     * <div id="wrap">
     *      <span style="font-size:14px;" id="test" name="followMe">xxxxx</span>
     * </div>
     *
     * <script>
     *
     *     UE.dom.domUtils.removeAttributes( document.getElementById( "test" ), "id name" );
     *
     *     //output: <span style="font-size:14px;">xxxxx</span>
     *     console.log( document.getElementById("wrap").innerHTML );
     *
     * </script>
     * ```
     */

    /**
     * 删除节点node上的指定属性名称的属性
     * @method  removeAttributes
     * @param { Node } node 需要删除属性的节点对象
     * @param { Array } attrNames 需要删除的属性名数组
     * @example
     * ```html
     * <div id="wrap">
     *      <span style="font-size:14px;" id="test" name="followMe">xxxxx</span>
     * </div>
     *
     * <script>
     *
     *     UE.dom.domUtils.removeAttributes( document.getElementById( "test" ), ["id", "name"] );
     *
     *     //output: <span style="font-size:14px;">xxxxx</span>
     *     console.log( document.getElementById("wrap").innerHTML );
     *
     * </script>
     * ```
     */
    removeAttributes:function (node, attrNames) {
        attrNames = utils.isArray(attrNames) ? attrNames : utils.trim(attrNames).replace(/[ ]{2,}/g,' ').split(' ');
        for (var i = 0, ci; ci = attrNames[i++];) {
            ci = attrFix[ci] || ci;
            switch (ci) {
                case 'className':
                    node[ci] = '';
                    break;
                case 'style':
                    node.style.cssText = '';
                    var val = node.getAttributeNode('style');
                    !browser.ie && val && node.removeAttributeNode(val);
            }
            node.removeAttribute(ci);
        }
    },
    /**
     * 在doc下创建一个标签名为tag，属性为attrs的元素
     * @method createElement
     * @param { DomDocument } doc 新创建的元素属于该document节点创建
     * @param { String } tagName 需要创建的元素的标签名
     * @param { Object } attrs 新创建的元素的属性key-value集合
     * @return { Element } 新创建的元素对象
     * @example
     * ```javascript
     * var ele = UE.dom.domUtils.createElement( document, 'div', {
     *     id: 'test'
     * } );
     *
     * //output: DIV
     * console.log( ele.tagName );
     *
     * //output: test
     * console.log( ele.id );
     *
     * ```
     */
    createElement:function (doc, tag, attrs) {
        return domUtils.setAttributes(doc.createElement(tag), attrs)
    },
    /**
     * 为节点node添加属性attrs，attrs为属性键值对
     * @method setAttributes
     * @param { Element } node 需要设置属性的元素对象
     * @param { Object } attrs 需要设置的属性名-值对
     * @return { Element } 设置属性的元素对象
     * @example
     * ```html
     * <span id="test"></span>
     *
     * <script>
     *
     *     var testNode = UE.dom.domUtils.setAttributes( document.getElementById( "test" ), {
     *         id: 'demo'
     *     } );
     *
     *     //output: demo
     *     console.log( testNode.id );
     *
     * </script>
     *
     */
    setAttributes:function (node, attrs) {
        for (var attr in attrs) {
            if(attrs.hasOwnProperty(attr)){
                var value = attrs[attr];
                switch (attr) {
                    case 'class':
                        //ie下要这样赋值，setAttribute不起作用
                        node.className = value;
                        break;
                    case 'style' :
                        node.style.cssText = node.style.cssText + ";" + value;
                        break;
                    case 'innerHTML':
                        node[attr] = value;
                        break;
                    case 'value':
                        node.value = value;
                        break;
                    default:
                        node.setAttribute(attrFix[attr] || attr, value);
                }
            }
        }
        return node;
    },

    /**
     * 获取元素element经过计算后的样式值
     * @method getComputedStyle
     * @param { Element } element 需要获取样式的元素对象
     * @param { String } styleName 需要获取的样式名
     * @return { String } 获取到的样式值
     * @example
     * ```html
     * <style type="text/css">
     *      #test {
     *          font-size: 15px;
     *      }
     * </style>
     *
     * <span id="test"></span>
     *
     * <script>
     *     //output: 15px
     *     console.log( UE.dom.domUtils.getComputedStyle( document.getElementById( "test" ), 'font-size' ) );
     * </script>
     * ```
     */
    getComputedStyle:function (element, styleName) {
        //一下的属性单独处理
        var pros = 'width height top left';

        if(pros.indexOf(styleName) > -1){
            return element['offset' + styleName.replace(/^\w/,function(s){return s.toUpperCase()})] + 'px';
        }
        //忽略文本节点
        if (element.nodeType == 3) {
            element = element.parentNode;
        }
        //ie下font-size若body下定义了font-size，则从currentStyle里会取到这个font-size. 取不到实际值，故此修改.
        if (browser.ie && browser.version < 9 && styleName == 'font-size' && !element.style.fontSize &&
            !dtd.$empty[element.tagName] && !dtd.$nonChild[element.tagName]) {
            var span = element.ownerDocument.createElement('span');
            span.style.cssText = 'padding:0;border:0;font-family:simsun;';
            span.innerHTML = '.';
            element.appendChild(span);
            var result = span.offsetHeight;
            element.removeChild(span);
            span = null;
            return result + 'px';
        }
        try {
            var value = domUtils.getStyle(element, styleName) ||
                (window.getComputedStyle ? domUtils.getWindow(element).getComputedStyle(element, '').getPropertyValue(styleName) :
                    ( element.currentStyle || element.style )[utils.cssStyleToDomStyle(styleName)]);

        } catch (e) {
            return "";
        }
        return utils.transUnitToPx(utils.fixColor(styleName, value));
    },
    /**
     * 删除元素element指定的className
     * @method removeClasses
     * @param { Element } ele 需要删除class的元素节点
     * @param { String } classNames 需要删除的className， 多个className之间以空格分开
     * @example
     * ```html
     * <span id="test" class="test1 test2 test3">xxx</span>
     *
     * <script>
     *
     *     var testNode = document.getElementById( "test" );
     *     UE.dom.domUtils.removeClasses( testNode, "test1 test2" );
     *
     *     //output: test3
     *     console.log( testNode.className );
     *
     * </script>
     * ```
     */

    /**
     * 删除元素element指定的className
     * @method removeClasses
     * @param { Element } ele 需要删除class的元素节点
     * @param { Array } classNames 需要删除的className数组
     * @example
     * ```html
     * <span id="test" class="test1 test2 test3">xxx</span>
     *
     * <script>
     *
     *     var testNode = document.getElementById( "test" );
     *     UE.dom.domUtils.removeClasses( testNode, ["test1", "test2"] );
     *
     *     //output: test3
     *     console.log( testNode.className );
     *
     * </script>
     * ```
     */
    removeClasses:function (elm, classNames) {
        classNames = utils.isArray(classNames) ? classNames :
            utils.trim(classNames).replace(/[ ]{2,}/g,' ').split(' ');
        for(var i = 0,ci,cls = elm.className;ci=classNames[i++];){
            cls = cls.replace(new RegExp('\\b' + ci + '\\b'),'')
        }
        cls = utils.trim(cls).replace(/[ ]{2,}/g,' ');
        if(cls){
            elm.className = cls;
        }else{
            domUtils.removeAttributes(elm,['class']);
        }
    },
    /**
     * 给元素element添加className
     * @method addClass
     * @param { Node } ele 需要增加className的元素
     * @param { String } classNames 需要添加的className， 多个className之间以空格分割
     * @remind 相同的类名不会被重复添加
     * @example
     * ```html
     * <span id="test" class="cls1 cls2"></span>
     *
     * <script>
     *     var testNode = document.getElementById("test");
     *
     *     UE.dom.domUtils.addClass( testNode, "cls2 cls3 cls4" );
     *
     *     //output: cl1 cls2 cls3 cls4
     *     console.log( testNode.className );
     *
     * <script>
     * ```
     */

    /**
     * 给元素element添加className
     * @method addClass
     * @param { Node } ele 需要增加className的元素
     * @param { Array } classNames 需要添加的className的数组
     * @remind 相同的类名不会被重复添加
     * @example
     * ```html
     * <span id="test" class="cls1 cls2"></span>
     *
     * <script>
     *     var testNode = document.getElementById("test");
     *
     *     UE.dom.domUtils.addClass( testNode, ["cls2", "cls3", "cls4"] );
     *
     *     //output: cl1 cls2 cls3 cls4
     *     console.log( testNode.className );
     *
     * <script>
     * ```
     */
    addClass:function (elm, classNames) {
        if(!elm)return;
        classNames = utils.trim(classNames).replace(/[ ]{2,}/g,' ').split(' ');
        for(var i = 0,ci,cls = elm.className;ci=classNames[i++];){
            if(!new RegExp('\\b' + ci + '\\b').test(cls)){
                cls += ' ' + ci;
            }
        }
        elm.className = utils.trim(cls);
    },
    /**
     * 判断元素element是否包含给定的样式类名className
     * @method hasClass
     * @param { Node } ele 需要检测的元素
     * @param { String } classNames 需要检测的className， 多个className之间用空格分割
     * @return { Boolean } 元素是否包含所有给定的className
     * @example
     * ```html
     * <span id="test1" class="cls1 cls2"></span>
     *
     * <script>
     *     var test1 = document.getElementById("test1");
     *
     *     //output: false
     *     console.log( UE.dom.domUtils.hasClass( test1, "cls2 cls1 cls3" ) );
     *
     *     //output: true
     *     console.log( UE.dom.domUtils.hasClass( test1, "cls2 cls1" ) );
     * </script>
     * ```
     */

    /**
     * 判断元素element是否包含给定的样式类名className
     * @method hasClass
     * @param { Node } ele 需要检测的元素
     * @param { Array } classNames 需要检测的className数组
     * @return { Boolean } 元素是否包含所有给定的className
     * @example
     * ```html
     * <span id="test1" class="cls1 cls2"></span>
     *
     * <script>
     *     var test1 = document.getElementById("test1");
     *
     *     //output: false
     *     console.log( UE.dom.domUtils.hasClass( test1, [ "cls2", "cls1", "cls3" ] ) );
     *
     *     //output: true
     *     console.log( UE.dom.domUtils.hasClass( test1, [ "cls2", "cls1" ]) );
     * </script>
     * ```
     */
    hasClass:function (element, className) {
        if(utils.isRegExp(className)){
            return className.test(element.className)
        }
        className = utils.trim(className).replace(/[ ]{2,}/g,' ').split(' ');
        for(var i = 0,ci,cls = element.className;ci=className[i++];){
            if(!new RegExp('\\b' + ci + '\\b','i').test(cls)){
                return false;
            }
        }
        return i - 1 == className.length;
    },

    /**
     * 阻止事件默认行为
     * @method preventDefault
     * @param { Event } evt 需要阻止默认行为的事件对象
     * @example
     * ```javascript
     * UE.dom.domUtils.preventDefault( evt );
     * ```
     */
    preventDefault:function (evt) {
        evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);
    },
    /**
     * 删除元素element指定的样式
     * @method removeStyle
     * @param { Element } element 需要删除样式的元素
     * @param { String } styleName 需要删除的样式名
     * @example
     * ```html
     * <span id="test" style="color: red; background: blue;"></span>
     *
     * <script>
     *
     *     var testNode = document.getElementById("test");
     *
     *     UE.dom.domUtils.removeStyle( testNode, 'color' );
     *
     *     //output: background: blue;
     *     console.log( testNode.style.cssText );
     *
     * </script>
     * ```
     */
    removeStyle:function (element, name) {
        if(browser.ie ){
            //针对color先单独处理一下
            if(name == 'color'){
                name = '(^|;)' + name;
            }
            element.style.cssText = element.style.cssText.replace(new RegExp(name + '[^:]*:[^;]+;?','ig'),'')
        }else{
            if (element.style.removeProperty) {
                element.style.removeProperty (name);
            }else {
                element.style.removeAttribute (utils.cssStyleToDomStyle(name));
            }
        }


        if (!element.style.cssText) {
            domUtils.removeAttributes(element, ['style']);
        }
    },
    /**
     * 获取元素element的style属性的指定值
     * @method getStyle
     * @param { Element } element 需要获取属性值的元素
     * @param { String } styleName 需要获取的style的名称
     * @warning 该方法仅获取元素style属性中所标明的值
     * @return { String } 该元素包含指定的style属性值
     * @example
     * ```html
     * <div id="test" style="color: red;"></div>
     *
     * <script>
     *
     *      var testNode = document.getElementById( "test" );
     *
     *      //output: red
     *      console.log( UE.dom.domUtils.getStyle( testNode, "color" ) );
     *
     *      //output: ""
     *      console.log( UE.dom.domUtils.getStyle( testNode, "background" ) );
     *
     * </script>
     * ```
     */
    getStyle:function (element, name) {
        var value = element.style[ utils.cssStyleToDomStyle(name) ];
        return utils.fixColor(name, value);
    },
    /**
     * 为元素element设置样式属性值
     * @method setStyle
     * @param { Element } element 需要设置样式的元素
     * @param { String } styleName 样式名
     * @param { String } styleValue 样式值
     * @example
     * ```html
     * <div id="test"></div>
     *
     * <script>
     *
     *      var testNode = document.getElementById( "test" );
     *
     *      //output: ""
     *      console.log( testNode.style.color );
     *
     *      UE.dom.domUtils.setStyle( testNode, 'color', 'red' );
     *      //output: "red"
     *      console.log( testNode.style.color );
     *
     * </script>
     * ```
     */
    setStyle:function (element, name, value) {
        element.style[utils.cssStyleToDomStyle(name)] = value;
        if(!utils.trim(element.style.cssText)){
            this.removeAttributes(element,'style')
        }
    },
    /**
     * 为元素element设置多个样式属性值
     * @method setStyles
     * @param { Element } element 需要设置样式的元素
     * @param { Object } styles 样式名值对
     * @example
     * ```html
     * <div id="test"></div>
     *
     * <script>
     *
     *      var testNode = document.getElementById( "test" );
     *
     *      //output: ""
     *      console.log( testNode.style.color );
     *
     *      UE.dom.domUtils.setStyles( testNode, {
     *          'color': 'red'
     *      } );
     *      //output: "red"
     *      console.log( testNode.style.color );
     *
     * </script>
     * ```
     */
    setStyles:function (element, styles) {
        for (var name in styles) {
            if (styles.hasOwnProperty(name)) {
                domUtils.setStyle(element, name, styles[name]);
            }
        }
    },
    /**
     * 删除_moz_dirty属性
     * @private
     * @method removeDirtyAttr
     */
    removeDirtyAttr:function (node) {
        for (var i = 0, ci, nodes = node.getElementsByTagName('*'); ci = nodes[i++];) {
            ci.removeAttribute('_moz_dirty');
        }
        node.removeAttribute('_moz_dirty');
    },
    /**
     * 获取子节点的数量
     * @method getChildCount
     * @param { Element } node 需要检测的元素
     * @return { Number } 给定的node元素的子节点数量
     * @example
     * ```html
     * <div id="test">
     *      <span></span>
     * </div>
     *
     * <script>
     *
     *     //output: 3
     *     console.log( UE.dom.domUtils.getChildCount( document.getElementById("test") ) );
     *
     * </script>
     * ```
     */

    /**
     * 根据给定的过滤规则， 获取符合条件的子节点的数量
     * @method getChildCount
     * @param { Element } node 需要检测的元素
     * @param { Function } fn 过滤器， 要求对符合条件的子节点返回true， 反之则要求返回false
     * @return { Number } 符合过滤条件的node元素的子节点数量
     * @example
     * ```html
     * <div id="test">
     *      <span></span>
     * </div>
     *
     * <script>
     *
     *     //output: 1
     *     console.log( UE.dom.domUtils.getChildCount( document.getElementById("test"), function ( node ) {
     *
     *         return node.nodeType === 1;
     *
     *     } ) );
     *
     * </script>
     * ```
     */
    getChildCount:function (node, fn) {
        var count = 0, first = node.firstChild;
        fn = fn || function () {
            return 1;
        };
        while (first) {
            if (fn(first)) {
                count++;
            }
            first = first.nextSibling;
        }
        return count;
    },

    /**
     * 判断给定节点是否为空节点
     * @method isEmptyNode
     * @param { Node } node 需要检测的节点对象
     * @return { Boolean } 节点是否为空
     * @example
     * ```javascript
     * UE.dom.domUtils.isEmptyNode( document.body );
     * ```
     */
    isEmptyNode:function (node) {
        return !node.firstChild || domUtils.getChildCount(node, function (node) {
            return  !domUtils.isBr(node) && !domUtils.isBookmarkNode(node) && !domUtils.isWhitespace(node)
        }) == 0
    },
    clearSelectedArr:function (nodes) {
        var node;
        while (node = nodes.pop()) {
            domUtils.removeAttributes(node, ['class']);
        }
    },
    /**
     * 将显示区域滚动到指定节点的位置
     * @method scrollToView
     * @param    {Node}   node    节点
     * @param    {window}   win      window对象
     * @param    {Number}    offsetTop    距离上方的偏移量
     */
    scrollToView:function (node, win, offsetTop) {
        var getViewPaneSize = function () {
                var doc = win.document,
                    mode = doc.compatMode == 'CSS1Compat';
                return {
                    width:( mode ? doc.documentElement.clientWidth : doc.body.clientWidth ) || 0,
                    height:( mode ? doc.documentElement.clientHeight : doc.body.clientHeight ) || 0
                };
            },
            getScrollPosition = function (win) {
                if ('pageXOffset' in win) {
                    return {
                        x:win.pageXOffset || 0,
                        y:win.pageYOffset || 0
                    };
                }
                else {
                    var doc = win.document;
                    return {
                        x:doc.documentElement.scrollLeft || doc.body.scrollLeft || 0,
                        y:doc.documentElement.scrollTop || doc.body.scrollTop || 0
                    };
                }
            };
        var winHeight = getViewPaneSize().height, offset = winHeight * -1 + offsetTop;
        offset += (node.offsetHeight || 0);
        var elementPosition = domUtils.getXY(node);
        offset += elementPosition.y;
        var currentScroll = getScrollPosition(win).y;
        // offset += 50;
        if (offset > currentScroll || offset < currentScroll - winHeight) {
            win.scrollTo(0, offset + (offset < 0 ? -20 : 20));
        }
    },
    /**
     * 判断给定节点是否为br
     * @method isBr
     * @param { Node } node 需要判断的节点对象
     * @return { Boolean } 给定的节点是否是br节点
     */
    isBr:function (node) {
        return node.nodeType == 1 && node.tagName == 'BR';
    },
    /**
     * 判断给定的节点是否是一个“填充”节点
     * @private
     * @method isFillChar
     * @param { Node } node 需要判断的节点
     * @param { Boolean } isInStart 是否从节点内容的开始位置匹配
     * @returns { Boolean } 节点是否是填充节点
     */
    isFillChar:function (node,isInStart) {
        if(node.nodeType != 3)
            return false;
        var text = node.nodeValue;
        if(isInStart){
            return new RegExp('^' + domUtils.fillChar).test(text)
        }
        return !text.replace(new RegExp(domUtils.fillChar,'g'), '').length
    },
    isStartInblock:function (range) {
        var tmpRange = range.cloneRange(),
            flag = 0,
            start = tmpRange.startContainer,
            tmp;
        if(start.nodeType == 1 && start.childNodes[tmpRange.startOffset]){
            start = start.childNodes[tmpRange.startOffset];
            var pre = start.previousSibling;
            while(pre && domUtils.isFillChar(pre)){
                start = pre;
                pre = pre.previousSibling;
            }
        }
        if(this.isFillChar(start,true) && tmpRange.startOffset == 1){
            tmpRange.setStartBefore(start);
            start = tmpRange.startContainer;
        }

        while (start && domUtils.isFillChar(start)) {
            tmp = start;
            start = start.previousSibling
        }
        if (tmp) {
            tmpRange.setStartBefore(tmp);
            start = tmpRange.startContainer;
        }
        if (start.nodeType == 1 && domUtils.isEmptyNode(start) && tmpRange.startOffset == 1) {
            tmpRange.setStart(start, 0).collapse(true);
        }
        while (!tmpRange.startOffset) {
            start = tmpRange.startContainer;
            if (domUtils.isBlockElm(start) || domUtils.isBody(start)) {
                flag = 1;
                break;
            }
            var pre = tmpRange.startContainer.previousSibling,
                tmpNode;
            if (!pre) {
                tmpRange.setStartBefore(tmpRange.startContainer);
            } else {
                while (pre && domUtils.isFillChar(pre)) {
                    tmpNode = pre;
                    pre = pre.previousSibling;
                }
                if (tmpNode) {
                    tmpRange.setStartBefore(tmpNode);
                } else {
                    tmpRange.setStartBefore(tmpRange.startContainer);
                }
            }
        }
        return flag && !domUtils.isBody(tmpRange.startContainer) ? 1 : 0;
    },

    /**
     * 判断给定的元素是否是一个空元素
     * @method isEmptyBlock
     * @param { Element } node 需要判断的元素
     * @return { Boolean } 是否是空元素
     * @example
     * ```html
     * <div id="test"></div>
     *
     * <script>
     *     //output: true
     *     console.log( UE.dom.domUtils.isEmptyBlock( document.getElementById("test") ) );
     * </script>
     * ```
     */

    /**
     * 根据指定的判断规则判断给定的元素是否是一个空元素
     * @method isEmptyBlock
     * @param { Element } node 需要判断的元素
     * @param { RegExp } reg 对内容执行判断的正则表达式对象
     * @return { Boolean } 是否是空元素
     */
    isEmptyBlock:function (node,reg) {
        if(node.nodeType != 1)
            return 0;
        reg = reg || new RegExp('[ \xa0\t\r\n' + domUtils.fillChar + ']', 'g');

        if (node[browser.ie ? 'innerText' : 'textContent'].replace(reg, '').length > 0) {
            return 0;
        }
        for (var n in dtd.$isNotEmpty) {
            if (node.getElementsByTagName(n).length) {
                return 0;
            }
        }
        return 1;
    },

    /**
     * 移动元素使得该元素的位置移动指定的偏移量的距离
     * @method setViewportOffset
     * @param { Element } element 需要设置偏移量的元素
     * @param { Object } offset 偏移量， 形如{ left: 100, top: 50 }的一个键值对， 表示该元素将在
     *                                  现有的位置上向水平方向偏移offset.left的距离， 在竖直方向上偏移
     *                                  offset.top的距离
     * @example
     * ```html
     * <div id="test" style="top: 100px; left: 50px; position: absolute;"></div>
     *
     * <script>
     *
     *     var testNode = document.getElementById("test");
     *
     *     UE.dom.domUtils.setViewportOffset( testNode, {
     *         left: 200,
     *         top: 50
     *     } );
     *
     *     //output: top: 300px; left: 100px; position: absolute;
     *     console.log( testNode.style.cssText );
     *
     * </script>
     * ```
     */
    setViewportOffset:function (element, offset) {
        var left = parseInt(element.style.left) | 0;
        var top = parseInt(element.style.top) | 0;
        var rect = element.getBoundingClientRect();
        var offsetLeft = offset.left - rect.left;
        var offsetTop = offset.top - rect.top;
        if (offsetLeft) {
            element.style.left = left + offsetLeft + 'px';
        }
        if (offsetTop) {
            element.style.top = top + offsetTop + 'px';
        }
    },

    /**
     * 用“填充字符”填充节点
     * @method fillNode
     * @private
     * @param { DomDocument } doc 填充的节点所在的docment对象
     * @param { Node } node 需要填充的节点对象
     * @example
     * ```html
     * <div id="test"></div>
     *
     * <script>
     *     var testNode = document.getElementById("test");
     *
     *     //output: 0
     *     console.log( testNode.childNodes.length );
     *
     *     UE.dom.domUtils.fillNode( document, testNode );
     *
     *     //output: 1
     *     console.log( testNode.childNodes.length );
     *
     * </script>
     * ```
     */
    fillNode:function (doc, node) {
        var tmpNode = browser.ie ? doc.createTextNode(domUtils.fillChar) : doc.createElement('br');
        node.innerHTML = '';
        node.appendChild(tmpNode);
    },

    /**
     * 把节点src的所有子节点追加到另一个节点tag上去
     * @method moveChild
     * @param { Node } src 源节点， 该节点下的所有子节点将被移除
     * @param { Node } tag 目标节点， 从源节点移除的子节点将被追加到该节点下
     * @example
     * ```html
     * <div id="test1">
     *      <span></span>
     * </div>
     * <div id="test2">
     *     <div></div>
     * </div>
     *
     * <script>
     *
     *     var test1 = document.getElementById("test1"),
     *         test2 = document.getElementById("test2");
     *
     *     UE.dom.domUtils.moveChild( test1, test2 );
     *
     *     //output: ""（空字符串）
     *     console.log( test1.innerHTML );
     *
     *     //output: "<div></div><span></span>"
     *     console.log( test2.innerHTML );
     *
     * </script>
     * ```
     */

    /**
     * 把节点src的所有子节点移动到另一个节点tag上去, 可以通过dir参数控制附加的行为是“追加”还是“插入顶部”
     * @method moveChild
     * @param { Node } src 源节点， 该节点下的所有子节点将被移除
     * @param { Node } tag 目标节点， 从源节点移除的子节点将被附加到该节点下
     * @param { Boolean } dir 附加方式， 如果为true， 则附加进去的节点将被放到目标节点的顶部， 反之，则放到末尾
     * @example
     * ```html
     * <div id="test1">
     *      <span></span>
     * </div>
     * <div id="test2">
     *     <div></div>
     * </div>
     *
     * <script>
     *
     *     var test1 = document.getElementById("test1"),
     *         test2 = document.getElementById("test2");
     *
     *     UE.dom.domUtils.moveChild( test1, test2, true );
     *
     *     //output: ""（空字符串）
     *     console.log( test1.innerHTML );
     *
     *     //output: "<span></span><div></div>"
     *     console.log( test2.innerHTML );
     *
     * </script>
     * ```
     */
    moveChild:function (src, tag, dir) {
        while (src.firstChild) {
            if (dir && tag.firstChild) {
                tag.insertBefore(src.lastChild, tag.firstChild);
            } else {
                tag.appendChild(src.firstChild);
            }
        }
    },

    /**
     * 判断节点的标签上是否不存在任何属性
     * @method hasNoAttributes
     * @private
     * @param { Node } node 需要检测的节点对象
     * @return { Boolean } 节点是否不包含任何属性
     * @example
     * ```html
     * <div id="test"><span>xxxx</span></div>
     *
     * <script>
     *
     *     //output: false
     *     console.log( UE.dom.domUtils.hasNoAttributes( document.getElementById("test") ) );
     *
     *     //output: true
     *     console.log( UE.dom.domUtils.hasNoAttributes( document.getElementById("test").firstChild ) );
     *
     * </script>
     * ```
     */
    hasNoAttributes:function (node) {
        return browser.ie ? /^<\w+\s*?>/.test(node.outerHTML) : node.attributes.length == 0;
    },

    /**
     * 检测节点是否是UEditor所使用的辅助节点
     * @method isCustomeNode
     * @private
     * @param { Node } node 需要检测的节点
     * @remind 辅助节点是指编辑器要完成工作临时添加的节点， 在输出的时候将会从编辑器内移除， 不会影响最终的结果。
     * @return { Boolean } 给定的节点是否是一个辅助节点
     */
    isCustomeNode:function (node) {
        return node.nodeType == 1 && node.getAttribute('_ue_custom_node_');
    },

    /**
     * 检测节点的标签是否是给定的标签
     * @method isTagNode
     * @param { Node } node 需要检测的节点对象
     * @param { String } tagName 标签
     * @return { Boolean } 节点的标签是否是给定的标签
     * @example
     * ```html
     * <div id="test"></div>
     *
     * <script>
     *
     *     //output: true
     *     console.log( UE.dom.domUtils.isTagNode( document.getElementById("test"), "div" ) );
     *
     * </script>
     * ```
     */
    isTagNode:function (node, tagNames) {
        return node.nodeType == 1 && new RegExp('\\b' + node.tagName + '\\b','i').test(tagNames)
    },

    /**
     * 给定一个节点数组，在通过指定的过滤器过滤后， 获取其中满足过滤条件的第一个节点
     * @method filterNodeList
     * @param { Array } nodeList 需要过滤的节点数组
     * @param { Function } fn 过滤器， 对符合条件的节点， 执行结果返回true， 反之则返回false
     * @return { Node | NULL } 如果找到符合过滤条件的节点， 则返回该节点， 否则返回NULL
     * @example
     * ```javascript
     * var divNodes = document.getElementsByTagName("div");
     * divNodes = [].slice.call( divNodes, 0 );
     *
     * //output: null
     * console.log( UE.dom.domUtils.filterNodeList( divNodes, function ( node ) {
     *     return node.tagName.toLowerCase() !== 'div';
     * } ) );
     * ```
     */

    /**
     * 给定一个节点数组nodeList和一组标签名tagNames， 获取其中能够匹配标签名的节点集合中的第一个节点
     * @method filterNodeList
     * @param { Array } nodeList 需要过滤的节点数组
     * @param { String } tagNames 需要匹配的标签名， 多个标签名之间用空格分割
     * @return { Node | NULL } 如果找到标签名匹配的节点， 则返回该节点， 否则返回NULL
     * @example
     * ```javascript
     * var divNodes = document.getElementsByTagName("div");
     * divNodes = [].slice.call( divNodes, 0 );
     *
     * //output: null
     * console.log( UE.dom.domUtils.filterNodeList( divNodes, 'a span' ) );
     * ```
     */

    /**
     * 给定一个节点数组，在通过指定的过滤器过滤后， 如果参数forAll为true， 则会返回所有满足过滤
     * 条件的节点集合， 否则， 返回满足条件的节点集合中的第一个节点
     * @method filterNodeList
     * @param { Array } nodeList 需要过滤的节点数组
     * @param { Function } fn 过滤器， 对符合条件的节点， 执行结果返回true， 反之则返回false
     * @param { Boolean } forAll 是否返回整个节点数组, 如果该参数为false， 则返回节点集合中的第一个节点
     * @return { Array | Node | NULL } 如果找到符合过滤条件的节点， 则根据参数forAll的值决定返回满足
     *                                      过滤条件的节点数组或第一个节点， 否则返回NULL
     * @example
     * ```javascript
     * var divNodes = document.getElementsByTagName("div");
     * divNodes = [].slice.call( divNodes, 0 );
     *
     * //output: 3（假定有3个div）
     * console.log( divNodes.length );
     *
     * var nodes = UE.dom.domUtils.filterNodeList( divNodes, function ( node ) {
     *     return node.tagName.toLowerCase() === 'div';
     * }, true );
     *
     * //output: 3
     * console.log( nodes.length );
     *
     * var node = UE.dom.domUtils.filterNodeList( divNodes, function ( node ) {
     *     return node.tagName.toLowerCase() === 'div';
     * }, false );
     *
     * //output: div
     * console.log( node.nodeName );
     * ```
     */
    filterNodeList : function(nodelist,filter,forAll){
        var results = [];
        if(!utils .isFunction(filter)){
            var str = filter;
            filter = function(n){
                return utils.indexOf(utils.isArray(str) ? str:str.split(' '), n.tagName.toLowerCase()) != -1
            };
        }
        utils.each(nodelist,function(n){
            filter(n) && results.push(n)
        });
        return results.length  == 0 ? null : results.length == 1 || !forAll ? results[0] : results
    },

    /**
     * 查询给定的range选区是否在给定的node节点内，且在该节点的最末尾
     * @method isInNodeEndBoundary
     * @param { UE.dom.Range } rng 需要判断的range对象， 该对象的startContainer不能为NULL
     * @param node 需要检测的节点对象
     * @return { Number } 如果给定的选取range对象是在node内部的最末端， 则返回1, 否则返回0
     */
    isInNodeEndBoundary : function (rng,node){
        var start = rng.startContainer;
        if(start.nodeType == 3 && rng.startOffset != start.nodeValue.length){
            return 0;
        }
        if(start.nodeType == 1 && rng.startOffset != start.childNodes.length){
            return 0;
        }
        while(start !== node){
            if(start.nextSibling){
                return 0
            };
            start = start.parentNode;
        }
        return 1;
    },
    isBoundaryNode : function (node,dir){
        var tmp;
        while(!domUtils.isBody(node)){
            tmp = node;
            node = node.parentNode;
            if(tmp !== node[dir]){
                return false;
            }
        }
        return true;
    },
    fillHtml :  browser.ie11below ? '&nbsp;' : '<br/>'
};
var fillCharReg = new RegExp(domUtils.fillChar, 'g');

// core/Range.js
/**
 * Range封装
 * @file
 * @module UE.dom
 * @class Range
 * @since 1.2.6.1
 */

/**
 * dom操作封装
 * @unfile
 * @module UE.dom
 */

/**
 * Range实现类，本类是UEditor底层核心类，封装不同浏览器之间的Range操作。
 * @unfile
 * @module UE.dom
 * @class Range
 */


(function () {
    var guid = 0,
        fillChar = domUtils.fillChar,
        fillData;

    /**
     * 更新range的collapse状态
     * @param  {Range}   range    range对象
     */
    function updateCollapse(range) {
        range.collapsed =
            range.startContainer && range.endContainer &&
                range.startContainer === range.endContainer &&
                range.startOffset == range.endOffset;
    }

    function selectOneNode(rng){
        return !rng.collapsed && rng.startContainer.nodeType == 1 && rng.startContainer === rng.endContainer && rng.endOffset - rng.startOffset == 1
    }
    function setEndPoint(toStart, node, offset, range) {
        //如果node是自闭合标签要处理
        if (node.nodeType == 1 && (dtd.$empty[node.tagName] || dtd.$nonChild[node.tagName])) {
            offset = domUtils.getNodeIndex(node) + (toStart ? 0 : 1);
            node = node.parentNode;
        }
        if (toStart) {
            range.startContainer = node;
            range.startOffset = offset;
            if (!range.endContainer) {
                range.collapse(true);
            }
        } else {
            range.endContainer = node;
            range.endOffset = offset;
            if (!range.startContainer) {
                range.collapse(false);
            }
        }
        updateCollapse(range);
        return range;
    }

    function execContentsAction(range, action) {
        //调整边界
        //range.includeBookmark();
        var start = range.startContainer,
            end = range.endContainer,
            startOffset = range.startOffset,
            endOffset = range.endOffset,
            doc = range.document,
            frag = doc.createDocumentFragment(),
            tmpStart, tmpEnd;
        if (start.nodeType == 1) {
            start = start.childNodes[startOffset] || (tmpStart = start.appendChild(doc.createTextNode('')));
        }
        if (end.nodeType == 1) {
            end = end.childNodes[endOffset] || (tmpEnd = end.appendChild(doc.createTextNode('')));
        }
        if (start === end && start.nodeType == 3) {
            frag.appendChild(doc.createTextNode(start.substringData(startOffset, endOffset - startOffset)));
            //is not clone
            if (action) {
                start.deleteData(startOffset, endOffset - startOffset);
                range.collapse(true);
            }
            return frag;
        }
        var current, currentLevel, clone = frag,
            startParents = domUtils.findParents(start, true), endParents = domUtils.findParents(end, true);
        for (var i = 0; startParents[i] == endParents[i];) {
            i++;
        }
        for (var j = i, si; si = startParents[j]; j++) {
            current = si.nextSibling;
            if (si == start) {
                if (!tmpStart) {
                    if (range.startContainer.nodeType == 3) {
                        clone.appendChild(doc.createTextNode(start.nodeValue.slice(startOffset)));
                        //is not clone
                        if (action) {
                            start.deleteData(startOffset, start.nodeValue.length - startOffset);
                        }
                    } else {
                        clone.appendChild(!action ? start.cloneNode(true) : start);
                    }
                }
            } else {
                currentLevel = si.cloneNode(false);
                clone.appendChild(currentLevel);
            }
            while (current) {
                if (current === end || current === endParents[j]) {
                    break;
                }
                si = current.nextSibling;
                clone.appendChild(!action ? current.cloneNode(true) : current);
                current = si;
            }
            clone = currentLevel;
        }
        clone = frag;
        if (!startParents[i]) {
            clone.appendChild(startParents[i - 1].cloneNode(false));
            clone = clone.firstChild;
        }
        for (var j = i, ei; ei = endParents[j]; j++) {
            current = ei.previousSibling;
            if (ei == end) {
                if (!tmpEnd && range.endContainer.nodeType == 3) {
                    clone.appendChild(doc.createTextNode(end.substringData(0, endOffset)));
                    //is not clone
                    if (action) {
                        end.deleteData(0, endOffset);
                    }
                }
            } else {
                currentLevel = ei.cloneNode(false);
                clone.appendChild(currentLevel);
            }
            //如果两端同级，右边第一次已经被开始做了
            if (j != i || !startParents[i]) {
                while (current) {
                    if (current === start) {
                        break;
                    }
                    ei = current.previousSibling;
                    clone.insertBefore(!action ? current.cloneNode(true) : current, clone.firstChild);
                    current = ei;
                }
            }
            clone = currentLevel;
        }
        if (action) {
            range.setStartBefore(!endParents[i] ? endParents[i - 1] : !startParents[i] ? startParents[i - 1] : endParents[i]).collapse(true);
        }
        tmpStart && domUtils.remove(tmpStart);
        tmpEnd && domUtils.remove(tmpEnd);
        return frag;
    }

    /**
     * 创建一个跟document绑定的空的Range实例
     * @constructor
     * @param { Document } document 新建的选区所属的文档对象
     */

    /**
     * @property { Node } startContainer 当前Range的开始边界的容器节点, 可以是一个元素节点或者是文本节点
     */

    /**
     * @property { Node } startOffset 当前Range的开始边界容器节点的偏移量, 如果是元素节点，
     *                              该值就是childNodes中的第几个节点， 如果是文本节点就是文本内容的第几个字符
     */

    /**
     * @property { Node } endContainer 当前Range的结束边界的容器节点, 可以是一个元素节点或者是文本节点
     */

    /**
     * @property { Node } endOffset 当前Range的结束边界容器节点的偏移量, 如果是元素节点，
     *                              该值就是childNodes中的第几个节点， 如果是文本节点就是文本内容的第几个字符
     */

    /**
     * @property { Boolean } collapsed 当前Range是否闭合
     * @default true
     * @remind Range是闭合的时候， startContainer === endContainer && startOffset === endOffset
     */

    /**
     * @property { Document } document 当前Range所属的Document对象
     * @remind 不同range的的document属性可以是不同的
     */
    var Range = dom.Range = function (document) {
        var me = this;
        me.startContainer =
            me.startOffset =
                me.endContainer =
                    me.endOffset = null;
        me.document = document;
        me.collapsed = true;
    };

    /**
     * 删除fillData
     * @param doc
     * @param excludeNode
     */
    function removeFillData(doc, excludeNode) {
        try {
            if (fillData && domUtils.inDoc(fillData, doc)) {
                if (!fillData.nodeValue.replace(fillCharReg, '').length) {
                    var tmpNode = fillData.parentNode;
                    domUtils.remove(fillData);
                    while (tmpNode && domUtils.isEmptyInlineElement(tmpNode) &&
                        //safari的contains有bug
                        (browser.safari ? !(domUtils.getPosition(tmpNode,excludeNode) & domUtils.POSITION_CONTAINS) : !tmpNode.contains(excludeNode))
                        ) {
                        fillData = tmpNode.parentNode;
                        domUtils.remove(tmpNode);
                        tmpNode = fillData;
                    }
                } else {
                    fillData.nodeValue = fillData.nodeValue.replace(fillCharReg, '');
                }
            }
        } catch (e) {
        }
    }

    /**
     * @param node
     * @param dir
     */
    function mergeSibling(node, dir) {
        var tmpNode;
        node = node[dir];
        while (node && domUtils.isFillChar(node)) {
            tmpNode = node[dir];
            domUtils.remove(node);
            node = tmpNode;
        }
    }

    Range.prototype = {

        /**
         * 克隆选区的内容到一个DocumentFragment里
         * @method cloneContents
         * @return { DocumentFragment | NULL } 如果选区是闭合的将返回null， 否则， 返回包含所clone内容的DocumentFragment元素
         * @example
         * ```html
         * <body>
         *      <!-- 中括号表示选区 -->
         *      <b>x<i>x[x</i>xx]x</b>
         *
         *      <script>
         *          //range是已选中的选区
         *          var fragment = range.cloneContents(),
         *              node = document.createElement("div");
         *
         *          node.appendChild( fragment );
         *
         *          //output: <i>x</i>xx
         *          console.log( node.innerHTML );
         *
         *      </script>
         * </body>
         * ```
         */
        cloneContents:function () {
            return this.collapsed ? null : execContentsAction(this, 0);
        },

        /**
         * 删除当前选区范围中的所有内容
         * @method deleteContents
         * @remind 执行完该操作后， 当前Range对象变成了闭合状态
         * @return { UE.dom.Range } 当前操作的Range对象
         * @example
         * ```html
         * <body>
         *      <!-- 中括号表示选区 -->
         *      <b>x<i>x[x</i>xx]x</b>
         *
         *      <script>
         *          //range是已选中的选区
         *          range.deleteContents();
         *
         *          //竖线表示闭合后的选区位置
         *          //output: <b>x<i>x</i>|x</b>
         *          console.log( document.body.innerHTML );
         *
         *          //此时， range的各项属性为
         *          //output: B
         *          console.log( range.startContainer.tagName );
         *          //output: 2
         *          console.log( range.startOffset );
         *          //output: B
         *          console.log( range.endContainer.tagName );
         *          //output: 2
         *          console.log( range.endOffset );
         *          //output: true
         *          console.log( range.collapsed );
         *
         *      </script>
         * </body>
         * ```
         */
        deleteContents:function () {
            var txt;
            if (!this.collapsed) {
                execContentsAction(this, 1);
            }
            if (browser.webkit) {
                txt = this.startContainer;
                if (txt.nodeType == 3 && !txt.nodeValue.length) {
                    this.setStartBefore(txt).collapse(true);
                    domUtils.remove(txt);
                }
            }
            return this;
        },

        /**
         * 将当前选区的内容提取到一个DocumentFragment里
         * @method extractContents
         * @remind 执行该操作后， 选区将变成闭合状态
         * @warning 执行该操作后， 原来选区所选中的内容将从dom树上剥离出来
         * @return { DocumentFragment } 返回包含所提取内容的DocumentFragment对象
         * @example
         * ```html
         * <body>
         *      <!-- 中括号表示选区 -->
         *      <b>x<i>x[x</i>xx]x</b>
         *
         *      <script>
         *          //range是已选中的选区
         *          var fragment = range.extractContents(),
         *              node = document.createElement( "div" );
         *
         *          node.appendChild( fragment );
         *
         *          //竖线表示闭合后的选区位置
         *
         *          //output: <b>x<i>x</i>|x</b>
         *          console.log( document.body.innerHTML );
         *          //output: <i>x</i>xx
         *          console.log( node.innerHTML );
         *
         *          //此时， range的各项属性为
         *          //output: B
         *          console.log( range.startContainer.tagName );
         *          //output: 2
         *          console.log( range.startOffset );
         *          //output: B
         *          console.log( range.endContainer.tagName );
         *          //output: 2
         *          console.log( range.endOffset );
         *          //output: true
         *          console.log( range.collapsed );
         *
         *      </script>
         * </body>
         */
        extractContents:function () {
            return this.collapsed ? null : execContentsAction(this, 2);
        },

        /**
         * 设置Range的开始容器节点和偏移量
         * @method  setStart
         * @remind 如果给定的节点是元素节点，那么offset指的是其子元素中索引为offset的元素，
         *          如果是文本节点，那么offset指的是其文本内容的第offset个字符
         * @remind 如果提供的容器节点是一个不能包含子元素的节点， 则该选区的开始容器将被设置
         *          为该节点的父节点， 此时， 其距离开始容器的偏移量也变成了该节点在其父节点
         *          中的索引
         * @param { Node } node 将被设为当前选区开始边界容器的节点对象
         * @param { int } offset 选区的开始位置偏移量
         * @return { UE.dom.Range } 当前range对象
         * @example
         * ```html
         * <!-- 选区 -->
         * <b>xxx<i>x<span>xx</span>xx<em>xx</em>xxx</i>[xxx]</b>
         *
         * <script>
         *
         *     //执行操作
         *     range.setStart( document.getElementsByTagName("i")[0], 1 );
         *
         *     //此时， 选区变成了
         *     //<b>xxx<i>x[<span>xx</span>xx<em>xx</em>xxx</i>xxx]</b>
         *
         * </script>
         * ```
         * @example
         * ```html
         * <!-- 选区 -->
         * <b>xxx<img>[xx]x</b>
         *
         * <script>
         *
         *     //执行操作
         *     range.setStart( document.getElementsByTagName("img")[0], 3 );
         *
         *     //此时， 选区变成了
         *     //<b>xxx[<img>xx]x</b>
         *
         * </script>
         * ```
         */
        setStart:function (node, offset) {
            return setEndPoint(true, node, offset, this);
        },

        /**
         * 设置Range的结束容器和偏移量
         * @method  setEnd
         * @param { Node } node 作为当前选区结束边界容器的节点对象
         * @param { int } offset 结束边界的偏移量
         * @see UE.dom.Range:setStart(Node,int)
         * @return { UE.dom.Range } 当前range对象
         */
        setEnd:function (node, offset) {
            return setEndPoint(false, node, offset, this);
        },

        /**
         * 将Range开始位置设置到node节点之后
         * @method  setStartAfter
         * @remind 该操作将会把给定节点的父节点作为range的开始容器， 且偏移量是该节点在其父节点中的位置索引+1
         * @param { Node } node 选区的开始边界将紧接着该节点之后
         * @return { UE.dom.Range } 当前range对象
         * @example
         * ```html
         * <!-- 选区示例 -->
         * <b>xx<i>xxx</i><span>xx[x</span>xxx]</b>
         *
         * <script>
         *
         *     //执行操作
         *     range.setStartAfter( document.getElementsByTagName("i")[0] );
         *
         *     //结果选区
         *     //<b>xx<i>xxx</i>[<span>xxx</span>xxx]</b>
         *
         * </script>
         * ```
         */
        setStartAfter:function (node) {
            return this.setStart(node.parentNode, domUtils.getNodeIndex(node) + 1);
        },

        /**
         * 将Range开始位置设置到node节点之前
         * @method  setStartBefore
         * @remind 该操作将会把给定节点的父节点作为range的开始容器， 且偏移量是该节点在其父节点中的位置索引
         * @param { Node } node 新的选区开始位置在该节点之前
         * @see UE.dom.Range:setStartAfter(Node)
         * @return { UE.dom.Range } 当前range对象
         */
        setStartBefore:function (node) {
            return this.setStart(node.parentNode, domUtils.getNodeIndex(node));
        },

        /**
         * 将Range结束位置设置到node节点之后
         * @method  setEndAfter
         * @remind 该操作将会把给定节点的父节点作为range的结束容器， 且偏移量是该节点在其父节点中的位置索引+1
         * @param { Node } node 目标节点
         * @see UE.dom.Range:setStartAfter(Node)
         * @return { UE.dom.Range } 当前range对象
         * @example
         * ```html
         * <!-- 选区示例 -->
         * <b>[xx<i>xxx</i><span>xx]x</span>xxx</b>
         *
         * <script>
         *
         *     //执行操作
         *     range.setStartAfter( document.getElementsByTagName("span")[0] );
         *
         *     //结果选区
         *     //<b>[xx<i>xxx</i><span>xxx</span>]xxx</b>
         *
         * </script>
         * ```
         */
        setEndAfter:function (node) {
            return this.setEnd(node.parentNode, domUtils.getNodeIndex(node) + 1);
        },

        /**
         * 将Range结束位置设置到node节点之前
         * @method  setEndBefore
         * @remind 该操作将会把给定节点的父节点作为range的结束容器， 且偏移量是该节点在其父节点中的位置索引
         * @param { Node } node 目标节点
         * @see UE.dom.Range:setEndAfter(Node)
         * @return { UE.dom.Range } 当前range对象
         */
        setEndBefore:function (node) {
            return this.setEnd(node.parentNode, domUtils.getNodeIndex(node));
        },

        /**
         * 设置Range的开始位置到node节点内的第一个子节点之前
         * @method  setStartAtFirst
         * @remind 选区的开始容器将变成给定的节点， 且偏移量为0
         * @remind 如果给定的节点是元素节点， 则该节点必须是允许包含子节点的元素。
         * @param { Node } node 目标节点
         * @see UE.dom.Range:setStartBefore(Node)
         * @return { UE.dom.Range } 当前range对象
         * @example
         * ```html
         * <!-- 选区示例 -->
         * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
         *
         * <script>
         *
         *     //执行操作
         *     range.setStartAtFirst( document.getElementsByTagName("i")[0] );
         *
         *     //结果选区
         *     //<b>xx<i>[xxx</i><span>xx]x</span>xxx</b>
         *
         * </script>
         * ```
         */
        setStartAtFirst:function (node) {
            return this.setStart(node, 0);
        },

        /**
         * 设置Range的开始位置到node节点内的最后一个节点之后
         * @method setStartAtLast
         * @remind 选区的开始容器将变成给定的节点， 且偏移量为该节点的子节点数
         * @remind 如果给定的节点是元素节点， 则该节点必须是允许包含子节点的元素。
         * @param { Node } node 目标节点
         * @see UE.dom.Range:setStartAtFirst(Node)
         * @return { UE.dom.Range } 当前range对象
         */
        setStartAtLast:function (node) {
            return this.setStart(node, node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length);
        },

        /**
         * 设置Range的结束位置到node节点内的第一个节点之前
         * @method  setEndAtFirst
         * @param { Node } node 目标节点
         * @remind 选区的结束容器将变成给定的节点， 且偏移量为0
         * @remind node必须是一个元素节点， 且必须是允许包含子节点的元素。
         * @see UE.dom.Range:setStartAtFirst(Node)
         * @return { UE.dom.Range } 当前range对象
         */
        setEndAtFirst:function (node) {
            return this.setEnd(node, 0);
        },

        /**
         * 设置Range的结束位置到node节点内的最后一个节点之后
         * @method  setEndAtLast
         * @param { Node } node 目标节点
         * @remind 选区的结束容器将变成给定的节点， 且偏移量为该节点的子节点数量
         * @remind node必须是一个元素节点， 且必须是允许包含子节点的元素。
         * @see UE.dom.Range:setStartAtFirst(Node)
         * @return { UE.dom.Range } 当前range对象
         */
        setEndAtLast:function (node) {
            return this.setEnd(node, node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length);
        },

        /**
         * 选中给定节点
         * @method  selectNode
         * @remind 此时， 选区的开始容器和结束容器都是该节点的父节点， 其startOffset是该节点在父节点中的位置索引，
         *          而endOffset为startOffset+1
         * @param { Node } node 需要选中的节点
         * @return { UE.dom.Range } 当前range对象，此时的range仅包含当前给定的节点对象
         * @example
         * ```html
         * <!-- 选区示例 -->
         * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
         *
         * <script>
         *
         *     //执行操作
         *     range.selectNode( document.getElementsByTagName("i")[0] );
         *
         *     //结果选区
         *     //<b>xx[<i>xxx</i>]<span>xxx</span>xxx</b>
         *
         * </script>
         * ```
         */
        selectNode:function (node) {
            return this.setStartBefore(node).setEndAfter(node);
        },

        /**
         * 选中给定节点内部的所有节点
         * @method  selectNodeContents
         * @remind 此时， 选区的开始容器和结束容器都是该节点， 其startOffset为0，
         *          而endOffset是该节点的子节点数。
         * @param { Node } node 目标节点， 当前range将包含该节点内的所有节点
         * @return { UE.dom.Range } 当前range对象， 此时range仅包含给定节点的所有子节点
         * @example
         * ```html
         * <!-- 选区示例 -->
         * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
         *
         * <script>
         *
         *     //执行操作
         *     range.selectNode( document.getElementsByTagName("b")[0] );
         *
         *     //结果选区
         *     //<b>[xx<i>xxx</i><span>xxx</span>xxx]</b>
         *
         * </script>
         * ```
         */
        selectNodeContents:function (node) {
            return this.setStart(node, 0).setEndAtLast(node);
        },

        /**
         * clone当前Range对象
         * @method  cloneRange
         * @remind 返回的range是一个全新的range对象， 其内部所有属性与当前被clone的range相同。
         * @return { UE.dom.Range } 当前range对象的一个副本
         */
        cloneRange:function () {
            var me = this;
            return new Range(me.document).setStart(me.startContainer, me.startOffset).setEnd(me.endContainer, me.endOffset);

        },

        /**
         * 向当前选区的结束处闭合选区
         * @method  collapse
         * @return { UE.dom.Range } 当前range对象
         * @example
         * ```html
         * <!-- 选区示例 -->
         * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
         *
         * <script>
         *
         *     //执行操作
         *     range.collapse();
         *
         *     //结果选区
         *     //“|”表示选区已闭合
         *     //<b>xx<i>xxx</i><span>xx|x</span>xxx</b>
         *
         * </script>
         * ```
         */

        /**
         * 闭合当前选区，根据给定的toStart参数项决定是向当前选区开始处闭合还是向结束处闭合，
         * 如果toStart的值为true，则向开始位置闭合， 反之，向结束位置闭合。
         * @method  collapse
         * @param { Boolean } toStart 是否向选区开始处闭合
         * @return { UE.dom.Range } 当前range对象，此时range对象处于闭合状态
         * @see UE.dom.Range:collapse()
         * @example
         * ```html
         * <!-- 选区示例 -->
         * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
         *
         * <script>
         *
         *     //执行操作
         *     range.collapse( true );
         *
         *     //结果选区
         *     //“|”表示选区已闭合
         *     //<b>xx<i>xxx</i><span>|xxx</span>xxx</b>
         *
         * </script>
         * ```
         */
        collapse:function (toStart) {
            var me = this;
            if (toStart) {
                me.endContainer = me.startContainer;
                me.endOffset = me.startOffset;
            } else {
                me.startContainer = me.endContainer;
                me.startOffset = me.endOffset;
            }
            me.collapsed = true;
            return me;
        },

        /**
         * 调整range的开始位置和结束位置，使其"收缩"到最小的位置
         * @method  shrinkBoundary
         * @return { UE.dom.Range } 当前range对象
         * @example
         * ```html
         * <span>xx<b>xx[</b>xxxxx]</span> => <span>xx<b>xx</b>[xxxxx]</span>
         * ```
         *
         * @example
         * ```html
         * <!-- 选区示例 -->
         * <b>x[xx</b><i>]xxx</i>
         *
         * <script>
         *
         *     //执行收缩
         *     range.shrinkBoundary();
         *
         *     //结果选区
         *     //<b>x[xx]</b><i>xxx</i>
         * </script>
         * ```
         *
         * @example
         * ```html
         * [<b><i>xxxx</i>xxxxxxx</b>] => <b><i>[xxxx</i>xxxxxxx]</b>
         * ```
         */

        /**
         * 调整range的开始位置和结束位置，使其"收缩"到最小的位置，
         * 如果ignoreEnd的值为true，则忽略对结束位置的调整
         * @method  shrinkBoundary
         * @param { Boolean } ignoreEnd 是否忽略对结束位置的调整
         * @return { UE.dom.Range } 当前range对象
         * @see UE.dom.domUtils.Range:shrinkBoundary()
         */
        shrinkBoundary:function (ignoreEnd) {
            var me = this, child,
                collapsed = me.collapsed;
            function check(node){
                return node.nodeType == 1 && !domUtils.isBookmarkNode(node) && !dtd.$empty[node.tagName] && !dtd.$nonChild[node.tagName]
            }
            while (me.startContainer.nodeType == 1 //是element
                && (child = me.startContainer.childNodes[me.startOffset]) //子节点也是element
                && check(child)) {
                me.setStart(child, 0);
            }
            if (collapsed) {
                return me.collapse(true);
            }
            if (!ignoreEnd) {
                while (me.endContainer.nodeType == 1//是element
                    && me.endOffset > 0 //如果是空元素就退出 endOffset=0那么endOffst-1为负值，childNodes[endOffset]报错
                    && (child = me.endContainer.childNodes[me.endOffset - 1]) //子节点也是element
                    && check(child)) {
                    me.setEnd(child, child.childNodes.length);
                }
            }
            return me;
        },

        /**
         * 获取离当前选区内包含的所有节点最近的公共祖先节点，
         * @method  getCommonAncestor
         * @remind 返回的公共祖先节点一定不是range自身的容器节点， 但有可能是一个文本节点
         * @return { Node } 当前range对象内所有节点的公共祖先节点
         * @example
         * ```html
         * //选区示例
         * <span>xxx<b>x[x<em>xx]x</em>xxx</b>xx</span>
         * <script>
         *
         *     var node = range.getCommonAncestor();
         *
         *     //公共祖先节点是： b节点
         *     //输出： B
         *     console.log(node.tagName);
         *
         * </script>
         * ```
         */

        /**
         * 获取当前选区所包含的所有节点的公共祖先节点， 可以根据给定的参数 includeSelf 决定获取到
         * 的公共祖先节点是否可以是当前选区的startContainer或endContainer节点， 如果 includeSelf
         * 的取值为true， 则返回的节点可以是自身的容器节点， 否则， 则不能是容器节点
         * @method  getCommonAncestor
         * @param { Boolean } includeSelf 是否允许获取到的公共祖先节点是当前range对象的容器节点
         * @return { Node } 当前range对象内所有节点的公共祖先节点
         * @see UE.dom.Range:getCommonAncestor()
         * @example
         * ```html
         * <body>
         *
         *     <!-- 选区示例 -->
         *     <b>xxx<i>xxxx<span>xx[x</span>xx]x</i>xxxxxxx</b>
         *
         *     <script>
         *
         *         var node = range.getCommonAncestor( false );
         *
         *         //这里的公共祖先节点是B而不是I， 是因为参数限制了获取到的节点不能是容器节点
         *         //output: B
         *         console.log( node.tagName );
         *
         *     </script>
         *
         * </body>
         * ```
         */

        /**
         * 获取当前选区所包含的所有节点的公共祖先节点， 可以根据给定的参数 includeSelf 决定获取到
         * 的公共祖先节点是否可以是当前选区的startContainer或endContainer节点， 如果 includeSelf
         * 的取值为true， 则返回的节点可以是自身的容器节点， 否则， 则不能是容器节点； 同时可以根据
         * ignoreTextNode 参数的取值决定是否忽略类型为文本节点的祖先节点。
         * @method  getCommonAncestor
         * @param { Boolean } includeSelf 是否允许获取到的公共祖先节点是当前range对象的容器节点
         * @param { Boolean } ignoreTextNode 获取祖先节点的过程中是否忽略类型为文本节点的祖先节点
         * @return { Node } 当前range对象内所有节点的公共祖先节点
         * @see UE.dom.Range:getCommonAncestor()
         * @see UE.dom.Range:getCommonAncestor(Boolean)
         * @example
         * ```html
         * <body>
         *
         *     <!-- 选区示例 -->
         *     <b>xxx<i>xxxx<span>x[x]x</span>xxx</i>xxxxxxx</b>
         *
         *     <script>
         *
         *         var node = range.getCommonAncestor( true, false );
         *
         *         //output: SPAN
         *         console.log( node.tagName );
         *
         *     </script>
         *
         * </body>
         * ```
         */
        getCommonAncestor:function (includeSelf, ignoreTextNode) {
            var me = this,
                start = me.startContainer,
                end = me.endContainer;
            if (start === end) {
                if (includeSelf && selectOneNode(this)) {
                    start = start.childNodes[me.startOffset];
                    if(start.nodeType == 1)
                        return start;
                }
                //只有在上来就相等的情况下才会出现是文本的情况
                return ignoreTextNode && start.nodeType == 3 ? start.parentNode : start;
            }
            return domUtils.getCommonAncestor(start, end);
        },

        /**
         * 调整当前Range的开始和结束边界容器，如果是容器节点是文本节点,就调整到包含该文本节点的父节点上
         * @method trimBoundary
         * @remind 该操作有可能会引起文本节点被切开
         * @return { UE.dom.Range } 当前range对象
         * @example
         * ```html
         *
         * //选区示例
         * <b>xxx<i>[xxxxx]</i>xxx</b>
         *
         * <script>
         *     //未调整前， 选区的开始容器和结束都是文本节点
         *     //执行调整
         *     range.trimBoundary();
         *
         *     //调整之后， 容器节点变成了i节点
         *     //<b>xxx[<i>xxxxx</i>]xxx</b>
         * </script>
         * ```
         */

        /**
         * 调整当前Range的开始和结束边界容器，如果是容器节点是文本节点,就调整到包含该文本节点的父节点上，
         * 可以根据 ignoreEnd 参数的值决定是否调整对结束边界的调整
         * @method trimBoundary
         * @param { Boolean } ignoreEnd 是否忽略对结束边界的调整
         * @return { UE.dom.Range } 当前range对象
         * @example
         * ```html
         *
         * //选区示例
         * <b>xxx<i>[xxxxx]</i>xxx</b>
         *
         * <script>
         *     //未调整前， 选区的开始容器和结束都是文本节点
         *     //执行调整
         *     range.trimBoundary( true );
         *
         *     //调整之后， 开始容器节点变成了i节点
         *     //但是， 结束容器没有发生变化
         *     //<b>xxx[<i>xxxxx]</i>xxx</b>
         * </script>
         * ```
         */
        trimBoundary:function (ignoreEnd) {
            this.txtToElmBoundary();
            var start = this.startContainer,
                offset = this.startOffset,
                collapsed = this.collapsed,
                end = this.endContainer;
            if (start.nodeType == 3) {
                if (offset == 0) {
                    this.setStartBefore(start);
                } else {
                    if (offset >= start.nodeValue.length) {
                        this.setStartAfter(start);
                    } else {
                        var textNode = domUtils.split(start, offset);
                        //跟新结束边界
                        if (start === end) {
                            this.setEnd(textNode, this.endOffset - offset);
                        } else if (start.parentNode === end) {
                            this.endOffset += 1;
                        }
                        this.setStartBefore(textNode);
                    }
                }
                if (collapsed) {
                    return this.collapse(true);
                }
            }
            if (!ignoreEnd) {
                offset = this.endOffset;
                end = this.endContainer;
                if (end.nodeType == 3) {
                    if (offset == 0) {
                        this.setEndBefore(end);
                    } else {
                        offset < end.nodeValue.length && domUtils.split(end, offset);
                        this.setEndAfter(end);
                    }
                }
            }
            return this;
        },

        /**
         * 如果选区在文本的边界上，就扩展选区到文本的父节点上, 如果当前选区是闭合的， 则什么也不做
         * @method txtToElmBoundary
         * @remind 该操作不会修改dom节点
         * @return { UE.dom.Range } 当前range对象
         */

        /**
         * 如果选区在文本的边界上，就扩展选区到文本的父节点上, 如果当前选区是闭合的， 则根据参数项
         * ignoreCollapsed 的值决定是否执行该调整
         * @method txtToElmBoundary
         * @param { Boolean } ignoreCollapsed 是否忽略选区的闭合状态， 如果该参数取值为true， 则
         *                      不论选区是否闭合， 都会执行该操作， 反之， 则不会对闭合的选区执行该操作
         * @return { UE.dom.Range } 当前range对象
         */
        txtToElmBoundary:function (ignoreCollapsed) {
            function adjust(r, c) {
                var container = r[c + 'Container'],
                    offset = r[c + 'Offset'];
                if (container.nodeType == 3) {
                    if (!offset) {
                        r['set' + c.replace(/(\w)/, function (a) {
                            return a.toUpperCase();
                        }) + 'Before'](container);
                    } else if (offset >= container.nodeValue.length) {
                        r['set' + c.replace(/(\w)/, function (a) {
                            return a.toUpperCase();
                        }) + 'After' ](container);
                    }
                }
            }

            if (ignoreCollapsed || !this.collapsed) {
                adjust(this, 'start');
                adjust(this, 'end');
            }
            return this;
        },

        /**
         * 在当前选区的开始位置前插入节点，新插入的节点会被该range包含
         * @method  insertNode
         * @param { Node } node 需要插入的节点
         * @remind 插入的节点可以是一个DocumentFragment依次插入多个节点
         * @return { UE.dom.Range } 当前range对象
         */
        insertNode:function (node) {
            var first = node, length = 1;
            if (node.nodeType == 11) {
                first = node.firstChild;
                length = node.childNodes.length;
            }
            this.trimBoundary(true);
            var start = this.startContainer,
                offset = this.startOffset;
            var nextNode = start.childNodes[ offset ];
            if (nextNode) {
                start.insertBefore(node, nextNode);
            } else {
                start.appendChild(node);
            }
            if (first.parentNode === this.endContainer) {
                this.endOffset = this.endOffset + length;
            }
            return this.setStartBefore(first);
        },

        /**
         * 闭合选区到当前选区的开始位置， 并且定位光标到闭合后的位置
         * @method  setCursor
         * @return { UE.dom.Range } 当前range对象
         * @see UE.dom.Range:collapse()
         */

        /**
         * 闭合选区，可以根据参数toEnd的值控制选区是向前闭合还是向后闭合， 并且定位光标到闭合后的位置。
         * @method  setCursor
         * @param { Boolean } toEnd 是否向后闭合， 如果为true， 则闭合选区时， 将向结束容器方向闭合，
         *                      反之，则向开始容器方向闭合
         * @return { UE.dom.Range } 当前range对象
         * @see UE.dom.Range:collapse(Boolean)
         */
        setCursor:function (toEnd, noFillData) {
            return this.collapse(!toEnd).select(noFillData);
        },

        /**
         * 创建当前range的一个书签，记录下当前range的位置，方便当dom树改变时，还能找回原来的选区位置
         * @method createBookmark
         * @param { Boolean } serialize 控制返回的标记位置是对当前位置的引用还是ID，如果该值为true，则
         *                              返回标记位置的ID， 反之则返回标记位置节点的引用
         * @return { Object } 返回一个书签记录键值对， 其包含的key有： start => 开始标记的ID或者引用，
         *                          end => 结束标记的ID或引用， id => 当前标记的类型， 如果为true，则表示
         *                          返回的记录的类型为ID， 反之则为引用
         */
        createBookmark:function (serialize, same) {
            var endNode,
                startNode = this.document.createElement('span');
            startNode.style.cssText = 'display:none;line-height:0px;';
            startNode.appendChild(this.document.createTextNode('\u200D'));
            startNode.id = '_baidu_bookmark_start_' + (same ? '' : guid++);

            if (!this.collapsed) {
                endNode = startNode.cloneNode(true);
                endNode.id = '_baidu_bookmark_end_' + (same ? '' : guid++);
            }
            this.insertNode(startNode);
            if (endNode) {
                this.collapse().insertNode(endNode).setEndBefore(endNode);
            }
            this.setStartAfter(startNode);
            return {
                start:serialize ? startNode.id : startNode,
                end:endNode ? serialize ? endNode.id : endNode : null,
                id:serialize
            }
        },

        /**
         *  调整当前range的边界到书签位置，并删除该书签对象所标记的位置内的节点
         *  @method  moveToBookmark
         *  @param { BookMark } bookmark createBookmark所创建的标签对象
         *  @return { UE.dom.Range } 当前range对象
         *  @see UE.dom.Range:createBookmark(Boolean)
         */
        moveToBookmark:function (bookmark) {
            var start = bookmark.id ? this.document.getElementById(bookmark.start) : bookmark.start,
                end = bookmark.end && bookmark.id ? this.document.getElementById(bookmark.end) : bookmark.end;
            this.setStartBefore(start);
            domUtils.remove(start);
            if (end) {
                this.setEndBefore(end);
                domUtils.remove(end);
            } else {
                this.collapse(true);
            }
            return this;
        },

        /**
         * 调整range的边界，使其"放大"到最近的父节点
         * @method  enlarge
         * @remind 会引起选区的变化
         * @return { UE.dom.Range } 当前range对象
         */

        /**
         * 调整range的边界，使其"放大"到最近的父节点，根据参数 toBlock 的取值， 可以
         * 要求扩大之后的父节点是block节点
         * @method  enlarge
         * @param { Boolean } toBlock 是否要求扩大之后的父节点必须是block节点
         * @return { UE.dom.Range } 当前range对象
         */
        enlarge:function (toBlock, stopFn) {
            var isBody = domUtils.isBody,
                pre, node, tmp = this.document.createTextNode('');
            if (toBlock) {
                node = this.startContainer;
                if (node.nodeType == 1) {
                    if (node.childNodes[this.startOffset]) {
                        pre = node = node.childNodes[this.startOffset]
                    } else {
                        node.appendChild(tmp);
                        pre = node = tmp;
                    }
                } else {
                    pre = node;
                }
                while (1) {
                    if (domUtils.isBlockElm(node)) {
                        node = pre;
                        while ((pre = node.previousSibling) && !domUtils.isBlockElm(pre)) {
                            node = pre;
                        }
                        this.setStartBefore(node);
                        break;
                    }
                    pre = node;
                    node = node.parentNode;
                }
                node = this.endContainer;
                if (node.nodeType == 1) {
                    if (pre = node.childNodes[this.endOffset]) {
                        node.insertBefore(tmp, pre);
                    } else {
                        node.appendChild(tmp);
                    }
                    pre = node = tmp;
                } else {
                    pre = node;
                }
                while (1) {
                    if (domUtils.isBlockElm(node)) {
                        node = pre;
                        while ((pre = node.nextSibling) && !domUtils.isBlockElm(pre)) {
                            node = pre;
                        }
                        this.setEndAfter(node);
                        break;
                    }
                    pre = node;
                    node = node.parentNode;
                }
                if (tmp.parentNode === this.endContainer) {
                    this.endOffset--;
                }
                domUtils.remove(tmp);
            }

            // 扩展边界到最大
            if (!this.collapsed) {
                while (this.startOffset == 0) {
                    if (stopFn && stopFn(this.startContainer)) {
                        break;
                    }
                    if (isBody(this.startContainer)) {
                        break;
                    }
                    this.setStartBefore(this.startContainer);
                }
                while (this.endOffset == (this.endContainer.nodeType == 1 ? this.endContainer.childNodes.length : this.endContainer.nodeValue.length)) {
                    if (stopFn && stopFn(this.endContainer)) {
                        break;
                    }
                    if (isBody(this.endContainer)) {
                        break;
                    }
                    this.setEndAfter(this.endContainer);
                }
            }
            return this;
        },
        enlargeToBlockElm:function(ignoreEnd){
            while(!domUtils.isBlockElm(this.startContainer)){
                this.setStartBefore(this.startContainer);
            }
            if(!ignoreEnd){
                while(!domUtils.isBlockElm(this.endContainer)){
                    this.setEndAfter(this.endContainer);
                }
            }
            return this;
        },
        /**
         * 调整Range的边界，使其"缩小"到最合适的位置
         * @method adjustmentBoundary
         * @return { UE.dom.Range } 当前range对象
         * @see UE.dom.Range:shrinkBoundary()
         */
        adjustmentBoundary:function () {
            if (!this.collapsed) {
                while (!domUtils.isBody(this.startContainer) &&
                    this.startOffset == this.startContainer[this.startContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length &&
                    this.startContainer[this.startContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length
                    ) {

                    this.setStartAfter(this.startContainer);
                }
                while (!domUtils.isBody(this.endContainer) && !this.endOffset &&
                    this.endContainer[this.endContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length
                    ) {
                    this.setEndBefore(this.endContainer);
                }
            }
            return this;
        },

        /**
         * 给range选区中的内容添加给定的inline标签
         * @method applyInlineStyle
         * @param { String } tagName 需要添加的标签名
         * @example
         * ```html
         * <p>xxxx[xxxx]x</p>  ==>  range.applyInlineStyle("strong")  ==>  <p>xxxx[<strong>xxxx</strong>]x</p>
         * ```
         */

        /**
         * 给range选区中的内容添加给定的inline标签， 并且为标签附加上一些初始化属性。
         * @method applyInlineStyle
         * @param { String } tagName 需要添加的标签名
         * @param { Object } attrs 跟随新添加的标签的属性
         * @return { UE.dom.Range } 当前选区
         * @example
         * ```html
         * <p>xxxx[xxxx]x</p>
         *
         * ==>
         *
         * <!-- 执行操作 -->
         * range.applyInlineStyle("strong",{"style":"font-size:12px"})
         *
         * ==>
         *
         * <p>xxxx[<strong style="font-size:12px">xxxx</strong>]x</p>
         * ```
         */
        applyInlineStyle:function (tagName, attrs, list) {
            if (this.collapsed)return this;
            this.trimBoundary().enlarge(false,
                function (node) {
                    return node.nodeType == 1 && domUtils.isBlockElm(node)
                }).adjustmentBoundary();
            var bookmark = this.createBookmark(),
                end = bookmark.end,
                filterFn = function (node) {
                    return node.nodeType == 1 ? node.tagName.toLowerCase() != 'br' : !domUtils.isWhitespace(node);
                },
                current = domUtils.getNextDomNode(bookmark.start, false, filterFn),
                node,
                pre,
                range = this.cloneRange();
            while (current && (domUtils.getPosition(current, end) & domUtils.POSITION_PRECEDING)) {
                if (current.nodeType == 3 || dtd[tagName][current.tagName]) {
                    range.setStartBefore(current);
                    node = current;
                    while (node && (node.nodeType == 3 || dtd[tagName][node.tagName]) && node !== end) {
                        pre = node;
                        node = domUtils.getNextDomNode(node, node.nodeType == 1, null, function (parent) {
                            return dtd[tagName][parent.tagName];
                        });
                    }
                    var frag = range.setEndAfter(pre).extractContents(), elm;
                    if (list && list.length > 0) {
                        var level, top;
                        top = level = list[0].cloneNode(false);
                        for (var i = 1, ci; ci = list[i++];) {
                            level.appendChild(ci.cloneNode(false));
                            level = level.firstChild;
                        }
                        elm = level;
                    } else {
                        elm = range.document.createElement(tagName);
                    }
                    if (attrs) {
                        domUtils.setAttributes(elm, attrs);
                    }
                    elm.appendChild(frag);
                    range.insertNode(list ? top : elm);
                    //处理下滑线在a上的情况
                    var aNode;
                    if (tagName == 'span' && attrs.style && /text\-decoration/.test(attrs.style) && (aNode = domUtils.findParentByTagName(elm, 'a', true))) {
                        domUtils.setAttributes(aNode, attrs);
                        domUtils.remove(elm, true);
                        elm = aNode;
                    } else {
                        domUtils.mergeSibling(elm);
                        domUtils.clearEmptySibling(elm);
                    }
                    //去除子节点相同的
                    domUtils.mergeChild(elm, attrs);
                    current = domUtils.getNextDomNode(elm, false, filterFn);
                    domUtils.mergeToParent(elm);
                    if (node === end) {
                        break;
                    }
                } else {
                    current = domUtils.getNextDomNode(current, true, filterFn);
                }
            }
            return this.moveToBookmark(bookmark);
        },

        /**
         * 移除当前选区内指定的inline标签，但保留其中的内容
         * @method removeInlineStyle
         * @param { String } tagName 需要移除的标签名
         * @return { UE.dom.Range } 当前的range对象
         * @example
         * ```html
         * xx[x<span>xxx<em>yyy</em>zz]z</span>  => range.removeInlineStyle(["em"])  => xx[x<span>xxxyyyzz]z</span>
         * ```
         */

        /**
         * 移除当前选区内指定的一组inline标签，但保留其中的内容
         * @method removeInlineStyle
         * @param { Array } tagNameArr 需要移除的标签名的数组
         * @return { UE.dom.Range } 当前的range对象
         * @see UE.dom.Range:removeInlineStyle(String)
         */
        removeInlineStyle:function (tagNames) {
            if (this.collapsed)return this;
            tagNames = utils.isArray(tagNames) ? tagNames : [tagNames];
            this.shrinkBoundary().adjustmentBoundary();
            var start = this.startContainer, end = this.endContainer;
            while (1) {
                if (start.nodeType == 1) {
                    if (utils.indexOf(tagNames, start.tagName.toLowerCase()) > -1) {
                        break;
                    }
                    if (start.tagName.toLowerCase() == 'body') {
                        start = null;
                        break;
                    }
                }
                start = start.parentNode;
            }
            while (1) {
                if (end.nodeType == 1) {
                    if (utils.indexOf(tagNames, end.tagName.toLowerCase()) > -1) {
                        break;
                    }
                    if (end.tagName.toLowerCase() == 'body') {
                        end = null;
                        break;
                    }
                }
                end = end.parentNode;
            }
            var bookmark = this.createBookmark(),
                frag,
                tmpRange;
            if (start) {
                tmpRange = this.cloneRange().setEndBefore(bookmark.start).setStartBefore(start);
                frag = tmpRange.extractContents();
                tmpRange.insertNode(frag);
                domUtils.clearEmptySibling(start, true);
                start.parentNode.insertBefore(bookmark.start, start);
            }
            if (end) {
                tmpRange = this.cloneRange().setStartAfter(bookmark.end).setEndAfter(end);
                frag = tmpRange.extractContents();
                tmpRange.insertNode(frag);
                domUtils.clearEmptySibling(end, false, true);
                end.parentNode.insertBefore(bookmark.end, end.nextSibling);
            }
            var current = domUtils.getNextDomNode(bookmark.start, false, function (node) {
                return node.nodeType == 1;
            }), next;
            while (current && current !== bookmark.end) {
                next = domUtils.getNextDomNode(current, true, function (node) {
                    return node.nodeType == 1;
                });
                if (utils.indexOf(tagNames, current.tagName.toLowerCase()) > -1) {
                    domUtils.remove(current, true);
                }
                current = next;
            }
            return this.moveToBookmark(bookmark);
        },

        /**
         * 获取当前选中的自闭合的节点
         * @method  getClosedNode
         * @return { Node | NULL } 如果当前选中的是自闭合节点， 则返回该节点， 否则返回NULL
         */
        getClosedNode:function () {
            var node;
            if (!this.collapsed) {
                var range = this.cloneRange().adjustmentBoundary().shrinkBoundary();
                if (selectOneNode(range)) {
                    var child = range.startContainer.childNodes[range.startOffset];
                    if (child && child.nodeType == 1 && (dtd.$empty[child.tagName] || dtd.$nonChild[child.tagName])) {
                        node = child;
                    }
                }
            }
            return node;
        },

        /**
         * 在页面上高亮range所表示的选区
         * @method select
         * @return { UE.dom.Range } 返回当前Range对象
         */
            //这里不区分ie9以上，trace:3824
        select:browser.ie ? function (noFillData, textRange) {
            var nativeRange;
            if (!this.collapsed)
                this.shrinkBoundary();
            var node = this.getClosedNode();
            if (node && !textRange) {
                try {
                    nativeRange = this.document.body.createControlRange();
                    nativeRange.addElement(node);
                    nativeRange.select();
                } catch (e) {}
                return this;
            }
            var bookmark = this.createBookmark(),
                start = bookmark.start,
                end;
            nativeRange = this.document.body.createTextRange();
            nativeRange.moveToElementText(start);
            nativeRange.moveStart('character', 1);
            if (!this.collapsed) {
                var nativeRangeEnd = this.document.body.createTextRange();
                end = bookmark.end;
                nativeRangeEnd.moveToElementText(end);
                nativeRange.setEndPoint('EndToEnd', nativeRangeEnd);
            } else {
                if (!noFillData && this.startContainer.nodeType != 3) {
                    //使用<span>|x<span>固定住光标
                    var tmpText = this.document.createTextNode(fillChar),
                        tmp = this.document.createElement('span');
                    tmp.appendChild(this.document.createTextNode(fillChar));
                    start.parentNode.insertBefore(tmp, start);
                    start.parentNode.insertBefore(tmpText, start);
                    //当点b,i,u时，不能清除i上边的b
                    removeFillData(this.document, tmpText);
                    fillData = tmpText;
                    mergeSibling(tmp, 'previousSibling');
                    mergeSibling(start, 'nextSibling');
                    nativeRange.moveStart('character', -1);
                    nativeRange.collapse(true);
                }
            }
            this.moveToBookmark(bookmark);
            tmp && domUtils.remove(tmp);
            //IE在隐藏状态下不支持range操作，catch一下
            try {
                nativeRange.select();
            } catch (e) {
            }
            return this;
        } : function (notInsertFillData) {
            function checkOffset(rng){

                function check(node,offset,dir){
                    if(node.nodeType == 3 && node.nodeValue.length < offset){
                        rng[dir + 'Offset'] = node.nodeValue.length
                    }
                }
                check(rng.startContainer,rng.startOffset,'start');
                check(rng.endContainer,rng.endOffset,'end');
            }
            var win = domUtils.getWindow(this.document),
                sel = win.getSelection(),
                txtNode;
            //FF下关闭自动长高时滚动条在关闭dialog时会跳
            //ff下如果不body.focus将不能定位闭合光标到编辑器内
            browser.gecko ? this.document.body.focus() : win.focus();
            if (sel) {
                sel.removeAllRanges();
                // trace:870 chrome/safari后边是br对于闭合得range不能定位 所以去掉了判断
                // this.startContainer.nodeType != 3 &&! ((child = this.startContainer.childNodes[this.startOffset]) && child.nodeType == 1 && child.tagName == 'BR'
                if (this.collapsed && !notInsertFillData) {
//                    //opear如果没有节点接着，原生的不能够定位,不能在body的第一级插入空白节点
//                    if (notInsertFillData && browser.opera && !domUtils.isBody(this.startContainer) && this.startContainer.nodeType == 1) {
//                        var tmp = this.document.createTextNode('');
//                        this.insertNode(tmp).setStart(tmp, 0).collapse(true);
//                    }
//
                    //处理光标落在文本节点的情况
                    //处理以下的情况
                    //<b>|xxxx</b>
                    //<b>xxxx</b>|xxxx
                    //xxxx<b>|</b>
                    var start = this.startContainer,child = start;
                    if(start.nodeType == 1){
                        child = start.childNodes[this.startOffset];

                    }
                    if( !(start.nodeType == 3 && this.startOffset)  &&
                        (child ?
                            (!child.previousSibling || child.previousSibling.nodeType != 3)
                            :
                            (!start.lastChild || start.lastChild.nodeType != 3)
                        )
                    ){
                        txtNode = this.document.createTextNode(fillChar);
                        //跟着前边走
                        this.insertNode(txtNode);
                        removeFillData(this.document, txtNode);
                        mergeSibling(txtNode, 'previousSibling');
                        mergeSibling(txtNode, 'nextSibling');
                        fillData = txtNode;
                        this.setStart(txtNode, browser.webkit ? 1 : 0).collapse(true);
                    }
                }
                var nativeRange = this.document.createRange();
                if(this.collapsed && browser.opera && this.startContainer.nodeType == 1){
                    var child = this.startContainer.childNodes[this.startOffset];
                    if(!child){
                        //往前靠拢
                        child = this.startContainer.lastChild;
                        if( child && domUtils.isBr(child)){
                            this.setStartBefore(child).collapse(true);
                        }
                    }else{
                        //向后靠拢
                        while(child && domUtils.isBlockElm(child)){
                            if(child.nodeType == 1 && child.childNodes[0]){
                                child = child.childNodes[0]
                            }else{
                                break;
                            }
                        }
                        child && this.setStartBefore(child).collapse(true)
                    }

                }
                //是createAddress最后一位算的不准，现在这里进行微调
                checkOffset(this);
                nativeRange.setStart(this.startContainer, this.startOffset);
                nativeRange.setEnd(this.endContainer, this.endOffset);
                sel.addRange(nativeRange);
            }
            return this;
        },

        /**
         * 滚动到当前range开始的位置
         * @method scrollToView
         * @param { Window } win 当前range对象所属的window对象
         * @return { UE.dom.Range } 当前Range对象
         */

        /**
         * 滚动到距离当前range开始位置 offset 的位置处
         * @method scrollToView
         * @param { Window } win 当前range对象所属的window对象
         * @param { Number } offset 距离range开始位置处的偏移量， 如果为正数， 则向下偏移， 反之， 则向上偏移
         * @return { UE.dom.Range } 当前Range对象
         */
        scrollToView:function (win, offset) {
            win = win ? window : domUtils.getWindow(this.document);
            var me = this,
                span = me.document.createElement('span');
            //trace:717
            span.innerHTML = '&nbsp;';
            me.cloneRange().insertNode(span);
            domUtils.scrollToView(span, win, offset);
            domUtils.remove(span);
            return me;
        },

        /**
         * 判断当前选区内容是否占位符
         * @private
         * @method inFillChar
         * @return { Boolean } 如果是占位符返回true，否则返回false
         */
        inFillChar : function(){
            var start = this.startContainer;
            if(this.collapsed && start.nodeType == 3
                && start.nodeValue.replace(new RegExp('^' + domUtils.fillChar),'').length + 1 == start.nodeValue.length
                ){
                return true;
            }
            return false;
        },

        /**
         * 保存
         * @method createAddress
         * @private
         * @return { Boolean } 返回开始和结束的位置
         * @example
         * ```html
         * <body>
         *     <p>
         *         aaaa
         *         <em>
         *             <!-- 选区开始 -->
         *             bbbb
         *             <!-- 选区结束 -->
         *         </em>
         *     </p>
         *
         *     <script>
         *         //output: {startAddress:[0,1,0,0],endAddress:[0,1,0,4]}
         *         console.log( range.createAddress() );
         *     </script>
         * </body>
         * ```
         */
        createAddress : function(ignoreEnd,ignoreTxt){
            var addr = {},me = this;

            function getAddress(isStart){
                var node = isStart ? me.startContainer : me.endContainer;
                var parents = domUtils.findParents(node,true,function(node){return !domUtils.isBody(node)}),
                    addrs = [];
                for(var i = 0,ci;ci = parents[i++];){
                    addrs.push(domUtils.getNodeIndex(ci,ignoreTxt));
                }
                var firstIndex = 0;

                if(ignoreTxt){
                    if(node.nodeType == 3){
                        var tmpNode = node.previousSibling;
                        while(tmpNode && tmpNode.nodeType == 3){
                            firstIndex += tmpNode.nodeValue.replace(fillCharReg,'').length;
                            tmpNode = tmpNode.previousSibling;
                        }
                        firstIndex +=  (isStart ? me.startOffset : me.endOffset)// - (fillCharReg.test(node.nodeValue) ? 1 : 0 )
                    }else{
                        node =  node.childNodes[ isStart ? me.startOffset : me.endOffset];
                        if(node){
                            firstIndex = domUtils.getNodeIndex(node,ignoreTxt);
                        }else{
                            node = isStart ? me.startContainer : me.endContainer;
                            var first = node.firstChild;
                            while(first){
                                if(domUtils.isFillChar(first)){
                                    first = first.nextSibling;
                                    continue;
                                }
                                firstIndex++;
                                if(first.nodeType == 3){
                                    while( first && first.nodeType == 3){
                                        first = first.nextSibling;
                                    }
                                }else{
                                    first = first.nextSibling;
                                }
                            }
                        }
                    }

                }else{
                    firstIndex = isStart ? domUtils.isFillChar(node) ? 0 : me.startOffset  : me.endOffset
                }
                if(firstIndex < 0){
                    firstIndex = 0;
                }
                addrs.push(firstIndex);
                return addrs;
            }
            addr.startAddress = getAddress(true);
            if(!ignoreEnd){
                addr.endAddress = me.collapsed ? [].concat(addr.startAddress) : getAddress();
            }
            return addr;
        },

        /**
         * 保存
         * @method createAddress
         * @private
         * @return { Boolean } 返回开始和结束的位置
         * @example
         * ```html
         * <body>
         *     <p>
         *         aaaa
         *         <em>
         *             <!-- 选区开始 -->
         *             bbbb
         *             <!-- 选区结束 -->
         *         </em>
         *     </p>
         *
         *     <script>
         *         var range = editor.selection.getRange();
         *         range.moveToAddress({startAddress:[0,1,0,0],endAddress:[0,1,0,4]});
         *         range.select();
         *         //output: 'bbbb'
         *         console.log(editor.selection.getText());
         *     </script>
         * </body>
         * ```
         */
        moveToAddress : function(addr,ignoreEnd){
            var me = this;
            function getNode(address,isStart){
                var tmpNode = me.document.body,
                    parentNode,offset;
                for(var i= 0,ci,l=address.length;i<l;i++){
                    ci = address[i];
                    parentNode = tmpNode;
                    tmpNode = tmpNode.childNodes[ci];
                    if(!tmpNode){
                        offset = ci;
                        break;
                    }
                }
                if(isStart){
                    if(tmpNode){
                        me.setStartBefore(tmpNode)
                    }else{
                        me.setStart(parentNode,offset)
                    }
                }else{
                    if(tmpNode){
                        me.setEndBefore(tmpNode)
                    }else{
                        me.setEnd(parentNode,offset)
                    }
                }
            }
            getNode(addr.startAddress,true);
            !ignoreEnd && addr.endAddress &&  getNode(addr.endAddress);
            return me;
        },

        /**
         * 判断给定的Range对象是否和当前Range对象表示的是同一个选区
         * @method equals
         * @param { UE.dom.Range } 需要判断的Range对象
         * @return { Boolean } 如果给定的Range对象与当前Range对象表示的是同一个选区， 则返回true， 否则返回false
         */
        equals : function(rng){
            for(var p in this){
                if(this.hasOwnProperty(p)){
                    if(this[p] !== rng[p])
                        return false
                }
            }
            return true;

        },

        /**
         * 遍历range内的节点。每当遍历一个节点时， 都会执行参数项 doFn 指定的函数， 该函数的接受当前遍历的节点
         * 作为其参数。
         * @method traversal
         * @param { Function }  doFn 对每个遍历的节点要执行的方法， 该方法接受当前遍历的节点作为其参数
         * @return { UE.dom.Range } 当前range对象
         * @example
         * ```html
         *
         * <body>
         *
         *     <!-- 选区开始 -->
         *     <span></span>
         *     <a></a>
         *     <!-- 选区结束 -->
         * </body>
         *
         * <script>
         *
         *     //output: <span></span><a></a>
         *     console.log( range.cloneContents() );
         *
         *     range.traversal( function ( node ) {
         *
         *         if ( node.nodeType === 1 ) {
         *             node.className = "test";
         *         }
         *
         *     } );
         *
         *     //output: <span class="test"></span><a class="test"></a>
         *     console.log( range.cloneContents() );
         *
         * </script>
         * ```
         */

        /**
         * 遍历range内的节点。
         * 每当遍历一个节点时， 都会执行参数项 doFn 指定的函数， 该函数的接受当前遍历的节点
         * 作为其参数。
         * 可以通过参数项 filterFn 来指定一个过滤器， 只有符合该过滤器过滤规则的节点才会触
         * 发doFn函数的执行
         * @method traversal
         * @param { Function } doFn 对每个遍历的节点要执行的方法， 该方法接受当前遍历的节点作为其参数
         * @param { Function } filterFn 过滤器， 该函数接受当前遍历的节点作为参数， 如果该节点满足过滤
         *                      规则， 请返回true， 该节点会触发doFn， 否则， 请返回false， 则该节点不
         *                      会触发doFn。
         * @return { UE.dom.Range } 当前range对象
         * @see UE.dom.Range:traversal(Function)
         * @example
         * ```html
         *
         * <body>
         *
         *     <!-- 选区开始 -->
         *     <span></span>
         *     <a></a>
         *     <!-- 选区结束 -->
         * </body>
         *
         * <script>
         *
         *     //output: <span></span><a></a>
         *     console.log( range.cloneContents() );
         *
         *     range.traversal( function ( node ) {
         *
         *         node.className = "test";
         *
         *     }, function ( node ) {
         *          return node.nodeType === 1;
         *     } );
         *
         *     //output: <span class="test"></span><a class="test"></a>
         *     console.log( range.cloneContents() );
         *
         * </script>
         * ```
         */
        traversal:function(doFn,filterFn){
            if (this.collapsed)
                return this;
            var bookmark = this.createBookmark(),
                end = bookmark.end,
                current = domUtils.getNextDomNode(bookmark.start, false, filterFn);
            while (current && current !== end && (domUtils.getPosition(current, end) & domUtils.POSITION_PRECEDING)) {
                var tmpNode = domUtils.getNextDomNode(current,false,filterFn);
                doFn(current);
                current = tmpNode;
            }
            return this.moveToBookmark(bookmark);
        }
    };
})();

// core/Selection.js
/**
 * 选集
 * @file
 * @module UE.dom
 * @class Selection
 * @since 1.2.6.1
 */

/**
 * 选区集合
 * @unfile
 * @module UE.dom
 * @class Selection
 */
(function () {

    function getBoundaryInformation( range, start ) {
        var getIndex = domUtils.getNodeIndex;
        range = range.duplicate();
        range.collapse( start );
        var parent = range.parentElement();
        //如果节点里没有子节点，直接退出
        if ( !parent.hasChildNodes() ) {
            return  {container:parent, offset:0};
        }
        var siblings = parent.children,
            child,
            testRange = range.duplicate(),
            startIndex = 0, endIndex = siblings.length - 1, index = -1,
            distance;
        while ( startIndex <= endIndex ) {
            index = Math.floor( (startIndex + endIndex) / 2 );
            child = siblings[index];
            testRange.moveToElementText( child );
            var position = testRange.compareEndPoints( 'StartToStart', range );
            if ( position > 0 ) {
                endIndex = index - 1;
            } else if ( position < 0 ) {
                startIndex = index + 1;
            } else {
                //trace:1043
                return  {container:parent, offset:getIndex( child )};
            }
        }
        if ( index == -1 ) {
            testRange.moveToElementText( parent );
            testRange.setEndPoint( 'StartToStart', range );
            distance = testRange.text.replace( /(\r\n|\r)/g, '\n' ).length;
            siblings = parent.childNodes;
            if ( !distance ) {
                child = siblings[siblings.length - 1];
                return  {container:child, offset:child.nodeValue.length};
            }

            var i = siblings.length;
            while ( distance > 0 ){
                distance -= siblings[ --i ].nodeValue.length;
            }
            return {container:siblings[i], offset:-distance};
        }
        testRange.collapse( position > 0 );
        testRange.setEndPoint( position > 0 ? 'StartToStart' : 'EndToStart', range );
        distance = testRange.text.replace( /(\r\n|\r)/g, '\n' ).length;
        if ( !distance ) {
            return  dtd.$empty[child.tagName] || dtd.$nonChild[child.tagName] ?
            {container:parent, offset:getIndex( child ) + (position > 0 ? 0 : 1)} :
            {container:child, offset:position > 0 ? 0 : child.childNodes.length}
        }
        while ( distance > 0 ) {
            try {
                var pre = child;
                child = child[position > 0 ? 'previousSibling' : 'nextSibling'];
                distance -= child.nodeValue.length;
            } catch ( e ) {
                return {container:parent, offset:getIndex( pre )};
            }
        }
        return  {container:child, offset:position > 0 ? -distance : child.nodeValue.length + distance}
    }

    /**
     * 将ieRange转换为Range对象
     * @param {Range}   ieRange    ieRange对象
     * @param {Range}   range      Range对象
     * @return  {Range}  range       返回转换后的Range对象
     */
    function transformIERangeToRange( ieRange, range ) {
        if ( ieRange.item ) {
            range.selectNode( ieRange.item( 0 ) );
        } else {
            var bi = getBoundaryInformation( ieRange, true );
            range.setStart( bi.container, bi.offset );
            if ( ieRange.compareEndPoints( 'StartToEnd', ieRange ) != 0 ) {
                bi = getBoundaryInformation( ieRange, false );
                range.setEnd( bi.container, bi.offset );
            }
        }
        return range;
    }

    /**
     * 获得ieRange
     * @param {Selection} sel    Selection对象
     * @return {ieRange}    得到ieRange
     */
    function _getIERange( sel ) {
        var ieRange;
        //ie下有可能报错
        try {
            ieRange = sel.getNative().createRange();
        } catch ( e ) {
            return null;
        }
        var el = ieRange.item ? ieRange.item( 0 ) : ieRange.parentElement();
        if ( ( el.ownerDocument || el ) === sel.document ) {
            return ieRange;
        }
        return null;
    }

    var Selection = dom.Selection = function ( doc ) {
        var me = this, iframe;
        me.document = doc;
        if ( browser.ie9below ) {
            iframe = domUtils.getWindow( doc ).frameElement;
            domUtils.on( iframe, 'beforedeactivate', function () {
                me._bakIERange = me.getIERange();
            } );
            domUtils.on( iframe, 'activate', function () {
                try {
                    if ( !_getIERange( me ) && me._bakIERange ) {
                        me._bakIERange.select();
                    }
                } catch ( ex ) {
                }
                me._bakIERange = null;
            } );
        }
        iframe = doc = null;
    };

    Selection.prototype = {

        rangeInBody : function(rng,txtRange){
            var node = browser.ie9below || txtRange ? rng.item ? rng.item() : rng.parentElement() : rng.startContainer;

            return node === this.document.body || domUtils.inDoc(node,this.document);
        },

        /**
         * 获取原生seleciton对象
         * @method getNative
         * @return { Object } 获得selection对象
         * @example
         * ```javascript
         * editor.selection.getNative();
         * ```
         */
        getNative:function () {
            var doc = this.document;
            try {
                return !doc ? null : browser.ie9below ? doc.selection : domUtils.getWindow( doc ).getSelection();
            } catch ( e ) {
                return null;
            }
        },

        /**
         * 获得ieRange
         * @method getIERange
         * @return { Object } 返回ie原生的Range
         * @example
         * ```javascript
         * editor.selection.getIERange();
         * ```
         */
        getIERange:function () {
            var ieRange = _getIERange( this );
            if ( !ieRange ) {
                if ( this._bakIERange ) {
                    return this._bakIERange;
                }
            }
            return ieRange;
        },

        /**
         * 缓存当前选区的range和选区的开始节点
         * @method cache
         */
        cache:function () {
            this.clear();
            this._cachedRange = this.getRange();
            this._cachedStartElement = this.getStart();
            this._cachedStartElementPath = this.getStartElementPath();
        },

        /**
         * 获取选区开始位置的父节点到body
         * @method getStartElementPath
         * @return { Array } 返回父节点集合
         * @example
         * ```javascript
         * editor.selection.getStartElementPath();
         * ```
         */
        getStartElementPath:function () {
            if ( this._cachedStartElementPath ) {
                return this._cachedStartElementPath;
            }
            var start = this.getStart();
            if ( start ) {
                return domUtils.findParents( start, true, null, true )
            }
            return [];
        },

        /**
         * 清空缓存
         * @method clear
         */
        clear:function () {
            this._cachedStartElementPath = this._cachedRange = this._cachedStartElement = null;
        },

        /**
         * 编辑器是否得到了选区
         * @method isFocus
         */
        isFocus:function () {
            try {
                if(browser.ie9below){

                    var nativeRange = _getIERange(this);
                    return !!(nativeRange && this.rangeInBody(nativeRange));
                }else{
                    return !!this.getNative().rangeCount;
                }
            } catch ( e ) {
                return false;
            }

        },

        /**
         * 获取选区对应的Range
         * @method getRange
         * @return { Object } 得到Range对象
         * @example
         * ```javascript
         * editor.selection.getRange();
         * ```
         */
        getRange:function () {
            var me = this;
            function optimze( range ) {
                var child = me.document.body.firstChild,
                    collapsed = range.collapsed;
                while ( child && child.firstChild ) {
                    range.setStart( child, 0 );
                    child = child.firstChild;
                }
                if ( !range.startContainer ) {
                    range.setStart( me.document.body, 0 )
                }
                if ( collapsed ) {
                    range.collapse( true );
                }
            }

            if ( me._cachedRange != null ) {
                return this._cachedRange;
            }
            var range = new baidu.editor.dom.Range( me.document );

            if ( browser.ie9below ) {
                var nativeRange = me.getIERange();
                if ( nativeRange ) {
                    //备份的_bakIERange可能已经实效了，dom树发生了变化比如从源码模式切回来，所以try一下，实效就放到body开始位置
                    try{
                        transformIERangeToRange( nativeRange, range );
                    }catch(e){
                        optimze( range );
                    }

                } else {
                    optimze( range );
                }
            } else {
                var sel = me.getNative();
                if ( sel && sel.rangeCount ) {
                    var firstRange = sel.getRangeAt( 0 );
                    var lastRange = sel.getRangeAt( sel.rangeCount - 1 );
                    range.setStart( firstRange.startContainer, firstRange.startOffset ).setEnd( lastRange.endContainer, lastRange.endOffset );
                    if ( range.collapsed && domUtils.isBody( range.startContainer ) && !range.startOffset ) {
                        optimze( range );
                    }
                } else {
                    //trace:1734 有可能已经不在dom树上了，标识的节点
                    if ( this._bakRange && domUtils.inDoc( this._bakRange.startContainer, this.document ) ){
                        return this._bakRange;
                    }
                    optimze( range );
                }
            }
            return this._bakRange = range;
        },

        /**
         * 获取开始元素，用于状态反射
         * @method getStart
         * @return { Element } 获得开始元素
         * @example
         * ```javascript
         * editor.selection.getStart();
         * ```
         */
        getStart:function () {
            if ( this._cachedStartElement ) {
                return this._cachedStartElement;
            }
            var range = browser.ie9below ? this.getIERange() : this.getRange(),
                tmpRange,
                start, tmp, parent;
            if ( browser.ie9below ) {
                if ( !range ) {
                    //todo 给第一个值可能会有问题
                    return this.document.body.firstChild;
                }
                //control元素
                if ( range.item ){
                    return range.item( 0 );
                }
                tmpRange = range.duplicate();
                //修正ie下<b>x</b>[xx] 闭合后 <b>x|</b>xx
                tmpRange.text.length > 0 && tmpRange.moveStart( 'character', 1 );
                tmpRange.collapse( 1 );
                start = tmpRange.parentElement();
                parent = tmp = range.parentElement();
                while ( tmp = tmp.parentNode ) {
                    if ( tmp == start ) {
                        start = parent;
                        break;
                    }
                }
            } else {
                range.shrinkBoundary();
                start = range.startContainer;
                if ( start.nodeType == 1 && start.hasChildNodes() ){
                    start = start.childNodes[Math.min( start.childNodes.length - 1, range.startOffset )];
                }
                if ( start.nodeType == 3 ){
                    return start.parentNode;
                }
            }
            return start;
        },

        /**
         * 得到选区中的文本
         * @method getText
         * @return { String } 选区中包含的文本
         * @example
         * ```javascript
         * editor.selection.getText();
         * ```
         */
        getText:function () {
            var nativeSel, nativeRange;
            if ( this.isFocus() && (nativeSel = this.getNative()) ) {
                nativeRange = browser.ie9below ? nativeSel.createRange() : nativeSel.getRangeAt( 0 );
                return browser.ie9below ? nativeRange.text : nativeRange.toString();
            }
            return '';
        },

        /**
         * 清除选区
         * @method clearRange
         * @example
         * ```javascript
         * editor.selection.clearRange();
         * ```
         */
        clearRange : function(){
            this.getNative()[browser.ie9below ? 'empty' : 'removeAllRanges']();
        }
    };
})();

// core/Editor.js
/**
 * 编辑器主类，包含编辑器提供的大部分公用接口
 * @file
 * @module UE
 * @class Editor
 * @since 1.2.6.1
 */

/**
 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
 * @unfile
 * @module UE
 */

/**
 * UEditor的核心类，为用户提供与编辑器交互的接口。
 * @unfile
 * @module UE
 * @class Editor
 */

(function () {
    var uid = 0, _selectionChangeTimer;

    /**
     * 获取编辑器的html内容，赋值到编辑器所在表单的textarea文本域里面
     * @private
     * @method setValue
     * @param { UE.Editor } editor 编辑器事例
     */
    function setValue(form, editor) {
        var textarea;
        if (editor.textarea) {
            if (utils.isString(editor.textarea)) {
                for (var i = 0, ti, tis = domUtils.getElementsByTagName(form, 'textarea'); ti = tis[i++];) {
                    if (ti.id == 'ueditor_textarea_' + editor.options.textarea) {
                        textarea = ti;
                        break;
                    }
                }
            } else {
                textarea = editor.textarea;
            }
        }
        if (!textarea) {
            form.appendChild(textarea = domUtils.createElement(document, 'textarea', {
                'name': editor.options.textarea,
                'id': 'ueditor_textarea_' + editor.options.textarea,
                'style': "display:none"
            }));
            //不要产生多个textarea
            editor.textarea = textarea;
        }
        !textarea.getAttribute('name') && textarea.setAttribute('name', editor.options.textarea );
        textarea.value = editor.hasContents() ?
            (editor.options.allHtmlEnabled ? editor.getAllHtml() : editor.getContent(null, null, true)) :
            ''
    }
    function loadPlugins(me){
        //初始化插件
        for (var pi in UE.plugins) {
            UE.plugins[pi].call(me);
        }

    }
    function checkCurLang(I18N){
        for(var lang in I18N){
            return lang
        }
    }

    function langReadied(me){
        me.langIsReady = true;

        me.fireEvent("langReady");
    }

    /**
     * 编辑器准备就绪后会触发该事件
     * @module UE
     * @class Editor
     * @event ready
     * @remind render方法执行完成之后,会触发该事件
     * @remind
     * @example
     * ```javascript
     * editor.addListener( 'ready', function( editor ) {
     *     editor.execCommand( 'focus' ); //编辑器家在完成后，让编辑器拿到焦点
     * } );
     * ```
     */
    /**
     * 执行destroy方法,会触发该事件
     * @module UE
     * @class Editor
     * @event destroy
     * @see UE.Editor:destroy()
     */
    /**
     * 执行reset方法,会触发该事件
     * @module UE
     * @class Editor
     * @event reset
     * @see UE.Editor:reset()
     */
    /**
     * 执行focus方法,会触发该事件
     * @module UE
     * @class Editor
     * @event focus
     * @see UE.Editor:focus(Boolean)
     */
    /**
     * 语言加载完成会触发该事件
     * @module UE
     * @class Editor
     * @event langReady
     */
    /**
     * 运行命令之后会触发该命令
     * @module UE
     * @class Editor
     * @event beforeExecCommand
     */
    /**
     * 运行命令之后会触发该命令
     * @module UE
     * @class Editor
     * @event afterExecCommand
     */
    /**
     * 运行命令之前会触发该命令
     * @module UE
     * @class Editor
     * @event firstBeforeExecCommand
     */
    /**
     * 在getContent方法执行之前会触发该事件
     * @module UE
     * @class Editor
     * @event beforeGetContent
     * @see UE.Editor:getContent()
     */
    /**
     * 在getContent方法执行之后会触发该事件
     * @module UE
     * @class Editor
     * @event afterGetContent
     * @see UE.Editor:getContent()
     */
    /**
     * 在getAllHtml方法执行时会触发该事件
     * @module UE
     * @class Editor
     * @event getAllHtml
     * @see UE.Editor:getAllHtml()
     */
    /**
     * 在setContent方法执行之前会触发该事件
     * @module UE
     * @class Editor
     * @event beforeSetContent
     * @see UE.Editor:setContent(String)
     */
    /**
     * 在setContent方法执行之后会触发该事件
     * @module UE
     * @class Editor
     * @event afterSetContent
     * @see UE.Editor:setContent(String)
     */
    /**
     * 每当编辑器内部选区发生改变时，将触发该事件
     * @event selectionchange
     * @warning 该事件的触发非常频繁，不建议在该事件的处理过程中做重量级的处理
     * @example
     * ```javascript
     * editor.addListener( 'selectionchange', function( editor ) {
     *     console.log('选区发生改变');
     * }
     */
    /**
     * 在所有selectionchange的监听函数执行之前，会触发该事件
     * @module UE
     * @class Editor
     * @event beforeSelectionChange
     * @see UE.Editor:selectionchange
     */
    /**
     * 在所有selectionchange的监听函数执行完之后，会触发该事件
     * @module UE
     * @class Editor
     * @event afterSelectionChange
     * @see UE.Editor:selectionchange
     */
    /**
     * 编辑器内容发生改变时会触发该事件
     * @module UE
     * @class Editor
     * @event contentChange
     */


    /**
     * 以默认参数构建一个编辑器实例
     * @constructor
     * @remind 通过 改构造方法实例化的编辑器,不带ui层.需要render到一个容器,编辑器实例才能正常渲染到页面
     * @example
     * ```javascript
     * var editor = new UE.Editor();
     * editor.execCommand('blod');
     * ```
     * @see UE.Config
     */

    /**
     * 以给定的参数集合创建一个编辑器实例，对于未指定的参数，将应用默认参数。
     * @constructor
     * @remind 通过 改构造方法实例化的编辑器,不带ui层.需要render到一个容器,编辑器实例才能正常渲染到页面
     * @param { Object } setting 创建编辑器的参数
     * @example
     * ```javascript
     * var editor = new UE.Editor();
     * editor.execCommand('blod');
     * ```
     * @see UE.Config
     */
    var Editor = UE.Editor = function (options) {
        var me = this;
        me.uid = uid++;
        EventBase.call(me);
        me.commands = {};
        me.options = utils.extend(utils.clone(options || {}), UEDITOR_CONFIG, true);
        me.shortcutkeys = {};
        me.inputRules = [];
        me.outputRules = [];
        //设置默认的常用属性
        me.setOpt(Editor.defaultOptions(me));

        /* 尝试异步加载后台配置 */
        me.loadServerConfig();

        if(!utils.isEmptyObject(UE.I18N)){
            //修改默认的语言类型
            me.options.lang = checkCurLang(UE.I18N);
            UE.plugin.load(me);
            langReadied(me);

        }else{
            utils.loadFile(document, {
                src: me.options.langPath + me.options.lang + "/" + me.options.lang + ".js",
                tag: "script",
                type: "text/javascript",
                defer: "defer"
            }, function () {
                UE.plugin.load(me);
                langReadied(me);
            });
        }

        UE.instants['ueditorInstant' + me.uid] = me;
    };
    Editor.prototype = {
         registerCommand : function(name,obj){
            this.commands[name] = obj;
         },
        /**
         * 编辑器对外提供的监听ready事件的接口， 通过调用该方法，达到的效果与监听ready事件是一致的
         * @method ready
         * @param { Function } fn 编辑器ready之后所执行的回调, 如果在注册事件之前编辑器已经ready，将会
         * 立即触发该回调。
         * @remind 需要等待编辑器加载完成后才能执行的代码,可以使用该方法传入
         * @example
         * ```javascript
         * editor.ready( function( editor ) {
         *     editor.setContent('初始化完毕');
         * } );
         * ```
         * @see UE.Editor.event:ready
         */
        ready: function (fn) {
            var me = this;
            if (fn) {
                me.isReady ? fn.apply(me) : me.addListener('ready', fn);
            }
        },

        /**
         * 该方法是提供给插件里面使用，设置配置项默认值
         * @method setOpt
         * @warning 三处设置配置项的优先级: 实例化时传入参数 > setOpt()设置 > config文件里设置
         * @warning 该方法仅供编辑器插件内部和编辑器初始化时调用，其他地方不能调用。
         * @param { String } key 编辑器的可接受的选项名称
         * @param { * } val  该选项可接受的值
         * @example
         * ```javascript
         * editor.setOpt( 'initContent', '欢迎使用编辑器' );
         * ```
         */

        /**
         * 该方法是提供给插件里面使用，以{key:value}集合的方式设置插件内用到的配置项默认值
         * @method setOpt
         * @warning 三处设置配置项的优先级: 实例化时传入参数 > setOpt()设置 > config文件里设置
         * @warning 该方法仅供编辑器插件内部和编辑器初始化时调用，其他地方不能调用。
         * @param { Object } options 将要设置的选项的键值对对象
         * @example
         * ```javascript
         * editor.setOpt( {
         *     'initContent': '欢迎使用编辑器'
         * } );
         * ```
         */
        setOpt: function (key, val) {
            var obj = {};
            if (utils.isString(key)) {
                obj[key] = val
            } else {
                obj = key;
            }
            utils.extend(this.options, obj, true);
        },
        getOpt:function(key){
            return this.options[key]
        },
        /**
         * 销毁编辑器实例，使用textarea代替
         * @method destroy
         * @example
         * ```javascript
         * editor.destroy();
         * ```
         */
        destroy: function () {

            var me = this;
            me.fireEvent('destroy');
            var container = me.container.parentNode;
            var textarea = me.textarea;
            if (!textarea) {
                textarea = document.createElement('textarea');
                container.parentNode.insertBefore(textarea, container);
            } else {
                textarea.style.display = ''
            }

            textarea.style.width = me.iframe.offsetWidth + 'px';
            textarea.style.height = me.iframe.offsetHeight + 'px';
            textarea.value = me.getContent();
            textarea.id = me.key;
            container.innerHTML = '';
            domUtils.remove(container);
            var key = me.key;
            //trace:2004
            for (var p in me) {
                if (me.hasOwnProperty(p)) {
                    delete this[p];
                }
            }
            UE.delEditor(key);
        },

        /**
         * 渲染编辑器的DOM到指定容器
         * @method render
         * @param { String } containerId 指定一个容器ID
         * @remind 执行该方法,会触发ready事件
         * @warning 必须且只能调用一次
         */

        /**
         * 渲染编辑器的DOM到指定容器
         * @method render
         * @param { Element } containerDom 直接指定容器对象
         * @remind 执行该方法,会触发ready事件
         * @warning 必须且只能调用一次
         */
        render: function (container) {
            var me = this,
                options = me.options,
                getStyleValue=function(attr){
                    return parseInt(domUtils.getComputedStyle(container,attr));
                };
            if (utils.isString(container)) {
                container = document.getElementById(container);
            }
            if (container) {
                if(options.initialFrameWidth){
                    options.minFrameWidth = options.initialFrameWidth
                }else{
                    options.minFrameWidth = options.initialFrameWidth = container.offsetWidth;
                }
                if(options.initialFrameHeight){
                    options.minFrameHeight = options.initialFrameHeight
                }else{
                    options.initialFrameHeight = options.minFrameHeight = container.offsetHeight;
                }

                container.style.width = /%$/.test(options.initialFrameWidth) ?  '100%' : options.initialFrameWidth-
                    getStyleValue("padding-left")- getStyleValue("padding-right") +'px';
                container.style.height = /%$/.test(options.initialFrameHeight) ?  '100%' : options.initialFrameHeight -
                    getStyleValue("padding-top")- getStyleValue("padding-bottom") +'px';

                container.style.zIndex = options.zIndex;

                var html = ( ie && browser.version < 9  ? '' : '<!DOCTYPE html>') +
                    '<html xmlns=\'http://www.w3.org/1999/xhtml\' class=\'view\' ><head>' +
                    '<style type=\'text/css\'>' +
                    //设置四周的留边
                    '.view{padding:0;word-wrap:break-word;cursor:text;height:90%;}\n' +
                    //设置默认字体和字号
                    //font-family不能呢随便改，在safari下fillchar会有解析问题
                    'body{margin:8px;font-family:sans-serif;font-size:16px;}' +
                    //设置段落间距
                    'p{margin:5px 0;}</style>' +
                    ( options.iframeCssUrl ? '<link rel=\'stylesheet\' type=\'text/css\' href=\'' + utils.unhtml(options.iframeCssUrl) + '\'/>' : '' ) +
                    (options.initialStyle ? '<style>' + options.initialStyle + '</style>' : '') +
                    '</head><body class=\'view\' ></body>' +
                    '<script type=\'text/javascript\' ' + (ie ? 'defer=\'defer\'' : '' ) +' id=\'_initialScript\'>' +
                    'setTimeout(function(){editor = window.parent.UE.instants[\'ueditorInstant' + me.uid + '\'];editor._setup(document);},0);' +
                    'var _tmpScript = document.getElementById(\'_initialScript\');_tmpScript.parentNode.removeChild(_tmpScript);</script></html>';
                container.appendChild(domUtils.createElement(document, 'iframe', {
                    id: 'ueditor_' + me.uid,
                    width: "100%",
                    height: "100%",
                    frameborder: "0",
                    //先注释掉了，加的原因忘记了，但开启会直接导致全屏模式下内容多时不会出现滚动条
//                    scrolling :'no',
                    src: 'javascript:void(function(){document.open();' + (options.customDomain && document.domain != location.hostname ?  'document.domain="' + document.domain + '";' : '') +
                        'document.write("' + html + '");document.close();}())'
                }));
                container.style.overflow = 'hidden';
                //解决如果是给定的百分比，会导致高度算不对的问题
                setTimeout(function(){
                    if( /%$/.test(options.initialFrameWidth)){
                        options.minFrameWidth = options.initialFrameWidth = container.offsetWidth;
                        //如果这里给定宽度，会导致ie在拖动窗口大小时，编辑区域不随着变化
//                        container.style.width = options.initialFrameWidth + 'px';
                    }
                    if(/%$/.test(options.initialFrameHeight)){
                        options.minFrameHeight = options.initialFrameHeight = container.offsetHeight;
                        container.style.height = options.initialFrameHeight + 'px';
                    }
                })
            }
        },

        /**
         * 编辑器初始化
         * @method _setup
         * @private
         * @param { Element } doc 编辑器Iframe中的文档对象
         */
        _setup: function (doc) {

            var me = this,
                options = me.options;
            if (ie) {
                doc.body.disabled = true;
                doc.body.contentEditable = true;
                doc.body.disabled = false;
            } else {
                doc.body.contentEditable = true;
            }
            doc.body.spellcheck = false;
            me.document = doc;
            me.window = doc.defaultView || doc.parentWindow;
            me.iframe = me.window.frameElement;
            me.body = doc.body;
            me.selection = new dom.Selection(doc);
            //gecko初始化就能得到range,无法判断isFocus了
            var geckoSel;
            if (browser.gecko && (geckoSel = this.selection.getNative())) {
                geckoSel.removeAllRanges();
            }
            this._initEvents();
            //为form提交提供一个隐藏的textarea
            for (var form = this.iframe.parentNode; !domUtils.isBody(form); form = form.parentNode) {
                if (form.tagName == 'FORM') {
                    me.form = form;
                    if(me.options.autoSyncData){
                        domUtils.on(me.window,'blur',function(){
                            setValue(form,me);
                        });
                    }else{
                        domUtils.on(form, 'submit', function () {
                            setValue(this, me);
                        });
                    }
                    break;
                }
            }
            if (options.initialContent) {
                if (options.autoClearinitialContent) {
                    var oldExecCommand = me.execCommand;
                    me.execCommand = function () {
                        me.fireEvent('firstBeforeExecCommand');
                        return oldExecCommand.apply(me, arguments);
                    };
                    this._setDefaultContent(options.initialContent);
                } else
                    this.setContent(options.initialContent, false, true);
            }

            //编辑器不能为空内容

            if (domUtils.isEmptyNode(me.body)) {
                me.body.innerHTML = '<p>' + (browser.ie ? '' : '<br/>') + '</p>';
            }
            //如果要求focus, 就把光标定位到内容开始
            if (options.focus) {
                setTimeout(function () {
                    me.focus(me.options.focusInEnd);
                    //如果自动清除开着，就不需要做selectionchange;
                    !me.options.autoClearinitialContent && me._selectionChange();
                }, 0);
            }
            if (!me.container) {
                me.container = this.iframe.parentNode;
            }
            if (options.fullscreen && me.ui) {
                me.ui.setFullScreen(true);
            }

            try {
                me.document.execCommand('2D-position', false, false);
            } catch (e) {
            }
            try {
                me.document.execCommand('enableInlineTableEditing', false, false);
            } catch (e) {
            }
            try {
                me.document.execCommand('enableObjectResizing', false, false);
            } catch (e) {
            }

            //挂接快捷键
            me._bindshortcutKeys();
            me.isReady = 1;
            me.fireEvent('ready');
            options.onready && options.onready.call(me);
            if (!browser.ie9below) {
                domUtils.on(me.window, ['blur', 'focus'], function (e) {
                    //chrome下会出现alt+tab切换时，导致选区位置不对
                    if (e.type == 'blur') {
                        me._bakRange = me.selection.getRange();
                        try {
                            me._bakNativeRange = me.selection.getNative().getRangeAt(0);
                            me.selection.getNative().removeAllRanges();
                        } catch (e) {
                            me._bakNativeRange = null;
                        }

                    } else {
                        try {
                            me._bakRange && me._bakRange.select();
                        } catch (e) {
                        }
                    }
                });
            }
            //trace:1518 ff3.6body不够寛，会导致点击空白处无法获得焦点
            if (browser.gecko && browser.version <= 10902) {
                //修复ff3.6初始化进来，不能点击获得焦点
                me.body.contentEditable = false;
                setTimeout(function () {
                    me.body.contentEditable = true;
                }, 100);
                setInterval(function () {
                    me.body.style.height = me.iframe.offsetHeight - 20 + 'px'
                }, 100)
            }

            !options.isShow && me.setHide();
            options.readonly && me.setDisabled();
        },

        /**
         * 同步数据到编辑器所在的form
         * 从编辑器的容器节点向上查找form元素，若找到，就同步编辑内容到找到的form里，为提交数据做准备，主要用于是手动提交的情况
         * 后台取得数据的键值，使用你容器上的name属性，如果没有就使用参数里的textarea项
         * @method sync
         * @example
         * ```javascript
         * editor.sync();
         * form.sumbit(); //form变量已经指向了form元素
         * ```
         */

        /**
         * 根据传入的formId，在页面上查找要同步数据的表单，若找到，就同步编辑内容到找到的form里，为提交数据做准备
         * 后台取得数据的键值，该键值默认使用给定的编辑器容器的name属性，如果没有name属性则使用参数项里给定的“textarea”项
         * @method sync
         * @param { String } formID 指定一个要同步数据的form的id,编辑器的数据会同步到你指定form下
         */
        sync: function (formId) {
            var me = this,
                form = formId ? document.getElementById(formId) :
                    domUtils.findParent(me.iframe.parentNode, function (node) {
                        return node.tagName == 'FORM'
                    }, true);
            form && setValue(form, me);
        },

        /**
         * 设置编辑器高度
         * @method setHeight
         * @remind 当配置项autoHeightEnabled为真时,该方法无效
         * @param { Number } number 设置的高度值，纯数值，不带单位
         * @example
         * ```javascript
         * editor.setHeight(number);
         * ```
         */
        setHeight: function (height,notSetHeight) {
            if (height !== parseInt(this.iframe.parentNode.style.height)) {
                this.iframe.parentNode.style.height = height + 'px';
            }
            !notSetHeight && (this.options.minFrameHeight = this.options.initialFrameHeight = height);
            this.body.style.height = height + 'px';
            !notSetHeight && this.trigger('setHeight')
        },

        /**
         * 为编辑器的编辑命令提供快捷键
         * 这个接口是为插件扩展提供的接口,主要是为新添加的插件，如果需要添加快捷键，所提供的接口
         * @method addshortcutkey
         * @param { Object } keyset 命令名和快捷键键值对对象，多个按钮的快捷键用“＋”分隔
         * @example
         * ```javascript
         * editor.addshortcutkey({
         *     "Bold" : "ctrl+66",//^B
         *     "Italic" : "ctrl+73", //^I
         * });
         * ```
         */
        /**
         * 这个接口是为插件扩展提供的接口,主要是为新添加的插件，如果需要添加快捷键，所提供的接口
         * @method addshortcutkey
         * @param { String } cmd 触发快捷键时，响应的命令
         * @param { String } keys 快捷键的字符串，多个按钮用“＋”分隔
         * @example
         * ```javascript
         * editor.addshortcutkey("Underline", "ctrl+85"); //^U
         * ```
         */
        addshortcutkey: function (cmd, keys) {
            var obj = {};
            if (keys) {
                obj[cmd] = keys
            } else {
                obj = cmd;
            }
            utils.extend(this.shortcutkeys, obj)
        },

        /**
         * 对编辑器设置keydown事件监听，绑定快捷键和命令，当快捷键组合触发成功，会响应对应的命令
         * @method _bindshortcutKeys
         * @private
         */
        _bindshortcutKeys: function () {
            var me = this, shortcutkeys = this.shortcutkeys;
            me.addListener('keydown', function (type, e) {
                var keyCode = e.keyCode || e.which;
                for (var i in shortcutkeys) {
                    var tmp = shortcutkeys[i].split(',');
                    for (var t = 0, ti; ti = tmp[t++];) {
                        ti = ti.split(':');
                        var key = ti[0], param = ti[1];
                        if (/^(ctrl)(\+shift)?\+(\d+)$/.test(key.toLowerCase()) || /^(\d+)$/.test(key)) {
                            if (( (RegExp.$1 == 'ctrl' ? (e.ctrlKey || e.metaKey) : 0)
                                && (RegExp.$2 != "" ? e[RegExp.$2.slice(1) + "Key"] : 1)
                                && keyCode == RegExp.$3
                                ) ||
                                keyCode == RegExp.$1
                                ) {
                                if (me.queryCommandState(i,param) != -1)
                                    me.execCommand(i, param);
                                domUtils.preventDefault(e);
                            }
                        }
                    }

                }
            });
        },

        /**
         * 获取编辑器的内容
         * @method getContent
         * @warning 该方法获取到的是经过编辑器内置的过滤规则进行过滤后得到的内容
         * @return { String } 编辑器的内容字符串, 如果编辑器的内容为空，或者是空的标签内容（如:”&lt;p&gt;&lt;br/&gt;&lt;/p&gt;“）， 则返回空字符串
         * @example
         * ```javascript
         * //编辑器html内容:<p>1<strong>2<em>34</em>5</strong>6</p>
         * var content = editor.getContent(); //返回值:<p>1<strong>2<em>34</em>5</strong>6</p>
         * ```
         */

        /**
         * 获取编辑器的内容。 可以通过参数定义编辑器内置的判空规则
         * @method getContent
         * @param { Function } fn 自定的判空规则， 要求该方法返回一个boolean类型的值，
         *                      代表当前编辑器的内容是否空，
         *                      如果返回true， 则该方法将直接返回空字符串；如果返回false，则编辑器将返回
         *                      经过内置过滤规则处理后的内容。
         * @remind 该方法在处理包含有初始化内容的时候能起到很好的作用。
         * @warning 该方法获取到的是经过编辑器内置的过滤规则进行过滤后得到的内容
         * @return { String } 编辑器的内容字符串
         * @example
         * ```javascript
         * // editor 是一个编辑器的实例
         * var content = editor.getContent( function ( editor ) {
         *      return editor.body.innerHTML === '欢迎使用UEditor'; //返回空字符串
         * } );
         * ```
         */
        getContent: function (cmd, fn,notSetCursor,ignoreBlank,formatter) {
            var me = this;
            if (cmd && utils.isFunction(cmd)) {
                fn = cmd;
                cmd = '';
            }
            if (fn ? !fn() : !this.hasContents()) {
                return '';
            }
            me.fireEvent('beforegetcontent');
            var root = UE.htmlparser(me.body.innerHTML,ignoreBlank);
            me.filterOutputRule(root);
            me.fireEvent('aftergetcontent', cmd,root);
            return  root.toHtml(formatter);
        },

        /**
         * 取得完整的html代码，可以直接显示成完整的html文档
         * @method getAllHtml
         * @return { String } 编辑器的内容html文档字符串
         * @eaxmple
         * ```javascript
         * editor.getAllHtml(); //返回格式大致是: <html><head>...</head><body>...</body></html>
         * ```
         */
        getAllHtml: function () {
            var me = this,
                headHtml = [],
                html = '';
            me.fireEvent('getAllHtml', headHtml);
            if (browser.ie && browser.version > 8) {
                var headHtmlForIE9 = '';
                utils.each(me.document.styleSheets, function (si) {
                    headHtmlForIE9 += ( si.href ? '<link rel="stylesheet" type="text/css" href="' + si.href + '" />' : '<style>' + si.cssText + '</style>');
                });
                utils.each(me.document.getElementsByTagName('script'), function (si) {
                    headHtmlForIE9 += si.outerHTML;
                });

            }
            return '<html><head>' + (me.options.charset ? '<meta http-equiv="Content-Type" content="text/html; charset=' + me.options.charset + '"/>' : '')
                + (headHtmlForIE9 || me.document.getElementsByTagName('head')[0].innerHTML) + headHtml.join('\n') + '</head>'
                + '<body ' + (ie && browser.version < 9 ? 'class="view"' : '') + '>' + me.getContent(null, null, true) + '</body></html>';
        },

        /**
         * 得到编辑器的纯文本内容，但会保留段落格式
         * @method getPlainTxt
         * @return { String } 编辑器带段落格式的纯文本内容字符串
         * @example
         * ```javascript
         * //编辑器html内容:<p><strong>1</strong></p><p><strong>2</strong></p>
         * console.log(editor.getPlainTxt()); //输出:"1\n2\n
         * ```
         */
        getPlainTxt: function () {
            var reg = new RegExp(domUtils.fillChar, 'g'),
                html = this.body.innerHTML.replace(/[\n\r]/g, '');//ie要先去了\n在处理
            html = html.replace(/<(p|div)[^>]*>(<br\/?>|&nbsp;)<\/\1>/gi, '\n')
                .replace(/<br\/?>/gi, '\n')
                .replace(/<[^>/]+>/g, '')
                .replace(/(\n)?<\/([^>]+)>/g, function (a, b, c) {
                    return dtd.$block[c] ? '\n' : b ? b : '';
                });
            //取出来的空格会有c2a0会变成乱码，处理这种情况\u00a0
            return html.replace(reg, '').replace(/\u00a0/g, ' ').replace(/&nbsp;/g, ' ');
        },

        /**
         * 获取编辑器中的纯文本内容,没有段落格式
         * @method getContentTxt
         * @return { String } 编辑器不带段落格式的纯文本内容字符串
         * @example
         * ```javascript
         * //编辑器html内容:<p><strong>1</strong></p><p><strong>2</strong></p>
         * console.log(editor.getPlainTxt()); //输出:"12
         * ```
         */
        getContentTxt: function () {
            var reg = new RegExp(domUtils.fillChar, 'g');
            //取出来的空格会有c2a0会变成乱码，处理这种情况\u00a0
            return this.body[browser.ie ? 'innerText' : 'textContent'].replace(reg, '').replace(/\u00a0/g, ' ');
        },

        /**
         * 设置编辑器的内容，可修改编辑器当前的html内容
         * @method setContent
         * @warning 通过该方法插入的内容，是经过编辑器内置的过滤规则进行过滤后得到的内容
         * @warning 该方法会触发selectionchange事件
         * @param { String } html 要插入的html内容
         * @example
         * ```javascript
         * editor.getContent('<p>test</p>');
         * ```
         */

        /**
         * 设置编辑器的内容，可修改编辑器当前的html内容
         * @method setContent
         * @warning 通过该方法插入的内容，是经过编辑器内置的过滤规则进行过滤后得到的内容
         * @warning 该方法会触发selectionchange事件
         * @param { String } html 要插入的html内容
         * @param { Boolean } isAppendTo 若传入true，不清空原来的内容，在最后插入内容，否则，清空内容再插入
         * @example
         * ```javascript
         * //假设设置前的编辑器内容是 <p>old text</p>
         * editor.setContent('<p>new text</p>', true); //插入的结果是<p>old text</p><p>new text</p>
         * ```
         */
        setContent: function (html, isAppendTo, notFireSelectionchange) {
            var me = this;

            me.fireEvent('beforesetcontent', html);
            var root = UE.htmlparser(html);
            me.filterInputRule(root);
            html = root.toHtml();

            me.body.innerHTML = (isAppendTo ? me.body.innerHTML : '') + html;


            function isCdataDiv(node){
                return  node.tagName == 'DIV' && node.getAttribute('cdata_tag');
            }
            //给文本或者inline节点套p标签
            if (me.options.enterTag == 'p') {

                var child = this.body.firstChild, tmpNode;
                if (!child || child.nodeType == 1 &&
                    (dtd.$cdata[child.tagName] || isCdataDiv(child) ||
                        domUtils.isCustomeNode(child)
                        )
                    && child === this.body.lastChild) {
                    this.body.innerHTML = '<p>' + (browser.ie ? '&nbsp;' : '<br/>') + '</p>' + this.body.innerHTML;

                } else {
                    var p = me.document.createElement('p');
                    while (child) {
                        while (child && (child.nodeType == 3 || child.nodeType == 1 && dtd.p[child.tagName] && !dtd.$cdata[child.tagName])) {
                            tmpNode = child.nextSibling;
                            p.appendChild(child);
                            child = tmpNode;
                        }
                        if (p.firstChild) {
                            if (!child) {
                                me.body.appendChild(p);
                                break;
                            } else {
                                child.parentNode.insertBefore(p, child);
                                p = me.document.createElement('p');
                            }
                        }
                        child = child.nextSibling;
                    }
                }
            }
            me.fireEvent('aftersetcontent');
            me.fireEvent('contentchange');

            !notFireSelectionchange && me._selectionChange();
            //清除保存的选区
            me._bakRange = me._bakIERange = me._bakNativeRange = null;
            //trace:1742 setContent后gecko能得到焦点问题
            var geckoSel;
            if (browser.gecko && (geckoSel = this.selection.getNative())) {
                geckoSel.removeAllRanges();
            }
            if(me.options.autoSyncData){
                me.form && setValue(me.form,me);
            }
        },

        /**
         * 让编辑器获得焦点，默认focus到编辑器头部
         * @method focus
         * @example
         * ```javascript
         * editor.focus()
         * ```
         */

        /**
         * 让编辑器获得焦点，toEnd确定focus位置
         * @method focus
         * @param { Boolean } toEnd 默认focus到编辑器头部，toEnd为true时focus到内容尾部
         * @example
         * ```javascript
         * editor.focus(true)
         * ```
         */
        focus: function (toEnd) {
            try {
                var me = this,
                    rng = me.selection.getRange();
                if (toEnd) {
                    var node = me.body.lastChild;
                    if(node && node.nodeType == 1 && !dtd.$empty[node.tagName]){
                        if(domUtils.isEmptyBlock(node)){
                            rng.setStartAtFirst(node)
                        }else{
                            rng.setStartAtLast(node)
                        }
                        rng.collapse(true);
                    }
                    rng.setCursor(true);
                } else {
                    if(!rng.collapsed && domUtils.isBody(rng.startContainer) && rng.startOffset == 0){

                        var node = me.body.firstChild;
                        if(node && node.nodeType == 1 && !dtd.$empty[node.tagName]){
                            rng.setStartAtFirst(node).collapse(true);
                        }
                    }

                    rng.select(true);

                }
                this.fireEvent('focus selectionchange');
            } catch (e) {
            }

        },
        isFocus:function(){
            return this.selection.isFocus();
        },
        blur:function(){
            var sel = this.selection.getNative();
            if(sel.empty && browser.ie){
                var nativeRng = document.body.createTextRange();
                nativeRng.moveToElementText(document.body);
                nativeRng.collapse(true);
                nativeRng.select();
                sel.empty()
            }else{
                sel.removeAllRanges()
            }

            //this.fireEvent('blur selectionchange');
        },
        /**
         * 初始化UE事件及部分事件代理
         * @method _initEvents
         * @private
         */
        _initEvents: function () {
            var me = this,
                doc = me.document,
                win = me.window;
            me._proxyDomEvent = utils.bind(me._proxyDomEvent, me);
            domUtils.on(doc, ['click', 'contextmenu', 'mousedown', 'keydown', 'keyup', 'keypress', 'mouseup', 'mouseover', 'mouseout', 'selectstart'], me._proxyDomEvent);
            domUtils.on(win, ['focus', 'blur'], me._proxyDomEvent);
            domUtils.on(me.body,'drop',function(e){
                //阻止ff下默认的弹出新页面打开图片
                if(browser.gecko && e.stopPropagation) { e.stopPropagation(); }
                me.fireEvent('contentchange')
            });
            domUtils.on(doc, ['mouseup', 'keydown'], function (evt) {
                //特殊键不触发selectionchange
                if (evt.type == 'keydown' && (evt.ctrlKey || evt.metaKey || evt.shiftKey || evt.altKey)) {
                    return;
                }
                if (evt.button == 2)return;
                me._selectionChange(250, evt);
            });
        },
        /**
         * 触发事件代理
         * @method _proxyDomEvent
         * @private
         * @return { * } fireEvent的返回值
         * @see UE.EventBase:fireEvent(String)
         */
        _proxyDomEvent: function (evt) {
            if(this.fireEvent('before' + evt.type.replace(/^on/, '').toLowerCase()) === false){
                return false;
            }
            if(this.fireEvent(evt.type.replace(/^on/, ''), evt) === false){
                return false;
            }
            return this.fireEvent('after' + evt.type.replace(/^on/, '').toLowerCase())
        },
        /**
         * 变化选区
         * @method _selectionChange
         * @private
         */
        _selectionChange: function (delay, evt) {
            var me = this;
            //有光标才做selectionchange 为了解决未focus时点击source不能触发更改工具栏状态的问题（source命令notNeedUndo=1）
//            if ( !me.selection.isFocus() ){
//                return;
//            }


            var hackForMouseUp = false;
            var mouseX, mouseY;
            if (browser.ie && browser.version < 9 && evt && evt.type == 'mouseup') {
                var range = this.selection.getRange();
                if (!range.collapsed) {
                    hackForMouseUp = true;
                    mouseX = evt.clientX;
                    mouseY = evt.clientY;
                }
            }
            clearTimeout(_selectionChangeTimer);
            _selectionChangeTimer = setTimeout(function () {
                if (!me.selection || !me.selection.getNative()) {
                    return;
                }
                //修复一个IE下的bug: 鼠标点击一段已选择的文本中间时，可能在mouseup后的一段时间内取到的range是在selection的type为None下的错误值.
                //IE下如果用户是拖拽一段已选择文本，则不会触发mouseup事件，所以这里的特殊处理不会对其有影响
                var ieRange;
                if (hackForMouseUp && me.selection.getNative().type == 'None') {
                    ieRange = me.document.body.createTextRange();
                    try {
                        ieRange.moveToPoint(mouseX, mouseY);
                    } catch (ex) {
                        ieRange = null;
                    }
                }
                var bakGetIERange;
                if (ieRange) {
                    bakGetIERange = me.selection.getIERange;
                    me.selection.getIERange = function () {
                        return ieRange;
                    };
                }
                me.selection.cache();
                if (bakGetIERange) {
                    me.selection.getIERange = bakGetIERange;
                }
                if (me.selection._cachedRange && me.selection._cachedStartElement) {
                    me.fireEvent('beforeselectionchange');
                    // 第二个参数causeByUi为true代表由用户交互造成的selectionchange.
                    me.fireEvent('selectionchange', !!evt);
                    me.fireEvent('afterselectionchange');
                    me.selection.clear();
                }
            }, delay || 50);
        },

        /**
         * 执行编辑命令
         * @method _callCmdFn
         * @private
         * @param { String } fnName 函数名称
         * @param { * } args 传给命令函数的参数
         * @return { * } 返回命令函数运行的返回值
         */
        _callCmdFn: function (fnName, args) {
            var cmdName = args[0].toLowerCase(),
                cmd, cmdFn;
            cmd = this.commands[cmdName] || UE.commands[cmdName];
            cmdFn = cmd && cmd[fnName];
            //没有querycommandstate或者没有command的都默认返回0
            if ((!cmd || !cmdFn) && fnName == 'queryCommandState') {
                return 0;
            } else if (cmdFn) {
                return cmdFn.apply(this, args);
            }
        },

        /**
         * 执行编辑命令cmdName，完成富文本编辑效果
         * @method execCommand
         * @param { String } cmdName 需要执行的命令
         * @remind 具体命令的使用请参考<a href="#COMMAND.LIST">命令列表</a>
         * @return { * } 返回命令函数运行的返回值
         * @example
         * ```javascript
         * editor.execCommand(cmdName);
         * ```
         */
        execCommand: function (cmdName) {
            cmdName = cmdName.toLowerCase();
            var me = this,
                result,
                cmd = me.commands[cmdName] || UE.commands[cmdName];
            if (!cmd || !cmd.execCommand) {
                return null;
            }
            if (!cmd.notNeedUndo && !me.__hasEnterExecCommand) {
                me.__hasEnterExecCommand = true;
                if (me.queryCommandState.apply(me,arguments) != -1) {
                    me.fireEvent('saveScene');
                    me.fireEvent.apply(me, ['beforeexeccommand', cmdName].concat(arguments));
                    result = this._callCmdFn('execCommand', arguments);
                    //保存场景时，做了内容对比，再看是否进行contentchange触发，这里多触发了一次，去掉
//                    (!cmd.ignoreContentChange && !me._ignoreContentChange) && me.fireEvent('contentchange');
                    me.fireEvent.apply(me, ['afterexeccommand', cmdName].concat(arguments));
                    me.fireEvent('saveScene');
                }
                me.__hasEnterExecCommand = false;
            } else {
                result = this._callCmdFn('execCommand', arguments);
                (!me.__hasEnterExecCommand && !cmd.ignoreContentChange && !me._ignoreContentChange) && me.fireEvent('contentchange')
            }
            (!me.__hasEnterExecCommand && !cmd.ignoreContentChange && !me._ignoreContentChange) && me._selectionChange();
            return result;
        },

        /**
         * 根据传入的command命令，查选编辑器当前的选区，返回命令的状态
         * @method  queryCommandState
         * @param { String } cmdName 需要查询的命令名称
         * @remind 具体命令的使用请参考<a href="#COMMAND.LIST">命令列表</a>
         * @return { Number } number 返回放前命令的状态，返回值三种情况：(-1|0|1)
         * @example
         * ```javascript
         * editor.queryCommandState(cmdName)  => (-1|0|1)
         * ```
         * @see COMMAND.LIST
         */
        queryCommandState: function (cmdName) {
            return this._callCmdFn('queryCommandState', arguments);
        },

        /**
         * 根据传入的command命令，查选编辑器当前的选区，根据命令返回相关的值
         * @method queryCommandValue
         * @param { String } cmdName 需要查询的命令名称
         * @remind 具体命令的使用请参考<a href="#COMMAND.LIST">命令列表</a>
         * @remind 只有部分插件有此方法
         * @return { * } 返回每个命令特定的当前状态值
         * @grammar editor.queryCommandValue(cmdName)  =>  {*}
         * @see COMMAND.LIST
         */
        queryCommandValue: function (cmdName) {
            return this._callCmdFn('queryCommandValue', arguments);
        },

        /**
         * 检查编辑区域中是否有内容
         * @method  hasContents
         * @remind 默认有文本内容，或者有以下节点都不认为是空
         * table,ul,ol,dl,iframe,area,base,col,hr,img,embed,input,link,meta,param
         * @return { Boolean } 检查有内容返回true，否则返回false
         * @example
         * ```javascript
         * editor.hasContents()
         * ```
         */

        /**
         * 检查编辑区域中是否有内容，若包含参数tags中的节点类型，直接返回true
         * @method  hasContents
         * @param { Array } tags 传入数组判断时用到的节点类型
         * @return { Boolean } 若文档中包含tags数组里对应的tag，返回true，否则返回false
         * @example
         * ```javascript
         * editor.hasContents(['span']);
         * ```
         */
        hasContents: function (tags) {
            if (tags) {
                for (var i = 0, ci; ci = tags[i++];) {
                    if (this.document.getElementsByTagName(ci).length > 0) {
                        return true;
                    }
                }
            }
            if (!domUtils.isEmptyBlock(this.body)) {
                return true
            }
            //随时添加,定义的特殊标签如果存在，不能认为是空
            tags = ['div'];
            for (i = 0; ci = tags[i++];) {
                var nodes = domUtils.getElementsByTagName(this.document, ci);
                for (var n = 0, cn; cn = nodes[n++];) {
                    if (domUtils.isCustomeNode(cn)) {
                        return true;
                    }
                }
            }
            return false;
        },

        /**
         * 重置编辑器，可用来做多个tab使用同一个编辑器实例
         * @method  reset
         * @remind 此方法会清空编辑器内容，清空回退列表，会触发reset事件
         * @example
         * ```javascript
         * editor.reset()
         * ```
         */
        reset: function () {
            this.fireEvent('reset');
        },

        /**
         * 设置当前编辑区域可以编辑
         * @method setEnabled
         * @example
         * ```javascript
         * editor.setEnabled()
         * ```
         */
        setEnabled: function () {
            var me = this, range;
            if (me.body.contentEditable == 'false') {
                me.body.contentEditable = true;
                range = me.selection.getRange();
                //有可能内容丢失了
                try {
                    range.moveToBookmark(me.lastBk);
                    delete me.lastBk
                } catch (e) {
                    range.setStartAtFirst(me.body).collapse(true)
                }
                range.select(true);
                if (me.bkqueryCommandState) {
                    me.queryCommandState = me.bkqueryCommandState;
                    delete me.bkqueryCommandState;
                }
                if (me.bkqueryCommandValue) {
                    me.queryCommandValue = me.bkqueryCommandValue;
                    delete me.bkqueryCommandValue;
                }
                me.fireEvent('selectionchange');
            }
        },
        enable: function () {
            return this.setEnabled();
        },

        /** 设置当前编辑区域不可编辑
         * @method setDisabled
         */

        /** 设置当前编辑区域不可编辑,except中的命令除外
         * @method setDisabled
         * @param { String } except 例外命令的字符串
         * @remind 即使设置了disable，此处配置的例外命令仍然可以执行
         * @example
         * ```javascript
         * editor.setDisabled('bold'); //禁用工具栏中除加粗之外的所有功能
         * ```
         */

        /** 设置当前编辑区域不可编辑,except中的命令除外
         * @method setDisabled
         * @param { Array } except 例外命令的字符串数组，数组中的命令仍然可以执行
         * @remind 即使设置了disable，此处配置的例外命令仍然可以执行
         * @example
         * ```javascript
         * editor.setDisabled(['bold','insertimage']); //禁用工具栏中除加粗和插入图片之外的所有功能
         * ```
         */
        setDisabled: function (except) {
            var me = this;
            except = except ? utils.isArray(except) ? except : [except] : [];
            if (me.body.contentEditable == 'true') {
                if (!me.lastBk) {
                    me.lastBk = me.selection.getRange().createBookmark(true);
                }
                me.body.contentEditable = false;
                me.bkqueryCommandState = me.queryCommandState;
                me.bkqueryCommandValue = me.queryCommandValue;
                me.queryCommandState = function (type) {
                    if (utils.indexOf(except, type) != -1) {
                        return me.bkqueryCommandState.apply(me, arguments);
                    }
                    return -1;
                };
                me.queryCommandValue = function (type) {
                    if (utils.indexOf(except, type) != -1) {
                        return me.bkqueryCommandValue.apply(me, arguments);
                    }
                    return null;
                };
                me.fireEvent('selectionchange');
            }
        },
        disable: function (except) {
            return this.setDisabled(except);
        },

        /**
         * 设置默认内容
         * @method _setDefaultContent
         * @private
         * @param  { String } cont 要存入的内容
         */
        _setDefaultContent: function () {
            function clear() {
                var me = this;
                if (me.document.getElementById('initContent')) {
                    me.body.innerHTML = '<p>' + (ie ? '' : '<br/>') + '</p>';
                    me.removeListener('firstBeforeExecCommand focus', clear);
                    setTimeout(function () {
                        me.focus();
                        me._selectionChange();
                    }, 0)
                }
            }

            return function (cont) {
                var me = this;
                me.body.innerHTML = '<p id="initContent">' + cont + '</p>';

                me.addListener('firstBeforeExecCommand focus', clear);
            }
        }(),

        /**
         * 显示编辑器
         * @method setShow
         * @example
         * ```javascript
         * editor.setShow()
         * ```
         */
        setShow: function () {
            var me = this, range = me.selection.getRange();
            if (me.container.style.display == 'none') {
                //有可能内容丢失了
                try {
                    range.moveToBookmark(me.lastBk);
                    delete me.lastBk
                } catch (e) {
                    range.setStartAtFirst(me.body).collapse(true)
                }
                //ie下focus实效，所以做了个延迟
                setTimeout(function () {
                    range.select(true);
                }, 100);
                me.container.style.display = '';
            }

        },
        show: function () {
            return this.setShow();
        },
        /**
         * 隐藏编辑器
         * @method setHide
         * @example
         * ```javascript
         * editor.setHide()
         * ```
         */
        setHide: function () {
            var me = this;
            if (!me.lastBk) {
                me.lastBk = me.selection.getRange().createBookmark(true);
            }
            me.container.style.display = 'none'
        },
        hide: function () {
            return this.setHide();
        },

        /**
         * 根据指定的路径，获取对应的语言资源
         * @method getLang
         * @param { String } path 路径根据的是lang目录下的语言文件的路径结构
         * @return { Object | String } 根据路径返回语言资源的Json格式对象或者语言字符串
         * @example
         * ```javascript
         * editor.getLang('contextMenu.delete'); //如果当前是中文，那返回是的是'删除'
         * ```
         */
        getLang: function (path) {
            var lang = UE.I18N[this.options.lang];
            if (!lang) {
                throw Error("not import language file");
            }
            path = (path || "").split(".");
            for (var i = 0, ci; ci = path[i++];) {
                lang = lang[ci];
                if (!lang)break;
            }
            return lang;
        },

        /**
         * 计算编辑器html内容字符串的长度
         * @method  getContentLength
         * @return { Number } 返回计算的长度
         * @example
         * ```javascript
         * //编辑器html内容<p><strong>132</strong></p>
         * editor.getContentLength() //返回27
         * ```
         */
        /**
         * 计算编辑器当前纯文本内容的长度
         * @method  getContentLength
         * @param { Boolean } ingoneHtml 传入true时，只按照纯文本来计算
         * @return { Number } 返回计算的长度，内容中有hr/img/iframe标签，长度加1
         * @example
         * ```javascript
         * //编辑器html内容<p><strong>132</strong></p>
         * editor.getContentLength() //返回3
         * ```
         */
        getContentLength: function (ingoneHtml, tagNames) {
            var count = this.getContent(false,false,true).length;
            if (ingoneHtml) {
                tagNames = (tagNames || []).concat([ 'hr', 'img', 'iframe']);
                count = this.getContentTxt().replace(/[\t\r\n]+/g, '').length;
                for (var i = 0, ci; ci = tagNames[i++];) {
                    count += this.document.getElementsByTagName(ci).length;
                }
            }
            return count;
        },

        /**
         * 注册输入过滤规则
         * @method  addInputRule
         * @param { Function } rule 要添加的过滤规则
         * @example
         * ```javascript
         * editor.addInputRule(function(root){
         *   $.each(root.getNodesByTagName('div'),function(i,node){
         *       node.tagName="p";
         *   });
         * });
         * ```
         */
        addInputRule: function (rule) {
            this.inputRules.push(rule);
        },

        /**
         * 执行注册的过滤规则
         * @method  filterInputRule
         * @param { UE.uNode } root 要过滤的uNode节点
         * @remind 执行editor.setContent方法和执行'inserthtml'命令后，会运行该过滤函数
         * @example
         * ```javascript
         * editor.filterInputRule(editor.body);
         * ```
         * @see UE.Editor:addInputRule
         */
        filterInputRule: function (root) {
            for (var i = 0, ci; ci = this.inputRules[i++];) {
                ci.call(this, root)
            }
        },

        /**
         * 注册输出过滤规则
         * @method  addOutputRule
         * @param { Function } rule 要添加的过滤规则
         * @example
         * ```javascript
         * editor.addOutputRule(function(root){
         *   $.each(root.getNodesByTagName('p'),function(i,node){
         *       node.tagName="div";
         *   });
         * });
         * ```
         */
        addOutputRule: function (rule) {
            this.outputRules.push(rule)
        },

        /**
         * 根据输出过滤规则，过滤编辑器内容
         * @method  filterOutputRule
         * @remind 执行editor.getContent方法的时候，会先运行该过滤函数
         * @param { UE.uNode } root 要过滤的uNode节点
         * @example
         * ```javascript
         * editor.filterOutputRule(editor.body);
         * ```
         * @see UE.Editor:addOutputRule
         */
        filterOutputRule: function (root) {
            for (var i = 0, ci; ci = this.outputRules[i++];) {
                ci.call(this, root)
            }
        },

        /**
         * 根据action名称获取请求的路径
         * @method  getActionUrl
         * @remind 假如没有设置serverUrl,会根据imageUrl设置默认的controller路径
         * @param { String } action action名称
         * @example
         * ```javascript
         * editor.getActionUrl('config'); //返回 "/ueditor/php/controller.php?action=config"
         * editor.getActionUrl('image'); //返回 "/ueditor/php/controller.php?action=uplaodimage"
         * editor.getActionUrl('scrawl'); //返回 "/ueditor/php/controller.php?action=uplaodscrawl"
         * editor.getActionUrl('imageManager'); //返回 "/ueditor/php/controller.php?action=listimage"
         * ```
         */
        getActionUrl: function(action){
            var actionName = this.getOpt(action) || action,
                imageUrl = this.getOpt('imageUrl'),
                serverUrl = this.getOpt('serverUrl');

            if(!serverUrl && imageUrl) {
                serverUrl = imageUrl.replace(/^(.*[\/]).+([\.].+)$/, '$1controller$2');
            }

            if(serverUrl) {
                serverUrl = serverUrl + (serverUrl.indexOf('?') == -1 ? '?':'&') + 'action=' + (actionName || '');
                return utils.formatUrl(serverUrl);
            } else {
                return '';
            }
        }
    };
    utils.inherits(Editor, EventBase);
})();


// core/Editor.defaultoptions.js
//维护编辑器一下默认的不在插件中的配置项
UE.Editor.defaultOptions = function(editor){

    var _url = editor.options.UEDITOR_HOME_URL;
    return {
        isShow: true,
        initialContent: '',
        initialStyle:'',
        autoClearinitialContent: false,
        iframeCssUrl: _url + 'themes/iframe.css',
        textarea: 'editorValue',
        focus: false,
        focusInEnd: true,
        autoClearEmptyNode: true,
        fullscreen: false,
        readonly: false,
        zIndex: 999,
        imagePopup: true,
        enterTag: 'p',
        customDomain: false,
        lang: 'zh-cn',
        langPath: _url + 'lang/',
        theme: 'default',
        themePath: _url + 'themes/',
        allHtmlEnabled: false,
        scaleEnabled: false,
        tableNativeEditInFF: false,
        autoSyncData : true,
        fileNameFormat: '{time}{rand:6}'
    }
};

// core/loadconfig.js
(function(){

    UE.Editor.prototype.loadServerConfig = function(){
        var me = this;
        setTimeout(function(){
            try{
                me.options.imageUrl && me.setOpt('serverUrl', me.options.imageUrl.replace(/^(.*[\/]).+([\.].+)$/, '$1controller$2'));

                var configUrl = me.getActionUrl('config'),
                    isJsonp = utils.isCrossDomainUrl(configUrl);

                /* 发出ajax请求 */
                me._serverConfigLoaded = false;

                configUrl && UE.ajax.request(configUrl,{
                    'method': 'GET',
                    'dataType': isJsonp ? 'jsonp':'',
                    'onsuccess':function(r){
                        try {
                            var config = isJsonp ? r:eval("("+r.responseText+")");
                            utils.extend(me.options, config);
                            me.fireEvent('serverConfigLoaded');
                            me._serverConfigLoaded = true;
                        } catch (e) {
                            showErrorMsg(me.getLang('loadconfigFormatError'));
                        }
                    },
                    'onerror':function(){
                        showErrorMsg(me.getLang('loadconfigHttpError'));
                    }
                });
            } catch(e){
                showErrorMsg(me.getLang('loadconfigError'));
            }
        });

        function showErrorMsg(msg) {
            console && console.error(msg);
            //me.fireEvent('showMessage', {
            //    'title': msg,
            //    'type': 'error'
            //});
        }
    };

    UE.Editor.prototype.isServerConfigLoaded = function(){
        var me = this;
        return me._serverConfigLoaded || false;
    };

    UE.Editor.prototype.afterConfigReady = function(handler){
        if (!handler || !utils.isFunction(handler)) return;
        var me = this;
        var readyHandler = function(){
            handler.apply(me, arguments);
            me.removeListener('serverConfigLoaded', readyHandler);
        };

        if (me.isServerConfigLoaded()) {
            handler.call(me, 'serverConfigLoaded');
        } else {
            me.addListener('serverConfigLoaded', readyHandler);
        }
    };

})();


// core/ajax.js
/**
 * @file
 * @module UE.ajax
 * @since 1.2.6.1
 */

/**
 * 提供对ajax请求的支持
 * @module UE.ajax
 */
UE.ajax = function() {

    //创建一个ajaxRequest对象
    var fnStr = 'XMLHttpRequest()';
    try {
        new ActiveXObject("Msxml2.XMLHTTP");
        fnStr = 'ActiveXObject(\'Msxml2.XMLHTTP\')';
    } catch (e) {
        try {
            new ActiveXObject("Microsoft.XMLHTTP");
            fnStr = 'ActiveXObject(\'Microsoft.XMLHTTP\')'
        } catch (e) {
        }
    }
    var creatAjaxRequest = new Function('return new ' + fnStr);


    /**
     * 将json参数转化成适合ajax提交的参数列表
     * @param json
     */
    function json2str(json) {
        var strArr = [];
        for (var i in json) {
            //忽略默认的几个参数
            if(i=="method" || i=="timeout" || i=="async" || i=="dataType" || i=="callback") continue;
            //忽略控制
            if(json[i] == undefined || json[i] == null) continue;
            //传递过来的对象和函数不在提交之列
            if (!((typeof json[i]).toLowerCase() == "function" || (typeof json[i]).toLowerCase() == "object")) {
                strArr.push( encodeURIComponent(i) + "="+encodeURIComponent(json[i]) );
            } else if (utils.isArray(json[i])) {
            //支持传数组内容
                for(var j = 0; j < json[i].length; j++) {
                    strArr.push( encodeURIComponent(i) + "[]="+encodeURIComponent(json[i][j]) );
                }
            }
        }
        return strArr.join("&");
    }

    function doAjax(url, ajaxOptions) {
        /*var xhr = creatAjaxRequest(),
        //是否超时
            timeIsOut = false,
        //默认参数
            defaultAjaxOptions = {
                method:"POST",
                timeout:5000,
                async:true,
                data:{},//需要传递对象的话只能覆盖
                onsuccess:function() {
                },
                onerror:function() {
                }
            };

        if (typeof url === "object") {
            ajaxOptions = url;
            url = ajaxOptions.url;
        }
        if (!xhr || !url) return;
        var ajaxOpts = ajaxOptions ? utils.extend(defaultAjaxOptions,ajaxOptions) : defaultAjaxOptions;

        var submitStr = json2str(ajaxOpts);  // { name:"Jim",city:"Beijing" } --> "name=Jim&city=Beijing"
        //如果用户直接通过data参数传递json对象过来，则也要将此json对象转化为字符串
        if (!utils.isEmptyObject(ajaxOpts.data)){
            submitStr += (submitStr? "&":"") + json2str(ajaxOpts.data);
        }
        //超时检测
        var timerID = setTimeout(function() {
            if (xhr.readyState != 4) {
                timeIsOut = true;
                xhr.abort();
                clearTimeout(timerID);
            }
        }, ajaxOpts.timeout);

        var method = ajaxOpts.method.toUpperCase();
        var str = url + (url.indexOf("?")==-1?"?":"&") + (method=="POST"?"":submitStr+ "&noCache=" + +new Date);
        xhr.open(method, str, ajaxOpts.async);
        xhr.onreadystatechange = function() {
            if (xhr.readyState == 4) {
                if (!timeIsOut && xhr.status == 200) {
                    ajaxOpts.onsuccess(xhr);
                } else {
                    ajaxOpts.onerror(xhr);
                }
            }
        };
        if (method == "POST") {
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.send(submitStr);
        } else {
            xhr.send(null);
        }*/
    }

    function doJsonp(url, opts) {

        var successhandler = opts.onsuccess || function(){},
            scr = document.createElement('SCRIPT'),
            options = opts || {},
            charset = options['charset'],
            callbackField = options['jsonp'] || 'callback',
            callbackFnName,
            timeOut = options['timeOut'] || 0,
            timer,
            reg = new RegExp('(\\?|&)' + callbackField + '=([^&]*)'),
            matches;

        if (utils.isFunction(successhandler)) {
            callbackFnName = 'bd__editor__' + Math.floor(Math.random() * 2147483648).toString(36);
            window[callbackFnName] = getCallBack(0);
        } else if(utils.isString(successhandler)){
            callbackFnName = successhandler;
        } else {
            if (matches = reg.exec(url)) {
                callbackFnName = matches[2];
            }
        }

        url = url.replace(reg, '\x241' + callbackField + '=' + callbackFnName);

        if (url.search(reg) < 0) {
            url += (url.indexOf('?') < 0 ? '?' : '&') + callbackField + '=' + callbackFnName;
        }

        var queryStr = json2str(opts);  // { name:"Jim",city:"Beijing" } --> "name=Jim&city=Beijing"
        //如果用户直接通过data参数传递json对象过来，则也要将此json对象转化为字符串
        if (!utils.isEmptyObject(opts.data)){
            queryStr += (queryStr? "&":"") + json2str(opts.data);
        }
        if (queryStr) {
            url = url.replace(/\?/, '?' + queryStr + '&');
        }

        scr.onerror = getCallBack(1);
        if( timeOut ){
            timer = setTimeout(getCallBack(1), timeOut);
        }
        createScriptTag(scr, url, charset);

        function createScriptTag(scr, url, charset) {
            scr.setAttribute('type', 'text/javascript');
            scr.setAttribute('defer', 'defer');
            charset && scr.setAttribute('charset', charset);
            scr.setAttribute('src', url);
            document.getElementsByTagName('head')[0].appendChild(scr);
        }

        function getCallBack(onTimeOut){
            return function(){
                try {
                    if(onTimeOut){
                        options.onerror && options.onerror();
                    }else{
                        try{
                            clearTimeout(timer);
                            successhandler.apply(window, arguments);
                        } catch (e){}
                    }
                } catch (exception) {
                    options.onerror && options.onerror.call(window, exception);
                } finally {
                    options.oncomplete && options.oncomplete.apply(window, arguments);
                    scr.parentNode && scr.parentNode.removeChild(scr);
                    window[callbackFnName] = null;
                    try {
                        delete window[callbackFnName];
                    }catch(e){}
                }
            }
        }
    }

    return {
        /**
         * 根据给定的参数项，向指定的url发起一个ajax请求。 ajax请求完成后，会根据请求结果调用相应回调： 如果请求
         * 成功， 则调用onsuccess回调， 失败则调用 onerror 回调
         * @method request
         * @param { URLString } url ajax请求的url地址
         * @param { Object } ajaxOptions ajax请求选项的键值对，支持的选项如下：
         * @example
         * ```javascript
         * //向sayhello.php发起一个异步的Ajax GET请求, 请求超时时间为10s， 请求完成后执行相应的回调。
         * UE.ajax.requeset( 'sayhello.php', {
         *
         *     //请求方法。可选值： 'GET', 'POST'，默认值是'POST'
         *     method: 'GET',
         *
         *     //超时时间。 默认为5000， 单位是ms
         *     timeout: 10000,
         *
         *     //是否是异步请求。 true为异步请求， false为同步请求
         *     async: true,
         *
         *     //请求携带的数据。如果请求为GET请求， data会经过stringify后附加到请求url之后。
         *     data: {
         *         name: 'ueditor'
         *     },
         *
         *     //请求成功后的回调， 该回调接受当前的XMLHttpRequest对象作为参数。
         *     onsuccess: function ( xhr ) {
         *         console.log( xhr.responseText );
         *     },
         *
         *     //请求失败或者超时后的回调。
         *     onerror: function ( xhr ) {
         *          alert( 'Ajax请求失败' );
         *     }
         *
         * } );
         * ```
         */

        /**
         * 根据给定的参数项发起一个ajax请求， 参数项里必须包含一个url地址。 ajax请求完成后，会根据请求结果调用相应回调： 如果请求
         * 成功， 则调用onsuccess回调， 失败则调用 onerror 回调。
         * @method request
         * @warning 如果在参数项里未提供一个key为“url”的地址值，则该请求将直接退出。
         * @param { Object } ajaxOptions ajax请求选项的键值对，支持的选项如下：
         * @example
         * ```javascript
         *
         * //向sayhello.php发起一个异步的Ajax POST请求, 请求超时时间为5s， 请求完成后不执行任何回调。
         * UE.ajax.requeset( 'sayhello.php', {
         *
         *     //请求的地址， 该项是必须的。
         *     url: 'sayhello.php'
         *
         * } );
         * ```
         */
		request:function(url, opts) {
            if (opts && opts.dataType == 'jsonp') {
                doJsonp(url, opts);
            } else {
                doAjax(url, opts);
            }
		},
        getJSONP:function(url, data, fn) {
            var opts = {
                'data': data,
                'oncomplete': fn
            };
            doJsonp(url, opts);
		}
	};


}();


// core/filterword.js
/**
 * UE过滤word的静态方法
 * @file
 */

/**
 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
 * @module UE
 */


/**
 * 根据传入html字符串过滤word
 * @module UE
 * @since 1.2.6.1
 * @method filterWord
 * @param { String } html html字符串
 * @return { String } 已过滤后的结果字符串
 * @example
 * ```javascript
 * UE.filterWord(html);
 * ```
 */
var filterWord = UE.filterWord = function () {

    //是否是word过来的内容
    function isWordDocument( str ) {
        return /(class="?Mso|style="[^"]*\bmso\-|w:WordDocument|<(v|o):|lang=)/ig.test( str );
    }
    //去掉小数
    function transUnit( v ) {
        v = v.replace( /[\d.]+\w+/g, function ( m ) {
            return utils.transUnitToPx(m);
        } );
        return v;
    }

    function filterPasteWord( str ) {
        return str.replace(/[\t\r\n]+/g,' ')
                .replace( /<!--[\s\S]*?-->/ig, "" )
                //转换图片
                .replace(/<v:shape [^>]*>[\s\S]*?.<\/v:shape>/gi,function(str){
                    //opera能自己解析出image所这里直接返回空
                    if(browser.opera){
                        return '';
                    }
                    try{
                        //有可能是bitmap占为图，无用，直接过滤掉，主要体现在粘贴excel表格中
                        if(/Bitmap/i.test(str)){
                            return '';
                        }
                        var width = str.match(/width:([ \d.]*p[tx])/i)[1],
                            height = str.match(/height:([ \d.]*p[tx])/i)[1],
                            src =  str.match(/src=\s*"([^"]*)"/i)[1];
                        return '<img width="'+ transUnit(width) +'" height="'+transUnit(height) +'" src="' + src + '" />';
                    } catch(e){
                        return '';
                    }
                })
                //针对wps添加的多余标签处理
                .replace(/<\/?div[^>]*>/g,'')
                //去掉多余的属性
                .replace( /v:\w+=(["']?)[^'"]+\1/g, '' )
                .replace( /<(!|script[^>]*>.*?<\/script(?=[>\s])|\/?(\?xml(:\w+)?|xml|meta|link|style|\w+:\w+)(?=[\s\/>]))[^>]*>/gi, "" )
                .replace( /<p [^>]*class="?MsoHeading"?[^>]*>(.*?)<\/p>/gi, "<p><strong>$1</strong></p>" )
                //去掉多余的属性
                .replace( /\s+(class|lang|align)\s*=\s*(['"]?)([\w-]+)\2/ig, function(str,name,marks,val){
                    //保留list的标示
                    return name == 'class' && val == 'MsoListParagraph' ? str : ''
                })
                //清除多余的font/span不能匹配&nbsp;有可能是空格
                .replace( /<(font|span)[^>]*>(\s*)<\/\1>/gi, function(a,b,c){
                    return c.replace(/[\t\r\n ]+/g,' ')
                })
                //处理style的问题
                .replace( /(<[a-z][^>]*)\sstyle=(["'])([^\2]*?)\2/gi, function( str, tag, tmp, style ) {
                    var n = [],
                        s = style.replace( /^\s+|\s+$/, '' )
                            .replace(/&#39;/g,'\'')
                            .replace( /&quot;/gi, "'" )
                            .replace(/[\d.]+(cm|pt)/g,function(str){
                                return utils.transUnitToPx(str)
                            })
                            .split( /;\s*/g );

                    for ( var i = 0,v; v = s[i];i++ ) {

                        var name, value,
                            parts = v.split( ":" );

                        if ( parts.length == 2 ) {
                            name = parts[0].toLowerCase();
                            value = parts[1].toLowerCase();
                            if(/^(background)\w*/.test(name) && value.replace(/(initial|\s)/g,'').length == 0
                                ||
                                /^(margin)\w*/.test(name) && /^0\w+$/.test(value)
                            ){
                                continue;
                            }

                            switch ( name ) {
                                case "mso-padding-alt":
                                case "mso-padding-top-alt":
                                case "mso-padding-right-alt":
                                case "mso-padding-bottom-alt":
                                case "mso-padding-left-alt":
                                case "mso-margin-alt":
                                case "mso-margin-top-alt":
                                case "mso-margin-right-alt":
                                case "mso-margin-bottom-alt":
                                case "mso-margin-left-alt":
                                //ie下会出现挤到一起的情况
                               //case "mso-table-layout-alt":
                                case "mso-height":
                                case "mso-width":
                                case "mso-vertical-align-alt":
                                    //trace:1819 ff下会解析出padding在table上
                                    if(!/<table/.test(tag))
                                        n[i] = name.replace( /^mso-|-alt$/g, "" ) + ":" + transUnit( value );
                                    continue;
                                case "horiz-align":
                                    n[i] = "text-align:" + value;
                                    continue;

                                case "vert-align":
                                    n[i] = "vertical-align:" + value;
                                    continue;

                                case "font-color":
                                case "mso-foreground":
                                    n[i] = "color:" + value;
                                    continue;

                                case "mso-background":
                                case "mso-highlight":
                                    n[i] = "background:" + value;
                                    continue;

                                case "mso-default-height":
                                    n[i] = "min-height:" + transUnit( value );
                                    continue;

                                case "mso-default-width":
                                    n[i] = "min-width:" + transUnit( value );
                                    continue;

                                case "mso-padding-between-alt":
                                    n[i] = "border-collapse:separate;border-spacing:" + transUnit( value );
                                    continue;

                                case "text-line-through":
                                    if ( (value == "single") || (value == "double") ) {
                                        n[i] = "text-decoration:line-through";
                                    }
                                    continue;
                                case "mso-zero-height":
                                    if ( value == "yes" ) {
                                        n[i] = "display:none";
                                    }
                                    continue;
//                                case 'background':
//                                    break;
                                case 'margin':
                                    if ( !/[1-9]/.test( value ) ) {
                                        continue;
                                    }

                            }

                            if ( /^(mso|column|font-emph|lang|layout|line-break|list-image|nav|panose|punct|row|ruby|sep|size|src|tab-|table-border|text-(?:decor|trans)|top-bar|version|vnd|word-break)/.test( name )
                                ||
                                /text\-indent|padding|margin/.test(name) && /\-[\d.]+/.test(value)
                            ) {
                                continue;
                            }

                            n[i] = name + ":" + parts[1];
                        }
                    }
                    return tag + (n.length ? ' style="' + n.join( ';').replace(/;{2,}/g,';') + '"' : '');
                })


    }

    return function ( html ) {
        return (isWordDocument( html ) ? filterPasteWord( html ) : html);
    };
}();

// core/node.js
/**
 * 编辑器模拟的节点类
 * @file
 * @module UE
 * @class uNode
 * @since 1.2.6.1
 */

/**
 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
 * @unfile
 * @module UE
 */

(function () {

    /**
     * 编辑器模拟的节点类
     * @unfile
     * @module UE
     * @class uNode
     */

    /**
     * 通过一个键值对，创建一个uNode对象
     * @constructor
     * @param { Object } attr 传入要创建的uNode的初始属性
     * @example
     * ```javascript
     * var node = new uNode({
     *     type:'element',
     *     tagName:'span',
     *     attrs:{style:'font-size:14px;'}
     * }
     * ```
     */
    var uNode = UE.uNode = function (obj) {
        this.type = obj.type;
        this.data = obj.data;
        this.tagName = obj.tagName;
        this.parentNode = obj.parentNode;
        this.attrs = obj.attrs || {};
        this.children = obj.children;
    };

    var notTransAttrs = {
        'href':1,
        'src':1,
        '_src':1,
        '_href':1,
        'cdata_data':1
    };

    var notTransTagName = {
        style:1,
        script:1
    };

    var indentChar = '    ',
        breakChar = '\n';

    function insertLine(arr, current, begin) {
        arr.push(breakChar);
        return current + (begin ? 1 : -1);
    }

    function insertIndent(arr, current) {
        //插入缩进
        for (var i = 0; i < current; i++) {
            arr.push(indentChar);
        }
    }

    //创建uNode的静态方法
    //支持标签和html
    uNode.createElement = function (html) {
        if (/[<>]/.test(html)) {
            return UE.htmlparser(html).children[0]
        } else {
            return new uNode({
                type:'element',
                children:[],
                tagName:html
            })
        }
    };
    uNode.createText = function (data,noTrans) {
        return new UE.uNode({
            type:'text',
            'data':noTrans ? data : utils.unhtml(data || '')
        })
    };
    function nodeToHtml(node, arr, formatter, current) {
        switch (node.type) {
            case 'root':
                for (var i = 0, ci; ci = node.children[i++];) {
                    //插入新行
                    if (formatter && ci.type == 'element' && !dtd.$inlineWithA[ci.tagName] && i > 1) {
                        insertLine(arr, current, true);
                        insertIndent(arr, current)
                    }
                    nodeToHtml(ci, arr, formatter, current)
                }
                break;
            case 'text':
                isText(node, arr);
                break;
            case 'element':
                isElement(node, arr, formatter, current);
                break;
            case 'comment':
                isComment(node, arr, formatter);
        }
        return arr;
    }

    function isText(node, arr) {
        if(node.parentNode.tagName == 'pre'){
            //源码模式下输入html标签，不能做转换处理，直接输出
            arr.push(node.data)
        }else{
            arr.push(notTransTagName[node.parentNode.tagName] ? utils.html(node.data) : node.data.replace(/[ ]{2}/g,' &nbsp;'))
        }

    }

    function isElement(node, arr, formatter, current) {
        var attrhtml = '';
        if (node.attrs) {
            attrhtml = [];
            var attrs = node.attrs;
            for (var a in attrs) {
                //这里就针对
                //<p>'<img src='http://nsclick.baidu.com/u.gif?&asdf=\"sdf&asdfasdfs;asdf'></p>
                //这里边的\"做转换，要不用innerHTML直接被截断了，属性src
                //有可能做的不够
                attrhtml.push(a + (attrs[a] !== undefined ? '="' + (notTransAttrs[a] ? utils.html(attrs[a]).replace(/["]/g, function (a) {
                   return '&quot;'
                }) : utils.unhtml(attrs[a])) + '"' : ''))
            }
            attrhtml = attrhtml.join(' ');
        }
        arr.push('<' + node.tagName +
            (attrhtml ? ' ' + attrhtml  : '') +
            (dtd.$empty[node.tagName] ? '\/' : '' ) + '>'
        );
        //插入新行
        if (formatter  &&  !dtd.$inlineWithA[node.tagName] && node.tagName != 'pre') {
            if(node.children && node.children.length){
                current = insertLine(arr, current, true);
                insertIndent(arr, current)
            }

        }
        if (node.children && node.children.length) {
            for (var i = 0, ci; ci = node.children[i++];) {
                if (formatter && ci.type == 'element' &&  !dtd.$inlineWithA[ci.tagName] && i > 1) {
                    insertLine(arr, current);
                    insertIndent(arr, current)
                }
                nodeToHtml(ci, arr, formatter, current)
            }
        }
        if (!dtd.$empty[node.tagName]) {
            if (formatter && !dtd.$inlineWithA[node.tagName]  && node.tagName != 'pre') {

                if(node.children && node.children.length){
                    current = insertLine(arr, current);
                    insertIndent(arr, current)
                }
            }
            arr.push('<\/' + node.tagName + '>');
        }

    }

    function isComment(node, arr) {
        arr.push('<!--' + node.data + '-->');
    }

    function getNodeById(root, id) {
        var node;
        if (root.type == 'element' && root.getAttr('id') == id) {
            return root;
        }
        if (root.children && root.children.length) {
            for (var i = 0, ci; ci = root.children[i++];) {
                if (node = getNodeById(ci, id)) {
                    return node;
                }
            }
        }
    }

    function getNodesByTagName(node, tagName, arr) {
        if (node.type == 'element' && node.tagName == tagName) {
            arr.push(node);
        }
        if (node.children && node.children.length) {
            for (var i = 0, ci; ci = node.children[i++];) {
                getNodesByTagName(ci, tagName, arr)
            }
        }
    }
    function nodeTraversal(root,fn){
        if(root.children && root.children.length){
            for(var i= 0,ci;ci=root.children[i];){
                nodeTraversal(ci,fn);
                //ci被替换的情况，这里就不再走 fn了
                if(ci.parentNode ){
                    if(ci.children && ci.children.length){
                        fn(ci)
                    }
                    if(ci.parentNode) i++
                }
            }
        }else{
            fn(root)
        }

    }
    uNode.prototype = {

        /**
         * 当前节点对象，转换成html文本
         * @method toHtml
         * @return { String } 返回转换后的html字符串
         * @example
         * ```javascript
         * node.toHtml();
         * ```
         */

        /**
         * 当前节点对象，转换成html文本
         * @method toHtml
         * @param { Boolean } formatter 是否格式化返回值
         * @return { String } 返回转换后的html字符串
         * @example
         * ```javascript
         * node.toHtml( true );
         * ```
         */
        toHtml:function (formatter) {
            var arr = [];
            nodeToHtml(this, arr, formatter, 0);
            return arr.join('')
        },

        /**
         * 获取节点的html内容
         * @method innerHTML
         * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
         * @return { String } 返回节点的html内容
         * @example
         * ```javascript
         * var htmlstr = node.innerHTML();
         * ```
         */

        /**
         * 设置节点的html内容
         * @method innerHTML
         * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
         * @param { String } htmlstr 传入要设置的html内容
         * @return { UE.uNode } 返回节点本身
         * @example
         * ```javascript
         * node.innerHTML('<span>text</span>');
         * ```
         */
        innerHTML:function (htmlstr) {
            if (this.type != 'element' || dtd.$empty[this.tagName]) {
                return this;
            }
            if (utils.isString(htmlstr)) {
                if(this.children){
                    for (var i = 0, ci; ci = this.children[i++];) {
                        ci.parentNode = null;
                    }
                }
                this.children = [];
                var tmpRoot = UE.htmlparser(htmlstr);
                for (var i = 0, ci; ci = tmpRoot.children[i++];) {
                    this.children.push(ci);
                    ci.parentNode = this;
                }
                return this;
            } else {
                var tmpRoot = new UE.uNode({
                    type:'root',
                    children:this.children
                });
                return tmpRoot.toHtml();
            }
        },

        /**
         * 获取节点的纯文本内容
         * @method innerText
         * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
         * @return { String } 返回节点的存文本内容
         * @example
         * ```javascript
         * var textStr = node.innerText();
         * ```
         */

        /**
         * 设置节点的纯文本内容
         * @method innerText
         * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
         * @param { String } textStr 传入要设置的文本内容
         * @return { UE.uNode } 返回节点本身
         * @example
         * ```javascript
         * node.innerText('<span>text</span>');
         * ```
         */
        innerText:function (textStr,noTrans) {
            if (this.type != 'element' || dtd.$empty[this.tagName]) {
                return this;
            }
            if (textStr) {
                if(this.children){
                    for (var i = 0, ci; ci = this.children[i++];) {
                        ci.parentNode = null;
                    }
                }
                this.children = [];
                this.appendChild(uNode.createText(textStr,noTrans));
                return this;
            } else {
                return this.toHtml().replace(/<[^>]+>/g, '');
            }
        },

        /**
         * 获取当前对象的data属性
         * @method getData
         * @return { Object } 若节点的type值是elemenet，返回空字符串，否则返回节点的data属性
         * @example
         * ```javascript
         * node.getData();
         * ```
         */
        getData:function () {
            if (this.type == 'element')
                return '';
            return this.data
        },

        /**
         * 获取当前节点下的第一个子节点
         * @method firstChild
         * @return { UE.uNode } 返回第一个子节点
         * @example
         * ```javascript
         * node.firstChild(); //返回第一个子节点
         * ```
         */
        firstChild:function () {
//            if (this.type != 'element' || dtd.$empty[this.tagName]) {
//                return this;
//            }
            return this.children ? this.children[0] : null;
        },

        /**
         * 获取当前节点下的最后一个子节点
         * @method lastChild
         * @return { UE.uNode } 返回最后一个子节点
         * @example
         * ```javascript
         * node.lastChild(); //返回最后一个子节点
         * ```
         */
        lastChild:function () {
//            if (this.type != 'element' || dtd.$empty[this.tagName] ) {
//                return this;
//            }
            return this.children ? this.children[this.children.length - 1] : null;
        },

        /**
         * 获取和当前节点有相同父亲节点的前一个节点
         * @method previousSibling
         * @return { UE.uNode } 返回前一个节点
         * @example
         * ```javascript
         * node.children[2].previousSibling(); //返回子节点node.children[1]
         * ```
         */
        previousSibling : function(){
            var parent = this.parentNode;
            for (var i = 0, ci; ci = parent.children[i]; i++) {
                if (ci === this) {
                   return i == 0 ? null : parent.children[i-1];
                }
            }

        },

        /**
         * 获取和当前节点有相同父亲节点的后一个节点
         * @method nextSibling
         * @return { UE.uNode } 返回后一个节点,找不到返回null
         * @example
         * ```javascript
         * node.children[2].nextSibling(); //如果有，返回子节点node.children[3]
         * ```
         */
        nextSibling : function(){
            var parent = this.parentNode;
            for (var i = 0, ci; ci = parent.children[i++];) {
                if (ci === this) {
                    return parent.children[i];
                }
            }
        },

        /**
         * 用新的节点替换当前节点
         * @method replaceChild
         * @param { UE.uNode } target 要替换成该节点参数
         * @param { UE.uNode } source 要被替换掉的节点
         * @return { UE.uNode } 返回替换之后的节点对象
         * @example
         * ```javascript
         * node.replaceChild(newNode, childNode); //用newNode替换childNode,childNode是node的子节点
         * ```
         */
        replaceChild:function (target, source) {
            if (this.children) {
                if(target.parentNode){
                    target.parentNode.removeChild(target);
                }
                for (var i = 0, ci; ci = this.children[i]; i++) {
                    if (ci === source) {
                        this.children.splice(i, 1, target);
                        source.parentNode = null;
                        target.parentNode = this;
                        return target;
                    }
                }
            }
        },

        /**
         * 在节点的子节点列表最后位置插入一个节点
         * @method appendChild
         * @param { UE.uNode } node 要插入的节点
         * @return { UE.uNode } 返回刚插入的子节点
         * @example
         * ```javascript
         * node.appendChild( newNode ); //在node内插入子节点newNode
         * ```
         */
        appendChild:function (node) {
            if (this.type == 'root' || (this.type == 'element' && !dtd.$empty[this.tagName])) {
                if (!this.children) {
                    this.children = []
                }
                if(node.parentNode){
                    node.parentNode.removeChild(node);
                }
                for (var i = 0, ci; ci = this.children[i]; i++) {
                    if (ci === node) {
                        this.children.splice(i, 1);
                        break;
                    }
                }
                this.children.push(node);
                node.parentNode = this;
                return node;
            }


        },

        /**
         * 在传入节点的前面插入一个节点
         * @method insertBefore
         * @param { UE.uNode } target 要插入的节点
         * @param { UE.uNode } source 在该参数节点前面插入
         * @return { UE.uNode } 返回刚插入的子节点
         * @example
         * ```javascript
         * node.parentNode.insertBefore(newNode, node); //在node节点后面插入newNode
         * ```
         */
        insertBefore:function (target, source) {
            if (this.children) {
                if(target.parentNode){
                    target.parentNode.removeChild(target);
                }
                for (var i = 0, ci; ci = this.children[i]; i++) {
                    if (ci === source) {
                        this.children.splice(i, 0, target);
                        target.parentNode = this;
                        return target;
                    }
                }

            }
        },

        /**
         * 在传入节点的后面插入一个节点
         * @method insertAfter
         * @param { UE.uNode } target 要插入的节点
         * @param { UE.uNode } source 在该参数节点后面插入
         * @return { UE.uNode } 返回刚插入的子节点
         * @example
         * ```javascript
         * node.parentNode.insertAfter(newNode, node); //在node节点后面插入newNode
         * ```
         */
        insertAfter:function (target, source) {
            if (this.children) {
                if(target.parentNode){
                    target.parentNode.removeChild(target);
                }
                for (var i = 0, ci; ci = this.children[i]; i++) {
                    if (ci === source) {
                        this.children.splice(i + 1, 0, target);
                        target.parentNode = this;
                        return target;
                    }

                }
            }
        },

        /**
         * 从当前节点的子节点列表中，移除节点
         * @method removeChild
         * @param { UE.uNode } node 要移除的节点引用
         * @param { Boolean } keepChildren 是否保留移除节点的子节点，若传入true，自动把移除节点的子节点插入到移除的位置
         * @return { * } 返回刚移除的子节点
         * @example
         * ```javascript
         * node.removeChild(childNode,true); //在node的子节点列表中移除child节点，并且吧child的子节点插入到移除的位置
         * ```
         */
        removeChild:function (node,keepChildren) {
            if (this.children) {
                for (var i = 0, ci; ci = this.children[i]; i++) {
                    if (ci === node) {
                        this.children.splice(i, 1);
                        ci.parentNode = null;
                        if(keepChildren && ci.children && ci.children.length){
                            for(var j= 0,cj;cj=ci.children[j];j++){
                                this.children.splice(i+j,0,cj);
                                cj.parentNode = this;

                            }
                        }
                        return ci;
                    }
                }
            }
        },

        /**
         * 获取当前节点所代表的元素属性，即获取attrs对象下的属性值
         * @method getAttr
         * @param { String } attrName 要获取的属性名称
         * @return { * } 返回attrs对象下的属性值
         * @example
         * ```javascript
         * node.getAttr('title');
         * ```
         */
        getAttr:function (attrName) {
            return this.attrs && this.attrs[attrName.toLowerCase()]
        },

        /**
         * 设置当前节点所代表的元素属性，即设置attrs对象下的属性值
         * @method setAttr
         * @param { String } attrName 要设置的属性名称
         * @param { * } attrVal 要设置的属性值，类型视设置的属性而定
         * @return { * } 返回attrs对象下的属性值
         * @example
         * ```javascript
         * node.setAttr('title','标题');
         * ```
         */
        setAttr:function (attrName, attrVal) {
            if (!attrName) {
                delete this.attrs;
                return;
            }
            if(!this.attrs){
                this.attrs = {};
            }
            if (utils.isObject(attrName)) {
                for (var a in attrName) {
                    if (!attrName[a]) {
                        delete this.attrs[a]
                    } else {
                        this.attrs[a.toLowerCase()] = attrName[a];
                    }
                }
            } else {
                if (!attrVal) {
                    delete this.attrs[attrName]
                } else {
                    this.attrs[attrName.toLowerCase()] = attrVal;
                }

            }
        },

        /**
         * 获取当前节点在父节点下的位置索引
         * @method getIndex
         * @return { Number } 返回索引数值，如果没有父节点，返回-1
         * @example
         * ```javascript
         * node.getIndex();
         * ```
         */
        getIndex:function(){
            var parent = this.parentNode;
            for(var i= 0,ci;ci=parent.children[i];i++){
                if(ci === this){
                    return i;
                }
            }
            return -1;
        },

        /**
         * 在当前节点下，根据id查找节点
         * @method getNodeById
         * @param { String } id 要查找的id
         * @return { UE.uNode } 返回找到的节点
         * @example
         * ```javascript
         * node.getNodeById('textId');
         * ```
         */
        getNodeById:function (id) {
            var node;
            if (this.children && this.children.length) {
                for (var i = 0, ci; ci = this.children[i++];) {
                    if (node = getNodeById(ci, id)) {
                        return node;
                    }
                }
            }
        },

        /**
         * 在当前节点下，根据元素名称查找节点列表
         * @method getNodesByTagName
         * @param { String } tagNames 要查找的元素名称
         * @return { Array } 返回找到的节点列表
         * @example
         * ```javascript
         * node.getNodesByTagName('span');
         * ```
         */
        getNodesByTagName:function (tagNames) {
            tagNames = utils.trim(tagNames).replace(/[ ]{2,}/g, ' ').split(' ');
            var arr = [], me = this;
            utils.each(tagNames, function (tagName) {
                if (me.children && me.children.length) {
                    for (var i = 0, ci; ci = me.children[i++];) {
                        getNodesByTagName(ci, tagName, arr)
                    }
                }
            });
            return arr;
        },

        /**
         * 根据样式名称，获取节点的样式值
         * @method getStyle
         * @param { String } name 要获取的样式名称
         * @return { String } 返回样式值
         * @example
         * ```javascript
         * node.getStyle('font-size');
         * ```
         */
        getStyle:function (name) {
            var cssStyle = this.getAttr('style');
            if (!cssStyle) {
                return ''
            }
            var reg = new RegExp('(^|;)\\s*' + name + ':([^;]+)','i');
            var match = cssStyle.match(reg);
            if (match && match[0]) {
                return match[2]
            }
            return '';
        },

        /**
         * 给节点设置样式
         * @method setStyle
         * @param { String } name 要设置的的样式名称
         * @param { String } val 要设置的的样值
         * @example
         * ```javascript
         * node.setStyle('font-size', '12px');
         * ```
         */
        setStyle:function (name, val) {
            function exec(name, val) {
                var reg = new RegExp('(^|;)\\s*' + name + ':([^;]+;?)', 'gi');
                cssStyle = cssStyle.replace(reg, '$1');
                if (val) {
                    cssStyle = name + ':' + utils.unhtml(val) + ';' + cssStyle
                }

            }

            var cssStyle = this.getAttr('style');
            if (!cssStyle) {
                cssStyle = '';
            }
            if (utils.isObject(name)) {
                for (var a in name) {
                    exec(a, name[a])
                }
            } else {
                exec(name, val)
            }
            this.setAttr('style', utils.trim(cssStyle))
        },

        /**
         * 传入一个函数，递归遍历当前节点下的所有节点
         * @method traversal
         * @param { Function } fn 遍历到节点的时，传入节点作为参数，运行此函数
         * @example
         * ```javascript
         * traversal(node, function(){
         *     console.log(node.type);
         * });
         * ```
         */
        traversal:function(fn){
            if(this.children && this.children.length){
                nodeTraversal(this,fn);
            }
            return this;
        }
    }
})();


// core/htmlparser.js
/**
 * html字符串转换成uNode节点
 * @file
 * @module UE
 * @since 1.2.6.1
 */

/**
 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
 * @unfile
 * @module UE
 */

/**
 * html字符串转换成uNode节点的静态方法
 * @method htmlparser
 * @param { String } htmlstr 要转换的html代码
 * @param { Boolean } ignoreBlank 若设置为true，转换的时候忽略\n\r\t等空白字符
 * @return { uNode } 给定的html片段转换形成的uNode对象
 * @example
 * ```javascript
 * var root = UE.htmlparser('<p><b>htmlparser</b></p>', true);
 * ```
 */

var htmlparser = UE.htmlparser = function (htmlstr,ignoreBlank) {
    //todo 原来的方式  [^"'<>\/] 有\/就不能配对上 <TD vAlign=top background=../AAA.JPG> 这样的标签了
    //先去掉了，加上的原因忘了，这里先记录
    var re_tag = /<(?:(?:\/([^>]+)>)|(?:!--([\S|\s]*?)-->)|(?:([^\s\/<>]+)\s*((?:(?:"[^"]*")|(?:'[^']*')|[^"'<>])*)\/?>))/g,
        re_attr = /([\w\-:.]+)(?:(?:\s*=\s*(?:(?:"([^"]*)")|(?:'([^']*)')|([^\s>]+)))|(?=\s|$))/g;

    //ie下取得的html可能会有\n存在，要去掉，在处理replace(/[\t\r\n]*/g,'');代码高量的\n不能去除
    var allowEmptyTags = {
        b:1,code:1,i:1,u:1,strike:1,s:1,tt:1,strong:1,q:1,samp:1,em:1,span:1,
        sub:1,img:1,sup:1,font:1,big:1,small:1,iframe:1,a:1,br:1,pre:1
    };
    htmlstr = htmlstr.replace(new RegExp(domUtils.fillChar, 'g'), '');
    if(!ignoreBlank){
        htmlstr = htmlstr.replace(new RegExp('[\\r\\t\\n'+(ignoreBlank?'':' ')+']*<\/?(\\w+)\\s*(?:[^>]*)>[\\r\\t\\n'+(ignoreBlank?'':' ')+']*','g'), function(a,b){
            //br暂时单独处理
            if(b && allowEmptyTags[b.toLowerCase()]){
                return a.replace(/(^[\n\r]+)|([\n\r]+$)/g,'');
            }
            return a.replace(new RegExp('^[\\r\\n'+(ignoreBlank?'':' ')+']+'),'').replace(new RegExp('[\\r\\n'+(ignoreBlank?'':' ')+']+$'),'');
        });
    }

    var notTransAttrs = {
        'href':1,
        'src':1
    };

    var uNode = UE.uNode,
        needParentNode = {
            'td':'tr',
            'tr':['tbody','thead','tfoot'],
            'tbody':'table',
            'th':'tr',
            'thead':'table',
            'tfoot':'table',
            'caption':'table',
            'li':['ul', 'ol'],
            'dt':'dl',
            'dd':'dl',
            'option':'select'
        },
        needChild = {
            'ol':'li',
            'ul':'li'
        };

    function text(parent, data) {

        if(needChild[parent.tagName]){
            var tmpNode = uNode.createElement(needChild[parent.tagName]);
            parent.appendChild(tmpNode);
            tmpNode.appendChild(uNode.createText(data));
            parent = tmpNode;
        }else{

            parent.appendChild(uNode.createText(data));
        }
    }

    function element(parent, tagName, htmlattr) {
        var needParentTag;
        if (needParentTag = needParentNode[tagName]) {
            var tmpParent = parent,hasParent;
            while(tmpParent.type != 'root'){
                if(utils.isArray(needParentTag) ? utils.indexOf(needParentTag, tmpParent.tagName) != -1 : needParentTag == tmpParent.tagName){
                    parent = tmpParent;
                    hasParent = true;
                    break;
                }
                tmpParent = tmpParent.parentNode;
            }
            if(!hasParent){
                parent = element(parent, utils.isArray(needParentTag) ? needParentTag[0] : needParentTag)
            }
        }
        //按dtd处理嵌套
//        if(parent.type != 'root' && !dtd[parent.tagName][tagName])
//            parent = parent.parentNode;
        var elm = new uNode({
            parentNode:parent,
            type:'element',
            tagName:tagName.toLowerCase(),
            //是自闭合的处理一下
            children:dtd.$empty[tagName] ? null : []
        });
        //如果属性存在，处理属性
        if (htmlattr) {
            var attrs = {}, match;
            while (match = re_attr.exec(htmlattr)) {
                attrs[match[1].toLowerCase()] = notTransAttrs[match[1].toLowerCase()] ? (match[2] || match[3] || match[4]) : utils.unhtml(match[2] || match[3] || match[4])
            }
            elm.attrs = attrs;
        }
        //trace:3970
//        //如果parent下不能放elm
//        if(dtd.$inline[parent.tagName] && dtd.$block[elm.tagName] && !dtd[parent.tagName][elm.tagName]){
//            parent = parent.parentNode;
//            elm.parentNode = parent;
//        }
        parent.children.push(elm);
        //如果是自闭合节点返回父亲节点
        return  dtd.$empty[tagName] ? parent : elm
    }

    function comment(parent, data) {
        parent.children.push(new uNode({
            type:'comment',
            data:data,
            parentNode:parent
        }));
    }

    var match, currentIndex = 0, nextIndex = 0;
    //设置根节点
    var root = new uNode({
        type:'root',
        children:[]
    });
    var currentParent = root;

    while (match = re_tag.exec(htmlstr)) {
        currentIndex = match.index;
        try{
            if (currentIndex > nextIndex) {
                //text node
                text(currentParent, htmlstr.slice(nextIndex, currentIndex));
            }
            if (match[3]) {

                if(dtd.$cdata[currentParent.tagName]){
                    text(currentParent, match[0]);
                }else{
                    //start tag
                    currentParent = element(currentParent, match[3].toLowerCase(), match[4]);
                }


            } else if (match[1]) {
                if(currentParent.type != 'root'){
                    if(dtd.$cdata[currentParent.tagName] && !dtd.$cdata[match[1]]){
                        text(currentParent, match[0]);
                    }else{
                        var tmpParent = currentParent;
                        while(currentParent.type == 'element' && currentParent.tagName != match[1].toLowerCase()){
                            currentParent = currentParent.parentNode;
                            if(currentParent.type == 'root'){
                                currentParent = tmpParent;
                                throw 'break'
                            }
                        }
                        //end tag
                        currentParent = currentParent.parentNode;
                    }

                }

            } else if (match[2]) {
                //comment
                comment(currentParent, match[2])
            }
        }catch(e){}

        nextIndex = re_tag.lastIndex;

    }
    //如果结束是文本，就有可能丢掉，所以这里手动判断一下
    //例如 <li>sdfsdfsdf<li>sdfsdfsdfsdf
    if (nextIndex < htmlstr.length) {
        text(currentParent, htmlstr.slice(nextIndex));
    }
    return root;
};

// core/filternode.js
/**
 * UE过滤节点的静态方法
 * @file
 */

/**
 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
 * @module UE
 */


/**
 * 根据传入节点和过滤规则过滤相应节点
 * @module UE
 * @since 1.2.6.1
 * @method filterNode
 * @param { Object } root 指定root节点
 * @param { Object } rules 过滤规则json对象
 * @example
 * ```javascript
 * UE.filterNode(root,editor.options.filterRules);
 * ```
 */
var filterNode = UE.filterNode = function () {
    function filterNode(node,rules){
        switch (node.type) {
            case 'text':
                break;
            case 'element':
                var val;
                if(val = rules[node.tagName]){
                   if(val === '-'){
                       node.parentNode.removeChild(node)
                   }else if(utils.isFunction(val)){
                       var parentNode = node.parentNode,
                           index = node.getIndex();
                       val(node);
                       if(node.parentNode){
                           if(node.children){
                               for(var i = 0,ci;ci=node.children[i];){
                                   filterNode(ci,rules);
                                   if(ci.parentNode){
                                       i++;
                                   }
                               }
                           }
                       }else{
                           for(var i = index,ci;ci=parentNode.children[i];){
                               filterNode(ci,rules);
                               if(ci.parentNode){
                                   i++;
                               }
                           }
                       }


                   }else{
                       var attrs = val['$'];
                       if(attrs && node.attrs){
                           var tmpAttrs = {},tmpVal;
                           for(var a in attrs){
                               tmpVal = node.getAttr(a);
                               //todo 只先对style单独处理
                               if(a == 'style' && utils.isArray(attrs[a])){
                                   var tmpCssStyle = [];
                                   utils.each(attrs[a],function(v){
                                       var tmp;
                                       if(tmp = node.getStyle(v)){
                                           tmpCssStyle.push(v + ':' + tmp);
                                       }
                                   });
                                   tmpVal = tmpCssStyle.join(';')
                               }
                               if(tmpVal){
                                   tmpAttrs[a] = tmpVal;
                               }

                           }
                           node.attrs = tmpAttrs;
                       }
                       if(node.children){
                           for(var i = 0,ci;ci=node.children[i];){
                               filterNode(ci,rules);
                               if(ci.parentNode){
                                   i++;
                               }
                           }
                       }
                   }
                }else{
                    //如果不在名单里扣出子节点并删除该节点,cdata除外
                    if(dtd.$cdata[node.tagName]){
                        node.parentNode.removeChild(node)
                    }else{
                        var parentNode = node.parentNode,
                            index = node.getIndex();
                        node.parentNode.removeChild(node,true);
                        for(var i = index,ci;ci=parentNode.children[i];){
                            filterNode(ci,rules);
                            if(ci.parentNode){
                                i++;
                            }
                        }
                    }
                }
                break;
            case 'comment':
                node.parentNode.removeChild(node)
        }

    }
    return function(root,rules){
        if(utils.isEmptyObject(rules)){
            return root;
        }
        var val;
        if(val = rules['-']){
            utils.each(val.split(' '),function(k){
                rules[k] = '-'
            })
        }
        for(var i= 0,ci;ci=root.children[i];){
            filterNode(ci,rules);
            if(ci.parentNode){
               i++;
            }
        }
        return root;
    }
}();

// core/plugin.js
/**
 * Created with JetBrains PhpStorm.
 * User: campaign
 * Date: 10/8/13
 * Time: 6:15 PM
 * To change this template use File | Settings | File Templates.
 */
UE.plugin = function(){
    var _plugins = {};
    return {
        register : function(pluginName,fn,oldOptionName,afterDisabled){
            if(oldOptionName && utils.isFunction(oldOptionName)){
                afterDisabled = oldOptionName;
                oldOptionName = null
            }
            _plugins[pluginName] = {
                optionName : oldOptionName || pluginName,
                execFn : fn,
                //当插件被禁用时执行
                afterDisabled : afterDisabled
            }
        },
        load : function(editor){
            utils.each(_plugins,function(plugin){
                var _export = plugin.execFn.call(editor);
                if(editor.options[plugin.optionName] !== false){
                    if(_export){
                        //后边需要再做扩展
                        utils.each(_export,function(v,k){
                            switch(k.toLowerCase()){
                                case 'shortcutkey':
                                    editor.addshortcutkey(v);
                                    break;
                                case 'bindevents':
                                    utils.each(v,function(fn,eventName){
                                        editor.addListener(eventName,fn);
                                    });
                                    break;
                                case 'bindmultievents':
                                    utils.each(utils.isArray(v) ? v:[v],function(event){
                                        var types = utils.trim(event.type).split(/\s+/);
                                        utils.each(types,function(eventName){
                                            editor.addListener(eventName, event.handler);
                                        });
                                    });
                                    break;
                                case 'commands':
                                    utils.each(v,function(execFn,execName){
                                        editor.commands[execName] = execFn
                                    });
                                    break;
                                case 'outputrule':
                                    editor.addOutputRule(v);
                                    break;
                                case 'inputrule':
                                    editor.addInputRule(v);
                                    break;
                                case 'defaultoptions':
                                    editor.setOpt(v)
                            }
                        })
                    }

                }else if(plugin.afterDisabled){
                    plugin.afterDisabled.call(editor)
                }

            });
            //向下兼容
            utils.each(UE.plugins,function(plugin){
                plugin.call(editor);
            });
        },
        run : function(pluginName,editor){
            var plugin = _plugins[pluginName];
            if(plugin){
                plugin.exeFn.call(editor)
            }
        }
    }
}();

// core/keymap.js
var keymap = UE.keymap  = {
    'Backspace' : 8,
    'Tab' : 9,
    'Enter' : 13,

    'Shift':16,
    'Control':17,
    'Alt':18,
    'CapsLock':20,

    'Esc':27,

    'Spacebar':32,

    'PageUp':33,
    'PageDown':34,
    'End':35,
    'Home':36,

    'Left':37,
    'Up':38,
    'Right':39,
    'Down':40,

    'Insert':45,

    'Del':46,

    'NumLock':144,

    'Cmd':91,

    '=':187,
    '-':189,

    "b":66,
    'i':73,
    //回退
    'z':90,
    'y':89,
    //粘贴
    'v' : 86,
    'x' : 88,

    's' : 83,

    'n' : 78
};

// core/localstorage.js
//存储媒介封装
var LocalStorage = UE.LocalStorage = (function () {

    var storage = window.localStorage || getUserData() || null,
        LOCAL_FILE = 'localStorage';

    return {

        saveLocalData: function (key, data) {

            if (storage && data) {
                storage.setItem(key, data);
                return true;
            }

            return false;

        },

        getLocalData: function (key) {

            if (storage) {
                return storage.getItem(key);
            }

            return null;

        },

        removeItem: function (key) {

            storage && storage.removeItem(key);

        }

    };

    function getUserData() {

        var container = document.createElement("div");
        container.style.display = "none";

        if (!container.addBehavior) {
            return null;
        }

        container.addBehavior("#default#userdata");

        return {

            getItem: function (key) {

                var result = null;

                try {
                    document.body.appendChild(container);
                    container.load(LOCAL_FILE);
                    result = container.getAttribute(key);
                    document.body.removeChild(container);
                } catch (e) {
                }

                return result;

            },

            setItem: function (key, value) {

                document.body.appendChild(container);
                container.setAttribute(key, value);
                container.save(LOCAL_FILE);
                document.body.removeChild(container);

            },

            //// 暂时没有用到
            //clear: function () {
            //
            //    var expiresTime = new Date();
            //    expiresTime.setFullYear(expiresTime.getFullYear() - 1);
            //    document.body.appendChild(container);
            //    container.expires = expiresTime.toUTCString();
            //    container.save(LOCAL_FILE);
            //    document.body.removeChild(container);
            //
            //},

            removeItem: function (key) {

                document.body.appendChild(container);
                container.removeAttribute(key);
                container.save(LOCAL_FILE);
                document.body.removeChild(container);

            }

        };

    }

})();

(function () {

    var ROOTKEY = 'ueditor_preference';

    UE.Editor.prototype.setPreferences = function(key,value){
        var obj = {};
        if (utils.isString(key)) {
            obj[ key ] = value;
        } else {
            obj = key;
        }
        var data = LocalStorage.getLocalData(ROOTKEY);
        if (data && (data = utils.str2json(data))) {
            utils.extend(data, obj);
        } else {
            data = obj;
        }
        data && LocalStorage.saveLocalData(ROOTKEY, utils.json2str(data));
    };

    UE.Editor.prototype.getPreferences = function(key){
        var data = LocalStorage.getLocalData(ROOTKEY);
        if (data && (data = utils.str2json(data))) {
            return key ? data[key] : data
        }
        return null;
    };

    UE.Editor.prototype.removePreferences = function (key) {
        var data = LocalStorage.getLocalData(ROOTKEY);
        if (data && (data = utils.str2json(data))) {
            data[key] = undefined;
            delete data[key]
        }
        data && LocalStorage.saveLocalData(ROOTKEY, utils.json2str(data));
    };

})();


// plugins/defaultfilter.js
///import core
///plugin 编辑器默认的过滤转换机制

UE.plugins['defaultfilter'] = function () {
    var me = this;
    me.setOpt({
        'allowDivTransToP':true,
        'disabledTableInTable':true
    });
    //默认的过滤处理
    //进入编辑器的内容处理
    me.addInputRule(function (root) {
        var allowDivTransToP = this.options.allowDivTransToP;
        var val;
        function tdParent(node){
            while(node && node.type == 'element'){
                if(node.tagName == 'td'){
                    return true;
                }
                node = node.parentNode;
            }
            return false;
        }
        //进行默认的处理
        root.traversal(function (node) {
            if (node.type == 'element') {
                if (!dtd.$cdata[node.tagName] && me.options.autoClearEmptyNode && dtd.$inline[node.tagName] && !dtd.$empty[node.tagName] && (!node.attrs || utils.isEmptyObject(node.attrs))) {
                    if (!node.firstChild()) node.parentNode.removeChild(node);
                    else if (node.tagName == 'span' && (!node.attrs || utils.isEmptyObject(node.attrs))) {
                        node.parentNode.removeChild(node, true)
                    }
                    return;
                }
                switch (node.tagName) {
                    case 'style':
                    case 'script':
                        node.setAttr({
                            cdata_tag: node.tagName,
                            cdata_data: (node.innerHTML() || ''),
                            '_ue_custom_node_':'true'
                        });
                        node.tagName = 'div';
                        node.innerHTML('');
                        break;
                    case 'a':
                        if (val = node.getAttr('href')) {
                            node.setAttr('_href', val)
                        }
                        break;
                    case 'img':
                        //todo base64暂时去掉，后边做远程图片上传后，干掉这个
                        if (val = node.getAttr('src')) {
                            if (/^data:/.test(val)) {
                                node.parentNode.removeChild(node);
                                break;
                            }
                        }
                        node.setAttr('_src', node.getAttr('src'));
                        break;
                    case 'span':
                        if (browser.webkit && (val = node.getStyle('white-space'))) {
                            if (/nowrap|normal/.test(val)) {
                                node.setStyle('white-space', '');
                                if (me.options.autoClearEmptyNode && utils.isEmptyObject(node.attrs)) {
                                    node.parentNode.removeChild(node, true)
                                }
                            }
                        }
                        val = node.getAttr('id');
                        if(val && /^_baidu_bookmark_/i.test(val)){
                            node.parentNode.removeChild(node)
                        }
                        break;
                    case 'p':
                        if (val = node.getAttr('align')) {
                            node.setAttr('align');
                            node.setStyle('text-align', val)
                        }
                        //trace:3431
//                        var cssStyle = node.getAttr('style');
//                        if (cssStyle) {
//                            cssStyle = cssStyle.replace(/(margin|padding)[^;]+/g, '');
//                            node.setAttr('style', cssStyle)
//
//                        }
                        //p标签不允许嵌套
                        utils.each(node.children,function(n){
                            if(n.type == 'element' && n.tagName == 'p'){
                                var next = n.nextSibling();
                                node.parentNode.insertAfter(n,node);
                                var last = n;
                                while(next){
                                    var tmp = next.nextSibling();
                                    node.parentNode.insertAfter(next,last);
                                    last = next;
                                    next = tmp;
                                }
                                return false;
                            }
                        });
                        if (!node.firstChild()) {
                            node.innerHTML(browser.ie ? '&nbsp;' : '<br/>')
                        }
                        break;
                    case 'div':
                        if(node.getAttr('cdata_tag')){
                            break;
                        }
                        //针对代码这里不处理插入代码的div
                        val = node.getAttr('class');
                        if(val && /^line number\d+/.test(val)){
                            break;
                        }
                        if(!allowDivTransToP){
                            break;
                        }
                        var tmpNode, p = UE.uNode.createElement('p');
                        while (tmpNode = node.firstChild()) {
                            if (tmpNode.type == 'text' || !UE.dom.dtd.$block[tmpNode.tagName]) {
                                p.appendChild(tmpNode);
                            } else {
                                if (p.firstChild()) {
                                    node.parentNode.insertBefore(p, node);
                                    p = UE.uNode.createElement('p');
                                } else {
                                    node.parentNode.insertBefore(tmpNode, node);
                                }
                            }
                        }
                        if (p.firstChild()) {
                            node.parentNode.insertBefore(p, node);
                        }
                        node.parentNode.removeChild(node);
                        break;
                    case 'dl':
                        node.tagName = 'ul';
                        break;
                    case 'dt':
                    case 'dd':
                        node.tagName = 'li';
                        break;
                    case 'li':
                        var className = node.getAttr('class');
                        if (!className || !/list\-/.test(className)) {
                            node.setAttr()
                        }
                        var tmpNodes = node.getNodesByTagName('ol ul');
                        UE.utils.each(tmpNodes, function (n) {
                            node.parentNode.insertAfter(n, node);
                        });
                        break;
                    case 'td':
                    case 'th':
                    case 'caption':
                        if(!node.children || !node.children.length){
                            node.appendChild(browser.ie11below ? UE.uNode.createText(' ') : UE.uNode.createElement('br'))
                        }
                        break;
                    case 'table':
                        if(me.options.disabledTableInTable && tdParent(node)){
                            node.parentNode.insertBefore(UE.uNode.createText(node.innerText()),node);
                            node.parentNode.removeChild(node)
                        }
                }

            }
//            if(node.type == 'comment'){
//                node.parentNode.removeChild(node);
//            }
        })

    });

    //从编辑器出去的内容处理
    me.addOutputRule(function (root) {

        var val;
        root.traversal(function (node) {
            if (node.type == 'element') {

                if (me.options.autoClearEmptyNode && dtd.$inline[node.tagName] && !dtd.$empty[node.tagName] && (!node.attrs || utils.isEmptyObject(node.attrs))) {

                    if (!node.firstChild()) node.parentNode.removeChild(node);
                    else if (node.tagName == 'span' && (!node.attrs || utils.isEmptyObject(node.attrs))) {
                        node.parentNode.removeChild(node, true)
                    }
                    return;
                }
                switch (node.tagName) {
                    case 'div':
                        if (val = node.getAttr('cdata_tag')) {
                            node.tagName = val;
                            node.appendChild(UE.uNode.createText(node.getAttr('cdata_data')));
                            node.setAttr({cdata_tag: '', cdata_data: '','_ue_custom_node_':''});
                        }
                        break;
                    case 'a':
                        if (val = node.getAttr('_href')) {
                            node.setAttr({
                                'href': utils.html(val),
                                '_href': ''
                            })
                        }
                        break;
                        break;
                    case 'span':
                        val = node.getAttr('id');
                        if(val && /^_baidu_bookmark_/i.test(val)){
                            node.parentNode.removeChild(node)
                        }
                        break;
                    case 'img':
                        if (val = node.getAttr('_src')) {
                            node.setAttr({
                                'src': node.getAttr('_src'),
                                '_src': ''
                            })
                        }


                }
            }

        })


    });
};


// plugins/inserthtml.js
/**
 * 插入html字符串插件
 * @file
 * @since 1.2.6.1
 */

/**
 * 插入html代码
 * @command inserthtml
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @param { String } html 插入的html字符串
 * @remaind 插入的标签内容是在当前的选区位置上插入，如果当前是闭合状态，那直接插入内容， 如果当前是选中状态，将先清除当前选中内容后，再做插入
 * @warning 注意:该命令会对当前选区的位置，对插入的内容进行过滤转换处理。 过滤的规则遵循html语意化的原则。
 * @example
 * ```javascript
 * //xxx[BB]xxx 当前选区为非闭合选区，选中BB这两个文本
 * //执行命令，插入<b>CC</b>
 * //插入后的效果 xxx<b>CC</b>xxx
 * //<p>xx|xxx</p> 当前选区为闭合状态
 * //插入<p>CC</p>
 * //结果 <p>xx</p><p>CC</p><p>xxx</p>
 * //<p>xxxx</p>|</p>xxx</p> 当前选区在两个p标签之间
 * //插入 xxxx
 * //结果 <p>xxxx</p><p>xxxx</p></p>xxx</p>
 * ```
 */

UE.commands['inserthtml'] = {
    execCommand: function (command,html,notNeedFilter){
        var me = this,
            range,
            div;
        if(!html){
            return;
        }
        if(me.fireEvent('beforeinserthtml',html) === true){
            return;
        }
        range = me.selection.getRange();
        div = range.document.createElement( 'div' );
        div.style.display = 'inline';

        if (!notNeedFilter) {
            var root = UE.htmlparser(html);
            //如果给了过滤规则就先进行过滤
            if(me.options.filterRules){
                UE.filterNode(root,me.options.filterRules);
            }
            //执行默认的处理
            me.filterInputRule(root);
            html = root.toHtml()
        }
        div.innerHTML = utils.trim( html );

        if ( !range.collapsed ) {
            var tmpNode = range.startContainer;
            if(domUtils.isFillChar(tmpNode)){
                range.setStartBefore(tmpNode)
            }
            tmpNode = range.endContainer;
            if(domUtils.isFillChar(tmpNode)){
                range.setEndAfter(tmpNode)
            }
            range.txtToElmBoundary();
            //结束边界可能放到了br的前边，要把br包含进来
            // x[xxx]<br/>
            if(range.endContainer && range.endContainer.nodeType == 1){
                tmpNode = range.endContainer.childNodes[range.endOffset];
                if(tmpNode && domUtils.isBr(tmpNode)){
                    range.setEndAfter(tmpNode);
                }
            }
            if(range.startOffset == 0){
                tmpNode = range.startContainer;
                if(domUtils.isBoundaryNode(tmpNode,'firstChild') ){
                    tmpNode = range.endContainer;
                    if(range.endOffset == (tmpNode.nodeType == 3 ? tmpNode.nodeValue.length : tmpNode.childNodes.length) && domUtils.isBoundaryNode(tmpNode,'lastChild')){
                        me.body.innerHTML = '<p>'+(browser.ie ? '' : '<br/>')+'</p>';
                        range.setStart(me.body.firstChild,0).collapse(true)

                    }
                }
            }
            !range.collapsed && range.deleteContents();
            if(range.startContainer.nodeType == 1){
                var child = range.startContainer.childNodes[range.startOffset],pre;
                if(child && domUtils.isBlockElm(child) && (pre = child.previousSibling) && domUtils.isBlockElm(pre)){
                    range.setEnd(pre,pre.childNodes.length).collapse();
                    while(child.firstChild){
                        pre.appendChild(child.firstChild);
                    }
                    domUtils.remove(child);
                }
            }

        }


        var child,parent,pre,tmp,hadBreak = 0, nextNode;
        //如果当前位置选中了fillchar要干掉，要不会产生空行
        if(range.inFillChar()){
            child = range.startContainer;
            if(domUtils.isFillChar(child)){
                range.setStartBefore(child).collapse(true);
                domUtils.remove(child);
            }else if(domUtils.isFillChar(child,true)){
                child.nodeValue = child.nodeValue.replace(fillCharReg,'');
                range.startOffset--;
                range.collapsed && range.collapse(true)
            }
        }
        //列表单独处理
        var li = domUtils.findParentByTagName(range.startContainer,'li',true);
        if(li){
            var next,last;
            while(child = div.firstChild){
                //针对hr单独处理一下先
                while(child && (child.nodeType == 3 || !domUtils.isBlockElm(child) || child.tagName=='HR' )){
                    next = child.nextSibling;
                    range.insertNode( child).collapse();
                    last = child;
                    child = next;

                }
                if(child){
                    if(/^(ol|ul)$/i.test(child.tagName)){
                        while(child.firstChild){
                            last = child.firstChild;
                            domUtils.insertAfter(li,child.firstChild);
                            li = li.nextSibling;
                        }
                        domUtils.remove(child)
                    }else{
                        var tmpLi;
                        next = child.nextSibling;
                        tmpLi = me.document.createElement('li');
                        domUtils.insertAfter(li,tmpLi);
                        tmpLi.appendChild(child);
                        last = child;
                        child = next;
                        li = tmpLi;
                    }
                }
            }
            li = domUtils.findParentByTagName(range.startContainer,'li',true);
            if(domUtils.isEmptyBlock(li)){
                domUtils.remove(li)
            }
            if(last){

                range.setStartAfter(last).collapse(true).select(true)
            }
        }else{
            while ( child = div.firstChild ) {
                if(hadBreak){
                    var p = me.document.createElement('p');
                    while(child && (child.nodeType == 3 || !dtd.$block[child.tagName])){
                        nextNode = child.nextSibling;
                        p.appendChild(child);
                        child = nextNode;
                    }
                    if(p.firstChild){

                        child = p
                    }
                }
                range.insertNode( child );
                nextNode = child.nextSibling;
                if ( !hadBreak && child.nodeType == domUtils.NODE_ELEMENT && domUtils.isBlockElm( child ) ){

                    parent = domUtils.findParent( child,function ( node ){ return domUtils.isBlockElm( node ); } );
                    if ( parent && parent.tagName.toLowerCase() != 'body' && !(dtd[parent.tagName][child.nodeName] && child.parentNode === parent)){
                        if(!dtd[parent.tagName][child.nodeName]){
                            pre = parent;
                        }else{
                            tmp = child.parentNode;
                            while (tmp !== parent){
                                pre = tmp;
                                tmp = tmp.parentNode;

                            }
                        }


                        domUtils.breakParent( child, pre || tmp );
                        //去掉break后前一个多余的节点  <p>|<[p> ==> <p></p><div></div><p>|</p>
                        var pre = child.previousSibling;
                        domUtils.trimWhiteTextNode(pre);
                        if(!pre.childNodes.length){
                            domUtils.remove(pre);
                        }
                        //trace:2012,在非ie的情况，切开后剩下的节点有可能不能点入光标添加br占位

                        if(!browser.ie &&
                            (next = child.nextSibling) &&
                            domUtils.isBlockElm(next) &&
                            next.lastChild &&
                            !domUtils.isBr(next.lastChild)){
                            next.appendChild(me.document.createElement('br'));
                        }
                        hadBreak = 1;
                    }
                }
                var next = child.nextSibling;
                if(!div.firstChild && next && domUtils.isBlockElm(next)){

                    range.setStart(next,0).collapse(true);
                    break;
                }
                range.setEndAfter( child ).collapse();

            }

            child = range.startContainer;

            if(nextNode && domUtils.isBr(nextNode)){
                domUtils.remove(nextNode)
            }
            //用chrome可能有空白展位符
            if(domUtils.isBlockElm(child) && domUtils.isEmptyNode(child)){
                if(nextNode = child.nextSibling){
                    domUtils.remove(child);
                    if(nextNode.nodeType == 1 && dtd.$block[nextNode.tagName]){

                        range.setStart(nextNode,0).collapse(true).shrinkBoundary()
                    }
                }else{

                    try{
                        child.innerHTML = browser.ie ? domUtils.fillChar : '<br/>';
                    }catch(e){
                        range.setStartBefore(child);
                        domUtils.remove(child)
                    }

                }

            }
            //加上true因为在删除表情等时会删两次，第一次是删的fillData
            try{
                range.select(true);
            }catch(e){}

        }



        setTimeout(function(){
            range = me.selection.getRange();
            range.scrollToView(me.autoHeightEnabled,me.autoHeightEnabled ? domUtils.getXY(me.iframe).y:0);
            me.fireEvent('afterinserthtml', html);
        },200);
    }
};


// plugins/autotypeset.js
/**
 * 自动排版
 * @file
 * @since 1.2.6.1
 */

/**
 * 对当前编辑器的内容执行自动排版， 排版的行为根据config配置文件里的“autotypeset”选项进行控制。
 * @command autotypeset
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'autotypeset' );
 * ```
 */

UE.plugins['autotypeset'] = function(){

    this.setOpt({'autotypeset': {
        mergeEmptyline: true,           //合并空行
        removeClass: true,              //去掉冗余的class
        removeEmptyline: false,         //去掉空行
        textAlign:"left",               //段落的排版方式，可以是 left,right,center,justify 去掉这个属性表示不执行排版
        imageBlockLine: 'center',       //图片的浮动方式，独占一行剧中,左右浮动，默认: center,left,right,none 去掉这个属性表示不执行排版
        pasteFilter: false,             //根据规则过滤没事粘贴进来的内容
        clearFontSize: false,           //去掉所有的内嵌字号，使用编辑器默认的字号
        clearFontFamily: false,         //去掉所有的内嵌字体，使用编辑器默认的字体
        removeEmptyNode: false,         // 去掉空节点
        //可以去掉的标签
        removeTagNames: utils.extend({div:1},dtd.$removeEmpty),
        indent: false,                  // 行首缩进
        indentValue : '2em',            //行首缩进的大小
        bdc2sb: false,
        tobdc: false
    }});

    var me = this,
        opt = me.options.autotypeset,
        remainClass = {
            'selectTdClass':1,
            'pagebreak':1,
            'anchorclass':1
        },
        remainTag = {
            'li':1
        },
        tags = {
            div:1,
            p:1,
            //trace:2183 这些也认为是行
            blockquote:1,center:1,h1:1,h2:1,h3:1,h4:1,h5:1,h6:1,
            span:1
        },
        highlightCont;
    //升级了版本，但配置项目里没有autotypeset
    if(!opt){
        return;
    }

    readLocalOpts();

    function isLine(node,notEmpty){
        if(!node || node.nodeType == 3)
            return 0;
        if(domUtils.isBr(node))
            return 1;
        if(node && node.parentNode && tags[node.tagName.toLowerCase()]){
            if(highlightCont && highlightCont.contains(node)
                ||
                node.getAttribute('pagebreak')
            ){
                return 0;
            }

            return notEmpty ? !domUtils.isEmptyBlock(node) : domUtils.isEmptyBlock(node,new RegExp('[\\s'+domUtils.fillChar
                +']','g'));
        }
    }

    function removeNotAttributeSpan(node){
        if(!node.style.cssText){
            domUtils.removeAttributes(node,['style']);
            if(node.tagName.toLowerCase() == 'span' && domUtils.hasNoAttributes(node)){
                domUtils.remove(node,true);
            }
        }
    }
    function autotype(type,html){

        var me = this,cont;
        if(html){
            if(!opt.pasteFilter){
                return;
            }
            cont = me.document.createElement('div');
            cont.innerHTML = html.html;
        }else{
            cont = me.document.body;
        }
        var nodes = domUtils.getElementsByTagName(cont,'*');

        // 行首缩进，段落方向，段间距，段内间距
        for(var i=0,ci;ci=nodes[i++];){

            if(me.fireEvent('excludeNodeinautotype',ci) === true){
                continue;
            }
             //font-size
            if(opt.clearFontSize && ci.style.fontSize){
                domUtils.removeStyle(ci,'font-size');

                removeNotAttributeSpan(ci);

            }
            //font-family
            if(opt.clearFontFamily && ci.style.fontFamily){
                domUtils.removeStyle(ci,'font-family');
                removeNotAttributeSpan(ci);
            }

            if(isLine(ci)){
                //合并空行
                if(opt.mergeEmptyline ){
                    var next = ci.nextSibling,tmpNode,isBr = domUtils.isBr(ci);
                    while(isLine(next)){
                        tmpNode = next;
                        next = tmpNode.nextSibling;
                        if(isBr && (!next || next && !domUtils.isBr(next))){
                            break;
                        }
                        domUtils.remove(tmpNode);
                    }

                }
                 //去掉空行，保留占位的空行
                if(opt.removeEmptyline && domUtils.inDoc(ci,cont) && !remainTag[ci.parentNode.tagName.toLowerCase()] ){
                    if(domUtils.isBr(ci)){
                        next = ci.nextSibling;
                        if(next && !domUtils.isBr(next)){
                            continue;
                        }
                    }
                    domUtils.remove(ci);
                    continue;

                }

            }
            if(isLine(ci,true) && ci.tagName != 'SPAN'){
                if(opt.indent){
                    ci.style.textIndent = opt.indentValue;
                }
                if(opt.textAlign){
                    ci.style.textAlign = opt.textAlign;
                }
                // if(opt.lineHeight)
                //     ci.style.lineHeight = opt.lineHeight + 'cm';

            }

            //去掉class,保留的class不去掉
            if(opt.removeClass && ci.className && !remainClass[ci.className.toLowerCase()]){

                if(highlightCont && highlightCont.contains(ci)){
                     continue;
                }
                domUtils.removeAttributes(ci,['class']);
            }

            //表情不处理
            if(opt.imageBlockLine && ci.tagName.toLowerCase() == 'img' && !ci.getAttribute('emotion')){
                if(html){
                    var img = ci;
                    switch (opt.imageBlockLine){
                        case 'left':
                        case 'right':
                        case 'none':
                            var pN = img.parentNode,tmpNode,pre,next;
                            while(dtd.$inline[pN.tagName] || pN.tagName == 'A'){
                                pN = pN.parentNode;
                            }
                            tmpNode = pN;
                            if(tmpNode.tagName == 'P' && domUtils.getStyle(tmpNode,'text-align') == 'center'){
                                if(!domUtils.isBody(tmpNode) && domUtils.getChildCount(tmpNode,function(node){return !domUtils.isBr(node) && !domUtils.isWhitespace(node)}) == 1){
                                    pre = tmpNode.previousSibling;
                                    next = tmpNode.nextSibling;
                                    if(pre && next && pre.nodeType == 1 &&  next.nodeType == 1 && pre.tagName == next.tagName && domUtils.isBlockElm(pre)){
                                        pre.appendChild(tmpNode.firstChild);
                                        while(next.firstChild){
                                            pre.appendChild(next.firstChild);
                                        }
                                        domUtils.remove(tmpNode);
                                        domUtils.remove(next);
                                    }else{
                                        domUtils.setStyle(tmpNode,'text-align','');
                                    }


                                }


                            }
                            domUtils.setStyle(img,'float', opt.imageBlockLine);
                            break;
                        case 'center':
                            if(me.queryCommandValue('imagefloat') != 'center'){
                                pN = img.parentNode;
                                domUtils.setStyle(img,'float','none');
                                tmpNode = img;
                                while(pN && domUtils.getChildCount(pN,function(node){return !domUtils.isBr(node) && !domUtils.isWhitespace(node)}) == 1
                                    && (dtd.$inline[pN.tagName] || pN.tagName == 'A')){
                                    tmpNode = pN;
                                    pN = pN.parentNode;
                                }
                                var pNode = me.document.createElement('p');
                                domUtils.setAttributes(pNode,{

                                    style:'text-align:center'
                                });
                                tmpNode.parentNode.insertBefore(pNode,tmpNode);
                                pNode.appendChild(tmpNode);
                                domUtils.setStyle(tmpNode,'float','');

                            }


                    }
                } else {
                    var range = me.selection.getRange();
                    range.selectNode(ci).select();
                    me.execCommand('imagefloat', opt.imageBlockLine);
                }

            }

            //去掉冗余的标签
            if(opt.removeEmptyNode){
                if(opt.removeTagNames[ci.tagName.toLowerCase()] && domUtils.hasNoAttributes(ci) && domUtils.isEmptyBlock(ci)){
                    domUtils.remove(ci);
                }
            }
        }
        if(opt.tobdc){
            var root = UE.htmlparser(cont.innerHTML);
            root.traversal(function(node){
                if(node.type == 'text'){
                    node.data = ToDBC(node.data)
                }
            });
            cont.innerHTML = root.toHtml()
        }
        if(opt.bdc2sb){
            var root = UE.htmlparser(cont.innerHTML);
            root.traversal(function(node){
                if(node.type == 'text'){
                    node.data = DBC2SB(node.data)
                }
            });
            cont.innerHTML = root.toHtml()
        }
        if(html){
            html.html = cont.innerHTML;
        }
    }
    if(opt.pasteFilter){
        me.addListener('beforepaste',autotype);
    }

    function DBC2SB(str) {
        var result = '';
        for (var i = 0; i < str.length; i++) {
            var code = str.charCodeAt(i); //获取当前字符的unicode编码
            if (code >= 65281 && code <= 65373)//在这个unicode编码范围中的是所有的英文字母已经各种字符
            {
                result += String.fromCharCode(str.charCodeAt(i) - 65248); //把全角字符的unicode编码转换为对应半角字符的unicode码
            } else if (code == 12288)//空格
            {
                result += String.fromCharCode(str.charCodeAt(i) - 12288 + 32);
            } else {
                result += str.charAt(i);
            }
        }
        return result;
    }
    function ToDBC(txtstring) {
        txtstring = utils.html(txtstring);
        var tmp = "";
        var mark = "";/*用于判断,如果是html尖括里的标记,则不进行全角的转换*/
        for (var i = 0; i < txtstring.length; i++) {
            if (txtstring.charCodeAt(i) == 32) {
                tmp = tmp + String.fromCharCode(12288);
            }
            else if (txtstring.charCodeAt(i) < 127) {
                tmp = tmp + String.fromCharCode(txtstring.charCodeAt(i) + 65248);
            }
            else {
                tmp += txtstring.charAt(i);
            }
        }
        return tmp;
    }

    function readLocalOpts() {
        var cookieOpt = me.getPreferences('autotypeset');
        utils.extend(me.options.autotypeset, cookieOpt);
    }

    me.commands['autotypeset'] = {
        execCommand:function () {
            me.removeListener('beforepaste',autotype);
            if(opt.pasteFilter){
                me.addListener('beforepaste',autotype);
            }
            autotype.call(me)
        }

    };

};



// plugins/autosubmit.js
/**
 * 快捷键提交
 * @file
 * @since 1.2.6.1
 */

/**
 * 提交表单
 * @command autosubmit
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'autosubmit' );
 * ```
 */

UE.plugin.register('autosubmit',function(){
    return {
        shortcutkey:{
            "autosubmit":"ctrl+13" //手动提交
        },
        commands:{
            'autosubmit':{
                execCommand:function () {
                    var me=this,
                        form = domUtils.findParentByTagName(me.iframe,"form", false);
                    if (form){
                        if(me.fireEvent("beforesubmit")===false){
                            return;
                        }
                        me.sync();
                        form.submit();
                    }
                }
            }
        }
    }
});

// plugins/background.js
/**
 * 背景插件，为UEditor提供设置背景功能
 * @file
 * @since 1.2.6.1
 */
UE.plugin.register('background', function () {
    var me = this,
        cssRuleId = 'editor_background',
        isSetColored,
        reg = new RegExp('body[\\s]*\\{(.+)\\}', 'i');

    function stringToObj(str) {
        var obj = {}, styles = str.split(';');
        utils.each(styles, function (v) {
            var index = v.indexOf(':'),
                key = utils.trim(v.substr(0, index)).toLowerCase();
            key && (obj[key] = utils.trim(v.substr(index + 1) || ''));
        });
        return obj;
    }

    function setBackground(obj) {
        if (obj) {
            var styles = [];
            for (var name in obj) {
                if (obj.hasOwnProperty(name)) {
                    styles.push(name + ":" + obj[name] + '; ');
                }
            }
            utils.cssRule(cssRuleId, styles.length ? ('body{' + styles.join("") + '}') : '', me.document);
        } else {
            utils.cssRule(cssRuleId, '', me.document)
        }
    }
    //重写editor.hasContent方法

    var orgFn = me.hasContents;
    me.hasContents = function(){
        if(me.queryCommandValue('background')){
            return true
        }
        return orgFn.apply(me,arguments);
    };
    return {
        bindEvents: {
            'getAllHtml': function (type, headHtml) {
                var body = this.body,
                    su = domUtils.getComputedStyle(body, "background-image"),
                    url = "";
                if (su.indexOf(me.options.imagePath) > 0) {
                    url = su.substring(su.indexOf(me.options.imagePath), su.length - 1).replace(/"|\(|\)/ig, "");
                } else {
                    url = su != "none" ? su.replace(/url\("?|"?\)/ig, "") : "";
                }
                var html = '<style type="text/css">body{';
                var bgObj = {
                    "background-color": domUtils.getComputedStyle(body, "background-color") || "#ffffff",
                    'background-image': url ? 'url(' + url + ')' : '',
                    'background-repeat': domUtils.getComputedStyle(body, "background-repeat") || "",
                    'background-position': browser.ie ? (domUtils.getComputedStyle(body, "background-position-x") + " " + domUtils.getComputedStyle(body, "background-position-y")) : domUtils.getComputedStyle(body, "background-position"),
                    'height': domUtils.getComputedStyle(body, "height")
                };
                for (var name in bgObj) {
                    if (bgObj.hasOwnProperty(name)) {
                        html += name + ":" + bgObj[name] + "; ";
                    }
                }
                html += '}</style> ';
                headHtml.push(html);
            },
            'aftersetcontent': function () {
                if(isSetColored == false) setBackground();
            }
        },
        inputRule: function (root) {
            isSetColored = false;
            utils.each(root.getNodesByTagName('p'), function (p) {
                var styles = p.getAttr('data-background');
                if (styles) {
                    isSetColored = true;
                    setBackground(stringToObj(styles));
                    p.parentNode.removeChild(p);
                }
            })
        },
        outputRule: function (root) {
            var me = this,
                styles = (utils.cssRule(cssRuleId, me.document) || '').replace(/[\n\r]+/g, '').match(reg);
            if (styles) {
                root.appendChild(UE.uNode.createElement('<p style="display:none;" data-background="' + utils.trim(styles[1].replace(/"/g, '').replace(/[\s]+/g, ' ')) + '"><br/></p>'));
            }
        },
        commands: {
            'background': {
                execCommand: function (cmd, obj) {
                    setBackground(obj);
                },
                queryCommandValue: function () {
                    var me = this,
                        styles = (utils.cssRule(cssRuleId, me.document) || '').replace(/[\n\r]+/g, '').match(reg);
                    return styles ? stringToObj(styles[1]) : null;
                },
                notNeedUndo: true
            }
        }
    }
});

// plugins/image.js
/**
 * 图片插入、排版插件
 * @file
 * @since 1.2.6.1
 */

/**
 * 图片对齐方式
 * @command imagefloat
 * @method execCommand
 * @remind 值center为独占一行居中
 * @param { String } cmd 命令字符串
 * @param { String } align 对齐方式，可传left、right、none、center
 * @remaind center表示图片独占一行
 * @example
 * ```javascript
 * editor.execCommand( 'imagefloat', 'center' );
 * ```
 */

/**
 * 如果选区所在位置是图片区域
 * @command imagefloat
 * @method queryCommandValue
 * @param { String } cmd 命令字符串
 * @return { String } 返回图片对齐方式
 * @example
 * ```javascript
 * editor.queryCommandValue( 'imagefloat' );
 * ```
 */

UE.commands['imagefloat'] = {
    execCommand:function (cmd, align) {
        var me = this,
            range = me.selection.getRange();
        if (!range.collapsed) {
            var img = range.getClosedNode();
            if (img && img.tagName == 'IMG') {
                switch (align) {
                    case 'left':
                    case 'right':
                    case 'none':
                        var pN = img.parentNode, tmpNode, pre, next;
                        while (dtd.$inline[pN.tagName] || pN.tagName == 'A') {
                            pN = pN.parentNode;
                        }
                        tmpNode = pN;
                        if (tmpNode.tagName == 'P' && domUtils.getStyle(tmpNode, 'text-align') == 'center') {
                            if (!domUtils.isBody(tmpNode) && domUtils.getChildCount(tmpNode, function (node) {
                                return !domUtils.isBr(node) && !domUtils.isWhitespace(node);
                            }) == 1) {
                                pre = tmpNode.previousSibling;
                                next = tmpNode.nextSibling;
                                if (pre && next && pre.nodeType == 1 && next.nodeType == 1 && pre.tagName == next.tagName && domUtils.isBlockElm(pre)) {
                                    pre.appendChild(tmpNode.firstChild);
                                    while (next.firstChild) {
                                        pre.appendChild(next.firstChild);
                                    }
                                    domUtils.remove(tmpNode);
                                    domUtils.remove(next);
                                } else {
                                    domUtils.setStyle(tmpNode, 'text-align', '');
                                }


                            }

                            range.selectNode(img).select();
                        }
                        domUtils.setStyle(img, 'float', align == 'none' ? '' : align);
                        if(align == 'none'){
                            domUtils.removeAttributes(img,'align');
                        }

                        break;
                    case 'center':
                        if (me.queryCommandValue('imagefloat') != 'center') {
                            pN = img.parentNode;
                            domUtils.setStyle(img, 'float', '');
                            domUtils.removeAttributes(img,'align');
                            tmpNode = img;
                            while (pN && domUtils.getChildCount(pN, function (node) {
                                return !domUtils.isBr(node) && !domUtils.isWhitespace(node);
                            }) == 1
                                && (dtd.$inline[pN.tagName] || pN.tagName == 'A')) {
                                tmpNode = pN;
                                pN = pN.parentNode;
                            }
                            range.setStartBefore(tmpNode).setCursor(false);
                            pN = me.document.createElement('div');
                            pN.appendChild(tmpNode);
                            domUtils.setStyle(tmpNode, 'float', '');

                            me.execCommand('insertHtml', '<p id="_img_parent_tmp" style="text-align:center">' + pN.innerHTML + '</p>');

                            tmpNode = me.document.getElementById('_img_parent_tmp');
                            tmpNode.removeAttribute('id');
                            tmpNode = tmpNode.firstChild;
                            range.selectNode(tmpNode).select();
                            //去掉后边多余的元素
                            next = tmpNode.parentNode.nextSibling;
                            if (next && domUtils.isEmptyNode(next)) {
                                domUtils.remove(next);
                            }

                        }

                        break;
                }

            }
        }
    },
    queryCommandValue:function () {
        var range = this.selection.getRange(),
            startNode, floatStyle;
        if (range.collapsed) {
            return 'none';
        }
        startNode = range.getClosedNode();
        if (startNode && startNode.nodeType == 1 && startNode.tagName == 'IMG') {
            floatStyle = domUtils.getComputedStyle(startNode, 'float') || startNode.getAttribute('align');

            if (floatStyle == 'none') {
                floatStyle = domUtils.getComputedStyle(startNode.parentNode, 'text-align') == 'center' ? 'center' : floatStyle;
            }
            return {
                left:1,
                right:1,
                center:1
            }[floatStyle] ? floatStyle : 'none';
        }
        return 'none';


    },
    queryCommandState:function () {
        var range = this.selection.getRange(),
            startNode;

        if (range.collapsed)  return -1;

        startNode = range.getClosedNode();
        if (startNode && startNode.nodeType == 1 && startNode.tagName == 'IMG') {
            return 0;
        }
        return -1;
    }
};


/**
 * 插入图片
 * @command insertimage
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @param { Object } opt 属性键值对，这些属性都将被复制到当前插入图片
 * @remind 该命令第二个参数可接受一个图片配置项对象的数组，可以插入多张图片，
 * 此时数组的每一个元素都是一个Object类型的图片属性集合。
 * @example
 * ```javascript
 * editor.execCommand( 'insertimage', {
 *     src:'a/b/c.jpg',
 *     width:'100',
 *     height:'100'
 * } );
 * ```
 * @example
 * ```javascript
 * editor.execCommand( 'insertimage', [{
 *     src:'a/b/c.jpg',
 *     width:'100',
 *     height:'100'
 * },{
 *     src:'a/b/d.jpg',
 *     width:'100',
 *     height:'100'
 * }] );
 * ```
 */

UE.commands['insertimage'] = {
    execCommand:function (cmd, opt) {

        opt = utils.isArray(opt) ? opt : [opt];
        if (!opt.length) {
            return;
        }
        var me = this,
            range = me.selection.getRange(),
            img = range.getClosedNode();

        if(me.fireEvent('beforeinsertimage', opt) === true){
            return;
        }

        if (img && /img/i.test(img.tagName) && (img.className != "edui-faked-video" || img.className.indexOf("edui-upload-video")!=-1) && !img.getAttribute("word_img")) {
            var first = opt.shift();
            var floatStyle = first['floatStyle'];
            delete first['floatStyle'];
////                img.style.border = (first.border||0) +"px solid #000";
////                img.style.margin = (first.margin||0) +"px";
//                img.style.cssText += ';margin:' + (first.margin||0) +"px;" + 'border:' + (first.border||0) +"px solid #000";
            domUtils.setAttributes(img, first);
            me.execCommand('imagefloat', floatStyle);
            if (opt.length > 0) {
                range.setStartAfter(img).setCursor(false, true);
                me.execCommand('insertimage', opt);
            }

        } else {
            var html = [], str = '', ci;
            ci = opt[0];
            if (opt.length == 1) {
                str = '<img src="' + ci.src + '" ' + (ci._src ? ' _src="' + ci._src + '" ' : '') +
                    (ci.width ? 'width="' + ci.width + '" ' : '') +
                    (ci.height ? ' height="' + ci.height + '" ' : '') +
                    (ci['floatStyle'] == 'left' || ci['floatStyle'] == 'right' ? ' style="float:' + ci['floatStyle'] + ';"' : '') +
                    (ci.title && ci.title != "" ? ' title="' + ci.title + '"' : '') +
                    (ci.border && ci.border != "0" ? ' border="' + ci.border + '"' : '') +
                    (ci.alt && ci.alt != "" ? ' alt="' + ci.alt + '"' : '') +
                    (ci.hspace && ci.hspace != "0" ? ' hspace = "' + ci.hspace + '"' : '') +
                    (ci.vspace && ci.vspace != "0" ? ' vspace = "' + ci.vspace + '"' : '') + '/>';
                if (ci['floatStyle'] == 'center') {
                    str = '<p style="text-align: center">' + str + '</p>';
                }
                html.push(str);

            } else {
                for (var i = 0; ci = opt[i++];) {
                    str = '<p ' + (ci['floatStyle'] == 'center' ? 'style="text-align: center" ' : '') + '><img src="' + ci.src + '" ' +
                        (ci.width ? 'width="' + ci.width + '" ' : '') + (ci._src ? ' _src="' + ci._src + '" ' : '') +
                        (ci.height ? ' height="' + ci.height + '" ' : '') +
                        ' style="' + (ci['floatStyle'] && ci['floatStyle'] != 'center' ? 'float:' + ci['floatStyle'] + ';' : '') +
                        (ci.border || '') + '" ' +
                        (ci.title ? ' title="' + ci.title + '"' : '') + ' /></p>';
                    html.push(str);
                }
            }

            me.execCommand('insertHtml', html.join(''));
        }

        me.fireEvent('afterinsertimage', opt)
    }
};

// plugins/justify.js
/**
 * 段落格式
 * @file
 * @since 1.2.6.1
 */

/**
 * 段落对齐方式
 * @command justify
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @param { String } align 对齐方式：left => 居左，right => 居右，center => 居中，justify => 两端对齐
 * @example
 * ```javascript
 * editor.execCommand( 'justify', 'center' );
 * ```
 */
/**
 * 如果选区所在位置是段落区域，返回当前段落对齐方式
 * @command justify
 * @method queryCommandValue
 * @param { String } cmd 命令字符串
 * @return { String } 返回段落对齐方式
 * @example
 * ```javascript
 * editor.queryCommandValue( 'justify' );
 * ```
 */

UE.plugins['justify']=function(){
    var me=this,
        block = domUtils.isBlockElm,
        defaultValue = {
            left:1,
            right:1,
            center:1,
            justify:1
        },
        doJustify = function (range, style) {
            var bookmark = range.createBookmark(),
                filterFn = function (node) {
                    return node.nodeType == 1 ? node.tagName.toLowerCase() != 'br' && !domUtils.isBookmarkNode(node) : !domUtils.isWhitespace(node);
                };

            range.enlarge(true);
            var bookmark2 = range.createBookmark(),
                current = domUtils.getNextDomNode(bookmark2.start, false, filterFn),
                tmpRange = range.cloneRange(),
                tmpNode;
            while (current && !(domUtils.getPosition(current, bookmark2.end) & domUtils.POSITION_FOLLOWING)) {
                if (current.nodeType == 3 || !block(current)) {
                    tmpRange.setStartBefore(current);
                    while (current && current !== bookmark2.end && !block(current)) {
                        tmpNode = current;
                        current = domUtils.getNextDomNode(current, false, null, function (node) {
                            return !block(node);
                        });
                    }
                    tmpRange.setEndAfter(tmpNode);
                    var common = tmpRange.getCommonAncestor();
                    if (!domUtils.isBody(common) && block(common)) {
                        domUtils.setStyles(common, utils.isString(style) ? {'text-align':style} : style);
                        current = common;
                    } else {
                        var p = range.document.createElement('p');
                        domUtils.setStyles(p, utils.isString(style) ? {'text-align':style} : style);
                        var frag = tmpRange.extractContents();
                        p.appendChild(frag);
                        tmpRange.insertNode(p);
                        current = p;
                    }
                    current = domUtils.getNextDomNode(current, false, filterFn);
                } else {
                    current = domUtils.getNextDomNode(current, true, filterFn);
                }
            }
            return range.moveToBookmark(bookmark2).moveToBookmark(bookmark);
        };

    UE.commands['justify'] = {
        execCommand:function (cmdName, align) {
            var range = this.selection.getRange(),
                txt;

            //闭合时单独处理
            if (range.collapsed) {
                txt = this.document.createTextNode('p');
                range.insertNode(txt);
            }
            doJustify(range, align);
            if (txt) {
                range.setStartBefore(txt).collapse(true);
                domUtils.remove(txt);
            }

            range.select();


            return true;
        },
        queryCommandValue:function () {
            var startNode = this.selection.getStart(),
                value = domUtils.getComputedStyle(startNode, 'text-align');
            return defaultValue[value] ? value : 'left';
        },
        queryCommandState:function () {
            var start = this.selection.getStart(),
                cell = start && domUtils.findParentByTagName(start, ["td", "th","caption"], true);

            return cell? -1:0;
        }

    };
};


// plugins/font.js
/**
 * 字体颜色,背景色,字号,字体,下划线,删除线
 * @file
 * @since 1.2.6.1
 */

/**
 * 字体颜色
 * @command forecolor
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @param { String } value 色值(必须十六进制)
 * @example
 * ```javascript
 * editor.execCommand( 'forecolor', '#000' );
 * ```
 */
/**
 * 返回选区字体颜色
 * @command forecolor
 * @method queryCommandValue
 * @param { String } cmd 命令字符串
 * @return { String } 返回字体颜色
 * @example
 * ```javascript
 * editor.queryCommandValue( 'forecolor' );
 * ```
 */

/**
 * 字体背景颜色
 * @command backcolor
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @param { String } value 色值(必须十六进制)
 * @example
 * ```javascript
 * editor.execCommand( 'backcolor', '#000' );
 * ```
 */
/**
 * 返回选区字体颜色
 * @command backcolor
 * @method queryCommandValue
 * @param { String } cmd 命令字符串
 * @return { String } 返回字体背景颜色
 * @example
 * ```javascript
 * editor.queryCommandValue( 'backcolor' );
 * ```
 */

/**
 * 字体大小
 * @command fontsize
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @param { String } value 字体大小
 * @example
 * ```javascript
 * editor.execCommand( 'fontsize', '14px' );
 * ```
 */
/**
 * 返回选区字体大小
 * @command fontsize
 * @method queryCommandValue
 * @param { String } cmd 命令字符串
 * @return { String } 返回字体大小
 * @example
 * ```javascript
 * editor.queryCommandValue( 'fontsize' );
 * ```
 */

/**
 * 字体样式
 * @command fontfamily
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @param { String } value 字体样式
 * @example
 * ```javascript
 * editor.execCommand( 'fontfamily', '微软雅黑' );
 * ```
 */
/**
 * 返回选区字体样式
 * @command fontfamily
 * @method queryCommandValue
 * @param { String } cmd 命令字符串
 * @return { String } 返回字体样式
 * @example
 * ```javascript
 * editor.queryCommandValue( 'fontfamily' );
 * ```
 */

/**
 * 字体下划线,与删除线互斥
 * @command underline
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'underline' );
 * ```
 */

/**
 * 字体删除线,与下划线互斥
 * @command strikethrough
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'strikethrough' );
 * ```
 */

/**
 * 字体边框
 * @command fontborder
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'fontborder' );
 * ```
 */

UE.plugins['font'] = function () {
    var me = this,
        fonts = {
            'forecolor': 'color',
            'backcolor': 'background-color',
            'fontsize': 'font-size',
            'fontfamily': 'font-family',
            'underline': 'text-decoration',
            'strikethrough': 'text-decoration',
            'fontborder': 'border'
        },
        needCmd = {'underline': 1, 'strikethrough': 1, 'fontborder': 1},
        needSetChild = {
            'forecolor': 'color',
            'backcolor': 'background-color',
            'fontsize': 'font-size',
            'fontfamily': 'font-family'

        };
    me.setOpt({
        'fontfamily': [
            { name: 'songti', val: '宋体,SimSun'},
            { name: 'yahei', val: '微软雅黑,Microsoft YaHei'},
            { name: 'kaiti', val: '楷体,楷体_GB2312, SimKai'},
            { name: 'heiti', val: '黑体, SimHei'},
            { name: 'lishu', val: '隶书, SimLi'},
            { name: 'andaleMono', val: 'andale mono'},
            { name: 'arial', val: 'arial, helvetica,sans-serif'},
            { name: 'arialBlack', val: 'arial black,avant garde'},
            { name: 'comicSansMs', val: 'comic sans ms'},
            { name: 'impact', val: 'impact,chicago'},
            { name: 'timesNewRoman', val: 'times new roman'}
        ],
        'fontsize': [10, 11, 12, 14, 16, 18, 20, 24, 36]
    });

    function mergeWithParent(node){
        var parent;
        while(parent = node.parentNode){
            if(parent.tagName == 'SPAN' && domUtils.getChildCount(parent,function(child){
                return !domUtils.isBookmarkNode(child) && !domUtils.isBr(child)
            }) == 1) {
                parent.style.cssText += node.style.cssText;
                domUtils.remove(node,true);
                node = parent;

            }else{
                break;
            }
        }

    }
    function mergeChild(rng,cmdName,value){
        if(needSetChild[cmdName]){
            rng.adjustmentBoundary();
            if(!rng.collapsed && rng.startContainer.nodeType == 1){
                var start = rng.startContainer.childNodes[rng.startOffset];
                if(start && domUtils.isTagNode(start,'span')){
                    var bk = rng.createBookmark();
                    utils.each(domUtils.getElementsByTagName(start, 'span'), function (span) {
                        if (!span.parentNode || domUtils.isBookmarkNode(span))return;
                        if(cmdName == 'backcolor' && domUtils.getComputedStyle(span,'background-color').toLowerCase() === value){
                            return;
                        }
                        domUtils.removeStyle(span,needSetChild[cmdName]);
                        if(span.style.cssText.replace(/^\s+$/,'').length == 0){
                            domUtils.remove(span,true)
                        }
                    });
                    rng.moveToBookmark(bk)
                }
            }
        }

    }
    function mergesibling(rng,cmdName,value) {
        var collapsed = rng.collapsed,
            bk = rng.createBookmark(), common;
        if (collapsed) {
            common = bk.start.parentNode;
            while (dtd.$inline[common.tagName]) {
                common = common.parentNode;
            }
        } else {
            common = domUtils.getCommonAncestor(bk.start, bk.end);
        }
        utils.each(domUtils.getElementsByTagName(common, 'span'), function (span) {
            if (!span.parentNode || domUtils.isBookmarkNode(span))return;
            if (/\s*border\s*:\s*none;?\s*/i.test(span.style.cssText)) {
                if(/^\s*border\s*:\s*none;?\s*$/.test(span.style.cssText)){
                    domUtils.remove(span, true);
                }else{
                    domUtils.removeStyle(span,'border');
                }
                return
            }
            if (/border/i.test(span.style.cssText) && span.parentNode.tagName == 'SPAN' && /border/i.test(span.parentNode.style.cssText)) {
                span.style.cssText = span.style.cssText.replace(/border[^:]*:[^;]+;?/gi, '');
            }
            if(!(cmdName=='fontborder' && value=='none')){
                var next = span.nextSibling;
                while (next && next.nodeType == 1 && next.tagName == 'SPAN' ) {
                    if(domUtils.isBookmarkNode(next) && cmdName == 'fontborder') {
                        span.appendChild(next);
                        next = span.nextSibling;
                        continue;
                    }
                    if (next.style.cssText == span.style.cssText) {
                        domUtils.moveChild(next, span);
                        domUtils.remove(next);
                    }
                    if (span.nextSibling === next)
                        break;
                    next = span.nextSibling;
                }
            }


            mergeWithParent(span);
            if(browser.ie && browser.version > 8 ){
                //拷贝父亲们的特别的属性,这里只做背景颜色的处理
                var parent = domUtils.findParent(span,function(n){return n.tagName == 'SPAN' && /background-color/.test(n.style.cssText)});
                if(parent && !/background-color/.test(span.style.cssText)){
                    span.style.backgroundColor = parent.style.backgroundColor;
                }
            }

        });
        rng.moveToBookmark(bk);
        mergeChild(rng,cmdName,value)
    }

    me.addInputRule(function (root) {
        utils.each(root.getNodesByTagName('u s del font strike'), function (node) {
            if (node.tagName == 'font') {
                var cssStyle = [];
                for (var p in node.attrs) {
                    switch (p) {
                        case 'size':
                            cssStyle.push('font-size:' +
                                ({
                                '1':'10',
                                '2':'12',
                                '3':'16',
                                '4':'18',
                                '5':'24',
                                '6':'32',
                                '7':'48'
                            }[node.attrs[p]] || node.attrs[p]) + 'px');
                            break;
                        case 'color':
                            cssStyle.push('color:' + node.attrs[p]);
                            break;
                        case 'face':
                            cssStyle.push('font-family:' + node.attrs[p]);
                            break;
                        case 'style':
                            cssStyle.push(node.attrs[p]);
                    }
                }
                node.attrs = {
                    'style': cssStyle.join(';')
                };
            } else {
                var val = node.tagName == 'u' ? 'underline' : 'line-through';
                node.attrs = {
                    'style': (node.getAttr('style') || '') + 'text-decoration:' + val + ';'
                }
            }
            node.tagName = 'span';
        });
//        utils.each(root.getNodesByTagName('span'), function (node) {
//            var val;
//            if(val = node.getAttr('class')){
//                if(/fontstrikethrough/.test(val)){
//                    node.setStyle('text-decoration','line-through');
//                    if(node.attrs['class']){
//                        node.attrs['class'] = node.attrs['class'].replace(/fontstrikethrough/,'');
//                    }else{
//                        node.setAttr('class')
//                    }
//                }
//                if(/fontborder/.test(val)){
//                    node.setStyle('border','1px solid #000');
//                    if(node.attrs['class']){
//                        node.attrs['class'] = node.attrs['class'].replace(/fontborder/,'');
//                    }else{
//                        node.setAttr('class')
//                    }
//                }
//            }
//        });
    });
//    me.addOutputRule(function(root){
//        utils.each(root.getNodesByTagName('span'), function (node) {
//            var val;
//            if(val = node.getStyle('text-decoration')){
//                if(/line-through/.test(val)){
//                    if(node.attrs['class']){
//                        node.attrs['class'] += ' fontstrikethrough';
//                    }else{
//                        node.setAttr('class','fontstrikethrough')
//                    }
//                }
//
//                node.setStyle('text-decoration')
//            }
//            if(val = node.getStyle('border')){
//                if(/1px/.test(val) && /solid/.test(val)){
//                    if(node.attrs['class']){
//                        node.attrs['class'] += ' fontborder';
//
//                    }else{
//                        node.setAttr('class','fontborder')
//                    }
//                }
//                node.setStyle('border')
//
//            }
//        });
//    });
    for (var p in fonts) {
        (function (cmd, style) {
            UE.commands[cmd] = {
                execCommand: function (cmdName, value) {
                    value = value || (this.queryCommandState(cmdName) ? 'none' : cmdName == 'underline' ? 'underline' :
                        cmdName == 'fontborder' ? '1px solid #000' :
                            'line-through');
                    var me = this,
                        range = this.selection.getRange(),
                        text;

                    if (value == 'default') {

                        if (range.collapsed) {
                            text = me.document.createTextNode('font');
                            range.insertNode(text).select();

                        }
                        me.execCommand('removeFormat', 'span,a', style);
                        if (text) {
                            range.setStartBefore(text).collapse(true);
                            domUtils.remove(text);
                        }
                        mergesibling(range,cmdName,value);
                        range.select()
                    } else {
                        if (!range.collapsed) {
                            if (needCmd[cmd] && me.queryCommandValue(cmd)) {
                                me.execCommand('removeFormat', 'span,a', style);
                            }
                            range = me.selection.getRange();

                            range.applyInlineStyle('span', {'style': style + ':' + value});
                            mergesibling(range, cmdName,value);
                            range.select();
                        } else {

                            var span = domUtils.findParentByTagName(range.startContainer, 'span', true);
                            text = me.document.createTextNode('font');
                            if (span && !span.children.length && !span[browser.ie ? 'innerText' : 'textContent'].replace(fillCharReg, '').length) {
                                //for ie hack when enter
                                range.insertNode(text);
                                if (needCmd[cmd]) {
                                    range.selectNode(text).select();
                                    me.execCommand('removeFormat', 'span,a', style, null);

                                    span = domUtils.findParentByTagName(text, 'span', true);
                                    range.setStartBefore(text);

                                }
                                span && (span.style.cssText += ';' + style + ':' + value);
                                range.collapse(true).select();


                            } else {
                                range.insertNode(text);
                                range.selectNode(text).select();
                                span = range.document.createElement('span');

                                if (needCmd[cmd]) {
                                    //a标签内的不处理跳过
                                    if (domUtils.findParentByTagName(text, 'a', true)) {
                                        range.setStartBefore(text).setCursor();
                                        domUtils.remove(text);
                                        return;
                                    }
                                    me.execCommand('removeFormat', 'span,a', style);
                                }

                                span.style.cssText = style + ':' + value;


                                text.parentNode.insertBefore(span, text);
                                //修复，span套span 但样式不继承的问题
                                if (!browser.ie || browser.ie && browser.version == 9) {
                                    var spanParent = span.parentNode;
                                    while (!domUtils.isBlockElm(spanParent)) {
                                        if (spanParent.tagName == 'SPAN') {
                                            //opera合并style不会加入";"
                                            span.style.cssText = spanParent.style.cssText + ";" + span.style.cssText;
                                        }
                                        spanParent = spanParent.parentNode;
                                    }
                                }


                                if (opera) {
                                    setTimeout(function () {
                                        range.setStart(span, 0).collapse(true);
                                        mergesibling(range, cmdName,value);
                                        range.select();
                                    });
                                } else {
                                    range.setStart(span, 0).collapse(true);
                                    mergesibling(range,cmdName,value);
                                    range.select();
                                }

                                //trace:981
                                //domUtils.mergeToParent(span)
                            }
                            domUtils.remove(text);
                        }


                    }
                    return true;
                },
                queryCommandValue: function (cmdName) {
                    var startNode = this.selection.getStart();

                    //trace:946
                    if (cmdName == 'underline' || cmdName == 'strikethrough') {
                        var tmpNode = startNode, value;
                        while (tmpNode && !domUtils.isBlockElm(tmpNode) && !domUtils.isBody(tmpNode)) {
                            if (tmpNode.nodeType == 1) {
                                value = domUtils.getComputedStyle(tmpNode, style);
                                if (value != 'none') {
                                    return value;
                                }
                            }

                            tmpNode = tmpNode.parentNode;
                        }
                        return 'none';
                    }
                    if (cmdName == 'fontborder') {
                        var tmp = startNode, val;
                        while (tmp && dtd.$inline[tmp.tagName]) {
                            if (val = domUtils.getComputedStyle(tmp, 'border')) {

                                if (/1px/.test(val) && /solid/.test(val)) {
                                    return val;
                                }
                            }
                            tmp = tmp.parentNode;
                        }
                        return ''
                    }

                    if( cmdName == 'FontSize' ) {
                        var styleVal = domUtils.getComputedStyle(startNode, style),
                            tmp = /^([\d\.]+)(\w+)$/.exec( styleVal );

                        if( tmp ) {

                            return Math.floor( tmp[1] ) + tmp[2];

                        }

                        return styleVal;

                    }

                    return  domUtils.getComputedStyle(startNode, style);
                },
                queryCommandState: function (cmdName) {
                    if (!needCmd[cmdName])
                        return 0;
                    var val = this.queryCommandValue(cmdName);
                    if (cmdName == 'fontborder') {
                        return /1px/.test(val) && /solid/.test(val)
                    } else {
                        return  cmdName == 'underline' ? /underline/.test(val) : /line\-through/.test(val);

                    }

                }
            };
        })(p, fonts[p]);
    }
};

// plugins/link.js
/**
 * 超链接
 * @file
 * @since 1.2.6.1
 */

/**
 * 插入超链接
 * @command link
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @param { Object } options   设置自定义属性，例如：url、title、target
 * @example
 * ```javascript
 * editor.execCommand( 'link', '{
 *     url:'ueditor.baidu.com',
 *     title:'ueditor',
 *     target:'_blank'
 * }' );
 * ```
 */
/**
 * 返回当前选中的第一个超链接节点
 * @command link
 * @method queryCommandValue
 * @param { String } cmd 命令字符串
 * @return { Element } 超链接节点
 * @example
 * ```javascript
 * editor.queryCommandValue( 'link' );
 * ```
 */

/**
 * 取消超链接
 * @command unlink
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'unlink');
 * ```
 */

UE.plugins['link'] = function(){
    function optimize( range ) {
        var start = range.startContainer,end = range.endContainer;

        if ( start = domUtils.findParentByTagName( start, 'a', true ) ) {
            range.setStartBefore( start );
        }
        if ( end = domUtils.findParentByTagName( end, 'a', true ) ) {
            range.setEndAfter( end );
        }
    }


    UE.commands['unlink'] = {
        execCommand : function() {
            var range = this.selection.getRange(),
                bookmark;
            if(range.collapsed && !domUtils.findParentByTagName( range.startContainer, 'a', true )){
                return;
            }
            bookmark = range.createBookmark();
            optimize( range );
            range.removeInlineStyle( 'a' ).moveToBookmark( bookmark ).select();
        },
        queryCommandState : function(){
            return !this.highlight && this.queryCommandValue('link') ?  0 : -1;
        }

    };
    function doLink(range,opt,me){
        var rngClone = range.cloneRange(),
            link = me.queryCommandValue('link');
        optimize( range = range.adjustmentBoundary() );
        var start = range.startContainer;
        if(start.nodeType == 1 && link){
            start = start.childNodes[range.startOffset];
            if(start && start.nodeType == 1 && start.tagName == 'A' && /^(?:https?|ftp|file)\s*:\s*\/\//.test(start[browser.ie?'innerText':'textContent'])){
                start[browser.ie ? 'innerText' : 'textContent'] =  utils.html(opt.textValue||opt.href);

            }
        }
        if( !rngClone.collapsed || link){
            range.removeInlineStyle( 'a' );
            rngClone = range.cloneRange();
        }

        if ( rngClone.collapsed ) {
            var a = range.document.createElement( 'a'),
                text = '';
            if(opt.textValue){

                text =   utils.html(opt.textValue);
                delete opt.textValue;
            }else{
                text =   utils.html(opt.href);

            }
            domUtils.setAttributes( a, opt );
            start =  domUtils.findParentByTagName( rngClone.startContainer, 'a', true );
            if(start && domUtils.isInNodeEndBoundary(rngClone,start)){
                range.setStartAfter(start).collapse(true);

            }
            a[browser.ie ? 'innerText' : 'textContent'] = text;
            range.insertNode(a).selectNode( a );
        } else {
            range.applyInlineStyle( 'a', opt );

        }
    }
    UE.commands['link'] = {
        execCommand : function( cmdName, opt ) {
            var range;
            opt._href && (opt._href = utils.unhtml(opt._href,/[<">]/g));
            opt.href && (opt.href = utils.unhtml(opt.href,/[<">]/g));
            opt.textValue && (opt.textValue = utils.unhtml(opt.textValue,/[<">]/g));
            doLink(range=this.selection.getRange(),opt,this);
            //闭合都不加占位符，如果加了会在a后边多个占位符节点，导致a是图片背景组成的列表，出现空白问题
            range.collapse().select(true);

        },
        queryCommandValue : function() {
            var range = this.selection.getRange(),
                node;
            if ( range.collapsed ) {
//                    node = this.selection.getStart();
                //在ie下getstart()取值偏上了
                node = range.startContainer;
                node = node.nodeType == 1 ? node : node.parentNode;

                if ( node && (node = domUtils.findParentByTagName( node, 'a', true )) && ! domUtils.isInNodeEndBoundary(range,node)) {

                    return node;
                }
            } else {
                //trace:1111  如果是<p><a>xx</a></p> startContainer是p就会找不到a
                range.shrinkBoundary();
                var start = range.startContainer.nodeType  == 3 || !range.startContainer.childNodes[range.startOffset] ? range.startContainer : range.startContainer.childNodes[range.startOffset],
                    end =  range.endContainer.nodeType == 3 || range.endOffset == 0 ? range.endContainer : range.endContainer.childNodes[range.endOffset-1],
                    common = range.getCommonAncestor();
                node = domUtils.findParentByTagName( common, 'a', true );
                if ( !node && common.nodeType == 1){

                    var as = common.getElementsByTagName( 'a' ),
                        ps,pe;

                    for ( var i = 0,ci; ci = as[i++]; ) {
                        ps = domUtils.getPosition( ci, start ),pe = domUtils.getPosition( ci,end);
                        if ( (ps & domUtils.POSITION_FOLLOWING || ps & domUtils.POSITION_CONTAINS)
                            &&
                            (pe & domUtils.POSITION_PRECEDING || pe & domUtils.POSITION_CONTAINS)
                            ) {
                            node = ci;
                            break;
                        }
                    }
                }
                return node;
            }

        },
        queryCommandState : function() {
            //判断如果是视频的话连接不可用
            //fix 853
            var img = this.selection.getRange().getClosedNode(),
                flag = img && (img.className == "edui-faked-video" || img.className.indexOf("edui-upload-video")!=-1);
            return flag ? -1 : 0;
        }
    };
};

// plugins/iframe.js
///import core
///import plugins\inserthtml.js
///commands 插入框架
///commandsName  InsertFrame
///commandsTitle  插入Iframe
///commandsDialog  dialogs\insertframe

UE.plugins['insertframe'] = function() {
   var me =this;
    function deleteIframe(){
        me._iframe && delete me._iframe;
    }

    me.addListener("selectionchange",function(){
        deleteIframe();
    });

};



// plugins/scrawl.js
///import core
///commands 涂鸦
///commandsName  Scrawl
///commandsTitle  涂鸦
///commandsDialog  dialogs\scrawl
UE.commands['scrawl'] = {
    queryCommandState : function(){
        return ( browser.ie && browser.version  <= 8 ) ? -1 :0;
    }
};


// plugins/removeformat.js
/**
 * 清除格式
 * @file
 * @since 1.2.6.1
 */

/**
 * 清除文字样式
 * @command removeformat
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @param   {String}   tags     以逗号隔开的标签。如：strong
 * @param   {String}   style    样式如：color
 * @param   {String}   attrs    属性如:width
 * @example
 * ```javascript
 * editor.execCommand( 'removeformat', 'strong','color','width' );
 * ```
 */

UE.plugins['removeformat'] = function(){
    var me = this;
    me.setOpt({
       'removeFormatTags': 'b,big,code,del,dfn,em,font,i,ins,kbd,q,samp,small,span,strike,strong,sub,sup,tt,u,var',
       'removeFormatAttributes':'class,style,lang,width,height,align,hspace,valign'
    });
    me.commands['removeformat'] = {
        execCommand : function( cmdName, tags, style, attrs,notIncludeA ) {

            var tagReg = new RegExp( '^(?:' + (tags || this.options.removeFormatTags).replace( /,/g, '|' ) + ')$', 'i' ) ,
                removeFormatAttributes = style ? [] : (attrs || this.options.removeFormatAttributes).split( ',' ),
                range = new dom.Range( this.document ),
                bookmark,node,parent,
                filter = function( node ) {
                    return node.nodeType == 1;
                };

            function isRedundantSpan (node) {
                if (node.nodeType == 3 || node.tagName.toLowerCase() != 'span'){
                    return 0;
                }
                if (browser.ie) {
                    //ie 下判断实效，所以只能简单用style来判断
                    //return node.style.cssText == '' ? 1 : 0;
                    var attrs = node.attributes;
                    if ( attrs.length ) {
                        for ( var i = 0,l = attrs.length; i<l; i++ ) {
                            if ( attrs[i].specified ) {
                                return 0;
                            }
                        }
                        return 1;
                    }
                }
                return !node.attributes.length;
            }
            function doRemove( range ) {

                var bookmark1 = range.createBookmark();
                if ( range.collapsed ) {
                    range.enlarge( true );
                }

                //不能把a标签切了
                if(!notIncludeA){
                    var aNode = domUtils.findParentByTagName(range.startContainer,'a',true);
                    if(aNode){
                        range.setStartBefore(aNode);
                    }

                    aNode = domUtils.findParentByTagName(range.endContainer,'a',true);
                    if(aNode){
                        range.setEndAfter(aNode);
                    }

                }


                bookmark = range.createBookmark();

                node = bookmark.start;

                //切开始
                while ( (parent = node.parentNode) && !domUtils.isBlockElm( parent ) ) {
                    domUtils.breakParent( node, parent );

                    domUtils.clearEmptySibling( node );
                }
                if ( bookmark.end ) {
                    //切结束
                    node = bookmark.end;
                    while ( (parent = node.parentNode) && !domUtils.isBlockElm( parent ) ) {
                        domUtils.breakParent( node, parent );
                        domUtils.clearEmptySibling( node );
                    }

                    //开始去除样式
                    var current = domUtils.getNextDomNode( bookmark.start, false, filter ),
                        next;
                    while ( current ) {
                        if ( current == bookmark.end ) {
                            break;
                        }

                        next = domUtils.getNextDomNode( current, true, filter );

                        if ( !dtd.$empty[current.tagName.toLowerCase()] && !domUtils.isBookmarkNode( current ) ) {
                            if ( tagReg.test( current.tagName ) ) {
                                if ( style ) {
                                    domUtils.removeStyle( current, style );
                                    if ( isRedundantSpan( current ) && style != 'text-decoration'){
                                        domUtils.remove( current, true );
                                    }
                                } else {
                                    domUtils.remove( current, true );
                                }
                            } else {
                                //trace:939  不能把list上的样式去掉
                                if(!dtd.$tableContent[current.tagName] && !dtd.$list[current.tagName]){
                                    domUtils.removeAttributes( current, removeFormatAttributes );
                                    if ( isRedundantSpan( current ) ){
                                        domUtils.remove( current, true );
                                    }
                                }

                            }
                        }
                        current = next;
                    }
                }
                //trace:1035
                //trace:1096 不能把td上的样式去掉，比如边框
                var pN = bookmark.start.parentNode;
                if(domUtils.isBlockElm(pN) && !dtd.$tableContent[pN.tagName] && !dtd.$list[pN.tagName]){
                    domUtils.removeAttributes(  pN,removeFormatAttributes );
                }
                pN = bookmark.end.parentNode;
                if(bookmark.end && domUtils.isBlockElm(pN) && !dtd.$tableContent[pN.tagName]&& !dtd.$list[pN.tagName]){
                    domUtils.removeAttributes(  pN,removeFormatAttributes );
                }
                range.moveToBookmark( bookmark ).moveToBookmark(bookmark1);
                //清除冗余的代码 <b><bookmark></b>
                var node = range.startContainer,
                    tmp,
                    collapsed = range.collapsed;
                while(node.nodeType == 1 && domUtils.isEmptyNode(node) && dtd.$removeEmpty[node.tagName]){
                    tmp = node.parentNode;
                    range.setStartBefore(node);
                    //trace:937
                    //更新结束边界
                    if(range.startContainer === range.endContainer){
                        range.endOffset--;
                    }
                    domUtils.remove(node);
                    node = tmp;
                }

                if(!collapsed){
                    node = range.endContainer;
                    while(node.nodeType == 1 && domUtils.isEmptyNode(node) && dtd.$removeEmpty[node.tagName]){
                        tmp = node.parentNode;
                        range.setEndBefore(node);
                        domUtils.remove(node);

                        node = tmp;
                    }


                }
            }



            range = this.selection.getRange();
            doRemove( range );
            range.select();

        }

    };

};


// plugins/blockquote.js
/**
 * 添加引用
 * @file
 * @since 1.2.6.1
 */

/**
 * 添加引用
 * @command blockquote
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'blockquote' );
 * ```
 */

/**
 * 添加引用
 * @command blockquote
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @param { Object } attrs 节点属性
 * @example
 * ```javascript
 * editor.execCommand( 'blockquote',{
 *     style: "color: red;"
 * } );
 * ```
 */


UE.plugins['blockquote'] = function(){
    var me = this;
    function getObj(editor){
        return domUtils.filterNodeList(editor.selection.getStartElementPath(),'blockquote');
    }
    me.commands['blockquote'] = {
        execCommand : function( cmdName, attrs ) {
            var range = this.selection.getRange(),
                obj = getObj(this),
                blockquote = dtd.blockquote,
                bookmark = range.createBookmark();

            if ( obj ) {

                    var start = range.startContainer,
                        startBlock = domUtils.isBlockElm(start) ? start : domUtils.findParent(start,function(node){return domUtils.isBlockElm(node)}),

                        end = range.endContainer,
                        endBlock = domUtils.isBlockElm(end) ? end :  domUtils.findParent(end,function(node){return domUtils.isBlockElm(node)});

                    //处理一下li
                    startBlock = domUtils.findParentByTagName(startBlock,'li',true) || startBlock;
                    endBlock = domUtils.findParentByTagName(endBlock,'li',true) || endBlock;


                    if(startBlock.tagName == 'LI' || startBlock.tagName == 'TD' || startBlock === obj || domUtils.isBody(startBlock)){
                        domUtils.remove(obj,true);
                    }else{
                        domUtils.breakParent(startBlock,obj);
                    }

                    if(startBlock !== endBlock){
                        obj = domUtils.findParentByTagName(endBlock,'blockquote');
                        if(obj){
                            if(endBlock.tagName == 'LI' || endBlock.tagName == 'TD'|| domUtils.isBody(endBlock)){
                                obj.parentNode && domUtils.remove(obj,true);
                            }else{
                                domUtils.breakParent(endBlock,obj);
                            }

                        }
                    }

                    var blockquotes = domUtils.getElementsByTagName(this.document,'blockquote');
                    for(var i=0,bi;bi=blockquotes[i++];){
                        if(!bi.childNodes.length){
                            domUtils.remove(bi);
                        }else if(domUtils.getPosition(bi,startBlock)&domUtils.POSITION_FOLLOWING && domUtils.getPosition(bi,endBlock)&domUtils.POSITION_PRECEDING){
                            domUtils.remove(bi,true);
                        }
                    }




            } else {

                var tmpRange = range.cloneRange(),
                    node = tmpRange.startContainer.nodeType == 1 ? tmpRange.startContainer : tmpRange.startContainer.parentNode,
                    preNode = node,
                    doEnd = 1;

                //调整开始
                while ( 1 ) {
                    if ( domUtils.isBody(node) ) {
                        if ( preNode !== node ) {
                            if ( range.collapsed ) {
                                tmpRange.selectNode( preNode );
                                doEnd = 0;
                            } else {
                                tmpRange.setStartBefore( preNode );
                            }
                        }else{
                            tmpRange.setStart(node,0);
                        }

                        break;
                    }
                    if ( !blockquote[node.tagName] ) {
                        if ( range.collapsed ) {
                            tmpRange.selectNode( preNode );
                        } else{
                            tmpRange.setStartBefore( preNode);
                        }
                        break;
                    }

                    preNode = node;
                    node = node.parentNode;
                }

                //调整结束
                if ( doEnd ) {
                    preNode = node =  node = tmpRange.endContainer.nodeType == 1 ? tmpRange.endContainer : tmpRange.endContainer.parentNode;
                    while ( 1 ) {

                        if ( domUtils.isBody( node ) ) {
                            if ( preNode !== node ) {

                                tmpRange.setEndAfter( preNode );

                            } else {
                                tmpRange.setEnd( node, node.childNodes.length );
                            }

                            break;
                        }
                        if ( !blockquote[node.tagName] ) {
                            tmpRange.setEndAfter( preNode );
                            break;
                        }

                        preNode = node;
                        node = node.parentNode;
                    }

                }


                node = range.document.createElement( 'blockquote' );
                domUtils.setAttributes( node, attrs );
                node.appendChild( tmpRange.extractContents() );
                tmpRange.insertNode( node );
                //去除重复的
                var childs = domUtils.getElementsByTagName(node,'blockquote');
                for(var i=0,ci;ci=childs[i++];){
                    if(ci.parentNode){
                        domUtils.remove(ci,true);
                    }
                }

            }
            range.moveToBookmark( bookmark ).select();
        },
        queryCommandState : function() {
            return getObj(this) ? 1 : 0;
        }
    };
};



// plugins/convertcase.js
/**
 * 大小写转换
 * @file
 * @since 1.2.6.1
 */

/**
 * 把选区内文本变大写，与“tolowercase”命令互斥
 * @command touppercase
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'touppercase' );
 * ```
 */

/**
 * 把选区内文本变小写，与“touppercase”命令互斥
 * @command tolowercase
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'tolowercase' );
 * ```
 */
UE.commands['touppercase'] =
UE.commands['tolowercase'] = {
    execCommand:function (cmd) {
        var me = this;
        var rng = me.selection.getRange();
        if(rng.collapsed){
            return rng;
        }
        var bk = rng.createBookmark(),
            bkEnd = bk.end,
            filterFn = function( node ) {
                return !domUtils.isBr(node) && !domUtils.isWhitespace( node );
            },
            curNode = domUtils.getNextDomNode( bk.start, false, filterFn );
        while ( curNode && (domUtils.getPosition( curNode, bkEnd ) & domUtils.POSITION_PRECEDING) ) {

            if ( curNode.nodeType == 3 ) {
                curNode.nodeValue = curNode.nodeValue[cmd == 'touppercase' ? 'toUpperCase' : 'toLowerCase']();
            }
            curNode = domUtils.getNextDomNode( curNode, true, filterFn );
            if(curNode === bkEnd){
                break;
            }

        }
        rng.moveToBookmark(bk).select();
    }
};



// plugins/indent.js
/**
 * 首行缩进
 * @file
 * @since 1.2.6.1
 */

/**
 * 缩进
 * @command indent
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'indent' );
 * ```
 */
UE.commands['indent'] = {
    execCommand : function() {
         var me = this,value = me.queryCommandState("indent") ? "0em" : (me.options.indentValue || '2em');
         me.execCommand('Paragraph','p',{style:'text-indent:'+ value});
    },
    queryCommandState : function() {
        var pN = domUtils.filterNodeList(this.selection.getStartElementPath(),'p h1 h2 h3 h4 h5 h6');
        return pN && pN.style.textIndent && parseInt(pN.style.textIndent) ?  1 : 0;
    }

};


// plugins/print.js
/**
 * 打印
 * @file
 * @since 1.2.6.1
 */

/**
 * 打印
 * @command print
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'print' );
 * ```
 */
UE.commands['print'] = {
    execCommand : function(){
        this.window.print();
    },
    notNeedUndo : 1
};



// plugins/preview.js
/**
 * 预览
 * @file
 * @since 1.2.6.1
 */

/**
 * 预览
 * @command preview
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'preview' );
 * ```
 */
UE.commands['preview'] = {
    execCommand : function(){
        var w = window.open('', '_blank', ''),
            d = w.document;
        d.open();
        d.write('<!DOCTYPE html><html><head><meta charset="utf-8"/><script src="'+this.options.UEDITOR_HOME_URL+'ueditor.parse.js"></script><script>' +
            "setTimeout(function(){uParse('div',{rootPath: '"+ this.options.UEDITOR_HOME_URL +"'})},300)" +
            '</script></head><body><div>'+this.getContent(null,null,true)+'</div></body></html>');
        d.close();
    },
    notNeedUndo : 1
};


// plugins/selectall.js
/**
 * 全选
 * @file
 * @since 1.2.6.1
 */

/**
 * 选中所有内容
 * @command selectall
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'selectall' );
 * ```
 */
UE.plugins['selectall'] = function(){
    var me = this;
    me.commands['selectall'] = {
        execCommand : function(){
            //去掉了原生的selectAll,因为会出现报错和当内容为空时，不能出现闭合状态的光标
            var me = this,body = me.body,
                range = me.selection.getRange();
            range.selectNodeContents(body);
            if(domUtils.isEmptyBlock(body)){
                //opera不能自动合并到元素的里边，要手动处理一下
                if(browser.opera && body.firstChild && body.firstChild.nodeType == 1){
                    range.setStartAtFirst(body.firstChild);
                }
                range.collapse(true);
            }
            range.select(true);
        },
        notNeedUndo : 1
    };


    //快捷键
    me.addshortcutkey({
         "selectAll" : "ctrl+65"
    });
};


// plugins/paragraph.js
/**
 * 段落样式
 * @file
 * @since 1.2.6.1
 */

/**
 * 段落格式
 * @command paragraph
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @param {String}   style               标签值为：'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'
 * @param {Object}   attrs               标签的属性
 * @example
 * ```javascript
 * editor.execCommand( 'Paragraph','h1','{
 *     class:'test'
 * }' );
 * ```
 */

/**
 * 返回选区内节点标签名
 * @command paragraph
 * @method queryCommandValue
 * @param { String } cmd 命令字符串
 * @return { String } 节点标签名
 * @example
 * ```javascript
 * editor.queryCommandValue( 'Paragraph' );
 * ```
 */

UE.plugins['paragraph'] = function() {
    var me = this,
        block = domUtils.isBlockElm,
        notExchange = ['TD','LI','PRE'],

        doParagraph = function(range,style,attrs,sourceCmdName){
            var bookmark = range.createBookmark(),
                filterFn = function( node ) {
                    return   node.nodeType == 1 ? node.tagName.toLowerCase() != 'br' &&  !domUtils.isBookmarkNode(node) : !domUtils.isWhitespace( node );
                },
                para;

            range.enlarge( true );
            var bookmark2 = range.createBookmark(),
                current = domUtils.getNextDomNode( bookmark2.start, false, filterFn ),
                tmpRange = range.cloneRange(),
                tmpNode;
            while ( current && !(domUtils.getPosition( current, bookmark2.end ) & domUtils.POSITION_FOLLOWING) ) {
                if ( current.nodeType == 3 || !block( current ) ) {
                    tmpRange.setStartBefore( current );
                    while ( current && current !== bookmark2.end && !block( current ) ) {
                        tmpNode = current;
                        current = domUtils.getNextDomNode( current, false, null, function( node ) {
                            return !block( node );
                        } );
                    }
                    tmpRange.setEndAfter( tmpNode );
                    
                    para = range.document.createElement( style );
                    if(attrs){
                        domUtils.setAttributes(para,attrs);
                        if(sourceCmdName && sourceCmdName == 'customstyle' && attrs.style){
                            para.style.cssText = attrs.style;
                        }
                    }
                    para.appendChild( tmpRange.extractContents() );
                    //需要内容占位
                    if(domUtils.isEmptyNode(para)){
                        domUtils.fillChar(range.document,para);
                        
                    }

                    tmpRange.insertNode( para );

                    var parent = para.parentNode;
                    //如果para上一级是一个block元素且不是body,td就删除它
                    if ( block( parent ) && !domUtils.isBody( para.parentNode ) && utils.indexOf(notExchange,parent.tagName)==-1) {
                        //存储dir,style
                        if(!(sourceCmdName && sourceCmdName == 'customstyle')){
                            parent.getAttribute('dir') && para.setAttribute('dir',parent.getAttribute('dir'));
                            //trace:1070
                            parent.style.cssText && (para.style.cssText = parent.style.cssText + ';' + para.style.cssText);
                            //trace:1030
                            parent.style.textAlign && !para.style.textAlign && (para.style.textAlign = parent.style.textAlign);
                            parent.style.textIndent && !para.style.textIndent && (para.style.textIndent = parent.style.textIndent);
                            parent.style.padding && !para.style.padding && (para.style.padding = parent.style.padding);
                        }

                        //trace:1706 选择的就是h1-6要删除
                        if(attrs && /h\d/i.test(parent.tagName) && !/h\d/i.test(para.tagName) ){
                            domUtils.setAttributes(parent,attrs);
                            if(sourceCmdName && sourceCmdName == 'customstyle' && attrs.style){
                                parent.style.cssText = attrs.style;
                            }
                            domUtils.remove(para,true);
                            para = parent;
                        }else{
                            domUtils.remove( para.parentNode, true );
                        }

                    }
                    if(  utils.indexOf(notExchange,parent.tagName)!=-1){
                        current = parent;
                    }else{
                       current = para;
                    }


                    current = domUtils.getNextDomNode( current, false, filterFn );
                } else {
                    current = domUtils.getNextDomNode( current, true, filterFn );
                }
            }
            return range.moveToBookmark( bookmark2 ).moveToBookmark( bookmark );
        };
    me.setOpt('paragraph',{'p':'', 'h1':'', 'h2':'', 'h3':'', 'h4':'', 'h5':'', 'h6':''});
    me.commands['paragraph'] = {
        execCommand : function( cmdName, style,attrs,sourceCmdName ) {
            var range = this.selection.getRange();
             //闭合时单独处理
            if(range.collapsed){
                var txt = this.document.createTextNode('p');
                range.insertNode(txt);
                //去掉冗余的fillchar
                if(browser.ie){
                    var node = txt.previousSibling;
                    if(node && domUtils.isWhitespace(node)){
                        domUtils.remove(node);
                    }
                    node = txt.nextSibling;
                    if(node && domUtils.isWhitespace(node)){
                        domUtils.remove(node);
                    }
                }

            }
            range = doParagraph(range,style,attrs,sourceCmdName);
            if(txt){
                range.setStartBefore(txt).collapse(true);
                pN = txt.parentNode;

                domUtils.remove(txt);

                if(domUtils.isBlockElm(pN)&&domUtils.isEmptyNode(pN)){
                    domUtils.fillNode(this.document,pN);
                }

            }

            if(browser.gecko && range.collapsed && range.startContainer.nodeType == 1){
                var child = range.startContainer.childNodes[range.startOffset];
                if(child && child.nodeType == 1 && child.tagName.toLowerCase() == style){
                    range.setStart(child,0).collapse(true);
                }
            }
            //trace:1097 原来有true，原因忘了，但去了就不能清除多余的占位符了
            range.select();


            return true;
        },
        queryCommandValue : function() {
            var node = domUtils.filterNodeList(this.selection.getStartElementPath(),'p h1 h2 h3 h4 h5 h6');
            return node ? node.tagName.toLowerCase() : '';
        }
    };
};


// plugins/directionality.js
/**
 * 设置文字输入的方向的插件
 * @file
 * @since 1.2.6.1
 */
(function() {
    var block = domUtils.isBlockElm ,
        getObj = function(editor){
//            var startNode = editor.selection.getStart(),
//                parents;
//            if ( startNode ) {
//                //查找所有的是block的父亲节点
//                parents = domUtils.findParents( startNode, true, block, true );
//                for ( var i = 0,ci; ci = parents[i++]; ) {
//                    if ( ci.getAttribute( 'dir' ) ) {
//                        return ci;
//                    }
//                }
//            }
            return domUtils.filterNodeList(editor.selection.getStartElementPath(),function(n){return n && n.nodeType == 1 && n.getAttribute('dir')});

        },
        doDirectionality = function(range,editor,forward){
            
            var bookmark,
                filterFn = function( node ) {
                    return   node.nodeType == 1 ? !domUtils.isBookmarkNode(node) : !domUtils.isWhitespace(node);
                },

                obj = getObj( editor );

            if ( obj && range.collapsed ) {
                obj.setAttribute( 'dir', forward );
                return range;
            }
            bookmark = range.createBookmark();
            range.enlarge( true );
            var bookmark2 = range.createBookmark(),
                current = domUtils.getNextDomNode( bookmark2.start, false, filterFn ),
                tmpRange = range.cloneRange(),
                tmpNode;
            while ( current &&  !(domUtils.getPosition( current, bookmark2.end ) & domUtils.POSITION_FOLLOWING) ) {
                if ( current.nodeType == 3 || !block( current ) ) {
                    tmpRange.setStartBefore( current );
                    while ( current && current !== bookmark2.end && !block( current ) ) {
                        tmpNode = current;
                        current = domUtils.getNextDomNode( current, false, null, function( node ) {
                            return !block( node );
                        } );
                    }
                    tmpRange.setEndAfter( tmpNode );
                    var common = tmpRange.getCommonAncestor();
                    if ( !domUtils.isBody( common ) && block( common ) ) {
                        //遍历到了block节点
                        common.setAttribute( 'dir', forward );
                        current = common;
                    } else {
                        //没有遍历到，添加一个block节点
                        var p = range.document.createElement( 'p' );
                        p.setAttribute( 'dir', forward );
                        var frag = tmpRange.extractContents();
                        p.appendChild( frag );
                        tmpRange.insertNode( p );
                        current = p;
                    }

                    current = domUtils.getNextDomNode( current, false, filterFn );
                } else {
                    current = domUtils.getNextDomNode( current, true, filterFn );
                }
            }
            return range.moveToBookmark( bookmark2 ).moveToBookmark( bookmark );
        };

    /**
     * 文字输入方向
     * @command directionality
     * @method execCommand
     * @param { String } cmdName 命令字符串
     * @param { String } forward 传入'ltr'表示从左向右输入，传入'rtl'表示从右向左输入
     * @example
     * ```javascript
     * editor.execCommand( 'directionality', 'ltr');
     * ```
     */

    /**
     * 查询当前选区的文字输入方向
     * @command directionality
     * @method queryCommandValue
     * @param { String } cmdName 命令字符串
     * @return { String } 返回'ltr'表示从左向右输入，返回'rtl'表示从右向左输入
     * @example
     * ```javascript
     * editor.queryCommandValue( 'directionality');
     * ```
     */
    UE.commands['directionality'] = {
        execCommand : function( cmdName,forward ) {
            var range = this.selection.getRange();
            //闭合时单独处理
            if(range.collapsed){
                var txt = this.document.createTextNode('d');
                range.insertNode(txt);
            }
            doDirectionality(range,this,forward);
            if(txt){
                range.setStartBefore(txt).collapse(true);
                domUtils.remove(txt);
            }

            range.select();
            return true;
        },
        queryCommandValue : function() {
            var node = getObj(this);
            return node ? node.getAttribute('dir') : 'ltr';
        }
    };
})();



// plugins/horizontal.js
/**
 * 插入分割线插件
 * @file
 * @since 1.2.6.1
 */

/**
 * 插入分割线
 * @command horizontal
 * @method execCommand
 * @param { String } cmdName 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'horizontal' );
 * ```
 */
UE.plugins['horizontal'] = function(){
    var me = this;
    me.commands['horizontal'] = {
        execCommand : function( cmdName ) {
            var me = this;
            if(me.queryCommandState(cmdName)!==-1){
                me.execCommand('insertHtml','<hr>');
                var range = me.selection.getRange(),
                    start = range.startContainer;
                if(start.nodeType == 1 && !start.childNodes[range.startOffset] ){

                    var tmp;
                    if(tmp = start.childNodes[range.startOffset - 1]){
                        if(tmp.nodeType == 1 && tmp.tagName == 'HR'){
                            if(me.options.enterTag == 'p'){
                                tmp = me.document.createElement('p');
                                range.insertNode(tmp);
                                range.setStart(tmp,0).setCursor();

                            }else{
                                tmp = me.document.createElement('br');
                                range.insertNode(tmp);
                                range.setStartBefore(tmp).setCursor();
                            }
                        }
                    }

                }
                return true;
            }

        },
        //边界在table里不能加分隔线
        queryCommandState : function() {
            return domUtils.filterNodeList(this.selection.getStartElementPath(),'table') ? -1 : 0;
        }
    };
//    me.addListener('delkeyup',function(){
//        var rng = this.selection.getRange();
//        if(browser.ie && browser.version > 8){
//            rng.txtToElmBoundary(true);
//            if(domUtils.isStartInblock(rng)){
//                var tmpNode = rng.startContainer;
//                var pre = tmpNode.previousSibling;
//                if(pre && domUtils.isTagNode(pre,'hr')){
//                    domUtils.remove(pre);
//                    rng.select();
//                    return;
//                }
//            }
//        }
//        if(domUtils.isBody(rng.startContainer)){
//            var hr = rng.startContainer.childNodes[rng.startOffset -1];
//            if(hr && hr.nodeName == 'HR'){
//                var next = hr.nextSibling;
//                if(next){
//                    rng.setStart(next,0)
//                }else if(hr.previousSibling){
//                    rng.setStartAtLast(hr.previousSibling)
//                }else{
//                    var p = this.document.createElement('p');
//                    hr.parentNode.insertBefore(p,hr);
//                    domUtils.fillNode(this.document,p);
//                    rng.setStart(p,0);
//                }
//                domUtils.remove(hr);
//                rng.setCursor(false,true);
//            }
//        }
//    })
    me.addListener('delkeydown',function(name,evt){
        var rng = this.selection.getRange();
        rng.txtToElmBoundary(true);
        if(domUtils.isStartInblock(rng)){
            var tmpNode = rng.startContainer;
            var pre = tmpNode.previousSibling;
            if(pre && domUtils.isTagNode(pre,'hr')){
                domUtils.remove(pre);
                rng.select();
                domUtils.preventDefault(evt);
                return true;

            }
        }

    })
};



// plugins/time.js
/**
 * 插入时间和日期
 * @file
 * @since 1.2.6.1
 */

/**
 * 插入时间，默认格式：12:59:59
 * @command time
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'time');
 * ```
 */

/**
 * 插入日期，默认格式：2013-08-30
 * @command date
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'date');
 * ```
 */
UE.commands['time'] = UE.commands["date"] = {
    execCommand : function(cmd, format){
        var date = new Date;

        function formatTime(date, format) {
            var hh = ('0' + date.getHours()).slice(-2),
                ii = ('0' + date.getMinutes()).slice(-2),
                ss = ('0' + date.getSeconds()).slice(-2);
            format = format || 'hh:ii:ss';
            return format.replace(/hh/ig, hh).replace(/ii/ig, ii).replace(/ss/ig, ss);
        }
        function formatDate(date, format) {
            var yyyy = ('000' + date.getFullYear()).slice(-4),
                yy = yyyy.slice(-2),
                mm = ('0' + (date.getMonth()+1)).slice(-2),
                dd = ('0' + date.getDate()).slice(-2);
            format = format || 'yyyy-mm-dd';
            return format.replace(/yyyy/ig, yyyy).replace(/yy/ig, yy).replace(/mm/ig, mm).replace(/dd/ig, dd);
        }

        this.execCommand('insertHtml',cmd == "time" ? formatTime(date, format):formatDate(date, format) );
    }
};


// plugins/rowspacing.js
/**
 * 段前段后间距插件
 * @file
 * @since 1.2.6.1
 */

/**
 * 设置段间距
 * @command rowspacing
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @param { String } value 段间距的值，以px为单位
 * @param { String } dir 间距位置，top或bottom，分别表示段前和段后
 * @example
 * ```javascript
 * editor.execCommand( 'rowspacing', '10', 'top' );
 * ```
 */

UE.plugins['rowspacing'] = function(){
    var me = this;
    me.setOpt({
        'rowspacingtop':['5', '10', '15', '20', '25'],
        'rowspacingbottom':['5', '10', '15', '20', '25']

    });
    me.commands['rowspacing'] =  {
        execCommand : function( cmdName,value,dir ) {
            this.execCommand('paragraph','p',{style:'margin-'+dir+':'+value + 'px'});
            return true;
        },
        queryCommandValue : function(cmdName,dir) {
            var pN = domUtils.filterNodeList(this.selection.getStartElementPath(),function(node){return domUtils.isBlockElm(node) }),
                value;
            //trace:1026
            if(pN){
                value = domUtils.getComputedStyle(pN,'margin-'+dir).replace(/[^\d]/g,'');
                return !value ? 0 : value;
            }
            return 0;

        }
    };
};




// plugins/lineheight.js
/**
 * 设置行内间距
 * @file
 * @since 1.2.6.1
 */
UE.plugins['lineheight'] = function(){
    var me = this;
    me.setOpt({'lineheight':['1', '1.5','1.75','2', '3', '4', '5']});

    /**
     * 行距
     * @command lineheight
     * @method execCommand
     * @param { String } cmdName 命令字符串
     * @param { String } value 传入的行高值， 该值是当前字体的倍数， 例如： 1.5, 1.75
     * @example
     * ```javascript
     * editor.execCommand( 'lineheight', 1.5);
     * ```
     */
    /**
     * 查询当前选区内容的行高大小
     * @command lineheight
     * @method queryCommandValue
     * @param { String } cmd 命令字符串
     * @return { String } 返回当前行高大小
     * @example
     * ```javascript
     * editor.queryCommandValue( 'lineheight' );
     * ```
     */

    me.commands['lineheight'] =  {
        execCommand : function( cmdName,value ) {
            this.execCommand('paragraph','p',{style:'line-height:'+ (value == "1" ? "normal" : value + 'em') });
            return true;
        },
        queryCommandValue : function() {
            var pN = domUtils.filterNodeList(this.selection.getStartElementPath(),function(node){return domUtils.isBlockElm(node)});
            if(pN){
                var value = domUtils.getComputedStyle(pN,'line-height');
                return value == 'normal' ? 1 : value.replace(/[^\d.]*/ig,"");
            }
        }
    };
};




// plugins/insertcode.js
/**
 * 插入代码插件
 * @file
 * @since 1.2.6.1
 */

UE.plugins['insertcode'] = function() {
    var me = this;
    me.ready(function(){
        utils.cssRule('pre','pre{margin:.5em 0;padding:.4em .6em;border-radius:8px;background:#f8f8f8;}',
            me.document)
    });
    me.setOpt('insertcode',{
            'as3':'ActionScript3',
            'bash':'Bash/Shell',
            'cpp':'C/C++',
            'css':'Css',
            'cf':'CodeFunction',
            'c#':'C#',
            'delphi':'Delphi',
            'diff':'Diff',
            'erlang':'Erlang',
            'groovy':'Groovy',
            'html':'Html',
            'java':'Java',
            'jfx':'JavaFx',
            'js':'Javascript',
            'pl':'Perl',
            'php':'Php',
            'plain':'Plain Text',
            'ps':'PowerShell',
            'python':'Python',
            'ruby':'Ruby',
            'scala':'Scala',
            'sql':'Sql',
            'vb':'Vb',
            'xml':'Xml'
    });

    /**
     * 插入代码
     * @command insertcode
     * @method execCommand
     * @param { String } cmd 命令字符串
     * @param { String } lang 插入代码的语言
     * @example
     * ```javascript
     * editor.execCommand( 'insertcode', 'javascript' );
     * ```
     */

    /**
     * 如果选区所在位置是插入插入代码区域，返回代码的语言
     * @command insertcode
     * @method queryCommandValue
     * @param { String } cmd 命令字符串
     * @return { String } 返回代码的语言
     * @example
     * ```javascript
     * editor.queryCommandValue( 'insertcode' );
     * ```
     */

    me.commands['insertcode'] = {
        execCommand : function(cmd,lang){
            var me = this,
                rng = me.selection.getRange(),
                pre = domUtils.findParentByTagName(rng.startContainer,'pre',true);
            if(pre){
                pre.className = 'brush:'+lang+';toolbar:false;';
            }else{
                var code = '';
                if(rng.collapsed){
                    code = browser.ie && browser.ie11below ? (browser.version <= 8 ? '&nbsp;':''):'<br/>';
                }else{
                    var frag = rng.extractContents();
                    var div = me.document.createElement('div');
                    div.appendChild(frag);

                    utils.each(UE.filterNode(UE.htmlparser(div.innerHTML.replace(/[\r\t]/g,'')),me.options.filterTxtRules).children,function(node){
                        if(browser.ie && browser.ie11below && browser.version > 8){

                            if(node.type =='element'){
                                if(node.tagName == 'br'){
                                    code += '\n'
                                }else if(!dtd.$empty[node.tagName]){
                                    utils.each(node.children,function(cn){
                                        if(cn.type =='element'){
                                            if(cn.tagName == 'br'){
                                                code += '\n'
                                            }else if(!dtd.$empty[node.tagName]){
                                                code += cn.innerText();
                                            }
                                        }else{
                                            code += cn.data
                                        }
                                    })
                                    if(!/\n$/.test(code)){
                                        code += '\n';
                                    }
                                }
                            }else{
                                code += node.data + '\n'
                            }
                            if(!node.nextSibling() && /\n$/.test(code)){
                                code = code.replace(/\n$/,'');
                            }
                        }else{
                            if(browser.ie && browser.ie11below){

                                if(node.type =='element'){
                                    if(node.tagName == 'br'){
                                        code += '<br>'
                                    }else if(!dtd.$empty[node.tagName]){
                                        utils.each(node.children,function(cn){
                                            if(cn.type =='element'){
                                                if(cn.tagName == 'br'){
                                                    code += '<br>'
                                                }else if(!dtd.$empty[node.tagName]){
                                                    code += cn.innerText();
                                                }
                                            }else{
                                                code += cn.data
                                            }
                                        });
                                        if(!/br>$/.test(code)){
                                            code += '<br>';
                                        }
                                    }
                                }else{
                                    code += node.data + '<br>'
                                }
                                if(!node.nextSibling() && /<br>$/.test(code)){
                                    code = code.replace(/<br>$/,'');
                                }

                            }else{
                                code += (node.type == 'element' ? (dtd.$empty[node.tagName] ?  '' : node.innerText()) : node.data);
                                if(!/br\/?\s*>$/.test(code)){
                                    if(!node.nextSibling())
                                        return;
                                    code += '<br>'
                                }
                            }

                        }

                    });
                }
                me.execCommand('inserthtml','<pre id="coder"class="brush:'+lang+';toolbar:false">'+code+'</pre>',true);

                pre = me.document.getElementById('coder');
                domUtils.removeAttributes(pre,'id');
                var tmpNode = pre.previousSibling;

                if(tmpNode && (tmpNode.nodeType == 3 && tmpNode.nodeValue.length == 1 && browser.ie && browser.version == 6 ||  domUtils.isEmptyBlock(tmpNode))){

                    domUtils.remove(tmpNode)
                }
                var rng = me.selection.getRange();
                if(domUtils.isEmptyBlock(pre)){
                    rng.setStart(pre,0).setCursor(false,true)
                }else{
                    rng.selectNodeContents(pre).select()
                }
            }



        },
        queryCommandValue : function(){
            var path = this.selection.getStartElementPath();
            var lang = '';
            utils.each(path,function(node){
                if(node.nodeName =='PRE'){
                    var match = node.className.match(/brush:([^;]+)/);
                    lang = match && match[1] ? match[1] : '';
                    return false;
                }
            });
            return lang;
        }
    };

    me.addInputRule(function(root){
       utils.each(root.getNodesByTagName('pre'),function(pre){
           var brs = pre.getNodesByTagName('br');
           if(brs.length){
               browser.ie && browser.ie11below && browser.version > 8 && utils.each(brs,function(br){
                   var txt = UE.uNode.createText('\n');
                   br.parentNode.insertBefore(txt,br);
                   br.parentNode.removeChild(br);
               });
               return;
            }
           if(browser.ie && browser.ie11below && browser.version > 8)
                return;
            var code = pre.innerText().split(/\n/);
            pre.innerHTML('');
            utils.each(code,function(c){
                if(c.length){
                    pre.appendChild(UE.uNode.createText(c));
                }
                pre.appendChild(UE.uNode.createElement('br'))
            })
       })
    });
    me.addOutputRule(function(root){
        utils.each(root.getNodesByTagName('pre'),function(pre){
            var code = '';
            utils.each(pre.children,function(n){
               if(n.type == 'text'){
                   //在ie下文本内容有可能末尾带有\n要去掉
                   //trace:3396
                   code += n.data.replace(/[ ]/g,'&nbsp;').replace(/\n$/,'');
               }else{
                   if(n.tagName == 'br'){
                       code  += '\n'
                   }else{
                       code += (!dtd.$empty[n.tagName] ? '' : n.innerText());
                   }

               }

            });

            pre.innerText(code.replace(/(&nbsp;|\n)+$/,''))
        })
    });
    //不需要判断highlight的command列表
    me.notNeedCodeQuery ={
        help:1,
        undo:1,
        redo:1,
        source:1,
        print:1,
        searchreplace:1,
        fullscreen:1,
        preview:1,
        insertparagraph:1,
        elementpath:1,
        insertcode:1,
        inserthtml:1,
        selectall:1
    };
    //将queyCommamndState重置
    var orgQuery = me.queryCommandState;
    me.queryCommandState = function(cmd){
        var me = this;

        if(!me.notNeedCodeQuery[cmd.toLowerCase()] && me.selection && me.queryCommandValue('insertcode')){
            return -1;
        }
        return UE.Editor.prototype.queryCommandState.apply(this,arguments)
    };
    me.addListener('beforeenterkeydown',function(){
        var rng = me.selection.getRange();
        var pre = domUtils.findParentByTagName(rng.startContainer,'pre',true);
        if(pre){
            me.fireEvent('saveScene');
            if(!rng.collapsed){
               rng.deleteContents();
            }
            if(!browser.ie || browser.ie9above){
                var tmpNode = me.document.createElement('br'),pre;
                rng.insertNode(tmpNode).setStartAfter(tmpNode).collapse(true);
                var next = tmpNode.nextSibling;
                if(!next && (!browser.ie || browser.version > 10)){
                    rng.insertNode(tmpNode.cloneNode(false));
                }else{
                    rng.setStartAfter(tmpNode);
                }
                pre = tmpNode.previousSibling;
                var tmp;
                while(pre ){
                    tmp = pre;
                    pre = pre.previousSibling;
                    if(!pre || pre.nodeName == 'BR'){
                        pre = tmp;
                        break;
                    }
                }
                if(pre){
                    var str = '';
                    while(pre && pre.nodeName != 'BR' &&  new RegExp('^[\\s'+domUtils.fillChar+']*$').test(pre.nodeValue)){
                        str += pre.nodeValue;
                        pre = pre.nextSibling;
                    }
                    if(pre.nodeName != 'BR'){
                        var match = pre.nodeValue.match(new RegExp('^([\\s'+domUtils.fillChar+']+)'));
                        if(match && match[1]){
                            str += match[1]
                        }

                    }
                    if(str){
                        str = me.document.createTextNode(str);
                        rng.insertNode(str).setStartAfter(str);
                    }
                }
                rng.collapse(true).select(true);
            }else{
                if(browser.version > 8){

                    var txt = me.document.createTextNode('\n');
                    var start = rng.startContainer;
                    if(rng.startOffset == 0){
                        var preNode = start.previousSibling;
                        if(preNode){
                            rng.insertNode(txt);
                            var fillchar = me.document.createTextNode(' ');
                            rng.setStartAfter(txt).insertNode(fillchar).setStart(fillchar,0).collapse(true).select(true)
                        }
                    }else{
                        rng.insertNode(txt).setStartAfter(txt);
                        var fillchar = me.document.createTextNode(' ');
                        start = rng.startContainer.childNodes[rng.startOffset];
                        if(start && !/^\n/.test(start.nodeValue)){
                            rng.setStartBefore(txt)
                        }
                        rng.insertNode(fillchar).setStart(fillchar,0).collapse(true).select(true)
                    }

                }else{
                    var tmpNode = me.document.createElement('br');
                    rng.insertNode(tmpNode);
                    rng.insertNode(me.document.createTextNode(domUtils.fillChar));
                    rng.setStartAfter(tmpNode);
                    pre = tmpNode.previousSibling;
                    var tmp;
                    while(pre ){
                        tmp = pre;
                        pre = pre.previousSibling;
                        if(!pre || pre.nodeName == 'BR'){
                            pre = tmp;
                            break;
                        }
                    }
                    if(pre){
                        var str = '';
                        while(pre && pre.nodeName != 'BR' &&  new RegExp('^[ '+domUtils.fillChar+']*$').test(pre.nodeValue)){
                            str += pre.nodeValue;
                            pre = pre.nextSibling;
                        }
                        if(pre.nodeName != 'BR'){
                            var match = pre.nodeValue.match(new RegExp('^([ '+domUtils.fillChar+']+)'));
                            if(match && match[1]){
                                str += match[1]
                            }

                        }

                        str = me.document.createTextNode(str);
                        rng.insertNode(str).setStartAfter(str);
                    }
                    rng.collapse(true).select();
                }


            }
            me.fireEvent('saveScene');
            return true;
        }


    });

    me.addListener('tabkeydown',function(cmd,evt){
        var rng = me.selection.getRange();
        var pre = domUtils.findParentByTagName(rng.startContainer,'pre',true);
        if(pre){
            me.fireEvent('saveScene');
            if(evt.shiftKey){

            }else{
                if(!rng.collapsed){
                    var bk = rng.createBookmark();
                    var start = bk.start.previousSibling;

                    while(start){
                        if(pre.firstChild === start && !domUtils.isBr(start)){
                            pre.insertBefore(me.document.createTextNode('    '),start);

                            break;
                        }
                        if(domUtils.isBr(start)){
                            pre.insertBefore(me.document.createTextNode('    '),start.nextSibling);

                            break;
                        }
                        start = start.previousSibling;
                    }
                    var end = bk.end;
                    start = bk.start.nextSibling;
                    if(pre.firstChild === bk.start){
                        pre.insertBefore(me.document.createTextNode('    '),start.nextSibling)

                    }
                    while(start && start !== end){
                        if(domUtils.isBr(start) && start.nextSibling){
                            if(start.nextSibling === end){
                                break;
                            }
                            pre.insertBefore(me.document.createTextNode('    '),start.nextSibling)
                        }

                        start = start.nextSibling;
                    }
                    rng.moveToBookmark(bk).select();
                }else{
                    var tmpNode = me.document.createTextNode('    ');
                    rng.insertNode(tmpNode).setStartAfter(tmpNode).collapse(true).select(true);
                }
            }


            me.fireEvent('saveScene');
            return true;
        }


    });


    me.addListener('beforeinserthtml',function(evtName,html){
        var me = this,
            rng = me.selection.getRange(),
            pre = domUtils.findParentByTagName(rng.startContainer,'pre',true);
        if(pre){
            if(!rng.collapsed){
                rng.deleteContents()
            }
            var htmlstr = '';
            if(browser.ie && browser.version > 8){

                utils.each(UE.filterNode(UE.htmlparser(html),me.options.filterTxtRules).children,function(node){
                    if(node.type =='element'){
                        if(node.tagName == 'br'){
                            htmlstr += '\n'
                        }else if(!dtd.$empty[node.tagName]){
                            utils.each(node.children,function(cn){
                                if(cn.type =='element'){
                                    if(cn.tagName == 'br'){
                                        htmlstr += '\n'
                                    }else if(!dtd.$empty[node.tagName]){
                                        htmlstr += cn.innerText();
                                    }
                                }else{
                                    htmlstr += cn.data
                                }
                            })
                            if(!/\n$/.test(htmlstr)){
                                htmlstr += '\n';
                            }
                        }
                    }else{
                        htmlstr += node.data + '\n'
                    }
                    if(!node.nextSibling() && /\n$/.test(htmlstr)){
                        htmlstr = htmlstr.replace(/\n$/,'');
                    }
                });
                var tmpNode = me.document.createTextNode(utils.html(htmlstr.replace(/&nbsp;/g,' ')));
                rng.insertNode(tmpNode).selectNode(tmpNode).select();
            }else{
                var frag = me.document.createDocumentFragment();

                utils.each(UE.filterNode(UE.htmlparser(html),me.options.filterTxtRules).children,function(node){
                    if(node.type =='element'){
                        if(node.tagName == 'br'){
                            frag.appendChild(me.document.createElement('br'))
                        }else if(!dtd.$empty[node.tagName]){
                            utils.each(node.children,function(cn){
                                if(cn.type =='element'){
                                    if(cn.tagName == 'br'){

                                        frag.appendChild(me.document.createElement('br'))
                                    }else if(!dtd.$empty[node.tagName]){
                                        frag.appendChild(me.document.createTextNode(utils.html(cn.innerText().replace(/&nbsp;/g,' '))));

                                    }
                                }else{
                                    frag.appendChild(me.document.createTextNode(utils.html( cn.data.replace(/&nbsp;/g,' '))));

                                }
                            })
                            if(frag.lastChild.nodeName != 'BR'){
                                frag.appendChild(me.document.createElement('br'))
                            }
                        }
                    }else{
                        frag.appendChild(me.document.createTextNode(utils.html( node.data.replace(/&nbsp;/g,' '))));
                    }
                    if(!node.nextSibling() && frag.lastChild.nodeName == 'BR'){
                       frag.removeChild(frag.lastChild)
                    }


                });
                rng.insertNode(frag).select();

            }

            return true;
        }
    });
    //方向键的处理
    me.addListener('keydown',function(cmd,evt){
        var me = this,keyCode = evt.keyCode || evt.which;
        if(keyCode == 40){
            var rng = me.selection.getRange(),pre,start = rng.startContainer;
            if(rng.collapsed && (pre = domUtils.findParentByTagName(rng.startContainer,'pre',true)) && !pre.nextSibling){
                var last = pre.lastChild
                while(last && last.nodeName == 'BR'){
                    last = last.previousSibling;
                }
                if(last === start || rng.startContainer === pre && rng.startOffset == pre.childNodes.length){
                    me.execCommand('insertparagraph');
                    domUtils.preventDefault(evt)
                }

            }
        }
    });
    //trace:3395
    me.addListener('delkeydown',function(type,evt){
        var rng = this.selection.getRange();
        rng.txtToElmBoundary(true);
        var start = rng.startContainer;
        if(domUtils.isTagNode(start,'pre') && rng.collapsed && domUtils.isStartInblock(rng)){
            var p = me.document.createElement('p');
            domUtils.fillNode(me.document,p);
            start.parentNode.insertBefore(p,start);
            domUtils.remove(start);
            rng.setStart(p,0).setCursor(false,true);
            domUtils.preventDefault(evt);
            return true;
        }
    })
};


// plugins/cleardoc.js
/**
 * 清空文档插件
 * @file
 * @since 1.2.6.1
 */

/**
 * 清空文档
 * @command cleardoc
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * //editor 是编辑器实例
 * editor.execCommand('cleardoc');
 * ```
 */

UE.commands['cleardoc'] = {
    execCommand : function( cmdName) {
        var me = this,
            enterTag = me.options.enterTag,
            range = me.selection.getRange();
        if(enterTag == "br"){
            me.body.innerHTML = "<br/>";
            range.setStart(me.body,0).setCursor();
        }else{
            me.body.innerHTML = "<p>"+(ie ? "" : "<br/>")+"</p>";
            range.setStart(me.body.firstChild,0).setCursor(false,true);
        }
        setTimeout(function(){
            me.fireEvent("clearDoc");
        },0);

    }
};



// plugins/anchor.js
/**
 * 锚点插件，为UEditor提供插入锚点支持
 * @file
 * @since 1.2.6.1
 */
UE.plugin.register('anchor', function (){

    return {
        bindEvents:{
            'ready':function(){
                utils.cssRule('anchor',
                    '.anchorclass{background: url(\''
                        + this.options.themePath
                        + this.options.theme +'/images/anchor.gif\') no-repeat scroll left center transparent;cursor: auto;display: inline-block;height: 16px;width: 15px;}',
                    this.document);
            }
        },
       outputRule: function(root){
           utils.each(root.getNodesByTagName('img'),function(a){
               var val;
               if(val = a.getAttr('anchorname')){
                   a.tagName = 'a';
                   a.setAttr({
                       anchorname : '',
                       name : val,
                       'class' : ''
                   })
               }
           })
       },
       inputRule:function(root){
           utils.each(root.getNodesByTagName('a'),function(a){
               var val;
               if((val = a.getAttr('name')) && !a.getAttr('href')){
                   a.tagName = 'img';
                   a.setAttr({
                       anchorname :a.getAttr('name'),
                       'class' : 'anchorclass'
                   });
                   a.setAttr('name')

               }
           })

       },
       commands:{
           /**
            * 插入锚点
            * @command anchor
            * @method execCommand
            * @param { String } cmd 命令字符串
            * @param { String } name 锚点名称字符串
            * @example
            * ```javascript
            * //editor 是编辑器实例
            * editor.execCommand('anchor', 'anchor1');
            * ```
            */
           'anchor':{
               execCommand:function (cmd, name) {
                   var range = this.selection.getRange(),img = range.getClosedNode();
                   if (img && img.getAttribute('anchorname')) {
                       if (name) {
                           img.setAttribute('anchorname', name);
                       } else {
                           range.setStartBefore(img).setCursor();
                           domUtils.remove(img);
                       }
                   } else {
                       if (name) {
                           //只在选区的开始插入
                           var anchor = this.document.createElement('img');
                           range.collapse(true);
                           domUtils.setAttributes(anchor,{
                               'anchorname':name,
                               'class':'anchorclass'
                           });
                           range.insertNode(anchor).setStartAfter(anchor).setCursor(false,true);
                       }
                   }
               }
           }
       }
    }
});


// plugins/wordcount.js
///import core
///commands 字数统计
///commandsName  WordCount,wordCount
///commandsTitle  字数统计
/*
 * Created by JetBrains WebStorm.
 * User: taoqili
 * Date: 11-9-7
 * Time: 下午8:18
 * To change this template use File | Settings | File Templates.
 */

UE.plugins['wordcount'] = function(){
    var me = this;
    me.setOpt('wordCount',true);
    me.addListener('contentchange',function(){
        me.fireEvent('wordcount');
    });
    var timer;
    me.addListener('ready',function(){
        var me = this;
        domUtils.on(me.body,"keyup",function(evt){
            var code = evt.keyCode||evt.which,
                //忽略的按键,ctr,alt,shift,方向键
                ignores = {"16":1,"18":1,"20":1,"37":1,"38":1,"39":1,"40":1};
            if(code in ignores) return;
            clearTimeout(timer);
            timer = setTimeout(function(){
                me.fireEvent('wordcount');
            },200)
        })
    });
};


// plugins/pagebreak.js
/**
 * 分页功能插件
 * @file
 * @since 1.2.6.1
 */
UE.plugins['pagebreak'] = function () {
    var me = this,
        notBreakTags = ['td'];
    me.setOpt('pageBreakTag','_ueditor_page_break_tag_');

    function fillNode(node){
        if(domUtils.isEmptyBlock(node)){
            var firstChild = node.firstChild,tmpNode;

            while(firstChild && firstChild.nodeType == 1 && domUtils.isEmptyBlock(firstChild)){
                tmpNode = firstChild;
                firstChild = firstChild.firstChild;
            }
            !tmpNode && (tmpNode = node);
            domUtils.fillNode(me.document,tmpNode);
        }
    }
    //分页符样式添加

    me.ready(function(){
        utils.cssRule('pagebreak','.pagebreak{display:block;clear:both !important;cursor:default !important;width: 100% !important;margin:0;}',me.document);
    });
    function isHr(node){
        return node && node.nodeType == 1 && node.tagName == 'HR' && node.className == 'pagebreak';
    }
    me.addInputRule(function(root){
        root.traversal(function(node){
            if(node.type == 'text' && node.data == me.options.pageBreakTag){
                var hr = UE.uNode.createElement('<hr class="pagebreak" noshade="noshade" size="5" style="-webkit-user-select: none;">');
                node.parentNode.insertBefore(hr,node);
                node.parentNode.removeChild(node)
            }
        })
    });
    me.addOutputRule(function(node){
        utils.each(node.getNodesByTagName('hr'),function(n){
            if(n.getAttr('class') == 'pagebreak'){
                var txt = UE.uNode.createText(me.options.pageBreakTag);
                n.parentNode.insertBefore(txt,n);
                n.parentNode.removeChild(n);
            }
        })

    });

    /**
     * 插入分页符
     * @command pagebreak
     * @method execCommand
     * @param { String } cmd 命令字符串
     * @remind 在表格中插入分页符会把表格切分成两部分
     * @remind 获取编辑器内的数据时， 编辑器会把分页符转换成“_ueditor_page_break_tag_”字符串，
     *          以便于提交数据到服务器端后处理分页。
     * @example
     * ```javascript
     * editor.execCommand( 'pagebreak'); //插入一个hr标签，带有样式类名pagebreak
     * ```
     */

    me.commands['pagebreak'] = {
        execCommand:function () {
            var range = me.selection.getRange(),hr = me.document.createElement('hr');
            domUtils.setAttributes(hr,{
                'class' : 'pagebreak',
                noshade:"noshade",
                size:"5"
            });
            domUtils.unSelectable(hr);
            //table单独处理
            var node = domUtils.findParentByTagName(range.startContainer, notBreakTags, true),

                parents = [], pN;
            if (node) {
                switch (node.tagName) {
                    case 'TD':
                        pN = node.parentNode;
                        if (!pN.previousSibling) {
                            var table = domUtils.findParentByTagName(pN, 'table');
//                            var tableWrapDiv = table.parentNode;
//                            if(tableWrapDiv && tableWrapDiv.nodeType == 1
//                                && tableWrapDiv.tagName == 'DIV'
//                                && tableWrapDiv.getAttribute('dropdrag')
//                                ){
//                                domUtils.remove(tableWrapDiv,true);
//                            }
                            table.parentNode.insertBefore(hr, table);
                            parents = domUtils.findParents(hr, true);

                        } else {
                            pN.parentNode.insertBefore(hr, pN);
                            parents = domUtils.findParents(hr);

                        }
                        pN = parents[1];
                        if (hr !== pN) {
                            domUtils.breakParent(hr, pN);

                        }
                        //table要重写绑定一下拖拽
                        me.fireEvent('afteradjusttable',me.document);
                }

            } else {

                if (!range.collapsed) {
                    range.deleteContents();
                    var start = range.startContainer;
                    while ( !domUtils.isBody(start) && domUtils.isBlockElm(start) && domUtils.isEmptyNode(start)) {
                        range.setStartBefore(start).collapse(true);
                        domUtils.remove(start);
                        start = range.startContainer;
                    }

                }
                range.insertNode(hr);

                var pN = hr.parentNode, nextNode;
                while (!domUtils.isBody(pN)) {
                    domUtils.breakParent(hr, pN);
                    nextNode = hr.nextSibling;
                    if (nextNode && domUtils.isEmptyBlock(nextNode)) {
                        domUtils.remove(nextNode);
                    }
                    pN = hr.parentNode;
                }
                nextNode = hr.nextSibling;
                var pre = hr.previousSibling;
                if(isHr(pre)){
                    domUtils.remove(pre);
                }else{
                    pre && fillNode(pre);
                }

                if(!nextNode){
                    var p = me.document.createElement('p');

                    hr.parentNode.appendChild(p);
                    domUtils.fillNode(me.document,p);
                    range.setStart(p,0).collapse(true);
                }else{
                    if(isHr(nextNode)){
                        domUtils.remove(nextNode);
                    }else{
                        fillNode(nextNode);
                    }
                    range.setEndAfter(hr).collapse(false);
                }

                range.select(true);

            }

        }
    };
};

// plugins/wordimage.js
///import core
///commands 本地图片引导上传
///commandsName  WordImage
///commandsTitle  本地图片引导上传
///commandsDialog  dialogs\wordimage

UE.plugin.register('wordimage',function(){
    var me = this,
        images = [];
    return {
        commands : {
            'wordimage':{
                execCommand:function () {
                    var images = domUtils.getElementsByTagName(me.body, "img");
                    var urlList = [];
                    for (var i = 0, ci; ci = images[i++];) {
                        var url = ci.getAttribute("word_img");
                        url && urlList.push(url);
                    }
                    return urlList;
                },
                queryCommandState:function () {
                    images = domUtils.getElementsByTagName(me.body, "img");
                    for (var i = 0, ci; ci = images[i++];) {
                        if (ci.getAttribute("word_img")) {
                            return 1;
                        }
                    }
                    return -1;
                },
                notNeedUndo:true
            }
        },
        inputRule : function (root) {
            utils.each(root.getNodesByTagName('img'), function (img) {
                var attrs = img.attrs,
                    flag = parseInt(attrs.width) < 128 || parseInt(attrs.height) < 43,
                    opt = me.options,
                    src = opt.UEDITOR_HOME_URL + 'themes/default/images/spacer.gif';
                if (attrs['src'] && /^(?:(file:\/+))/.test(attrs['src'])) {
                    img.setAttr({
                        width:attrs.width,
                        height:attrs.height,
                        alt:attrs.alt,
                        word_img: attrs.src,
                        src:src,
                        'style':'background:url(' + ( flag ? opt.themePath + opt.theme + '/images/word.gif' : opt.langPath + opt.lang + '/images/localimage.png') + ') no-repeat center center;border:1px solid #ddd'
                    })
                }
            })
        }
    }
});

// plugins/dragdrop.js
UE.plugins['dragdrop'] = function (){

    var me = this;
    me.ready(function(){
        domUtils.on(this.body,'dragend',function(){
            var rng = me.selection.getRange();
            var node = rng.getClosedNode()||me.selection.getStart();

            if(node && node.tagName == 'IMG'){

                var pre = node.previousSibling,next;
                while(next = node.nextSibling){
                    if(next.nodeType == 1 && next.tagName == 'SPAN' && !next.firstChild){
                        domUtils.remove(next)
                    }else{
                        break;
                    }
                }


                if((pre && pre.nodeType == 1 && !domUtils.isEmptyBlock(pre) || !pre) && (!next || next && !domUtils.isEmptyBlock(next))){
                    if(pre && pre.tagName == 'P' && !domUtils.isEmptyBlock(pre)){
                        pre.appendChild(node);
                        domUtils.moveChild(next,pre);
                        domUtils.remove(next);
                    }else  if(next && next.tagName == 'P' && !domUtils.isEmptyBlock(next)){
                        next.insertBefore(node,next.firstChild);
                    }

                    if(pre && pre.tagName == 'P' && domUtils.isEmptyBlock(pre)){
                        domUtils.remove(pre)
                    }
                    if(next && next.tagName == 'P' && domUtils.isEmptyBlock(next)){
                        domUtils.remove(next)
                    }
                    rng.selectNode(node).select();
                    me.fireEvent('saveScene');

                }

            }

        })
    });
    me.addListener('keyup', function(type, evt) {
        var keyCode = evt.keyCode || evt.which;
        if (keyCode == 13) {
            var rng = me.selection.getRange(),node;
            if(node = domUtils.findParentByTagName(rng.startContainer,'p',true)){
                if(domUtils.getComputedStyle(node,'text-align') == 'center'){
                    domUtils.removeStyle(node,'text-align')
                }
            }
        }
    })
};


// plugins/undo.js
/**
 * undo redo
 * @file
 * @since 1.2.6.1
 */

/**
 * 撤销上一次执行的命令
 * @command undo
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'undo' );
 * ```
 */

/**
 * 重做上一次执行的命令
 * @command redo
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'redo' );
 * ```
 */

UE.plugins['undo'] = function () {
    var saveSceneTimer;
    var me = this,
        maxUndoCount = me.options.maxUndoCount || 20,
        maxInputCount = me.options.maxInputCount || 20,
        fillchar = new RegExp(domUtils.fillChar + '|<\/hr>', 'gi');// ie会产生多余的</hr>
    var noNeedFillCharTags = {
        ol:1,ul:1,table:1,tbody:1,tr:1,body:1
    };
    var orgState = me.options.autoClearEmptyNode;
    function compareAddr(indexA, indexB) {
        if (indexA.length != indexB.length)
            return 0;
        for (var i = 0, l = indexA.length; i < l; i++) {
            if (indexA[i] != indexB[i])
                return 0
        }
        return 1;
    }

    function compareRangeAddress(rngAddrA, rngAddrB) {
        if (rngAddrA.collapsed != rngAddrB.collapsed) {
            return 0;
        }
        if (!compareAddr(rngAddrA.startAddress, rngAddrB.startAddress) || !compareAddr(rngAddrA.endAddress, rngAddrB.endAddress)) {
            return 0;
        }
        return 1;
    }

    function UndoManager() {
        this.list = [];
        this.index = 0;
        this.hasUndo = false;
        this.hasRedo = false;
        this.undo = function () {
            if (this.hasUndo) {
                if (!this.list[this.index - 1] && this.list.length == 1) {
                    this.reset();
                    return;
                }
                while (this.list[this.index].content == this.list[this.index - 1].content) {
                    this.index--;
                    if (this.index == 0) {
                        return this.restore(0);
                    }
                }
                this.restore(--this.index);
            }
        };
        this.redo = function () {
            if (this.hasRedo) {
                while (this.list[this.index].content == this.list[this.index + 1].content) {
                    this.index++;
                    if (this.index == this.list.length - 1) {
                        return this.restore(this.index);
                    }
                }
                this.restore(++this.index);
            }
        };

        this.restore = function () {
            var me = this.editor;
            var scene = this.list[this.index];
            var root = UE.htmlparser(scene.content.replace(fillchar, ''));
            me.options.autoClearEmptyNode = false;
            me.filterInputRule(root);
            me.options.autoClearEmptyNode = orgState;
            //trace:873
            //去掉展位符
            me.document.body.innerHTML = root.toHtml();
            me.fireEvent('afterscencerestore');
            //处理undo后空格不展位的问题
            if (browser.ie) {
                utils.each(domUtils.getElementsByTagName(me.document,'td th caption p'),function(node){
                    if(domUtils.isEmptyNode(node)){
                        domUtils.fillNode(me.document, node);
                    }
                })
            }

            try{
                var rng = new dom.Range(me.document).moveToAddress(scene.address);
                rng.select(noNeedFillCharTags[rng.startContainer.nodeName.toLowerCase()]);
            }catch(e){}

            this.update();
            this.clearKey();
            //不能把自己reset了
            me.fireEvent('reset', true);
        };

        this.getScene = function () {
            var me = this.editor;
            var rng = me.selection.getRange(),
                rngAddress = rng.createAddress(false,true);
            me.fireEvent('beforegetscene');
            var root = UE.htmlparser(me.body.innerHTML);
            me.options.autoClearEmptyNode = false;
            me.filterOutputRule(root);
            me.options.autoClearEmptyNode = orgState;
            var cont = root.toHtml();
            //trace:3461
            //这个会引起回退时导致空格丢失的情况
//            browser.ie && (cont = cont.replace(/>&nbsp;</g, '><').replace(/\s*</g, '<').replace(/>\s*/g, '>'));
            me.fireEvent('aftergetscene');

            return {
                address:rngAddress,
                content:cont
            }
        };
        this.save = function (notCompareRange,notSetCursor) {
            clearTimeout(saveSceneTimer);
            var currentScene = this.getScene(notSetCursor),
                lastScene = this.list[this.index];

            if(lastScene && lastScene.content != currentScene.content){
                me.trigger('contentchange')
            }
            //内容相同位置相同不存
            if (lastScene && lastScene.content == currentScene.content &&
                ( notCompareRange ? 1 : compareRangeAddress(lastScene.address, currentScene.address) )
                ) {
                return;
            }
            this.list = this.list.slice(0, this.index + 1);
            this.list.push(currentScene);
            //如果大于最大数量了，就把最前的剔除
            if (this.list.length > maxUndoCount) {
                this.list.shift();
            }
            this.index = this.list.length - 1;
            this.clearKey();
            //跟新undo/redo状态
            this.update();

        };
        this.update = function () {
            this.hasRedo = !!this.list[this.index + 1];
            this.hasUndo = !!this.list[this.index - 1];
        };
        this.reset = function () {
            this.list = [];
            this.index = 0;
            this.hasUndo = false;
            this.hasRedo = false;
            this.clearKey();
        };
        this.clearKey = function () {
            keycont = 0;
            lastKeyCode = null;
        };
    }

    me.undoManger = new UndoManager();
    me.undoManger.editor = me;
    function saveScene() {
        this.undoManger.save();
    }

    me.addListener('saveScene', function () {
        var args = Array.prototype.splice.call(arguments,1);
        this.undoManger.save.apply(this.undoManger,args);
    });

//    me.addListener('beforeexeccommand', saveScene);
//    me.addListener('afterexeccommand', saveScene);

    me.addListener('reset', function (type, exclude) {
        if (!exclude) {
            this.undoManger.reset();
        }
    });
    me.commands['redo'] = me.commands['undo'] = {
        execCommand:function (cmdName) {
            this.undoManger[cmdName]();
        },
        queryCommandState:function (cmdName) {
            return this.undoManger['has' + (cmdName.toLowerCase() == 'undo' ? 'Undo' : 'Redo')] ? 0 : -1;
        },
        notNeedUndo:1
    };

    var keys = {
            //  /*Backspace*/ 8:1, /*Delete*/ 46:1,
            /*Shift*/ 16:1, /*Ctrl*/ 17:1, /*Alt*/ 18:1,
            37:1, 38:1, 39:1, 40:1

        },
        keycont = 0,
        lastKeyCode;
    //输入法状态下不计算字符数
    var inputType = false;
    me.addListener('ready', function () {
        domUtils.on(this.body, 'compositionstart', function () {
            inputType = true;
        });
        domUtils.on(this.body, 'compositionend', function () {
            inputType = false;
        })
    });
    //快捷键
    me.addshortcutkey({
        "Undo":"ctrl+90", //undo
        "Redo":"ctrl+89" //redo

    });
    var isCollapsed = true;
    me.addListener('keydown', function (type, evt) {

        var me = this;
        var keyCode = evt.keyCode || evt.which;
        if (!keys[keyCode] && !evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey) {
            if (inputType)
                return;

            if(!me.selection.getRange().collapsed){
                me.undoManger.save(false,true);
                isCollapsed = false;
                return;
            }
            if (me.undoManger.list.length == 0) {
                me.undoManger.save(true);
            }
            clearTimeout(saveSceneTimer);
            function save(cont){
                cont.undoManger.save(false,true);
                cont.fireEvent('selectionchange');
            }
            saveSceneTimer = setTimeout(function(){
                if(inputType){
                    var interalTimer = setInterval(function(){
                        if(!inputType){
                            save(me);
                            clearInterval(interalTimer)
                        }
                    },300)
                    return;
                }
                save(me);
            },200);

            lastKeyCode = keyCode;
            keycont++;
            if (keycont >= maxInputCount ) {
                save(me)
            }
        }
    });
    me.addListener('keyup', function (type, evt) {
        var keyCode = evt.keyCode || evt.which;
        if (!keys[keyCode] && !evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey) {
            if (inputType)
                return;
            if(!isCollapsed){
                this.undoManger.save(false,true);
                isCollapsed = true;
            }
        }
    });
    //扩展实例，添加关闭和开启命令undo
    me.stopCmdUndo = function(){
        me.__hasEnterExecCommand = true;
    };
    me.startCmdUndo = function(){
        me.__hasEnterExecCommand = false;
    }
};


// plugins/copy.js
UE.plugin.register('copy', function () {

    var me = this;

    function initZeroClipboard() {

        ZeroClipboard.config({
            debug: false,
            swfPath: me.options.UEDITOR_HOME_URL + 'third-party/zeroclipboard/ZeroClipboard.swf'
        });

        var client = me.zeroclipboard = new ZeroClipboard();

        // 复制内容
        client.on('copy', function (e) {
            var client = e.client,
                rng = me.selection.getRange(),
                div = document.createElement('div');

            div.appendChild(rng.cloneContents());
            client.setText(div.innerText || div.textContent);
            client.setHtml(div.innerHTML);
            rng.select();
        });
        // hover事件传递到target
        client.on('mouseover mouseout', function (e) {
            var target = e.target;
            if (e.type == 'mouseover') {
                domUtils.addClass(target, 'edui-state-hover');
            } else if (e.type == 'mouseout') {
                domUtils.removeClasses(target, 'edui-state-hover');
            }
        });
        // flash加载不成功
        client.on('wrongflash noflash', function () {
            ZeroClipboard.destroy();
        });
    }

    return {
        bindEvents: {
            'ready': function () {
                if (!browser.ie) {
                    if (window.ZeroClipboard) {
                        initZeroClipboard();
                    } else {
                        utils.loadFile(document, {
                            src: me.options.UEDITOR_HOME_URL + "third-party/zeroclipboard/ZeroClipboard.js",
                            tag: "script",
                            type: "text/javascript",
                            defer: "defer"
                        }, function () {
                            initZeroClipboard();
                        });
                    }
                }
            }
        },
        commands: {
            'copy': {
                execCommand: function (cmd) {
                    if (!me.document.execCommand('copy')) {
                        alert(me.getLang('copymsg'));
                    }
                }
            }
        }
    }
});


// plugins/paste.js
///import core
///import plugins/inserthtml.js
///import plugins/undo.js
///import plugins/serialize.js
///commands 粘贴
///commandsName  PastePlain
///commandsTitle  纯文本粘贴模式
/**
 * @description 粘贴
 * @author zhanyi
 */
UE.plugins['paste'] = function () {
    function getClipboardData(callback) {
        var doc = this.document;
        if (doc.getElementById('baidu_pastebin')) {
            return;
        }
        var range = this.selection.getRange(),
            bk = range.createBookmark(),
        //创建剪贴的容器div
            pastebin = doc.createElement('div');
        pastebin.id = 'baidu_pastebin';
        // Safari 要求div必须有内容，才能粘贴内容进来
        browser.webkit && pastebin.appendChild(doc.createTextNode(domUtils.fillChar + domUtils.fillChar));
        doc.body.appendChild(pastebin);
        //trace:717 隐藏的span不能得到top
        //bk.start.innerHTML = '&nbsp;';
        bk.start.style.display = '';
        pastebin.style.cssText = "position:absolute;width:1px;height:1px;overflow:hidden;left:-1000px;white-space:nowrap;top:" +
            //要在现在光标平行的位置加入，否则会出现跳动的问题
            domUtils.getXY(bk.start).y + 'px';

        range.selectNodeContents(pastebin).select(true);

        setTimeout(function () {
            if (browser.webkit) {
                for (var i = 0, pastebins = doc.querySelectorAll('#baidu_pastebin'), pi; pi = pastebins[i++];) {
                    if (domUtils.isEmptyNode(pi)) {
                        domUtils.remove(pi);
                    } else {
                        pastebin = pi;
                        break;
                    }
                }
            }
            try {
                pastebin.parentNode.removeChild(pastebin);
            } catch (e) {
            }
            range.moveToBookmark(bk).select(true);
            callback(pastebin);
        }, 0);
    }

    var me = this;

    me.setOpt({
        retainOnlyLabelPasted : false
    });

    var txtContent, htmlContent, address;

    function getPureHtml(html){
        return html.replace(/<(\/?)([\w\-]+)([^>]*)>/gi, function (a, b, tagName, attrs) {
            tagName = tagName.toLowerCase();
            if ({img: 1}[tagName]) {
                return a;
            }
            attrs = attrs.replace(/([\w\-]*?)\s*=\s*(("([^"]*)")|('([^']*)')|([^\s>]+))/gi, function (str, atr, val) {
                if ({
                    'src': 1,
                    'href': 1,
                    'name': 1
                }[atr.toLowerCase()]) {
                    return atr + '=' + val + ' '
                }
                return ''
            });
            if ({
                'span': 1,
                'div': 1
            }[tagName]) {
                return ''
            } else {

                return '<' + b + tagName + ' ' + utils.trim(attrs) + '>'
            }

        });
    }
    function filter(div) {
        var html;
        if (div.firstChild) {
            //去掉cut中添加的边界值
            var nodes = domUtils.getElementsByTagName(div, 'span');
            for (var i = 0, ni; ni = nodes[i++];) {
                if (ni.id == '_baidu_cut_start' || ni.id == '_baidu_cut_end') {
                    domUtils.remove(ni);
                }
            }

            if (browser.webkit) {

                var brs = div.querySelectorAll('div br');
                for (var i = 0, bi; bi = brs[i++];) {
                    var pN = bi.parentNode;
                    if (pN.tagName == 'DIV' && pN.childNodes.length == 1) {
                        pN.innerHTML = '<p><br/></p>';
                        domUtils.remove(pN);
                    }
                }
                var divs = div.querySelectorAll('#baidu_pastebin');
                for (var i = 0, di; di = divs[i++];) {
                    var tmpP = me.document.createElement('p');
                    di.parentNode.insertBefore(tmpP, di);
                    while (di.firstChild) {
                        tmpP.appendChild(di.firstChild);
                    }
                    domUtils.remove(di);
                }

                var metas = div.querySelectorAll('meta');
                for (var i = 0, ci; ci = metas[i++];) {
                    domUtils.remove(ci);
                }

                var brs = div.querySelectorAll('br');
                for (i = 0; ci = brs[i++];) {
                    if (/^apple-/i.test(ci.className)) {
                        domUtils.remove(ci);
                    }
                }
            }
            if (browser.gecko) {
                var dirtyNodes = div.querySelectorAll('[_moz_dirty]');
                for (i = 0; ci = dirtyNodes[i++];) {
                    ci.removeAttribute('_moz_dirty');
                }
            }
            if (!browser.ie) {
                var spans = div.querySelectorAll('span.Apple-style-span');
                for (var i = 0, ci; ci = spans[i++];) {
                    domUtils.remove(ci, true);
                }
            }

            //ie下使用innerHTML会产生多余的\r\n字符，也会产生&nbsp;这里过滤掉
            html = div.innerHTML;//.replace(/>(?:(\s|&nbsp;)*?)</g,'><');

            //过滤word粘贴过来的冗余属性
            html = UE.filterWord(html);
            //取消了忽略空白的第二个参数，粘贴过来的有些是有空白的，会被套上相关的标签
            var root = UE.htmlparser(html);
            //如果给了过滤规则就先进行过滤
            if (me.options.filterRules) {
                UE.filterNode(root, me.options.filterRules);
            }
            //执行默认的处理
            me.filterInputRule(root);
            //针对chrome的处理
            if (browser.webkit) {
                var br = root.lastChild();
                if (br && br.type == 'element' && br.tagName == 'br') {
                    root.removeChild(br)
                }
                utils.each(me.body.querySelectorAll('div'), function (node) {
                    if (domUtils.isEmptyBlock(node)) {
                        domUtils.remove(node,true)
                    }
                })
            }
            html = {'html': root.toHtml()};
            me.fireEvent('beforepaste', html, root);
            //抢了默认的粘贴，那后边的内容就不执行了，比如表格粘贴
            if(!html.html){
                return;
            }
            root = UE.htmlparser(html.html,true);
            //如果开启了纯文本模式
            if (me.queryCommandState('pasteplain') === 1) {
                me.execCommand('insertHtml', UE.filterNode(root, me.options.filterTxtRules).toHtml(), true);
            } else {
                //文本模式
                UE.filterNode(root, me.options.filterTxtRules);
                txtContent = root.toHtml();
                //完全模式
                htmlContent = html.html;

                address = me.selection.getRange().createAddress(true);
                me.execCommand('insertHtml', me.getOpt('retainOnlyLabelPasted') === true ?  getPureHtml(htmlContent) : htmlContent, true);
            }
            me.fireEvent("afterpaste", html);
        }
    }

    me.addListener('pasteTransfer', function (cmd, plainType) {

        if (address && txtContent && htmlContent && txtContent != htmlContent) {
            var range = me.selection.getRange();
            range.moveToAddress(address, true);

            if (!range.collapsed) {

                while (!domUtils.isBody(range.startContainer)
                    ) {
                    var start = range.startContainer;
                    if(start.nodeType == 1){
                        start = start.childNodes[range.startOffset];
                        if(!start){
                            range.setStartBefore(range.startContainer);
                            continue;
                        }
                        var pre = start.previousSibling;

                        if(pre && pre.nodeType == 3 && new RegExp('^[\n\r\t '+domUtils.fillChar+']*$').test(pre.nodeValue)){
                            range.setStartBefore(pre)
                        }
                    }
                    if(range.startOffset == 0){
                        range.setStartBefore(range.startContainer);
                    }else{
                        break;
                    }

                }
                while (!domUtils.isBody(range.endContainer)
                    ) {
                    var end = range.endContainer;
                    if(end.nodeType == 1){
                        end = end.childNodes[range.endOffset];
                        if(!end){
                            range.setEndAfter(range.endContainer);
                            continue;
                        }
                        var next = end.nextSibling;
                        if(next && next.nodeType == 3 && new RegExp('^[\n\r\t'+domUtils.fillChar+']*$').test(next.nodeValue)){
                            range.setEndAfter(next)
                        }
                    }
                    if(range.endOffset == range.endContainer[range.endContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length){
                        range.setEndAfter(range.endContainer);
                    }else{
                        break;
                    }

                }

            }

            range.deleteContents();
            range.select(true);
            me.__hasEnterExecCommand = true;
            var html = htmlContent;
            if (plainType === 2 ) {
                html = getPureHtml(html);
            } else if (plainType) {
                html = txtContent;
            }
            me.execCommand('inserthtml', html, true);
            me.__hasEnterExecCommand = false;
            var rng = me.selection.getRange();
            while (!domUtils.isBody(rng.startContainer) && !rng.startOffset &&
                rng.startContainer[rng.startContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length
                ) {
                rng.setStartBefore(rng.startContainer);
            }
            var tmpAddress = rng.createAddress(true);
            address.endAddress = tmpAddress.startAddress;
        }
    });

    me.addListener('ready', function () {
        domUtils.on(me.body, 'cut', function () {
            var range = me.selection.getRange();
            if (!range.collapsed && me.undoManger) {
                me.undoManger.save();
            }
        });

        //ie下beforepaste在点击右键时也会触发，所以用监控键盘才处理
        domUtils.on(me.body, browser.ie || browser.opera ? 'keydown' : 'paste', function (e) {
            if ((browser.ie || browser.opera) && ((!e.ctrlKey && !e.metaKey) || e.keyCode != '86')) {
                return;
            }
            getClipboardData.call(me, function (div) {
                filter(div);
            });
        });

    });

    me.commands['paste'] = {
        execCommand: function (cmd) {
            if (browser.ie) {
                getClipboardData.call(me, function (div) {
                    filter(div);
                });
                me.document.execCommand('paste');
            } else {
                alert(me.getLang('pastemsg'));
            }
        }
    }
};



// plugins/puretxtpaste.js
/**
 * 纯文本粘贴插件
 * @file
 * @since 1.2.6.1
 */

UE.plugins['pasteplain'] = function(){
    var me = this;
    me.setOpt({
        'pasteplain':false,
        'filterTxtRules' : function(){
            function transP(node){
                node.tagName = 'p';
                node.setStyle();
            }
            function removeNode(node){
                node.parentNode.removeChild(node,true)
            }
            return {
                //直接删除及其字节点内容
                '-' : 'script style object iframe embed input select',
                'p': {$:{}},
                'br':{$:{}},
                div: function (node) {
                    var tmpNode, p = UE.uNode.createElement('p');
                    while (tmpNode = node.firstChild()) {
                        if (tmpNode.type == 'text' || !UE.dom.dtd.$block[tmpNode.tagName]) {
                            p.appendChild(tmpNode);
                        } else {
                            if (p.firstChild()) {
                                node.parentNode.insertBefore(p, node);
                                p = UE.uNode.createElement('p');
                            } else {
                                node.parentNode.insertBefore(tmpNode, node);
                            }
                        }
                    }
                    if (p.firstChild()) {
                        node.parentNode.insertBefore(p, node);
                    }
                    node.parentNode.removeChild(node);
                },
                ol: removeNode,
                ul: removeNode,
                dl:removeNode,
                dt:removeNode,
                dd:removeNode,
                'li':removeNode,
                'caption':transP,
                'th':transP,
                'tr':transP,
                'h1':transP,'h2':transP,'h3':transP,'h4':transP,'h5':transP,'h6':transP,
                'td':function(node){
                        //没有内容的td直接删掉
                        var txt = !!node.innerText();
                        if(txt){
                         node.parentNode.insertAfter(UE.uNode.createText(' &nbsp; &nbsp;'),node);
                    }
                    node.parentNode.removeChild(node,node.innerText())
                }
            }
        }()
    });
    //暂时这里支持一下老版本的属性
    var pasteplain = me.options.pasteplain;

    /**
     * 启用或取消纯文本粘贴模式
     * @command pasteplain
     * @method execCommand
     * @param { String } cmd 命令字符串
     * @example
     * ```javascript
     * editor.queryCommandState( 'pasteplain' );
     * ```
     */

    /**
     * 查询当前是否处于纯文本粘贴模式
     * @command pasteplain
     * @method queryCommandState
     * @param { String } cmd 命令字符串
     * @return { int } 如果处于纯文本模式，返回1，否则，返回0
     * @example
     * ```javascript
     * editor.queryCommandState( 'pasteplain' );
     * ```
     */
    me.commands['pasteplain'] = {
        queryCommandState: function (){
            return pasteplain ? 1 : 0;
        },
        execCommand: function (){
            pasteplain = !pasteplain|0;
        },
        notNeedUndo : 1
    };
};

// plugins/list.js
/**
 * 有序列表,无序列表插件
 * @file
 * @since 1.2.6.1
 */

UE.plugins['list'] = function () {
    var me = this,
        notExchange = {
            'TD':1,
            'PRE':1,
            'BLOCKQUOTE':1
        };
    var customStyle = {
        'cn' : 'cn-1-',
        'cn1' : 'cn-2-',
        'cn2' : 'cn-3-',
        'num':  'num-1-',
        'num1' : 'num-2-',
        'num2' : 'num-3-',
        'dash'  : 'dash',
        'dot':'dot'
    };

    me.setOpt( {
        'autoTransWordToList':false,
        'insertorderedlist':{
            'num':'',
            'num1':'',
            'num2':'',
            'cn':'',
            'cn1':'',
            'cn2':'',
            'decimal':'',
            'lower-alpha':'',
            'lower-roman':'',
            'upper-alpha':'',
            'upper-roman':''
        },
        'insertunorderedlist':{
            'circle':'',
            'disc':'',
            'square':'',
            'dash' : '',
            'dot':''
        },
        listDefaultPaddingLeft : '30',
        listiconpath : 'http://bs.baidu.com/listicon/',
        maxListLevel : -1,//-1不限制
        disablePInList:false
    } );
    function listToArray(list){
        var arr = [];
        for(var p in list){
            arr.push(p)
        }
        return arr;
    }
    var listStyle = {
        'OL':listToArray(me.options.insertorderedlist),
        'UL':listToArray(me.options.insertunorderedlist)
    };
    var liiconpath = me.options.listiconpath;

    //根据用户配置，调整customStyle
    for(var s in customStyle){
        if(!me.options.insertorderedlist.hasOwnProperty(s) && !me.options.insertunorderedlist.hasOwnProperty(s)){
            delete customStyle[s];
        }
    }

    me.ready(function () {
        var customCss = [];
        for(var p in customStyle){
            if(p == 'dash' || p == 'dot'){
                customCss.push('li.list-' + customStyle[p] + '{background-image:url(' + liiconpath +customStyle[p]+'.gif)}');
                customCss.push('ul.custom_'+p+'{list-style:none;}ul.custom_'+p+' li{background-position:0 3px;background-repeat:no-repeat}');
            }else{
                for(var i= 0;i<99;i++){
                    customCss.push('li.list-' + customStyle[p] + i + '{background-image:url(' + liiconpath + 'list-'+customStyle[p] + i + '.gif)}')
                }
                customCss.push('ol.custom_'+p+'{list-style:none;}ol.custom_'+p+' li{background-position:0 3px;background-repeat:no-repeat}');
            }
            switch(p){
                case 'cn':
                    customCss.push('li.list-'+p+'-paddingleft-1{padding-left:25px}');
                    customCss.push('li.list-'+p+'-paddingleft-2{padding-left:40px}');
                    customCss.push('li.list-'+p+'-paddingleft-3{padding-left:55px}');
                    break;
                case 'cn1':
                    customCss.push('li.list-'+p+'-paddingleft-1{padding-left:30px}');
                    customCss.push('li.list-'+p+'-paddingleft-2{padding-left:40px}');
                    customCss.push('li.list-'+p+'-paddingleft-3{padding-left:55px}');
                    break;
                case 'cn2':
                    customCss.push('li.list-'+p+'-paddingleft-1{padding-left:40px}');
                    customCss.push('li.list-'+p+'-paddingleft-2{padding-left:55px}');
                    customCss.push('li.list-'+p+'-paddingleft-3{padding-left:68px}');
                    break;
                case 'num':
                case 'num1':
                    customCss.push('li.list-'+p+'-paddingleft-1{padding-left:25px}');
                    break;
                case 'num2':
                    customCss.push('li.list-'+p+'-paddingleft-1{padding-left:35px}');
                    customCss.push('li.list-'+p+'-paddingleft-2{padding-left:40px}');
                    break;
                case 'dash':
                    customCss.push('li.list-'+p+'-paddingleft{padding-left:35px}');
                    break;
                case 'dot':
                    customCss.push('li.list-'+p+'-paddingleft{padding-left:20px}');
            }
        }
        customCss.push('.list-paddingleft-1{padding-left:0}');
        customCss.push('.list-paddingleft-2{padding-left:'+me.options.listDefaultPaddingLeft+'px}');
        customCss.push('.list-paddingleft-3{padding-left:'+me.options.listDefaultPaddingLeft*2+'px}');
        //如果不给宽度会在自定应样式里出现滚动条
        utils.cssRule('list', 'ol,ul{margin:0;pading:0;'+(browser.ie ? '' : 'width:95%')+'}li{clear:both;}'+customCss.join('\n'), me.document);
    });
    //单独处理剪切的问题
    me.ready(function(){
        domUtils.on(me.body,'cut',function(){
            setTimeout(function(){
                var rng = me.selection.getRange(),li;
                //trace:3416
                if(!rng.collapsed){
                    if(li = domUtils.findParentByTagName(rng.startContainer,'li',true)){
                        if(!li.nextSibling && domUtils.isEmptyBlock(li)){
                            var pn = li.parentNode,node;
                            if(node = pn.previousSibling){
                                domUtils.remove(pn);
                                rng.setStartAtLast(node).collapse(true);
                                rng.select(true);
                            }else if(node = pn.nextSibling){
                                domUtils.remove(pn);
                                rng.setStartAtFirst(node).collapse(true);
                                rng.select(true);
                            }else{
                                var tmpNode = me.document.createElement('p');
                                domUtils.fillNode(me.document,tmpNode);
                                pn.parentNode.insertBefore(tmpNode,pn);
                                domUtils.remove(pn);
                                rng.setStart(tmpNode,0).collapse(true);
                                rng.select(true);
                            }
                        }
                    }
                }

            })
        })
    });

    function getStyle(node){
        var cls = node.className;
        if(domUtils.hasClass(node,/custom_/)){
            return cls.match(/custom_(\w+)/)[1]
        }
        return domUtils.getStyle(node, 'list-style-type')

    }

    me.addListener('beforepaste',function(type,html){
        var me = this,
            rng = me.selection.getRange(),li;
        var root = UE.htmlparser(html.html,true);
        if(li = domUtils.findParentByTagName(rng.startContainer,'li',true)){
            var list = li.parentNode,tagName = list.tagName == 'OL' ? 'ul':'ol';
            utils.each(root.getNodesByTagName(tagName),function(n){
                n.tagName = list.tagName;
                n.setAttr();
                if(n.parentNode === root){
                    type = getStyle(list) || (list.tagName == 'OL' ? 'decimal' : 'disc')
                }else{
                    var className = n.parentNode.getAttr('class');
                    if(className && /custom_/.test(className)){
                        type = className.match(/custom_(\w+)/)[1]
                    }else{
                        type = n.parentNode.getStyle('list-style-type');
                    }
                    if(!type){
                        type = list.tagName == 'OL' ? 'decimal' : 'disc';
                    }
                }
                var index = utils.indexOf(listStyle[list.tagName], type);
                if(n.parentNode !== root)
                    index = index + 1 == listStyle[list.tagName].length ? 0 : index + 1;
                var currentStyle = listStyle[list.tagName][index];
                if(customStyle[currentStyle]){
                    n.setAttr('class', 'custom_' + currentStyle)

                }else{
                    n.setStyle('list-style-type',currentStyle)
                }
            })

        }

        html.html = root.toHtml();
    });
    //导出时，去掉p标签
    me.getOpt('disablePInList') === true && me.addOutputRule(function(root){
        utils.each(root.getNodesByTagName('li'),function(li){
            var newChildrens = [],index=0;
            utils.each(li.children,function(n){
                if(n.tagName == 'p'){
                    var tmpNode;
                    while(tmpNode = n.children.pop()) {
                        newChildrens.splice(index,0,tmpNode);
                        tmpNode.parentNode = li;
                        lastNode = tmpNode;
                    }
                    tmpNode = newChildrens[newChildrens.length-1];
                    if(!tmpNode || tmpNode.type != 'element' || tmpNode.tagName != 'br'){
                        var br = UE.uNode.createElement('br');
                        br.parentNode = li;
                        newChildrens.push(br);
                    }

                    index = newChildrens.length;
                }
            });
            if(newChildrens.length){
                li.children = newChildrens;
            }
        });
    });
    //进入编辑器的li要套p标签
    me.addInputRule(function(root){
        utils.each(root.getNodesByTagName('li'),function(li){
            var tmpP = UE.uNode.createElement('p');
            for(var i= 0,ci;ci=li.children[i];){
                if(ci.type == 'text' || dtd.p[ci.tagName]){
                    tmpP.appendChild(ci);
                }else{
                    if(tmpP.firstChild()){
                        li.insertBefore(tmpP,ci);
                        tmpP = UE.uNode.createElement('p');
                        i = i + 2;
                    }else{
                        i++;
                    }

                }
            }
            if(tmpP.firstChild() && !tmpP.parentNode || !li.firstChild()){
                li.appendChild(tmpP);
            }
            //trace:3357
            //p不能为空
            if (!tmpP.firstChild()) {
                tmpP.innerHTML(browser.ie ? '&nbsp;' : '<br/>')
            }
            //去掉末尾的空白
            var p = li.firstChild();
            var lastChild = p.lastChild();
            if(lastChild && lastChild.type == 'text' && /^\s*$/.test(lastChild.data)){
                p.removeChild(lastChild)
            }
        });
        if(me.options.autoTransWordToList){
            var orderlisttype = {
                    'num1':/^\d+\)/,
                    'decimal':/^\d+\./,
                    'lower-alpha':/^[a-z]+\)/,
                    'upper-alpha':/^[A-Z]+\./,
                    'cn':/^[\u4E00\u4E8C\u4E09\u56DB\u516d\u4e94\u4e03\u516b\u4e5d]+[\u3001]/,
                    'cn2':/^\([\u4E00\u4E8C\u4E09\u56DB\u516d\u4e94\u4e03\u516b\u4e5d]+\)/
                },
                unorderlisttype = {
                    'square':'n'
                };
            function checkListType(content,container){
                var span = container.firstChild();
                if(span &&  span.type == 'element' && span.tagName == 'span' && /Wingdings|Symbol/.test(span.getStyle('font-family'))){
                    for(var p in unorderlisttype){
                        if(unorderlisttype[p] == span.data){
                            return p
                        }
                    }
                    return 'disc'
                }
                for(var p in orderlisttype){
                    if(orderlisttype[p].test(content)){
                        return p;
                    }
                }

            }
            utils.each(root.getNodesByTagName('p'),function(node){
                if(node.getAttr('class') != 'MsoListParagraph'){
                    return
                }

                //word粘贴过来的会带有margin要去掉,但这样也可能会误命中一些央视
                node.setStyle('margin','');
                node.setStyle('margin-left','');
                node.setAttr('class','');

                function appendLi(list,p,type){
                    if(list.tagName == 'ol'){
                        if(browser.ie){
                            var first = p.firstChild();
                            if(first.type =='element' && first.tagName == 'span' && orderlisttype[type].test(first.innerText())){
                                p.removeChild(first);
                            }
                        }else{
                            p.innerHTML(p.innerHTML().replace(orderlisttype[type],''));
                        }
                    }else{
                        p.removeChild(p.firstChild())
                    }

                    var li = UE.uNode.createElement('li');
                    li.appendChild(p);
                    list.appendChild(li);
                }
                var tmp = node,type,cacheNode = node;

                if(node.parentNode.tagName != 'li' && (type = checkListType(node.innerText(),node))){

                    var list = UE.uNode.createElement(me.options.insertorderedlist.hasOwnProperty(type) ? 'ol' : 'ul');
                    if(customStyle[type]){
                        list.setAttr('class','custom_'+type)
                    }else{
                        list.setStyle('list-style-type',type)
                    }
                    while(node && node.parentNode.tagName != 'li' && checkListType(node.innerText(),node)){
                        tmp = node.nextSibling();
                        if(!tmp){
                            node.parentNode.insertBefore(list,node)
                        }
                        appendLi(list,node,type);
                        node = tmp;
                    }
                    if(!list.parentNode && node && node.parentNode){
                        node.parentNode.insertBefore(list,node)
                    }
                }
                var span = cacheNode.firstChild();
                if(span && span.type == 'element' && span.tagName == 'span' && /^\s*(&nbsp;)+\s*$/.test(span.innerText())){
                    span.parentNode.removeChild(span)
                }
            })
        }

    });

    //调整索引标签
    me.addListener('contentchange',function(){
        adjustListStyle(me.document)
    });

    function adjustListStyle(doc,ignore){
        utils.each(domUtils.getElementsByTagName(doc,'ol ul'),function(node){

            if(!domUtils.inDoc(node,doc))
                return;

            var parent = node.parentNode;
            if(parent.tagName == node.tagName){
                var nodeStyleType = getStyle(node) || (node.tagName == 'OL' ? 'decimal' : 'disc'),
                    parentStyleType = getStyle(parent) || (parent.tagName == 'OL' ? 'decimal' : 'disc');
                if(nodeStyleType == parentStyleType){
                    var styleIndex = utils.indexOf(listStyle[node.tagName], nodeStyleType);
                    styleIndex = styleIndex + 1 == listStyle[node.tagName].length ? 0 : styleIndex + 1;
                    setListStyle(node,listStyle[node.tagName][styleIndex])
                }

            }
            var index = 0,type = 2;
            if( domUtils.hasClass(node,/custom_/)){
                if(!(/[ou]l/i.test(parent.tagName) && domUtils.hasClass(parent,/custom_/))){
                    type = 1;
                }
            }else{
                if(/[ou]l/i.test(parent.tagName) && domUtils.hasClass(parent,/custom_/)){
                    type = 3;
                }
            }

            var style = domUtils.getStyle(node, 'list-style-type');
            style && (node.style.cssText = 'list-style-type:' + style);
            node.className = utils.trim(node.className.replace(/list-paddingleft-\w+/,'')) + ' list-paddingleft-' + type;
            utils.each(domUtils.getElementsByTagName(node,'li'),function(li){
                li.style.cssText && (li.style.cssText = '');
                if(!li.firstChild){
                    domUtils.remove(li);
                    return;
                }
                if(li.parentNode !== node){
                    return;
                }
                index++;
                if(domUtils.hasClass(node,/custom_/) ){
                    var paddingLeft = 1,currentStyle = getStyle(node);
                    if(node.tagName == 'OL'){
                        if(currentStyle){
                            switch(currentStyle){
                                case 'cn' :
                                case 'cn1':
                                case 'cn2':
                                    if(index > 10 && (index % 10 == 0 || index > 10 && index < 20)){
                                        paddingLeft = 2
                                    }else if(index > 20){
                                        paddingLeft = 3
                                    }
                                    break;
                                case 'num2' :
                                    if(index > 9){
                                        paddingLeft = 2
                                    }
                            }
                        }
                        li.className = 'list-'+customStyle[currentStyle]+ index + ' ' + 'list-'+currentStyle+'-paddingleft-' + paddingLeft;
                    }else{
                        li.className = 'list-'+customStyle[currentStyle]  + ' ' + 'list-'+currentStyle+'-paddingleft';
                    }
                }else{
                    li.className = li.className.replace(/list-[\w\-]+/gi,'');
                }
                var className = li.getAttribute('class');
                if(className !== null && !className.replace(/\s/g,'')){
                    domUtils.removeAttributes(li,'class')
                }
            });
            !ignore && adjustList(node,node.tagName.toLowerCase(),getStyle(node)||domUtils.getStyle(node, 'list-style-type'),true);
        })
    }
    function adjustList(list, tag, style,ignoreEmpty) {
        var nextList = list.nextSibling;
        if (nextList && nextList.nodeType == 1 && nextList.tagName.toLowerCase() == tag && (getStyle(nextList) || domUtils.getStyle(nextList, 'list-style-type') || (tag == 'ol' ? 'decimal' : 'disc')) == style) {
            domUtils.moveChild(nextList, list);
            if (nextList.childNodes.length == 0) {
                domUtils.remove(nextList);
            }
        }
        if(nextList && domUtils.isFillChar(nextList)){
            domUtils.remove(nextList);
        }
        var preList = list.previousSibling;
        if (preList && preList.nodeType == 1 && preList.tagName.toLowerCase() == tag && (getStyle(preList) || domUtils.getStyle(preList, 'list-style-type') || (tag == 'ol' ? 'decimal' : 'disc')) == style) {
            domUtils.moveChild(list, preList);
        }
        if(preList && domUtils.isFillChar(preList)){
            domUtils.remove(preList);
        }
        !ignoreEmpty && domUtils.isEmptyBlock(list) && domUtils.remove(list);
        if(getStyle(list)){
            adjustListStyle(list.ownerDocument,true)
        }
    }

    function setListStyle(list,style){
        if(customStyle[style]){
            list.className = 'custom_' + style;
        }
        try{
            domUtils.setStyle(list, 'list-style-type', style);
        }catch(e){}
    }
    function clearEmptySibling(node) {
        var tmpNode = node.previousSibling;
        if (tmpNode && domUtils.isEmptyBlock(tmpNode)) {
            domUtils.remove(tmpNode);
        }
        tmpNode = node.nextSibling;
        if (tmpNode && domUtils.isEmptyBlock(tmpNode)) {
            domUtils.remove(tmpNode);
        }
    }

    me.addListener('keydown', function (type, evt) {
        function preventAndSave() {
            evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);
            me.fireEvent('contentchange');
            me.undoManger && me.undoManger.save();
        }
        function findList(node,filterFn){
            while(node && !domUtils.isBody(node)){
                if(filterFn(node)){
                    return null
                }
                if(node.nodeType == 1 && /[ou]l/i.test(node.tagName)){
                    return node;
                }
                node = node.parentNode;
            }
            return null;
        }
        var keyCode = evt.keyCode || evt.which;
        if (keyCode == 13 && !evt.shiftKey) {//回车
            var rng = me.selection.getRange(),
                parent = domUtils.findParent(rng.startContainer,function(node){return domUtils.isBlockElm(node)},true),
                li = domUtils.findParentByTagName(rng.startContainer,'li',true);
            if(parent && parent.tagName != 'PRE' && !li){
                var html = parent.innerHTML.replace(new RegExp(domUtils.fillChar, 'g'),'');
                if(/^\s*1\s*\.[^\d]/.test(html)){
                    parent.innerHTML = html.replace(/^\s*1\s*\./,'');
                    rng.setStartAtLast(parent).collapse(true).select();
                    me.__hasEnterExecCommand = true;
                    me.execCommand('insertorderedlist');
                    me.__hasEnterExecCommand = false;
                }
            }
            var range = me.selection.getRange(),
                start = findList(range.startContainer,function (node) {
                    return node.tagName == 'TABLE';
                }),
                end = range.collapsed ? start : findList(range.endContainer,function (node) {
                    return node.tagName == 'TABLE';
                });

            if (start && end && start === end) {

                if (!range.collapsed) {
                    start = domUtils.findParentByTagName(range.startContainer, 'li', true);
                    end = domUtils.findParentByTagName(range.endContainer, 'li', true);
                    if (start && end && start === end) {
                        range.deleteContents();
                        li = domUtils.findParentByTagName(range.startContainer, 'li', true);
                        if (li && domUtils.isEmptyBlock(li)) {

                            pre = li.previousSibling;
                            next = li.nextSibling;
                            p = me.document.createElement('p');

                            domUtils.fillNode(me.document, p);
                            parentList = li.parentNode;
                            if (pre && next) {
                                range.setStart(next, 0).collapse(true).select(true);
                                domUtils.remove(li);

                            } else {
                                if (!pre && !next || !pre) {

                                    parentList.parentNode.insertBefore(p, parentList);


                                } else {
                                    li.parentNode.parentNode.insertBefore(p, parentList.nextSibling);
                                }
                                domUtils.remove(li);
                                if (!parentList.firstChild) {
                                    domUtils.remove(parentList);
                                }
                                range.setStart(p, 0).setCursor();


                            }
                            preventAndSave();
                            return;

                        }
                    } else {
                        var tmpRange = range.cloneRange(),
                            bk = tmpRange.collapse(false).createBookmark();

                        range.deleteContents();
                        tmpRange.moveToBookmark(bk);
                        var li = domUtils.findParentByTagName(tmpRange.startContainer, 'li', true);

                        clearEmptySibling(li);
                        tmpRange.select();
                        preventAndSave();
                        return;
                    }
                }


                li = domUtils.findParentByTagName(range.startContainer, 'li', true);

                if (li) {
                    if (domUtils.isEmptyBlock(li)) {
                        bk = range.createBookmark();
                        var parentList = li.parentNode;
                        if (li !== parentList.lastChild) {
                            domUtils.breakParent(li, parentList);
                            clearEmptySibling(li);
                        } else {

                            parentList.parentNode.insertBefore(li, parentList.nextSibling);
                            if (domUtils.isEmptyNode(parentList)) {
                                domUtils.remove(parentList);
                            }
                        }
                        //嵌套不处理
                        if (!dtd.$list[li.parentNode.tagName]) {

                            if (!domUtils.isBlockElm(li.firstChild)) {
                                p = me.document.createElement('p');
                                li.parentNode.insertBefore(p, li);
                                while (li.firstChild) {
                                    p.appendChild(li.firstChild);
                                }
                                domUtils.remove(li);
                            } else {
                                domUtils.remove(li, true);
                            }
                        }
                        range.moveToBookmark(bk).select();


                    } else {
                        var first = li.firstChild;
                        if (!first || !domUtils.isBlockElm(first)) {
                            var p = me.document.createElement('p');

                            !li.firstChild && domUtils.fillNode(me.document, p);
                            while (li.firstChild) {

                                p.appendChild(li.firstChild);
                            }
                            li.appendChild(p);
                            first = p;
                        }

                        var span = me.document.createElement('span');

                        range.insertNode(span);
                        domUtils.breakParent(span, li);

                        var nextLi = span.nextSibling;
                        first = nextLi.firstChild;

                        if (!first) {
                            p = me.document.createElement('p');

                            domUtils.fillNode(me.document, p);
                            nextLi.appendChild(p);
                            first = p;
                        }
                        if (domUtils.isEmptyNode(first)) {
                            first.innerHTML = '';
                            domUtils.fillNode(me.document, first);
                        }

                        range.setStart(first, 0).collapse(true).shrinkBoundary().select();
                        domUtils.remove(span);
                        var pre = nextLi.previousSibling;
                        if (pre && domUtils.isEmptyBlock(pre)) {
                            pre.innerHTML = '<p></p>';
                            domUtils.fillNode(me.document, pre.firstChild);
                        }

                    }
//                        }
                    preventAndSave();
                }


            }


        }
        if (keyCode == 8) {
            //修中ie中li下的问题
            range = me.selection.getRange();
            if (range.collapsed && domUtils.isStartInblock(range)) {
                tmpRange = range.cloneRange().trimBoundary();
                li = domUtils.findParentByTagName(range.startContainer, 'li', true);
                //要在li的最左边，才能处理
                if (li && domUtils.isStartInblock(tmpRange)) {
                    start = domUtils.findParentByTagName(range.startContainer, 'p', true);
                    if (start && start !== li.firstChild) {
                        var parentList = domUtils.findParentByTagName(start,['ol','ul']);
                        domUtils.breakParent(start,parentList);
                        clearEmptySibling(start);
                        me.fireEvent('contentchange');
                        range.setStart(start,0).setCursor(false,true);
                        me.fireEvent('saveScene');
                        domUtils.preventDefault(evt);
                        return;
                    }

                    if (li && (pre = li.previousSibling)) {
                        if (keyCode == 46 && li.childNodes.length) {
                            return;
                        }
                        //有可能上边的兄弟节点是个2级菜单，要追加到2级菜单的最后的li
                        if (dtd.$list[pre.tagName]) {
                            pre = pre.lastChild;
                        }
                        me.undoManger && me.undoManger.save();
                        first = li.firstChild;
                        if (domUtils.isBlockElm(first)) {
                            if (domUtils.isEmptyNode(first)) {
//                                    range.setEnd(pre, pre.childNodes.length).shrinkBoundary().collapse().select(true);
                                pre.appendChild(first);
                                range.setStart(first, 0).setCursor(false, true);
                                //first不是唯一的节点
                                while (li.firstChild) {
                                    pre.appendChild(li.firstChild);
                                }
                            } else {

                                span = me.document.createElement('span');
                                range.insertNode(span);
                                //判断pre是否是空的节点,如果是<p><br/></p>类型的空节点，干掉p标签防止它占位
                                if (domUtils.isEmptyBlock(pre)) {
                                    pre.innerHTML = '';
                                }
                                domUtils.moveChild(li, pre);
                                range.setStartBefore(span).collapse(true).select(true);

                                domUtils.remove(span);

                            }
                        } else {
                            if (domUtils.isEmptyNode(li)) {
                                var p = me.document.createElement('p');
                                pre.appendChild(p);
                                range.setStart(p, 0).setCursor();
//                                    range.setEnd(pre, pre.childNodes.length).shrinkBoundary().collapse().select(true);
                            } else {
                                range.setEnd(pre, pre.childNodes.length).collapse().select(true);
                                while (li.firstChild) {
                                    pre.appendChild(li.firstChild);
                                }
                            }
                        }
                        domUtils.remove(li);
                        me.fireEvent('contentchange');
                        me.fireEvent('saveScene');
                        domUtils.preventDefault(evt);
                        return;

                    }
                    //trace:980

                    if (li && !li.previousSibling) {
                        var parentList = li.parentNode;
                        var bk = range.createBookmark();
                        if(domUtils.isTagNode(parentList.parentNode,'ol ul')){
                            parentList.parentNode.insertBefore(li,parentList);
                            if(domUtils.isEmptyNode(parentList)){
                                domUtils.remove(parentList)
                            }
                        }else{

                            while(li.firstChild){
                                parentList.parentNode.insertBefore(li.firstChild,parentList);
                            }

                            domUtils.remove(li);
                            if(domUtils.isEmptyNode(parentList)){
                                domUtils.remove(parentList)
                            }

                        }
                        range.moveToBookmark(bk).setCursor(false,true);
                        me.fireEvent('contentchange');
                        me.fireEvent('saveScene');
                        domUtils.preventDefault(evt);
                        return;

                    }


                }


            }

        }
    });

    me.addListener('keyup',function(type, evt){
        var keyCode = evt.keyCode || evt.which;
        if (keyCode == 8) {
            var rng = me.selection.getRange(),list;
            if(list = domUtils.findParentByTagName(rng.startContainer,['ol', 'ul'],true)){
                adjustList(list,list.tagName.toLowerCase(),getStyle(list)||domUtils.getComputedStyle(list,'list-style-type'),true)
            }
        }
    });
    //处理tab键
    me.addListener('tabkeydown',function(){

        var range = me.selection.getRange();

        //控制级数
        function checkLevel(li){
            if(me.options.maxListLevel != -1){
                var level = li.parentNode,levelNum = 0;
                while(/[ou]l/i.test(level.tagName)){
                    levelNum++;
                    level = level.parentNode;
                }
                if(levelNum >= me.options.maxListLevel){
                    return true;
                }
            }
        }
        //只以开始为准
        //todo 后续改进
        var li = domUtils.findParentByTagName(range.startContainer, 'li', true);
        if(li){

            var bk;
            if(range.collapsed){
                if(checkLevel(li))
                    return true;
                var parentLi = li.parentNode,
                    list = me.document.createElement(parentLi.tagName),
                    index = utils.indexOf(listStyle[list.tagName], getStyle(parentLi)||domUtils.getComputedStyle(parentLi, 'list-style-type'));
                index = index + 1 == listStyle[list.tagName].length ? 0 : index + 1;
                var currentStyle = listStyle[list.tagName][index];
                setListStyle(list,currentStyle);
                if(domUtils.isStartInblock(range)){
                    me.fireEvent('saveScene');
                    bk = range.createBookmark();
                    parentLi.insertBefore(list, li);
                    list.appendChild(li);
                    adjustList(list,list.tagName.toLowerCase(),currentStyle);
                    me.fireEvent('contentchange');
                    range.moveToBookmark(bk).select(true);
                    return true;
                }
            }else{
                me.fireEvent('saveScene');
                bk = range.createBookmark();
                for(var i= 0,closeList,parents = domUtils.findParents(li),ci;ci=parents[i++];){
                    if(domUtils.isTagNode(ci,'ol ul')){
                        closeList = ci;
                        break;
                    }
                }
                var current = li;
                if(bk.end){
                    while(current && !(domUtils.getPosition(current, bk.end) & domUtils.POSITION_FOLLOWING)){
                        if(checkLevel(current)){
                            current = domUtils.getNextDomNode(current,false,null,function(node){return node !== closeList});
                            continue;
                        }
                        var parentLi = current.parentNode,
                            list = me.document.createElement(parentLi.tagName),
                            index = utils.indexOf(listStyle[list.tagName], getStyle(parentLi)||domUtils.getComputedStyle(parentLi, 'list-style-type'));
                        var currentIndex = index + 1 == listStyle[list.tagName].length ? 0 : index + 1;
                        var currentStyle = listStyle[list.tagName][currentIndex];
                        setListStyle(list,currentStyle);
                        parentLi.insertBefore(list, current);
                        while(current && !(domUtils.getPosition(current, bk.end) & domUtils.POSITION_FOLLOWING)){
                            li = current.nextSibling;
                            list.appendChild(current);
                            if(!li || domUtils.isTagNode(li,'ol ul')){
                                if(li){
                                    while(li = li.firstChild){
                                        if(li.tagName == 'LI'){
                                            break;
                                        }
                                    }
                                }else{
                                    li = domUtils.getNextDomNode(current,false,null,function(node){return node !== closeList});
                                }
                                break;
                            }
                            current = li;
                        }
                        adjustList(list,list.tagName.toLowerCase(),currentStyle);
                        current = li;
                    }
                }
                me.fireEvent('contentchange');
                range.moveToBookmark(bk).select();
                return true;
            }
        }

    });
    function getLi(start){
        while(start && !domUtils.isBody(start)){
            if(start.nodeName == 'TABLE'){
                return null;
            }
            if(start.nodeName == 'LI'){
                return start
            }
            start = start.parentNode;
        }
    }

    /**
     * 有序列表，与“insertunorderedlist”命令互斥
     * @command insertorderedlist
     * @method execCommand
     * @param { String } command 命令字符串
     * @param { String } style 插入的有序列表类型，值为：decimal,lower-alpha,lower-roman,upper-alpha,upper-roman,cn,cn1,cn2,num,num1,num2
     * @example
     * ```javascript
     * editor.execCommand( 'insertorderedlist','decimal');
     * ```
     */
    /**
     * 查询当前选区内容是否有序列表
     * @command insertorderedlist
     * @method queryCommandState
     * @param { String } cmd 命令字符串
     * @return { int } 如果当前选区是有序列表返回1，否则返回0
     * @example
     * ```javascript
     * editor.queryCommandState( 'insertorderedlist' );
     * ```
     */
    /**
     * 查询当前选区内容是否有序列表
     * @command insertorderedlist
     * @method queryCommandValue
     * @param { String } cmd 命令字符串
     * @return { String } 返回当前有序列表的类型，值为null或decimal,lower-alpha,lower-roman,upper-alpha,upper-roman,cn,cn1,cn2,num,num1,num2
     * @example
     * ```javascript
     * editor.queryCommandValue( 'insertorderedlist' );
     * ```
     */

    /**
     * 无序列表，与“insertorderedlist”命令互斥
     * @command insertunorderedlist
     * @method execCommand
     * @param { String } command 命令字符串
     * @param { String } style 插入的无序列表类型，值为：circle,disc,square,dash,dot
     * @example
     * ```javascript
     * editor.execCommand( 'insertunorderedlist','circle');
     * ```
     */
    /**
     * 查询当前是否有word文档粘贴进来的图片
     * @command insertunorderedlist
     * @method insertunorderedlist
     * @param { String } command 命令字符串
     * @return { int } 如果当前选区是无序列表返回1，否则返回0
     * @example
     * ```javascript
     * editor.queryCommandState( 'insertunorderedlist' );
     * ```
     */
    /**
     * 查询当前选区内容是否有序列表
     * @command insertunorderedlist
     * @method queryCommandValue
     * @param { String } command 命令字符串
     * @return { String } 返回当前无序列表的类型，值为null或circle,disc,square,dash,dot
     * @example
     * ```javascript
     * editor.queryCommandValue( 'insertunorderedlist' );
     * ```
     */

    me.commands['insertorderedlist'] =
    me.commands['insertunorderedlist'] = {
            execCommand:function (command, style) {

                if (!style) {
                    style = command.toLowerCase() == 'insertorderedlist' ? 'decimal' : 'disc';
                }
                var me = this,
                    range = this.selection.getRange(),
                    filterFn = function (node) {
                        return   node.nodeType == 1 ? node.tagName.toLowerCase() != 'br' : !domUtils.isWhitespace(node);
                    },
                    tag = command.toLowerCase() == 'insertorderedlist' ? 'ol' : 'ul',
                    frag = me.document.createDocumentFragment();
                //去掉是因为会出现选到末尾，导致adjustmentBoundary缩到ol/ul的位置
                //range.shrinkBoundary();//.adjustmentBoundary();
                range.adjustmentBoundary().shrinkBoundary();
                var bko = range.createBookmark(true),
                    start = getLi(me.document.getElementById(bko.start)),
                    modifyStart = 0,
                    end =  getLi(me.document.getElementById(bko.end)),
                    modifyEnd = 0,
                    startParent, endParent,
                    list, tmp;

                if (start || end) {
                    start && (startParent = start.parentNode);
                    if (!bko.end) {
                        end = start;
                    }
                    end && (endParent = end.parentNode);

                    if (startParent === endParent) {
                        while (start !== end) {
                            tmp = start;
                            start = start.nextSibling;
                            if (!domUtils.isBlockElm(tmp.firstChild)) {
                                var p = me.document.createElement('p');
                                while (tmp.firstChild) {
                                    p.appendChild(tmp.firstChild);
                                }
                                tmp.appendChild(p);
                            }
                            frag.appendChild(tmp);
                        }
                        tmp = me.document.createElement('span');
                        startParent.insertBefore(tmp, end);
                        if (!domUtils.isBlockElm(end.firstChild)) {
                            p = me.document.createElement('p');
                            while (end.firstChild) {
                                p.appendChild(end.firstChild);
                            }
                            end.appendChild(p);
                        }
                        frag.appendChild(end);
                        domUtils.breakParent(tmp, startParent);
                        if (domUtils.isEmptyNode(tmp.previousSibling)) {
                            domUtils.remove(tmp.previousSibling);
                        }
                        if (domUtils.isEmptyNode(tmp.nextSibling)) {
                            domUtils.remove(tmp.nextSibling)
                        }
                        var nodeStyle = getStyle(startParent) || domUtils.getComputedStyle(startParent, 'list-style-type') || (command.toLowerCase() == 'insertorderedlist' ? 'decimal' : 'disc');
                        if (startParent.tagName.toLowerCase() == tag && nodeStyle == style) {
                            for (var i = 0, ci, tmpFrag = me.document.createDocumentFragment(); ci = frag.firstChild;) {
                                if(domUtils.isTagNode(ci,'ol ul')){
//                                  删除时，子列表不处理
//                                  utils.each(domUtils.getElementsByTagName(ci,'li'),function(li){
//                                        while(li.firstChild){
//                                            tmpFrag.appendChild(li.firstChild);
//                                        }
//
//                                    });
                                    tmpFrag.appendChild(ci);
                                }else{
                                    while (ci.firstChild) {

                                        tmpFrag.appendChild(ci.firstChild);
                                        domUtils.remove(ci);
                                    }
                                }

                            }
                            tmp.parentNode.insertBefore(tmpFrag, tmp);
                        } else {
                            list = me.document.createElement(tag);
                            setListStyle(list,style);
                            list.appendChild(frag);
                            tmp.parentNode.insertBefore(list, tmp);
                        }

                        domUtils.remove(tmp);
                        list && adjustList(list, tag, style);
                        range.moveToBookmark(bko).select();
                        return;
                    }
                    //开始
                    if (start) {
                        while (start) {
                            tmp = start.nextSibling;
                            if (domUtils.isTagNode(start, 'ol ul')) {
                                frag.appendChild(start);
                            } else {
                                var tmpfrag = me.document.createDocumentFragment(),
                                    hasBlock = 0;
                                while (start.firstChild) {
                                    if (domUtils.isBlockElm(start.firstChild)) {
                                        hasBlock = 1;
                                    }
                                    tmpfrag.appendChild(start.firstChild);
                                }
                                if (!hasBlock) {
                                    var tmpP = me.document.createElement('p');
                                    tmpP.appendChild(tmpfrag);
                                    frag.appendChild(tmpP);
                                } else {
                                    frag.appendChild(tmpfrag);
                                }
                                domUtils.remove(start);
                            }

                            start = tmp;
                        }
                        startParent.parentNode.insertBefore(frag, startParent.nextSibling);
                        if (domUtils.isEmptyNode(startParent)) {
                            range.setStartBefore(startParent);
                            domUtils.remove(startParent);
                        } else {
                            range.setStartAfter(startParent);
                        }
                        modifyStart = 1;
                    }

                    if (end && domUtils.inDoc(endParent, me.document)) {
                        //结束
                        start = endParent.firstChild;
                        while (start && start !== end) {
                            tmp = start.nextSibling;
                            if (domUtils.isTagNode(start, 'ol ul')) {
                                frag.appendChild(start);
                            } else {
                                tmpfrag = me.document.createDocumentFragment();
                                hasBlock = 0;
                                while (start.firstChild) {
                                    if (domUtils.isBlockElm(start.firstChild)) {
                                        hasBlock = 1;
                                    }
                                    tmpfrag.appendChild(start.firstChild);
                                }
                                if (!hasBlock) {
                                    tmpP = me.document.createElement('p');
                                    tmpP.appendChild(tmpfrag);
                                    frag.appendChild(tmpP);
                                } else {
                                    frag.appendChild(tmpfrag);
                                }
                                domUtils.remove(start);
                            }
                            start = tmp;
                        }
                        var tmpDiv = domUtils.createElement(me.document, 'div', {
                            'tmpDiv':1
                        });
                        domUtils.moveChild(end, tmpDiv);

                        frag.appendChild(tmpDiv);
                        domUtils.remove(end);
                        endParent.parentNode.insertBefore(frag, endParent);
                        range.setEndBefore(endParent);
                        if (domUtils.isEmptyNode(endParent)) {
                            domUtils.remove(endParent);
                        }

                        modifyEnd = 1;
                    }


                }

                if (!modifyStart) {
                    range.setStartBefore(me.document.getElementById(bko.start));
                }
                if (bko.end && !modifyEnd) {
                    range.setEndAfter(me.document.getElementById(bko.end));
                }
                range.enlarge(true, function (node) {
                    return notExchange[node.tagName];
                });

                frag = me.document.createDocumentFragment();

                var bk = range.createBookmark(),
                    current = domUtils.getNextDomNode(bk.start, false, filterFn),
                    tmpRange = range.cloneRange(),
                    tmpNode,
                    block = domUtils.isBlockElm;

                while (current && current !== bk.end && (domUtils.getPosition(current, bk.end) & domUtils.POSITION_PRECEDING)) {

                    if (current.nodeType == 3 || dtd.li[current.tagName]) {
                        if (current.nodeType == 1 && dtd.$list[current.tagName]) {
                            while (current.firstChild) {
                                frag.appendChild(current.firstChild);
                            }
                            tmpNode = domUtils.getNextDomNode(current, false, filterFn);
                            domUtils.remove(current);
                            current = tmpNode;
                            continue;

                        }
                        tmpNode = current;
                        tmpRange.setStartBefore(current);

                        while (current && current !== bk.end && (!block(current) || domUtils.isBookmarkNode(current) )) {
                            tmpNode = current;
                            current = domUtils.getNextDomNode(current, false, null, function (node) {
                                return !notExchange[node.tagName];
                            });
                        }

                        if (current && block(current)) {
                            tmp = domUtils.getNextDomNode(tmpNode, false, filterFn);
                            if (tmp && domUtils.isBookmarkNode(tmp)) {
                                current = domUtils.getNextDomNode(tmp, false, filterFn);
                                tmpNode = tmp;
                            }
                        }
                        tmpRange.setEndAfter(tmpNode);

                        current = domUtils.getNextDomNode(tmpNode, false, filterFn);

                        var li = range.document.createElement('li');

                        li.appendChild(tmpRange.extractContents());
                        if(domUtils.isEmptyNode(li)){
                            var tmpNode = range.document.createElement('p');
                            while(li.firstChild){
                                tmpNode.appendChild(li.firstChild)
                            }
                            li.appendChild(tmpNode);
                        }
                        frag.appendChild(li);
                    } else {
                        current = domUtils.getNextDomNode(current, true, filterFn);
                    }
                }
                range.moveToBookmark(bk).collapse(true);
                list = me.document.createElement(tag);
                setListStyle(list,style);
                list.appendChild(frag);
                range.insertNode(list);
                //当前list上下看能否合并
                adjustList(list, tag, style);
                //去掉冗余的tmpDiv
                for (var i = 0, ci, tmpDivs = domUtils.getElementsByTagName(list, 'div'); ci = tmpDivs[i++];) {
                    if (ci.getAttribute('tmpDiv')) {
                        domUtils.remove(ci, true)
                    }
                }
                range.moveToBookmark(bko).select();

            },
            queryCommandState:function (command) {
                var tag = command.toLowerCase() == 'insertorderedlist' ? 'ol' : 'ul';
                var path = this.selection.getStartElementPath();
                for(var i= 0,ci;ci = path[i++];){
                    if(ci.nodeName == 'TABLE'){
                        return 0
                    }
                    if(tag == ci.nodeName.toLowerCase()){
                        return 1
                    };
                }
                return 0;

            },
            queryCommandValue:function (command) {
                var tag = command.toLowerCase() == 'insertorderedlist' ? 'ol' : 'ul';
                var path = this.selection.getStartElementPath(),
                    node;
                for(var i= 0,ci;ci = path[i++];){
                    if(ci.nodeName == 'TABLE'){
                        node = null;
                        break;
                    }
                    if(tag == ci.nodeName.toLowerCase()){
                        node = ci;
                        break;
                    };
                }
                return node ? getStyle(node) || domUtils.getComputedStyle(node, 'list-style-type') : null;
            }
        };
};



// plugins/source.js
/**
 * 源码编辑插件
 * @file
 * @since 1.2.6.1
 */

(function (){
    var sourceEditors = {
        textarea: function (editor, holder){
            var textarea = holder.ownerDocument.createElement('textarea');
            textarea.style.cssText = 'position:absolute;resize:none;width:100%;height:100%;border:0;padding:0;margin:0;overflow-y:auto;';
            // todo: IE下只有onresize属性可用... 很纠结
            if (browser.ie && browser.version < 8) {
                textarea.style.width = holder.offsetWidth + 'px';
                textarea.style.height = holder.offsetHeight + 'px';
                holder.onresize = function (){
                    textarea.style.width = holder.offsetWidth + 'px';
                    textarea.style.height = holder.offsetHeight + 'px';
                };
            }
            holder.appendChild(textarea);
            return {
                setContent: function (content){
                    textarea.value = content;
                },
                getContent: function (){
                    return textarea.value;
                },
                select: function (){
                    var range;
                    if (browser.ie) {
                        range = textarea.createTextRange();
                        range.collapse(true);
                        range.select();
                    } else {
                        //todo: chrome下无法设置焦点
                        textarea.setSelectionRange(0, 0);
                        textarea.focus();
                    }
                },
                dispose: function (){
                    holder.removeChild(textarea);
                    // todo
                    holder.onresize = null;
                    textarea = null;
                    holder = null;
                }
            };
        },
        codemirror: function (editor, holder){

            var codeEditor = window.CodeMirror(holder, {
                mode: "text/html",
                tabMode: "indent",
                lineNumbers: true,
                lineWrapping:true
            });
            var dom = codeEditor.getWrapperElement();
            dom.style.cssText = 'position:absolute;left:0;top:0;width:100%;height:100%;font-family:consolas,"Courier new",monospace;font-size:13px;';
            codeEditor.getScrollerElement().style.cssText = 'position:absolute;left:0;top:0;width:100%;height:100%;';
            codeEditor.refresh();
            return {
                getCodeMirror:function(){
                    return codeEditor;
                },
                setContent: function (content){
                    codeEditor.setValue(content);
                },
                getContent: function (){
                    return codeEditor.getValue();
                },
                select: function (){
                    codeEditor.focus();
                },
                dispose: function (){
                    holder.removeChild(dom);
                    dom = null;
                    codeEditor = null;
                }
            };
        }
    };

    UE.plugins['source'] = function (){
        var me = this;
        var opt = this.options;
        var sourceMode = false;
        var sourceEditor;
        var orgSetContent;
        opt.sourceEditor = browser.ie  ? 'textarea' : (opt.sourceEditor || 'codemirror');

        me.setOpt({
            sourceEditorFirst:false
        });
        function createSourceEditor(holder){
            return sourceEditors[opt.sourceEditor == 'codemirror' && window.CodeMirror ? 'codemirror' : 'textarea'](me, holder);
        }

        var bakCssText;
        //解决在源码模式下getContent不能得到最新的内容问题
        var oldGetContent,
            bakAddress;

        /**
         * 切换源码模式和编辑模式
         * @command source
         * @method execCommand
         * @param { String } cmd 命令字符串
         * @example
         * ```javascript
         * editor.execCommand( 'source');
         * ```
         */

        /**
         * 查询当前编辑区域的状态是源码模式还是可视化模式
         * @command source
         * @method queryCommandState
         * @param { String } cmd 命令字符串
         * @return { int } 如果当前是源码编辑模式，返回1，否则返回0
         * @example
         * ```javascript
         * editor.queryCommandState( 'source' );
         * ```
         */

        me.commands['source'] = {
            execCommand: function (){

                sourceMode = !sourceMode;
                if (sourceMode) {
                    bakAddress = me.selection.getRange().createAddress(false,true);
                    me.undoManger && me.undoManger.save(true);
                    if(browser.gecko){
                        me.body.contentEditable = false;
                    }

                    bakCssText = me.iframe.style.cssText;
                    me.iframe.style.cssText += 'position:absolute;left:-32768px;top:-32768px;';


                    me.fireEvent('beforegetcontent');
                    var root = UE.htmlparser(me.body.innerHTML);
                    me.filterOutputRule(root);
                    root.traversal(function (node) {
                        if (node.type == 'element') {
                            switch (node.tagName) {
                                case 'td':
                                case 'th':
                                case 'caption':
                                if(node.children && node.children.length == 1){
                                    if(node.firstChild().tagName == 'br' ){
                                        node.removeChild(node.firstChild())
                                    }
                                };
                                break;
                                case 'pre':
                                    node.innerText(node.innerText().replace(/&nbsp;/g,' '))

                            }
                        }
                    });

                    me.fireEvent('aftergetcontent');

                    var content = root.toHtml(true);

                    sourceEditor = createSourceEditor(me.iframe.parentNode);

                    sourceEditor.setContent(content);

                    orgSetContent = me.setContent;

                    me.setContent = function(html){
                        //这里暂时不触发事件，防止报错
                        var root = UE.htmlparser(html);
                        me.filterInputRule(root);
                        html = root.toHtml();
                        sourceEditor.setContent(html);
                    };

                    setTimeout(function (){
                        sourceEditor.select();
                        me.addListener('fullscreenchanged', function(){
                            try{
                                sourceEditor.getCodeMirror().refresh()
                            }catch(e){}
                        });
                    });

                    //重置getContent，源码模式下取值也能是最新的数据
                    oldGetContent = me.getContent;
                    me.getContent = function (){
                        return sourceEditor.getContent() || '<p>' + (browser.ie ? '' : '<br/>')+'</p>';
                    };
                } else {
                    me.iframe.style.cssText = bakCssText;
                    var cont = sourceEditor.getContent() || '<p>' + (browser.ie ? '' : '<br/>')+'</p>';
                    //处理掉block节点前后的空格,有可能会误命中，暂时不考虑
                    cont = cont.replace(new RegExp('[\\r\\t\\n ]*<\/?(\\w+)\\s*(?:[^>]*)>','g'), function(a,b){
                        if(b && !dtd.$inlineWithA[b.toLowerCase()]){
                            return a.replace(/(^[\n\r\t ]*)|([\n\r\t ]*$)/g,'');
                        }
                        return a.replace(/(^[\n\r\t]*)|([\n\r\t]*$)/g,'')
                    });

                    me.setContent = orgSetContent;

                    me.setContent(cont);
                    sourceEditor.dispose();
                    sourceEditor = null;
                    //还原getContent方法
                    me.getContent = oldGetContent;
                    var first = me.body.firstChild;
                    //trace:1106 都删除空了，下边会报错，所以补充一个p占位
                    if(!first){
                        me.body.innerHTML = '<p>'+(browser.ie?'':'<br/>')+'</p>';
                        first = me.body.firstChild;
                    }


                    //要在ifm为显示时ff才能取到selection,否则报错
                    //这里不能比较位置了
                    me.undoManger && me.undoManger.save(true);

                    if(browser.gecko){

                        var input = document.createElement('input');
                        input.style.cssText = 'position:absolute;left:0;top:-32768px';

                        document.body.appendChild(input);

                        me.body.contentEditable = false;
                        setTimeout(function(){
                            domUtils.setViewportOffset(input, { left: -32768, top: 0 });
                            input.focus();
                            setTimeout(function(){
                                me.body.contentEditable = true;
                                me.selection.getRange().moveToAddress(bakAddress).select(true);
                                domUtils.remove(input);
                            });

                        });
                    }else{
                        //ie下有可能报错，比如在代码顶头的情况
                        try{
                            me.selection.getRange().moveToAddress(bakAddress).select(true);
                        }catch(e){}

                    }
                }
                this.fireEvent('sourcemodechanged', sourceMode);
            },
            queryCommandState: function (){
                return sourceMode|0;
            },
            notNeedUndo : 1
        };
        var oldQueryCommandState = me.queryCommandState;

        me.queryCommandState = function (cmdName){
            cmdName = cmdName.toLowerCase();
            if (sourceMode) {
                //源码模式下可以开启的命令
                return cmdName in {
                    'source' : 1,
                    'fullscreen' : 1
                } ? 1 : -1
            }
            return oldQueryCommandState.apply(this, arguments);
        };

        if(opt.sourceEditor == "codemirror"){

            me.addListener("ready",function(){
                utils.loadFile(document,{
                    src : opt.codeMirrorJsUrl || opt.UEDITOR_HOME_URL + "third-party/codemirror/codemirror.js",
                    tag : "script",
                    type : "text/javascript",
                    defer : "defer"
                },function(){
                    if(opt.sourceEditorFirst){
                        setTimeout(function(){
                            me.execCommand("source");
                        },0);
                    }
                });
                utils.loadFile(document,{
                    tag : "link",
                    rel : "stylesheet",
                    type : "text/css",
                    href : opt.codeMirrorCssUrl || opt.UEDITOR_HOME_URL + "third-party/codemirror/codemirror.css"
                });

            });
        }

    };

})();

// plugins/enterkey.js
///import core
///import plugins/undo.js
///commands 设置回车标签p或br
///commandsName  EnterKey
///commandsTitle  设置回车标签p或br
/**
 * @description 处理回车
 * @author zhanyi
 */
UE.plugins['enterkey'] = function() {
    var hTag,
        me = this,
        tag = me.options.enterTag;
    me.addListener('keyup', function(type, evt) {

        var keyCode = evt.keyCode || evt.which;
        if (keyCode == 13) {
            var range = me.selection.getRange(),
                start = range.startContainer,
                doSave;

            //修正在h1-h6里边回车后不能嵌套p的问题
            if (!browser.ie) {

                if (/h\d/i.test(hTag)) {
                    if (browser.gecko) {
                        var h = domUtils.findParentByTagName(start, [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6','blockquote','caption','table'], true);
                        if (!h) {
                            me.document.execCommand('formatBlock', false, '<p>');
                            doSave = 1;
                        }
                    } else {
                        //chrome remove div
                        if (start.nodeType == 1) {
                            var tmp = me.document.createTextNode(''),div;
                            range.insertNode(tmp);
                            div = domUtils.findParentByTagName(tmp, 'div', true);
                            if (div) {
                                var p = me.document.createElement('p');
                                while (div.firstChild) {
                                    p.appendChild(div.firstChild);
                                }
                                div.parentNode.insertBefore(p, div);
                                domUtils.remove(div);
                                range.setStartBefore(tmp).setCursor();
                                doSave = 1;
                            }
                            domUtils.remove(tmp);

                        }
                    }

                    if (me.undoManger && doSave) {
                        me.undoManger.save();
                    }
                }
                //没有站位符，会出现多行的问题
                browser.opera &&  range.select();
            }else{
                me.fireEvent('saveScene',true,true)
            }
        }
    });

    me.addListener('keydown', function(type, evt) {
        var keyCode = evt.keyCode || evt.which;
        if (keyCode == 13) {//回车
            if(me.fireEvent('beforeenterkeydown')){
                domUtils.preventDefault(evt);
                return;
            }
            me.fireEvent('saveScene',true,true);
            hTag = '';


            var range = me.selection.getRange();

            if (!range.collapsed) {
                //跨td不能删
                var start = range.startContainer,
                    end = range.endContainer,
                    startTd = domUtils.findParentByTagName(start, 'td', true),
                    endTd = domUtils.findParentByTagName(end, 'td', true);
                if (startTd && endTd && startTd !== endTd || !startTd && endTd || startTd && !endTd) {
                    evt.preventDefault ? evt.preventDefault() : ( evt.returnValue = false);
                    return;
                }
            }
            if (tag == 'p') {


                if (!browser.ie) {

                    start = domUtils.findParentByTagName(range.startContainer, ['ol','ul','p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6','blockquote','caption'], true);

                    //opera下执行formatblock会在table的场景下有问题，回车在opera原生支持很好，所以暂时在opera去掉调用这个原生的command
                    //trace:2431
                    if (!start && !browser.opera) {

                        me.document.execCommand('formatBlock', false, '<p>');

                        if (browser.gecko) {
                            range = me.selection.getRange();
                            start = domUtils.findParentByTagName(range.startContainer, 'p', true);
                            start && domUtils.removeDirtyAttr(start);
                        }


                    } else {
                        hTag = start.tagName;
                        start.tagName.toLowerCase() == 'p' && browser.gecko && domUtils.removeDirtyAttr(start);
                    }

                }

            } else {
                evt.preventDefault ? evt.preventDefault() : ( evt.returnValue = false);

                if (!range.collapsed) {
                    range.deleteContents();
                    start = range.startContainer;
                    if (start.nodeType == 1 && (start = start.childNodes[range.startOffset])) {
                        while (start.nodeType == 1) {
                            if (dtd.$empty[start.tagName]) {
                                range.setStartBefore(start).setCursor();
                                if (me.undoManger) {
                                    me.undoManger.save();
                                }
                                return false;
                            }
                            if (!start.firstChild) {
                                var br = range.document.createElement('br');
                                start.appendChild(br);
                                range.setStart(start, 0).setCursor();
                                if (me.undoManger) {
                                    me.undoManger.save();
                                }
                                return false;
                            }
                            start = start.firstChild;
                        }
                        if (start === range.startContainer.childNodes[range.startOffset]) {
                            br = range.document.createElement('br');
                            range.insertNode(br).setCursor();

                        } else {
                            range.setStart(start, 0).setCursor();
                        }


                    } else {
                        br = range.document.createElement('br');
                        range.insertNode(br).setStartAfter(br).setCursor();
                    }


                } else {
                    br = range.document.createElement('br');
                    range.insertNode(br);
                    var parent = br.parentNode;
                    if (parent.lastChild === br) {
                        br.parentNode.insertBefore(br.cloneNode(true), br);
                        range.setStartBefore(br);
                    } else {
                        range.setStartAfter(br);
                    }
                    range.setCursor();

                }

            }

        }
    });
};


// plugins/keystrokes.js
/* 处理特殊键的兼容性问题 */
UE.plugins['keystrokes'] = function() {
    var me = this;
    var collapsed = true;
    me.addListener('keydown', function(type, evt) {
        var keyCode = evt.keyCode || evt.which,
            rng = me.selection.getRange();

        //处理全选的情况
        if(!rng.collapsed && !(evt.ctrlKey || evt.shiftKey || evt.altKey || evt.metaKey) && (keyCode >= 65 && keyCode <=90
            || keyCode >= 48 && keyCode <= 57 ||
            keyCode >= 96 && keyCode <= 111 || {
                    13:1,
                    8:1,
                    46:1
                }[keyCode])
            ){

            var tmpNode = rng.startContainer;
            if(domUtils.isFillChar(tmpNode)){
                rng.setStartBefore(tmpNode)
            }
            tmpNode = rng.endContainer;
            if(domUtils.isFillChar(tmpNode)){
                rng.setEndAfter(tmpNode)
            }
            rng.txtToElmBoundary();
            //结束边界可能放到了br的前边，要把br包含进来
            // x[xxx]<br/>
            if(rng.endContainer && rng.endContainer.nodeType == 1){
                tmpNode = rng.endContainer.childNodes[rng.endOffset];
                if(tmpNode && domUtils.isBr(tmpNode)){
                    rng.setEndAfter(tmpNode);
                }
            }
            if(rng.startOffset == 0){
                tmpNode = rng.startContainer;
                if(domUtils.isBoundaryNode(tmpNode,'firstChild') ){
                    tmpNode = rng.endContainer;
                    if(rng.endOffset == (tmpNode.nodeType == 3 ? tmpNode.nodeValue.length : tmpNode.childNodes.length) && domUtils.isBoundaryNode(tmpNode,'lastChild')){
                        me.fireEvent('saveScene');
                        me.body.innerHTML = '<p>'+(browser.ie ? '' : '<br/>')+'</p>';
                        rng.setStart(me.body.firstChild,0).setCursor(false,true);
                        me._selectionChange();
                        return;
                    }
                }
            }
        }

        //处理backspace
        if (keyCode == keymap.Backspace) {
            rng = me.selection.getRange();
            collapsed = rng.collapsed;
            if(me.fireEvent('delkeydown',evt)){
                return;
            }
            var start,end;
            //避免按两次删除才能生效的问题
            if(rng.collapsed && rng.inFillChar()){
                start = rng.startContainer;

                if(domUtils.isFillChar(start)){
                    rng.setStartBefore(start).shrinkBoundary(true).collapse(true);
                    domUtils.remove(start)
                }else{
                    start.nodeValue = start.nodeValue.replace(new RegExp('^' + domUtils.fillChar ),'');
                    rng.startOffset--;
                    rng.collapse(true).select(true)
                }
            }

            //解决选中control元素不能删除的问题
            if (start = rng.getClosedNode()) {
                me.fireEvent('saveScene');
                rng.setStartBefore(start);
                domUtils.remove(start);
                rng.setCursor();
                me.fireEvent('saveScene');
                domUtils.preventDefault(evt);
                return;
            }
            //阻止在table上的删除
            if (!browser.ie) {
                start = domUtils.findParentByTagName(rng.startContainer, 'table', true);
                end = domUtils.findParentByTagName(rng.endContainer, 'table', true);
                if (start && !end || !start && end || start !== end) {
                    evt.preventDefault();
                    return;
                }
            }

        }
        //处理tab键的逻辑
        if (keyCode == keymap.Tab) {
            //不处理以下标签
            var excludeTagNameForTabKey = {
                'ol' : 1,
                'ul' : 1,
                'table':1
            };
            //处理组件里的tab按下事件
            if(me.fireEvent('tabkeydown',evt)){
                domUtils.preventDefault(evt);
                return;
            }
            var range = me.selection.getRange();
            me.fireEvent('saveScene');
            for (var i = 0,txt = '',tabSize = me.options.tabSize|| 4,tabNode =  me.options.tabNode || '&nbsp;'; i < tabSize; i++) {
                txt += tabNode;
            }
            var span = me.document.createElement('span');
            span.innerHTML = txt + domUtils.fillChar;
            if (range.collapsed) {
                range.insertNode(span.cloneNode(true).firstChild).setCursor(true);
            } else {
                var filterFn = function(node) {
                    return domUtils.isBlockElm(node) && !excludeTagNameForTabKey[node.tagName.toLowerCase()]

                };
                //普通的情况
                start = domUtils.findParent(range.startContainer, filterFn,true);
                end = domUtils.findParent(range.endContainer, filterFn,true);
                if (start && end && start === end) {
                    range.deleteContents();
                    range.insertNode(span.cloneNode(true).firstChild).setCursor(true);
                } else {
                    var bookmark = range.createBookmark();
                    range.enlarge(true);
                    var bookmark2 = range.createBookmark(),
                        current = domUtils.getNextDomNode(bookmark2.start, false, filterFn);
                    while (current && !(domUtils.getPosition(current, bookmark2.end) & domUtils.POSITION_FOLLOWING)) {
                        current.insertBefore(span.cloneNode(true).firstChild, current.firstChild);
                        current = domUtils.getNextDomNode(current, false, filterFn);
                    }
                    range.moveToBookmark(bookmark2).moveToBookmark(bookmark).select();
                }
            }
            domUtils.preventDefault(evt)
        }
        //trace:1634
        //ff的del键在容器空的时候，也会删除
        if(browser.gecko && keyCode == 46){
            range = me.selection.getRange();
            if(range.collapsed){
                start = range.startContainer;
                if(domUtils.isEmptyBlock(start)){
                    var parent = start.parentNode;
                    while(domUtils.getChildCount(parent) == 1 && !domUtils.isBody(parent)){
                        start = parent;
                        parent = parent.parentNode;
                    }
                    if(start === parent.lastChild)
                        evt.preventDefault();
                    return;
                }
            }
        }
    });
    me.addListener('keyup', function(type, evt) {
        var keyCode = evt.keyCode || evt.which,
            rng,me = this;
        if(keyCode == keymap.Backspace){
            if(me.fireEvent('delkeyup')){
                return;
            }
            rng = me.selection.getRange();
            if(rng.collapsed){
                var tmpNode,
                    autoClearTagName = ['h1','h2','h3','h4','h5','h6'];
                if(tmpNode = domUtils.findParentByTagName(rng.startContainer,autoClearTagName,true)){
                    if(domUtils.isEmptyBlock(tmpNode)){
                        var pre = tmpNode.previousSibling;
                        if(pre && pre.nodeName != 'TABLE'){
                            domUtils.remove(tmpNode);
                            rng.setStartAtLast(pre).setCursor(false,true);
                            return;
                        }else{
                            var next = tmpNode.nextSibling;
                            if(next && next.nodeName != 'TABLE'){
                                domUtils.remove(tmpNode);
                                rng.setStartAtFirst(next).setCursor(false,true);
                                return;
                            }
                        }
                    }
                }
                //处理当删除到body时，要重新给p标签展位
                if(domUtils.isBody(rng.startContainer)){
                    var tmpNode = domUtils.createElement(me.document,'p',{
                        'innerHTML' : browser.ie ? domUtils.fillChar : '<br/>'
                    });
                    rng.insertNode(tmpNode).setStart(tmpNode,0).setCursor(false,true);
                }
            }


            //chrome下如果删除了inline标签，浏览器会有记忆，在输入文字还是会套上刚才删除的标签，所以这里再选一次就不会了
            if( !collapsed && (rng.startContainer.nodeType == 3 || rng.startContainer.nodeType == 1 && domUtils.isEmptyBlock(rng.startContainer))){
                if(browser.ie){
                    var span = rng.document.createElement('span');
                    rng.insertNode(span).setStartBefore(span).collapse(true);
                    rng.select();
                    domUtils.remove(span)
                }else{
                    rng.select()
                }

            }
        }


    })
};

// plugins/fiximgclick.js
///import core
///commands 修复chrome下图片不能点击的问题，出现八个角可改变大小
///commandsName  FixImgClick
///commandsTitle  修复chrome下图片不能点击的问题，出现八个角可改变大小
//修复chrome下图片不能点击的问题，出现八个角可改变大小

UE.plugins['fiximgclick'] = (function () {

    var elementUpdated = false;
    function Scale() {
        this.editor = null;
        this.resizer = null;
        this.cover = null;
        this.doc = document;
        this.prePos = {x: 0, y: 0};
        this.startPos = {x: 0, y: 0};
    }

    (function () {
        var rect = [
            //[left, top, width, height]
            [0, 0, -1, -1],
            [0, 0, 0, -1],
            [0, 0, 1, -1],
            [0, 0, -1, 0],
            [0, 0, 1, 0],
            [0, 0, -1, 1],
            [0, 0, 0, 1],
            [0, 0, 1, 1]
        ];

        Scale.prototype = {
            init: function (editor) {
                var me = this;
                me.editor = editor;
                me.startPos = this.prePos = {x: 0, y: 0};
                me.dragId = -1;

                var hands = [],
                    cover = me.cover = document.createElement('div'),
                    resizer = me.resizer = document.createElement('div');

                cover.id = me.editor.ui.id + '_imagescale_cover';
                cover.style.cssText = 'position:absolute;display:none;z-index:' + (me.editor.options.zIndex) + ';filter:alpha(opacity=0); opacity:0;background:#CCC;';
                domUtils.on(cover, 'mousedown click', function () {
                    me.hide();
                });

                for (i = 0; i < 8; i++) {
                    hands.push('<span class="edui-editor-imagescale-hand' + i + '"></span>');
                }
                resizer.id = me.editor.ui.id + '_imagescale';
                resizer.className = 'edui-editor-imagescale';
                resizer.innerHTML = hands.join('');
                resizer.style.cssText += ';display:none;border:1px solid #3b77ff;z-index:' + (me.editor.options.zIndex) + ';';

                me.editor.ui.getDom().appendChild(cover);
                me.editor.ui.getDom().appendChild(resizer);

                me.initStyle();
                me.initEvents();
            },
            initStyle: function () {
                utils.cssRule('imagescale', '.edui-editor-imagescale{display:none;position:absolute;border:1px solid #38B2CE;cursor:hand;-webkit-box-sizing: content-box;-moz-box-sizing: content-box;box-sizing: content-box;}' +
                    '.edui-editor-imagescale span{position:absolute;width:6px;height:6px;overflow:hidden;font-size:0px;display:block;background-color:#3C9DD0;}'
                    + '.edui-editor-imagescale .edui-editor-imagescale-hand0{cursor:nw-resize;top:0;margin-top:-4px;left:0;margin-left:-4px;}'
                    + '.edui-editor-imagescale .edui-editor-imagescale-hand1{cursor:n-resize;top:0;margin-top:-4px;left:50%;margin-left:-4px;}'
                    + '.edui-editor-imagescale .edui-editor-imagescale-hand2{cursor:ne-resize;top:0;margin-top:-4px;left:100%;margin-left:-3px;}'
                    + '.edui-editor-imagescale .edui-editor-imagescale-hand3{cursor:w-resize;top:50%;margin-top:-4px;left:0;margin-left:-4px;}'
                    + '.edui-editor-imagescale .edui-editor-imagescale-hand4{cursor:e-resize;top:50%;margin-top:-4px;left:100%;margin-left:-3px;}'
                    + '.edui-editor-imagescale .edui-editor-imagescale-hand5{cursor:sw-resize;top:100%;margin-top:-3px;left:0;margin-left:-4px;}'
                    + '.edui-editor-imagescale .edui-editor-imagescale-hand6{cursor:s-resize;top:100%;margin-top:-3px;left:50%;margin-left:-4px;}'
                    + '.edui-editor-imagescale .edui-editor-imagescale-hand7{cursor:se-resize;top:100%;margin-top:-3px;left:100%;margin-left:-3px;}');
            },
            initEvents: function () {
                var me = this;

                me.startPos.x = me.startPos.y = 0;
                me.isDraging = false;
            },
            _eventHandler: function (e) {
                var me = this;
                switch (e.type) {
                    case 'mousedown':
                        var hand = e.target || e.srcElement, hand;
                        if (hand.className.indexOf('edui-editor-imagescale-hand') != -1 && me.dragId == -1) {
                            me.dragId = hand.className.slice(-1);
                            me.startPos.x = me.prePos.x = e.clientX;
                            me.startPos.y = me.prePos.y = e.clientY;
                            domUtils.on(me.doc,'mousemove', me.proxy(me._eventHandler, me));
                        }
                        break;
                    case 'mousemove':
                        if (me.dragId != -1) {
                            me.updateContainerStyle(me.dragId, {x: e.clientX - me.prePos.x, y: e.clientY - me.prePos.y});
                            me.prePos.x = e.clientX;
                            me.prePos.y = e.clientY;
                            elementUpdated = true;
                            me.updateTargetElement();

                        }
                        break;
                    case 'mouseup':
                        if (me.dragId != -1) {
                            me.updateContainerStyle(me.dragId, {x: e.clientX - me.prePos.x, y: e.clientY - me.prePos.y});
                            me.updateTargetElement();
                            if (me.target.parentNode) me.attachTo(me.target);
                            me.dragId = -1;
                        }
                        domUtils.un(me.doc,'mousemove', me.proxy(me._eventHandler, me));
                        //修复只是点击挪动点，但没有改变大小，不应该触发contentchange
                        if(elementUpdated){
                            elementUpdated = false;
                            me.editor.fireEvent('contentchange');
                        }

                        break;
                    default:
                        break;
                }
            },
            updateTargetElement: function () {
                var me = this;
                domUtils.setStyles(me.target, {
                    'width': me.resizer.style.width,
                    'height': me.resizer.style.height
                });
                me.target.width = parseInt(me.resizer.style.width);
                me.target.height = parseInt(me.resizer.style.height);
                me.attachTo(me.target);
            },
            updateContainerStyle: function (dir, offset) {
                var me = this,
                    dom = me.resizer, tmp;

                if (rect[dir][0] != 0) {
                    tmp = parseInt(dom.style.left) + offset.x;
                    dom.style.left = me._validScaledProp('left', tmp) + 'px';
                }
                if (rect[dir][1] != 0) {
                    tmp = parseInt(dom.style.top) + offset.y;
                    dom.style.top = me._validScaledProp('top', tmp) + 'px';
                }
                if (rect[dir][2] != 0) {
                    tmp = dom.clientWidth + rect[dir][2] * offset.x;
                    dom.style.width = me._validScaledProp('width', tmp) + 'px';
                }
                if (rect[dir][3] != 0) {
                    tmp = dom.clientHeight + rect[dir][3] * offset.y;
                    dom.style.height = me._validScaledProp('height', tmp) + 'px';
                }
            },
            _validScaledProp: function (prop, value) {
                var ele = this.resizer,
                    wrap = document;

                value = isNaN(value) ? 0 : value;
                switch (prop) {
                    case 'left':
                        return value < 0 ? 0 : (value + ele.clientWidth) > wrap.clientWidth ? wrap.clientWidth - ele.clientWidth : value;
                    case 'top':
                        return value < 0 ? 0 : (value + ele.clientHeight) > wrap.clientHeight ? wrap.clientHeight - ele.clientHeight : value;
                    case 'width':
                        return value <= 0 ? 1 : (value + ele.offsetLeft) > wrap.clientWidth ? wrap.clientWidth - ele.offsetLeft : value;
                    case 'height':
                        return value <= 0 ? 1 : (value + ele.offsetTop) > wrap.clientHeight ? wrap.clientHeight - ele.offsetTop : value;
                }
            },
            hideCover: function () {
                this.cover.style.display = 'none';
            },
            showCover: function () {
                var me = this,
                    editorPos = domUtils.getXY(me.editor.ui.getDom()),
                    iframePos = domUtils.getXY(me.editor.iframe);

                domUtils.setStyles(me.cover, {
                    'width': me.editor.iframe.offsetWidth + 'px',
                    'height': me.editor.iframe.offsetHeight + 'px',
                    'top': iframePos.y - editorPos.y + 'px',
                    'left': iframePos.x - editorPos.x + 'px',
                    'position': 'absolute',
                    'display': ''
                })
            },
            show: function (targetObj) {
                var me = this;
                me.resizer.style.display = 'block';
                if(targetObj) me.attachTo(targetObj);

                domUtils.on(this.resizer, 'mousedown', me.proxy(me._eventHandler, me));
                domUtils.on(me.doc, 'mouseup', me.proxy(me._eventHandler, me));

                me.showCover();
                me.editor.fireEvent('afterscaleshow', me);
                me.editor.fireEvent('saveScene');
            },
            hide: function () {
                var me = this;
                me.hideCover();
                me.resizer.style.display = 'none';

                domUtils.un(me.resizer, 'mousedown', me.proxy(me._eventHandler, me));
                domUtils.un(me.doc, 'mouseup', me.proxy(me._eventHandler, me));
                me.editor.fireEvent('afterscalehide', me);
            },
            proxy: function( fn, context ) {
                return function(e) {
                    return fn.apply( context || this, arguments);
                };
            },
            attachTo: function (targetObj) {
                var me = this,
                    target = me.target = targetObj,
                    resizer = this.resizer,
                    imgPos = domUtils.getXY(target),
                    iframePos = domUtils.getXY(me.editor.iframe),
                    editorPos = domUtils.getXY(resizer.parentNode);

                domUtils.setStyles(resizer, {
                    'width': target.width + 'px',
                    'height': target.height + 'px',
                    'left': iframePos.x + imgPos.x - me.editor.document.body.scrollLeft - editorPos.x - parseInt(resizer.style.borderLeftWidth) + 'px',
                    'top': iframePos.y + imgPos.y - me.editor.document.body.scrollTop - editorPos.y - parseInt(resizer.style.borderTopWidth) + 'px'
                });
            }
        }
    })();

    return function () {
        var me = this,
            imageScale;

        me.setOpt('imageScaleEnabled', true);

        if ( !browser.ie && me.options.imageScaleEnabled) {
            me.addListener('click', function (type, e) {

                var range = me.selection.getRange(),
                    img = range.getClosedNode();

                if (img && img.tagName == 'IMG' && me.body.contentEditable!="false") {

                    if (img.className.indexOf("edui-faked-music") != -1 ||
                        img.getAttribute("anchorname") ||
                        domUtils.hasClass(img, 'loadingclass') ||
                        domUtils.hasClass(img, 'loaderrorclass')) { return }

                    if (!imageScale) {
                        imageScale = new Scale();
                        imageScale.init(me);
                        me.ui.getDom().appendChild(imageScale.resizer);

                        var _keyDownHandler = function (e) {
                            imageScale.hide();
                            if(imageScale.target) me.selection.getRange().selectNode(imageScale.target).select();
                        }, _mouseDownHandler = function (e) {
                            var ele = e.target || e.srcElement;
                            if (ele && (ele.className===undefined || ele.className.indexOf('edui-editor-imagescale') == -1)) {
                                _keyDownHandler(e);
                            }
                        }, timer;

                        me.addListener('afterscaleshow', function (e) {
                            me.addListener('beforekeydown', _keyDownHandler);
                            me.addListener('beforemousedown', _mouseDownHandler);
                            domUtils.on(document, 'keydown', _keyDownHandler);
                            domUtils.on(document,'mousedown', _mouseDownHandler);
                            me.selection.getNative().removeAllRanges();
                        });
                        me.addListener('afterscalehide', function (e) {
                            me.removeListener('beforekeydown', _keyDownHandler);
                            me.removeListener('beforemousedown', _mouseDownHandler);
                            domUtils.un(document, 'keydown', _keyDownHandler);
                            domUtils.un(document,'mousedown', _mouseDownHandler);
                            var target = imageScale.target;
                            if (target.parentNode) {
                                me.selection.getRange().selectNode(target).select();
                            }
                        });
                        //TODO 有iframe的情况，mousedown不能往下传。。
                        domUtils.on(imageScale.resizer, 'mousedown', function (e) {
                            me.selection.getNative().removeAllRanges();
                            var ele = e.target || e.srcElement;
                            if (ele && ele.className.indexOf('edui-editor-imagescale-hand') == -1) {
                                timer = setTimeout(function () {
                                    imageScale.hide();
                                    if(imageScale.target) me.selection.getRange().selectNode(ele).select();
                                }, 200);
                            }
                        });
                        domUtils.on(imageScale.resizer, 'mouseup', function (e) {
                            var ele = e.target || e.srcElement;
                            if (ele && ele.className.indexOf('edui-editor-imagescale-hand') == -1) {
                                clearTimeout(timer);
                            }
                        });
                    }
                    imageScale.show(img);
                } else {
                    if (imageScale && imageScale.resizer.style.display != 'none') imageScale.hide();
                }
            });
        }

        if (browser.webkit) {
            me.addListener('click', function (type, e) {
                if (e.target.tagName == 'IMG' && me.body.contentEditable!="false") {
                    var range = new dom.Range(me.document);
                    range.selectNode(e.target).select();
                }
            });
        }
    }
})();

// plugins/autolink.js
///import core
///commands 为非ie浏览器自动添加a标签
///commandsName  AutoLink
///commandsTitle  自动增加链接
/**
 * @description 为非ie浏览器自动添加a标签
 * @author zhanyi
 */

UE.plugin.register('autolink',function(){
    var cont = 0;

    return !browser.ie ? {

            bindEvents:{
                'reset' : function(){
                    cont = 0;
                },
                'keydown':function(type, evt) {
                    var me = this;
                    var keyCode = evt.keyCode || evt.which;

                    if (keyCode == 32 || keyCode == 13) {

                        var sel = me.selection.getNative(),
                            range = sel.getRangeAt(0).cloneRange(),
                            offset,
                            charCode;

                        var start = range.startContainer;
                        while (start.nodeType == 1 && range.startOffset > 0) {
                            start = range.startContainer.childNodes[range.startOffset - 1];
                            if (!start){
                                break;
                            }
                            range.setStart(start, start.nodeType == 1 ? start.childNodes.length : start.nodeValue.length);
                            range.collapse(true);
                            start = range.startContainer;
                        }

                        do{
                            if (range.startOffset == 0) {
                                start = range.startContainer.previousSibling;

                                while (start && start.nodeType == 1) {
                                    start = start.lastChild;
                                }
                                if (!start || domUtils.isFillChar(start)){
                                    break;
                                }
                                offset = start.nodeValue.length;
                            } else {
                                start = range.startContainer;
                                offset = range.startOffset;
                            }
                            range.setStart(start, offset - 1);
                            charCode = range.toString().charCodeAt(0);
                        } while (charCode != 160 && charCode != 32);

                        if (range.toString().replace(new RegExp(domUtils.fillChar, 'g'), '').match(/(?:https?:\/\/|ssh:\/\/|ftp:\/\/|file:\/|www\.)/i)) {
                            while(range.toString().length){
                                if(/^(?:https?:\/\/|ssh:\/\/|ftp:\/\/|file:\/|www\.)/i.test(range.toString())){
                                    break;
                                }
                                try{
                                    range.setStart(range.startContainer,range.startOffset+1);
                                }catch(e){
                                    //trace:2121
                                    var start = range.startContainer;
                                    while(!(next = start.nextSibling)){
                                        if(domUtils.isBody(start)){
                                            return;
                                        }
                                        start = start.parentNode;

                                    }
                                    range.setStart(next,0);

                                }

                            }
                            //range的开始边界已经在a标签里的不再处理
                            if(domUtils.findParentByTagName(range.startContainer,'a',true)){
                                return;
                            }
                            var a = me.document.createElement('a'),text = me.document.createTextNode(' '),href;

                            me.undoManger && me.undoManger.save();
                            a.appendChild(range.extractContents());
                            a.href = a.innerHTML = a.innerHTML.replace(/<[^>]+>/g,'');
                            href = a.getAttribute("href").replace(new RegExp(domUtils.fillChar,'g'),'');
                            href = /^(?:https?:\/\/)/ig.test(href) ? href : "http://"+ href;
                            a.setAttribute('_src',utils.html(href));
                            a.href = utils.html(href);

                            range.insertNode(a);
                            a.parentNode.insertBefore(text, a.nextSibling);
                            range.setStart(text, 0);
                            range.collapse(true);
                            sel.removeAllRanges();
                            sel.addRange(range);
                            me.undoManger && me.undoManger.save();
                        }
                    }
                }
            }
        }:{}
    },function(){
        var keyCodes = {
            37:1, 38:1, 39:1, 40:1,
            13:1,32:1
        };
        function checkIsCludeLink(node){
            if(node.nodeType == 3){
                return null
            }
            if(node.nodeName == 'A'){
                return node;
            }
            var lastChild = node.lastChild;

            while(lastChild){
                if(lastChild.nodeName == 'A'){
                    return lastChild;
                }
                if(lastChild.nodeType == 3){
                    if(domUtils.isWhitespace(lastChild)){
                        lastChild = lastChild.previousSibling;
                        continue;
                    }
                    return null
                }
                lastChild = lastChild.lastChild;
            }
        }
        browser.ie && this.addListener('keyup',function(cmd,evt){
            var me = this,keyCode = evt.keyCode;
            if(keyCodes[keyCode]){
                var rng = me.selection.getRange();
                var start = rng.startContainer;

                if(keyCode == 13){
                    while(start && !domUtils.isBody(start) && !domUtils.isBlockElm(start)){
                        start = start.parentNode;
                    }
                    if(start && !domUtils.isBody(start) && start.nodeName == 'P'){
                        var pre = start.previousSibling;
                        if(pre && pre.nodeType == 1){
                            var pre = checkIsCludeLink(pre);
                            if(pre && !pre.getAttribute('_href')){
                                domUtils.remove(pre,true);
                            }
                        }
                    }
                }else if(keyCode == 32 ){
                    if(start.nodeType == 3 && /^\s$/.test(start.nodeValue)){
                        start = start.previousSibling;
                        if(start && start.nodeName == 'A' && !start.getAttribute('_href')){
                            domUtils.remove(start,true);
                        }
                    }
                }else {
                    start = domUtils.findParentByTagName(start,'a',true);
                    if(start && !start.getAttribute('_href')){
                        var bk = rng.createBookmark();

                        domUtils.remove(start,true);
                        rng.moveToBookmark(bk).select(true)
                    }
                }

            }


        });
    }
);

// plugins/autoheight.js
///import core
///commands 当输入内容超过编辑器高度时，编辑器自动增高
///commandsName  AutoHeight,autoHeightEnabled
///commandsTitle  自动增高
/**
 * @description 自动伸展
 * @author zhanyi
 */
UE.plugins['autoheight'] = function () {
    var me = this;
    //提供开关，就算加载也可以关闭
    me.autoHeightEnabled = me.options.autoHeightEnabled !== false;
    if (!me.autoHeightEnabled) {
        return;
    }

    var bakOverflow,
        lastHeight = 0,
        options = me.options,
        currentHeight,
        timer;

    function adjustHeight() {
        var me = this;
        clearTimeout(timer);
        if(isFullscreen)return;
        if (!me.queryCommandState || me.queryCommandState && me.queryCommandState('source') != 1) {
            timer = setTimeout(function(){

                var node = me.body.lastChild;
                while(node && node.nodeType != 1){
                    node = node.previousSibling;
                }
                if(node && node.nodeType == 1){
                    node.style.clear = 'both';
                    currentHeight = Math.max(domUtils.getXY(node).y + node.offsetHeight + 25 ,Math.max(options.minFrameHeight, options.initialFrameHeight)) ;
                    if (currentHeight != lastHeight) {
                        if (currentHeight !== parseInt(me.iframe.parentNode.style.height)) {
                            me.iframe.parentNode.style.height = currentHeight + 'px';
                        }
                        me.body.style.height = currentHeight + 'px';
                        lastHeight = currentHeight;
                    }
                    domUtils.removeStyle(node,'clear');
                }


            },50)
        }
    }
    var isFullscreen;
    me.addListener('fullscreenchanged',function(cmd,f){
        isFullscreen = f
    });
    me.addListener('destroy', function () {
        me.removeListener('contentchange afterinserthtml keyup mouseup',adjustHeight)
    });
    me.enableAutoHeight = function () {
        var me = this;
        if (!me.autoHeightEnabled) {
            return;
        }
        var doc = me.document;
        me.autoHeightEnabled = true;
        bakOverflow = doc.body.style.overflowY;
        doc.body.style.overflowY = 'hidden';
        me.addListener('contentchange afterinserthtml keyup mouseup',adjustHeight);
        //ff不给事件算得不对

        setTimeout(function () {
            adjustHeight.call(me);
        }, browser.gecko ? 100 : 0);
        me.fireEvent('autoheightchanged', me.autoHeightEnabled);
    };
    me.disableAutoHeight = function () {

        me.body.style.overflowY = bakOverflow || '';

        me.removeListener('contentchange', adjustHeight);
        me.removeListener('keyup', adjustHeight);
        me.removeListener('mouseup', adjustHeight);
        me.autoHeightEnabled = false;
        me.fireEvent('autoheightchanged', me.autoHeightEnabled);
    };

    me.on('setHeight',function(){
        me.disableAutoHeight()
    });
    me.addListener('ready', function () {
        me.enableAutoHeight();
        //trace:1764
        var timer;
        domUtils.on(browser.ie ? me.body : me.document, browser.webkit ? 'dragover' : 'drop', function () {
            clearTimeout(timer);
            timer = setTimeout(function () {
                //trace:3681
                adjustHeight.call(me);
            }, 100);

        });
        //修复内容过多时，回到顶部，顶部内容被工具栏遮挡问题
        var lastScrollY;
        window.onscroll = function(){
            if(lastScrollY === null){
                lastScrollY = this.scrollY
            }else if(this.scrollY == 0 && lastScrollY != 0){
                me.window.scrollTo(0,0);
                lastScrollY = null;
            }
        }
    });


};



// plugins/autofloat.js
///import core
///commands 悬浮工具栏
///commandsName  AutoFloat,autoFloatEnabled
///commandsTitle  悬浮工具栏
/**
 *  modified by chengchao01
 *  注意： 引入此功能后，在IE6下会将body的背景图片覆盖掉！
 */
UE.plugins['autofloat'] = function() {
    var me = this,
        lang = me.getLang();
    me.setOpt({
        topOffset:0
    });
    var optsAutoFloatEnabled = me.options.autoFloatEnabled !== false,
        topOffset = me.options.topOffset;


    //如果不固定toolbar的位置，则直接退出
    if(!optsAutoFloatEnabled){
        return;
    }
    var uiUtils = UE.ui.uiUtils,
        LteIE6 = browser.ie && browser.version <= 6,
        quirks = browser.quirks;

    function checkHasUI(){
        if(!UE.ui){
            alert(lang.autofloatMsg);
            return 0;
        }
        return 1;
    }
    function fixIE6FixedPos(){
        var docStyle = document.body.style;
        docStyle.backgroundImage = 'url("about:blank")';
        docStyle.backgroundAttachment = 'fixed';
    }
    var	bakCssText,
        placeHolder = document.createElement('div'),
        toolbarBox,orgTop,
        getPosition,
        flag =true;   //ie7模式下需要偏移
    function setFloating(){
        var toobarBoxPos = domUtils.getXY(toolbarBox),
            origalFloat = domUtils.getComputedStyle(toolbarBox,'position'),
            origalLeft = domUtils.getComputedStyle(toolbarBox,'left');
        toolbarBox.style.width = toolbarBox.offsetWidth + 'px';
        toolbarBox.style.zIndex = me.options.zIndex * 1 + 1;
        toolbarBox.parentNode.insertBefore(placeHolder, toolbarBox);
        if (LteIE6 || (quirks && browser.ie)) {
            if(toolbarBox.style.position != 'absolute'){
                toolbarBox.style.position = 'absolute';
            }
            toolbarBox.style.top = (document.body.scrollTop||document.documentElement.scrollTop) - orgTop + topOffset  + 'px';
        } else {
            if (browser.ie7Compat && flag) {
                flag = false;
                toolbarBox.style.left =  domUtils.getXY(toolbarBox).x - document.documentElement.getBoundingClientRect().left+2  + 'px';
            }
            if(toolbarBox.style.position != 'fixed'){
                toolbarBox.style.position = 'fixed';
                toolbarBox.style.top = topOffset +"px";
                ((origalFloat == 'absolute' || origalFloat == 'relative') && parseFloat(origalLeft)) && (toolbarBox.style.left = toobarBoxPos.x + 'px');
            }
        }
    }
    function unsetFloating(){
        flag = true;
        if(placeHolder.parentNode){
            placeHolder.parentNode.removeChild(placeHolder);
        }

        toolbarBox.style.cssText = bakCssText;
    }

    function updateFloating(){
        var rect3 = getPosition(me.container);
        var offset=me.options.toolbarTopOffset||0;
        if (rect3.top < 0 && rect3.bottom - toolbarBox.offsetHeight > offset) {
            setFloating();
        }else{
            unsetFloating();
        }
    }
    var defer_updateFloating = utils.defer(function(){
        updateFloating();
    },browser.ie ? 200 : 100,true);

    me.addListener('destroy',function(){
        domUtils.un(window, ['scroll','resize'], updateFloating);
        me.removeListener('keydown', defer_updateFloating);
    });

    me.addListener('ready', function(){
        if(checkHasUI(me)){
            //加载了ui组件，但在new时，没有加载ui，导致编辑器实例上没有ui类，所以这里做判断
            if(!me.ui){
                return;
            }
            getPosition = uiUtils.getClientRect;
            toolbarBox = me.ui.getDom('toolbarbox');
            orgTop = getPosition(toolbarBox).top;
            bakCssText = toolbarBox.style.cssText;
            placeHolder.style.height = toolbarBox.offsetHeight + 'px';
            if(LteIE6){
                fixIE6FixedPos();
            }
            domUtils.on(window, ['scroll','resize'], updateFloating);
            me.addListener('keydown', defer_updateFloating);

            me.addListener('beforefullscreenchange', function (t, enabled){
                if (enabled) {
                    unsetFloating();
                }
            });
            me.addListener('fullscreenchanged', function (t, enabled){
                if (!enabled) {
                    updateFloating();
                }
            });
            me.addListener('sourcemodechanged', function (t, enabled){
                setTimeout(function (){
                    updateFloating();
                },0);
            });
            me.addListener("clearDoc",function(){
                setTimeout(function(){
                    updateFloating();
                },0);

            })
        }
    });
};


// plugins/video.js
/**
 * video插件， 为UEditor提供视频插入支持
 * @file
 * @since 1.2.6.1
 */

UE.plugins['video'] = function (){
    var me =this;

    /**
     * 创建插入视频字符窜
     * @param url 视频地址
     * @param width 视频宽度
     * @param height 视频高度
     * @param align 视频对齐
     * @param toEmbed 是否以flash代替显示
     * @param addParagraph  是否需要添加P 标签
     */
    function creatInsertStr(url,width,height,id,align,classname,type){
        var str;
        switch (type){
            case 'image':
                str = '<img ' + (id ? 'id="' + id+'"' : '') + ' width="'+ width +'" height="' + height + '" _url="'+url+'" class="' + classname.replace(/\bvideo-js\b/, '') + '"'  +
                    ' src="' + me.options.UEDITOR_HOME_URL+'themes/default/images/spacer.gif" style="background:url('+me.options.UEDITOR_HOME_URL+'themes/default/images/videologo.gif) no-repeat center center; border:1px solid gray;'+(align ? 'float:' + align + ';': '')+'" />'
                break;
            case 'embed':
                str = '<embed type="application/x-shockwave-flash" class="' + classname + '" pluginspage="http://www.macromedia.com/go/getflashplayer"' +
                    ' src="' +  utils.html(url) + '" width="' + width  + '" height="' + height  + '"'  + (align ? ' style="float:' + align + '"': '') +
                    ' wmode="transparent" play="true" loop="false" menu="false" allowscriptaccess="never" allowfullscreen="true" >';
                break;
            case 'video':
                var ext = url.substr(url.lastIndexOf('.') + 1);
                if(ext == 'ogv') ext = 'ogg';
                str = '<video' + (id ? ' id="' + id + '"' : '') + ' class="' + classname + ' video-js" ' + (align ? ' style="float:' + align + '"': '') +
                    ' controls preload="none" width="' + width + '" height="' + height + '" src="' + url + '" data-setup="{}">' +
                    '<source src="' + url + '" type="video/' + ext + '" /></video>';
                break;
        }
        return str;
    }

    function switchImgAndVideo(root,img2video){
        utils.each(root.getNodesByTagName(img2video ? 'img' : 'embed video'),function(node){
            var className = node.getAttr('class');
            if(className && className.indexOf('edui-faked-video') != -1){
                var html = creatInsertStr( img2video ? node.getAttr('_url') : node.getAttr('src'),node.getAttr('width'),node.getAttr('height'),null,node.getStyle('float') || '',className,img2video ? 'embed':'image');
                node.parentNode.replaceChild(UE.uNode.createElement(html),node);
            }
            if(className && className.indexOf('edui-upload-video') != -1){
                var html = creatInsertStr( img2video ? node.getAttr('_url') : node.getAttr('src'),node.getAttr('width'),node.getAttr('height'),null,node.getStyle('float') || '',className,img2video ? 'video':'image');
                node.parentNode.replaceChild(UE.uNode.createElement(html),node);
            }
        })
    }

    me.addOutputRule(function(root){
        switchImgAndVideo(root,true)
    });
    me.addInputRule(function(root){
        switchImgAndVideo(root)
    });

    /**
     * 插入视频
     * @command insertvideo
     * @method execCommand
     * @param { String } cmd 命令字符串
     * @param { Object } videoAttr 键值对对象， 描述一个视频的所有属性
     * @example
     * ```javascript
     *
     * var videoAttr = {
     *      //视频地址
     *      url: 'http://www.youku.com/xxx',
     *      //视频宽高值， 单位px
     *      width: 200,
     *      height: 100
     * };
     *
     * //editor 是编辑器实例
     * //向编辑器插入单个视频
     * editor.execCommand( 'insertvideo', videoAttr );
     * ```
     */

    /**
     * 插入视频
     * @command insertvideo
     * @method execCommand
     * @param { String } cmd 命令字符串
     * @param { Array } videoArr 需要插入的视频的数组， 其中的每一个元素都是一个键值对对象， 描述了一个视频的所有属性
     * @example
     * ```javascript
     *
     * var videoAttr1 = {
     *      //视频地址
     *      url: 'http://www.youku.com/xxx',
     *      //视频宽高值， 单位px
     *      width: 200,
     *      height: 100
     * },
     * videoAttr2 = {
     *      //视频地址
     *      url: 'http://www.youku.com/xxx',
     *      //视频宽高值， 单位px
     *      width: 200,
     *      height: 100
     * }
     *
     * //editor 是编辑器实例
     * //该方法将会向编辑器内插入两个视频
     * editor.execCommand( 'insertvideo', [ videoAttr1, videoAttr2 ] );
     * ```
     */

    /**
     * 查询当前光标所在处是否是一个视频
     * @command insertvideo
     * @method queryCommandState
     * @param { String } cmd 需要查询的命令字符串
     * @return { int } 如果当前光标所在处的元素是一个视频对象， 则返回1，否则返回0
     * @example
     * ```javascript
     *
     * //editor 是编辑器实例
     * editor.queryCommandState( 'insertvideo' );
     * ```
     */
    me.commands["insertvideo"] = {
        execCommand: function (cmd, videoObjs, type){
            videoObjs = utils.isArray(videoObjs)?videoObjs:[videoObjs];
            var html = [],id = 'tmpVedio', cl;
            for(var i=0,vi,len = videoObjs.length;i<len;i++){
                vi = videoObjs[i];
                cl = (type == 'upload' ? 'edui-upload-video video-js vjs-default-skin':'edui-faked-video');
                html.push(creatInsertStr( vi.url, vi.width || 420,  vi.height || 280, id + i, null, cl, 'image'));
            }
            me.execCommand("inserthtml",html.join(""),true);
            var rng = this.selection.getRange();
            for(var i= 0,len=videoObjs.length;i<len;i++){
                var img = this.document.getElementById('tmpVedio'+i);
                domUtils.removeAttributes(img,'id');
                rng.selectNode(img).select();
                me.execCommand('imagefloat',videoObjs[i].align)
            }
        },
        queryCommandState : function(){
            var img = me.selection.getRange().getClosedNode(),
                flag = img && (img.className == "edui-faked-video" || img.className.indexOf("edui-upload-video")!=-1);
            return flag ? 1 : 0;
        }
    };
};

// plugins/table.core.js
/**
 * Created with JetBrains WebStorm.
 * User: taoqili
 * Date: 13-1-18
 * Time: 上午11:09
 * To change this template use File | Settings | File Templates.
 */
/**
 * UE表格操作类
 * @param table
 * @constructor
 */
(function () {
    var UETable = UE.UETable = function (table) {
        this.table = table;
        this.indexTable = [];
        this.selectedTds = [];
        this.cellsRange = {};
        this.update(table);
    };

    //===以下为静态工具方法===
    UETable.removeSelectedClass = function (cells) {
        utils.each(cells, function (cell) {
            domUtils.removeClasses(cell, "selectTdClass");
        })
    };
    UETable.addSelectedClass = function (cells) {
        utils.each(cells, function (cell) {
            domUtils.addClass(cell, "selectTdClass");
        })
    };
    UETable.isEmptyBlock = function (node) {
        var reg = new RegExp(domUtils.fillChar, 'g');
        if (node[browser.ie ? 'innerText' : 'textContent'].replace(/^\s*$/, '').replace(reg, '').length > 0) {
            return 0;
        }
        for (var i in dtd.$isNotEmpty) if (dtd.$isNotEmpty.hasOwnProperty(i)) {
            if (node.getElementsByTagName(i).length) {
                return 0;
            }
        }
        return 1;
    };
    UETable.getWidth = function (cell) {
        if (!cell)return 0;
        return parseInt(domUtils.getComputedStyle(cell, "width"), 10);
    };

    /**
     * 获取单元格或者单元格组的“对齐”状态。 如果当前的检测对象是一个单元格组， 只有在满足所有单元格的 水平和竖直 对齐属性都相同的
     * 条件时才会返回其状态值，否则将返回null； 如果当前只检测了一个单元格， 则直接返回当前单元格的对齐状态；
     * @param table cell or table cells , 支持单个单元格dom对象 或者 单元格dom对象数组
     * @return { align: 'left' || 'right' || 'center', valign: 'top' || 'middle' || 'bottom' } 或者 null
     */
    UETable.getTableCellAlignState = function ( cells ) {

        !utils.isArray( cells ) && ( cells = [cells] );

        var result = {},
            status = ['align', 'valign'],
            tempStatus = null,
            isSame = true;//状态是否相同

        utils.each( cells, function( cellNode ){

            utils.each( status, function( currentState ){

                tempStatus = cellNode.getAttribute( currentState );

                if( !result[ currentState ] && tempStatus ) {
                    result[ currentState ] = tempStatus;
                } else if( !result[ currentState ] || ( tempStatus !== result[ currentState ] ) ) {
                    isSame = false;
                    return false;
                }

            } );

            return isSame;

        });

        return isSame ? result : null;

    };

    /**
     * 根据当前选区获取相关的table信息
     * @return {Object}
     */
    UETable.getTableItemsByRange = function (editor) {
        var start = editor.selection.getStart();

        //ff下会选中bookmark
        if( start && start.id && start.id.indexOf('_baidu_bookmark_start_') === 0 && start.nextSibling) {
            start = start.nextSibling;
        }

        //在table或者td边缘有可能存在选中tr的情况
        var cell = start && domUtils.findParentByTagName(start, ["td", "th"], true),
            tr = cell && cell.parentNode,
            caption = start && domUtils.findParentByTagName(start, 'caption', true),
            table = caption ? caption.parentNode : tr && tr.parentNode.parentNode;

        return {
            cell:cell,
            tr:tr,
            table:table,
            caption:caption
        }
    };
    UETable.getUETableBySelected = function (editor) {
        var table = UETable.getTableItemsByRange(editor).table;
        if (table && table.ueTable && table.ueTable.selectedTds.length) {
            return table.ueTable;
        }
        return null;
    };

    UETable.getDefaultValue = function (editor, table) {
        var borderMap = {
                thin:'0px',
                medium:'1px',
                thick:'2px'
            },
            tableBorder, tdPadding, tdBorder, tmpValue;
        if (!table) {
            table = editor.document.createElement('table');
            table.insertRow(0).insertCell(0).innerHTML = 'xxx';
            editor.body.appendChild(table);
            var td = table.getElementsByTagName('td')[0];
            tmpValue = domUtils.getComputedStyle(table, 'border-left-width');
            tableBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
            tmpValue = domUtils.getComputedStyle(td, 'padding-left');
            tdPadding = parseInt(borderMap[tmpValue] || tmpValue, 10);
            tmpValue = domUtils.getComputedStyle(td, 'border-left-width');
            tdBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
            domUtils.remove(table);
            return {
                tableBorder:tableBorder,
                tdPadding:tdPadding,
                tdBorder:tdBorder
            };
        } else {
            td = table.getElementsByTagName('td')[0];
            tmpValue = domUtils.getComputedStyle(table, 'border-left-width');
            tableBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
            tmpValue = domUtils.getComputedStyle(td, 'padding-left');
            tdPadding = parseInt(borderMap[tmpValue] || tmpValue, 10);
            tmpValue = domUtils.getComputedStyle(td, 'border-left-width');
            tdBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
            return {
                tableBorder:tableBorder,
                tdPadding:tdPadding,
                tdBorder:tdBorder
            };
        }
    };
    /**
     * 根据当前点击的td或者table获取索引对象
     * @param tdOrTable
     */
    UETable.getUETable = function (tdOrTable) {
        var tag = tdOrTable.tagName.toLowerCase();
        tdOrTable = (tag == "td" || tag == "th" || tag == 'caption') ? domUtils.findParentByTagName(tdOrTable, "table", true) : tdOrTable;
        if (!tdOrTable.ueTable) {
            tdOrTable.ueTable = new UETable(tdOrTable);
        }
        return tdOrTable.ueTable;
    };

    UETable.cloneCell = function(cell,ignoreMerge,keepPro){
        if (!cell || utils.isString(cell)) {
            return this.table.ownerDocument.createElement(cell || 'td');
        }
        var flag = domUtils.hasClass(cell, "selectTdClass");
        flag && domUtils.removeClasses(cell, "selectTdClass");
        var tmpCell = cell.cloneNode(true);
        if (ignoreMerge) {
            tmpCell.rowSpan = tmpCell.colSpan = 1;
        }
        //去掉宽高
        !keepPro && domUtils.removeAttributes(tmpCell,'width height');
        !keepPro && domUtils.removeAttributes(tmpCell,'style');

        tmpCell.style.borderLeftStyle = "";
        tmpCell.style.borderTopStyle = "";
        tmpCell.style.borderLeftColor = cell.style.borderRightColor;
        tmpCell.style.borderLeftWidth = cell.style.borderRightWidth;
        tmpCell.style.borderTopColor = cell.style.borderBottomColor;
        tmpCell.style.borderTopWidth = cell.style.borderBottomWidth;
        flag && domUtils.addClass(cell, "selectTdClass");
        return tmpCell;
    }

    UETable.prototype = {
        getMaxRows:function () {
            var rows = this.table.rows, maxLen = 1;
            for (var i = 0, row; row = rows[i]; i++) {
                var currentMax = 1;
                for (var j = 0, cj; cj = row.cells[j++];) {
                    currentMax = Math.max(cj.rowSpan || 1, currentMax);
                }
                maxLen = Math.max(currentMax + i, maxLen);
            }
            return maxLen;
        },
        /**
         * 获取当前表格的最大列数
         */
        getMaxCols:function () {
            var rows = this.table.rows, maxLen = 0, cellRows = {};
            for (var i = 0, row; row = rows[i]; i++) {
                var cellsNum = 0;
                for (var j = 0, cj; cj = row.cells[j++];) {
                    cellsNum += (cj.colSpan || 1);
                    if (cj.rowSpan && cj.rowSpan > 1) {
                        for (var k = 1; k < cj.rowSpan; k++) {
                            if (!cellRows['row_' + (i + k)]) {
                                cellRows['row_' + (i + k)] = (cj.colSpan || 1);
                            } else {
                                cellRows['row_' + (i + k)]++
                            }
                        }

                    }
                }
                cellsNum += cellRows['row_' + i] || 0;
                maxLen = Math.max(cellsNum, maxLen);
            }
            return maxLen;
        },
        getCellColIndex:function (cell) {

        },
        /**
         * 获取当前cell旁边的单元格，
         * @param cell
         * @param right
         */
        getHSideCell:function (cell, right) {
            try {
                var cellInfo = this.getCellInfo(cell),
                    previewRowIndex, previewColIndex;
                var len = this.selectedTds.length,
                    range = this.cellsRange;
                //首行或者首列没有前置单元格
                if ((!right && (!len ? !cellInfo.colIndex : !range.beginColIndex)) || (right && (!len ? (cellInfo.colIndex == (this.colsNum - 1)) : (range.endColIndex == this.colsNum - 1)))) return null;

                previewRowIndex = !len ? cellInfo.rowIndex : range.beginRowIndex;
                previewColIndex = !right ? ( !len ? (cellInfo.colIndex < 1 ? 0 : (cellInfo.colIndex - 1)) : range.beginColIndex - 1)
                    : ( !len ? cellInfo.colIndex + 1 : range.endColIndex + 1);
                return this.getCell(this.indexTable[previewRowIndex][previewColIndex].rowIndex, this.indexTable[previewRowIndex][previewColIndex].cellIndex);
            } catch (e) {
                showError(e);
            }
        },
        getTabNextCell:function (cell, preRowIndex) {
            var cellInfo = this.getCellInfo(cell),
                rowIndex = preRowIndex || cellInfo.rowIndex,
                colIndex = cellInfo.colIndex + 1 + (cellInfo.colSpan - 1),
                nextCell;
            try {
                nextCell = this.getCell(this.indexTable[rowIndex][colIndex].rowIndex, this.indexTable[rowIndex][colIndex].cellIndex);
            } catch (e) {
                try {
                    rowIndex = rowIndex * 1 + 1;
                    colIndex = 0;
                    nextCell = this.getCell(this.indexTable[rowIndex][colIndex].rowIndex, this.indexTable[rowIndex][colIndex].cellIndex);
                } catch (e) {
                }
            }
            return nextCell;

        },
        /**
         * 获取视觉上的后置单元格
         * @param cell
         * @param bottom
         */
        getVSideCell:function (cell, bottom, ignoreRange) {
            try {
                var cellInfo = this.getCellInfo(cell),
                    nextRowIndex, nextColIndex;
                var len = this.selectedTds.length && !ignoreRange,
                    range = this.cellsRange;
                //末行或者末列没有后置单元格
                if ((!bottom && (cellInfo.rowIndex == 0)) || (bottom && (!len ? (cellInfo.rowIndex + cellInfo.rowSpan > this.rowsNum - 1) : (range.endRowIndex == this.rowsNum - 1)))) return null;

                nextRowIndex = !bottom ? ( !len ? cellInfo.rowIndex - 1 : range.beginRowIndex - 1)
                    : ( !len ? (cellInfo.rowIndex + cellInfo.rowSpan) : range.endRowIndex + 1);
                nextColIndex = !len ? cellInfo.colIndex : range.beginColIndex;
                return this.getCell(this.indexTable[nextRowIndex][nextColIndex].rowIndex, this.indexTable[nextRowIndex][nextColIndex].cellIndex);
            } catch (e) {
                showError(e);
            }
        },
        /**
         * 获取相同结束位置的单元格，xOrY指代了是获取x轴相同还是y轴相同
         */
        getSameEndPosCells:function (cell, xOrY) {
            try {
                var flag = (xOrY.toLowerCase() === "x"),
                    end = domUtils.getXY(cell)[flag ? 'x' : 'y'] + cell["offset" + (flag ? 'Width' : 'Height')],
                    rows = this.table.rows,
                    cells = null, returns = [];
                for (var i = 0; i < this.rowsNum; i++) {
                    cells = rows[i].cells;
                    for (var j = 0, tmpCell; tmpCell = cells[j++];) {
                        var tmpEnd = domUtils.getXY(tmpCell)[flag ? 'x' : 'y'] + tmpCell["offset" + (flag ? 'Width' : 'Height')];
                        //对应行的td已经被上面行rowSpan了
                        if (tmpEnd > end && flag) break;
                        if (cell == tmpCell || end == tmpEnd) {
                            //只获取单一的单元格
                            //todo 仅获取单一单元格在特定情况下会造成returns为空，从而影响后续的拖拽实现，修正这个。需考虑性能
                            if (tmpCell[flag ? "colSpan" : "rowSpan"] == 1) {
                                returns.push(tmpCell);
                            }
                            if (flag) break;
                        }
                    }
                }
                return returns;
            } catch (e) {
                showError(e);
            }
        },
        setCellContent:function (cell, content) {
            cell.innerHTML = content || (browser.ie ? domUtils.fillChar : "<br />");
        },
        cloneCell:UETable.cloneCell,
        /**
         * 获取跟当前单元格的右边竖线为左边的所有未合并单元格
         */
        getSameStartPosXCells:function (cell) {
            try {
                var start = domUtils.getXY(cell).x + cell.offsetWidth,
                    rows = this.table.rows, cells , returns = [];
                for (var i = 0; i < this.rowsNum; i++) {
                    cells = rows[i].cells;
                    for (var j = 0, tmpCell; tmpCell = cells[j++];) {
                        var tmpStart = domUtils.getXY(tmpCell).x;
                        if (tmpStart > start) break;
                        if (tmpStart == start && tmpCell.colSpan == 1) {
                            returns.push(tmpCell);
                            break;
                        }
                    }
                }
                return returns;
            } catch (e) {
                showError(e);
            }
        },
        /**
         * 更新table对应的索引表
         */
        update:function (table) {
            this.table = table || this.table;
            this.selectedTds = [];
            this.cellsRange = {};
            this.indexTable = [];
            var rows = this.table.rows,
                rowsNum = this.getMaxRows(),
                dNum = rowsNum - rows.length,
                colsNum = this.getMaxCols();
            while (dNum--) {
                this.table.insertRow(rows.length);
            }
            this.rowsNum = rowsNum;
            this.colsNum = colsNum;
            for (var i = 0, len = rows.length; i < len; i++) {
                this.indexTable[i] = new Array(colsNum);
            }
            //填充索引表
            for (var rowIndex = 0, row; row = rows[rowIndex]; rowIndex++) {
                for (var cellIndex = 0, cell, cells = row.cells; cell = cells[cellIndex]; cellIndex++) {
                    //修正整行被rowSpan时导致的行数计算错误
                    if (cell.rowSpan > rowsNum) {
                        cell.rowSpan = rowsNum;
                    }
                    var colIndex = cellIndex,
                        rowSpan = cell.rowSpan || 1,
                        colSpan = cell.colSpan || 1;
                    //当已经被上一行rowSpan或者被前一列colSpan了，则跳到下一个单元格进行
                    while (this.indexTable[rowIndex][colIndex]) colIndex++;
                    for (var j = 0; j < rowSpan; j++) {
                        for (var k = 0; k < colSpan; k++) {
                            this.indexTable[rowIndex + j][colIndex + k] = {
                                rowIndex:rowIndex,
                                cellIndex:cellIndex,
                                colIndex:colIndex,
                                rowSpan:rowSpan,
                                colSpan:colSpan
                            }
                        }
                    }
                }
            }
            //修复残缺td
            for (j = 0; j < rowsNum; j++) {
                for (k = 0; k < colsNum; k++) {
                    if (this.indexTable[j][k] === undefined) {
                        row = rows[j];
                        cell = row.cells[row.cells.length - 1];
                        cell = cell ? cell.cloneNode(true) : this.table.ownerDocument.createElement("td");
                        this.setCellContent(cell);
                        if (cell.colSpan !== 1)cell.colSpan = 1;
                        if (cell.rowSpan !== 1)cell.rowSpan = 1;
                        row.appendChild(cell);
                        this.indexTable[j][k] = {
                            rowIndex:j,
                            cellIndex:cell.cellIndex,
                            colIndex:k,
                            rowSpan:1,
                            colSpan:1
                        }
                    }
                }
            }
            //当框选后删除行或者列后撤销，需要重建选区。
            var tds = domUtils.getElementsByTagName(this.table, "td"),
                selectTds = [];
            utils.each(tds, function (td) {
                if (domUtils.hasClass(td, "selectTdClass")) {
                    selectTds.push(td);
                }
            });
            if (selectTds.length) {
                var start = selectTds[0],
                    end = selectTds[selectTds.length - 1],
                    startInfo = this.getCellInfo(start),
                    endInfo = this.getCellInfo(end);
                this.selectedTds = selectTds;
                this.cellsRange = {
                    beginRowIndex:startInfo.rowIndex,
                    beginColIndex:startInfo.colIndex,
                    endRowIndex:endInfo.rowIndex + endInfo.rowSpan - 1,
                    endColIndex:endInfo.colIndex + endInfo.colSpan - 1
                };
            }
            //给第一行设置firstRow的样式名称,在排序图标的样式上使用到
            if(!domUtils.hasClass(this.table.rows[0], "firstRow")) {
                domUtils.addClass(this.table.rows[0], "firstRow");
                for(var i = 1; i< this.table.rows.length; i++) {
                    domUtils.removeClasses(this.table.rows[i], "firstRow");
                }
            }
        },
        /**
         * 获取单元格的索引信息
         */
        getCellInfo:function (cell) {
            if (!cell) return;
            var cellIndex = cell.cellIndex,
                rowIndex = cell.parentNode.rowIndex,
                rowInfo = this.indexTable[rowIndex],
                numCols = this.colsNum;
            for (var colIndex = cellIndex; colIndex < numCols; colIndex++) {
                var cellInfo = rowInfo[colIndex];
                if (cellInfo.rowIndex === rowIndex && cellInfo.cellIndex === cellIndex) {
                    return cellInfo;
                }
            }
        },
        /**
         * 根据行列号获取单元格
         */
        getCell:function (rowIndex, cellIndex) {
            return rowIndex < this.rowsNum && this.table.rows[rowIndex].cells[cellIndex] || null;
        },
        /**
         * 删除单元格
         */
        deleteCell:function (cell, rowIndex) {
            rowIndex = typeof rowIndex == 'number' ? rowIndex : cell.parentNode.rowIndex;
            var row = this.table.rows[rowIndex];
            row.deleteCell(cell.cellIndex);
        },
        /**
         * 根据始末两个单元格获取被框选的所有单元格范围
         */
        getCellsRange:function (cellA, cellB) {
            function checkRange(beginRowIndex, beginColIndex, endRowIndex, endColIndex) {
                var tmpBeginRowIndex = beginRowIndex,
                    tmpBeginColIndex = beginColIndex,
                    tmpEndRowIndex = endRowIndex,
                    tmpEndColIndex = endColIndex,
                    cellInfo, colIndex, rowIndex;
                // 通过indexTable检查是否存在超出TableRange上边界的情况
                if (beginRowIndex > 0) {
                    for (colIndex = beginColIndex; colIndex < endColIndex; colIndex++) {
                        cellInfo = me.indexTable[beginRowIndex][colIndex];
                        rowIndex = cellInfo.rowIndex;
                        if (rowIndex < beginRowIndex) {
                            tmpBeginRowIndex = Math.min(rowIndex, tmpBeginRowIndex);
                        }
                    }
                }
                // 通过indexTable检查是否存在超出TableRange右边界的情况
                if (endColIndex < me.colsNum) {
                    for (rowIndex = beginRowIndex; rowIndex < endRowIndex; rowIndex++) {
                        cellInfo = me.indexTable[rowIndex][endColIndex];
                        colIndex = cellInfo.colIndex + cellInfo.colSpan - 1;
                        if (colIndex > endColIndex) {
                            tmpEndColIndex = Math.max(colIndex, tmpEndColIndex);
                        }
                    }
                }
                // 检查是否有超出TableRange下边界的情况
                if (endRowIndex < me.rowsNum) {
                    for (colIndex = beginColIndex; colIndex < endColIndex; colIndex++) {
                        cellInfo = me.indexTable[endRowIndex][colIndex];
                        rowIndex = cellInfo.rowIndex + cellInfo.rowSpan - 1;
                        if (rowIndex > endRowIndex) {
                            tmpEndRowIndex = Math.max(rowIndex, tmpEndRowIndex);
                        }
                    }
                }
                // 检查是否有超出TableRange左边界的情况
                if (beginColIndex > 0) {
                    for (rowIndex = beginRowIndex; rowIndex < endRowIndex; rowIndex++) {
                        cellInfo = me.indexTable[rowIndex][beginColIndex];
                        colIndex = cellInfo.colIndex;
                        if (colIndex < beginColIndex) {
                            tmpBeginColIndex = Math.min(cellInfo.colIndex, tmpBeginColIndex);
                        }
                    }
                }
                //递归调用直至所有完成所有框选单元格的扩展
                if (tmpBeginRowIndex != beginRowIndex || tmpBeginColIndex != beginColIndex || tmpEndRowIndex != endRowIndex || tmpEndColIndex != endColIndex) {
                    return checkRange(tmpBeginRowIndex, tmpBeginColIndex, tmpEndRowIndex, tmpEndColIndex);
                } else {
                    // 不需要扩展TableRange的情况
                    return {
                        beginRowIndex:beginRowIndex,
                        beginColIndex:beginColIndex,
                        endRowIndex:endRowIndex,
                        endColIndex:endColIndex
                    };
                }
            }

            try {
                var me = this,
                    cellAInfo = me.getCellInfo(cellA);
                if (cellA === cellB) {
                    return {
                        beginRowIndex:cellAInfo.rowIndex,
                        beginColIndex:cellAInfo.colIndex,
                        endRowIndex:cellAInfo.rowIndex + cellAInfo.rowSpan - 1,
                        endColIndex:cellAInfo.colIndex + cellAInfo.colSpan - 1
                    };
                }
                var cellBInfo = me.getCellInfo(cellB);
                // 计算TableRange的四个边
                var beginRowIndex = Math.min(cellAInfo.rowIndex, cellBInfo.rowIndex),
                    beginColIndex = Math.min(cellAInfo.colIndex, cellBInfo.colIndex),
                    endRowIndex = Math.max(cellAInfo.rowIndex + cellAInfo.rowSpan - 1, cellBInfo.rowIndex + cellBInfo.rowSpan - 1),
                    endColIndex = Math.max(cellAInfo.colIndex + cellAInfo.colSpan - 1, cellBInfo.colIndex + cellBInfo.colSpan - 1);

                return checkRange(beginRowIndex, beginColIndex, endRowIndex, endColIndex);
            } catch (e) {
                //throw e;
            }
        },
        /**
         * 依据cellsRange获取对应的单元格集合
         */
        getCells:function (range) {
            //每次获取cells之前必须先清除上次的选择，否则会对后续获取操作造成影响
            this.clearSelected();
            var beginRowIndex = range.beginRowIndex,
                beginColIndex = range.beginColIndex,
                endRowIndex = range.endRowIndex,
                endColIndex = range.endColIndex,
                cellInfo, rowIndex, colIndex, tdHash = {}, returnTds = [];
            for (var i = beginRowIndex; i <= endRowIndex; i++) {
                for (var j = beginColIndex; j <= endColIndex; j++) {
                    cellInfo = this.indexTable[i][j];
                    rowIndex = cellInfo.rowIndex;
                    colIndex = cellInfo.colIndex;
                    // 如果Cells里已经包含了此Cell则跳过
                    var key = rowIndex + '|' + colIndex;
                    if (tdHash[key]) continue;
                    tdHash[key] = 1;
                    if (rowIndex < i || colIndex < j || rowIndex + cellInfo.rowSpan - 1 > endRowIndex || colIndex + cellInfo.colSpan - 1 > endColIndex) {
                        return null;
                    }
                    returnTds.push(this.getCell(rowIndex, cellInfo.cellIndex));
                }
            }
            return returnTds;
        },
        /**
         * 清理已经选中的单元格
         */
        clearSelected:function () {
            UETable.removeSelectedClass(this.selectedTds);
            this.selectedTds = [];
            this.cellsRange = {};
        },
        /**
         * 根据range设置已经选中的单元格
         */
        setSelected:function (range) {
            var cells = this.getCells(range);
            UETable.addSelectedClass(cells);
            this.selectedTds = cells;
            this.cellsRange = range;
        },
        isFullRow:function () {
            var range = this.cellsRange;
            return (range.endColIndex - range.beginColIndex + 1) == this.colsNum;
        },
        isFullCol:function () {
            var range = this.cellsRange,
                table = this.table,
                ths = table.getElementsByTagName("th"),
                rows = range.endRowIndex - range.beginRowIndex + 1;
            return  !ths.length ? rows == this.rowsNum : rows == this.rowsNum || (rows == this.rowsNum - 1);

        },
        /**
         * 获取视觉上的前置单元格，默认是左边，top传入时
         * @param cell
         * @param top
         */
        getNextCell:function (cell, bottom, ignoreRange) {
            try {
                var cellInfo = this.getCellInfo(cell),
                    nextRowIndex, nextColIndex;
                var len = this.selectedTds.length && !ignoreRange,
                    range = this.cellsRange;
                //末行或者末列没有后置单元格
                if ((!bottom && (cellInfo.rowIndex == 0)) || (bottom && (!len ? (cellInfo.rowIndex + cellInfo.rowSpan > this.rowsNum - 1) : (range.endRowIndex == this.rowsNum - 1)))) return null;

                nextRowIndex = !bottom ? ( !len ? cellInfo.rowIndex - 1 : range.beginRowIndex - 1)
                    : ( !len ? (cellInfo.rowIndex + cellInfo.rowSpan) : range.endRowIndex + 1);
                nextColIndex = !len ? cellInfo.colIndex : range.beginColIndex;
                return this.getCell(this.indexTable[nextRowIndex][nextColIndex].rowIndex, this.indexTable[nextRowIndex][nextColIndex].cellIndex);
            } catch (e) {
                showError(e);
            }
        },
        getPreviewCell:function (cell, top) {
            try {
                var cellInfo = this.getCellInfo(cell),
                    previewRowIndex, previewColIndex;
                var len = this.selectedTds.length,
                    range = this.cellsRange;
                //首行或者首列没有前置单元格
                if ((!top && (!len ? !cellInfo.colIndex : !range.beginColIndex)) || (top && (!len ? (cellInfo.rowIndex > (this.colsNum - 1)) : (range.endColIndex == this.colsNum - 1)))) return null;

                previewRowIndex = !top ? ( !len ? cellInfo.rowIndex : range.beginRowIndex )
                    : ( !len ? (cellInfo.rowIndex < 1 ? 0 : (cellInfo.rowIndex - 1)) : range.beginRowIndex);
                previewColIndex = !top ? ( !len ? (cellInfo.colIndex < 1 ? 0 : (cellInfo.colIndex - 1)) : range.beginColIndex - 1)
                    : ( !len ? cellInfo.colIndex : range.endColIndex + 1);
                return this.getCell(this.indexTable[previewRowIndex][previewColIndex].rowIndex, this.indexTable[previewRowIndex][previewColIndex].cellIndex);
            } catch (e) {
                showError(e);
            }
        },
        /**
         * 移动单元格中的内容
         */
        moveContent:function (cellTo, cellFrom) {
            if (UETable.isEmptyBlock(cellFrom)) return;
            if (UETable.isEmptyBlock(cellTo)) {
                cellTo.innerHTML = cellFrom.innerHTML;
                return;
            }
            var child = cellTo.lastChild;
            if (child.nodeType == 3 || !dtd.$block[child.tagName]) {
                cellTo.appendChild(cellTo.ownerDocument.createElement('br'))
            }
            while (child = cellFrom.firstChild) {
                cellTo.appendChild(child);
            }
        },
        /**
         * 向右合并单元格
         */
        mergeRight:function (cell) {
            var cellInfo = this.getCellInfo(cell),
                rightColIndex = cellInfo.colIndex + cellInfo.colSpan,
                rightCellInfo = this.indexTable[cellInfo.rowIndex][rightColIndex],
                rightCell = this.getCell(rightCellInfo.rowIndex, rightCellInfo.cellIndex);
            //合并
            cell.colSpan = cellInfo.colSpan + rightCellInfo.colSpan;
            //被合并的单元格不应存在宽度属性
            cell.removeAttribute("width");
            //移动内容
            this.moveContent(cell, rightCell);
            //删掉被合并的Cell
            this.deleteCell(rightCell, rightCellInfo.rowIndex);
            this.update();
        },
        /**
         * 向下合并单元格
         */
        mergeDown:function (cell) {
            var cellInfo = this.getCellInfo(cell),
                downRowIndex = cellInfo.rowIndex + cellInfo.rowSpan,
                downCellInfo = this.indexTable[downRowIndex][cellInfo.colIndex],
                downCell = this.getCell(downCellInfo.rowIndex, downCellInfo.cellIndex);
            cell.rowSpan = cellInfo.rowSpan + downCellInfo.rowSpan;
            cell.removeAttribute("height");
            this.moveContent(cell, downCell);
            this.deleteCell(downCell, downCellInfo.rowIndex);
            this.update();
        },
        /**
         * 合并整个range中的内容
         */
        mergeRange:function () {
            //由于合并操作可以在任意时刻进行，所以无法通过鼠标位置等信息实时生成range，只能通过缓存实例中的cellsRange对象来访问
            var range = this.cellsRange,
                leftTopCell = this.getCell(range.beginRowIndex, this.indexTable[range.beginRowIndex][range.beginColIndex].cellIndex);

            if (leftTopCell.tagName == "TH" && range.endRowIndex !== range.beginRowIndex) {
                var index = this.indexTable,
                    info = this.getCellInfo(leftTopCell);
                leftTopCell = this.getCell(1, index[1][info.colIndex].cellIndex);
                range = this.getCellsRange(leftTopCell, this.getCell(index[this.rowsNum - 1][info.colIndex].rowIndex, index[this.rowsNum - 1][info.colIndex].cellIndex));
            }

            // 删除剩余的Cells
            var cells = this.getCells(range);
            for(var i= 0,ci;ci=cells[i++];){
                if (ci !== leftTopCell) {
                    this.moveContent(leftTopCell, ci);
                    this.deleteCell(ci);
                }
            }
            // 修改左上角Cell的rowSpan和colSpan，并调整宽度属性设置
            leftTopCell.rowSpan = range.endRowIndex - range.beginRowIndex + 1;
            leftTopCell.rowSpan > 1 && leftTopCell.removeAttribute("height");
            leftTopCell.colSpan = range.endColIndex - range.beginColIndex + 1;
            leftTopCell.colSpan > 1 && leftTopCell.removeAttribute("width");
            if (leftTopCell.rowSpan == this.rowsNum && leftTopCell.colSpan != 1) {
                leftTopCell.colSpan = 1;
            }

            if (leftTopCell.colSpan == this.colsNum && leftTopCell.rowSpan != 1) {
                var rowIndex = leftTopCell.parentNode.rowIndex;
                //解决IE下的表格操作问题
                if( this.table.deleteRow ) {
                    for (var i = rowIndex+ 1, curIndex=rowIndex+ 1, len=leftTopCell.rowSpan; i < len; i++) {
                        this.table.deleteRow(curIndex);
                    }
                } else {
                    for (var i = 0, len=leftTopCell.rowSpan - 1; i < len; i++) {
                        var row = this.table.rows[rowIndex + 1];
                        row.parentNode.removeChild(row);
                    }
                }
                leftTopCell.rowSpan = 1;
            }
            this.update();
        },
        /**
         * 插入一行单元格
         */
        insertRow:function (rowIndex, sourceCell) {
            var numCols = this.colsNum,
                table = this.table,
                row = table.insertRow(rowIndex), cell,
                isInsertTitle = typeof sourceCell == 'string' && sourceCell.toUpperCase() == 'TH';

            function replaceTdToTh(colIndex, cell, tableRow) {
                if (colIndex == 0) {
                    var tr = tableRow.nextSibling || tableRow.previousSibling,
                        th = tr.cells[colIndex];
                    if (th.tagName == 'TH') {
                        th = cell.ownerDocument.createElement("th");
                        th.appendChild(cell.firstChild);
                        tableRow.insertBefore(th, cell);
                        domUtils.remove(cell)
                    }
                }else{
                    if (cell.tagName == 'TH') {
                        var td = cell.ownerDocument.createElement("td");
                        td.appendChild(cell.firstChild);
                        tableRow.insertBefore(td, cell);
                        domUtils.remove(cell)
                    }
                }
            }

            //首行直接插入,无需考虑部分单元格被rowspan的情况
            if (rowIndex == 0 || rowIndex == this.rowsNum) {
                for (var colIndex = 0; colIndex < numCols; colIndex++) {
                    cell = this.cloneCell(sourceCell, true);
                    this.setCellContent(cell);
                    cell.getAttribute('vAlign') && cell.setAttribute('vAlign', cell.getAttribute('vAlign'));
                    row.appendChild(cell);
                    if(!isInsertTitle) replaceTdToTh(colIndex, cell, row);
                }
            } else {
                var infoRow = this.indexTable[rowIndex],
                    cellIndex = 0;
                for (colIndex = 0; colIndex < numCols; colIndex++) {
                    var cellInfo = infoRow[colIndex];
                    //如果存在某个单元格的rowspan穿过待插入行的位置，则修改该单元格的rowspan即可，无需插入单元格
                    if (cellInfo.rowIndex < rowIndex) {
                        cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
                        cell.rowSpan = cellInfo.rowSpan + 1;
                    } else {
                        cell = this.cloneCell(sourceCell, true);
                        this.setCellContent(cell);
                        row.appendChild(cell);
                    }
                    if(!isInsertTitle) replaceTdToTh(colIndex, cell, row);
                }
            }
            //框选时插入不触发contentchange，需要手动更新索引。
            this.update();
            return row;
        },
        /**
         * 删除一行单元格
         * @param rowIndex
         */
        deleteRow:function (rowIndex) {
            var row = this.table.rows[rowIndex],
                infoRow = this.indexTable[rowIndex],
                colsNum = this.colsNum,
                count = 0;     //处理计数
            for (var colIndex = 0; colIndex < colsNum;) {
                var cellInfo = infoRow[colIndex],
                    cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
                if (cell.rowSpan > 1) {
                    if (cellInfo.rowIndex == rowIndex) {
                        var clone = cell.cloneNode(true);
                        clone.rowSpan = cell.rowSpan - 1;
                        clone.innerHTML = "";
                        cell.rowSpan = 1;
                        var nextRowIndex = rowIndex + 1,
                            nextRow = this.table.rows[nextRowIndex],
                            insertCellIndex,
                            preMerged = this.getPreviewMergedCellsNum(nextRowIndex, colIndex) - count;
                        if (preMerged < colIndex) {
                            insertCellIndex = colIndex - preMerged - 1;
                            //nextRow.insertCell(insertCellIndex);
                            domUtils.insertAfter(nextRow.cells[insertCellIndex], clone);
                        } else {
                            if (nextRow.cells.length) nextRow.insertBefore(clone, nextRow.cells[0])
                        }
                        count += 1;
                        //cell.parentNode.removeChild(cell);
                    }
                }
                colIndex += cell.colSpan || 1;
            }
            var deleteTds = [], cacheMap = {};
            for (colIndex = 0; colIndex < colsNum; colIndex++) {
                var tmpRowIndex = infoRow[colIndex].rowIndex,
                    tmpCellIndex = infoRow[colIndex].cellIndex,
                    key = tmpRowIndex + "_" + tmpCellIndex;
                if (cacheMap[key])continue;
                cacheMap[key] = 1;
                cell = this.getCell(tmpRowIndex, tmpCellIndex);
                deleteTds.push(cell);
            }
            var mergeTds = [];
            utils.each(deleteTds, function (td) {
                if (td.rowSpan == 1) {
                    td.parentNode.removeChild(td);
                } else {
                    mergeTds.push(td);
                }
            });
            utils.each(mergeTds, function (td) {
                td.rowSpan--;
            });
            row.parentNode.removeChild(row);
            //浏览器方法本身存在bug,采用自定义方法删除
            //this.table.deleteRow(rowIndex);
            this.update();
        },
        insertCol:function (colIndex, sourceCell, defaultValue) {
            var rowsNum = this.rowsNum,
                rowIndex = 0,
                tableRow, cell,
                backWidth = parseInt((this.table.offsetWidth - (this.colsNum + 1) * 20 - (this.colsNum + 1)) / (this.colsNum + 1), 10),
                isInsertTitleCol = typeof sourceCell == 'string' && sourceCell.toUpperCase() == 'TH';

            function replaceTdToTh(rowIndex, cell, tableRow) {
                if (rowIndex == 0) {
                    var th = cell.nextSibling || cell.previousSibling;
                    if (th.tagName == 'TH') {
                        th = cell.ownerDocument.createElement("th");
                        th.appendChild(cell.firstChild);
                        tableRow.insertBefore(th, cell);
                        domUtils.remove(cell)
                    }
                }else{
                    if (cell.tagName == 'TH') {
                        var td = cell.ownerDocument.createElement("td");
                        td.appendChild(cell.firstChild);
                        tableRow.insertBefore(td, cell);
                        domUtils.remove(cell)
                    }
                }
            }

            var preCell;
            if (colIndex == 0 || colIndex == this.colsNum) {
                for (; rowIndex < rowsNum; rowIndex++) {
                    tableRow = this.table.rows[rowIndex];
                    preCell = tableRow.cells[colIndex == 0 ? colIndex : tableRow.cells.length];
                    cell = this.cloneCell(sourceCell, true); //tableRow.insertCell(colIndex == 0 ? colIndex : tableRow.cells.length);
                    this.setCellContent(cell);
                    cell.setAttribute('vAlign', cell.getAttribute('vAlign'));
                    preCell && cell.setAttribute('width', preCell.getAttribute('width'));
                    if (!colIndex) {
                        tableRow.insertBefore(cell, tableRow.cells[0]);
                    } else {
                        domUtils.insertAfter(tableRow.cells[tableRow.cells.length - 1], cell);
                    }
                    if(!isInsertTitleCol) replaceTdToTh(rowIndex, cell, tableRow)
                }
            } else {
                for (; rowIndex < rowsNum; rowIndex++) {
                    var cellInfo = this.indexTable[rowIndex][colIndex];
                    if (cellInfo.colIndex < colIndex) {
                        cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
                        cell.colSpan = cellInfo.colSpan + 1;
                    } else {
                        tableRow = this.table.rows[rowIndex];
                        preCell = tableRow.cells[cellInfo.cellIndex];

                        cell = this.cloneCell(sourceCell, true);//tableRow.insertCell(cellInfo.cellIndex);
                        this.setCellContent(cell);
                        cell.setAttribute('vAlign', cell.getAttribute('vAlign'));
                        preCell && cell.setAttribute('width', preCell.getAttribute('width'));
                        //防止IE下报错
                        preCell ? tableRow.insertBefore(cell, preCell) : tableRow.appendChild(cell);
                    }
                    if(!isInsertTitleCol) replaceTdToTh(rowIndex, cell, tableRow);
                }
            }
            //框选时插入不触发contentchange，需要手动更新索引
            this.update();
            this.updateWidth(backWidth, defaultValue || {tdPadding:10, tdBorder:1});
        },
        updateWidth:function (width, defaultValue) {
            var table = this.table,
                tmpWidth = UETable.getWidth(table) - defaultValue.tdPadding * 2 - defaultValue.tdBorder + width;
            if (tmpWidth < table.ownerDocument.body.offsetWidth) {
                table.setAttribute("width", tmpWidth);
                return;
            }
            var tds = domUtils.getElementsByTagName(this.table, "td th");
            utils.each(tds, function (td) {
                td.setAttribute("width", width);
            })
        },
        deleteCol:function (colIndex) {
            var indexTable = this.indexTable,
                tableRows = this.table.rows,
                backTableWidth = this.table.getAttribute("width"),
                backTdWidth = 0,
                rowsNum = this.rowsNum,
                cacheMap = {};
            for (var rowIndex = 0; rowIndex < rowsNum;) {
                var infoRow = indexTable[rowIndex],
                    cellInfo = infoRow[colIndex],
                    key = cellInfo.rowIndex + '_' + cellInfo.colIndex;
                // 跳过已经处理过的Cell
                if (cacheMap[key])continue;
                cacheMap[key] = 1;
                var cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
                if (!backTdWidth) backTdWidth = cell && parseInt(cell.offsetWidth / cell.colSpan, 10).toFixed(0);
                // 如果Cell的colSpan大于1, 就修改colSpan, 否则就删掉这个Cell
                if (cell.colSpan > 1) {
                    cell.colSpan--;
                } else {
                    tableRows[rowIndex].deleteCell(cellInfo.cellIndex);
                }
                rowIndex += cellInfo.rowSpan || 1;
            }
            this.table.setAttribute("width", backTableWidth - backTdWidth);
            this.update();
        },
        splitToCells:function (cell) {
            var me = this,
                cells = this.splitToRows(cell);
            utils.each(cells, function (cell) {
                me.splitToCols(cell);
            })
        },
        splitToRows:function (cell) {
            var cellInfo = this.getCellInfo(cell),
                rowIndex = cellInfo.rowIndex,
                colIndex = cellInfo.colIndex,
                results = [];
            // 修改Cell的rowSpan
            cell.rowSpan = 1;
            results.push(cell);
            // 补齐单元格
            for (var i = rowIndex, endRow = rowIndex + cellInfo.rowSpan; i < endRow; i++) {
                if (i == rowIndex)continue;
                var tableRow = this.table.rows[i],
                    tmpCell = tableRow.insertCell(colIndex - this.getPreviewMergedCellsNum(i, colIndex));
                tmpCell.colSpan = cellInfo.colSpan;
                this.setCellContent(tmpCell);
                tmpCell.setAttribute('vAlign', cell.getAttribute('vAlign'));
                tmpCell.setAttribute('align', cell.getAttribute('align'));
                if (cell.style.cssText) {
                    tmpCell.style.cssText = cell.style.cssText;
                }
                results.push(tmpCell);
            }
            this.update();
            return results;
        },
        getPreviewMergedCellsNum:function (rowIndex, colIndex) {
            var indexRow = this.indexTable[rowIndex],
                num = 0;
            for (var i = 0; i < colIndex;) {
                var colSpan = indexRow[i].colSpan,
                    tmpRowIndex = indexRow[i].rowIndex;
                num += (colSpan - (tmpRowIndex == rowIndex ? 1 : 0));
                i += colSpan;
            }
            return num;
        },
        splitToCols:function (cell) {
            var backWidth = (cell.offsetWidth / cell.colSpan - 22).toFixed(0),

                cellInfo = this.getCellInfo(cell),
                rowIndex = cellInfo.rowIndex,
                colIndex = cellInfo.colIndex,
                results = [];
            // 修改Cell的rowSpan
            cell.colSpan = 1;
            cell.setAttribute("width", backWidth);
            results.push(cell);
            // 补齐单元格
            for (var j = colIndex, endCol = colIndex + cellInfo.colSpan; j < endCol; j++) {
                if (j == colIndex)continue;
                var tableRow = this.table.rows[rowIndex],
                    tmpCell = tableRow.insertCell(this.indexTable[rowIndex][j].cellIndex + 1);
                tmpCell.rowSpan = cellInfo.rowSpan;
                this.setCellContent(tmpCell);
                tmpCell.setAttribute('vAlign', cell.getAttribute('vAlign'));
                tmpCell.setAttribute('align', cell.getAttribute('align'));
                tmpCell.setAttribute('width', backWidth);
                if (cell.style.cssText) {
                    tmpCell.style.cssText = cell.style.cssText;
                }
                //处理th的情况
                if (cell.tagName == 'TH') {
                    var th = cell.ownerDocument.createElement('th');
                    th.appendChild(tmpCell.firstChild);
                    th.setAttribute('vAlign', cell.getAttribute('vAlign'));
                    th.rowSpan = tmpCell.rowSpan;
                    tableRow.insertBefore(th, tmpCell);
                    domUtils.remove(tmpCell);
                }
                results.push(tmpCell);
            }
            this.update();
            return results;
        },
        isLastCell:function (cell, rowsNum, colsNum) {
            rowsNum = rowsNum || this.rowsNum;
            colsNum = colsNum || this.colsNum;
            var cellInfo = this.getCellInfo(cell);
            return ((cellInfo.rowIndex + cellInfo.rowSpan) == rowsNum) &&
                ((cellInfo.colIndex + cellInfo.colSpan) == colsNum);
        },
        getLastCell:function (cells) {
            cells = cells || this.table.getElementsByTagName("td");
            var firstInfo = this.getCellInfo(cells[0]);
            var me = this, last = cells[0],
                tr = last.parentNode,
                cellsNum = 0, cols = 0, rows;
            utils.each(cells, function (cell) {
                if (cell.parentNode == tr)cols += cell.colSpan || 1;
                cellsNum += cell.rowSpan * cell.colSpan || 1;
            });
            rows = cellsNum / cols;
            utils.each(cells, function (cell) {
                if (me.isLastCell(cell, rows, cols)) {
                    last = cell;
                    return false;
                }
            });
            return last;

        },
        selectRow:function (rowIndex) {
            var indexRow = this.indexTable[rowIndex],
                start = this.getCell(indexRow[0].rowIndex, indexRow[0].cellIndex),
                end = this.getCell(indexRow[this.colsNum - 1].rowIndex, indexRow[this.colsNum - 1].cellIndex),
                range = this.getCellsRange(start, end);
            this.setSelected(range);
        },
        selectTable:function () {
            var tds = this.table.getElementsByTagName("td"),
                range = this.getCellsRange(tds[0], tds[tds.length - 1]);
            this.setSelected(range);
        },
        setBackground:function (cells, value) {
            if (typeof value === "string") {
                utils.each(cells, function (cell) {
                    cell.style.backgroundColor = value;
                })
            } else if (typeof value === "object") {
                value = utils.extend({
                    repeat:true,
                    colorList:["#ddd", "#fff"]
                }, value);
                var rowIndex = this.getCellInfo(cells[0]).rowIndex,
                    count = 0,
                    colors = value.colorList,
                    getColor = function (list, index, repeat) {
                        return list[index] ? list[index] : repeat ? list[index % list.length] : "";
                    };
                for (var i = 0, cell; cell = cells[i++];) {
                    var cellInfo = this.getCellInfo(cell);
                    cell.style.backgroundColor = getColor(colors, ((rowIndex + count) == cellInfo.rowIndex) ? count : ++count, value.repeat);
                }
            }
        },
        removeBackground:function (cells) {
            utils.each(cells, function (cell) {
                cell.style.backgroundColor = "";
            })
        }


    };
    function showError(e) {
    }
})();

// plugins/table.cmds.js
/**
 * Created with JetBrains PhpStorm.
 * User: taoqili
 * Date: 13-2-20
 * Time: 下午6:25
 * To change this template use File | Settings | File Templates.
 */
;
(function () {
    var UT = UE.UETable,
        getTableItemsByRange = function (editor) {
            return UT.getTableItemsByRange(editor);
        },
        getUETableBySelected = function (editor) {
            return UT.getUETableBySelected(editor)
        },
        getDefaultValue = function (editor, table) {
            return UT.getDefaultValue(editor, table);
        },
        getUETable = function (tdOrTable) {
            return UT.getUETable(tdOrTable);
        };


    UE.commands['inserttable'] = {
        queryCommandState: function () {
            return getTableItemsByRange(this).table ? -1 : 0;
        },
        execCommand: function (cmd, opt) {
            function createTable(opt, tdWidth) {
                var html = [],
                    rowsNum = opt.numRows,
                    colsNum = opt.numCols;
                for (var r = 0; r < rowsNum; r++) {
                    html.push('<tr' + (r == 0 ? ' class="firstRow"':'') + '>');
                    for (var c = 0; c < colsNum; c++) {
                        html.push('<td width="' + tdWidth + '"  vAlign="' + opt.tdvalign + '" >' + (browser.ie && browser.version < 11 ? domUtils.fillChar : '<br/>') + '</td>')
                    }
                    html.push('</tr>')
                }
                //禁止指定table-width
                return '<table><tbody>' + html.join('') + '</tbody></table>'
            }

            if (!opt) {
                opt = utils.extend({}, {
                    numCols: this.options.defaultCols,
                    numRows: this.options.defaultRows,
                    tdvalign: this.options.tdvalign
                })
            }
            var me = this;
            var range = this.selection.getRange(),
                start = range.startContainer,
                firstParentBlock = domUtils.findParent(start, function (node) {
                    return domUtils.isBlockElm(node);
                }, true) || me.body;

            var defaultValue = getDefaultValue(me),
                tableWidth = firstParentBlock.offsetWidth,
                tdWidth = Math.floor(tableWidth / opt.numCols - defaultValue.tdPadding * 2 - defaultValue.tdBorder);

            //todo其他属性
            !opt.tdvalign && (opt.tdvalign = me.options.tdvalign);
            me.execCommand("inserthtml", createTable(opt, tdWidth));
        }
    };

    UE.commands['insertparagraphbeforetable'] = {
        queryCommandState: function () {
            return getTableItemsByRange(this).cell ? 0 : -1;
        },
        execCommand: function () {
            var table = getTableItemsByRange(this).table;
            if (table) {
                var p = this.document.createElement("p");
                p.innerHTML = browser.ie ? '&nbsp;' : '<br />';
                table.parentNode.insertBefore(p, table);
                this.selection.getRange().setStart(p, 0).setCursor();
            }
        }
    };

    UE.commands['deletetable'] = {
        queryCommandState: function () {
            var rng = this.selection.getRange();
            return domUtils.findParentByTagName(rng.startContainer, 'table', true) ? 0 : -1;
        },
        execCommand: function (cmd, table) {
            var rng = this.selection.getRange();
            table = table || domUtils.findParentByTagName(rng.startContainer, 'table', true);
            if (table) {
                var next = table.nextSibling;
                if (!next) {
                    next = domUtils.createElement(this.document, 'p', {
                        'innerHTML': browser.ie ? domUtils.fillChar : '<br/>'
                    });
                    table.parentNode.insertBefore(next, table);
                }
                domUtils.remove(table);
                rng = this.selection.getRange();
                if (next.nodeType == 3) {
                    rng.setStartBefore(next)
                } else {
                    rng.setStart(next, 0)
                }
                rng.setCursor(false, true)
                this.fireEvent("tablehasdeleted")

            }

        }
    };
    UE.commands['cellalign'] = {
        queryCommandState: function () {
            return getSelectedArr(this).length ? 0 : -1
        },
        execCommand: function (cmd, align) {
            var selectedTds = getSelectedArr(this);
            if (selectedTds.length) {
                for (var i = 0, ci; ci = selectedTds[i++];) {
                    ci.setAttribute('align', align);
                }
            }
        }
    };
    UE.commands['cellvalign'] = {
        queryCommandState: function () {
            return getSelectedArr(this).length ? 0 : -1;
        },
        execCommand: function (cmd, valign) {
            var selectedTds = getSelectedArr(this);
            if (selectedTds.length) {
                for (var i = 0, ci; ci = selectedTds[i++];) {
                    ci.setAttribute('vAlign', valign);
                }
            }
        }
    };
    UE.commands['insertcaption'] = {
        queryCommandState: function () {
            var table = getTableItemsByRange(this).table;
            if (table) {
                return table.getElementsByTagName('caption').length == 0 ? 1 : -1;
            }
            return -1;
        },
        execCommand: function () {
            var table = getTableItemsByRange(this).table;
            if (table) {
                var caption = this.document.createElement('caption');
                caption.innerHTML = browser.ie ? domUtils.fillChar : '<br/>';
                table.insertBefore(caption, table.firstChild);
                var range = this.selection.getRange();
                range.setStart(caption, 0).setCursor();
            }

        }
    };
    UE.commands['deletecaption'] = {
        queryCommandState: function () {
            var rng = this.selection.getRange(),
                table = domUtils.findParentByTagName(rng.startContainer, 'table');
            if (table) {
                return table.getElementsByTagName('caption').length == 0 ? -1 : 1;
            }
            return -1;
        },
        execCommand: function () {
            var rng = this.selection.getRange(),
                table = domUtils.findParentByTagName(rng.startContainer, 'table');
            if (table) {
                domUtils.remove(table.getElementsByTagName('caption')[0]);
                var range = this.selection.getRange();
                range.setStart(table.rows[0].cells[0], 0).setCursor();
            }

        }
    };
    UE.commands['inserttitle'] = {
        queryCommandState: function () {
            var table = getTableItemsByRange(this).table;
            if (table) {
                var firstRow = table.rows[0];
                return firstRow.cells[firstRow.cells.length-1].tagName.toLowerCase() != 'th' ? 0 : -1
            }
            return -1;
        },
        execCommand: function () {
            var table = getTableItemsByRange(this).table;
            if (table) {
                getUETable(table).insertRow(0, 'th');
            }
            var th = table.getElementsByTagName('th')[0];
            this.selection.getRange().setStart(th, 0).setCursor(false, true);
        }
    };
    UE.commands['deletetitle'] = {
        queryCommandState: function () {
            var table = getTableItemsByRange(this).table;
            if (table) {
                var firstRow = table.rows[0];
                return firstRow.cells[firstRow.cells.length-1].tagName.toLowerCase() == 'th' ? 0 : -1
            }
            return -1;
        },
        execCommand: function () {
            var table = getTableItemsByRange(this).table;
            if (table) {
                domUtils.remove(table.rows[0])
            }
            var td = table.getElementsByTagName('td')[0];
            this.selection.getRange().setStart(td, 0).setCursor(false, true);
        }
    };
    UE.commands['inserttitlecol'] = {
        queryCommandState: function () {
            var table = getTableItemsByRange(this).table;
            if (table) {
                var lastRow = table.rows[table.rows.length-1];
                return lastRow.getElementsByTagName('th').length ? -1 : 0;
            }
            return -1;
        },
        execCommand: function (cmd) {
            var table = getTableItemsByRange(this).table;
            if (table) {
                getUETable(table).insertCol(0, 'th');
            }
            resetTdWidth(table, this);
            var th = table.getElementsByTagName('th')[0];
            this.selection.getRange().setStart(th, 0).setCursor(false, true);
        }
    };
    UE.commands['deletetitlecol'] = {
        queryCommandState: function () {
            var table = getTableItemsByRange(this).table;
            if (table) {
                var lastRow = table.rows[table.rows.length-1];
                return lastRow.getElementsByTagName('th').length ? 0 : -1;
            }
            return -1;
        },
        execCommand: function () {
            var table = getTableItemsByRange(this).table;
            if (table) {
                for(var i = 0; i< table.rows.length; i++ ){
                    domUtils.remove(table.rows[i].children[0])
                }
            }
            resetTdWidth(table, this);
            var td = table.getElementsByTagName('td')[0];
            this.selection.getRange().setStart(td, 0).setCursor(false, true);
        }
    };

    UE.commands["mergeright"] = {
        queryCommandState: function (cmd) {
            var tableItems = getTableItemsByRange(this),
                table = tableItems.table,
                cell = tableItems.cell;

            if (!table || !cell) return -1;
            var ut = getUETable(table);
            if (ut.selectedTds.length) return -1;

            var cellInfo = ut.getCellInfo(cell),
                rightColIndex = cellInfo.colIndex + cellInfo.colSpan;
            if (rightColIndex >= ut.colsNum) return -1; // 如果处于最右边则不能向右合并

            var rightCellInfo = ut.indexTable[cellInfo.rowIndex][rightColIndex],
                rightCell = table.rows[rightCellInfo.rowIndex].cells[rightCellInfo.cellIndex];
            if (!rightCell || cell.tagName != rightCell.tagName) return -1; // TH和TD不能相互合并

            // 当且仅当两个Cell的开始列号和结束列号一致时能进行合并
            return (rightCellInfo.rowIndex == cellInfo.rowIndex && rightCellInfo.rowSpan == cellInfo.rowSpan) ? 0 : -1;
        },
        execCommand: function (cmd) {
            var rng = this.selection.getRange(),
                bk = rng.createBookmark(true);
            var cell = getTableItemsByRange(this).cell,
                ut = getUETable(cell);
            ut.mergeRight(cell);
            rng.moveToBookmark(bk).select();
        }
    };
    UE.commands["mergedown"] = {
        queryCommandState: function (cmd) {
            var tableItems = getTableItemsByRange(this),
                table = tableItems.table,
                cell = tableItems.cell;

            if (!table || !cell) return -1;
            var ut = getUETable(table);
            if (ut.selectedTds.length)return -1;

            var cellInfo = ut.getCellInfo(cell),
                downRowIndex = cellInfo.rowIndex + cellInfo.rowSpan;
            if (downRowIndex >= ut.rowsNum) return -1; // 如果处于最下边则不能向下合并

            var downCellInfo = ut.indexTable[downRowIndex][cellInfo.colIndex],
                downCell = table.rows[downCellInfo.rowIndex].cells[downCellInfo.cellIndex];
            if (!downCell || cell.tagName != downCell.tagName) return -1; // TH和TD不能相互合并

            // 当且仅当两个Cell的开始列号和结束列号一致时能进行合并
            return (downCellInfo.colIndex == cellInfo.colIndex && downCellInfo.colSpan == cellInfo.colSpan) ? 0 : -1;
        },
        execCommand: function () {
            var rng = this.selection.getRange(),
                bk = rng.createBookmark(true);
            var cell = getTableItemsByRange(this).cell,
                ut = getUETable(cell);
            ut.mergeDown(cell);
            rng.moveToBookmark(bk).select();
        }
    };
    UE.commands["mergecells"] = {
        queryCommandState: function () {
            return getUETableBySelected(this) ? 0 : -1;
        },
        execCommand: function () {
            var ut = getUETableBySelected(this);
            if (ut && ut.selectedTds.length) {
                var cell = ut.selectedTds[0];
                ut.mergeRange();
                var rng = this.selection.getRange();
                if (domUtils.isEmptyBlock(cell)) {
                    rng.setStart(cell, 0).collapse(true)
                } else {
                    rng.selectNodeContents(cell)
                }
                rng.select();
            }


        }
    };
    UE.commands["insertrow"] = {
        queryCommandState: function () {
            var tableItems = getTableItemsByRange(this),
                cell = tableItems.cell;
            return cell && (cell.tagName == "TD" || (cell.tagName == 'TH' && tableItems.tr !== tableItems.table.rows[0])) &&
                getUETable(tableItems.table).rowsNum < this.options.maxRowNum ? 0 : -1;
        },
        execCommand: function () {
            var rng = this.selection.getRange(),
                bk = rng.createBookmark(true);
            var tableItems = getTableItemsByRange(this),
                cell = tableItems.cell,
                table = tableItems.table,
                ut = getUETable(table),
                cellInfo = ut.getCellInfo(cell);
            //ut.insertRow(!ut.selectedTds.length ? cellInfo.rowIndex:ut.cellsRange.beginRowIndex,'');
            if (!ut.selectedTds.length) {
                ut.insertRow(cellInfo.rowIndex, cell);
            } else {
                var range = ut.cellsRange;
                for (var i = 0, len = range.endRowIndex - range.beginRowIndex + 1; i < len; i++) {
                    ut.insertRow(range.beginRowIndex, cell);
                }
            }
            rng.moveToBookmark(bk).select();
            if (table.getAttribute("interlaced") === "enabled")this.fireEvent("interlacetable", table);
        }
    };
    //后插入行
    UE.commands["insertrownext"] = {
        queryCommandState: function () {
            var tableItems = getTableItemsByRange(this),
                cell = tableItems.cell;
            return cell && (cell.tagName == "TD") && getUETable(tableItems.table).rowsNum < this.options.maxRowNum ? 0 : -1;
        },
        execCommand: function () {
            var rng = this.selection.getRange(),
                bk = rng.createBookmark(true);
            var tableItems = getTableItemsByRange(this),
                cell = tableItems.cell,
                table = tableItems.table,
                ut = getUETable(table),
                cellInfo = ut.getCellInfo(cell);
            //ut.insertRow(!ut.selectedTds.length? cellInfo.rowIndex + cellInfo.rowSpan : ut.cellsRange.endRowIndex + 1,'');
            if (!ut.selectedTds.length) {
                ut.insertRow(cellInfo.rowIndex + cellInfo.rowSpan, cell);
            } else {
                var range = ut.cellsRange;
                for (var i = 0, len = range.endRowIndex - range.beginRowIndex + 1; i < len; i++) {
                    ut.insertRow(range.endRowIndex + 1, cell);
                }
            }
            rng.moveToBookmark(bk).select();
            if (table.getAttribute("interlaced") === "enabled")this.fireEvent("interlacetable", table);
        }
    };
    UE.commands["deleterow"] = {
        queryCommandState: function () {
            var tableItems = getTableItemsByRange(this);
            return tableItems.cell ? 0 : -1;
        },
        execCommand: function () {
            var cell = getTableItemsByRange(this).cell,
                ut = getUETable(cell),
                cellsRange = ut.cellsRange,
                cellInfo = ut.getCellInfo(cell),
                preCell = ut.getVSideCell(cell),
                nextCell = ut.getVSideCell(cell, true),
                rng = this.selection.getRange();
            if (utils.isEmptyObject(cellsRange)) {
                ut.deleteRow(cellInfo.rowIndex);
            } else {
                for (var i = cellsRange.beginRowIndex; i < cellsRange.endRowIndex + 1; i++) {
                    ut.deleteRow(cellsRange.beginRowIndex);
                }
            }
            var table = ut.table;
            if (!table.getElementsByTagName('td').length) {
                var nextSibling = table.nextSibling;
                domUtils.remove(table);
                if (nextSibling) {
                    rng.setStart(nextSibling, 0).setCursor(false, true);
                }
            } else {
                if (cellInfo.rowSpan == 1 || cellInfo.rowSpan == cellsRange.endRowIndex - cellsRange.beginRowIndex + 1) {
                    if (nextCell || preCell) rng.selectNodeContents(nextCell || preCell).setCursor(false, true);
                } else {
                    var newCell = ut.getCell(cellInfo.rowIndex, ut.indexTable[cellInfo.rowIndex][cellInfo.colIndex].cellIndex);
                    if (newCell) rng.selectNodeContents(newCell).setCursor(false, true);
                }
            }
            if (table.getAttribute("interlaced") === "enabled")this.fireEvent("interlacetable", table);
        }
    };
    UE.commands["insertcol"] = {
        queryCommandState: function (cmd) {
            var tableItems = getTableItemsByRange(this),
                cell = tableItems.cell;
            return cell && (cell.tagName == "TD" || (cell.tagName == 'TH' && cell !== tableItems.tr.cells[0])) &&
                getUETable(tableItems.table).colsNum < this.options.maxColNum ? 0 : -1;
        },
        execCommand: function (cmd) {
            var rng = this.selection.getRange(),
                bk = rng.createBookmark(true);
            if (this.queryCommandState(cmd) == -1)return;
            var cell = getTableItemsByRange(this).cell,
                ut = getUETable(cell),
                cellInfo = ut.getCellInfo(cell);

            //ut.insertCol(!ut.selectedTds.length ? cellInfo.colIndex:ut.cellsRange.beginColIndex);
            if (!ut.selectedTds.length) {
                ut.insertCol(cellInfo.colIndex, cell);
            } else {
                var range = ut.cellsRange;
                for (var i = 0, len = range.endColIndex - range.beginColIndex + 1; i < len; i++) {
                    ut.insertCol(range.beginColIndex, cell);
                }
            }
            rng.moveToBookmark(bk).select(true);
        }
    };
    UE.commands["insertcolnext"] = {
        queryCommandState: function () {
            var tableItems = getTableItemsByRange(this),
                cell = tableItems.cell;
            return cell && getUETable(tableItems.table).colsNum < this.options.maxColNum ? 0 : -1;
        },
        execCommand: function () {
            var rng = this.selection.getRange(),
                bk = rng.createBookmark(true);
            var cell = getTableItemsByRange(this).cell,
                ut = getUETable(cell),
                cellInfo = ut.getCellInfo(cell);
            //ut.insertCol(!ut.selectedTds.length ? cellInfo.colIndex + cellInfo.colSpan:ut.cellsRange.endColIndex +1);
            if (!ut.selectedTds.length) {
                ut.insertCol(cellInfo.colIndex + cellInfo.colSpan, cell);
            } else {
                var range = ut.cellsRange;
                for (var i = 0, len = range.endColIndex - range.beginColIndex + 1; i < len; i++) {
                    ut.insertCol(range.endColIndex + 1, cell);
                }
            }
            rng.moveToBookmark(bk).select();
        }
    };

    UE.commands["deletecol"] = {
        queryCommandState: function () {
            var tableItems = getTableItemsByRange(this);
            return tableItems.cell ? 0 : -1;
        },
        execCommand: function () {
            var cell = getTableItemsByRange(this).cell,
                ut = getUETable(cell),
                range = ut.cellsRange,
                cellInfo = ut.getCellInfo(cell),
                preCell = ut.getHSideCell(cell),
                nextCell = ut.getHSideCell(cell, true);
            if (utils.isEmptyObject(range)) {
                ut.deleteCol(cellInfo.colIndex);
            } else {
                for (var i = range.beginColIndex; i < range.endColIndex + 1; i++) {
                    ut.deleteCol(range.beginColIndex);
                }
            }
            var table = ut.table,
                rng = this.selection.getRange();

            if (!table.getElementsByTagName('td').length) {
                var nextSibling = table.nextSibling;
                domUtils.remove(table);
                if (nextSibling) {
                    rng.setStart(nextSibling, 0).setCursor(false, true);
                }
            } else {
                if (domUtils.inDoc(cell, this.document)) {
                    rng.setStart(cell, 0).setCursor(false, true);
                } else {
                    if (nextCell && domUtils.inDoc(nextCell, this.document)) {
                        rng.selectNodeContents(nextCell).setCursor(false, true);
                    } else {
                        if (preCell && domUtils.inDoc(preCell, this.document)) {
                            rng.selectNodeContents(preCell).setCursor(true, true);
                        }
                    }
                }
            }
        }
    };
    UE.commands["splittocells"] = {
        queryCommandState: function () {
            var tableItems = getTableItemsByRange(this),
                cell = tableItems.cell;
            if (!cell) return -1;
            var ut = getUETable(tableItems.table);
            if (ut.selectedTds.length > 0) return -1;
            return cell && (cell.colSpan > 1 || cell.rowSpan > 1) ? 0 : -1;
        },
        execCommand: function () {
            var rng = this.selection.getRange(),
                bk = rng.createBookmark(true);
            var cell = getTableItemsByRange(this).cell,
                ut = getUETable(cell);
            ut.splitToCells(cell);
            rng.moveToBookmark(bk).select();
        }
    };
    UE.commands["splittorows"] = {
        queryCommandState: function () {
            var tableItems = getTableItemsByRange(this),
                cell = tableItems.cell;
            if (!cell) return -1;
            var ut = getUETable(tableItems.table);
            if (ut.selectedTds.length > 0) return -1;
            return cell && cell.rowSpan > 1 ? 0 : -1;
        },
        execCommand: function () {
            var rng = this.selection.getRange(),
                bk = rng.createBookmark(true);
            var cell = getTableItemsByRange(this).cell,
                ut = getUETable(cell);
            ut.splitToRows(cell);
            rng.moveToBookmark(bk).select();
        }
    };
    UE.commands["splittocols"] = {
        queryCommandState: function () {
            var tableItems = getTableItemsByRange(this),
                cell = tableItems.cell;
            if (!cell) return -1;
            var ut = getUETable(tableItems.table);
            if (ut.selectedTds.length > 0) return -1;
            return cell && cell.colSpan > 1 ? 0 : -1;
        },
        execCommand: function () {
            var rng = this.selection.getRange(),
                bk = rng.createBookmark(true);
            var cell = getTableItemsByRange(this).cell,
                ut = getUETable(cell);
            ut.splitToCols(cell);
            rng.moveToBookmark(bk).select();

        }
    };

    UE.commands["adaptbytext"] =
        UE.commands["adaptbywindow"] = {
            queryCommandState: function () {
                return getTableItemsByRange(this).table ? 0 : -1
            },
            execCommand: function (cmd) {
                var tableItems = getTableItemsByRange(this),
                    table = tableItems.table;
                if (table) {
                    if (cmd == 'adaptbywindow') {
                        resetTdWidth(table, this);
                    } else {
                        var cells = domUtils.getElementsByTagName(table, "td th");
                        utils.each(cells, function (cell) {
                            cell.removeAttribute("width");
                        });
                        table.removeAttribute("width");
                    }
                }
            }
        };

    //平均分配各列
    UE.commands['averagedistributecol'] = {
        queryCommandState: function () {
            var ut = getUETableBySelected(this);
            if (!ut) return -1;
            return ut.isFullRow() || ut.isFullCol() ? 0 : -1;
        },
        execCommand: function (cmd) {
            var me = this,
                ut = getUETableBySelected(me);

            function getAverageWidth() {
                var tb = ut.table,
                    averageWidth, sumWidth = 0, colsNum = 0,
                    tbAttr = getDefaultValue(me, tb);

                if (ut.isFullRow()) {
                    sumWidth = tb.offsetWidth;
                    colsNum = ut.colsNum;
                } else {
                    var begin = ut.cellsRange.beginColIndex,
                        end = ut.cellsRange.endColIndex,
                        node;
                    for (var i = begin; i <= end;) {
                        node = ut.selectedTds[i];
                        sumWidth += node.offsetWidth;
                        i += node.colSpan;
                        colsNum += 1;
                    }
                }
                averageWidth = Math.ceil(sumWidth / colsNum) - tbAttr.tdBorder * 2 - tbAttr.tdPadding * 2;
                return averageWidth;
            }

            function setAverageWidth(averageWidth) {
                utils.each(domUtils.getElementsByTagName(ut.table, "th"), function (node) {
                    node.setAttribute("width", "");
                });
                var cells = ut.isFullRow() ? domUtils.getElementsByTagName(ut.table, "td") : ut.selectedTds;

                utils.each(cells, function (node) {
                    if (node.colSpan == 1) {
                        node.setAttribute("width", averageWidth);
                    }
                });
            }

            if (ut && ut.selectedTds.length) {
                setAverageWidth(getAverageWidth());
            }
        }
    };
    //平均分配各行
    UE.commands['averagedistributerow'] = {
        queryCommandState: function () {
            var ut = getUETableBySelected(this);
            if (!ut) return -1;
            if (ut.selectedTds && /th/ig.test(ut.selectedTds[0].tagName)) return -1;
            return ut.isFullRow() || ut.isFullCol() ? 0 : -1;
        },
        execCommand: function (cmd) {
            var me = this,
                ut = getUETableBySelected(me);

            function getAverageHeight() {
                var averageHeight, rowNum, sumHeight = 0,
                    tb = ut.table,
                    tbAttr = getDefaultValue(me, tb),
                    tdpadding = parseInt(domUtils.getComputedStyle(tb.getElementsByTagName('td')[0], "padding-top"));

                if (ut.isFullCol()) {
                    var captionArr = domUtils.getElementsByTagName(tb, "caption"),
                        thArr = domUtils.getElementsByTagName(tb, "th"),
                        captionHeight, thHeight;

                    if (captionArr.length > 0) {
                        captionHeight = captionArr[0].offsetHeight;
                    }
                    if (thArr.length > 0) {
                        thHeight = thArr[0].offsetHeight;
                    }

                    sumHeight = tb.offsetHeight - (captionHeight || 0) - (thHeight || 0);
                    rowNum = thArr.length == 0 ? ut.rowsNum : (ut.rowsNum - 1);
                } else {
                    var begin = ut.cellsRange.beginRowIndex,
                        end = ut.cellsRange.endRowIndex,
                        count = 0,
                        trs = domUtils.getElementsByTagName(tb, "tr");
                    for (var i = begin; i <= end; i++) {
                        sumHeight += trs[i].offsetHeight;
                        count += 1;
                    }
                    rowNum = count;
                }
                //ie8下是混杂模式
                if (browser.ie && browser.version < 9) {
                    averageHeight = Math.ceil(sumHeight / rowNum);
                } else {
                    averageHeight = Math.ceil(sumHeight / rowNum) - tbAttr.tdBorder * 2 - tdpadding * 2;
                }
                return averageHeight;
            }

            function setAverageHeight(averageHeight) {
                var cells = ut.isFullCol() ? domUtils.getElementsByTagName(ut.table, "td") : ut.selectedTds;
                utils.each(cells, function (node) {
                    if (node.rowSpan == 1) {
                        node.setAttribute("height", averageHeight);
                    }
                });
            }

            if (ut && ut.selectedTds.length) {
                setAverageHeight(getAverageHeight());
            }
        }
    };

    //单元格对齐方式
    UE.commands['cellalignment'] = {
        queryCommandState: function () {
            return getTableItemsByRange(this).table ? 0 : -1
        },
        execCommand: function (cmd, data) {
            var me = this,
                ut = getUETableBySelected(me);

            if (!ut) {
                var start = me.selection.getStart(),
                    cell = start && domUtils.findParentByTagName(start, ["td", "th", "caption"], true);
                if (!/caption/ig.test(cell.tagName)) {
                    domUtils.setAttributes(cell, data);
                } else {
                    cell.style.textAlign = data.align;
                    cell.style.verticalAlign = data.vAlign;
                }
                me.selection.getRange().setCursor(true);
            } else {
                utils.each(ut.selectedTds, function (cell) {
                    domUtils.setAttributes(cell, data);
                });
            }
        },
        /**
         * 查询当前点击的单元格的对齐状态， 如果当前已经选择了多个单元格， 则会返回所有单元格经过统一协调过后的状态
         * @see UE.UETable.getTableCellAlignState
         */
        queryCommandValue: function (cmd) {

            var activeMenuCell = getTableItemsByRange( this).cell;

            if( !activeMenuCell ) {
                activeMenuCell = getSelectedArr(this)[0];
            }

            if (!activeMenuCell) {

                return null;

            } else {

                //获取同时选中的其他单元格
                var cells = UE.UETable.getUETable(activeMenuCell).selectedTds;

                !cells.length && ( cells = activeMenuCell );

                return UE.UETable.getTableCellAlignState(cells);

            }

        }
    };
    //表格对齐方式
    UE.commands['tablealignment'] = {
        queryCommandState: function () {
            if (browser.ie && browser.version < 8) {
                return -1;
            }
            return getTableItemsByRange(this).table ? 0 : -1
        },
        execCommand: function (cmd, value) {
            var me = this,
                start = me.selection.getStart(),
                table = start && domUtils.findParentByTagName(start, ["table"], true);

            if (table) {
                table.setAttribute("align",value);
            }
        }
    };

    //表格属性
    UE.commands['edittable'] = {
        queryCommandState: function () {
            return getTableItemsByRange(this).table ? 0 : -1
        },
        execCommand: function (cmd, color) {
            var rng = this.selection.getRange(),
                table = domUtils.findParentByTagName(rng.startContainer, 'table');
            if (table) {
                var arr = domUtils.getElementsByTagName(table, "td").concat(
                    domUtils.getElementsByTagName(table, "th"),
                    domUtils.getElementsByTagName(table, "caption")
                );
                utils.each(arr, function (node) {
                    node.style.borderColor = color;
                });
            }
        }
    };
    //单元格属性
    UE.commands['edittd'] = {
        queryCommandState: function () {
            return getTableItemsByRange(this).table ? 0 : -1
        },
        execCommand: function (cmd, bkColor) {
            var me = this,
                ut = getUETableBySelected(me);

            if (!ut) {
                var start = me.selection.getStart(),
                    cell = start && domUtils.findParentByTagName(start, ["td", "th", "caption"], true);
                if (cell) {
                    cell.style.backgroundColor = bkColor;
                }
            } else {
                utils.each(ut.selectedTds, function (cell) {
                    cell.style.backgroundColor = bkColor;
                });
            }
        }
    };

    UE.commands["settablebackground"] = {
        queryCommandState: function () {
            return getSelectedArr(this).length > 1 ? 0 : -1;
        },
        execCommand: function (cmd, value) {
            var cells, ut;
            cells = getSelectedArr(this);
            ut = getUETable(cells[0]);
            ut.setBackground(cells, value);
        }
    };

    UE.commands["cleartablebackground"] = {
        queryCommandState: function () {
            var cells = getSelectedArr(this);
            if (!cells.length)return -1;
            for (var i = 0, cell; cell = cells[i++];) {
                if (cell.style.backgroundColor !== "") return 0;
            }
            return -1;
        },
        execCommand: function () {
            var cells = getSelectedArr(this),
                ut = getUETable(cells[0]);
            ut.removeBackground(cells);
        }
    };

    UE.commands["interlacetable"] = UE.commands["uninterlacetable"] = {
        queryCommandState: function (cmd) {
            var table = getTableItemsByRange(this).table;
            if (!table) return -1;
            var interlaced = table.getAttribute("interlaced");
            if (cmd == "interlacetable") {
                //TODO 待定
                //是否需要待定，如果设置，则命令只能单次执行成功，但反射具备toggle效果；否则可以覆盖前次命令，但反射将不存在toggle效果
                return (interlaced === "enabled") ? -1 : 0;
            } else {
                return (!interlaced || interlaced === "disabled") ? -1 : 0;
            }
        },
        execCommand: function (cmd, classList) {
            var table = getTableItemsByRange(this).table;
            if (cmd == "interlacetable") {
                table.setAttribute("interlaced", "enabled");
                this.fireEvent("interlacetable", table, classList);
            } else {
                table.setAttribute("interlaced", "disabled");
                this.fireEvent("uninterlacetable", table);
            }
        }
    };
    UE.commands["setbordervisible"] = {
        queryCommandState: function (cmd) {
            var table = getTableItemsByRange(this).table;
            if (!table) return -1;
            return 0;
        },
        execCommand: function () {
            var table = getTableItemsByRange(this).table;
            utils.each(domUtils.getElementsByTagName(table,'td'),function(td){
                td.style.borderWidth = '1px';
                td.style.borderStyle = 'solid';
            })
        }
    };
    function resetTdWidth(table, editor) {
        var tds = domUtils.getElementsByTagName(table,'td th');
        utils.each(tds, function (td) {
            td.removeAttribute("width");
        });
        table.setAttribute('width', getTableWidth(editor, true, getDefaultValue(editor, table)));
        var tdsWidths = [];
        setTimeout(function () {
            utils.each(tds, function (td) {
                (td.colSpan == 1) && tdsWidths.push(td.offsetWidth)
            })
            utils.each(tds, function (td,i) {
                (td.colSpan == 1) && td.setAttribute("width", tdsWidths[i] + "");
            })
        }, 0);
    }

    function getTableWidth(editor, needIEHack, defaultValue) {
        var body = editor.body;
        return body.offsetWidth - (needIEHack ? parseInt(domUtils.getComputedStyle(body, 'margin-left'), 10) * 2 : 0) - defaultValue.tableBorder * 2 - (editor.options.offsetWidth || 0);
    }

    function getSelectedArr(editor) {
        var cell = getTableItemsByRange(editor).cell;
        if (cell) {
            var ut = getUETable(cell);
            return ut.selectedTds.length ? ut.selectedTds : [cell];
        } else {
            return [];
        }
    }
})();

// plugins/table.action.js
/**
 * Created with JetBrains PhpStorm.
 * User: taoqili
 * Date: 12-10-12
 * Time: 上午10:05
 * To change this template use File | Settings | File Templates.
 */
UE.plugins['table'] = function () {
    var me = this,
        tabTimer = null,
        //拖动计时器
        tableDragTimer = null,
        //双击计时器
        tableResizeTimer = null,
        //单元格最小宽度
        cellMinWidth = 5,
        isInResizeBuffer = false,
        //单元格边框大小
        cellBorderWidth = 5,
        //鼠标偏移距离
        offsetOfTableCell = 10,
        //记录在有限时间内的点击状态， 共有3个取值， 0, 1, 2。 0代表未初始化， 1代表单击了1次，2代表2次
        singleClickState = 0,
        userActionStatus = null,
        //双击允许的时间范围
        dblclickTime = 360,
        UT = UE.UETable,
        getUETable = function (tdOrTable) {
            return UT.getUETable(tdOrTable);
        },
        getUETableBySelected = function (editor) {
            return UT.getUETableBySelected(editor);
        },
        getDefaultValue = function (editor, table) {
            return UT.getDefaultValue(editor, table);
        },
        removeSelectedClass = function (cells) {
            return UT.removeSelectedClass(cells);
        };

    function showError(e) {
//        throw e;
    }
    me.ready(function(){
        var me = this;
        var orgGetText = me.selection.getText;
        me.selection.getText = function(){
            var table = getUETableBySelected(me);
            if(table){
                var str = '';
                utils.each(table.selectedTds,function(td){
                    str += td[browser.ie?'innerText':'textContent'];
                })
                return str;
            }else{
                return orgGetText.call(me.selection)
            }

        }
    })

    //处理拖动及框选相关方法
    var startTd = null, //鼠标按下时的锚点td
        currentTd = null, //当前鼠标经过时的td
        onDrag = "", //指示当前拖动状态，其值可为"","h","v" ,分别表示未拖动状态，横向拖动状态，纵向拖动状态，用于鼠标移动过程中的判断
        onBorder = false, //检测鼠标按下时是否处在单元格边缘位置
        dragButton = null,
        dragOver = false,
        dragLine = null, //模拟的拖动线
        dragTd = null;    //发生拖动的目标td

    var mousedown = false,
    //todo 判断混乱模式
        needIEHack = true;

    me.setOpt({
        'maxColNum':20,
        'maxRowNum':100,
        'defaultCols':5,
        'defaultRows':5,
        'tdvalign':'top',
        'cursorpath':me.options.UEDITOR_HOME_URL + "themes/default/images/cursor_",
        'tableDragable':false,
        'classList':["ue-table-interlace-color-single","ue-table-interlace-color-double"]
    });
    me.getUETable = getUETable;
    var commands = {
        'deletetable':1,
        'inserttable':1,
        'cellvalign':1,
        'insertcaption':1,
        'deletecaption':1,
        'inserttitle':1,
        'deletetitle':1,
        "mergeright":1,
        "mergedown":1,
        "mergecells":1,
        "insertrow":1,
        "insertrownext":1,
        "deleterow":1,
        "insertcol":1,
        "insertcolnext":1,
        "deletecol":1,
        "splittocells":1,
        "splittorows":1,
        "splittocols":1,
        "adaptbytext":1,
        "adaptbywindow":1,
        "adaptbycustomer":1,
        "insertparagraph":1,
        "insertparagraphbeforetable":1,
        "averagedistributecol":1,
        "averagedistributerow":1
    };
    me.ready(function () {
        utils.cssRule('table',
            //选中的td上的样式
            '.selectTdClass{background-color:#edf5fa !important}' +
                'table.noBorderTable td,table.noBorderTable th,table.noBorderTable caption{border:1px dashed #ddd !important}' +
                //插入的表格的默认样式
                'table{margin-bottom:10px;border-collapse:collapse;display:table;}' +
                'td,th{padding: 5px 10px;border: 1px solid #DDD;}' +
                'caption{border:1px dashed #DDD;border-bottom:0;padding:3px;text-align:center;}' +
                'th{border-top:1px solid #BBB;background-color:#F7F7F7;}' +
                'table tr.firstRow th{border-top-width:2px;}' +
                '.ue-table-interlace-color-single{ background-color: #fcfcfc; } .ue-table-interlace-color-double{ background-color: #f7faff; }' +
                'td p{margin:0;padding:0;}', me.document);

        var tableCopyList, isFullCol, isFullRow;
        //注册del/backspace事件
        me.addListener('keydown', function (cmd, evt) {
            var me = this;
            var keyCode = evt.keyCode || evt.which;

            if (keyCode == 8) {

                var ut = getUETableBySelected(me);
                if (ut && ut.selectedTds.length) {

                    if (ut.isFullCol()) {
                        me.execCommand('deletecol')
                    } else if (ut.isFullRow()) {
                        me.execCommand('deleterow')
                    } else {
                        me.fireEvent('delcells');
                    }
                    domUtils.preventDefault(evt);
                }

                var caption = domUtils.findParentByTagName(me.selection.getStart(), 'caption', true),
                    range = me.selection.getRange();
                if (range.collapsed && caption && isEmptyBlock(caption)) {
                    me.fireEvent('saveScene');
                    var table = caption.parentNode;
                    domUtils.remove(caption);
                    if (table) {
                        range.setStart(table.rows[0].cells[0], 0).setCursor(false, true);
                    }
                    me.fireEvent('saveScene');
                }

            }

            if (keyCode == 46) {

                ut = getUETableBySelected(me);
                if (ut) {
                    me.fireEvent('saveScene');
                    for (var i = 0, ci; ci = ut.selectedTds[i++];) {
                        domUtils.fillNode(me.document, ci)
                    }
                    me.fireEvent('saveScene');
                    domUtils.preventDefault(evt);

                }

            }
            if (keyCode == 13) {

                var rng = me.selection.getRange(),
                    caption = domUtils.findParentByTagName(rng.startContainer, 'caption', true);
                if (caption) {
                    var table = domUtils.findParentByTagName(caption, 'table');
                    if (!rng.collapsed) {

                        rng.deleteContents();
                        me.fireEvent('saveScene');
                    } else {
                        if (caption) {
                            rng.setStart(table.rows[0].cells[0], 0).setCursor(false, true);
                        }
                    }
                    domUtils.preventDefault(evt);
                    return;
                }
                if (rng.collapsed) {
                    var table = domUtils.findParentByTagName(rng.startContainer, 'table');
                    if (table) {
                        var cell = table.rows[0].cells[0],
                            start = domUtils.findParentByTagName(me.selection.getStart(), ['td', 'th'], true),
                            preNode = table.previousSibling;
                        if (cell === start && (!preNode || preNode.nodeType == 1 && preNode.tagName == 'TABLE' ) && domUtils.isStartInblock(rng)) {
                            var first = domUtils.findParent(me.selection.getStart(), function(n){return domUtils.isBlockElm(n)}, true);
                            if(first && ( /t(h|d)/i.test(first.tagName) || first ===  start.firstChild )){
                                me.execCommand('insertparagraphbeforetable');
                                domUtils.preventDefault(evt);
                            }

                        }
                    }
                }
            }

            if ((evt.ctrlKey || evt.metaKey) && evt.keyCode == '67') {
                tableCopyList = null;
                var ut = getUETableBySelected(me);
                if (ut) {
                    var tds = ut.selectedTds;
                    isFullCol = ut.isFullCol();
                    isFullRow = ut.isFullRow();
                    tableCopyList = [
                        [ut.cloneCell(tds[0],null,true)]
                    ];
                    for (var i = 1, ci; ci = tds[i]; i++) {
                        if (ci.parentNode !== tds[i - 1].parentNode) {
                            tableCopyList.push([ut.cloneCell(ci,null,true)]);
                        } else {
                            tableCopyList[tableCopyList.length - 1].push(ut.cloneCell(ci,null,true));
                        }

                    }
                }
            }
        });
        me.addListener("tablehasdeleted",function(){
            toggleDraggableState(this, false, "", null);
            if (dragButton)domUtils.remove(dragButton);
        });

        me.addListener('beforepaste', function (cmd, html) {
            var me = this;
            var rng = me.selection.getRange();
            if (domUtils.findParentByTagName(rng.startContainer, 'caption', true)) {
                var div = me.document.createElement("div");
                div.innerHTML = html.html;
                //trace:3729
                html.html = div[browser.ie9below ? 'innerText' : 'textContent'];
                return;
            }
            var table = getUETableBySelected(me);
            if (tableCopyList) {
                me.fireEvent('saveScene');
                var rng = me.selection.getRange();
                var td = domUtils.findParentByTagName(rng.startContainer, ['td', 'th'], true), tmpNode, preNode;
                if (td) {
                    var ut = getUETable(td);
                    if (isFullRow) {
                        var rowIndex = ut.getCellInfo(td).rowIndex;
                        if (td.tagName == 'TH') {
                            rowIndex++;
                        }
                        for (var i = 0, ci; ci = tableCopyList[i++];) {
                            var tr = ut.insertRow(rowIndex++, "td");
                            for (var j = 0, cj; cj = ci[j]; j++) {
                                var cell = tr.cells[j];
                                if (!cell) {
                                    cell = tr.insertCell(j)
                                }
                                cell.innerHTML = cj.innerHTML;
                                cj.getAttribute('width') && cell.setAttribute('width', cj.getAttribute('width'));
                                cj.getAttribute('vAlign') && cell.setAttribute('vAlign', cj.getAttribute('vAlign'));
                                cj.getAttribute('align') && cell.setAttribute('align', cj.getAttribute('align'));
                                cj.style.cssText && (cell.style.cssText = cj.style.cssText)
                            }
                            for (var j = 0, cj; cj = tr.cells[j]; j++) {
                                if (!ci[j])
                                    break;
                                cj.innerHTML = ci[j].innerHTML;
                                ci[j].getAttribute('width') && cj.setAttribute('width', ci[j].getAttribute('width'));
                                ci[j].getAttribute('vAlign') && cj.setAttribute('vAlign', ci[j].getAttribute('vAlign'));
                                ci[j].getAttribute('align') && cj.setAttribute('align', ci[j].getAttribute('align'));
                                ci[j].style.cssText && (cj.style.cssText = ci[j].style.cssText)
                            }
                        }
                    } else {
                        if (isFullCol) {
                            cellInfo = ut.getCellInfo(td);
                            var maxColNum = 0;
                            for (var j = 0, ci = tableCopyList[0], cj; cj = ci[j++];) {
                                maxColNum += cj.colSpan || 1;
                            }
                            me.__hasEnterExecCommand = true;
                            for (i = 0; i < maxColNum; i++) {
                                me.execCommand('insertcol');
                            }
                            me.__hasEnterExecCommand = false;
                            td = ut.table.rows[0].cells[cellInfo.cellIndex];
                            if (td.tagName == 'TH') {
                                td = ut.table.rows[1].cells[cellInfo.cellIndex];
                            }
                        }
                        for (var i = 0, ci; ci = tableCopyList[i++];) {
                            tmpNode = td;
                            for (var j = 0, cj; cj = ci[j++];) {
                                if (td) {
                                    td.innerHTML = cj.innerHTML;
                                    //todo 定制处理
                                    cj.getAttribute('width') && td.setAttribute('width', cj.getAttribute('width'));
                                    cj.getAttribute('vAlign') && td.setAttribute('vAlign', cj.getAttribute('vAlign'));
                                    cj.getAttribute('align') && td.setAttribute('align', cj.getAttribute('align'));
                                    cj.style.cssText && (td.style.cssText = cj.style.cssText);
                                    preNode = td;
                                    td = td.nextSibling;
                                } else {
                                    var cloneTd = cj.cloneNode(true);
                                    domUtils.removeAttributes(cloneTd, ['class', 'rowSpan', 'colSpan']);

                                    preNode.parentNode.appendChild(cloneTd)
                                }
                            }
                            td = ut.getNextCell(tmpNode, true, true);
                            if (!tableCopyList[i])
                                break;
                            if (!td) {
                                var cellInfo = ut.getCellInfo(tmpNode);
                                ut.table.insertRow(ut.table.rows.length);
                                ut.update();
                                td = ut.getVSideCell(tmpNode, true);
                            }
                        }
                    }
                    ut.update();
                } else {
                    table = me.document.createElement('table');
                    for (var i = 0, ci; ci = tableCopyList[i++];) {
                        var tr = table.insertRow(table.rows.length);
                        for (var j = 0, cj; cj = ci[j++];) {
                            cloneTd = UT.cloneCell(cj,null,true);
                            domUtils.removeAttributes(cloneTd, ['class']);
                            tr.appendChild(cloneTd)
                        }
                        if (j == 2 && cloneTd.rowSpan > 1) {
                            cloneTd.rowSpan = 1;
                        }
                    }

                    var defaultValue = getDefaultValue(me),
                        width = me.body.offsetWidth -
                            (needIEHack ? parseInt(domUtils.getComputedStyle(me.body, 'margin-left'), 10) * 2 : 0) - defaultValue.tableBorder * 2 - (me.options.offsetWidth || 0);
                    me.execCommand('insertHTML', '<table  ' +
                        ( isFullCol && isFullRow ? 'width="' + width + '"' : '') +
                        '>' + table.innerHTML.replace(/>\s*</g, '><').replace(/\bth\b/gi, "td") + '</table>')
                }
                me.fireEvent('contentchange');
                me.fireEvent('saveScene');
                html.html = '';
                return true;
            } else {
                var div = me.document.createElement("div"), tables;
                div.innerHTML = html.html;
                tables = div.getElementsByTagName("table");
                if (domUtils.findParentByTagName(me.selection.getStart(), 'table')) {
                    utils.each(tables, function (t) {
                        domUtils.remove(t)
                    });
                    if (domUtils.findParentByTagName(me.selection.getStart(), 'caption', true)) {
                        div.innerHTML = div[browser.ie ? 'innerText' : 'textContent'];
                    }
                } else {
                    utils.each(tables, function (table) {
                        removeStyleSize(table, true);
                        domUtils.removeAttributes(table, ['style', 'border']);
                        utils.each(domUtils.getElementsByTagName(table, "td"), function (td) {
                            if (isEmptyBlock(td)) {
                                domUtils.fillNode(me.document, td);
                            }
                            removeStyleSize(td, true);
//                            domUtils.removeAttributes(td, ['style'])
                        });
                    });
                }
                html.html = div.innerHTML;
            }
        });

        me.addListener('afterpaste', function () {
            utils.each(domUtils.getElementsByTagName(me.body, "table"), function (table) {
                if (table.offsetWidth > me.body.offsetWidth) {
                    var defaultValue = getDefaultValue(me, table);
                    table.style.width = me.body.offsetWidth - (needIEHack ? parseInt(domUtils.getComputedStyle(me.body, 'margin-left'), 10) * 2 : 0) - defaultValue.tableBorder * 2 - (me.options.offsetWidth || 0) + 'px'
                }
            })
        });
        me.addListener('blur', function () {
            tableCopyList = null;
        });
        var timer;
        me.addListener('keydown', function () {
            clearTimeout(timer);
            timer = setTimeout(function () {
                var rng = me.selection.getRange(),
                    cell = domUtils.findParentByTagName(rng.startContainer, ['th', 'td'], true);
                if (cell) {
                    var table = cell.parentNode.parentNode.parentNode;
                    if (table.offsetWidth > table.getAttribute("width")) {
                        cell.style.wordBreak = "break-all";
                    }
                }

            }, 100);
        });
        me.addListener("selectionchange", function () {
            toggleDraggableState(me, false, "", null);
        });


        //内容变化时触发索引更新
        //todo 可否考虑标记检测，如果不涉及表格的变化就不进行索引重建和更新
        me.addListener("contentchange", function () {
            var me = this;
            //尽可能排除一些不需要更新的状况
            hideDragLine(me);
            if (getUETableBySelected(me))return;
            var rng = me.selection.getRange();
            var start = rng.startContainer;
            start = domUtils.findParentByTagName(start, ['td', 'th'], true);
            utils.each(domUtils.getElementsByTagName(me.document, 'table'), function (table) {
                if (me.fireEvent("excludetable", table) === true) return;
                table.ueTable = new UT(table);
                //trace:3742
//                utils.each(domUtils.getElementsByTagName(me.document, 'td'), function (td) {
//
//                    if (domUtils.isEmptyBlock(td) && td !== start) {
//                        domUtils.fillNode(me.document, td);
//                        if (browser.ie && browser.version == 6) {
//                            td.innerHTML = '&nbsp;'
//                        }
//                    }
//                });
//                utils.each(domUtils.getElementsByTagName(me.document, 'th'), function (th) {
//                    if (domUtils.isEmptyBlock(th) && th !== start) {
//                        domUtils.fillNode(me.document, th);
//                        if (browser.ie && browser.version == 6) {
//                            th.innerHTML = '&nbsp;'
//                        }
//                    }
//                });
                table.onmouseover = function () {
                    me.fireEvent('tablemouseover', table);
                };
                table.onmousemove = function () {
                    me.fireEvent('tablemousemove', table);
                    me.options.tableDragable && toggleDragButton(true, this, me);
                    utils.defer(function(){
                        me.fireEvent('contentchange',50)
                    },true)
                };
                table.onmouseout = function () {
                    me.fireEvent('tablemouseout', table);
                    toggleDraggableState(me, false, "", null);
                    hideDragLine(me);
                };
                table.onclick = function (evt) {
                    evt = me.window.event || evt;
                    var target = getParentTdOrTh(evt.target || evt.srcElement);
                    if (!target)return;
                    var ut = getUETable(target),
                        table = ut.table,
                        cellInfo = ut.getCellInfo(target),
                        cellsRange,
                        rng = me.selection.getRange();
//                    if ("topLeft" == inPosition(table, mouseCoords(evt))) {
//                        cellsRange = ut.getCellsRange(ut.table.rows[0].cells[0], ut.getLastCell());
//                        ut.setSelected(cellsRange);
//                        return;
//                    }
//                    if ("bottomRight" == inPosition(table, mouseCoords(evt))) {
//
//                        return;
//                    }
                    if (inTableSide(table, target, evt, true)) {
                        var endTdCol = ut.getCell(ut.indexTable[ut.rowsNum - 1][cellInfo.colIndex].rowIndex, ut.indexTable[ut.rowsNum - 1][cellInfo.colIndex].cellIndex);
                        if (evt.shiftKey && ut.selectedTds.length) {
                            if (ut.selectedTds[0] !== endTdCol) {
                                cellsRange = ut.getCellsRange(ut.selectedTds[0], endTdCol);
                                ut.setSelected(cellsRange);
                            } else {
                                rng && rng.selectNodeContents(endTdCol).select();
                            }
                        } else {
                            if (target !== endTdCol) {
                                cellsRange = ut.getCellsRange(target, endTdCol);
                                ut.setSelected(cellsRange);
                            } else {
                                rng && rng.selectNodeContents(endTdCol).select();
                            }
                        }
                        return;
                    }
                    if (inTableSide(table, target, evt)) {
                        var endTdRow = ut.getCell(ut.indexTable[cellInfo.rowIndex][ut.colsNum - 1].rowIndex, ut.indexTable[cellInfo.rowIndex][ut.colsNum - 1].cellIndex);
                        if (evt.shiftKey && ut.selectedTds.length) {
                            if (ut.selectedTds[0] !== endTdRow) {
                                cellsRange = ut.getCellsRange(ut.selectedTds[0], endTdRow);
                                ut.setSelected(cellsRange);
                            } else {
                                rng && rng.selectNodeContents(endTdRow).select();
                            }
                        } else {
                            if (target !== endTdRow) {
                                cellsRange = ut.getCellsRange(target, endTdRow);
                                ut.setSelected(cellsRange);
                            } else {
                                rng && rng.selectNodeContents(endTdRow).select();
                            }
                        }
                    }
                };
            });

            switchBorderColor(me, true);
        });

        domUtils.on(me.document, "mousemove", mouseMoveEvent);

        domUtils.on(me.document, "mouseout", function (evt) {
            var target = evt.target || evt.srcElement;
            if (target.tagName == "TABLE") {
                toggleDraggableState(me, false, "", null);
            }
        });
        /**
         * 表格隔行变色
         */
        me.addListener("interlacetable",function(type,table,classList){
            if(!table) return;
            var me = this,
                rows = table.rows,
                len = rows.length,
                getClass = function(list,index,repeat){
                    return list[index] ? list[index] : repeat ? list[index % list.length]: "";
                };
            for(var i = 0;i<len;i++){
                rows[i].className = getClass( classList|| me.options.classList,i,true);
            }
        });
        me.addListener("uninterlacetable",function(type,table){
            if(!table) return;
            var me = this,
                rows = table.rows,
                classList = me.options.classList,
                len = rows.length;
            for(var i = 0;i<len;i++){
                domUtils.removeClasses( rows[i], classList );
            }
        });

        me.addListener("mousedown", mouseDownEvent);
        me.addListener("mouseup", mouseUpEvent);
        //拖动的时候触发mouseup
        domUtils.on( me.body, 'dragstart', function( evt ){
            mouseUpEvent.call( me, 'dragstart', evt );
        });
        me.addOutputRule(function(root){
            utils.each(root.getNodesByTagName('div'),function(n){
                if (n.getAttr('id') == 'ue_tableDragLine') {
                    n.parentNode.removeChild(n);
                }
            });
        });

        var currentRowIndex = 0;
        me.addListener("mousedown", function () {
            currentRowIndex = 0;
        });
        me.addListener('tabkeydown', function () {
            var range = this.selection.getRange(),
                common = range.getCommonAncestor(true, true),
                table = domUtils.findParentByTagName(common, 'table');
            if (table) {
                if (domUtils.findParentByTagName(common, 'caption', true)) {
                    var cell = domUtils.getElementsByTagName(table, 'th td');
                    if (cell && cell.length) {
                        range.setStart(cell[0], 0).setCursor(false, true)
                    }
                } else {
                    var cell = domUtils.findParentByTagName(common, ['td', 'th'], true),
                        ua = getUETable(cell);
                    currentRowIndex = cell.rowSpan > 1 ? currentRowIndex : ua.getCellInfo(cell).rowIndex;
                    var nextCell = ua.getTabNextCell(cell, currentRowIndex);
                    if (nextCell) {
                        if (isEmptyBlock(nextCell)) {
                            range.setStart(nextCell, 0).setCursor(false, true)
                        } else {
                            range.selectNodeContents(nextCell).select()
                        }
                    } else {
                        me.fireEvent('saveScene');
                        me.__hasEnterExecCommand = true;
                        this.execCommand('insertrownext');
                        me.__hasEnterExecCommand = false;
                        range = this.selection.getRange();
                        range.setStart(table.rows[table.rows.length - 1].cells[0], 0).setCursor();
                        me.fireEvent('saveScene');
                    }
                }
                return true;
            }

        });
        browser.ie && me.addListener('selectionchange', function () {
            toggleDraggableState(this, false, "", null);
        });
        me.addListener("keydown", function (type, evt) {
            var me = this;
            //处理在表格的最后一个输入tab产生新的表格
            var keyCode = evt.keyCode || evt.which;
            if (keyCode == 8 || keyCode == 46) {
                return;
            }
            var notCtrlKey = !evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey;
            notCtrlKey && removeSelectedClass(domUtils.getElementsByTagName(me.body, "td"));
            var ut = getUETableBySelected(me);
            if (!ut) return;
            notCtrlKey && ut.clearSelected();
        });

        me.addListener("beforegetcontent", function () {
            switchBorderColor(this, false);
            browser.ie && utils.each(this.document.getElementsByTagName('caption'), function (ci) {
                if (domUtils.isEmptyNode(ci)) {
                    ci.innerHTML = '&nbsp;'
                }
            });
        });
        me.addListener("aftergetcontent", function () {
            switchBorderColor(this, true);
        });
        me.addListener("getAllHtml", function () {
            removeSelectedClass(me.document.getElementsByTagName("td"));
        });
        //修正全屏状态下插入的表格宽度在非全屏状态下撑开编辑器的情况
        me.addListener("fullscreenchanged", function (type, fullscreen) {
            if (!fullscreen) {
                var ratio = this.body.offsetWidth / document.body.offsetWidth,
                    tables = domUtils.getElementsByTagName(this.body, "table");
                utils.each(tables, function (table) {
                    if (table.offsetWidth < me.body.offsetWidth) return false;
                    var tds = domUtils.getElementsByTagName(table, "td"),
                        backWidths = [];
                    utils.each(tds, function (td) {
                        backWidths.push(td.offsetWidth);
                    });
                    for (var i = 0, td; td = tds[i]; i++) {
                        td.setAttribute("width", Math.floor(backWidths[i] * ratio));
                    }
                    table.setAttribute("width", Math.floor(getTableWidth(me, needIEHack, getDefaultValue(me))))
                });
            }
        });

        //重写execCommand命令，用于处理框选时的处理
        var oldExecCommand = me.execCommand;
        me.execCommand = function (cmd, datatat) {

            var me = this,
                args = arguments;

            cmd = cmd.toLowerCase();
            var ut = getUETableBySelected(me), tds,
                range = new dom.Range(me.document),
                cmdFun = me.commands[cmd] || UE.commands[cmd],
                result;
            if (!cmdFun) return;
            if (ut && !commands[cmd] && !cmdFun.notNeedUndo && !me.__hasEnterExecCommand) {
                me.__hasEnterExecCommand = true;
                me.fireEvent("beforeexeccommand", cmd);
                tds = ut.selectedTds;
                var lastState = -2, lastValue = -2, value, state;
                for (var i = 0, td; td = tds[i]; i++) {
                    if (isEmptyBlock(td)) {
                        range.setStart(td, 0).setCursor(false, true)
                    } else {
                        range.selectNode(td).select(true);
                    }
                    state = me.queryCommandState(cmd);
                    value = me.queryCommandValue(cmd);
                    if (state != -1) {
                        if (lastState !== state || lastValue !== value) {
                            me._ignoreContentChange = true;
                            result = oldExecCommand.apply(me, arguments);
                            me._ignoreContentChange = false;

                        }
                        lastState = me.queryCommandState(cmd);
                        lastValue = me.queryCommandValue(cmd);
                        if (domUtils.isEmptyBlock(td)) {
                            domUtils.fillNode(me.document, td)
                        }
                    }
                }
                range.setStart(tds[0], 0).shrinkBoundary(true).setCursor(false, true);
                me.fireEvent('contentchange');
                me.fireEvent("afterexeccommand", cmd);
                me.__hasEnterExecCommand = false;
                me._selectionChange();
            } else {
                result = oldExecCommand.apply(me, arguments);
            }
            return result;
        };


    });
    /**
     * 删除obj的宽高style，改成属性宽高
     * @param obj
     * @param replaceToProperty
     */
    function removeStyleSize(obj, replaceToProperty) {
        removeStyle(obj, "width", true);
        removeStyle(obj, "height", true);
    }

    function removeStyle(obj, styleName, replaceToProperty) {
        if (obj.style[styleName]) {
            replaceToProperty && obj.setAttribute(styleName, parseInt(obj.style[styleName], 10));
            obj.style[styleName] = "";
        }
    }

    function getParentTdOrTh(ele) {
        if (ele.tagName == "TD" || ele.tagName == "TH") return ele;
        var td;
        if (td = domUtils.findParentByTagName(ele, "td", true) || domUtils.findParentByTagName(ele, "th", true)) return td;
        return null;
    }

    function isEmptyBlock(node) {
        var reg = new RegExp(domUtils.fillChar, 'g');
        if (node[browser.ie ? 'innerText' : 'textContent'].replace(/^\s*$/, '').replace(reg, '').length > 0) {
            return 0;
        }
        for (var n in dtd.$isNotEmpty) {
            if (node.getElementsByTagName(n).length) {
                return 0;
            }
        }
        return 1;
    }


    function mouseCoords(evt) {
        if (evt.pageX || evt.pageY) {
            return { x:evt.pageX, y:evt.pageY };
        }
        return {
            x:evt.clientX + me.document.body.scrollLeft - me.document.body.clientLeft,
            y:evt.clientY + me.document.body.scrollTop - me.document.body.clientTop
        };
    }

    function mouseMoveEvent(evt) {

        if( isEditorDisabled() ) {
            return;
        }

        try {

            //普通状态下鼠标移动
            var target = getParentTdOrTh(evt.target || evt.srcElement),
                pos;

            //区分用户的行为是拖动还是双击
            if( isInResizeBuffer  ) {

                me.body.style.webkitUserSelect = 'none';

                if( Math.abs( userActionStatus.x - evt.clientX ) > offsetOfTableCell || Math.abs( userActionStatus.y - evt.clientY ) > offsetOfTableCell ) {
                    clearTableDragTimer();
                    isInResizeBuffer = false;
                    singleClickState = 0;
                    //drag action
                    tableBorderDrag(evt);
                }
            }

            //修改单元格大小时的鼠标移动
            if (onDrag && dragTd) {
                singleClickState = 0;
                me.body.style.webkitUserSelect = 'none';
                me.selection.getNative()[browser.ie9below ? 'empty' : 'removeAllRanges']();
                pos = mouseCoords(evt);
                toggleDraggableState(me, true, onDrag, pos, target);
                if (onDrag == "h") {
                    dragLine.style.left = getPermissionX(dragTd, evt) + "px";
                } else if (onDrag == "v") {
                    dragLine.style.top = getPermissionY(dragTd, evt) + "px";
                }
                return;
            }
            //当鼠标处于table上时，修改移动过程中的光标状态
            if (target) {
                //针对使用table作为容器的组件不触发拖拽效果
                if (me.fireEvent('excludetable', target) === true)
                    return;
                pos = mouseCoords(evt);
                var state = getRelation(target, pos),
                    table = domUtils.findParentByTagName(target, "table", true);

                if (inTableSide(table, target, evt, true)) {
                    if (me.fireEvent("excludetable", table) === true) return;
                    me.body.style.cursor = "url(" + me.options.cursorpath + "h.png),pointer";
                } else if (inTableSide(table, target, evt)) {
                    if (me.fireEvent("excludetable", table) === true) return;
                    me.body.style.cursor = "url(" + me.options.cursorpath + "v.png),pointer";
                } else {
                    me.body.style.cursor = "text";
                    var curCell = target;
                    if (/\d/.test(state)) {
                        state = state.replace(/\d/, '');
                        target = getUETable(target).getPreviewCell(target, state == "v");
                    }
                    //位于第一行的顶部或者第一列的左边时不可拖动
                    toggleDraggableState(me, target ? !!state : false, target ? state : '', pos, target);

                }
            } else {
                toggleDragButton(false, table, me);
            }

        } catch (e) {
            showError(e);
        }
    }

    var dragButtonTimer;

    function toggleDragButton(show, table, editor) {
        if (!show) {
            if (dragOver)return;
            dragButtonTimer = setTimeout(function () {
                !dragOver && dragButton && dragButton.parentNode && dragButton.parentNode.removeChild(dragButton);
            }, 2000);
        } else {
            createDragButton(table, editor);
        }
    }

    function createDragButton(table, editor) {
        var pos = domUtils.getXY(table),
            doc = table.ownerDocument;
        if (dragButton && dragButton.parentNode)return dragButton;
        dragButton = doc.createElement("div");
        dragButton.contentEditable = false;
        dragButton.innerHTML = "";
        dragButton.style.cssText = "width:15px;height:15px;background-image:url(" + editor.options.UEDITOR_HOME_URL + "dialogs/table/dragicon.png);position: absolute;cursor:move;top:" + (pos.y - 15) + "px;left:" + (pos.x) + "px;";
        domUtils.unSelectable(dragButton);
        dragButton.onmouseover = function (evt) {
            dragOver = true;
        };
        dragButton.onmouseout = function (evt) {
            dragOver = false;
        };
        domUtils.on(dragButton, 'click', function (type, evt) {
            doClick(evt, this);
        });
        domUtils.on(dragButton, 'dblclick', function (type, evt) {
            doDblClick(evt);
        });
        domUtils.on(dragButton, 'dragstart', function (type, evt) {
            domUtils.preventDefault(evt);
        });
        var timer;

        function doClick(evt, button) {
            // 部分浏览器下需要清理
            clearTimeout(timer);
            timer = setTimeout(function () {
                editor.fireEvent("tableClicked", table, button);
            }, 300);
        }

        function doDblClick(evt) {
            clearTimeout(timer);
            var ut = getUETable(table),
                start = table.rows[0].cells[0],
                end = ut.getLastCell(),
                range = ut.getCellsRange(start, end);
            editor.selection.getRange().setStart(start, 0).setCursor(false, true);
            ut.setSelected(range);
        }

        doc.body.appendChild(dragButton);
    }


//    function inPosition(table, pos) {
//        var tablePos = domUtils.getXY(table),
//            width = table.offsetWidth,
//            height = table.offsetHeight;
//        if (pos.x - tablePos.x < 5 && pos.y - tablePos.y < 5) {
//            return "topLeft";
//        } else if (tablePos.x + width - pos.x < 5 && tablePos.y + height - pos.y < 5) {
//            return "bottomRight";
//        }
//    }

    function inTableSide(table, cell, evt, top) {
        var pos = mouseCoords(evt),
            state = getRelation(cell, pos);

        if (top) {
            var caption = table.getElementsByTagName("caption")[0],
                capHeight = caption ? caption.offsetHeight : 0;
            return (state == "v1") && ((pos.y - domUtils.getXY(table).y - capHeight) < 8);
        } else {
            return (state == "h1") && ((pos.x - domUtils.getXY(table).x) < 8);
        }
    }

    /**
     * 获取拖动时允许的X轴坐标
     * @param dragTd
     * @param evt
     */
    function getPermissionX(dragTd, evt) {
        var ut = getUETable(dragTd);
        if (ut) {
            var preTd = ut.getSameEndPosCells(dragTd, "x")[0],
                nextTd = ut.getSameStartPosXCells(dragTd)[0],
                mouseX = mouseCoords(evt).x,
                left = (preTd ? domUtils.getXY(preTd).x : domUtils.getXY(ut.table).x) + 20 ,
                right = nextTd ? domUtils.getXY(nextTd).x + nextTd.offsetWidth - 20 : (me.body.offsetWidth + 5 || parseInt(domUtils.getComputedStyle(me.body, "width"), 10));

            left += cellMinWidth;
            right -= cellMinWidth;

            return mouseX < left ? left : mouseX > right ? right : mouseX;
        }
    }

    /**
     * 获取拖动时允许的Y轴坐标
     */
    function getPermissionY(dragTd, evt) {
        try {
            var top = domUtils.getXY(dragTd).y,
                mousePosY = mouseCoords(evt).y;
            return mousePosY < top ? top : mousePosY;
        } catch (e) {
            showError(e);
        }
    }

    /**
     * 移动状态切换
     */
    function toggleDraggableState(editor, draggable, dir, mousePos, cell) {
        try {
            editor.body.style.cursor = dir == "h" ? "col-resize" : dir == "v" ? "row-resize" : "text";
            if (browser.ie) {
                if (dir && !mousedown && !getUETableBySelected(editor)) {
                    getDragLine(editor, editor.document);
                    showDragLineAt(dir, cell);
                } else {
                    hideDragLine(editor)
                }
            }
            onBorder = draggable;
        } catch (e) {
            showError(e);
        }
    }

    /**
     * 获取与UETable相关的resize line
     * @param uetable UETable对象
     */
    function getResizeLineByUETable() {

        var lineId = '_UETableResizeLine',
            line = this.document.getElementById( lineId );

        if( !line ) {
            line = this.document.createElement("div");
            line.id = lineId;
            line.contnetEditable = false;
            line.setAttribute("unselectable", "on");

            var styles = {
                width: 2*cellBorderWidth + 1 + 'px',
                position: 'absolute',
                'z-index': 100000,
                cursor: 'col-resize',
                background: 'red',
                display: 'none'
            };

            //切换状态
            line.onmouseout = function(){
                this.style.display = 'none';
            };

            utils.extend( line.style, styles );

            this.document.body.appendChild( line );

        }

        return line;

    }

    /**
     * 更新resize-line
     */
    function updateResizeLine( cell, uetable ) {

        var line = getResizeLineByUETable.call( this ),
            table = uetable.table,
            styles = {
                top: domUtils.getXY( table ).y + 'px',
                left: domUtils.getXY( cell).x + cell.offsetWidth - cellBorderWidth + 'px',
                display: 'block',
                height: table.offsetHeight + 'px'
            };

        utils.extend( line.style, styles );

    }

    /**
     * 显示resize-line
     */
    function showResizeLine( cell ) {

        var uetable = getUETable( cell );

        updateResizeLine.call( this, cell, uetable );

    }

    /**
     * 获取鼠标与当前单元格的相对位置
     * @param ele
     * @param mousePos
     */
    function getRelation(ele, mousePos) {
        var elePos = domUtils.getXY(ele);

        if( !elePos ) {
            return '';
        }

        if (elePos.x + ele.offsetWidth - mousePos.x < cellBorderWidth) {
            return "h";
        }
        if (mousePos.x - elePos.x < cellBorderWidth) {
            return 'h1'
        }
        if (elePos.y + ele.offsetHeight - mousePos.y < cellBorderWidth) {
            return "v";
        }
        if (mousePos.y - elePos.y < cellBorderWidth) {
            return 'v1'
        }
        return '';
    }

    function mouseDownEvent(type, evt) {

        if( isEditorDisabled() ) {
            return ;
        }

        userActionStatus = {
            x: evt.clientX,
            y: evt.clientY
        };

        //右键菜单单独处理
        if (evt.button == 2) {
            var ut = getUETableBySelected(me),
                flag = false;

            if (ut) {
                var td = getTargetTd(me, evt);
                utils.each(ut.selectedTds, function (ti) {
                    if (ti === td) {
                        flag = true;
                    }
                });
                if (!flag) {
                    removeSelectedClass(domUtils.getElementsByTagName(me.body, "th td"));
                    ut.clearSelected()
                } else {
                    td = ut.selectedTds[0];
                    setTimeout(function () {
                        me.selection.getRange().setStart(td, 0).setCursor(false, true);
                    }, 0);

                }
            }
        } else {
            tableClickHander( evt );
        }

    }

    //清除表格的计时器
    function clearTableTimer() {
        tabTimer && clearTimeout( tabTimer );
        tabTimer = null;
    }

    //双击收缩
    function tableDbclickHandler(evt) {
        singleClickState = 0;
        evt = evt || me.window.event;
        var target = getParentTdOrTh(evt.target || evt.srcElement);
        if (target) {
            var h;
            if (h = getRelation(target, mouseCoords(evt))) {

                hideDragLine( me );

                if (h == 'h1') {
                    h = 'h';
                    if (inTableSide(domUtils.findParentByTagName(target, "table"), target, evt)) {
                        me.execCommand('adaptbywindow');
                    } else {
                        target = getUETable(target).getPreviewCell(target);
                        if (target) {
                            var rng = me.selection.getRange();
                            rng.selectNodeContents(target).setCursor(true, true)
                        }
                    }
                }
                if (h == 'h') {
                    var ut = getUETable(target),
                        table = ut.table,
                        cells = getCellsByMoveBorder( target, table, true );

                    cells = extractArray( cells, 'left' );

                    ut.width = ut.offsetWidth;

                    var oldWidth = [],
                        newWidth = [];

                    utils.each( cells, function( cell ){

                        oldWidth.push( cell.offsetWidth );

                    } );

                    utils.each( cells, function( cell ){

                        cell.removeAttribute("width");

                    } );

                    window.setTimeout( function(){

                        //是否允许改变
                        var changeable = true;

                        utils.each( cells, function( cell, index ){

                            var width = cell.offsetWidth;

                            if( width > oldWidth[index] ) {
                                changeable = false;
                                return false;
                            }

                            newWidth.push( width );

                        } );

                        var change = changeable ? newWidth : oldWidth;

                        utils.each( cells, function( cell, index ){

                            cell.width = change[index] - getTabcellSpace();

                        } );


                    }, 0 );

//                    minWidth -= cellMinWidth;
//
//                    table.removeAttribute("width");
//                    utils.each(cells, function (cell) {
//                        cell.style.width = "";
//                        cell.width -= minWidth;
//                    });

                }
            }
        }
    }

    function tableClickHander( evt ) {

        removeSelectedClass(domUtils.getElementsByTagName(me.body, "td th"));
        //trace:3113
        //选中单元格，点击table外部，不会清掉table上挂的ueTable,会引起getUETableBySelected方法返回值
        utils.each(me.document.getElementsByTagName('table'), function (t) {
            t.ueTable = null;
        });
        startTd = getTargetTd(me, evt);
        if( !startTd ) return;
        var table = domUtils.findParentByTagName(startTd, "table", true);
        ut = getUETable(table);
        ut && ut.clearSelected();

        //判断当前鼠标状态
        if (!onBorder) {
            me.document.body.style.webkitUserSelect = '';
            mousedown = true;
            me.addListener('mouseover', mouseOverEvent);
        } else {
            //边框上的动作处理
            borderActionHandler( evt );
        }


    }

    //处理表格边框上的动作, 这里做延时处理，避免两种动作互相影响
    function borderActionHandler( evt ) {

        if ( browser.ie ) {
            evt = reconstruct(evt );
        }

        clearTableDragTimer();

        //是否正在等待resize的缓冲中
        isInResizeBuffer = true;

        tableDragTimer = setTimeout(function(){
            tableBorderDrag( evt );
        }, dblclickTime);

    }

    function extractArray( originArr, key ) {

        var result = [],
            tmp = null;

        for( var i = 0, len = originArr.length; i<len; i++ ) {

            tmp = originArr[ i ][ key ];

            if( tmp ) {
                result.push( tmp );
            }

        }

        return result;

    }

    function clearTableDragTimer() {
        tableDragTimer && clearTimeout(tableDragTimer);
        tableDragTimer = null;
    }

    function reconstruct( obj ) {

        var attrs = ['pageX', 'pageY', 'clientX', 'clientY', 'srcElement', 'target'],
            newObj = {};

        if( obj ) {

            for( var i = 0, key, val; key = attrs[i]; i++ ) {
                val=obj[ key ];
                val && (newObj[ key ] = val);
            }

        }

        return newObj;

    }

    //边框拖动
    function tableBorderDrag( evt ) {

        isInResizeBuffer = false;

        startTd = evt.target || evt.srcElement;
        if( !startTd ) return;
        var state = getRelation(startTd, mouseCoords(evt));
        if (/\d/.test(state)) {
            state = state.replace(/\d/, '');
            startTd = getUETable(startTd).getPreviewCell(startTd, state == 'v');
        }
        hideDragLine(me);
        getDragLine(me, me.document);
        me.fireEvent('saveScene');
        showDragLineAt(state, startTd);
        mousedown = true;
        //拖动开始
        onDrag = state;
        dragTd = startTd;
    }

    function mouseUpEvent(type, evt) {

        if( isEditorDisabled() ) {
            return ;
        }

        clearTableDragTimer();

        isInResizeBuffer = false;

        if( onBorder ) {
            singleClickState = ++singleClickState % 3;

            userActionStatus = {
                x: evt.clientX,
                y: evt.clientY
            };

            tableResizeTimer = setTimeout(function(){
                singleClickState > 0 && singleClickState--;
            }, dblclickTime );

            if( singleClickState === 2 ) {

                singleClickState = 0;
                tableDbclickHandler(evt);
                return;

            }

        }

        if (evt.button == 2)return;
        var me = this;
        //清除表格上原生跨选问题
        var range = me.selection.getRange(),
            start = domUtils.findParentByTagName(range.startContainer, 'table', true),
            end = domUtils.findParentByTagName(range.endContainer, 'table', true);

        if (start || end) {
            if (start === end) {
                start = domUtils.findParentByTagName(range.startContainer, ['td', 'th', 'caption'], true);
                end = domUtils.findParentByTagName(range.endContainer, ['td', 'th', 'caption'], true);
                if (start !== end) {
                    me.selection.clearRange()
                }
            } else {
                me.selection.clearRange()
            }
        }
        mousedown = false;
        me.document.body.style.webkitUserSelect = '';
        //拖拽状态下的mouseUP
        if ( onDrag && dragTd ) {

            me.selection.getNative()[browser.ie9below ? 'empty' : 'removeAllRanges']();

            singleClickState = 0;
            dragLine = me.document.getElementById('ue_tableDragLine');

            // trace 3973
            if (dragLine) {
                var dragTdPos = domUtils.getXY(dragTd),
                    dragLinePos = domUtils.getXY(dragLine);

                switch (onDrag) {
                    case "h":
                        changeColWidth(dragTd, dragLinePos.x - dragTdPos.x);
                        break;
                    case "v":
                        changeRowHeight(dragTd, dragLinePos.y - dragTdPos.y - dragTd.offsetHeight);
                        break;
                    default:
                }
                onDrag = "";
                dragTd = null;

                hideDragLine(me);
                me.fireEvent('saveScene');
                return;
            }
        }
        //正常状态下的mouseup
        if (!startTd) {
            var target = domUtils.findParentByTagName(evt.target || evt.srcElement, "td", true);
            if (!target) target = domUtils.findParentByTagName(evt.target || evt.srcElement, "th", true);
            if (target && (target.tagName == "TD" || target.tagName == "TH")) {
                if (me.fireEvent("excludetable", target) === true) return;
                range = new dom.Range(me.document);
                range.setStart(target, 0).setCursor(false, true);
            }
        } else {
            var ut = getUETable(startTd),
                cell = ut ? ut.selectedTds[0] : null;
            if (cell) {
                range = new dom.Range(me.document);
                if (domUtils.isEmptyBlock(cell)) {
                    range.setStart(cell, 0).setCursor(false, true);
                } else {
                    range.selectNodeContents(cell).shrinkBoundary().setCursor(false, true);
                }
            } else {
                range = me.selection.getRange().shrinkBoundary();
                if (!range.collapsed) {
                    var start = domUtils.findParentByTagName(range.startContainer, ['td', 'th'], true),
                        end = domUtils.findParentByTagName(range.endContainer, ['td', 'th'], true);
                    //在table里边的不能清除
                    if (start && !end || !start && end || start && end && start !== end) {
                        range.setCursor(false, true);
                    }
                }
            }
            startTd = null;
            me.removeListener('mouseover', mouseOverEvent);
        }
        me._selectionChange(250, evt);
    }

    function mouseOverEvent(type, evt) {

        if( isEditorDisabled() ) {
            return;
        }

        var me = this,
            tar = evt.target || evt.srcElement;
        currentTd = domUtils.findParentByTagName(tar, "td", true) || domUtils.findParentByTagName(tar, "th", true);
        //需要判断两个TD是否位于同一个表格内
        if (startTd && currentTd &&
            ((startTd.tagName == "TD" && currentTd.tagName == "TD") || (startTd.tagName == "TH" && currentTd.tagName == "TH")) &&
            domUtils.findParentByTagName(startTd, 'table') == domUtils.findParentByTagName(currentTd, 'table')) {
            var ut = getUETable(currentTd);
            if (startTd != currentTd) {
                me.document.body.style.webkitUserSelect = 'none';
                me.selection.getNative()[browser.ie9below ? 'empty' : 'removeAllRanges']();
                var range = ut.getCellsRange(startTd, currentTd);
                ut.setSelected(range);
            } else {
                me.document.body.style.webkitUserSelect = '';
                ut.clearSelected();
            }

        }
        evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);
    }

    function setCellHeight(cell, height, backHeight) {
        var lineHight = parseInt(domUtils.getComputedStyle(cell, "line-height"), 10),
            tmpHeight = backHeight + height;
        height = tmpHeight < lineHight ? lineHight : tmpHeight;
        if (cell.style.height) cell.style.height = "";
        cell.rowSpan == 1 ? cell.setAttribute("height", height) : (cell.removeAttribute && cell.removeAttribute("height"));
    }

    function getWidth(cell) {
        if (!cell)return 0;
        return parseInt(domUtils.getComputedStyle(cell, "width"), 10);
    }

    function changeColWidth(cell, changeValue) {

        var ut = getUETable(cell);
        if (ut) {

            //根据当前移动的边框获取相关的单元格
            var table = ut.table,
                cells = getCellsByMoveBorder( cell, table );

            table.style.width = "";
            table.removeAttribute("width");

            //修正改变量
            changeValue = correctChangeValue( changeValue, cell, cells );

            if (cell.nextSibling) {

                var i=0;

                utils.each( cells, function( cellGroup ){

                    cellGroup.left.width = (+cellGroup.left.width)+changeValue;
                    cellGroup.right && ( cellGroup.right.width = (+cellGroup.right.width)-changeValue );

                } );

            } else {

                utils.each( cells, function( cellGroup ){
                    cellGroup.left.width -= -changeValue;
                } );

            }
        }

    }

    function isEditorDisabled() {
        return me.body.contentEditable === "false";
    }

    function changeRowHeight(td, changeValue) {
        if (Math.abs(changeValue) < 10) return;
        var ut = getUETable(td);
        if (ut) {
            var cells = ut.getSameEndPosCells(td, "y"),
            //备份需要连带变化的td的原始高度，否则后期无法获取正确的值
                backHeight = cells[0] ? cells[0].offsetHeight : 0;
            for (var i = 0, cell; cell = cells[i++];) {
                setCellHeight(cell, changeValue, backHeight);
            }
        }

    }

    /**
     * 获取调整单元格大小的相关单元格
     * @isContainMergeCell 返回的结果中是否包含发生合并后的单元格
     */
    function getCellsByMoveBorder( cell, table, isContainMergeCell ) {

        if( !table ) {
            table = domUtils.findParentByTagName( cell, 'table' );
        }

        if( !table ) {
            return null;
        }

        //获取到该单元格所在行的序列号
        var index = domUtils.getNodeIndex( cell ),
            temp = cell,
            rows = table.rows,
            colIndex = 0;

        while( temp ) {
            //获取到当前单元格在未发生单元格合并时的序列
            if( temp.nodeType === 1 ) {
                colIndex += (temp.colSpan || 1);
            }
            temp = temp.previousSibling;
        }

        temp = null;

        //记录想关的单元格
        var borderCells = [];

        utils.each(rows, function( tabRow ){

            var cells = tabRow.cells,
                currIndex = 0;

            utils.each( cells, function( tabCell ){

                currIndex += (tabCell.colSpan || 1);

                if( currIndex === colIndex ) {

                    borderCells.push({
                        left: tabCell,
                        right: tabCell.nextSibling || null
                    });

                    return false;

                } else if( currIndex > colIndex ) {

                    if( isContainMergeCell ) {
                        borderCells.push({
                            left: tabCell
                        });
                    }

                    return false;
                }


            } );

        });

        return borderCells;

    }


    /**
     * 通过给定的单元格集合获取最小的单元格width
     */
    function getMinWidthByTableCells( cells ) {

        var minWidth = Number.MAX_VALUE;

        for( var i = 0, curCell; curCell = cells[ i ] ; i++ ) {

            minWidth = Math.min( minWidth, curCell.width || getTableCellWidth( curCell ) );

        }

        return minWidth;

    }

    function correctChangeValue( changeValue, relatedCell, cells ) {

        //为单元格的paading预留空间
        changeValue -= getTabcellSpace();

        if( changeValue < 0 ) {
            return 0;
        }

        changeValue -= getTableCellWidth( relatedCell );

        //确定方向
        var direction = changeValue < 0 ? 'left':'right';

        changeValue = Math.abs(changeValue);

        //只关心非最后一个单元格就可以
        utils.each( cells, function( cellGroup ){

            var curCell = cellGroup[direction];

            //为单元格保留最小空间
            if( curCell ) {
                changeValue = Math.min( changeValue, getTableCellWidth( curCell )-cellMinWidth );
            }


        } );


        //修正越界
        changeValue = changeValue < 0 ? 0 : changeValue;

        return direction === 'left' ? -changeValue : changeValue;

    }

    function getTableCellWidth( cell ) {

        var width = 0,
            //偏移纠正量
            offset = 0,
            width = cell.offsetWidth - getTabcellSpace();

        //最后一个节点纠正一下
        if( !cell.nextSibling ) {

            width -= getTableCellOffset( cell );

        }

        width = width < 0 ? 0 : width;

        try {
            cell.width = width;
        } catch(e) {
        }

        return width;

    }

    /**
     * 获取单元格所在表格的最末单元格的偏移量
     */
    function getTableCellOffset( cell ) {

        tab = domUtils.findParentByTagName( cell, "table", false);

        if( tab.offsetVal === undefined ) {

            var prev = cell.previousSibling;

            if( prev ) {

                //最后一个单元格和前一个单元格的width diff结果 如果恰好为一个border width， 则条件成立
                tab.offsetVal = cell.offsetWidth - prev.offsetWidth === UT.borderWidth ? UT.borderWidth : 0;

            } else {
                tab.offsetVal = 0;
            }

        }

        return tab.offsetVal;

    }

    function getTabcellSpace() {

        if( UT.tabcellSpace === undefined ) {

            var cell = null,
                tab = me.document.createElement("table"),
                tbody = me.document.createElement("tbody"),
                trow = me.document.createElement("tr"),
                tabcell = me.document.createElement("td"),
                mirror = null;

            tabcell.style.cssText = 'border: 0;';
            tabcell.width = 1;

            trow.appendChild( tabcell );
            trow.appendChild( mirror = tabcell.cloneNode( false ) );

            tbody.appendChild( trow );

            tab.appendChild( tbody );

            tab.style.cssText = "visibility: hidden;";

            me.body.appendChild( tab );

            UT.paddingSpace = tabcell.offsetWidth - 1;

            var tmpTabWidth = tab.offsetWidth;

            tabcell.style.cssText = '';
            mirror.style.cssText = '';

            UT.borderWidth = ( tab.offsetWidth - tmpTabWidth ) / 3;

            UT.tabcellSpace = UT.paddingSpace + UT.borderWidth;

            me.body.removeChild( tab );

        }

        getTabcellSpace = function(){ return UT.tabcellSpace; };

        return UT.tabcellSpace;

    }

    function getDragLine(editor, doc) {
        if (mousedown)return;
        dragLine = editor.document.createElement("div");
        domUtils.setAttributes(dragLine, {
            id:"ue_tableDragLine",
            unselectable:'on',
            contenteditable:false,
            'onresizestart':'return false',
            'ondragstart':'return false',
            'onselectstart':'return false',
            style:"background-color:blue;position:absolute;padding:0;margin:0;background-image:none;border:0px none;opacity:0;filter:alpha(opacity=0)"
        });
        editor.body.appendChild(dragLine);
    }

    function hideDragLine(editor) {
        if (mousedown)return;
        var line;
        while (line = editor.document.getElementById('ue_tableDragLine')) {
            domUtils.remove(line)
        }
    }

    /**
     * 依据state（v|h）在cell位置显示横线
     * @param state
     * @param cell
     */
    function showDragLineAt(state, cell) {
        if (!cell) return;
        var table = domUtils.findParentByTagName(cell, "table"),
            caption = table.getElementsByTagName('caption'),
            width = table.offsetWidth,
            height = table.offsetHeight - (caption.length > 0 ? caption[0].offsetHeight : 0),
            tablePos = domUtils.getXY(table),
            cellPos = domUtils.getXY(cell), css;
        switch (state) {
            case "h":
                css = 'height:' + height + 'px;top:' + (tablePos.y + (caption.length > 0 ? caption[0].offsetHeight : 0)) + 'px;left:' + (cellPos.x + cell.offsetWidth);
                dragLine.style.cssText = css + 'px;position: absolute;display:block;background-color:blue;width:1px;border:0; color:blue;opacity:.3;filter:alpha(opacity=30)';
                break;
            case "v":
                css = 'width:' + width + 'px;left:' + tablePos.x + 'px;top:' + (cellPos.y + cell.offsetHeight );
                //必须加上border:0和color:blue，否则低版ie不支持背景色显示
                dragLine.style.cssText = css + 'px;overflow:hidden;position: absolute;display:block;background-color:blue;height:1px;border:0;color:blue;opacity:.2;filter:alpha(opacity=20)';
                break;
            default:
        }
    }

    /**
     * 当表格边框颜色为白色时设置为虚线,true为添加虚线
     * @param editor
     * @param flag
     */
    function switchBorderColor(editor, flag) {
        var tableArr = domUtils.getElementsByTagName(editor.body, "table"), color;
        for (var i = 0, node; node = tableArr[i++];) {
            var td = domUtils.getElementsByTagName(node, "td");
            if (td[0]) {
                if (flag) {
                    color = (td[0].style.borderColor).replace(/\s/g, "");
                    if (/(#ffffff)|(rgb\(255,255,255\))/ig.test(color))
                        domUtils.addClass(node, "noBorderTable")
                } else {
                    domUtils.removeClasses(node, "noBorderTable")
                }
            }

        }
    }

    function getTableWidth(editor, needIEHack, defaultValue) {
        var body = editor.body;
        return body.offsetWidth - (needIEHack ? parseInt(domUtils.getComputedStyle(body, 'margin-left'), 10) * 2 : 0) - defaultValue.tableBorder * 2 - (editor.options.offsetWidth || 0);
    }

    /**
     * 获取当前拖动的单元格
     */
    function getTargetTd(editor, evt) {

        var target = domUtils.findParentByTagName(evt.target || evt.srcElement, ["td", "th"], true),
            dir = null;

        if( !target ) {
            return null;
        }

        dir = getRelation( target, mouseCoords( evt ) );

        //如果有前一个节点， 需要做一个修正， 否则可能会得到一个错误的td

        if( !target ) {
            return null;
        }

        if( dir === 'h1' && target.previousSibling ) {

            var position = domUtils.getXY( target),
                cellWidth = target.offsetWidth;

            if( Math.abs( position.x + cellWidth - evt.clientX ) > cellWidth / 3 ) {
                target = target.previousSibling;
            }

        } else if( dir === 'v1' && target.parentNode.previousSibling ) {

            var position = domUtils.getXY( target),
                cellHeight = target.offsetHeight;

            if( Math.abs( position.y + cellHeight - evt.clientY ) > cellHeight / 3 ) {
                target = target.parentNode.previousSibling.firstChild;
            }

        }


        //排除了非td内部以及用于代码高亮部分的td
        return target && !(editor.fireEvent("excludetable", target) === true) ? target : null;
    }

};


// plugins/table.sort.js
/**
 * Created with JetBrains PhpStorm.
 * User: Jinqn
 * Date: 13-10-12
 * Time: 上午10:20
 * To change this template use File | Settings | File Templates.
 */

UE.UETable.prototype.sortTable = function (sortByCellIndex, compareFn) {
    var table = this.table,
        rows = table.rows,
        trArray = [],
        flag = rows[0].cells[0].tagName === "TH",
        lastRowIndex = 0;
    if(this.selectedTds.length){
        var range = this.cellsRange,
            len = range.endRowIndex + 1;
        for (var i = range.beginRowIndex; i < len; i++) {
            trArray[i] = rows[i];
        }
        trArray.splice(0,range.beginRowIndex);
        lastRowIndex = (range.endRowIndex +1) === this.rowsNum ? 0 : range.endRowIndex +1;
    }else{
        for (var i = 0,len = rows.length; i < len; i++) {
            trArray[i] = rows[i];
        }
    }

    var Fn = {
        'reversecurrent': function(td1,td2){
            return 1;
        },
        'orderbyasc': function(td1,td2){
            var value1 = td1.innerText||td1.textContent,
                value2 = td2.innerText||td2.textContent;
            return value1.localeCompare(value2);
        },
        'reversebyasc': function(td1,td2){
            var value1 = td1.innerHTML,
                value2 = td2.innerHTML;
            return value2.localeCompare(value1);
        },
        'orderbynum': function(td1,td2){
            var value1 = td1[browser.ie ? 'innerText':'textContent'].match(/\d+/),
                value2 = td2[browser.ie ? 'innerText':'textContent'].match(/\d+/);
            if(value1) value1 = +value1[0];
            if(value2) value2 = +value2[0];
            return (value1||0) - (value2||0);
        },
        'reversebynum': function(td1,td2){
            var value1 = td1[browser.ie ? 'innerText':'textContent'].match(/\d+/),
                value2 = td2[browser.ie ? 'innerText':'textContent'].match(/\d+/);
            if(value1) value1 = +value1[0];
            if(value2) value2 = +value2[0];
            return (value2||0) - (value1||0);
        }
    };

    //对表格设置排序的标记data-sort-type
    table.setAttribute('data-sort-type', compareFn && typeof compareFn === "string" && Fn[compareFn] ? compareFn:'');

    //th不参与排序
    flag && trArray.splice(0, 1);
    trArray = utils.sort(trArray,function (tr1, tr2) {
        var result;
        if (compareFn && typeof compareFn === "function") {
            result = compareFn.call(this, tr1.cells[sortByCellIndex], tr2.cells[sortByCellIndex]);
        } else if (compareFn && typeof compareFn === "number") {
            result = 1;
        } else if (compareFn && typeof compareFn === "string" && Fn[compareFn]) {
            result = Fn[compareFn].call(this, tr1.cells[sortByCellIndex], tr2.cells[sortByCellIndex]);
        } else {
            result = Fn['orderbyasc'].call(this, tr1.cells[sortByCellIndex], tr2.cells[sortByCellIndex]);
        }
        return result;
    });
    var fragment = table.ownerDocument.createDocumentFragment();
    for (var j = 0, len = trArray.length; j < len; j++) {
        fragment.appendChild(trArray[j]);
    }
    var tbody = table.getElementsByTagName("tbody")[0];
    if(!lastRowIndex){
        tbody.appendChild(fragment);
    }else{
        tbody.insertBefore(fragment,rows[lastRowIndex- range.endRowIndex + range.beginRowIndex - 1])
    }
};

UE.plugins['tablesort'] = function () {
    var me = this,
        UT = UE.UETable,
        getUETable = function (tdOrTable) {
            return UT.getUETable(tdOrTable);
        },
        getTableItemsByRange = function (editor) {
            return UT.getTableItemsByRange(editor);
        };


    me.ready(function () {
        //添加表格可排序的样式
        utils.cssRule('tablesort',
            'table.sortEnabled tr.firstRow th,table.sortEnabled tr.firstRow td{padding-right:20px;background-repeat: no-repeat;background-position: center right;' +
                '   background-image:url(' + me.options.themePath + me.options.theme + '/images/sortable.png);}',
            me.document);

        //做单元格合并操作时,清除可排序标识
        me.addListener("afterexeccommand", function (type, cmd) {
            if( cmd == 'mergeright' || cmd == 'mergedown' || cmd == 'mergecells') {
                this.execCommand('disablesort');
            }
        });
    });



    //表格排序
    UE.commands['sorttable'] = {
        queryCommandState: function () {
            var me = this,
                tableItems = getTableItemsByRange(me);
            if (!tableItems.cell) return -1;
            var table = tableItems.table,
                cells = table.getElementsByTagName("td");
            for (var i = 0, cell; cell = cells[i++];) {
                if (cell.rowSpan != 1 || cell.colSpan != 1) return -1;
            }
            return 0;
        },
        execCommand: function (cmd, fn) {
            var me = this,
                range = me.selection.getRange(),
                bk = range.createBookmark(true),
                tableItems = getTableItemsByRange(me),
                cell = tableItems.cell,
                ut = getUETable(tableItems.table),
                cellInfo = ut.getCellInfo(cell);
            ut.sortTable(cellInfo.cellIndex, fn);
            range.moveToBookmark(bk);
            try{
                range.select();
            }catch(e){}
        }
    };

    //设置表格可排序,清除表格可排序
    UE.commands["enablesort"] = UE.commands["disablesort"] = {
        queryCommandState: function (cmd) {
            var table = getTableItemsByRange(this).table;
            if(table && cmd=='enablesort') {
                var cells = domUtils.getElementsByTagName(table, 'th td');
                for(var i = 0; i<cells.length; i++) {
                    if(cells[i].getAttribute('colspan')>1 || cells[i].getAttribute('rowspan')>1) return -1;
                }
            }

            return !table ? -1: cmd=='enablesort' ^ table.getAttribute('data-sort')!='sortEnabled' ? -1:0;
        },
        execCommand: function (cmd) {
            var table = getTableItemsByRange(this).table;
            table.setAttribute("data-sort", cmd == "enablesort" ? "sortEnabled" : "sortDisabled");
            cmd == "enablesort" ? domUtils.addClass(table,"sortEnabled"):domUtils.removeClasses(table,"sortEnabled");
        }
    };
};


// plugins/contextmenu.js
///import core
///commands 右键菜单
///commandsName  ContextMenu
///commandsTitle  右键菜单
/**
 * 右键菜单
 * @function
 * @name baidu.editor.plugins.contextmenu
 * @author zhanyi
 */

UE.plugins['contextmenu'] = function () {
    var me = this;
    me.setOpt('enableContextMenu',true);
    if(me.getOpt('enableContextMenu') === false){
        return;
    }
    var lang = me.getLang( "contextMenu" ),
            menu,
            items = me.options.contextMenu || [
                {label:lang['selectall'], cmdName:'selectall'},
                {
                    label:lang.cleardoc,
                    cmdName:'cleardoc',
                    exec:function () {
                        if ( confirm( lang.confirmclear ) ) {
                            this.execCommand( 'cleardoc' );
                        }
                    }
                },
                '-',
                {
                    label:lang.unlink,
                    cmdName:'unlink'
                },
                '-',
                {
                    group:lang.paragraph,
                    icon:'justifyjustify',
                    subMenu:[
                        {
                            label:lang.justifyleft,
                            cmdName:'justify',
                            value:'left'
                        },
                        {
                            label:lang.justifyright,
                            cmdName:'justify',
                            value:'right'
                        },
                        {
                            label:lang.justifycenter,
                            cmdName:'justify',
                            value:'center'
                        },
                        {
                            label:lang.justifyjustify,
                            cmdName:'justify',
                            value:'justify'
                        }
                    ]
                },
                '-',
                {
                    group:lang.table,
                    icon:'table',
                    subMenu:[
                        {
                            label:lang.inserttable,
                            cmdName:'inserttable'
                        },
                        {
                            label:lang.deletetable,
                            cmdName:'deletetable'
                        },
                        '-',
                        {
                            label:lang.deleterow,
                            cmdName:'deleterow'
                        },
                        {
                            label:lang.deletecol,
                            cmdName:'deletecol'
                        },
                        {
                            label:lang.insertcol,
                            cmdName:'insertcol'
                        },
                        {
                            label:lang.insertcolnext,
                            cmdName:'insertcolnext'
                        },
                        {
                            label:lang.insertrow,
                            cmdName:'insertrow'
                        },
                        {
                            label:lang.insertrownext,
                            cmdName:'insertrownext'
                        },
                        '-',
                        {
                            label:lang.insertcaption,
                            cmdName:'insertcaption'
                        },
                        {
                            label:lang.deletecaption,
                            cmdName:'deletecaption'
                        },
                        {
                            label:lang.inserttitle,
                            cmdName:'inserttitle'
                        },
                        {
                            label:lang.deletetitle,
                            cmdName:'deletetitle'
                        },
                        {
                            label:lang.inserttitlecol,
                            cmdName:'inserttitlecol'
                        },
                        {
                            label:lang.deletetitlecol,
                            cmdName:'deletetitlecol'
                        },
                        '-',
                        {
                            label:lang.mergecells,
                            cmdName:'mergecells'
                        },
                        {
                            label:lang.mergeright,
                            cmdName:'mergeright'
                        },
                        {
                            label:lang.mergedown,
                            cmdName:'mergedown'
                        },
                        '-',
                        {
                            label:lang.splittorows,
                            cmdName:'splittorows'
                        },
                        {
                            label:lang.splittocols,
                            cmdName:'splittocols'
                        },
                        {
                            label:lang.splittocells,
                            cmdName:'splittocells'
                        },
                        '-',
                        {
                            label:lang.averageDiseRow,
                            cmdName:'averagedistributerow'
                        },
                        {
                            label:lang.averageDisCol,
                            cmdName:'averagedistributecol'
                        },
                        '-',
                        {
                            label:lang.edittd,
                            cmdName:'edittd',
                            exec:function () {
                                if ( UE.ui['edittd'] ) {
                                    new UE.ui['edittd']( this );
                                }
                                this.getDialog('edittd').open();
                            }
                        },
                        {
                            label:lang.edittable,
                            cmdName:'edittable',
                            exec:function () {
                                if ( UE.ui['edittable'] ) {
                                    new UE.ui['edittable']( this );
                                }
                                this.getDialog('edittable').open();
                            }
                        },
                        {
                            label:lang.setbordervisible,
                            cmdName:'setbordervisible'
                        }
                    ]
                },
                {
                    group:lang.tablesort,
                    icon:'tablesort',
                    subMenu:[
                        {
                            label:lang.enablesort,
                            cmdName:'enablesort'
                        },
                        {
                            label:lang.disablesort,
                            cmdName:'disablesort'
                        },
                        '-',
                        {
                            label:lang.reversecurrent,
                            cmdName:'sorttable',
                            value:'reversecurrent'
                        },
                        {
                            label:lang.orderbyasc,
                            cmdName:'sorttable',
                            value:'orderbyasc'
                        },
                        {
                            label:lang.reversebyasc,
                            cmdName:'sorttable',
                            value:'reversebyasc'
                        },
                        {
                            label:lang.orderbynum,
                            cmdName:'sorttable',
                            value:'orderbynum'
                        },
                        {
                            label:lang.reversebynum,
                            cmdName:'sorttable',
                            value:'reversebynum'
                        }
                    ]
                },
                {
                    group:lang.borderbk,
                    icon:'borderBack',
                    subMenu:[
                        {
                            label:lang.setcolor,
                            cmdName:"interlacetable",
                            exec:function(){
                                this.execCommand("interlacetable");
                            }
                        },
                        {
                            label:lang.unsetcolor,
                            cmdName:"uninterlacetable",
                            exec:function(){
                                this.execCommand("uninterlacetable");
                            }
                        },
                        {
                            label:lang.setbackground,
                            cmdName:"settablebackground",
                            exec:function(){
                                this.execCommand("settablebackground",{repeat:true,colorList:["#bbb","#ccc"]});
                            }
                        },
                        {
                            label:lang.unsetbackground,
                            cmdName:"cleartablebackground",
                            exec:function(){
                                this.execCommand("cleartablebackground");
                            }
                        },
                        {
                            label:lang.redandblue,
                            cmdName:"settablebackground",
                            exec:function(){
                                this.execCommand("settablebackground",{repeat:true,colorList:["red","blue"]});
                            }
                        },
                        {
                            label:lang.threecolorgradient,
                            cmdName:"settablebackground",
                            exec:function(){
                                this.execCommand("settablebackground",{repeat:true,colorList:["#aaa","#bbb","#ccc"]});
                            }
                        }
                    ]
                },
                {
                    group:lang.aligntd,
                    icon:'aligntd',
                    subMenu:[
                        {
                            cmdName:'cellalignment',
                            value:{align:'left',vAlign:'top'}
                        },
                        {
                            cmdName:'cellalignment',
                            value:{align:'center',vAlign:'top'}
                        },
                        {
                            cmdName:'cellalignment',
                            value:{align:'right',vAlign:'top'}
                        },
                        {
                            cmdName:'cellalignment',
                            value:{align:'left',vAlign:'middle'}
                        },
                        {
                            cmdName:'cellalignment',
                            value:{align:'center',vAlign:'middle'}
                        },
                        {
                            cmdName:'cellalignment',
                            value:{align:'right',vAlign:'middle'}
                        },
                        {
                            cmdName:'cellalignment',
                            value:{align:'left',vAlign:'bottom'}
                        },
                        {
                            cmdName:'cellalignment',
                            value:{align:'center',vAlign:'bottom'}
                        },
                        {
                            cmdName:'cellalignment',
                            value:{align:'right',vAlign:'bottom'}
                        }
                    ]
                },
                {
                    group:lang.aligntable,
                    icon:'aligntable',
                    subMenu:[
                        {
                            cmdName:'tablealignment',
                            className: 'left',
                            label:lang.tableleft,
                            value:"left"
                        },
                        {
                            cmdName:'tablealignment',
                            className: 'center',
                            label:lang.tablecenter,
                            value:"center"
                        },
                        {
                            cmdName:'tablealignment',
                            className: 'right',
                            label:lang.tableright,
                            value:"right"
                        }
                    ]
                },
                '-',
                {
                    label:lang.insertparagraphbefore,
                    cmdName:'insertparagraph',
                    value:true
                },
                {
                    label:lang.insertparagraphafter,
                    cmdName:'insertparagraph'
                },
                {
                    label:lang['copy'],
                    cmdName:'copy'
                },
                {
                    label:lang['paste'],
                    cmdName:'paste'
                }
            ];
    if ( !items.length ) {
        return;
    }
    var uiUtils = UE.ui.uiUtils;

    me.addListener( 'contextmenu', function ( type, evt ) {

        var offset = uiUtils.getViewportOffsetByEvent( evt );
        me.fireEvent( 'beforeselectionchange' );
        if ( menu ) {
            menu.destroy();
        }
        for ( var i = 0, ti, contextItems = []; ti = items[i]; i++ ) {
            var last;
            (function ( item ) {
                if ( item == '-' ) {
                    if ( (last = contextItems[contextItems.length - 1 ] ) && last !== '-' ) {
                        contextItems.push( '-' );
                    }
                } else if ( item.hasOwnProperty( "group" ) ) {
                    for ( var j = 0, cj, subMenu = []; cj = item.subMenu[j]; j++ ) {
                        (function ( subItem ) {
                            if ( subItem == '-' ) {
                                if ( (last = subMenu[subMenu.length - 1 ] ) && last !== '-' ) {
                                    subMenu.push( '-' );
                                }else{
                                    subMenu.splice(subMenu.length-1);
                                }
                            } else {
                                if ( (me.commands[subItem.cmdName] || UE.commands[subItem.cmdName] || subItem.query) &&
                                        (subItem.query ? subItem.query() : me.queryCommandState( subItem.cmdName )) > -1 ) {
                                    subMenu.push( {
                                        'label':subItem.label || me.getLang( "contextMenu." + subItem.cmdName + (subItem.value || '') )||"",
                                        'className':'edui-for-' +subItem.cmdName + ( subItem.className ? ( ' edui-for-' + subItem.cmdName + '-' + subItem.className ) : '' ),
                                        onclick:subItem.exec ? function () {
                                                subItem.exec.call( me );
                                        } : function () {
                                            me.execCommand( subItem.cmdName, subItem.value );
                                        }
                                    } );
                                }
                            }
                        })( cj );
                    }
                    if ( subMenu.length ) {
                        function getLabel(){
                            switch (item.icon){
                                case "table":
                                    return me.getLang( "contextMenu.table" );
                                case "justifyjustify":
                                    return me.getLang( "contextMenu.paragraph" );
                                case "aligntd":
                                    return me.getLang("contextMenu.aligntd");
                                case "aligntable":
                                    return me.getLang("contextMenu.aligntable");
                                case "tablesort":
                                    return lang.tablesort;
                                case "borderBack":
                                    return lang.borderbk;
                                default :
                                    return '';
                            }
                        }
                        contextItems.push( {
                            //todo 修正成自动获取方式
                            'label':getLabel(),
                            className:'edui-for-' + item.icon,
                            'subMenu':{
                                items:subMenu,
                                editor:me
                            }
                        } );
                    }

                } else {
                    //有可能commmand没有加载右键不能出来，或者没有command也想能展示出来添加query方法
                    if ( (me.commands[item.cmdName] || UE.commands[item.cmdName] || item.query) &&
                            (item.query ? item.query.call(me) : me.queryCommandState( item.cmdName )) > -1 ) {

                        contextItems.push( {
                            'label':item.label || me.getLang( "contextMenu." + item.cmdName ),
                            className:'edui-for-' + (item.icon ? item.icon : item.cmdName + (item.value || '')),
                            onclick:item.exec ? function () {
                                item.exec.call( me );
                            } : function () {
                                me.execCommand( item.cmdName, item.value );
                            }
                        } );
                    }

                }

            })( ti );
        }
        if ( contextItems[contextItems.length - 1] == '-' ) {
            contextItems.pop();
        }

        menu = new UE.ui.Menu( {
            items:contextItems,
            className:"edui-contextmenu",
            editor:me
        } );
        menu.render();
        menu.showAt( offset );

        me.fireEvent("aftershowcontextmenu",menu);

        domUtils.preventDefault( evt );
        if ( browser.ie ) {
            var ieRange;
            try {
                ieRange = me.selection.getNative().createRange();
            } catch ( e ) {
                return;
            }
            if ( ieRange.item ) {
                var range = new dom.Range( me.document );
                range.selectNode( ieRange.item( 0 ) ).select( true, true );
            }
        }
    });

    // 添加复制的flash按钮
    me.addListener('aftershowcontextmenu', function(type, menu) {
        if (me.zeroclipboard) {
            var items = menu.items;
            for (var key in items) {
                if (items[key].className == 'edui-for-copy') {
                    me.zeroclipboard.clip(items[key].getDom());
                }
            }
        }
    });

};


// plugins/shortcutmenu.js
///import core
///commands       弹出菜单
// commandsName  popupmenu
///commandsTitle  弹出菜单
/**
 * 弹出菜单
 * @function
 * @name baidu.editor.plugins.popupmenu
 * @author xuheng
 */

UE.plugins['shortcutmenu'] = function () {
    var me = this,
        menu,
        items = me.options.shortcutMenu || [];

    if (!items.length) {
        return;
    }

    me.addListener ('contextmenu mouseup' , function (type , e) {
        var me = this,
            customEvt = {
                type : type ,
                target : e.target || e.srcElement ,
                screenX : e.screenX ,
                screenY : e.screenY ,
                clientX : e.clientX ,
                clientY : e.clientY
            };

        setTimeout (function () {
            var rng = me.selection.getRange ();
            if (rng.collapsed === false || type == "contextmenu") {

                if (!menu) {
                    menu = new baidu.editor.ui.ShortCutMenu ({
                        editor : me ,
                        items : items ,
                        theme : me.options.theme ,
                        className : 'edui-shortcutmenu'
                    });

                    menu.render ();
                    me.fireEvent ("afterrendershortcutmenu" , menu);
                }

                menu.show (customEvt , !!UE.plugins['contextmenu']);
            }
        });

        if (type == 'contextmenu') {
            domUtils.preventDefault (e);
            if (browser.ie9below) {
                var ieRange;
                try {
                    ieRange = me.selection.getNative().createRange();
                } catch (e) {
                    return;
                }
                if (ieRange.item) {
                    var range = new dom.Range (me.document);
                    range.selectNode (ieRange.item (0)).select (true , true);

                }
            }
        }
    });

    me.addListener ('keydown' , function (type) {
        if (type == "keydown") {
            menu && !menu.isHidden && menu.hide ();
        }

    });

};




// plugins/basestyle.js
/**
 * B、I、sub、super命令支持
 * @file
 * @since 1.2.6.1
 */

UE.plugins['basestyle'] = function(){

    /**
     * 字体加粗
     * @command bold
     * @param { String } cmd 命令字符串
     * @remind 对已加粗的文本内容执行该命令， 将取消加粗
     * @method execCommand
     * @example
     * ```javascript
     * //editor是编辑器实例
     * //对当前选中的文本内容执行加粗操作
     * //第一次执行， 文本内容加粗
     * editor.execCommand( 'bold' );
     *
     * //第二次执行， 文本内容取消加粗
     * editor.execCommand( 'bold' );
     * ```
     */


    /**
     * 字体倾斜
     * @command italic
     * @method execCommand
     * @param { String } cmd 命令字符串
     * @remind 对已倾斜的文本内容执行该命令， 将取消倾斜
     * @example
     * ```javascript
     * //editor是编辑器实例
     * //对当前选中的文本内容执行斜体操作
     * //第一次操作， 文本内容将变成斜体
     * editor.execCommand( 'italic' );
     *
     * //再次对同一文本内容执行， 则文本内容将恢复正常
     * editor.execCommand( 'italic' );
     * ```
     */

    /**
     * 下标文本，与“superscript”命令互斥
     * @command subscript
     * @method execCommand
     * @remind  把选中的文本内容切换成下标文本， 如果当前选中的文本已经是下标， 则该操作会把文本内容还原成正常文本
     * @param { String } cmd 命令字符串
     * @example
     * ```javascript
     * //editor是编辑器实例
     * //对当前选中的文本内容执行下标操作
     * //第一次操作， 文本内容将变成下标文本
     * editor.execCommand( 'subscript' );
     *
     * //再次对同一文本内容执行， 则文本内容将恢复正常
     * editor.execCommand( 'subscript' );
     * ```
     */

    /**
     * 上标文本，与“subscript”命令互斥
     * @command superscript
     * @method execCommand
     * @remind 把选中的文本内容切换成上标文本， 如果当前选中的文本已经是上标， 则该操作会把文本内容还原成正常文本
     * @param { String } cmd 命令字符串
     * @example
     * ```javascript
     * //editor是编辑器实例
     * //对当前选中的文本内容执行上标操作
     * //第一次操作， 文本内容将变成上标文本
     * editor.execCommand( 'superscript' );
     *
     * //再次对同一文本内容执行， 则文本内容将恢复正常
     * editor.execCommand( 'superscript' );
     * ```
     */
    var basestyles = {
            'bold':['strong','b'],
            'italic':['em','i'],
            'subscript':['sub'],
            'superscript':['sup']
        },
        getObj = function(editor,tagNames){
            return domUtils.filterNodeList(editor.selection.getStartElementPath(),tagNames);
        },
        me = this;
    //添加快捷键
    me.addshortcutkey({
        "Bold" : "ctrl+66",//^B
        "Italic" : "ctrl+73", //^I
        "Underline" : "ctrl+85"//^U
    });
    me.addInputRule(function(root){
        utils.each(root.getNodesByTagName('b i'),function(node){
            switch (node.tagName){
                case 'b':
                    node.tagName = 'strong';
                    break;
                case 'i':
                    node.tagName = 'em';
            }
        });
    });
    for ( var style in basestyles ) {
        (function( cmd, tagNames ) {
            me.commands[cmd] = {
                execCommand : function( cmdName ) {
                    var range = me.selection.getRange(),obj = getObj(this,tagNames);
                    if ( range.collapsed ) {
                        if ( obj ) {
                            var tmpText =  me.document.createTextNode('');
                            range.insertNode( tmpText ).removeInlineStyle( tagNames );
                            range.setStartBefore(tmpText);
                            domUtils.remove(tmpText);
                        } else {
                            var tmpNode = range.document.createElement( tagNames[0] );
                            if(cmdName == 'superscript' || cmdName == 'subscript'){
                                tmpText = me.document.createTextNode('');
                                range.insertNode(tmpText)
                                    .removeInlineStyle(['sub','sup'])
                                    .setStartBefore(tmpText)
                                    .collapse(true);
                            }
                            range.insertNode( tmpNode ).setStart( tmpNode, 0 );
                        }
                        range.collapse( true );
                    } else {
                        if(cmdName == 'superscript' || cmdName == 'subscript'){
                            if(!obj || obj.tagName.toLowerCase() != cmdName){
                                range.removeInlineStyle(['sub','sup']);
                            }
                        }
                        obj ? range.removeInlineStyle( tagNames ) : range.applyInlineStyle( tagNames[0] );
                    }
                    range.select();
                },
                queryCommandState : function() {
                   return getObj(this,tagNames) ? 1 : 0;
                }
            };
        })( style, basestyles[style] );
    }
};



// plugins/elementpath.js
/**
 * 选取路径命令
 * @file
 */
UE.plugins['elementpath'] = function(){
    var currentLevel,
        tagNames,
        me = this;
    me.setOpt('elementPathEnabled',true);
    if(!me.options.elementPathEnabled){
        return;
    }
    me.commands['elementpath'] = {
        execCommand : function( cmdName, level ) {
            var start = tagNames[level],
                range = me.selection.getRange();
            currentLevel = level*1;
            range.selectNode(start).select();
        },
        queryCommandValue : function() {
            //产生一个副本，不能修改原来的startElementPath;
            var parents = [].concat(this.selection.getStartElementPath()).reverse(),
                names = [];
            tagNames = parents;
            for(var i=0,ci;ci=parents[i];i++){
                if(ci.nodeType == 3) {
                    continue;
                }
                var name = ci.tagName.toLowerCase();
                if(name == 'img' && ci.getAttribute('anchorname')){
                    name = 'anchor';
                }
                names[i] = name;
                if(currentLevel == i){
                   currentLevel = -1;
                    break;
                }
            }
            return names;
        }
    };
};



// plugins/formatmatch.js
/**
 * 格式刷，只格式inline的
 * @file
 * @since 1.2.6.1
 */

/**
 * 格式刷
 * @command formatmatch
 * @method execCommand
 * @remind 该操作不能复制段落格式
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * //editor是编辑器实例
 * //获取格式刷
 * editor.execCommand( 'formatmatch' );
 * ```
 */
UE.plugins['formatmatch'] = function(){

    var me = this,
        list = [],img,
        flag = 0;

     me.addListener('reset',function(){
         list = [];
         flag = 0;
     });

    function addList(type,evt){
        
        if(browser.webkit){
            var target = evt.target.tagName == 'IMG' ? evt.target : null;
        }

        function addFormat(range){

            if(text){
                range.selectNode(text);
            }
            return range.applyInlineStyle(list[list.length-1].tagName,null,list);

        }

        me.undoManger && me.undoManger.save();

        var range = me.selection.getRange(),
            imgT = target || range.getClosedNode();
        if(img && imgT && imgT.tagName == 'IMG'){
            //trace:964

            imgT.style.cssText += ';float:' + (img.style.cssFloat || img.style.styleFloat ||'none') + ';display:' + (img.style.display||'inline');

            img = null;
        }else{
            if(!img){
                var collapsed = range.collapsed;
                if(collapsed){
                    var text = me.document.createTextNode('match');
                    range.insertNode(text).select();


                }
                me.__hasEnterExecCommand = true;
                //不能把block上的属性干掉
                //trace:1553
                var removeFormatAttributes = me.options.removeFormatAttributes;
                me.options.removeFormatAttributes = '';
                me.execCommand('removeformat');
                me.options.removeFormatAttributes = removeFormatAttributes;
                me.__hasEnterExecCommand = false;
                //trace:969
                range = me.selection.getRange();
                if(list.length){
                    addFormat(range);
                }
                if(text){
                    range.setStartBefore(text).collapse(true);

                }
                range.select();
                text && domUtils.remove(text);
            }

        }




        me.undoManger && me.undoManger.save();
        me.removeListener('mouseup',addList);
        flag = 0;
    }

    me.commands['formatmatch'] = {
        execCommand : function( cmdName ) {
          
            if(flag){
                flag = 0;
                list = [];
                 me.removeListener('mouseup',addList);
                return;
            }


              
            var range = me.selection.getRange();
            img = range.getClosedNode();
            if(!img || img.tagName != 'IMG'){
               range.collapse(true).shrinkBoundary();
               var start = range.startContainer;
               list = domUtils.findParents(start,true,function(node){
                   return !domUtils.isBlockElm(node) && node.nodeType == 1;
               });
               //a不能加入格式刷, 并且克隆节点
               for(var i=0,ci;ci=list[i];i++){
                   if(ci.tagName == 'A'){
                       list.splice(i,1);
                       break;
                   }
               }

            }

            me.addListener('mouseup',addList);
            flag = 1;


        },
        queryCommandState : function() {
            return flag;
        },
        notNeedUndo : 1
    };
};



// plugins/searchreplace.js
///import core
///commands 查找替换
///commandsName  SearchReplace
///commandsTitle  查询替换
///commandsDialog  dialogs\searchreplace
/**
 * @description 查找替换
 * @author zhanyi
 */

UE.plugin.register('searchreplace',function(){
    var me = this;

    var _blockElm = {'table':1,'tbody':1,'tr':1,'ol':1,'ul':1};

    function findTextInString(textContent,opt,currentIndex){
        var str = opt.searchStr;
        if(opt.dir == -1){
            textContent = textContent.split('').reverse().join('');
            str = str.split('').reverse().join('');
            currentIndex = textContent.length - currentIndex;

        }
        var reg = new RegExp(str,'g' + (opt.casesensitive ? '' : 'i')),match;

        while(match = reg.exec(textContent)){
            if(match.index >= currentIndex){
                return opt.dir == -1 ? textContent.length - match.index - opt.searchStr.length : match.index;
            }
        }
        return  -1
    }
    function findTextBlockElm(node,currentIndex,opt){
        var textContent,index,methodName = opt.all || opt.dir == 1 ? 'getNextDomNode' : 'getPreDomNode';
        if(domUtils.isBody(node)){
            node = node.firstChild;
        }
        var first = 1;
        while(node){
            textContent = node.nodeType == 3 ? node.nodeValue : node[browser.ie ? 'innerText' : 'textContent'];
            index = findTextInString(textContent,opt,currentIndex );
            first = 0;
            if(index!=-1){
                return {
                    'node':node,
                    'index':index
                }
            }
            node = domUtils[methodName](node);
            while(node && _blockElm[node.nodeName.toLowerCase()]){
                node = domUtils[methodName](node,true);
            }
            if(node){
                currentIndex = opt.dir == -1 ? (node.nodeType == 3 ? node.nodeValue : node[browser.ie ? 'innerText' : 'textContent']).length : 0;
            }

        }
    }
    function findNTextInBlockElm(node,index,str){
        var currentIndex = 0,
            currentNode = node.firstChild,
            currentNodeLength = 0,
            result;
        while(currentNode){
            if(currentNode.nodeType == 3){
                currentNodeLength = currentNode.nodeValue.replace(/(^[\t\r\n]+)|([\t\r\n]+$)/,'').length;
                currentIndex += currentNodeLength;
                if(currentIndex >= index){
                    return {
                        'node':currentNode,
                        'index': currentNodeLength - (currentIndex - index)
                    }
                }
            }else if(!dtd.$empty[currentNode.tagName]){
                currentNodeLength = currentNode[browser.ie ? 'innerText' : 'textContent'].replace(/(^[\t\r\n]+)|([\t\r\n]+$)/,'').length
                currentIndex += currentNodeLength;
                if(currentIndex >= index){
                    result = findNTextInBlockElm(currentNode,currentNodeLength - (currentIndex - index),str);
                    if(result){
                        return result;
                    }
                }
            }
            currentNode = domUtils.getNextDomNode(currentNode);

        }
    }

    function searchReplace(me,opt){

        var rng = me.selection.getRange(),
            startBlockNode,
            searchStr = opt.searchStr,
            span = me.document.createElement('span');
        span.innerHTML = '$$ueditor_searchreplace_key$$';

        rng.shrinkBoundary(true);

        //判断是不是第一次选中
        if(!rng.collapsed){
            rng.select();
            var rngText = me.selection.getText();
            if(new RegExp('^' + opt.searchStr + '$',(opt.casesensitive ? '' : 'i')).test(rngText)){
                if(opt.replaceStr != undefined){
                    replaceText(rng,opt.replaceStr);
                    rng.select();
                    return true;
                }else{
                    rng.collapse(opt.dir == -1)
                }

            }
        }


        rng.insertNode(span);
        rng.enlargeToBlockElm(true);
        startBlockNode = rng.startContainer;
        var currentIndex = startBlockNode[browser.ie ? 'innerText' : 'textContent'].indexOf('$$ueditor_searchreplace_key$$');
        rng.setStartBefore(span);
        domUtils.remove(span);
        var result = findTextBlockElm(startBlockNode,currentIndex,opt);
        if(result){
            var rngStart = findNTextInBlockElm(result.node,result.index,searchStr);
            var rngEnd = findNTextInBlockElm(result.node,result.index + searchStr.length,searchStr);
            rng.setStart(rngStart.node,rngStart.index).setEnd(rngEnd.node,rngEnd.index);

            if(opt.replaceStr !== undefined){
                replaceText(rng,opt.replaceStr)
            }
            rng.select();
            return true;
        }else{
            rng.setCursor()
        }

    }
    function replaceText(rng,str){

        str = me.document.createTextNode(str);
        rng.deleteContents().insertNode(str);

    }
    return {
        commands:{
            'searchreplace':{
                execCommand:function(cmdName,opt){
                    utils.extend(opt,{
                        all : false,
                        casesensitive : false,
                        dir : 1
                    },true);
                    var num = 0;
                    if(opt.all){

                        var rng = me.selection.getRange(),
                            first = me.body.firstChild;
                        if(first && first.nodeType == 1){
                            rng.setStart(first,0);
                            rng.shrinkBoundary(true);
                        }else if(first.nodeType == 3){
                            rng.setStartBefore(first)
                        }
                        rng.collapse(true).select(true);
                        if(opt.replaceStr !== undefined){
                            me.fireEvent('saveScene');
                        }
                        while(searchReplace(this,opt)){
                            num++;
                        }
                        if(num){
                            me.fireEvent('saveScene');
                        }
                    }else{
                        if(opt.replaceStr !== undefined){
                            me.fireEvent('saveScene');
                        }
                        if(searchReplace(this,opt)){
                            num++
                        }
                        if(num){
                            me.fireEvent('saveScene');
                        }

                    }

                    return num;
                },
                notNeedUndo:1
            }
        }
    }
});

// plugins/customstyle.js
/**
 * 自定义样式
 * @file
 * @since 1.2.6.1
 */

/**
 * 根据config配置文件里“customstyle”选项的值对匹配的标签执行样式替换。
 * @command customstyle
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'customstyle' );
 * ```
 */
UE.plugins['customstyle'] = function() {
    var me = this;
    me.setOpt({ 'customstyle':[
        {tag:'h1',name:'tc', style:'font-size:32px;font-weight:bold;border-bottom:#ccc 2px solid;padding:0 4px 0 0;text-align:center;margin:0 0 20px 0;'},
        {tag:'h1',name:'tl', style:'font-size:32px;font-weight:bold;border-bottom:#ccc 2px solid;padding:0 4px 0 0;text-align:left;margin:0 0 10px 0;'},
        {tag:'span',name:'im', style:'font-size:16px;font-style:italic;font-weight:bold;line-height:18px;'},
        {tag:'span',name:'hi', style:'font-size:16px;font-style:italic;font-weight:bold;color:rgb(51, 153, 204);line-height:18px;'}
    ]});
    me.commands['customstyle'] = {
        execCommand : function(cmdName, obj) {
            var me = this,
                    tagName = obj.tag,
                    node = domUtils.findParent(me.selection.getStart(), function(node) {
                        return node.getAttribute('label');
                    }, true),
                    range,bk,tmpObj = {};
            for (var p in obj) {
               if(obj[p]!==undefined)
                    tmpObj[p] = obj[p];
            }
            delete tmpObj.tag;
            if (node && node.getAttribute('label') == obj.label) {
                range = this.selection.getRange();
                bk = range.createBookmark();
                if (range.collapsed) {
                    //trace:1732 删掉自定义标签，要有p来回填站位
                    if(dtd.$block[node.tagName]){
                        var fillNode = me.document.createElement('p');
                        domUtils.moveChild(node, fillNode);
                        node.parentNode.insertBefore(fillNode, node);
                        domUtils.remove(node);
                    }else{
                        domUtils.remove(node,true);
                    }

                } else {

                    var common = domUtils.getCommonAncestor(bk.start, bk.end),
                            nodes = domUtils.getElementsByTagName(common, tagName);
                    if(new RegExp(tagName,'i').test(common.tagName)){
                        nodes.push(common);
                    }
                    for (var i = 0,ni; ni = nodes[i++];) {
                        if (ni.getAttribute('label') == obj.label) {
                            var ps = domUtils.getPosition(ni, bk.start),pe = domUtils.getPosition(ni, bk.end);
                            if ((ps & domUtils.POSITION_FOLLOWING || ps & domUtils.POSITION_CONTAINS)
                                    &&
                                    (pe & domUtils.POSITION_PRECEDING || pe & domUtils.POSITION_CONTAINS)
                                    )
                                if (dtd.$block[tagName]) {
                                    var fillNode = me.document.createElement('p');
                                    domUtils.moveChild(ni, fillNode);
                                    ni.parentNode.insertBefore(fillNode, ni);
                                }
                            domUtils.remove(ni, true);
                        }
                    }
                    node = domUtils.findParent(common, function(node) {
                        return node.getAttribute('label') == obj.label;
                    }, true);
                    if (node) {

                        domUtils.remove(node, true);

                    }

                }
                range.moveToBookmark(bk).select();
            } else {
                if (dtd.$block[tagName]) {
                    this.execCommand('paragraph', tagName, tmpObj,'customstyle');
                    range = me.selection.getRange();
                    if (!range.collapsed) {
                        range.collapse();
                        node = domUtils.findParent(me.selection.getStart(), function(node) {
                            return node.getAttribute('label') == obj.label;
                        }, true);
                        var pNode = me.document.createElement('p');
                        domUtils.insertAfter(node, pNode);
                        domUtils.fillNode(me.document, pNode);
                        range.setStart(pNode, 0).setCursor();
                    }
                } else {

                    range = me.selection.getRange();
                    if (range.collapsed) {
                        node = me.document.createElement(tagName);
                        domUtils.setAttributes(node, tmpObj);
                        range.insertNode(node).setStart(node, 0).setCursor();

                        return;
                    }

                    bk = range.createBookmark();
                    range.applyInlineStyle(tagName, tmpObj).moveToBookmark(bk).select();
                }
            }

        },
        queryCommandValue : function() {
            var parent = domUtils.filterNodeList(
                this.selection.getStartElementPath(),
                function(node){return node.getAttribute('label')}
            );
            return  parent ? parent.getAttribute('label') : '';
        }
    };
    //当去掉customstyle是，如果是块元素，用p代替
    me.addListener('keyup', function(type, evt) {
        var keyCode = evt.keyCode || evt.which;

        if (keyCode == 32 || keyCode == 13) {
            var range = me.selection.getRange();
            if (range.collapsed) {
                var node = domUtils.findParent(me.selection.getStart(), function(node) {
                    return node.getAttribute('label');
                }, true);
                if (node && dtd.$block[node.tagName] && domUtils.isEmptyNode(node)) {
                        var p = me.document.createElement('p');
                        domUtils.insertAfter(node, p);
                        domUtils.fillNode(me.document, p);
                        domUtils.remove(node);
                        range.setStart(p, 0).setCursor();


                }
            }
        }
    });
};

// plugins/catchremoteimage.js
///import core
///commands 远程图片抓取
///commandsName  catchRemoteImage,catchremoteimageenable
///commandsTitle  远程图片抓取
/**
 * 远程图片抓取,当开启本插件时所有不符合本地域名的图片都将被抓取成为本地服务器上的图片
 */
UE.plugins['catchremoteimage'] = function () {
    var me = this,
        ajax = UE.ajax;

    /* 设置默认值 */
    if (me.options.catchRemoteImageEnable === false) return;
    me.setOpt({
        catchRemoteImageEnable: false
    });

    me.addListener("afterpaste", function () {
        me.fireEvent("catchRemoteImage");
    });

    me.addListener("catchRemoteImage", function () {

        var catcherLocalDomain = me.getOpt('catcherLocalDomain'),
            catcherActionUrl = me.getActionUrl(me.getOpt('catcherActionName')),
            catcherUrlPrefix = me.getOpt('catcherUrlPrefix'),
            catcherFieldName = me.getOpt('catcherFieldName');

        var remoteImages = [],
            imgs = domUtils.getElementsByTagName(me.document, "img"),
            test = function (src, urls) {
                if (src.indexOf(location.host) != -1 || /(^\.)|(^\/)/.test(src)) {
                    return true;
                }
                if (urls) {
                    for (var j = 0, url; url = urls[j++];) {
                        if (src.indexOf(url) !== -1) {
                            return true;
                        }
                    }
                }
                return false;
            };

        for (var i = 0, ci; ci = imgs[i++];) {
            if (ci.getAttribute("word_img")) {
                continue;
            }
            var src = ci.getAttribute("_src") || ci.src || "";
            if (/^(https?|ftp):/i.test(src) && !test(src, catcherLocalDomain)) {
                remoteImages.push(src);
            }
        }

        if (remoteImages.length) {
            catchremoteimage(remoteImages, {
                //成功抓取
                success: function (r) {
                    try {
                        var info = r.state !== undefined ? r:eval("(" + r.responseText + ")");
                    } catch (e) {
                        return;
                    }

                    /* 获取源路径和新路径 */
                    var i, j, ci, cj, oldSrc, newSrc, list = info.list;

                    for (i = 0; ci = imgs[i++];) {
                        oldSrc = ci.getAttribute("_src") || ci.src || "";
                        for (j = 0; cj = list[j++];) {
                            if (oldSrc == cj.source && cj.state == "SUCCESS") {  //抓取失败时不做替换处理
                                newSrc = catcherUrlPrefix + cj.url;
                                domUtils.setAttributes(ci, {
                                    "src": newSrc,
                                    "_src": newSrc
                                });
                                break;
                            }
                        }
                    }
                    me.fireEvent('catchremotesuccess')
                },
                //回调失败，本次请求超时
                error: function () {
                    me.fireEvent("catchremoteerror");
                }
            });
        }

        function catchremoteimage(imgs, callbacks) {
            var params = utils.serializeParam(me.queryCommandValue('serverparam')) || '',
                url = utils.formatUrl(catcherActionUrl + (catcherActionUrl.indexOf('?') == -1 ? '?':'&') + params),
                isJsonp = utils.isCrossDomainUrl(url),
                opt = {
                    'method': 'POST',
                    'dataType': isJsonp ? 'jsonp':'',
                    'timeout': 60000, //单位：毫秒，回调请求超时设置。目标用户如果网速不是很快的话此处建议设置一个较大的数值
                    'onsuccess': callbacks["success"],
                    'onerror': callbacks["error"]
                };
            opt[catcherFieldName] = imgs;
            ajax.request(url, opt);
        }

    });
};

// plugins/snapscreen.js
/**
 * 截屏插件，为UEditor提供插入支持
 * @file
 * @since 1.4.2
 */
UE.plugin.register('snapscreen', function (){

    var me = this;
    var snapplugin;

    function getLocation(url){
        var search,
            a = document.createElement('a'),
            params = utils.serializeParam(me.queryCommandValue('serverparam')) || '';

        a.href = url;
        if (browser.ie) {
            a.href = a.href;
        }


        search = a.search;
        if (params) {
            search = search + (search.indexOf('?') == -1 ? '?':'&')+ params;
            search = search.replace(/[&]+/ig, '&');
        }
        return {
            'port': a.port,
            'hostname': a.hostname,
            'path': a.pathname + search ||  + a.hash
        }
    }

    return {
        commands:{
            /**
             * 字体背景颜色
             * @command snapscreen
             * @method execCommand
             * @param { String } cmd 命令字符串
             * @example
             * ```javascript
             * editor.execCommand('snapscreen');
             * ```
             */
            'snapscreen':{
                execCommand:function (cmd) {
                    var url, local, res;
                    var lang = me.getLang("snapScreen_plugin");

                    if(!snapplugin){
                        var container = me.container;
                        var doc = me.container.ownerDocument || me.container.document;
                        snapplugin = doc.createElement("object");
                        try{snapplugin.type = "application/x-pluginbaidusnap";}catch(e){
                            return;
                        }
                        snapplugin.style.cssText = "position:absolute;left:-9999px;width:0;height:0;";
                        snapplugin.setAttribute("width","0");
                        snapplugin.setAttribute("height","0");
                        container.appendChild(snapplugin);
                    }

                    function onSuccess(rs){
                        try{
                            rs = eval("("+ rs +")");
                            if(rs.state == 'SUCCESS'){
                                var opt = me.options;
                                me.execCommand('insertimage', {
                                    src: opt.snapscreenUrlPrefix + rs.url,
                                    _src: opt.snapscreenUrlPrefix + rs.url,
                                    alt: rs.title || '',
                                    floatStyle: opt.snapscreenImgAlign
                                });
                            } else {
                                alert(rs.state);
                            }
                        }catch(e){
                            alert(lang.callBackErrorMsg);
                        }
                    }
                    url = me.getActionUrl(me.getOpt('snapscreenActionName'));
                    local = getLocation(url);
                    setTimeout(function () {
                        try{
                            res =snapplugin.saveSnapshot(local.hostname, local.path, local.port);
                        }catch(e){
                            me.ui._dialogs['snapscreenDialog'].open();
                            return;
                        }

                        onSuccess(res);
                    }, 50);
                },
                queryCommandState: function(){
                    return (navigator.userAgent.indexOf("Windows",0) != -1) ? 0:-1;
                }
            }
        }
    }
});


// plugins/insertparagraph.js
/**
 * 插入段落
 * @file
 * @since 1.2.6.1
 */


/**
 * 插入段落
 * @command insertparagraph
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * //editor是编辑器实例
 * editor.execCommand( 'insertparagraph' );
 * ```
 */

UE.commands['insertparagraph'] = {
    execCommand : function( cmdName,front) {
        var me = this,
            range = me.selection.getRange(),
            start = range.startContainer,tmpNode;
        while(start ){
            if(domUtils.isBody(start)){
                break;
            }
            tmpNode = start;
            start = start.parentNode;
        }
        if(tmpNode){
            var p = me.document.createElement('p');
            if(front){
                tmpNode.parentNode.insertBefore(p,tmpNode)
            }else{
                tmpNode.parentNode.insertBefore(p,tmpNode.nextSibling)
            }
            domUtils.fillNode(me.document,p);
            range.setStart(p,0).setCursor(false,true);
        }
    }
};



// plugins/webapp.js
/**
 * 百度应用
 * @file
 * @since 1.2.6.1
 */


/**
 * 插入百度应用
 * @command webapp
 * @method execCommand
 * @remind 需要百度APPKey
 * @remind 百度应用主页： <a href="http://app.baidu.com/" target="_blank">http://app.baidu.com/</a>
 * @param { Object } appOptions 应用所需的参数项， 支持的key有： title=>应用标题， width=>应用容器宽度，
 * height=>应用容器高度，logo=>应用logo，url=>应用地址
 * @example
 * ```javascript
 * //editor是编辑器实例
 * //在编辑器里插入一个“植物大战僵尸”的APP
 * editor.execCommand( 'webapp' , {
 *     title: '植物大战僵尸',
 *     width: 560,
 *     height: 465,
 *     logo: '应用展示的图片',
 *     url: '百度应用的地址'
 * } );
 * ```
 */

//UE.plugins['webapp'] = function () {
//    var me = this;
//    function createInsertStr( obj, toIframe, addParagraph ) {
//        return !toIframe ?
//                (addParagraph ? '<p>' : '') + '<img title="'+obj.title+'" width="' + obj.width + '" height="' + obj.height + '"' +
//                        ' src="' + me.options.UEDITOR_HOME_URL + 'themes/default/images/spacer.gif" style="background:url(' + obj.logo+') no-repeat center center; border:1px solid gray;" class="edui-faked-webapp" _url="' + obj.url + '" />' +
//                        (addParagraph ? '</p>' : '')
//                :
//                '<iframe class="edui-faked-webapp" title="'+obj.title+'" width="' + obj.width + '" height="' + obj.height + '"  scrolling="no" frameborder="0" src="' + obj.url + '" logo_url = '+obj.logo+'></iframe>';
//    }
//
//    function switchImgAndIframe( img2frame ) {
//        var tmpdiv,
//                nodes = domUtils.getElementsByTagName( me.document, !img2frame ? "iframe" : "img" );
//        for ( var i = 0, node; node = nodes[i++]; ) {
//            if ( node.className != "edui-faked-webapp" ){
//                continue;
//            }
//            tmpdiv = me.document.createElement( "div" );
//            tmpdiv.innerHTML = createInsertStr( img2frame ? {url:node.getAttribute( "_url" ), width:node.width, height:node.height,title:node.title,logo:node.style.backgroundImage.replace("url(","").replace(")","")} : {url:node.getAttribute( "src", 2 ),title:node.title, width:node.width, height:node.height,logo:node.getAttribute("logo_url")}, img2frame ? true : false,false );
//            node.parentNode.replaceChild( tmpdiv.firstChild, node );
//        }
//    }
//
//    me.addListener( "beforegetcontent", function () {
//        switchImgAndIframe( true );
//    } );
//    me.addListener( 'aftersetcontent', function () {
//        switchImgAndIframe( false );
//    } );
//    me.addListener( 'aftergetcontent', function ( cmdName ) {
//        if ( cmdName == 'aftergetcontent' && me.queryCommandState( 'source' ) ){
//            return;
//        }
//        switchImgAndIframe( false );
//    } );
//
//    me.commands['webapp'] = {
//        execCommand:function ( cmd, obj ) {
//            me.execCommand( "inserthtml", createInsertStr( obj, false,true ) );
//        }
//    };
//};

UE.plugin.register('webapp', function (){
    var me = this;
    function createInsertStr(obj,toEmbed){
        return  !toEmbed ?
            '<img title="'+obj.title+'" width="' + obj.width + '" height="' + obj.height + '"' +
                ' src="' + me.options.UEDITOR_HOME_URL + 'themes/default/images/spacer.gif" _logo_url="'+obj.logo+'" style="background:url(' + obj.logo
                +') no-repeat center center; border:1px solid gray;" class="edui-faked-webapp" _url="' + obj.url + '" ' +
                (obj.align && !obj.cssfloat? 'align="' + obj.align + '"' : '') +
                (obj.cssfloat ? 'style="float:' + obj.cssfloat + '"' : '') +
                '/>'
            :
            '<iframe class="edui-faked-webapp" title="'+obj.title+'" ' +
                (obj.align && !obj.cssfloat? 'align="' + obj.align + '"' : '') +
                (obj.cssfloat ? 'style="float:' + obj.cssfloat + '"' : '') +
                'width="' + obj.width + '" height="' + obj.height + '"  scrolling="no" frameborder="0" src="' + obj.url + '" logo_url = "'+obj.logo+'"></iframe>'

    }
    return {
        outputRule: function(root){
            utils.each(root.getNodesByTagName('img'),function(node){
                var html;
                if(node.getAttr('class') == 'edui-faked-webapp'){
                    html =  createInsertStr({
                        title:node.getAttr('title'),
                        'width':node.getAttr('width'),
                        'height':node.getAttr('height'),
                        'align':node.getAttr('align'),
                        'cssfloat':node.getStyle('float'),
                        'url':node.getAttr("_url"),
                        'logo':node.getAttr('_logo_url')
                    },true);
                    var embed = UE.uNode.createElement(html);
                    node.parentNode.replaceChild(embed,node);
                }
            })
        },
        inputRule:function(root){
            utils.each(root.getNodesByTagName('iframe'),function(node){
                if(node.getAttr('class') == 'edui-faked-webapp'){
                    var img = UE.uNode.createElement(createInsertStr({
                        title:node.getAttr('title'),
                        'width':node.getAttr('width'),
                        'height':node.getAttr('height'),
                        'align':node.getAttr('align'),
                        'cssfloat':node.getStyle('float'),
                        'url':node.getAttr("src"),
                        'logo':node.getAttr('logo_url')
                    }));
                    node.parentNode.replaceChild(img,node);
                }
            })

        },
        commands:{
            /**
             * 插入百度应用
             * @command webapp
             * @method execCommand
             * @remind 需要百度APPKey
             * @remind 百度应用主页： <a href="http://app.baidu.com/" target="_blank">http://app.baidu.com/</a>
             * @param { Object } appOptions 应用所需的参数项， 支持的key有： title=>应用标题， width=>应用容器宽度，
             * height=>应用容器高度，logo=>应用logo，url=>应用地址
             * @example
             * ```javascript
             * //editor是编辑器实例
             * //在编辑器里插入一个“植物大战僵尸”的APP
             * editor.execCommand( 'webapp' , {
             *     title: '植物大战僵尸',
             *     width: 560,
             *     height: 465,
             *     logo: '应用展示的图片',
             *     url: '百度应用的地址'
             * } );
             * ```
             */
            'webapp':{
                execCommand:function (cmd, obj) {

                    var me = this,
                        str = createInsertStr(utils.extend(obj,{
                            align:'none'
                        }), false);
                    me.execCommand("inserthtml",str);
                },
                queryCommandState:function () {
                    var me = this,
                        img = me.selection.getRange().getClosedNode(),
                        flag = img && (img.className == "edui-faked-webapp");
                    return flag ? 1 : 0;
                }
            }
        }
    }
});

// plugins/template.js
///import core
///import plugins\inserthtml.js
///import plugins\cleardoc.js
///commands 模板
///commandsName  template
///commandsTitle  模板
///commandsDialog  dialogs\template
UE.plugins['template'] = function () {
    UE.commands['template'] = {
        execCommand:function (cmd, obj) {
            obj.html && this.execCommand("inserthtml", obj.html);
        }
    };
    this.addListener("click", function (type, evt) {
        var el = evt.target || evt.srcElement,
            range = this.selection.getRange();
        var tnode = domUtils.findParent(el, function (node) {
            if (node.className && domUtils.hasClass(node, "ue_t")) {
                return node;
            }
        }, true);
        tnode && range.selectNode(tnode).shrinkBoundary().select();
    });
    this.addListener("keydown", function (type, evt) {
        var range = this.selection.getRange();
        if (!range.collapsed) {
            if (!evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey) {
                var tnode = domUtils.findParent(range.startContainer, function (node) {
                    if (node.className && domUtils.hasClass(node, "ue_t")) {
                        return node;
                    }
                }, true);
                if (tnode) {
                    domUtils.removeClasses(tnode, ["ue_t"]);
                }
            }
        }
    });
};


// plugins/music.js
/**
 * 插入音乐命令
 * @file
 */
UE.plugin.register('music', function (){
    var me = this;
    function creatInsertStr(url,width,height,align,cssfloat,toEmbed){
        return  !toEmbed ?
                '<img ' +
                    (align && !cssfloat? 'align="' + align + '"' : '') +
                    (cssfloat ? 'style="float:' + cssfloat + '"' : '') +
                    ' width="'+ width +'" height="' + height + '" _url="'+url+'" class="edui-faked-music"' +
                    ' src="'+me.options.langPath+me.options.lang+'/images/music.png" />'
            :
            '<embed type="application/x-shockwave-flash" class="edui-faked-music" pluginspage="http://www.macromedia.com/go/getflashplayer"' +
                ' src="' + url + '" width="' + width  + '" height="' + height  + '" '+ (align && !cssfloat? 'align="' + align + '"' : '') +
                (cssfloat ? 'style="float:' + cssfloat + '"' : '') +
                ' wmode="transparent" play="true" loop="false" menu="false" allowscriptaccess="never" allowfullscreen="true" >';
    }
    return {
        outputRule: function(root){
            utils.each(root.getNodesByTagName('img'),function(node){
                var html;
                if(node.getAttr('class') == 'edui-faked-music'){
                    var cssfloat = node.getStyle('float');
                    var align = node.getAttr('align');
                    html =  creatInsertStr(node.getAttr("_url"), node.getAttr('width'), node.getAttr('height'), align, cssfloat, true);
                    var embed = UE.uNode.createElement(html);
                    node.parentNode.replaceChild(embed,node);
                }
            })
        },
        inputRule:function(root){
            utils.each(root.getNodesByTagName('embed'),function(node){
                if(node.getAttr('class') == 'edui-faked-music'){
                    var cssfloat = node.getStyle('float');
                    var align = node.getAttr('align');
                    html =  creatInsertStr(node.getAttr("src"), node.getAttr('width'), node.getAttr('height'), align, cssfloat,false);
                    var img = UE.uNode.createElement(html);
                    node.parentNode.replaceChild(img,node);
                }
            })

        },
        commands:{
            /**
             * 插入音乐
             * @command music
             * @method execCommand
             * @param { Object } musicOptions 插入音乐的参数项， 支持的key有： url=>音乐地址；
             * width=>音乐容器宽度；height=>音乐容器高度；align=>音乐文件的对齐方式， 可选值有: left, center, right, none
             * @example
             * ```javascript
             * //editor是编辑器实例
             * //在编辑器里插入一个“植物大战僵尸”的APP
             * editor.execCommand( 'music' , {
             *     width: 400,
             *     height: 95,
             *     align: "center",
             *     url: "音乐地址"
             * } );
             * ```
             */
            'music':{
                execCommand:function (cmd, musicObj) {
                    var me = this,
                        str = creatInsertStr(musicObj.url, musicObj.width || 400, musicObj.height || 95, "none", false);
                    me.execCommand("inserthtml",str);
                },
                queryCommandState:function () {
                    var me = this,
                        img = me.selection.getRange().getClosedNode(),
                        flag = img && (img.className == "edui-faked-music");
                    return flag ? 1 : 0;
                }
            }
        }
    }
});

// plugins/autoupload.js
/**
 * @description
 * 1.拖放文件到编辑区域，自动上传并插入到选区
 * 2.插入粘贴板的图片，自动上传并插入到选区
 * @author Jinqn
 * @date 2013-10-14
 */
UE.plugin.register('autoupload', function (){

    function sendAndInsertFile(file, editor) {
        var me  = editor;
        //模拟数据
        var fieldName, urlPrefix, maxSize, allowFiles, actionUrl,
            loadingHtml, errorHandler, successHandler,
            filetype = /image\/\w+/i.test(file.type) ? 'image':'file',
            loadingId = 'loading_' + (+new Date()).toString(36);

        fieldName = me.getOpt(filetype + 'FieldName');
        urlPrefix = me.getOpt(filetype + 'UrlPrefix');
        maxSize = me.getOpt(filetype + 'MaxSize');
        allowFiles = me.getOpt(filetype + 'AllowFiles');
        actionUrl = me.getActionUrl(me.getOpt(filetype + 'ActionName'));
        errorHandler = function(title) {
            var loader = me.document.getElementById(loadingId);
            loader && domUtils.remove(loader);
            me.fireEvent('showmessage', {
                'id': loadingId,
                'content': title,
                'type': 'error',
                'timeout': 4000
            });
        };

        if (filetype == 'image') {
            loadingHtml = '<img class="loadingclass" id="' + loadingId + '" src="' +
                me.options.themePath + me.options.theme +
                '/images/spacer.gif" title="' + (me.getLang('autoupload.loading') || '') + '" >';
            successHandler = function(data) {
                var link = urlPrefix + data.url,
                    loader = me.document.getElementById(loadingId);
                if (loader) {
                    loader.setAttribute('src', link);
                    loader.setAttribute('_src', link);
                    loader.setAttribute('title', data.title || '');
                    loader.setAttribute('alt', data.original || '');
                    loader.removeAttribute('id');
                    domUtils.removeClasses(loader, 'loadingclass');
                }
            };
        } else {
            loadingHtml = '<p>' +
                '<img class="loadingclass" id="' + loadingId + '" src="' +
                me.options.themePath + me.options.theme +
                '/images/spacer.gif" title="' + (me.getLang('autoupload.loading') || '') + '" >' +
                '</p>';
            successHandler = function(data) {
                var link = urlPrefix + data.url,
                    loader = me.document.getElementById(loadingId);

                var rng = me.selection.getRange(),
                    bk = rng.createBookmark();
                rng.selectNode(loader).select();
                me.execCommand('insertfile', {'url': link});
                rng.moveToBookmark(bk).select();
            };
        }

        /* 插入loading的占位符 */
        me.execCommand('inserthtml', loadingHtml);

        /* 判断后端配置是否没有加载成功 */
        if (!me.getOpt(filetype + 'ActionName')) {
            errorHandler(me.getLang('autoupload.errorLoadConfig'));
            return;
        }
        /* 判断文件大小是否超出限制 */
        if(file.size > maxSize) {
            errorHandler(me.getLang('autoupload.exceedSizeError'));
            return;
        }
        /* 判断文件格式是否超出允许 */
        var fileext = file.name ? file.name.substr(file.name.lastIndexOf('.')):'';
        if ((fileext && filetype != 'image') || (allowFiles && (allowFiles.join('') + '.').indexOf(fileext.toLowerCase() + '.') == -1)) {
            errorHandler(me.getLang('autoupload.exceedTypeError'));
            return;
        }

        /* 创建Ajax并提交 */
        var xhr = new XMLHttpRequest(),
            fd = new FormData(),
            params = utils.serializeParam(me.queryCommandValue('serverparam')) || '',
            url = utils.formatUrl(actionUrl + (actionUrl.indexOf('?') == -1 ? '?':'&') + params);

        fd.append(fieldName, file, file.name || ('blob.' + file.type.substr('image/'.length)));
        fd.append('type', 'ajax');
        xhr.open("post", url, true);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
        xhr.addEventListener('load', function (e) {
            try{
                var json = (new Function("return " + utils.trim(e.target.response)))();
                if (json.state == 'SUCCESS' && json.url) {
                    successHandler(json);
                } else {
                    errorHandler(json.state);
                }
            }catch(er){
                errorHandler(me.getLang('autoupload.loadError'));
            }
        });
        xhr.send(fd);
    }

    function getPasteImage(e){
        return e.clipboardData && e.clipboardData.items && e.clipboardData.items.length == 1 && /^image\//.test(e.clipboardData.items[0].type) ? e.clipboardData.items:null;
    }
    function getDropImage(e){
        return  e.dataTransfer && e.dataTransfer.files ? e.dataTransfer.files:null;
    }

    return {
        outputRule: function(root){
            utils.each(root.getNodesByTagName('img'),function(n){
                if (/\b(loaderrorclass)|(bloaderrorclass)\b/.test(n.getAttr('class'))) {
                    n.parentNode.removeChild(n);
                }
            });
            utils.each(root.getNodesByTagName('p'),function(n){
                if (/\bloadpara\b/.test(n.getAttr('class'))) {
                    n.parentNode.removeChild(n);
                }
            });
        },
        bindEvents:{
            //插入粘贴板的图片，拖放插入图片
            'ready':function(e){
                var me = this;
                if(window.FormData && window.FileReader) {
                    domUtils.on(me.body, 'paste drop', function(e){
                        var hasImg = false,
                            items;
                        //获取粘贴板文件列表或者拖放文件列表
                        items = e.type == 'paste' ? getPasteImage(e):getDropImage(e);
                        if(items){
                            var len = items.length,
                                file;
                            while (len--){
                                file = items[len];
                                if(file.getAsFile) file = file.getAsFile();
                                if(file && file.size > 0) {
                                    sendAndInsertFile(file, me);
                                    hasImg = true;
                                }
                            }
                            hasImg && e.preventDefault();
                        }

                    });
                    //取消拖放图片时出现的文字光标位置提示
                    domUtils.on(me.body, 'dragover', function (e) {
                        if(e.dataTransfer.types[0] == 'Files') {
                            e.preventDefault();
                        }
                    });

                    //设置loading的样式
                    utils.cssRule('loading',
                        '.loadingclass{display:inline-block;cursor:default;background: url(\''
                            + this.options.themePath
                            + this.options.theme +'/images/loading.gif\') no-repeat center center transparent;border:1px solid #cccccc;margin-left:1px;height: 22px;width: 22px;}\n' +
                            '.loaderrorclass{display:inline-block;cursor:default;background: url(\''
                            + this.options.themePath
                            + this.options.theme +'/images/loaderror.png\') no-repeat center center transparent;border:1px solid #cccccc;margin-right:1px;height: 22px;width: 22px;' +
                            '}',
                        this.document);
                }
            }
        }
    }
});

// plugins/autosave.js
UE.plugin.register('autosave', function (){

    var me = this,
        //无限循环保护
        lastSaveTime = new Date(),
        //最小保存间隔时间
        MIN_TIME = 20,
        //auto save key
        saveKey = null;

    function save ( editor ) {

        var saveData;

        if ( new Date() - lastSaveTime < MIN_TIME ) {
            return;
        }

        if ( !editor.hasContents() ) {
            //这里不能调用命令来删除， 会造成事件死循环
            saveKey && me.removePreferences( saveKey );
            return;
        }

        lastSaveTime = new Date();

        editor._saveFlag = null;

        saveData = me.body.innerHTML;

        if ( editor.fireEvent( "beforeautosave", {
            content: saveData
        } ) === false ) {
            return;
        }

        me.setPreferences( saveKey, saveData );

        editor.fireEvent( "afterautosave", {
            content: saveData
        } );

    }

    return {
        defaultOptions: {
            //默认间隔时间
            saveInterval: 500
        },
        bindEvents:{
            'ready':function(){

                var _suffix = "-drafts-data",
                    key = null;

                if ( me.key ) {
                    key = me.key + _suffix;
                } else {
                    key = ( me.container.parentNode.id || 'ue-common' ) + _suffix;
                }

                //页面地址+编辑器ID 保持唯一
                saveKey = ( location.protocol + location.host + location.pathname ).replace( /[.:\/]/g, '_' ) + key;

            },

            'contentchange': function () {

                if ( !saveKey ) {
                    return;
                }

                if ( me._saveFlag ) {
                    window.clearTimeout( me._saveFlag );
                }

                if ( me.options.saveInterval > 0 ) {

                    me._saveFlag = window.setTimeout( function () {

                        save( me );

                    }, me.options.saveInterval );

                } else {

                    save(me);

                }


            }
        },
        commands:{
            'clearlocaldata':{
                execCommand:function (cmd, name) {
                    if ( saveKey && me.getPreferences( saveKey ) ) {
                        me.removePreferences( saveKey )
                    }
                },
                notNeedUndo: true,
                ignoreContentChange:true
            },

            'getlocaldata':{
                execCommand:function (cmd, name) {
                    return saveKey ? me.getPreferences( saveKey ) || '' : '';
                },
                notNeedUndo: true,
                ignoreContentChange:true
            },

            'drafts':{
                execCommand:function (cmd, name) {
                    if ( saveKey ) {
                        me.body.innerHTML = me.getPreferences( saveKey ) || '<p>'+domUtils.fillHtml+'</p>';
                        me.focus(true);
                    }
                },
                queryCommandState: function () {
                    return saveKey ? ( me.getPreferences( saveKey ) === null ? -1 : 0 ) : -1;
                },
                notNeedUndo: true,
                ignoreContentChange:true
            }
        }
    }

});

// plugins/charts.js
UE.plugin.register('charts', function (){

    var me = this;

    return {
        bindEvents: {
            'chartserror': function () {
            }
        },
        commands:{
            'charts': {
                execCommand: function ( cmd, data ) {

                    var tableNode = domUtils.findParentByTagName(this.selection.getRange().startContainer, 'table', true),
                        flagText = [],
                        config = {};

                    if ( !tableNode ) {
                        return false;
                    }

                    if ( !validData( tableNode ) ) {
                        me.fireEvent( "chartserror" );
                        return false;
                    }

                    config.title = data.title || '';
                    config.subTitle = data.subTitle || '';
                    config.xTitle = data.xTitle || '';
                    config.yTitle = data.yTitle || '';
                    config.suffix = data.suffix || '';
                    config.tip = data.tip || '';
                    //数据对齐方式
                    config.dataFormat = data.tableDataFormat || '';
                    //图表类型
                    config.chartType = data.chartType || 0;

                    for ( var key in config ) {

                        if ( !config.hasOwnProperty( key ) ) {
                            continue;
                        }

                        flagText.push( key+":"+config[ key ] );

                    }

                    tableNode.setAttribute( "data-chart", flagText.join( ";" ) );
                    domUtils.addClass( tableNode, "edui-charts-table" );



                },
                queryCommandState: function ( cmd, name ) {

                    var tableNode = domUtils.findParentByTagName(this.selection.getRange().startContainer, 'table', true);
                    return tableNode && validData( tableNode ) ? 0 : -1;

                }
            }
        },
        inputRule:function(root){
            utils.each(root.getNodesByTagName('table'),function( tableNode ){

                if ( tableNode.getAttr("data-chart") !== undefined ) {
                    tableNode.setAttr("style");
                }

            })

        },
        outputRule:function(root){
            utils.each(root.getNodesByTagName('table'),function( tableNode ){

                if ( tableNode.getAttr("data-chart") !== undefined ) {
                    tableNode.setAttr("style", "display: none;");
                }

            })

        }
    }

    function validData ( table ) {

        var firstRows = null,
            cellCount = 0;

        //行数不够
        if ( table.rows.length < 2 ) {
            return false;
        }

        //列数不够
        if ( table.rows[0].cells.length < 2 ) {
            return false;
        }

        //第一行所有cell必须是th
        firstRows = table.rows[ 0 ].cells;
        cellCount = firstRows.length;

        for ( var i = 0, cell; cell = firstRows[ i ]; i++ ) {

            if ( cell.tagName.toLowerCase() !== 'th' ) {
                return false;
            }

        }

        for ( var i = 1, row; row = table.rows[ i ]; i++ ) {

            //每行单元格数不匹配， 返回false
            if ( row.cells.length != cellCount ) {
                return false;
            }

            //第一列不是th也返回false
            if ( row.cells[0].tagName.toLowerCase() !== 'th' ) {
                return false;
            }

            for ( var j = 1, cell; cell = row.cells[ j ]; j++ ) {

                var value = utils.trim( ( cell.innerText || cell.textContent || '' ) );

                value = value.replace( new RegExp( UE.dom.domUtils.fillChar, 'g' ), '' ).replace( /^\s+|\s+$/g, '' );

                //必须是数字
                if ( !/^\d*\.?\d+$/.test( value ) ) {
                    return false;
                }

            }

        }

        return true;

    }

});

// plugins/section.js
/**
 * 目录大纲支持插件
 * @file
 * @since 1.3.0
 */
UE.plugin.register('section', function (){
    /* 目录节点对象 */
    function Section(option){
        this.tag = '';
        this.level = -1,
            this.dom = null;
        this.nextSection = null;
        this.previousSection = null;
        this.parentSection = null;
        this.startAddress = [];
        this.endAddress = [];
        this.children = [];
    }
    function getSection(option) {
        var section = new Section();
        return utils.extend(section, option);
    }
    function getNodeFromAddress(startAddress, root) {
        var current = root;
        for(var i = 0;i < startAddress.length; i++) {
            if(!current.childNodes) return null;
            current = current.childNodes[startAddress[i]];
        }
        return current;
    }

    var me = this;

    return {
        bindMultiEvents:{
            type: 'aftersetcontent afterscencerestore',
            handler: function(){
                me.fireEvent('updateSections');
            }
        },
        bindEvents:{
            /* 初始化、拖拽、粘贴、执行setcontent之后 */
            'ready': function (){
                me.fireEvent('updateSections');
                domUtils.on(me.body, 'drop paste', function(){
                    me.fireEvent('updateSections');
                });
            },
            /* 执行paragraph命令之后 */
            'afterexeccommand': function (type, cmd) {
                if(cmd == 'paragraph') {
                    me.fireEvent('updateSections');
                }
            },
            /* 部分键盘操作，触发updateSections事件 */
            'keyup': function (type, e) {
                var me = this,
                    range = me.selection.getRange();
                if(range.collapsed != true) {
                    me.fireEvent('updateSections');
                } else {
                    var keyCode = e.keyCode || e.which;
                    if(keyCode == 13 || keyCode == 8 || keyCode == 46) {
                        me.fireEvent('updateSections');
                    }
                }
            }
        },
        commands:{
            'getsections': {
                execCommand: function (cmd, levels) {
                    var levelFn = levels || ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];

                    for (var i = 0; i < levelFn.length; i++) {
                        if (typeof levelFn[i] == 'string') {
                            levelFn[i] = function(fn){
                                return function(node){
                                    return node.tagName == fn.toUpperCase()
                                };
                            }(levelFn[i]);
                        } else if (typeof levelFn[i] != 'function') {
                            levelFn[i] = function (node) {
                                return null;
                            }
                        }
                    }
                    function getSectionLevel(node) {
                        for (var i = 0; i < levelFn.length; i++) {
                            if (levelFn[i](node)) return i;
                        }
                        return -1;
                    }

                    var me = this,
                        Directory = getSection({'level':-1, 'title':'root'}),
                        previous = Directory;

                    function traversal(node, Directory) {
                        var level,
                            tmpSection = null,
                            parent,
                            child,
                            children = node.childNodes;
                        for (var i = 0, len = children.length; i < len; i++) {
                            child = children[i];
                            level = getSectionLevel(child);
                            if (level >= 0) {
                                var address = me.selection.getRange().selectNode(child).createAddress(true).startAddress,
                                    current = getSection({
                                        'tag': child.tagName,
                                        'title': child.innerText || child.textContent || '',
                                        'level': level,
                                        'dom': child,
                                        'startAddress': utils.clone(address, []),
                                        'endAddress': utils.clone(address, []),
                                        'children': []
                                    });
                                previous.nextSection = current;
                                current.previousSection = previous;
                                parent = previous;
                                while(level <= parent.level){
                                    parent = parent.parentSection;
                                }
                                current.parentSection = parent;
                                parent.children.push(current);
                                tmpSection = previous = current;
                            } else {
                                child.nodeType === 1 && traversal(child, Directory);
                                tmpSection && tmpSection.endAddress[tmpSection.endAddress.length - 1] ++;
                            }
                        }
                    }
                    traversal(me.body, Directory);
                    return Directory;
                },
                notNeedUndo: true
            },
            'movesection': {
                execCommand: function (cmd, sourceSection, targetSection, isAfter) {

                    var me = this,
                        targetAddress,
                        target;

                    if(!sourceSection || !targetSection || targetSection.level == -1) return;

                    targetAddress = isAfter ? targetSection.endAddress:targetSection.startAddress;
                    target = getNodeFromAddress(targetAddress, me.body);

                    /* 判断目标地址是否被源章节包含 */
                    if(!targetAddress || !target || isContainsAddress(sourceSection.startAddress, sourceSection.endAddress, targetAddress)) return;

                    var startNode = getNodeFromAddress(sourceSection.startAddress, me.body),
                        endNode = getNodeFromAddress(sourceSection.endAddress, me.body),
                        current,
                        nextNode;

                    if(isAfter) {
                        current = endNode;
                        while ( current && !(domUtils.getPosition( startNode, current ) & domUtils.POSITION_FOLLOWING) ) {
                            nextNode = current.previousSibling;
                            domUtils.insertAfter(target, current);
                            if(current == startNode) break;
                            current = nextNode;
                        }
                    } else {
                        current = startNode;
                        while ( current && !(domUtils.getPosition( current, endNode ) & domUtils.POSITION_FOLLOWING) ) {
                            nextNode = current.nextSibling;
                            target.parentNode.insertBefore(current, target);
                            if(current == endNode) break;
                            current = nextNode;
                        }
                    }

                    me.fireEvent('updateSections');

                    /* 获取地址的包含关系 */
                    function isContainsAddress(startAddress, endAddress, addressTarget){
                        var isAfterStartAddress = false,
                            isBeforeEndAddress = false;
                        for(var i = 0; i< startAddress.length; i++){
                            if(i >= addressTarget.length) break;
                            if(addressTarget[i] > startAddress[i]) {
                                isAfterStartAddress = true;
                                break;
                            } else if(addressTarget[i] < startAddress[i]) {
                                break;
                            }
                        }
                        for(var i = 0; i< endAddress.length; i++){
                            if(i >= addressTarget.length) break;
                            if(addressTarget[i] < startAddress[i]) {
                                isBeforeEndAddress = true;
                                break;
                            } else if(addressTarget[i] > startAddress[i]) {
                                break;
                            }
                        }
                        return isAfterStartAddress && isBeforeEndAddress;
                    }
                }
            },
            'deletesection': {
                execCommand: function (cmd, section, keepChildren) {
                    var me = this;

                    if(!section) return;

                    function getNodeFromAddress(startAddress) {
                        var current = me.body;
                        for(var i = 0;i < startAddress.length; i++) {
                            if(!current.childNodes) return null;
                            current = current.childNodes[startAddress[i]];
                        }
                        return current;
                    }

                    var startNode = getNodeFromAddress(section.startAddress),
                        endNode = getNodeFromAddress(section.endAddress),
                        current = startNode,
                        nextNode;

                    if(!keepChildren) {
                        while ( current && domUtils.inDoc(endNode, me.document) && !(domUtils.getPosition( current, endNode ) & domUtils.POSITION_FOLLOWING) ) {
                            nextNode = current.nextSibling;
                            domUtils.remove(current);
                            current = nextNode;
                        }
                    } else {
                        domUtils.remove(current);
                    }

                    me.fireEvent('updateSections');
                }
            },
            'selectsection': {
                execCommand: function (cmd, section) {
                    if(!section && !section.dom) return false;
                    var me = this,
                        range = me.selection.getRange(),
                        address = {
                            'startAddress':utils.clone(section.startAddress, []),
                            'endAddress':utils.clone(section.endAddress, [])
                        };
                    address.endAddress[address.endAddress.length - 1]++;
                    range.moveToAddress(address).select().scrollToView();
                    return true;
                },
                notNeedUndo: true
            },
            'scrolltosection': {
                execCommand: function (cmd, section) {
                    if(!section && !section.dom) return false;
                    var me = this,
                        range = me.selection.getRange(),
                        address = {
                            'startAddress':section.startAddress,
                            'endAddress':section.endAddress
                        };
                    address.endAddress[address.endAddress.length - 1]++;
                    range.moveToAddress(address).scrollToView();
                    return true;
                },
                notNeedUndo: true
            }
        }
    }
});

// plugins/simpleupload.js
/**
 * @description
 * 简单上传:点击按钮,直接选择文件上传
 * @author Jinqn
 * @date 2014-03-31
 */
UE.plugin.register('simpleupload', function (){
    var me = this,
        isLoaded = false,
        containerBtn;

    function initUploadBtn(){
        var w = containerBtn.offsetWidth || 20,
            h = containerBtn.offsetHeight || 20,
            btnIframe = document.createElement('iframe'),
            btnStyle = 'display:block;width:' + w + 'px;height:' + h + 'px;overflow:hidden;border:0;margin:0;padding:0;position:absolute;top:0;left:0;filter:alpha(opacity=0);-moz-opacity:0;-khtml-opacity: 0;opacity: 0;cursor:pointer;';

        domUtils.on(btnIframe, 'load', function(){

            var timestrap = (+new Date()).toString(36),
                wrapper,
                btnIframeDoc,
                btnIframeBody;

            btnIframeDoc = (btnIframe.contentDocument || btnIframe.contentWindow.document);
            btnIframeBody = btnIframeDoc.body;
            wrapper = btnIframeDoc.createElement('div');

            wrapper.innerHTML = '<form id="edui_form_' + timestrap + '" target="edui_iframe_' + timestrap + '" method="POST" enctype="multipart/form-data" action="' + me.getOpt('serverUrl') + '" ' +
            'style="' + btnStyle + '">' +
            '<input id="edui_input_' + timestrap + '" type="file" accept="image/*" name="' + me.options.imageFieldName + '" ' +
            'style="' + btnStyle + '">' +
            '</form>' +
            '<iframe id="edui_iframe_' + timestrap + '" name="edui_iframe_' + timestrap + '" style="display:none;width:0;height:0;border:0;margin:0;padding:0;position:absolute;"></iframe>';

            wrapper.className = 'edui-' + me.options.theme;
            wrapper.id = me.ui.id + '_iframeupload';
            btnIframeBody.style.cssText = btnStyle;
            btnIframeBody.style.width = w + 'px';
            btnIframeBody.style.height = h + 'px';
            btnIframeBody.appendChild(wrapper);

            if (btnIframeBody.parentNode) {
                btnIframeBody.parentNode.style.width = w + 'px';
                btnIframeBody.parentNode.style.height = w + 'px';
            }

            var form = btnIframeDoc.getElementById('edui_form_' + timestrap);
            var input = btnIframeDoc.getElementById('edui_input_' + timestrap);
            var iframe = btnIframeDoc.getElementById('edui_iframe_' + timestrap);

            domUtils.on(input, 'change', function(){
                if(!input.value) return;
                var loadingId = 'loading_' + (+new Date()).toString(36);
                var params = utils.serializeParam(me.queryCommandValue('serverparam')) || '';

                var imageActionUrl = me.getActionUrl(me.getOpt('imageActionName'));
                var allowFiles = me.getOpt('imageAllowFiles');

                me.focus();
                me.execCommand('inserthtml', '<img class="loadingclass" id="' + loadingId + '" src="' + me.options.themePath + me.options.theme +'/images/spacer.gif" title="' + (me.getLang('simpleupload.loading') || '') + '" >');

                function callback(){
                    try{
                        var link, json, loader,
                            body = (iframe.contentDocument || iframe.contentWindow.document).body,
                            result = body.innerText || body.textContent || '';
                        json = (new Function("return " + result))();
                        link = me.options.imageUrlPrefix + json.url;
                        if(json.state == 'SUCCESS' && json.url) {
                            loader = me.document.getElementById(loadingId);
                            loader.setAttribute('src', link);
                            loader.setAttribute('_src', link);
                            loader.setAttribute('title', json.title || '');
                            loader.setAttribute('alt', json.original || '');
                            loader.removeAttribute('id');
                            domUtils.removeClasses(loader, 'loadingclass');
                        } else {
                            showErrorLoader && showErrorLoader(json.state);
                        }
                    }catch(er){
                        showErrorLoader && showErrorLoader(me.getLang('simpleupload.loadError'));
                    }
                    form.reset();
                    domUtils.un(iframe, 'load', callback);
                }
                function showErrorLoader(title){
                    if(loadingId) {
                        var loader = me.document.getElementById(loadingId);
                        loader && domUtils.remove(loader);
                        me.fireEvent('showmessage', {
                            'id': loadingId,
                            'content': title,
                            'type': 'error',
                            'timeout': 4000
                        });
                    }
                }

                /* 判断后端配置是否没有加载成功 */
                if (!me.getOpt('imageActionName')) {
                    errorHandler(me.getLang('autoupload.errorLoadConfig'));
                    return;
                }
                // 判断文件格式是否错误
                var filename = input.value,
                    fileext = filename ? filename.substr(filename.lastIndexOf('.')):'';
                if (!fileext || (allowFiles && (allowFiles.join('') + '.').indexOf(fileext.toLowerCase() + '.') == -1)) {
                    showErrorLoader(me.getLang('simpleupload.exceedTypeError'));
                    return;
                }

                domUtils.on(iframe, 'load', callback);
                form.action = utils.formatUrl(imageActionUrl + (imageActionUrl.indexOf('?') == -1 ? '?':'&') + params);
                form.submit();
            });

            var stateTimer;
            me.addListener('selectionchange', function () {
                clearTimeout(stateTimer);
                stateTimer = setTimeout(function() {
                    var state = me.queryCommandState('simpleupload');
                    if (state == -1) {
                        input.disabled = 'disabled';
                    } else {
                        input.disabled = false;
                    }
                }, 400);
            });
            isLoaded = true;
        });

        btnIframe.style.cssText = btnStyle;
        containerBtn.appendChild(btnIframe);
    }

    return {
        bindEvents:{
            'ready': function() {
                //设置loading的样式
                utils.cssRule('loading',
                    '.loadingclass{display:inline-block;cursor:default;background: url(\''
                    + this.options.themePath
                    + this.options.theme +'/images/loading.gif\') no-repeat center center transparent;border:1px solid #cccccc;margin-right:1px;height: 22px;width: 22px;}\n' +
                    '.loaderrorclass{display:inline-block;cursor:default;background: url(\''
                    + this.options.themePath
                    + this.options.theme +'/images/loaderror.png\') no-repeat center center transparent;border:1px solid #cccccc;margin-right:1px;height: 22px;width: 22px;' +
                    '}',
                    this.document);
            },
            /* 初始化简单上传按钮 */
            'simpleuploadbtnready': function(type, container) {
                containerBtn = container;
                me.afterConfigReady(initUploadBtn);
            }
        },
        outputRule: function(root){
            utils.each(root.getNodesByTagName('img'),function(n){
                if (/\b(loaderrorclass)|(bloaderrorclass)\b/.test(n.getAttr('class'))) {
                    n.parentNode.removeChild(n);
                }
            });
        },
        commands: {
            'simpleupload': {
                queryCommandState: function () {
                    return isLoaded ? 0:-1;
                }
            }
        }
    }
});

// plugins/serverparam.js
/**
 * 服务器提交的额外参数列表设置插件
 * @file
 * @since 1.2.6.1
 */
UE.plugin.register('serverparam', function (){

    var me = this,
        serverParam = {};

    return {
        commands:{
            /**
             * 修改服务器提交的额外参数列表,清除所有项
             * @command serverparam
             * @method execCommand
             * @param { String } cmd 命令字符串
             * @example
             * ```javascript
             * editor.execCommand('serverparam');
             * editor.queryCommandValue('serverparam'); //返回空
             * ```
             */
            /**
             * 修改服务器提交的额外参数列表,删除指定项
             * @command serverparam
             * @method execCommand
             * @param { String } cmd 命令字符串
             * @param { String } key 要清除的属性
             * @example
             * ```javascript
             * editor.execCommand('serverparam', 'name'); //删除属性name
             * ```
             */
            /**
             * 修改服务器提交的额外参数列表,使用键值添加项
             * @command serverparam
             * @method execCommand
             * @param { String } cmd 命令字符串
             * @param { String } key 要添加的属性
             * @param { String } value 要添加属性的值
             * @example
             * ```javascript
             * editor.execCommand('serverparam', 'name', 'hello');
             * editor.queryCommandValue('serverparam'); //返回对象 {'name': 'hello'}
             * ```
             */
            /**
             * 修改服务器提交的额外参数列表,传入键值对对象添加多项
             * @command serverparam
             * @method execCommand
             * @param { String } cmd 命令字符串
             * @param { Object } key 传入的键值对对象
             * @example
             * ```javascript
             * editor.execCommand('serverparam', {'name': 'hello'});
             * editor.queryCommandValue('serverparam'); //返回对象 {'name': 'hello'}
             * ```
             */
            /**
             * 修改服务器提交的额外参数列表,使用自定义函数添加多项
             * @command serverparam
             * @method execCommand
             * @param { String } cmd 命令字符串
             * @param { Function } key 自定义获取参数的函数
             * @example
             * ```javascript
             * editor.execCommand('serverparam', function(editor){
             *     return {'key': 'value'};
             * });
             * editor.queryCommandValue('serverparam'); //返回对象 {'key': 'value'}
             * ```
             */

            /**
             * 获取服务器提交的额外参数列表
             * @command serverparam
             * @method queryCommandValue
             * @param { String } cmd 命令字符串
             * @example
             * ```javascript
             * editor.queryCommandValue( 'serverparam' ); //返回对象 {'key': 'value'}
             * ```
             */
            'serverparam':{
                execCommand:function (cmd, key, value) {
                    if (key === undefined || key === null) { //不传参数,清空列表
                        serverParam = {};
                    } else if (utils.isString(key)) { //传入键值
                        if(value === undefined || value === null) {
                            delete serverParam[key];
                        } else {
                            serverParam[key] = value;
                        }
                    } else if (utils.isObject(key)) { //传入对象,覆盖列表项
                        utils.extend(serverParam, key, true);
                    } else if (utils.isFunction(key)){ //传入函数,添加列表项
                        utils.extend(serverParam, key(), true);
                    }
                },
                queryCommandValue: function(){
                    return serverParam || {};
                }
            }
        }
    }
});


// plugins/insertfile.js
/**
 * 插入附件
 */
UE.plugin.register('insertfile', function (){

    var me = this;

    function getFileIcon(url){
        var ext = url.substr(url.lastIndexOf('.') + 1).toLowerCase(),
            maps = {
                "rar":"icon_rar.gif",
                "zip":"icon_rar.gif",
                "tar":"icon_rar.gif",
                "gz":"icon_rar.gif",
                "bz2":"icon_rar.gif",
                "doc":"icon_doc.gif",
                "docx":"icon_doc.gif",
                "pdf":"icon_pdf.gif",
                "mp3":"icon_mp3.gif",
                "xls":"icon_xls.gif",
                "chm":"icon_chm.gif",
                "ppt":"icon_ppt.gif",
                "pptx":"icon_ppt.gif",
                "avi":"icon_mv.gif",
                "rmvb":"icon_mv.gif",
                "wmv":"icon_mv.gif",
                "flv":"icon_mv.gif",
                "swf":"icon_mv.gif",
                "rm":"icon_mv.gif",
                "exe":"icon_exe.gif",
                "psd":"icon_psd.gif",
                "txt":"icon_txt.gif",
                "jpg":"icon_jpg.gif",
                "png":"icon_jpg.gif",
                "jpeg":"icon_jpg.gif",
                "gif":"icon_jpg.gif",
                "ico":"icon_jpg.gif",
                "bmp":"icon_jpg.gif"
            };
        return maps[ext] ? maps[ext]:maps['txt'];
    }

    return {
        commands:{
            'insertfile': {
                execCommand: function (command, filelist){
                    filelist = utils.isArray(filelist) ? filelist : [filelist];

                    var i, item, icon, title,
                        html = '',
                        URL = me.getOpt('UEDITOR_HOME_URL'),
                        iconDir = URL + (URL.substr(URL.length - 1) == '/' ? '':'/') + 'dialogs/attachment/fileTypeImages/';
                    for (i = 0; i < filelist.length; i++) {
                        item = filelist[i];
                        icon = iconDir + getFileIcon(item.url);
                        title = item.title || item.url.substr(item.url.lastIndexOf('/') + 1);
                        html += '<p style="line-height: 16px;">' +
                            '<img style="vertical-align: middle; margin-right: 2px;" src="'+ icon + '" _src="' + icon + '" />' +
                            '<a style="font-size:12px; color:#0066cc;" href="' + item.url +'" title="' + title + '">' + title + '</a>' +
                            '</p>';
                    }
                    me.execCommand('insertHtml', html);
                }
            }
        }
    }
});




// ui/ui.js
var baidu = baidu || {};
baidu.editor = baidu.editor || {};
UE.ui = baidu.editor.ui = {};

// ui/uiutils.js
(function (){
    var browser = baidu.editor.browser,
        domUtils = baidu.editor.dom.domUtils;

    var magic = '$EDITORUI';
    var root = window[magic] = {};
    var uidMagic = 'ID' + magic;
    var uidCount = 0;

    var uiUtils = baidu.editor.ui.uiUtils = {
        uid: function (obj){
            return (obj ? obj[uidMagic] || (obj[uidMagic] = ++ uidCount) : ++ uidCount);
        },
        hook: function ( fn, callback ) {
            var dg;
            if (fn && fn._callbacks) {
                dg = fn;
            } else {
                dg = function (){
                    var q;
                    if (fn) {
                        q = fn.apply(this, arguments);
                    }
                    var callbacks = dg._callbacks;
                    var k = callbacks.length;
                    while (k --) {
                        var r = callbacks[k].apply(this, arguments);
                        if (q === undefined) {
                            q = r;
                        }
                    }
                    return q;
                };
                dg._callbacks = [];
            }
            dg._callbacks.push(callback);
            return dg;
        },
        createElementByHtml: function (html){
            var el = document.createElement('div');
            el.innerHTML = html;
            el = el.firstChild;
            el.parentNode.removeChild(el);
            return el;
        },
        getViewportElement: function (){
            return (browser.ie && browser.quirks) ?
                document.body : document.documentElement;
        },
        getClientRect: function (element){
            var bcr;
            //trace  IE6下在控制编辑器显隐时可能会报错，catch一下
            try{
                bcr = element.getBoundingClientRect();
            }catch(e){
                bcr={left:0,top:0,height:0,width:0}
            }
            var rect = {
                left: Math.round(bcr.left),
                top: Math.round(bcr.top),
                height: Math.round(bcr.bottom - bcr.top),
                width: Math.round(bcr.right - bcr.left)
            };
            var doc;
            while ((doc = element.ownerDocument) !== document &&
                (element = domUtils.getWindow(doc).frameElement)) {
                bcr = element.getBoundingClientRect();
                rect.left += bcr.left;
                rect.top += bcr.top;
            }
            rect.bottom = rect.top + rect.height;
            rect.right = rect.left + rect.width;
            return rect;
        },
        getViewportRect: function (){
            var viewportEl = uiUtils.getViewportElement();
            var width = (window.innerWidth || viewportEl.clientWidth) | 0;
            var height = (window.innerHeight ||viewportEl.clientHeight) | 0;
            return {
                left: 0,
                top: 0,
                height: height,
                width: width,
                bottom: height,
                right: width
            };
        },
        setViewportOffset: function (element, offset){
            var rect;
            var fixedLayer = uiUtils.getFixedLayer();
            if (element.parentNode === fixedLayer) {
                element.style.left = offset.left + 'px';
                element.style.top = offset.top + 'px';
            } else {
                domUtils.setViewportOffset(element, offset);
            }
        },
        getEventOffset: function (evt){
            var el = evt.target || evt.srcElement;
            var rect = uiUtils.getClientRect(el);
            var offset = uiUtils.getViewportOffsetByEvent(evt);
            return {
                left: offset.left - rect.left,
                top: offset.top - rect.top
            };
        },
        getViewportOffsetByEvent: function (evt){
            var el = evt.target || evt.srcElement;
            var frameEl = domUtils.getWindow(el).frameElement;
            var offset = {
                left: evt.clientX,
                top: evt.clientY
            };
            if (frameEl && el.ownerDocument !== document) {
                var rect = uiUtils.getClientRect(frameEl);
                offset.left += rect.left;
                offset.top += rect.top;
            }
            return offset;
        },
        setGlobal: function (id, obj){
            root[id] = obj;
            return magic + '["' + id  + '"]';
        },
        unsetGlobal: function (id){
            delete root[id];
        },
        copyAttributes: function (tgt, src){
            var attributes = src.attributes;
            var k = attributes.length;
            while (k --) {
                var attrNode = attributes[k];
                if ( attrNode.nodeName != 'style' && attrNode.nodeName != 'class' && (!browser.ie || attrNode.specified) ) {
                    tgt.setAttribute(attrNode.nodeName, attrNode.nodeValue);
                }
            }
            if (src.className) {
                domUtils.addClass(tgt,src.className);
            }
            if (src.style.cssText) {
                tgt.style.cssText += ';' + src.style.cssText;
            }
        },
        removeStyle: function (el, styleName){
            if (el.style.removeProperty) {
                el.style.removeProperty(styleName);
            } else if (el.style.removeAttribute) {
                el.style.removeAttribute(styleName);
            } else throw '';
        },
        contains: function (elA, elB){
            return elA && elB && (elA === elB ? false : (
                elA.contains ? elA.contains(elB) :
                    elA.compareDocumentPosition(elB) & 16
                ));
        },
        startDrag: function (evt, callbacks,doc){
            var doc = doc || document;
            var startX = evt.clientX;
            var startY = evt.clientY;
            function handleMouseMove(evt){
                var x = evt.clientX - startX;
                var y = evt.clientY - startY;
                callbacks.ondragmove(x, y,evt);
                if (evt.stopPropagation) {
                    evt.stopPropagation();
                } else {
                    evt.cancelBubble = true;
                }
            }
            if (doc.addEventListener) {
                function handleMouseUp(evt){
                    doc.removeEventListener('mousemove', handleMouseMove, true);
                    doc.removeEventListener('mouseup', handleMouseUp, true);
                    window.removeEventListener('mouseup', handleMouseUp, true);
                    callbacks.ondragstop();
                }
                doc.addEventListener('mousemove', handleMouseMove, true);
                doc.addEventListener('mouseup', handleMouseUp, true);
                window.addEventListener('mouseup', handleMouseUp, true);

                evt.preventDefault();
            } else {
                var elm = evt.srcElement;
                elm.setCapture();
                function releaseCaptrue(){
                    elm.releaseCapture();
                    elm.detachEvent('onmousemove', handleMouseMove);
                    elm.detachEvent('onmouseup', releaseCaptrue);
                    elm.detachEvent('onlosecaptrue', releaseCaptrue);
                    callbacks.ondragstop();
                }
                elm.attachEvent('onmousemove', handleMouseMove);
                elm.attachEvent('onmouseup', releaseCaptrue);
                elm.attachEvent('onlosecaptrue', releaseCaptrue);
                evt.returnValue = false;
            }
            callbacks.ondragstart();
        },
        getFixedLayer: function (){
            var layer = document.getElementById('edui_fixedlayer');
            if (layer == null) {
                layer = document.createElement('div');
                layer.id = 'edui_fixedlayer';
                document.body.appendChild(layer);
                if (browser.ie && browser.version <= 8) {
                    layer.style.position = 'absolute';
                    bindFixedLayer();
                    setTimeout(updateFixedOffset);
                } else {
                    layer.style.position = 'fixed';
                }
                layer.style.left = '0';
                layer.style.top = '0';
                layer.style.width = '0';
                layer.style.height = '0';
            }
            return layer;
        },
        makeUnselectable: function (element){
            if (browser.opera || (browser.ie && browser.version < 9)) {
                element.unselectable = 'on';
                if (element.hasChildNodes()) {
                    for (var i=0; i<element.childNodes.length; i++) {
                        if (element.childNodes[i].nodeType == 1) {
                            uiUtils.makeUnselectable(element.childNodes[i]);
                        }
                    }
                }
            } else {
                if (element.style.MozUserSelect !== undefined) {
                    element.style.MozUserSelect = 'none';
                } else if (element.style.WebkitUserSelect !== undefined) {
                    element.style.WebkitUserSelect = 'none';
                } else if (element.style.KhtmlUserSelect !== undefined) {
                    element.style.KhtmlUserSelect = 'none';
                }
            }
        }
    };
    function updateFixedOffset(){
        var layer = document.getElementById('edui_fixedlayer');
        uiUtils.setViewportOffset(layer, {
            left: 0,
            top: 0
        });
//        layer.style.display = 'none';
//        layer.style.display = 'block';

        //#trace: 1354
//        setTimeout(updateFixedOffset);
    }
    function bindFixedLayer(adjOffset){
        domUtils.on(window, 'scroll', updateFixedOffset);
        domUtils.on(window, 'resize', baidu.editor.utils.defer(updateFixedOffset, 0, true));
    }
})();


// ui/uibase.js
(function () {
    var utils = baidu.editor.utils,
        uiUtils = baidu.editor.ui.uiUtils,
        EventBase = baidu.editor.EventBase,
        UIBase = baidu.editor.ui.UIBase = function () {
        };

    UIBase.prototype = {
        className:'',
        uiName:'',
        initOptions:function (options) {
            var me = this;
            for (var k in options) {
                me[k] = options[k];
            }
            this.id = this.id || 'edui' + uiUtils.uid();
        },
        initUIBase:function () {
            this._globalKey = utils.unhtml(uiUtils.setGlobal(this.id, this));
        },
        render:function (holder) {
            var html = this.renderHtml();
            var el = uiUtils.createElementByHtml(html);

            //by xuheng 给每个node添加class
            var list = domUtils.getElementsByTagName(el, "*");
            var theme = "edui-" + (this.theme || this.editor.options.theme);
            var layer = document.getElementById('edui_fixedlayer');
            for (var i = 0, node; node = list[i++];) {
                domUtils.addClass(node, theme);
            }
            domUtils.addClass(el, theme);
            if(layer){
                layer.className="";
                domUtils.addClass(layer,theme);
            }

            var seatEl = this.getDom();
            if (seatEl != null) {
                seatEl.parentNode.replaceChild(el, seatEl);
                uiUtils.copyAttributes(el, seatEl);
            } else {
                if (typeof holder == 'string') {
                    holder = document.getElementById(holder);
                }
                holder = holder || uiUtils.getFixedLayer();
                domUtils.addClass(holder, theme);
                holder.appendChild(el);
            }
            this.postRender();
        },
        getDom:function (name) {
            if (!name) {
                return document.getElementById(this.id);
            } else {
                return document.getElementById(this.id + '_' + name);
            }
        },
        postRender:function () {
            this.fireEvent('postrender');
        },
        getHtmlTpl:function () {
            return '';
        },
        formatHtml:function (tpl) {
            var prefix = 'edui-' + this.uiName;
            return (tpl
                .replace(/##/g, this.id)
                .replace(/%%-/g, this.uiName ? prefix + '-' : '')
                .replace(/%%/g, (this.uiName ? prefix : '') + ' ' + this.className)
                .replace(/\$\$/g, this._globalKey));
        },
        renderHtml:function () {
            return this.formatHtml(this.getHtmlTpl());
        },
        dispose:function () {
            var box = this.getDom();
            if (box) baidu.editor.dom.domUtils.remove(box);
            uiUtils.unsetGlobal(this.id);
        }
    };
    utils.inherits(UIBase, EventBase);
})();


// ui/separator.js
(function (){
    var utils = baidu.editor.utils,
        UIBase = baidu.editor.ui.UIBase,
        Separator = baidu.editor.ui.Separator = function (options){
            this.initOptions(options);
            this.initSeparator();
        };
    Separator.prototype = {
        uiName: 'separator',
        initSeparator: function (){
            this.initUIBase();
        },
        getHtmlTpl: function (){
            return '<div id="##" class="edui-box %%"></div>';
        }
    };
    utils.inherits(Separator, UIBase);

})();


// ui/mask.js
///import core
///import uicore
(function (){
    var utils = baidu.editor.utils,
        domUtils = baidu.editor.dom.domUtils,
        UIBase = baidu.editor.ui.UIBase,
        uiUtils = baidu.editor.ui.uiUtils;
    
    var Mask = baidu.editor.ui.Mask = function (options){
        this.initOptions(options);
        this.initUIBase();
    };
    Mask.prototype = {
        getHtmlTpl: function (){
            return '<div id="##" class="edui-mask %%" onclick="return $$._onClick(event, this);" onmousedown="return $$._onMouseDown(event, this);"></div>';
        },
        postRender: function (){
            var me = this;
            domUtils.on(window, 'resize', function (){
                setTimeout(function (){
                    if (!me.isHidden()) {
                        me._fill();
                    }
                });
            });
        },
        show: function (zIndex){
            this._fill();
            this.getDom().style.display = '';
            this.getDom().style.zIndex = zIndex;
        },
        hide: function (){
            this.getDom().style.display = 'none';
            this.getDom().style.zIndex = '';
        },
        isHidden: function (){
            return this.getDom().style.display == 'none';
        },
        _onMouseDown: function (){
            return false;
        },
        _onClick: function (e, target){
            this.fireEvent('click', e, target);
        },
        _fill: function (){
            var el = this.getDom();
            var vpRect = uiUtils.getViewportRect();
            el.style.width = vpRect.width + 'px';
            el.style.height = vpRect.height + 'px';
        }
    };
    utils.inherits(Mask, UIBase);
})();


// ui/popup.js
///import core
///import uicore
(function () {
    var utils = baidu.editor.utils,
        uiUtils = baidu.editor.ui.uiUtils,
        domUtils = baidu.editor.dom.domUtils,
        UIBase = baidu.editor.ui.UIBase,
        Popup = baidu.editor.ui.Popup = function (options){
            this.initOptions(options);
            this.initPopup();
        };

    var allPopups = [];
    function closeAllPopup( evt,el ){
        for ( var i = 0; i < allPopups.length; i++ ) {
            var pop = allPopups[i];
            if (!pop.isHidden()) {
                if (pop.queryAutoHide(el) !== false) {
                    if(evt&&/scroll/ig.test(evt.type)&&pop.className=="edui-wordpastepop")   return;
                    pop.hide();
                }
            }
        }

        if(allPopups.length)
            pop.editor.fireEvent("afterhidepop");
    }

    Popup.postHide = closeAllPopup;

    var ANCHOR_CLASSES = ['edui-anchor-topleft','edui-anchor-topright',
        'edui-anchor-bottomleft','edui-anchor-bottomright'];
    Popup.prototype = {
        SHADOW_RADIUS: 5,
        content: null,
        _hidden: false,
        autoRender: true,
        canSideLeft: true,
        canSideUp: true,
        initPopup: function (){
            this.initUIBase();
            allPopups.push( this );
        },
        getHtmlTpl: function (){
            return '<div id="##" class="edui-popup %%" onmousedown="return false;">' +
                ' <div id="##_body" class="edui-popup-body">' +
                ' <iframe style="position:absolute;z-index:-1;left:0;top:0;background-color: transparent;" frameborder="0" width="100%" height="100%" src="about:blank"></iframe>' +
                ' <div class="edui-shadow"></div>' +
                ' <div id="##_content" class="edui-popup-content">' +
                this.getContentHtmlTpl() +
                '  </div>' +
                ' </div>' +
                '</div>';
        },
        getContentHtmlTpl: function (){
            if(this.content){
                if (typeof this.content == 'string') {
                    return this.content;
                }
                return this.content.renderHtml();
            }else{
                return ''
            }

        },
        _UIBase_postRender: UIBase.prototype.postRender,
        postRender: function (){


            if (this.content instanceof UIBase) {
                this.content.postRender();
            }

            //捕获鼠标滚轮
            if( this.captureWheel && !this.captured ) {

                this.captured = true;

                var winHeight = ( document.documentElement.clientHeight || document.body.clientHeight )  - 80,
                    _height = this.getDom().offsetHeight,
                    _top = uiUtils.getClientRect( this.combox.getDom() ).top,
                    content = this.getDom('content'),
                    ifr = this.getDom('body').getElementsByTagName('iframe'),
                    me = this;

                ifr.length && ( ifr = ifr[0] );

                while( _top + _height > winHeight ) {
                    _height -= 30;
                }
                content.style.height = _height + 'px';
                //同步更改iframe高度
                ifr && ( ifr.style.height = _height + 'px' );

                //阻止在combox上的鼠标滚轮事件, 防止用户的正常操作被误解
                if( window.XMLHttpRequest ) {

                    domUtils.on( content, ( 'onmousewheel' in document.body ) ? 'mousewheel' :'DOMMouseScroll' , function(e){

                        if(e.preventDefault) {
                            e.preventDefault();
                        } else {
                            e.returnValue = false;
                        }

                        if( e.wheelDelta ) {

                            content.scrollTop -= ( e.wheelDelta / 120 )*60;

                        } else {

                            content.scrollTop -= ( e.detail / -3 )*60;

                        }

                    });

                } else {

                    //ie6
                    domUtils.on( this.getDom(), 'mousewheel' , function(e){

                        e.returnValue = false;

                        me.getDom('content').scrollTop -= ( e.wheelDelta / 120 )*60;

                    });

                }

            }
            this.fireEvent('postRenderAfter');
            this.hide(true);
            this._UIBase_postRender();
        },
        _doAutoRender: function (){
            if (!this.getDom() && this.autoRender) {
                this.render();
            }
        },
        mesureSize: function (){
            var box = this.getDom('content');
            return uiUtils.getClientRect(box);
        },
        fitSize: function (){
            if( this.captureWheel && this.sized ) {
                return this.__size;
            }
            this.sized = true;
            var popBodyEl = this.getDom('body');
            popBodyEl.style.width = '';
            popBodyEl.style.height = '';
            var size = this.mesureSize();
            if( this.captureWheel ) {
                popBodyEl.style.width =  -(-20 -size.width) + 'px';
                var height = parseInt( this.getDom('content').style.height, 10 );
                !window.isNaN( height ) && ( size.height = height );
            } else {
                popBodyEl.style.width =  size.width + 'px';
            }
            popBodyEl.style.height = size.height + 'px';
            this.__size = size;
            this.captureWheel && (this.getDom('content').style.overflow = 'auto');
            return size;
        },
        showAnchor: function ( element, hoz ){
            this.showAnchorRect( uiUtils.getClientRect( element ), hoz );
        },
        showAnchorRect: function ( rect, hoz, adj ){
            this._doAutoRender();
            var vpRect = uiUtils.getViewportRect();
            this.getDom().style.visibility = 'hidden';
            this._show();
            var popSize = this.fitSize();

            var sideLeft, sideUp, left, top;
            if (hoz) {
                sideLeft = this.canSideLeft && (rect.right + popSize.width > vpRect.right && rect.left > popSize.width);
                sideUp = this.canSideUp && (rect.top + popSize.height > vpRect.bottom && rect.bottom > popSize.height);
                left = (sideLeft ? rect.left - popSize.width : rect.right);
                top = (sideUp ? rect.bottom - popSize.height : rect.top);
            } else {
                sideLeft = this.canSideLeft && (rect.right + popSize.width > vpRect.right && rect.left > popSize.width);
                sideUp = this.canSideUp && (rect.top + popSize.height > vpRect.bottom && rect.bottom > popSize.height);
                left = (sideLeft ? rect.right - popSize.width : rect.left);
                top = (sideUp ? rect.top - popSize.height : rect.bottom);
            }

            var popEl = this.getDom();
            uiUtils.setViewportOffset(popEl, {
                left: left,
                top: top
            });
            domUtils.removeClasses(popEl, ANCHOR_CLASSES);
            popEl.className += ' ' + ANCHOR_CLASSES[(sideUp ? 1 : 0) * 2 + (sideLeft ? 1 : 0)];
            if(this.editor){
                popEl.style.zIndex = this.editor.container.style.zIndex * 1 + 10;
                baidu.editor.ui.uiUtils.getFixedLayer().style.zIndex = popEl.style.zIndex - 1;
            }
            this.getDom().style.visibility = 'visible';

        },
        showAt: function (offset) {
            var left = offset.left;
            var top = offset.top;
            var rect = {
                left: left,
                top: top,
                right: left,
                bottom: top,
                height: 0,
                width: 0
            };
            this.showAnchorRect(rect, false, true);
        },
        _show: function (){
            if (this._hidden) {
                var box = this.getDom();
                box.style.display = '';
                this._hidden = false;
//                if (box.setActive) {
//                    box.setActive();
//                }
                this.fireEvent('show');
            }
        },
        isHidden: function (){
            return this._hidden;
        },
        show: function (){
            this._doAutoRender();
            this._show();
        },
        hide: function (notNofity){
            if (!this._hidden && this.getDom()) {
                this.getDom().style.display = 'none';
                this._hidden = true;
                if (!notNofity) {
                    this.fireEvent('hide');
                }
            }
        },
        queryAutoHide: function (el){
            return !el || !uiUtils.contains(this.getDom(), el);
        }
    };
    utils.inherits(Popup, UIBase);
    
    domUtils.on( document, 'mousedown', function ( evt ) {
        var el = evt.target || evt.srcElement;
        closeAllPopup( evt,el );
    } );
    domUtils.on( window, 'scroll', function (evt,el) {
        closeAllPopup( evt,el );
    } );

})();


// ui/colorpicker.js
///import core
///import uicore
(function (){
    var utils = baidu.editor.utils,
        UIBase = baidu.editor.ui.UIBase,
        ColorPicker = baidu.editor.ui.ColorPicker = function (options){
            this.initOptions(options);
            this.noColorText = this.noColorText || this.editor.getLang("clearColor");
            this.initUIBase();
        };

    ColorPicker.prototype = {
        getHtmlTpl: function (){
            return genColorPicker(this.noColorText,this.editor);
        },
        _onTableClick: function (evt){
            var tgt = evt.target || evt.srcElement;
            var color = tgt.getAttribute('data-color');
            if (color) {
                this.fireEvent('pickcolor', color);
            }
        },
        _onTableOver: function (evt){
            var tgt = evt.target || evt.srcElement;
            var color = tgt.getAttribute('data-color');
            if (color) {
                this.getDom('preview').style.backgroundColor = color;
            }
        },
        _onTableOut: function (){
            this.getDom('preview').style.backgroundColor = '';
        },
        _onPickNoColor: function (){
            this.fireEvent('picknocolor');
        }
    };
    utils.inherits(ColorPicker, UIBase);

    var COLORS = (
        'ffffff,000000,eeece1,1f497d,4f81bd,c0504d,9bbb59,8064a2,4bacc6,f79646,' +
            'f2f2f2,7f7f7f,ddd9c3,c6d9f0,dbe5f1,f2dcdb,ebf1dd,e5e0ec,dbeef3,fdeada,' +
            'd8d8d8,595959,c4bd97,8db3e2,b8cce4,e5b9b7,d7e3bc,ccc1d9,b7dde8,fbd5b5,' +
            'bfbfbf,3f3f3f,938953,548dd4,95b3d7,d99694,c3d69b,b2a2c7,92cddc,fac08f,' +
            'a5a5a5,262626,494429,17365d,366092,953734,76923c,5f497a,31859b,e36c09,' +
            '7f7f7f,0c0c0c,1d1b10,0f243e,244061,632423,4f6128,3f3151,205867,974806,' +
            'c00000,ff0000,ffc000,ffff00,92d050,00b050,00b0f0,0070c0,002060,7030a0,').split(',');

    function genColorPicker(noColorText,editor){
        var html = '<div id="##" class="edui-colorpicker %%">' +
            '<div class="edui-colorpicker-topbar edui-clearfix">' +
            '<div unselectable="on" id="##_preview" class="edui-colorpicker-preview"></div>' +
            '<div unselectable="on" class="edui-colorpicker-nocolor" onclick="$$._onPickNoColor(event, this);">'+ noColorText +'</div>' +
            '</div>' +
            '<table  class="edui-box" style="border-collapse: collapse;" onmouseover="$$._onTableOver(event, this);" onmouseout="$$._onTableOut(event, this);" onclick="return $$._onTableClick(event, this);" cellspacing="0" cellpadding="0">' +
            '<tr style="border-bottom: 1px solid #ddd;font-size: 13px;line-height: 25px;color:#39C;padding-top: 2px"><td colspan="10">'+editor.getLang("themeColor")+'</td> </tr>'+
            '<tr class="edui-colorpicker-tablefirstrow" >';
        for (var i=0; i<COLORS.length; i++) {
            if (i && i%10 === 0) {
                html += '</tr>'+(i==60?'<tr style="border-bottom: 1px solid #ddd;font-size: 13px;line-height: 25px;color:#39C;"><td colspan="10">'+editor.getLang("standardColor")+'</td></tr>':'')+'<tr'+(i==60?' class="edui-colorpicker-tablefirstrow"':'')+'>';
            }
            html += i<70 ? '<td style="padding: 0 2px;"><a hidefocus title="'+COLORS[i]+'" onclick="return false;" href="javascript:" unselectable="on" class="edui-box edui-colorpicker-colorcell"' +
                ' data-color="#'+ COLORS[i] +'"'+
                ' style="background-color:#'+ COLORS[i] +';border:solid #ccc;'+
                (i<10 || i>=60?'border-width:1px;':
                    i>=10&&i<20?'border-width:1px 1px 0 1px;':

                        'border-width:0 1px 0 1px;')+
                '"' +
                '></a></td>':'';
        }
        html += '</tr></table></div>';
        return html;
    }
})();


// ui/tablepicker.js
///import core
///import uicore
(function (){
    var utils = baidu.editor.utils,
        uiUtils = baidu.editor.ui.uiUtils,
        UIBase = baidu.editor.ui.UIBase;
    
    var TablePicker = baidu.editor.ui.TablePicker = function (options){
        this.initOptions(options);
        this.initTablePicker();
    };
    TablePicker.prototype = {
        defaultNumRows: 10,
        defaultNumCols: 10,
        maxNumRows: 20,
        maxNumCols: 20,
        numRows: 10,
        numCols: 10,
        lengthOfCellSide: 22,
        initTablePicker: function (){
            this.initUIBase();
        },
        getHtmlTpl: function (){
            var me = this;
            return '<div id="##" class="edui-tablepicker %%">' +
                 '<div class="edui-tablepicker-body">' +
                  '<div class="edui-infoarea">' +
                   '<span id="##_label" class="edui-label"></span>' +
                  '</div>' +
                  '<div class="edui-pickarea"' +
                   ' onmousemove="$$._onMouseMove(event, this);"' +
                   ' onmouseover="$$._onMouseOver(event, this);"' +
                   ' onmouseout="$$._onMouseOut(event, this);"' +
                   ' onclick="$$._onClick(event, this);"' +
                  '>' +
                    '<div id="##_overlay" class="edui-overlay"></div>' +
                  '</div>' +
                 '</div>' +
                '</div>';
        },
        _UIBase_render: UIBase.prototype.render,
        render: function (holder){
            this._UIBase_render(holder);
            this.getDom('label').innerHTML = '0'+this.editor.getLang("t_row")+' x 0'+this.editor.getLang("t_col");
        },
        _track: function (numCols, numRows){
            var style = this.getDom('overlay').style;
            var sideLen = this.lengthOfCellSide;
            style.width = numCols * sideLen + 'px';
            style.height = numRows * sideLen + 'px';
            var label = this.getDom('label');
            label.innerHTML = numCols +this.editor.getLang("t_col")+' x ' + numRows + this.editor.getLang("t_row");
            this.numCols = numCols;
            this.numRows = numRows;
        },
        _onMouseOver: function (evt, el){
            var rel = evt.relatedTarget || evt.fromElement;
            if (!uiUtils.contains(el, rel) && el !== rel) {
                this.getDom('label').innerHTML = '0'+this.editor.getLang("t_col")+' x 0'+this.editor.getLang("t_row");
                this.getDom('overlay').style.visibility = '';
            }
        },
        _onMouseOut: function (evt, el){
            var rel = evt.relatedTarget || evt.toElement;
            if (!uiUtils.contains(el, rel) && el !== rel) {
                this.getDom('label').innerHTML = '0'+this.editor.getLang("t_col")+' x 0'+this.editor.getLang("t_row");
                this.getDom('overlay').style.visibility = 'hidden';
            }
        },
        _onMouseMove: function (evt, el){
            var style = this.getDom('overlay').style;
            var offset = uiUtils.getEventOffset(evt);
            var sideLen = this.lengthOfCellSide;
            var numCols = Math.ceil(offset.left / sideLen);
            var numRows = Math.ceil(offset.top / sideLen);
            this._track(numCols, numRows);
        },
        _onClick: function (){
            this.fireEvent('picktable', this.numCols, this.numRows);
        }
    };
    utils.inherits(TablePicker, UIBase);
})();


// ui/stateful.js
(function (){
    var browser = baidu.editor.browser,
        domUtils = baidu.editor.dom.domUtils,
        uiUtils = baidu.editor.ui.uiUtils;
    
    var TPL_STATEFUL = 'onmousedown="$$.Stateful_onMouseDown(event, this);"' +
        ' onmouseup="$$.Stateful_onMouseUp(event, this);"' +
        ( browser.ie ? (
        ' onmouseenter="$$.Stateful_onMouseEnter(event, this);"' +
        ' onmouseleave="$$.Stateful_onMouseLeave(event, this);"' )
        : (
        ' onmouseover="$$.Stateful_onMouseOver(event, this);"' +
        ' onmouseout="$$.Stateful_onMouseOut(event, this);"' ));
    
    baidu.editor.ui.Stateful = {
        alwalysHoverable: false,
        target:null,//目标元素和this指向dom不一样
        Stateful_init: function (){
            this._Stateful_dGetHtmlTpl = this.getHtmlTpl;
            this.getHtmlTpl = this.Stateful_getHtmlTpl;
        },
        Stateful_getHtmlTpl: function (){
            var tpl = this._Stateful_dGetHtmlTpl();
            // 使用function避免$转义
            return tpl.replace(/stateful/g, function (){ return TPL_STATEFUL; });
        },
        Stateful_onMouseEnter: function (evt, el){
            this.target=el;
            if (!this.isDisabled() || this.alwalysHoverable) {
                this.addState('hover');
                this.fireEvent('over');
            }
        },
        Stateful_onMouseLeave: function (evt, el){
            if (!this.isDisabled() || this.alwalysHoverable) {
                this.removeState('hover');
                this.removeState('active');
                this.fireEvent('out');
            }
        },
        Stateful_onMouseOver: function (evt, el){
            var rel = evt.relatedTarget;
            if (!uiUtils.contains(el, rel) && el !== rel) {
                this.Stateful_onMouseEnter(evt, el);
            }
        },
        Stateful_onMouseOut: function (evt, el){
            var rel = evt.relatedTarget;
            if (!uiUtils.contains(el, rel) && el !== rel) {
                this.Stateful_onMouseLeave(evt, el);
            }
        },
        Stateful_onMouseDown: function (evt, el){
            if (!this.isDisabled()) {
                this.addState('active');
            }
        },
        Stateful_onMouseUp: function (evt, el){
            if (!this.isDisabled()) {
                this.removeState('active');
            }
        },
        Stateful_postRender: function (){
            if (this.disabled && !this.hasState('disabled')) {
                this.addState('disabled');
            }
        },
        hasState: function (state){
            return domUtils.hasClass(this.getStateDom(), 'edui-state-' + state);
        },
        addState: function (state){
            if (!this.hasState(state)) {
                this.getStateDom().className += ' edui-state-' + state;
            }
        },
        removeState: function (state){
            if (this.hasState(state)) {
                domUtils.removeClasses(this.getStateDom(), ['edui-state-' + state]);
            }
        },
        getStateDom: function (){
            return this.getDom('state');
        },
        isChecked: function (){
            return this.hasState('checked');
        },
        setChecked: function (checked){
            if (!this.isDisabled() && checked) {
                this.addState('checked');
            } else {
                this.removeState('checked');
            }
        },
        isDisabled: function (){
            return this.hasState('disabled');
        },
        setDisabled: function (disabled){
            if (disabled) {
                this.removeState('hover');
                this.removeState('checked');
                this.removeState('active');
                this.addState('disabled');
            } else {
                this.removeState('disabled');
            }
        }
    };
})();


// ui/button.js
///import core
///import uicore
///import ui/stateful.js
(function (){
    var utils = baidu.editor.utils,
        UIBase = baidu.editor.ui.UIBase,
        Stateful = baidu.editor.ui.Stateful,
        Button = baidu.editor.ui.Button = function (options){
            if(options.name){
                var btnName = options.name;
                var cssRules = options.cssRules;
                if(!options.className){
                    options.className =  'edui-for-' + btnName;
                }
                options.cssRules = '.edui-default  .edui-for-'+ btnName +' .edui-icon {'+ cssRules +'}'
            }
            this.initOptions(options);
            this.initButton();
        };
    Button.prototype = {
        uiName: 'button',
        label: '',
        title: '',
        showIcon: true,
        showText: true,
        cssRules:'',
        initButton: function (){
            this.initUIBase();
            this.Stateful_init();
            if(this.cssRules){
                utils.cssRule('edui-customize-'+this.name+'-style',this.cssRules);
            }
        },
        getHtmlTpl: function (){
            return '<div id="##" class="edui-box %%">' +
                '<div id="##_state" stateful>' +
                 '<div class="%%-wrap"><div id="##_body" unselectable="on" ' + (this.title ? 'title="' + this.title + '"' : '') +
                 ' class="%%-body" onmousedown="return $$._onMouseDown(event, this);" onclick="return $$._onClick(event, this);">' +
                  (this.showIcon ? '<div class="edui-box edui-icon"></div>' : '') +
                  (this.showText ? '<div class="edui-box edui-label">' + this.label + '</div>' : '') +
                 '</div>' +
                '</div>' +
                '</div></div>';
        },
        postRender: function (){
            this.Stateful_postRender();
            this.setDisabled(this.disabled)
        },
        _onMouseDown: function (e){
            var target = e.target || e.srcElement,
                tagName = target && target.tagName && target.tagName.toLowerCase();
            if (tagName == 'input' || tagName == 'object' || tagName == 'object') {
                return false;
            }
        },
        _onClick: function (){
            if (!this.isDisabled()) {
                this.fireEvent('click');
            }
        },
        setTitle: function(text){
            var label = this.getDom('label');
            label.innerHTML = text;
        }
    };
    utils.inherits(Button, UIBase);
    utils.extend(Button.prototype, Stateful);

})();


// ui/splitbutton.js
///import core
///import uicore
///import ui/stateful.js
(function (){
    var utils = baidu.editor.utils,
        uiUtils = baidu.editor.ui.uiUtils,
        domUtils = baidu.editor.dom.domUtils,
        UIBase = baidu.editor.ui.UIBase,
        Stateful = baidu.editor.ui.Stateful,
        SplitButton = baidu.editor.ui.SplitButton = function (options){
            this.initOptions(options);
            this.initSplitButton();
        };
    SplitButton.prototype = {
        popup: null,
        uiName: 'splitbutton',
        title: '',
        initSplitButton: function (){
            this.initUIBase();
            this.Stateful_init();
            var me = this;
            if (this.popup != null) {
                var popup = this.popup;
                this.popup = null;
                this.setPopup(popup);
            }
        },
        _UIBase_postRender: UIBase.prototype.postRender,
        postRender: function (){
            this.Stateful_postRender();
            this._UIBase_postRender();
        },
        setPopup: function (popup){
            if (this.popup === popup) return;
            if (this.popup != null) {
                this.popup.dispose();
            }
            popup.addListener('show', utils.bind(this._onPopupShow, this));
            popup.addListener('hide', utils.bind(this._onPopupHide, this));
            popup.addListener('postrender', utils.bind(function (){
                popup.getDom('body').appendChild(
                    uiUtils.createElementByHtml('<div id="' +
                        this.popup.id + '_bordereraser" class="edui-bordereraser edui-background" style="width:' +
                        (uiUtils.getClientRect(this.getDom()).width + 20) + 'px"></div>')
                    );
                popup.getDom().className += ' ' + this.className;
            }, this));
            this.popup = popup;
        },
        _onPopupShow: function (){
            this.addState('opened');
        },
        _onPopupHide: function (){
            this.removeState('opened');
        },
        getHtmlTpl: function (){
            return '<div id="##" class="edui-box %%">' +
                '<div '+ (this.title ? 'title="' + this.title + '"' : '') +' id="##_state" stateful><div class="%%-body">' +
                '<div id="##_button_body" class="edui-box edui-button-body" onclick="$$._onButtonClick(event, this);">' +
                '<div class="edui-box edui-icon"></div>' +
                '</div>' +
                '<div class="edui-box edui-splitborder"></div>' +
                '<div class="edui-box edui-arrow" onclick="$$._onArrowClick();"></div>' +
                '</div></div></div>';
        },
        showPopup: function (){
            // 当popup往上弹出的时候，做特殊处理
            var rect = uiUtils.getClientRect(this.getDom());
            rect.top -= this.popup.SHADOW_RADIUS;
            rect.height += this.popup.SHADOW_RADIUS;
            this.popup.showAnchorRect(rect);
        },
        _onArrowClick: function (event, el){
            if (!this.isDisabled()) {
                this.showPopup();
            }
        },
        _onButtonClick: function (){
            if (!this.isDisabled()) {
                this.fireEvent('buttonclick');
            }
        }
    };
    utils.inherits(SplitButton, UIBase);
    utils.extend(SplitButton.prototype, Stateful, true);

})();


// ui/colorbutton.js
///import core
///import uicore
///import ui/colorpicker.js
///import ui/popup.js
///import ui/splitbutton.js
(function (){
    var utils = baidu.editor.utils,
        uiUtils = baidu.editor.ui.uiUtils,
        ColorPicker = baidu.editor.ui.ColorPicker,
        Popup = baidu.editor.ui.Popup,
        SplitButton = baidu.editor.ui.SplitButton,
        ColorButton = baidu.editor.ui.ColorButton = function (options){
            this.initOptions(options);
            this.initColorButton();
        };
    ColorButton.prototype = {
        initColorButton: function (){
            var me = this;
            this.popup = new Popup({
                content: new ColorPicker({
                    noColorText: me.editor.getLang("clearColor"),
                    editor:me.editor,
                    onpickcolor: function (t, color){
                        me._onPickColor(color);
                    },
                    onpicknocolor: function (t, color){
                        me._onPickNoColor(color);
                    }
                }),
                editor:me.editor
            });
            this.initSplitButton();
        },
        _SplitButton_postRender: SplitButton.prototype.postRender,
        postRender: function (){
            this._SplitButton_postRender();
            this.getDom('button_body').appendChild(
                uiUtils.createElementByHtml('<div id="' + this.id + '_colorlump" class="edui-colorlump"></div>')
            );
            this.getDom().className += ' edui-colorbutton';
        },
        setColor: function (color){
            this.getDom('colorlump').style.backgroundColor = color;
            this.color = color;
        },
        _onPickColor: function (color){
            if (this.fireEvent('pickcolor', color) !== false) {
                this.setColor(color);
                this.popup.hide();
            }
        },
        _onPickNoColor: function (color){
            if (this.fireEvent('picknocolor') !== false) {
                this.popup.hide();
            }
        }
    };
    utils.inherits(ColorButton, SplitButton);

})();


// ui/tablebutton.js
///import core
///import uicore
///import ui/popup.js
///import ui/tablepicker.js
///import ui/splitbutton.js
(function (){
    var utils = baidu.editor.utils,
        Popup = baidu.editor.ui.Popup,
        TablePicker = baidu.editor.ui.TablePicker,
        SplitButton = baidu.editor.ui.SplitButton,
        TableButton = baidu.editor.ui.TableButton = function (options){
            this.initOptions(options);
            this.initTableButton();
        };
    TableButton.prototype = {
        initTableButton: function (){
            var me = this;
            this.popup = new Popup({
                content: new TablePicker({
                    editor:me.editor,
                    onpicktable: function (t, numCols, numRows){
                        me._onPickTable(numCols, numRows);
                    }
                }),
                'editor':me.editor
            });
            this.initSplitButton();
        },
        _onPickTable: function (numCols, numRows){
            if (this.fireEvent('picktable', numCols, numRows) !== false) {
                this.popup.hide();
            }
        }
    };
    utils.inherits(TableButton, SplitButton);

})();


// ui/autotypesetpicker.js
///import core
///import uicore
(function () {
    var utils = baidu.editor.utils,
        UIBase = baidu.editor.ui.UIBase;

    var AutoTypeSetPicker = baidu.editor.ui.AutoTypeSetPicker = function (options) {
        this.initOptions(options);
        this.initAutoTypeSetPicker();
    };
    AutoTypeSetPicker.prototype = {
        initAutoTypeSetPicker:function () {
            this.initUIBase();
        },
        getHtmlTpl:function () {
            var me = this.editor,
                opt = me.options.autotypeset,
                lang = me.getLang("autoTypeSet");

            var textAlignInputName = 'textAlignValue' + me.uid,
                imageBlockInputName = 'imageBlockLineValue' + me.uid,
                symbolConverInputName = 'symbolConverValue' + me.uid;

            return '<div id="##" class="edui-autotypesetpicker %%">' +
                '<div class="edui-autotypesetpicker-body">' +
                '<table >' +
                '<tr><td nowrap><input type="checkbox" name="mergeEmptyline" ' + (opt["mergeEmptyline"] ? "checked" : "" ) + '>' + lang.mergeLine + '</td><td colspan="2"><input type="checkbox" name="removeEmptyline" ' + (opt["removeEmptyline"] ? "checked" : "" ) + '>' + lang.delLine + '</td></tr>' +
                '<tr><td nowrap><input type="checkbox" name="removeClass" ' + (opt["removeClass"] ? "checked" : "" ) + '>' + lang.removeFormat + '</td><td colspan="2"><input type="checkbox" name="indent" ' + (opt["indent"] ? "checked" : "" ) + '>' + lang.indent + '</td></tr>' +
                '<tr>' +
                '<td nowrap><input type="checkbox" name="textAlign" ' + (opt["textAlign"] ? "checked" : "" ) + '>' + lang.alignment + '</td>' +
                '<td colspan="2" id="' + textAlignInputName + '">' +
                '<input type="radio" name="'+ textAlignInputName +'" value="left" ' + ((opt["textAlign"] && opt["textAlign"] == "left") ? "checked" : "") + '>' + me.getLang("justifyleft") +
                '<input type="radio" name="'+ textAlignInputName +'" value="center" ' + ((opt["textAlign"] && opt["textAlign"] == "center") ? "checked" : "") + '>' + me.getLang("justifycenter") +
                '<input type="radio" name="'+ textAlignInputName +'" value="right" ' + ((opt["textAlign"] && opt["textAlign"] == "right") ? "checked" : "") + '>' + me.getLang("justifyright") +
                '</td>' +
                '</tr>' +
                '<tr>' +
                '<td nowrap><input type="checkbox" name="imageBlockLine" ' + (opt["imageBlockLine"] ? "checked" : "" ) + '>' + lang.imageFloat + '</td>' +
                '<td nowrap id="'+ imageBlockInputName +'">' +
                '<input type="radio" name="'+ imageBlockInputName +'" value="none" ' + ((opt["imageBlockLine"] && opt["imageBlockLine"] == "none") ? "checked" : "") + '>' + me.getLang("default") +
                '<input type="radio" name="'+ imageBlockInputName +'" value="left" ' + ((opt["imageBlockLine"] && opt["imageBlockLine"] == "left") ? "checked" : "") + '>' + me.getLang("justifyleft") +
                '<input type="radio" name="'+ imageBlockInputName +'" value="center" ' + ((opt["imageBlockLine"] && opt["imageBlockLine"] == "center") ? "checked" : "") + '>' + me.getLang("justifycenter") +
                '<input type="radio" name="'+ imageBlockInputName +'" value="right" ' + ((opt["imageBlockLine"] && opt["imageBlockLine"] == "right") ? "checked" : "") + '>' + me.getLang("justifyright") +
                '</td>' +
                '</tr>' +
                '<tr><td nowrap><input type="checkbox" name="clearFontSize" ' + (opt["clearFontSize"] ? "checked" : "" ) + '>' + lang.removeFontsize + '</td><td colspan="2"><input type="checkbox" name="clearFontFamily" ' + (opt["clearFontFamily"] ? "checked" : "" ) + '>' + lang.removeFontFamily + '</td></tr>' +
                '<tr><td nowrap colspan="3"><input type="checkbox" name="removeEmptyNode" ' + (opt["removeEmptyNode"] ? "checked" : "" ) + '>' + lang.removeHtml + '</td></tr>' +
                '<tr><td nowrap colspan="3"><input type="checkbox" name="pasteFilter" ' + (opt["pasteFilter"] ? "checked" : "" ) + '>' + lang.pasteFilter + '</td></tr>' +
                '<tr>' +
                '<td nowrap><input type="checkbox" name="symbolConver" ' + (opt["bdc2sb"] || opt["tobdc"] ? "checked" : "" ) + '>' + lang.symbol + '</td>' +
                '<td id="' + symbolConverInputName + '">' +
                '<input type="radio" name="bdc" value="bdc2sb" ' + (opt["bdc2sb"] ? "checked" : "" ) + '>' + lang.bdc2sb +
                '<input type="radio" name="bdc" value="tobdc" ' + (opt["tobdc"] ? "checked" : "" ) + '>' + lang.tobdc + '' +
                '</td>' +
                '<td nowrap align="right"><button >' + lang.run + '</button></td>' +
                '</tr>' +
                '</table>' +
                '</div>' +
                '</div>';


        },
        _UIBase_render:UIBase.prototype.render
    };
    utils.inherits(AutoTypeSetPicker, UIBase);
})();


// ui/autotypesetbutton.js
///import core
///import uicore
///import ui/popup.js
///import ui/autotypesetpicker.js
///import ui/splitbutton.js
(function (){
    var utils = baidu.editor.utils,
        Popup = baidu.editor.ui.Popup,
        AutoTypeSetPicker = baidu.editor.ui.AutoTypeSetPicker,
        SplitButton = baidu.editor.ui.SplitButton,
        AutoTypeSetButton = baidu.editor.ui.AutoTypeSetButton = function (options){
            this.initOptions(options);
            this.initAutoTypeSetButton();
        };
    function getPara(me){

        var opt = {},
            cont = me.getDom(),
            editorId = me.editor.uid,
            inputType = null,
            attrName = null,
            ipts = domUtils.getElementsByTagName(cont,"input");
        for(var i=ipts.length-1,ipt;ipt=ipts[i--];){
            inputType = ipt.getAttribute("type");
            if(inputType=="checkbox"){
                attrName = ipt.getAttribute("name");
                opt[attrName] && delete opt[attrName];
                if(ipt.checked){
                    var attrValue = document.getElementById( attrName + "Value" + editorId );
                    if(attrValue){
                        if(/input/ig.test(attrValue.tagName)){
                            opt[attrName] = attrValue.value;
                        } else {
                            var iptChilds = attrValue.getElementsByTagName("input");
                            for(var j=iptChilds.length-1,iptchild;iptchild=iptChilds[j--];){
                                if(iptchild.checked){
                                    opt[attrName] = iptchild.value;
                                    break;
                                }
                            }
                        }
                    } else {
                        opt[attrName] = true;
                    }
                } else {
                    opt[attrName] = false;
                }
            } else {
                opt[ipt.getAttribute("value")] = ipt.checked;
            }

        }

        var selects = domUtils.getElementsByTagName(cont,"select");
        for(var i=0,si;si=selects[i++];){
            var attr = si.getAttribute('name');
            opt[attr] = opt[attr] ? si.value : '';
        }

        utils.extend(me.editor.options.autotypeset,opt);

        me.editor.setPreferences('autotypeset', opt);
    }

    AutoTypeSetButton.prototype = {
        initAutoTypeSetButton: function (){

            var me = this;
            this.popup = new Popup({
                //传入配置参数
                content: new AutoTypeSetPicker({editor:me.editor}),
                'editor':me.editor,
                hide : function(){
                    if (!this._hidden && this.getDom()) {
                        getPara(this);
                        this.getDom().style.display = 'none';
                        this._hidden = true;
                        this.fireEvent('hide');
                    }
                }
            });
            var flag = 0;
            this.popup.addListener('postRenderAfter',function(){
                var popupUI = this;
                if(flag)return;
                var cont = this.getDom(),
                    btn = cont.getElementsByTagName('button')[0];

                btn.onclick = function(){
                    getPara(popupUI);
                    me.editor.execCommand('autotypeset');
                    popupUI.hide()
                };

                domUtils.on(cont, 'click', function(e) {
                    var target = e.target || e.srcElement,
                        editorId = me.editor.uid;
                    if (target && target.tagName == 'INPUT') {

                        // 点击图片浮动的checkbox,去除对应的radio
                        if (target.name == 'imageBlockLine' || target.name == 'textAlign' || target.name == 'symbolConver') {
                            var checked = target.checked,
                                radioTd = document.getElementById( target.name + 'Value' + editorId),
                                radios = radioTd.getElementsByTagName('input'),
                                defalutSelect = {
                                    'imageBlockLine': 'none',
                                    'textAlign': 'left',
                                    'symbolConver': 'tobdc'
                                };

                            for (var i = 0; i < radios.length; i++) {
                                if (checked) {
                                    if (radios[i].value == defalutSelect[target.name]) {
                                        radios[i].checked = 'checked';
                                    }
                                } else {
                                    radios[i].checked = false;
                                }
                            }
                        }
                        // 点击radio,选中对应的checkbox
                        if (target.name == ('imageBlockLineValue' + editorId) || target.name == ('textAlignValue' + editorId) || target.name == 'bdc') {
                            var checkboxs = target.parentNode.previousSibling.getElementsByTagName('input');
                            checkboxs && (checkboxs[0].checked = true);
                        }

                        getPara(popupUI);
                    }
                });

                flag = 1;
            });
            this.initSplitButton();
        }
    };
    utils.inherits(AutoTypeSetButton, SplitButton);

})();


// ui/cellalignpicker.js
///import core
///import uicore
(function () {
    var utils = baidu.editor.utils,
        Popup = baidu.editor.ui.Popup,
        Stateful = baidu.editor.ui.Stateful,
        UIBase = baidu.editor.ui.UIBase;

    /**
     * 该参数将新增一个参数： selected， 参数类型为一个Object， 形如{ 'align': 'center', 'valign': 'top' }， 表示单元格的初始
     * 对齐状态为： 竖直居上，水平居中; 其中 align的取值为：'center', 'left', 'right'; valign的取值为: 'top', 'middle', 'bottom'
     * @update 2013/4/2 hancong03@baidu.com
     */
    var CellAlignPicker = baidu.editor.ui.CellAlignPicker = function (options) {
        this.initOptions(options);
        this.initSelected();
        this.initCellAlignPicker();
    };
    CellAlignPicker.prototype = {
        //初始化选中状态， 该方法将根据传递进来的参数获取到应该选中的对齐方式图标的索引
        initSelected: function(){

            var status = {

                valign: {
                    top: 0,
                    middle: 1,
                    bottom: 2
                },
                align: {
                    left: 0,
                    center: 1,
                    right: 2
                },
                count: 3

                },
                result = -1;

            if( this.selected ) {
                this.selectedIndex = status.valign[ this.selected.valign ] * status.count + status.align[ this.selected.align ];
            }

        },
        initCellAlignPicker:function () {
            this.initUIBase();
            this.Stateful_init();
        },
        getHtmlTpl:function () {

            var alignType = [ 'left', 'center', 'right' ],
                COUNT = 9,
                tempClassName = null,
                tempIndex = -1,
                tmpl = [];


            for( var i= 0; i<COUNT; i++ ) {

                tempClassName = this.selectedIndex === i ? ' class="edui-cellalign-selected" ' : '';
                tempIndex = i % 3;

                tempIndex === 0 && tmpl.push('<tr>');

                tmpl.push( '<td index="'+ i +'" ' + tempClassName + ' stateful><div class="edui-icon edui-'+ alignType[ tempIndex ] +'"></div></td>' );

                tempIndex === 2 && tmpl.push('</tr>');

            }

            return '<div id="##" class="edui-cellalignpicker %%">' +
                '<div class="edui-cellalignpicker-body">' +
                '<table onclick="$$._onClick(event);">' +
                tmpl.join('') +
                '</table>' +
                '</div>' +
                '</div>';
        },
        getStateDom: function (){
            return this.target;
        },
        _onClick: function (evt){
            var target= evt.target || evt.srcElement;
            if(/icon/.test(target.className)){
                this.items[target.parentNode.getAttribute("index")].onclick();
                Popup.postHide(evt);
            }
        },
        _UIBase_render:UIBase.prototype.render
    };
    utils.inherits(CellAlignPicker, UIBase);
    utils.extend(CellAlignPicker.prototype, Stateful,true);
})();





// ui/pastepicker.js
///import core
///import uicore
(function () {
    var utils = baidu.editor.utils,
        Stateful = baidu.editor.ui.Stateful,
        uiUtils = baidu.editor.ui.uiUtils,
        UIBase = baidu.editor.ui.UIBase;

    var PastePicker = baidu.editor.ui.PastePicker = function (options) {
        this.initOptions(options);
        this.initPastePicker();
    };
    PastePicker.prototype = {
        initPastePicker:function () {
            this.initUIBase();
            this.Stateful_init();
        },
        getHtmlTpl:function () {
            return '<div class="edui-pasteicon" onclick="$$._onClick(this)"></div>' +
                '<div class="edui-pastecontainer">' +
                '<div class="edui-title">' + this.editor.getLang("pasteOpt") + '</div>' +
                '<div class="edui-button">' +
                '<div title="' + this.editor.getLang("pasteSourceFormat") + '" onclick="$$.format(false)" stateful>' +
                '<div class="edui-richtxticon"></div></div>' +
                '<div title="' + this.editor.getLang("tagFormat") + '" onclick="$$.format(2)" stateful>' +
                '<div class="edui-tagicon"></div></div>' +
                '<div title="' + this.editor.getLang("pasteTextFormat") + '" onclick="$$.format(true)" stateful>' +
                '<div class="edui-plaintxticon"></div></div>' +
                '</div>' +
                '</div>' +
                '</div>'
        },
        getStateDom:function () {
            return this.target;
        },
        format:function (param) {
            this.editor.ui._isTransfer = true;
            this.editor.fireEvent('pasteTransfer', param);
        },
        _onClick:function (cur) {
            var node = domUtils.getNextDomNode(cur),
                screenHt = uiUtils.getViewportRect().height,
                subPop = uiUtils.getClientRect(node);

            if ((subPop.top + subPop.height) > screenHt)
                node.style.top = (-subPop.height - cur.offsetHeight) + "px";
            else
                node.style.top = "";

            if (/hidden/ig.test(domUtils.getComputedStyle(node, "visibility"))) {
                node.style.visibility = "visible";
                domUtils.addClass(cur, "edui-state-opened");
            } else {
                node.style.visibility = "hidden";
                domUtils.removeClasses(cur, "edui-state-opened")
            }
        },
        _UIBase_render:UIBase.prototype.render
    };
    utils.inherits(PastePicker, UIBase);
    utils.extend(PastePicker.prototype, Stateful, true);
})();






// ui/toolbar.js
(function (){
    var utils = baidu.editor.utils,
        uiUtils = baidu.editor.ui.uiUtils,
        UIBase = baidu.editor.ui.UIBase,
        Toolbar = baidu.editor.ui.Toolbar = function (options){
            this.initOptions(options);
            this.initToolbar();
        };
    Toolbar.prototype = {
        items: null,
        initToolbar: function (){
            this.items = this.items || [];
            this.initUIBase();
        },
        add: function (item,index){
            if(index === undefined){
                this.items.push(item);
            }else{
                this.items.splice(index,0,item)
            }

        },
        getHtmlTpl: function (){
            var buff = [];
            for (var i=0; i<this.items.length; i++) {
                buff[i] = this.items[i].renderHtml();
            }
            return '<div id="##" class="edui-toolbar %%" onselectstart="return false;" onmousedown="return $$._onMouseDown(event, this);">' +
                buff.join('') +
                '</div>'
        },
        postRender: function (){
            var box = this.getDom();
            for (var i=0; i<this.items.length; i++) {
                this.items[i].postRender();
            }
            uiUtils.makeUnselectable(box);
        },
        _onMouseDown: function (e){
            var target = e.target || e.srcElement,
                tagName = target && target.tagName && target.tagName.toLowerCase();
            if (tagName == 'input' || tagName == 'object' || tagName == 'object') {
                return false;
            }
        }
    };
    utils.inherits(Toolbar, UIBase);

})();


// ui/menu.js
///import core
///import uicore
///import ui\popup.js
///import ui\stateful.js
(function () {
    var utils = baidu.editor.utils,
        domUtils = baidu.editor.dom.domUtils,
        uiUtils = baidu.editor.ui.uiUtils,
        UIBase = baidu.editor.ui.UIBase,
        Popup = baidu.editor.ui.Popup,
        Stateful = baidu.editor.ui.Stateful,
        CellAlignPicker = baidu.editor.ui.CellAlignPicker,

        Menu = baidu.editor.ui.Menu = function (options) {
            this.initOptions(options);
            this.initMenu();
        };

    var menuSeparator = {
        renderHtml:function () {
            return '<div class="edui-menuitem edui-menuseparator"><div class="edui-menuseparator-inner"></div></div>';
        },
        postRender:function () {
        },
        queryAutoHide:function () {
            return true;
        }
    };
    Menu.prototype = {
        items:null,
        uiName:'menu',
        initMenu:function () {
            this.items = this.items || [];
            this.initPopup();
            this.initItems();
        },
        initItems:function () {
            for (var i = 0; i < this.items.length; i++) {
                var item = this.items[i];
                if (item == '-') {
                    this.items[i] = this.getSeparator();
                } else if (!(item instanceof MenuItem)) {
                    item.editor = this.editor;
                    item.theme = this.editor.options.theme;
                    this.items[i] = this.createItem(item);
                }
            }
        },
        getSeparator:function () {
            return menuSeparator;
        },
        createItem:function (item) {
            //新增一个参数menu, 该参数存储了menuItem所对应的menu引用
            item.menu = this;
            return new MenuItem(item);
        },
        _Popup_getContentHtmlTpl:Popup.prototype.getContentHtmlTpl,
        getContentHtmlTpl:function () {
            if (this.items.length == 0) {
                return this._Popup_getContentHtmlTpl();
            }
            var buff = [];
            for (var i = 0; i < this.items.length; i++) {
                var item = this.items[i];
                buff[i] = item.renderHtml();
            }
            return ('<div class="%%-body">' + buff.join('') + '</div>');
        },
        _Popup_postRender:Popup.prototype.postRender,
        postRender:function () {
            var me = this;
            for (var i = 0; i < this.items.length; i++) {
                var item = this.items[i];
                item.ownerMenu = this;
                item.postRender();
            }
            domUtils.on(this.getDom(), 'mouseover', function (evt) {
                evt = evt || event;
                var rel = evt.relatedTarget || evt.fromElement;
                var el = me.getDom();
                if (!uiUtils.contains(el, rel) && el !== rel) {
                    me.fireEvent('over');
                }
            });
            this._Popup_postRender();
        },
        queryAutoHide:function (el) {
            if (el) {
                if (uiUtils.contains(this.getDom(), el)) {
                    return false;
                }
                for (var i = 0; i < this.items.length; i++) {
                    var item = this.items[i];
                    if (item.queryAutoHide(el) === false) {
                        return false;
                    }
                }
            }
        },
        clearItems:function () {
            for (var i = 0; i < this.items.length; i++) {
                var item = this.items[i];
                clearTimeout(item._showingTimer);
                clearTimeout(item._closingTimer);
                if (item.subMenu) {
                    item.subMenu.destroy();
                }
            }
            this.items = [];
        },
        destroy:function () {
            if (this.getDom()) {
                domUtils.remove(this.getDom());
            }
            this.clearItems();
        },
        dispose:function () {
            this.destroy();
        }
    };
    utils.inherits(Menu, Popup);

    /**
     * @update 2013/04/03 hancong03 新增一个参数menu, 该参数存储了menuItem所对应的menu引用
     * @type {Function}
     */
    var MenuItem = baidu.editor.ui.MenuItem = function (options) {
        this.initOptions(options);
        this.initUIBase();
        this.Stateful_init();
        if (this.subMenu && !(this.subMenu instanceof Menu)) {
            if (options.className && options.className.indexOf("aligntd") != -1) {
                var me = this;

                //获取单元格对齐初始状态
                this.subMenu.selected = this.editor.queryCommandValue( 'cellalignment' );

                this.subMenu = new Popup({
                    content:new CellAlignPicker(this.subMenu),
                    parentMenu:me,
                    editor:me.editor,
                    destroy:function () {
                        if (this.getDom()) {
                            domUtils.remove(this.getDom());
                        }
                    }
                });
                this.subMenu.addListener("postRenderAfter", function () {
                    domUtils.on(this.getDom(), "mouseover", function () {
                        me.addState('opened');
                    });
                });
            } else {
                this.subMenu = new Menu(this.subMenu);
            }
        }
    };
    MenuItem.prototype = {
        label:'',
        subMenu:null,
        ownerMenu:null,
        uiName:'menuitem',
        alwalysHoverable:true,
        getHtmlTpl:function () {
            return '<div id="##" class="%%" stateful onclick="$$._onClick(event, this);">' +
                '<div class="%%-body">' +
                this.renderLabelHtml() +
                '</div>' +
                '</div>';
        },
        postRender:function () {
            var me = this;
            this.addListener('over', function () {
                me.ownerMenu.fireEvent('submenuover', me);
                if (me.subMenu) {
                    me.delayShowSubMenu();
                }
            });
            if (this.subMenu) {
                this.getDom().className += ' edui-hassubmenu';
                this.subMenu.render();
                this.addListener('out', function () {
                    me.delayHideSubMenu();
                });
                this.subMenu.addListener('over', function () {
                    clearTimeout(me._closingTimer);
                    me._closingTimer = null;
                    me.addState('opened');
                });
                this.ownerMenu.addListener('hide', function () {
                    me.hideSubMenu();
                });
                this.ownerMenu.addListener('submenuover', function (t, subMenu) {
                    if (subMenu !== me) {
                        me.delayHideSubMenu();
                    }
                });
                this.subMenu._bakQueryAutoHide = this.subMenu.queryAutoHide;
                this.subMenu.queryAutoHide = function (el) {
                    if (el && uiUtils.contains(me.getDom(), el)) {
                        return false;
                    }
                    return this._bakQueryAutoHide(el);
                };
            }
            this.getDom().style.tabIndex = '-1';
            uiUtils.makeUnselectable(this.getDom());
            this.Stateful_postRender();
        },
        delayShowSubMenu:function () {
            var me = this;
            if (!me.isDisabled()) {
                me.addState('opened');
                clearTimeout(me._showingTimer);
                clearTimeout(me._closingTimer);
                me._closingTimer = null;
                me._showingTimer = setTimeout(function () {
                    me.showSubMenu();
                }, 250);
            }
        },
        delayHideSubMenu:function () {
            var me = this;
            if (!me.isDisabled()) {
                me.removeState('opened');
                clearTimeout(me._showingTimer);
                if (!me._closingTimer) {
                    me._closingTimer = setTimeout(function () {
                        if (!me.hasState('opened')) {
                            me.hideSubMenu();
                        }
                        me._closingTimer = null;
                    }, 400);
                }
            }
        },
        renderLabelHtml:function () {
            return '<div class="edui-arrow"></div>' +
                '<div class="edui-box edui-icon"></div>' +
                '<div class="edui-box edui-label %%-label">' + (this.label || '') + '</div>';
        },
        getStateDom:function () {
            return this.getDom();
        },
        queryAutoHide:function (el) {
            if (this.subMenu && this.hasState('opened')) {
                return this.subMenu.queryAutoHide(el);
            }
        },
        _onClick:function (event, this_) {
            if (this.hasState('disabled')) return;
            if (this.fireEvent('click', event, this_) !== false) {
                if (this.subMenu) {
                    this.showSubMenu();
                } else {
                    Popup.postHide(event);
                }
            }
        },
        showSubMenu:function () {
            var rect = uiUtils.getClientRect(this.getDom());
            rect.right -= 5;
            rect.left += 2;
            rect.width -= 7;
            rect.top -= 4;
            rect.bottom += 4;
            rect.height += 8;
            this.subMenu.showAnchorRect(rect, true, true);
        },
        hideSubMenu:function () {
            this.subMenu.hide();
        }
    };
    utils.inherits(MenuItem, UIBase);
    utils.extend(MenuItem.prototype, Stateful, true);
})();


// ui/combox.js
///import core
///import uicore
///import ui/menu.js
///import ui/splitbutton.js
(function (){
    // todo: menu和item提成通用list
    var utils = baidu.editor.utils,
        uiUtils = baidu.editor.ui.uiUtils,
        Menu = baidu.editor.ui.Menu,
        SplitButton = baidu.editor.ui.SplitButton,
        Combox = baidu.editor.ui.Combox = function (options){
            this.initOptions(options);
            this.initCombox();
        };
    Combox.prototype = {
        uiName: 'combox',
        onbuttonclick:function () {
            this.showPopup();
        },
        initCombox: function (){
            var me = this;
            this.items = this.items || [];
            for (var i=0; i<this.items.length; i++) {
                var item = this.items[i];
                item.uiName = 'listitem';
                item.index = i;
                item.onclick = function (){
                    me.selectByIndex(this.index);
                };
            }
            this.popup = new Menu({
                items: this.items,
                uiName: 'list',
                editor:this.editor,
                captureWheel: true,
                combox: this
            });

            this.initSplitButton();
        },
        _SplitButton_postRender: SplitButton.prototype.postRender,
        postRender: function (){
            this._SplitButton_postRender();
            this.setLabel(this.label || '');
            this.setValue(this.initValue || '');
        },
        showPopup: function (){
            var rect = uiUtils.getClientRect(this.getDom());
            rect.top += 1;
            rect.bottom -= 1;
            rect.height -= 2;
            this.popup.showAnchorRect(rect);
        },
        getValue: function (){
            return this.value;
        },
        setValue: function (value){
            var index = this.indexByValue(value);
            if (index != -1) {
                this.selectedIndex = index;
                this.setLabel(this.items[index].label);
                this.value = this.items[index].value;
            } else {
                this.selectedIndex = -1;
                this.setLabel(this.getLabelForUnknowValue(value));
                this.value = value;
            }
        },
        setLabel: function (label){
            this.getDom('button_body').innerHTML = label;
            this.label = label;
        },
        getLabelForUnknowValue: function (value){
            return value;
        },
        indexByValue: function (value){
            for (var i=0; i<this.items.length; i++) {
                if (value == this.items[i].value) {
                    return i;
                }
            }
            return -1;
        },
        getItem: function (index){
            return this.items[index];
        },
        selectByIndex: function (index){
            if (index < this.items.length && this.fireEvent('select', index) !== false) {
                this.selectedIndex = index;
                this.value = this.items[index].value;
                this.setLabel(this.items[index].label);
            }
        }
    };
    utils.inherits(Combox, SplitButton);
})();


// ui/dialog.js
///import core
///import uicore
///import ui/mask.js
///import ui/button.js
(function (){
    var utils = baidu.editor.utils,
        domUtils = baidu.editor.dom.domUtils,
        uiUtils = baidu.editor.ui.uiUtils,
        Mask = baidu.editor.ui.Mask,
        UIBase = baidu.editor.ui.UIBase,
        Button = baidu.editor.ui.Button,
        Dialog = baidu.editor.ui.Dialog = function (options){
            if(options.name){
                var name = options.name;
                var cssRules = options.cssRules;
                if(!options.className){
                    options.className =  'edui-for-' + name;
                }
                if(cssRules){
                    options.cssRules = '.edui-default .edui-for-'+ name +' .edui-dialog-content  {'+ cssRules +'}'
                }
            }
            this.initOptions(utils.extend({
                autoReset: true,
                draggable: true,
                onok: function (){},
                oncancel: function (){},
                onclose: function (t, ok){
                    return ok ? this.onok() : this.oncancel();
                },
                //是否控制dialog中的scroll事件， 默认为不阻止
                holdScroll: false
            },options));
            this.initDialog();
        };
    var modalMask;
    var dragMask;
    var activeDialog;
    Dialog.prototype = {
        draggable: false,
        uiName: 'dialog',
        initDialog: function (){
            var me = this,
                theme=this.editor.options.theme;
            if(this.cssRules){
                utils.cssRule('edui-customize-'+this.name+'-style',this.cssRules);
            }
            this.initUIBase();
            this.modalMask = (modalMask || (modalMask = new Mask({
                className: 'edui-dialog-modalmask',
                theme:theme,
                onclick: function (){
                    activeDialog && activeDialog.close(false);
                }
            })));
            this.dragMask = (dragMask || (dragMask = new Mask({
                className: 'edui-dialog-dragmask',
                theme:theme
            })));
            this.closeButton = new Button({
                className: 'edui-dialog-closebutton',
                title: me.closeDialog,
                theme:theme,
                onclick: function (){
                    me.close(false);
                }
            });

            this.fullscreen && this.initResizeEvent();

            if (this.buttons) {
                for (var i=0; i<this.buttons.length; i++) {
                    if (!(this.buttons[i] instanceof Button)) {
                        this.buttons[i] = new Button(utils.extend(this.buttons[i],{
                            editor : this.editor
                        },true));
                    }
                }
            }
        },
        initResizeEvent: function () {

            var me = this;

            domUtils.on( window, "resize", function () {

                if ( me._hidden || me._hidden === undefined ) {
                    return;
                }

                if ( me.__resizeTimer ) {
                    window.clearTimeout( me.__resizeTimer );
                }

                me.__resizeTimer = window.setTimeout( function () {

                    me.__resizeTimer = null;

                    var dialogWrapNode = me.getDom(),
                        contentNode = me.getDom('content'),
                        wrapRect = UE.ui.uiUtils.getClientRect( dialogWrapNode ),
                        contentRect = UE.ui.uiUtils.getClientRect( contentNode ),
                        vpRect = uiUtils.getViewportRect();

                    contentNode.style.width = ( vpRect.width - wrapRect.width + contentRect.width ) + "px";
                    contentNode.style.height = ( vpRect.height - wrapRect.height + contentRect.height ) + "px";

                    dialogWrapNode.style.width = vpRect.width + "px";
                    dialogWrapNode.style.height = vpRect.height + "px";

                    me.fireEvent( "resize" );

                }, 100 );

            } );

        },
        fitSize: function (){
            var popBodyEl = this.getDom('body');
//            if (!(baidu.editor.browser.ie && baidu.editor.browser.version == 7)) {
//                uiUtils.removeStyle(popBodyEl, 'width');
//                uiUtils.removeStyle(popBodyEl, 'height');
//            }
            var size = this.mesureSize();
            popBodyEl.style.width = size.width + 'px';
            popBodyEl.style.height = size.height + 'px';
            return size;
        },
        safeSetOffset: function (offset){
            var me = this;
            var el = me.getDom();
            var vpRect = uiUtils.getViewportRect();
            var rect = uiUtils.getClientRect(el);
            var left = offset.left;
            if (left + rect.width > vpRect.right) {
                left = vpRect.right - rect.width;
            }
            var top = offset.top;
            if (top + rect.height > vpRect.bottom) {
                top = vpRect.bottom - rect.height;
            }
            el.style.left = Math.max(left, 0) + 'px';
            el.style.top = Math.max(top, 0) + 'px';
        },
        showAtCenter: function (){

            var vpRect = uiUtils.getViewportRect();

            if ( !this.fullscreen ) {
                this.getDom().style.display = '';
                var popSize = this.fitSize();
                var titleHeight = this.getDom('titlebar').offsetHeight | 0;
                var left = vpRect.width / 2 - popSize.width / 2;
                var top = vpRect.height / 2 - (popSize.height - titleHeight) / 2 - titleHeight;
                var popEl = this.getDom();
                this.safeSetOffset({
                    left: Math.max(left | 0, 0),
                    top: Math.max(top | 0, 0)
                });
                if (!domUtils.hasClass(popEl, 'edui-state-centered')) {
                    popEl.className += ' edui-state-centered';
                }
            } else {
                var dialogWrapNode = this.getDom(),
                    contentNode = this.getDom('content');

                dialogWrapNode.style.display = "block";

                var wrapRect = UE.ui.uiUtils.getClientRect( dialogWrapNode ),
                    contentRect = UE.ui.uiUtils.getClientRect( contentNode );
                dialogWrapNode.style.left = "-100000px";

                contentNode.style.width = ( vpRect.width - wrapRect.width + contentRect.width ) + "px";
                contentNode.style.height = ( vpRect.height - wrapRect.height + contentRect.height ) + "px";

                dialogWrapNode.style.width = vpRect.width + "px";
                dialogWrapNode.style.height = vpRect.height + "px";
                dialogWrapNode.style.left = 0;

                //保存环境的overflow值
                this._originalContext = {
                    html: {
                        overflowX: document.documentElement.style.overflowX,
                        overflowY: document.documentElement.style.overflowY
                    },
                    body: {
                        overflowX: document.body.style.overflowX,
                        overflowY: document.body.style.overflowY
                    }
                };

                document.documentElement.style.overflowX = 'hidden';
                document.documentElement.style.overflowY = 'hidden';
                document.body.style.overflowX = 'hidden';
                document.body.style.overflowY = 'hidden';

            }

            this._show();
        },
        getContentHtml: function (){
            var contentHtml = '';
            if (typeof this.content == 'string') {
                contentHtml = this.content;
            } else if (this.iframeUrl) {
                contentHtml = '<span id="'+ this.id +'_contmask" class="dialogcontmask"></span><iframe id="'+ this.id +
                    '_iframe" class="%%-iframe" height="100%" width="100%" frameborder="0" src="'+ this.iframeUrl +'"></iframe>';
            }
            return contentHtml;
        },
        getHtmlTpl: function (){
            var footHtml = '';

            if (this.buttons) {
                var buff = [];
                for (var i=0; i<this.buttons.length; i++) {
                    buff[i] = this.buttons[i].renderHtml();
                }
                footHtml = '<div class="%%-foot">' +
                     '<div id="##_buttons" class="%%-buttons">' + buff.join('') + '</div>' +
                    '</div>';
            }

            return '<div id="##" class="%%"><div '+ ( !this.fullscreen ? 'class="%%"' : 'class="%%-wrap edui-dialog-fullscreen-flag"' ) +'><div id="##_body" class="%%-body">' +
                '<div class="%%-shadow"></div>' +
                '<div id="##_titlebar" class="%%-titlebar">' +
                '<div class="%%-draghandle" onmousedown="$$._onTitlebarMouseDown(event, this);">' +
                 '<span class="%%-caption">' + (this.title || '') + '</span>' +
                '</div>' +
                this.closeButton.renderHtml() +
                '</div>' +
                '<div id="##_content" class="%%-content">'+ ( this.autoReset ? '' : this.getContentHtml()) +'</div>' +
                footHtml +
                '</div></div></div>';
        },
        postRender: function (){
            // todo: 保持居中/记住上次关闭位置选项
            if (!this.modalMask.getDom()) {
                this.modalMask.render();
                this.modalMask.hide();
            }
            if (!this.dragMask.getDom()) {
                this.dragMask.render();
                this.dragMask.hide();
            }
            var me = this;
            this.addListener('show', function (){
                me.modalMask.show(this.getDom().style.zIndex - 2);
            });
            this.addListener('hide', function (){
                me.modalMask.hide();
            });
            if (this.buttons) {
                for (var i=0; i<this.buttons.length; i++) {
                    this.buttons[i].postRender();
                }
            }
            domUtils.on(window, 'resize', function (){
                setTimeout(function (){
                    if (!me.isHidden()) {
                        me.safeSetOffset(uiUtils.getClientRect(me.getDom()));
                    }
                });
            });

            //hold住scroll事件，防止dialog的滚动影响页面
//            if( this.holdScroll ) {
//
//                if( !me.iframeUrl ) {
//                    domUtils.on( document.getElementById( me.id + "_iframe"), !browser.gecko ? "mousewheel" : "DOMMouseScroll", function(e){
//                        domUtils.preventDefault(e);
//                    } );
//                } else {
//                    me.addListener('dialogafterreset', function(){
//                        window.setTimeout(function(){
//                            var iframeWindow = document.getElementById( me.id + "_iframe").contentWindow;
//
//                            if( browser.ie ) {
//
//                                var timer = window.setInterval(function(){
//
//                                    if( iframeWindow.document && iframeWindow.document.body ) {
//                                        window.clearInterval( timer );
//                                        timer = null;
//                                        domUtils.on( iframeWindow.document.body, !browser.gecko ? "mousewheel" : "DOMMouseScroll", function(e){
//                                            domUtils.preventDefault(e);
//                                        } );
//                                    }
//
//                                }, 100);
//
//                            } else {
//                                domUtils.on( iframeWindow, !browser.gecko ? "mousewheel" : "DOMMouseScroll", function(e){
//                                    domUtils.preventDefault(e);
//                                } );
//                            }
//
//                        }, 1);
//                    });
//                }
//
//            }
            this._hide();
        },
        mesureSize: function (){
            var body = this.getDom('body');
            var width = uiUtils.getClientRect(this.getDom('content')).width;
            var dialogBodyStyle = body.style;
            dialogBodyStyle.width = width;
            return uiUtils.getClientRect(body);
        },
        _onTitlebarMouseDown: function (evt, el){
            if (this.draggable) {
                var rect;
                var vpRect = uiUtils.getViewportRect();
                var me = this;
                uiUtils.startDrag(evt, {
                    ondragstart: function (){
                        rect = uiUtils.getClientRect(me.getDom());
                        me.getDom('contmask').style.visibility = 'visible';
                        me.dragMask.show(me.getDom().style.zIndex - 1);
                    },
                    ondragmove: function (x, y){
                        var left = rect.left + x;
                        var top = rect.top + y;
                        me.safeSetOffset({
                            left: left,
                            top: top
                        });
                    },
                    ondragstop: function (){
                        me.getDom('contmask').style.visibility = 'hidden';
                        domUtils.removeClasses(me.getDom(), ['edui-state-centered']);
                        me.dragMask.hide();
                    }
                });
            }
        },
        reset: function (){
            this.getDom('content').innerHTML = this.getContentHtml();
            this.fireEvent('dialogafterreset');
        },
        _show: function (){
            if (this._hidden) {
                this.getDom().style.display = '';

                //要高过编辑器的zindxe
                this.editor.container.style.zIndex && (this.getDom().style.zIndex = this.editor.container.style.zIndex * 1 + 10);
                this._hidden = false;
                this.fireEvent('show');
                baidu.editor.ui.uiUtils.getFixedLayer().style.zIndex = this.getDom().style.zIndex - 4;
            }
        },
        isHidden: function (){
            return this._hidden;
        },
        _hide: function (){
            if (!this._hidden) {
                var wrapNode = this.getDom();
                wrapNode.style.display = 'none';
                wrapNode.style.zIndex = '';
                wrapNode.style.width = '';
                wrapNode.style.height = '';
                this._hidden = true;
                this.fireEvent('hide');
            }
        },
        open: function (){
            if (this.autoReset) {
                //有可能还没有渲染
                try{
                    this.reset();
                }catch(e){
                    this.render();
                    this.open()
                }
            }
            this.showAtCenter();
            if (this.iframeUrl) {
                try {
                    this.getDom('iframe').focus();
                } catch(ex){}
            }
            activeDialog = this;
        },
        _onCloseButtonClick: function (evt, el){
            this.close(false);
        },
        close: function (ok){
            if (this.fireEvent('close', ok) !== false) {
                //还原环境
                if ( this.fullscreen ) {

                    document.documentElement.style.overflowX = this._originalContext.html.overflowX;
                    document.documentElement.style.overflowY = this._originalContext.html.overflowY;
                    document.body.style.overflowX = this._originalContext.body.overflowX;
                    document.body.style.overflowY = this._originalContext.body.overflowY;
                    delete this._originalContext;

                }
                this._hide();

                //销毁content
                var content = this.getDom('content');
                var iframe = this.getDom('iframe');
                if (content && iframe) {
                    var doc = iframe.contentDocument || iframe.contentWindow.document;
                    doc && (doc.body.innerHTML = '');
                    domUtils.remove(content);
                }
            }
        }
    };
    utils.inherits(Dialog, UIBase);
})();


// ui/menubutton.js
///import core
///import uicore
///import ui/menu.js
///import ui/splitbutton.js
(function (){
    var utils = baidu.editor.utils,
        Menu = baidu.editor.ui.Menu,
        SplitButton = baidu.editor.ui.SplitButton,
        MenuButton = baidu.editor.ui.MenuButton = function (options){
            this.initOptions(options);
            this.initMenuButton();
        };
    MenuButton.prototype = {
        initMenuButton: function (){
            var me = this;
            this.uiName = "menubutton";
            this.popup = new Menu({
                items: me.items,
                className: me.className,
                editor:me.editor
            });
            this.popup.addListener('show', function (){
                var list = this;
                for (var i=0; i<list.items.length; i++) {
                    list.items[i].removeState('checked');
                    if (list.items[i].value == me._value) {
                        list.items[i].addState('checked');
                        this.value = me._value;
                    }
                }
            });
            this.initSplitButton();
        },
        setValue : function(value){
            this._value = value;
        }
        
    };
    utils.inherits(MenuButton, SplitButton);
})();

// ui/multiMenu.js
///import core
///import uicore
 ///commands 表情
(function(){
    var utils = baidu.editor.utils,
        Popup = baidu.editor.ui.Popup,
        SplitButton = baidu.editor.ui.SplitButton,
        MultiMenuPop = baidu.editor.ui.MultiMenuPop = function(options){
            this.initOptions(options);
            this.initMultiMenu();
        };

    MultiMenuPop.prototype = {
        initMultiMenu: function (){
            var me = this;
            this.popup = new Popup({
                content: '',
                editor : me.editor,
                iframe_rendered: false,
                onshow: function (){
                    if (!this.iframe_rendered) {
                        this.iframe_rendered = true;
                        this.getDom('content').innerHTML = '<iframe id="'+me.id+'_iframe" src="'+ me.iframeUrl +'" frameborder="0"></iframe>';
                        me.editor.container.style.zIndex && (this.getDom().style.zIndex = me.editor.container.style.zIndex * 1 + 1);
                    }
                }
               // canSideUp:false,
               // canSideLeft:false
            });
            this.onbuttonclick = function(){
                this.showPopup();
            };
            this.initSplitButton();
        }

    };

    utils.inherits(MultiMenuPop, SplitButton);
})();


// ui/shortcutmenu.js
(function () {
    var UI = baidu.editor.ui,
        UIBase = UI.UIBase,
        uiUtils = UI.uiUtils,
        utils = baidu.editor.utils,
        domUtils = baidu.editor.dom.domUtils;

    var allMenus = [],//存储所有快捷菜单
        timeID,
        isSubMenuShow = false;//是否有子pop显示

    var ShortCutMenu = UI.ShortCutMenu = function (options) {
        this.initOptions (options);
        this.initShortCutMenu ();
    };

    ShortCutMenu.postHide = hideAllMenu;

    ShortCutMenu.prototype = {
        isHidden : true ,
        SPACE : 5 ,
        initShortCutMenu : function () {
            this.items = this.items || [];
            this.initUIBase ();
            this.initItems ();
            this.initEvent ();
            allMenus.push (this);
        } ,
        initEvent : function () {
            var me = this,
                doc = me.editor.document;

            domUtils.on (doc , "mousemove" , function (e) {
                if (me.isHidden === false) {
                    //有pop显示就不隐藏快捷菜单
                    if (me.getSubMenuMark () || me.eventType == "contextmenu")   return;


                    var flag = true,
                        el = me.getDom (),
                        wt = el.offsetWidth,
                        ht = el.offsetHeight,
                        distanceX = wt / 2 + me.SPACE,//距离中心X标准
                        distanceY = ht / 2,//距离中心Y标准
                        x = Math.abs (e.screenX - me.left),//离中心距离横坐标
                        y = Math.abs (e.screenY - me.top);//离中心距离纵坐标

                    clearTimeout (timeID);
                    timeID = setTimeout (function () {
                        if (y > 0 && y < distanceY) {
                            me.setOpacity (el , "1");
                        } else if (y > distanceY && y < distanceY + 70) {
                            me.setOpacity (el , "0.5");
                            flag = false;
                        } else if (y > distanceY + 70 && y < distanceY + 140) {
                            me.hide ();
                        }

                        if (flag && x > 0 && x < distanceX) {
                            me.setOpacity (el , "1")
                        } else if (x > distanceX && x < distanceX + 70) {
                            me.setOpacity (el , "0.5")
                        } else if (x > distanceX + 70 && x < distanceX + 140) {
                            me.hide ();
                        }
                    });
                }
            });

            //ie\ff下 mouseout不准
            if (browser.chrome) {
                domUtils.on (doc , "mouseout" , function (e) {
                    var relatedTgt = e.relatedTarget || e.toElement;

                    if (relatedTgt == null || relatedTgt.tagName == "HTML") {
                        me.hide ();
                    }
                });
            }

            me.editor.addListener ("afterhidepop" , function () {
                if (!me.isHidden) {
                    isSubMenuShow = true;
                }
            });

        } ,
        initItems : function () {
            if (utils.isArray (this.items)) {
                for (var i = 0, len = this.items.length ; i < len ; i++) {
                    var item = this.items[i].toLowerCase ();

                    if (UI[item]) {
                        this.items[i] = new UI[item] (this.editor);
                        this.items[i].className += " edui-shortcutsubmenu ";
                    }
                }
            }
        } ,
        setOpacity : function (el , value) {
            if (browser.ie && browser.version < 9) {
                el.style.filter = "alpha(opacity = " + parseFloat (value) * 100 + ");"
            } else {
                el.style.opacity = value;
            }
        } ,
        getSubMenuMark : function () {
            isSubMenuShow = false;
            var layerEle = uiUtils.getFixedLayer ();
            var list = domUtils.getElementsByTagName (layerEle , "div" , function (node) {
                return domUtils.hasClass (node , "edui-shortcutsubmenu edui-popup")
            });

            for (var i = 0, node ; node = list[i++] ;) {
                if (node.style.display != "none") {
                    isSubMenuShow = true;
                }
            }
            return isSubMenuShow;
        } ,
        show : function (e , hasContextmenu) {
            var me = this,
                offset = {},
                el = this.getDom (),
                fixedlayer = uiUtils.getFixedLayer ();

            function setPos (offset) {
                if (offset.left < 0) {
                    offset.left = 0;
                }
                if (offset.top < 0) {
                    offset.top = 0;
                }
                el.style.cssText = "position:absolute;left:" + offset.left + "px;top:" + offset.top + "px;";
            }

            function setPosByCxtMenu (menu) {
                if (!menu.tagName) {
                    menu = menu.getDom ();
                }
                offset.left = parseInt (menu.style.left);
                offset.top = parseInt (menu.style.top);
                offset.top -= el.offsetHeight + 15;
                setPos (offset);
            }


            me.eventType = e.type;
            el.style.cssText = "display:block;left:-9999px";

            if (e.type == "contextmenu" && hasContextmenu) {
                var menu = domUtils.getElementsByTagName (fixedlayer , "div" , "edui-contextmenu")[0];
                if (menu) {
                    setPosByCxtMenu (menu)
                } else {
                    me.editor.addListener ("aftershowcontextmenu" , function (type , menu) {
                        setPosByCxtMenu (menu);
                    });
                }
            } else {
                offset = uiUtils.getViewportOffsetByEvent (e);
                offset.top -= el.offsetHeight + me.SPACE;
                offset.left += me.SPACE + 20;
                setPos (offset);
                me.setOpacity (el , 0.2);
            }


            me.isHidden = false;
            me.left = e.screenX + el.offsetWidth / 2 - me.SPACE;
            me.top = e.screenY - (el.offsetHeight / 2) - me.SPACE;

            if (me.editor) {
                el.style.zIndex = me.editor.container.style.zIndex * 1 + 10;
                fixedlayer.style.zIndex = el.style.zIndex - 1;
            }
        } ,
        hide : function () {
            if (this.getDom ()) {
                this.getDom ().style.display = "none";
            }
            this.isHidden = true;
        } ,
        postRender : function () {
            if (utils.isArray (this.items)) {
                for (var i = 0, item ; item = this.items[i++] ;) {
                    item.postRender ();
                }
            }
        } ,
        getHtmlTpl : function () {
            var buff;
            if (utils.isArray (this.items)) {
                buff = [];
                for (var i = 0 ; i < this.items.length ; i++) {
                    buff[i] = this.items[i].renderHtml ();
                }
                buff = buff.join ("");
            } else {
                buff = this.items;
            }

            return '<div id="##" class="%% edui-toolbar" data-src="shortcutmenu" onmousedown="return false;" onselectstart="return false;" >' +
                buff +
                '</div>';
        }
    };

    utils.inherits (ShortCutMenu , UIBase);

    function hideAllMenu (e) {
        var tgt = e.target || e.srcElement,
            cur = domUtils.findParent (tgt , function (node) {
                return domUtils.hasClass (node , "edui-shortcutmenu") || domUtils.hasClass (node , "edui-popup");
            } , true);

        if (!cur) {
            for (var i = 0, menu ; menu = allMenus[i++] ;) {
                menu.hide ()
            }
        }
    }

    domUtils.on (document , 'mousedown' , function (e) {
        hideAllMenu (e);
    });

    domUtils.on (window , 'scroll' , function (e) {
        hideAllMenu (e);
    });

}) ();


// ui/breakline.js
(function (){
    var utils = baidu.editor.utils,
        UIBase = baidu.editor.ui.UIBase,
        Breakline = baidu.editor.ui.Breakline = function (options){
            this.initOptions(options);
            this.initSeparator();
        };
    Breakline.prototype = {
        uiName: 'Breakline',
        initSeparator: function (){
            this.initUIBase();
        },
        getHtmlTpl: function (){
            return '<br/>';
        }
    };
    utils.inherits(Breakline, UIBase);

})();


// ui/message.js
///import core
///import uicore
(function () {
    var utils = baidu.editor.utils,
        domUtils = baidu.editor.dom.domUtils,
        UIBase = baidu.editor.ui.UIBase,
        Message = baidu.editor.ui.Message = function (options){
            this.initOptions(options);
            this.initMessage();
        };

    Message.prototype = {
        initMessage: function (){
            this.initUIBase();
        },
        getHtmlTpl: function (){
            return '<div id="##" class="edui-message %%">' +
            ' <div id="##_closer" class="edui-message-closer">×</div>' +
            ' <div id="##_body" class="edui-message-body edui-message-type-info">' +
            ' <iframe style="position:absolute;z-index:-1;left:0;top:0;background-color: transparent;" frameborder="0" width="100%" height="100%" src="about:blank"></iframe>' +
            ' <div class="edui-shadow"></div>' +
            ' <div id="##_content" class="edui-message-content">' +
            '  </div>' +
            ' </div>' +
            '</div>';
        },
        reset: function(opt){
            var me = this;
            if (!opt.keepshow) {
                clearTimeout(this.timer);
                me.timer = setTimeout(function(){
                    me.hide();
                }, opt.timeout || 4000);
            }

            opt.content !== undefined && me.setContent(opt.content);
            opt.type !== undefined && me.setType(opt.type);

            me.show();
        },
        postRender: function(){
            var me = this,
                closer = this.getDom('closer');
            closer && domUtils.on(closer, 'click', function(){
                me.hide();
            });
        },
        setContent: function(content){
            this.getDom('content').innerHTML = content;
        },
        setType: function(type){
            type = type || 'info';
            var body = this.getDom('body');
            body.className = body.className.replace(/edui-message-type-[\w-]+/, 'edui-message-type-' + type);
        },
        getContent: function(){
            return this.getDom('content').innerHTML;
        },
        getType: function(){
            var arr = this.getDom('body').match(/edui-message-type-([\w-]+)/);
            return arr ? arr[1]:'';
        },
        show: function (){
            this.getDom().style.display = 'block';
        },
        hide: function (){
            var dom = this.getDom();
            if (dom) {
                dom.style.display = 'none';
                dom.parentNode && dom.parentNode.removeChild(dom);
            }
        }
    };

    utils.inherits(Message, UIBase);

})();


// adapter/editorui.js
//ui跟编辑器的适配層
//那个按钮弹出是dialog，是下拉筐等都是在这个js中配置
//自己写的ui也要在这里配置，放到baidu.editor.ui下边，当编辑器实例化的时候会根据ueditor.config中的toolbars找到相应的进行实例化
(function () {
    var utils = baidu.editor.utils;
    var editorui = baidu.editor.ui;
    var _Dialog = editorui.Dialog;
    editorui.buttons = {};

    editorui.Dialog = function (options) {
        var dialog = new _Dialog(options);
        dialog.addListener('hide', function () {

            if (dialog.editor) {
                var editor = dialog.editor;
                try {
                    if (browser.gecko) {
                        var y = editor.window.scrollY,
                            x = editor.window.scrollX;
                        editor.body.focus();
                        editor.window.scrollTo(x, y);
                    } else {
                        editor.focus();
                    }


                } catch (ex) {
                }
            }
        });
        return dialog;
    };

    var iframeUrlMap = {
        'anchor':'~/dialogs/anchor/anchor.html',
        'insertimage':'~/dialogs/image/image.html',
        'link':'~/dialogs/link/link.html',
        'spechars':'~/dialogs/spechars/spechars.html',
        'searchreplace':'~/dialogs/searchreplace/searchreplace.html',
        'map':'~/dialogs/map/map.html',
        'gmap':'~/dialogs/gmap/gmap.html',
        'insertvideo':'~/dialogs/video/video.html',
        'help':'~/dialogs/help/help.html',
        'preview':'~/dialogs/preview/preview.html',
        'emotion':'~/dialogs/emotion/emotion.html',
        'wordimage':'~/dialogs/wordimage/wordimage.html',
        'attachment':'~/dialogs/attachment/attachment.html',
        'insertframe':'~/dialogs/insertframe/insertframe.html',
        'edittip':'~/dialogs/table/edittip.html',
        'edittable':'~/dialogs/table/edittable.html',
        'edittd':'~/dialogs/table/edittd.html',
        'webapp':'~/dialogs/webapp/webapp.html',
        'snapscreen':'~/dialogs/snapscreen/snapscreen.html',
        'scrawl':'~/dialogs/scrawl/scrawl.html',
        'music':'~/dialogs/music/music.html',
        'template':'~/dialogs/template/template.html',
        'background':'~/dialogs/background/background.html',
        'charts': '~/dialogs/charts/charts.html'
    };
    //为工具栏添加按钮，以下都是统一的按钮触发命令，所以写在一起
    var btnCmds = ['undo', 'redo', 'formatmatch',
        'bold', 'italic', 'underline', 'fontborder', 'touppercase', 'tolowercase',
        'strikethrough', 'subscript', 'superscript', 'source', 'indent', 'outdent',
        'blockquote', 'pasteplain', 'pagebreak',
        'selectall', 'print','horizontal', 'removeformat', 'time', 'date', 'unlink',
        'insertparagraphbeforetable', 'insertrow', 'insertcol', 'mergeright', 'mergedown', 'deleterow',
        'deletecol', 'splittorows', 'splittocols', 'splittocells', 'mergecells', 'deletetable', 'drafts'];

    for (var i = 0, ci; ci = btnCmds[i++];) {
        ci = ci.toLowerCase();
        editorui[ci] = function (cmd) {
            return function (editor) {
                var ui = new editorui.Button({
                    className:'edui-for-' + cmd,
                    title:editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd) || '',
                    onclick:function () {
                        editor.execCommand(cmd);
                    },
                    theme:editor.options.theme,
                    showText:false
                });
                editorui.buttons[cmd] = ui;
                editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
                    var state = editor.queryCommandState(cmd);
                    if (state == -1) {
                        ui.setDisabled(true);
                        ui.setChecked(false);
                    } else {
                        if (!uiReady) {
                            ui.setDisabled(false);
                            ui.setChecked(state);
                        }
                    }
                });
                return ui;
            };
        }(ci);
    }

    //清除文档
    editorui.cleardoc = function (editor) {
        var ui = new editorui.Button({
            className:'edui-for-cleardoc',
            title:editor.options.labelMap.cleardoc || editor.getLang("labelMap.cleardoc") || '',
            theme:editor.options.theme,
            onclick:function () {
                if (confirm(editor.getLang("confirmClear"))) {
                    editor.execCommand('cleardoc');
                }
            }
        });
        editorui.buttons["cleardoc"] = ui;
        editor.addListener('selectionchange', function () {
            ui.setDisabled(editor.queryCommandState('cleardoc') == -1);
        });
        return ui;
    };

    //排版，图片排版，文字方向
    var typeset = {
        'justify':['left', 'right', 'center', 'justify'],
        'imagefloat':['none', 'left', 'center', 'right'],
        'directionality':['ltr', 'rtl']
    };

    for (var p in typeset) {

        (function (cmd, val) {
            for (var i = 0, ci; ci = val[i++];) {
                (function (cmd2) {
                    editorui[cmd.replace('float', '') + cmd2] = function (editor) {
                        var ui = new editorui.Button({
                            className:'edui-for-' + cmd.replace('float', '') + cmd2,
                            title:editor.options.labelMap[cmd.replace('float', '') + cmd2] || editor.getLang("labelMap." + cmd.replace('float', '') + cmd2) || '',
                            theme:editor.options.theme,
                            onclick:function () {
                                editor.execCommand(cmd, cmd2);
                            }
                        });
                        editorui.buttons[cmd] = ui;
                        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
                            ui.setDisabled(editor.queryCommandState(cmd) == -1);
                            ui.setChecked(editor.queryCommandValue(cmd) == cmd2 && !uiReady);
                        });
                        return ui;
                    };
                })(ci)
            }
        })(p, typeset[p])
    }

    //字体颜色和背景颜色
    for (var i = 0, ci; ci = ['backcolor', 'forecolor'][i++];) {
        editorui[ci] = function (cmd) {
            return function (editor) {
                var ui = new editorui.ColorButton({
                    className:'edui-for-' + cmd,
                    color:'default',
                    title:editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd) || '',
                    editor:editor,
                    onpickcolor:function (t, color) {
                        editor.execCommand(cmd, color);
                    },
                    onpicknocolor:function () {
                        editor.execCommand(cmd, 'default');
                        this.setColor('transparent');
                        this.color = 'default';
                    },
                    onbuttonclick:function () {
                        editor.execCommand(cmd, this.color);
                    }
                });
                editorui.buttons[cmd] = ui;
                editor.addListener('selectionchange', function () {
                    ui.setDisabled(editor.queryCommandState(cmd) == -1);
                });
                return ui;
            };
        }(ci);
    }


    var dialogBtns = {
        noOk:['searchreplace', 'help', 'spechars', 'webapp','preview'],
        ok:['attachment', 'anchor', 'link', 'insertimage', 'map', 'gmap', 'insertframe', 'wordimage',
            'insertvideo', 'insertframe', 'edittip', 'edittable', 'edittd', 'scrawl', 'template', 'music', 'background', 'charts']
    };

    for (var p in dialogBtns) {
        (function (type, vals) {
            for (var i = 0, ci; ci = vals[i++];) {
                //todo opera下存在问题
                if (browser.opera && ci === "searchreplace") {
                    continue;
                }
                (function (cmd) {
                    editorui[cmd] = function (editor, iframeUrl, title) {
                        iframeUrl = iframeUrl || (editor.options.iframeUrlMap || {})[cmd] || iframeUrlMap[cmd];
                        title = editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd) || '';

                        var dialog;
                        //没有iframeUrl不创建dialog
                        if (iframeUrl) {
                            dialog = new editorui.Dialog(utils.extend({
                                iframeUrl:editor.ui.mapUrl(iframeUrl),
                                editor:editor,
                                className:'edui-for-' + cmd,
                                title:title,
                                holdScroll: cmd === 'insertimage',
                                fullscreen: /charts|preview/.test(cmd),
                                closeDialog:editor.getLang("closeDialog")
                            }, type == 'ok' ? {
                                buttons:[
                                    {
                                        className:'edui-okbutton',
                                        label:editor.getLang("ok"),
                                        editor:editor,
                                        onclick:function () {
                                            dialog.close(true);
                                        }
                                    },
                                    {
                                        className:'edui-cancelbutton',
                                        label:editor.getLang("cancel"),
                                        editor:editor,
                                        onclick:function () {
                                            dialog.close(false);
                                        }
                                    }
                                ]
                            } : {}));

                            editor.ui._dialogs[cmd + "Dialog"] = dialog;
                        }

                        var ui = new editorui.Button({
                            className:'edui-for-' + cmd,
                            title:title,
                            onclick:function () {
                                if (dialog) {
                                    switch (cmd) {
                                        case "wordimage":
                                            var images = editor.execCommand("wordimage");
                                            if (images && images.length) {
                                                dialog.render();
                                                dialog.open();
                                            }
                                            break;
                                        case "scrawl":
                                            if (editor.queryCommandState("scrawl") != -1) {
                                                dialog.render();
                                                dialog.open();
                                            }

                                            break;
                                        default:
                                            dialog.render();
                                            dialog.open();
                                    }
                                }
                            },
                            theme:editor.options.theme,
                            disabled:(cmd == 'scrawl' && editor.queryCommandState("scrawl") == -1) || ( cmd == 'charts' )
                        });
                        editorui.buttons[cmd] = ui;
                        editor.addListener('selectionchange', function () {
                            //只存在于右键菜单而无工具栏按钮的ui不需要检测状态
                            var unNeedCheckState = {'edittable':1};
                            if (cmd in unNeedCheckState)return;

                            var state = editor.queryCommandState(cmd);
                            if (ui.getDom()) {
                                ui.setDisabled(state == -1);
                                ui.setChecked(state);
                            }

                        });

                        return ui;
                    };
                })(ci.toLowerCase())
            }
        })(p, dialogBtns[p]);
    }

    editorui.snapscreen = function (editor, iframeUrl, title) {
        title = editor.options.labelMap['snapscreen'] || editor.getLang("labelMap.snapscreen") || '';
        var ui = new editorui.Button({
            className:'edui-for-snapscreen',
            title:title,
            onclick:function () {
                editor.execCommand("snapscreen");
            },
            theme:editor.options.theme

        });
        editorui.buttons['snapscreen'] = ui;
        iframeUrl = iframeUrl || (editor.options.iframeUrlMap || {})["snapscreen"] || iframeUrlMap["snapscreen"];
        if (iframeUrl) {
            var dialog = new editorui.Dialog({
                iframeUrl:editor.ui.mapUrl(iframeUrl),
                editor:editor,
                className:'edui-for-snapscreen',
                title:title,
                buttons:[
                    {
                        className:'edui-okbutton',
                        label:editor.getLang("ok"),
                        editor:editor,
                        onclick:function () {
                            dialog.close(true);
                        }
                    },
                    {
                        className:'edui-cancelbutton',
                        label:editor.getLang("cancel"),
                        editor:editor,
                        onclick:function () {
                            dialog.close(false);
                        }
                    }
                ]

            });
            dialog.render();
            editor.ui._dialogs["snapscreenDialog"] = dialog;
        }
        editor.addListener('selectionchange', function () {
            ui.setDisabled(editor.queryCommandState('snapscreen') == -1);
        });
        return ui;
    };

    editorui.insertcode = function (editor, list, title) {
        list = editor.options['insertcode'] || [];
        title = editor.options.labelMap['insertcode'] || editor.getLang("labelMap.insertcode") || '';
       // if (!list.length) return;
        var items = [];
        utils.each(list,function(key,val){
            items.push({
                label:key,
                value:val,
                theme:editor.options.theme,
                renderLabelHtml:function () {
                    return '<div class="edui-label %%-label" >' + (this.label || '') + '</div>';
                }
            });
        });

        var ui = new editorui.Combox({
            editor:editor,
            items:items,
            onselect:function (t, index) {
                editor.execCommand('insertcode', this.items[index].value);
            },
            onbuttonclick:function () {
                this.showPopup();
            },
            title:title,
            initValue:title,
            className:'edui-for-insertcode',
            indexByValue:function (value) {
                if (value) {
                    for (var i = 0, ci; ci = this.items[i]; i++) {
                        if (ci.value.indexOf(value) != -1)
                            return i;
                    }
                }

                return -1;
            }
        });
        editorui.buttons['insertcode'] = ui;
        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
            if (!uiReady) {
                var state = editor.queryCommandState('insertcode');
                if (state == -1) {
                    ui.setDisabled(true);
                } else {
                    ui.setDisabled(false);
                    var value = editor.queryCommandValue('insertcode');
                    if(!value){
                        ui.setValue(title);
                        return;
                    }
                    //trace:1871 ie下从源码模式切换回来时，字体会带单引号，而且会有逗号
                    value && (value = value.replace(/['"]/g, '').split(',')[0]);
                    ui.setValue(value);

                }
            }

        });
        return ui;
    };
    editorui.fontfamily = function (editor, list, title) {

        list = editor.options['fontfamily'] || [];
        title = editor.options.labelMap['fontfamily'] || editor.getLang("labelMap.fontfamily") || '';
        if (!list.length) return;
        for (var i = 0, ci, items = []; ci = list[i]; i++) {
            var langLabel = editor.getLang('fontfamily')[ci.name] || "";
            (function (key, val) {
                items.push({
                    label:key,
                    value:val,
                    theme:editor.options.theme,
                    renderLabelHtml:function () {
                        return '<div class="edui-label %%-label" style="font-family:' +
                            utils.unhtml(this.value) + '">' + (this.label || '') + '</div>';
                    }
                });
            })(ci.label || langLabel, ci.val)
        }
        var ui = new editorui.Combox({
            editor:editor,
            items:items,
            onselect:function (t, index) {
                editor.execCommand('FontFamily', this.items[index].value);
            },
            onbuttonclick:function () {
                this.showPopup();
            },
            title:title,
            initValue:title,
            className:'edui-for-fontfamily',
            indexByValue:function (value) {
                if (value) {
                    for (var i = 0, ci; ci = this.items[i]; i++) {
                        if (ci.value.indexOf(value) != -1)
                            return i;
                    }
                }

                return -1;
            }
        });
        editorui.buttons['fontfamily'] = ui;
        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
            if (!uiReady) {
                var state = editor.queryCommandState('FontFamily');
                if (state == -1) {
                    ui.setDisabled(true);
                } else {
                    ui.setDisabled(false);
                    var value = editor.queryCommandValue('FontFamily');
                    //trace:1871 ie下从源码模式切换回来时，字体会带单引号，而且会有逗号
                    value && (value = value.replace(/['"]/g, '').split(',')[0]);
                    ui.setValue(value);

                }
            }

        });
        return ui;
    };

    editorui.fontsize = function (editor, list, title) {
        title = editor.options.labelMap['fontsize'] || editor.getLang("labelMap.fontsize") || '';
        list = list || editor.options['fontsize'] || [];
        if (!list.length) return;
        var items = [];
        for (var i = 0; i < list.length; i++) {
            var size = list[i] + 'px';
            items.push({
                label:size,
                value:size,
                theme:editor.options.theme,
                renderLabelHtml:function () {
                    return '<div class="edui-label %%-label" style="line-height:1;font-size:' +
                        this.value + '">' + (this.label || '') + '</div>';
                }
            });
        }
        var ui = new editorui.Combox({
            editor:editor,
            items:items,
            title:title,
            initValue:title,
            onselect:function (t, index) {
                editor.execCommand('FontSize', this.items[index].value);
            },
            onbuttonclick:function () {
                this.showPopup();
            },
            className:'edui-for-fontsize'
        });
        editorui.buttons['fontsize'] = ui;
        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
            if (!uiReady) {
                var state = editor.queryCommandState('FontSize');
                if (state == -1) {
                    ui.setDisabled(true);
                } else {
                    ui.setDisabled(false);
                    ui.setValue(editor.queryCommandValue('FontSize'));
                }
            }

        });
        return ui;
    };

    editorui.paragraph = function (editor, list, title) {
        title = editor.options.labelMap['paragraph'] || editor.getLang("labelMap.paragraph") || '';
        list = editor.options['paragraph'] || [];
        if (utils.isEmptyObject(list)) return;
        var items = [];
        for (var i in list) {
            items.push({
                value:i,
                label:list[i] || editor.getLang("paragraph")[i],
                theme:editor.options.theme,
                renderLabelHtml:function () {
                    return '<div class="edui-label %%-label"><span class="edui-for-' + this.value + '">' + (this.label || '') + '</span></div>';
                }
            })
        }
        var ui = new editorui.Combox({
            editor:editor,
            items:items,
            title:title,
            initValue:title,
            className:'edui-for-paragraph',
            onselect:function (t, index) {
                editor.execCommand('Paragraph', this.items[index].value);
            },
            onbuttonclick:function () {
                this.showPopup();
            }
        });
        editorui.buttons['paragraph'] = ui;
        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
            if (!uiReady) {
                var state = editor.queryCommandState('Paragraph');
                if (state == -1) {
                    ui.setDisabled(true);
                } else {
                    ui.setDisabled(false);
                    var value = editor.queryCommandValue('Paragraph');
                    var index = ui.indexByValue(value);
                    if (index != -1) {
                        ui.setValue(value);
                    } else {
                        ui.setValue(ui.initValue);
                    }
                }
            }

        });
        return ui;
    };


    //自定义标题
    editorui.customstyle = function (editor) {
        var list = editor.options['customstyle'] || [],
            title = editor.options.labelMap['customstyle'] || editor.getLang("labelMap.customstyle") || '';
        if (!list.length)return;
        var langCs = editor.getLang('customstyle');
        for (var i = 0, items = [], t; t = list[i++];) {
            (function (t) {
                var ck = {};
                ck.label = t.label ? t.label : langCs[t.name];
                ck.style = t.style;
                ck.className = t.className;
                ck.tag = t.tag;
                items.push({
                    label:ck.label,
                    value:ck,
                    theme:editor.options.theme,
                    renderLabelHtml:function () {
                        return '<div class="edui-label %%-label">' + '<' + ck.tag + ' ' + (ck.className ? ' class="' + ck.className + '"' : "")
                            + (ck.style ? ' style="' + ck.style + '"' : "") + '>' + ck.label + "<\/" + ck.tag + ">"
                            + '</div>';
                    }
                });
            })(t);
        }

        var ui = new editorui.Combox({
            editor:editor,
            items:items,
            title:title,
            initValue:title,
            className:'edui-for-customstyle',
            onselect:function (t, index) {
                editor.execCommand('customstyle', this.items[index].value);
            },
            onbuttonclick:function () {
                this.showPopup();
            },
            indexByValue:function (value) {
                for (var i = 0, ti; ti = this.items[i++];) {
                    if (ti.label == value) {
                        return i - 1
                    }
                }
                return -1;
            }
        });
        editorui.buttons['customstyle'] = ui;
        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
            if (!uiReady) {
                var state = editor.queryCommandState('customstyle');
                if (state == -1) {
                    ui.setDisabled(true);
                } else {
                    ui.setDisabled(false);
                    var value = editor.queryCommandValue('customstyle');
                    var index = ui.indexByValue(value);
                    if (index != -1) {
                        ui.setValue(value);
                    } else {
                        ui.setValue(ui.initValue);
                    }
                }
            }

        });
        return ui;
    };
    editorui.inserttable = function (editor, iframeUrl, title) {
        title = editor.options.labelMap['inserttable'] || editor.getLang("labelMap.inserttable") || '';
        var ui = new editorui.TableButton({
            editor:editor,
            title:title,
            className:'edui-for-inserttable',
            onpicktable:function (t, numCols, numRows) {
                editor.execCommand('InsertTable', {numRows:numRows, numCols:numCols, border:1});
            },
            onbuttonclick:function () {
                this.showPopup();
            }
        });
        editorui.buttons['inserttable'] = ui;
        editor.addListener('selectionchange', function () {
            ui.setDisabled(editor.queryCommandState('inserttable') == -1);
        });
        return ui;
    };

    editorui.lineheight = function (editor) {
        var val = editor.options.lineheight || [];
        if (!val.length)return;
        for (var i = 0, ci, items = []; ci = val[i++];) {
            items.push({
                //todo:写死了
                label:ci,
                value:ci,
                theme:editor.options.theme,
                onclick:function () {
                    editor.execCommand("lineheight", this.value);
                }
            })
        }
        var ui = new editorui.MenuButton({
            editor:editor,
            className:'edui-for-lineheight',
            title:editor.options.labelMap['lineheight'] || editor.getLang("labelMap.lineheight") || '',
            items:items,
            onbuttonclick:function () {
                var value = editor.queryCommandValue('LineHeight') || this.value;
                editor.execCommand("LineHeight", value);
            }
        });
        editorui.buttons['lineheight'] = ui;
        editor.addListener('selectionchange', function () {
            var state = editor.queryCommandState('LineHeight');
            if (state == -1) {
                ui.setDisabled(true);
            } else {
                ui.setDisabled(false);
                var value = editor.queryCommandValue('LineHeight');
                value && ui.setValue((value + '').replace(/cm/, ''));
                ui.setChecked(state)
            }
        });
        return ui;
    };

    var rowspacings = ['top', 'bottom'];
    for (var r = 0, ri; ri = rowspacings[r++];) {
        (function (cmd) {
            editorui['rowspacing' + cmd] = function (editor) {
                var val = editor.options['rowspacing' + cmd] || [];
                if (!val.length) return null;
                for (var i = 0, ci, items = []; ci = val[i++];) {
                    items.push({
                        label:ci,
                        value:ci,
                        theme:editor.options.theme,
                        onclick:function () {
                            editor.execCommand("rowspacing", this.value, cmd);
                        }
                    })
                }
                var ui = new editorui.MenuButton({
                    editor:editor,
                    className:'edui-for-rowspacing' + cmd,
                    title:editor.options.labelMap['rowspacing' + cmd] || editor.getLang("labelMap.rowspacing" + cmd) || '',
                    items:items,
                    onbuttonclick:function () {
                        var value = editor.queryCommandValue('rowspacing', cmd) || this.value;
                        editor.execCommand("rowspacing", value, cmd);
                    }
                });
                editorui.buttons[cmd] = ui;
                editor.addListener('selectionchange', function () {
                    var state = editor.queryCommandState('rowspacing', cmd);
                    if (state == -1) {
                        ui.setDisabled(true);
                    } else {
                        ui.setDisabled(false);
                        var value = editor.queryCommandValue('rowspacing', cmd);
                        value && ui.setValue((value + '').replace(/%/, ''));
                        ui.setChecked(state)
                    }
                });
                return ui;
            }
        })(ri)
    }
    //有序，无序列表
    var lists = ['insertorderedlist', 'insertunorderedlist'];
    for (var l = 0, cl; cl = lists[l++];) {
        (function (cmd) {
            editorui[cmd] = function (editor) {
                var vals = editor.options[cmd],
                    _onMenuClick = function () {
                        editor.execCommand(cmd, this.value);
                    }, items = [];
                for (var i in vals) {
                    items.push({
                        label:vals[i] || editor.getLang()[cmd][i] || "",
                        value:i,
                        theme:editor.options.theme,
                        onclick:_onMenuClick
                    })
                }
                var ui = new editorui.MenuButton({
                    editor:editor,
                    className:'edui-for-' + cmd,
                    title:editor.getLang("labelMap." + cmd) || '',
                    'items':items,
                    onbuttonclick:function () {
                        var value = editor.queryCommandValue(cmd) || this.value;
                        editor.execCommand(cmd, value);
                    }
                });
                editorui.buttons[cmd] = ui;
                editor.addListener('selectionchange', function () {
                    var state = editor.queryCommandState(cmd);
                    if (state == -1) {
                        ui.setDisabled(true);
                    } else {
                        ui.setDisabled(false);
                        var value = editor.queryCommandValue(cmd);
                        ui.setValue(value);
                        ui.setChecked(state)
                    }
                });
                return ui;
            };
        })(cl)
    }

    editorui.fullscreen = function (editor, title) {
        title = editor.options.labelMap['fullscreen'] || editor.getLang("labelMap.fullscreen") || '';
        var ui = new editorui.Button({
            className:'edui-for-fullscreen',
            title:title,
            theme:editor.options.theme,
            onclick:function () {
                if (editor.ui) {
                    editor.ui.setFullScreen(!editor.ui.isFullScreen());
                }
                this.setChecked(editor.ui.isFullScreen());
            }
        });
        editorui.buttons['fullscreen'] = ui;
        editor.addListener('selectionchange', function () {
            var state = editor.queryCommandState('fullscreen');
            ui.setDisabled(state == -1);
            ui.setChecked(editor.ui.isFullScreen());
        });
        return ui;
    };

    // 表情
    editorui["emotion"] = function (editor, iframeUrl) {
        var cmd = "emotion";
        var ui = new editorui.MultiMenuPop({
            title:editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd + "") || '',
            editor:editor,
            className:'edui-for-' + cmd,
            iframeUrl:editor.ui.mapUrl(iframeUrl || (editor.options.iframeUrlMap || {})[cmd] || iframeUrlMap[cmd])
        });
        editorui.buttons[cmd] = ui;

        editor.addListener('selectionchange', function () {
            ui.setDisabled(editor.queryCommandState(cmd) == -1)
        });
        return ui;
    };

    editorui.autotypeset = function (editor) {
        var ui = new editorui.AutoTypeSetButton({
            editor:editor,
            title:editor.options.labelMap['autotypeset'] || editor.getLang("labelMap.autotypeset") || '',
            className:'edui-for-autotypeset',
            onbuttonclick:function () {
                editor.execCommand('autotypeset')
            }
        });
        editorui.buttons['autotypeset'] = ui;
        editor.addListener('selectionchange', function () {
            ui.setDisabled(editor.queryCommandState('autotypeset') == -1);
        });
        return ui;
    };

    /* 简单上传插件 */
    editorui["simpleupload"] = function (editor) {
        var name = 'simpleupload',
            ui = new editorui.Button({
                className:'edui-for-' + name,
                title:editor.options.labelMap[name] || editor.getLang("labelMap." + name) || '',
                onclick:function () {},
                theme:editor.options.theme,
                showText:false
            });
        editorui.buttons[name] = ui;
        editor.addListener('ready', function() {
            var b = ui.getDom('body'),
                iconSpan = b.children[0];
            editor.fireEvent('simpleuploadbtnready', iconSpan);
        });
        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
            var state = editor.queryCommandState(name);
            if (state == -1) {
                ui.setDisabled(true);
                ui.setChecked(false);
            } else {
                if (!uiReady) {
                    ui.setDisabled(false);
                    ui.setChecked(state);
                }
            }
        });
        return ui;
    };

})();


// adapter/editor.js
///import core
///commands 全屏
///commandsName FullScreen
///commandsTitle  全屏
(function () {
    var utils = baidu.editor.utils,
        uiUtils = baidu.editor.ui.uiUtils,
        UIBase = baidu.editor.ui.UIBase,
        domUtils = baidu.editor.dom.domUtils;
    var nodeStack = [];

    function EditorUI(options) {
        this.initOptions(options);
        this.initEditorUI();
    }

    EditorUI.prototype = {
        uiName:'editor',
        initEditorUI:function () {
            this.editor.ui = this;
            this._dialogs = {};
            this.initUIBase();
            this._initToolbars();
            var editor = this.editor,
                me = this;

            editor.addListener('ready', function () {
                //提供getDialog方法
                editor.getDialog = function (name) {
                    return editor.ui._dialogs[name + "Dialog"];
                };
                domUtils.on(editor.window, 'scroll', function (evt) {
                    baidu.editor.ui.Popup.postHide(evt);
                });
                //提供编辑器实时宽高(全屏时宽高不变化)
                editor.ui._actualFrameWidth = editor.options.initialFrameWidth;

                UE.browser.ie && UE.browser.version === 6 && editor.container.ownerDocument.execCommand("BackgroundImageCache", false, true);

                //display bottom-bar label based on config
                if (editor.options.elementPathEnabled) {
                    editor.ui.getDom('elementpath').innerHTML = '<div class="edui-editor-breadcrumb">' + editor.getLang("elementPathTip") + ':</div>';
                }
                if (editor.options.wordCount) {
                    function countFn() {
                        setCount(editor,me);
                        domUtils.un(editor.document, "click", arguments.callee);
                    }
                    domUtils.on(editor.document, "click", countFn);
                    editor.ui.getDom('wordcount').innerHTML = editor.getLang("wordCountTip");
                }
                editor.ui._scale();
                if (editor.options.scaleEnabled) {
                    if (editor.autoHeightEnabled) {
                        editor.disableAutoHeight();
                    }
                    me.enableScale();
                } else {
                    me.disableScale();
                }
                if (!editor.options.elementPathEnabled && !editor.options.wordCount && !editor.options.scaleEnabled) {
                    editor.ui.getDom('elementpath').style.display = "none";
                    editor.ui.getDom('wordcount').style.display = "none";
                    editor.ui.getDom('scale').style.display = "none";
                }

                if (!editor.selection.isFocus())return;
                editor.fireEvent('selectionchange', false, true);


            });

            editor.addListener('mousedown', function (t, evt) {
                var el = evt.target || evt.srcElement;
                baidu.editor.ui.Popup.postHide(evt, el);
                baidu.editor.ui.ShortCutMenu.postHide(evt);

            });
            editor.addListener("delcells", function () {
                if (UE.ui['edittip']) {
                    new UE.ui['edittip'](editor);
                }
                editor.getDialog('edittip').open();
            });

            var pastePop, isPaste = false, timer;
            editor.addListener("afterpaste", function () {
                if(editor.queryCommandState('pasteplain'))
                    return;
                if(baidu.editor.ui.PastePicker){
                    pastePop = new baidu.editor.ui.Popup({
                        content:new baidu.editor.ui.PastePicker({editor:editor}),
                        editor:editor,
                        className:'edui-wordpastepop'
                    });
                    pastePop.render();
                }
                isPaste = true;
            });

            editor.addListener("afterinserthtml", function () {
                clearTimeout(timer);
                timer = setTimeout(function () {
                    if (pastePop && (isPaste || editor.ui._isTransfer)) {
                        if(pastePop.isHidden()){
                            var span = domUtils.createElement(editor.document, 'span', {
                                    'style':"line-height:0px;",
                                    'innerHTML':'\ufeff'
                                }),
                                range = editor.selection.getRange();
                            range.insertNode(span);
                            var tmp= getDomNode(span, 'firstChild', 'previousSibling');
                            tmp && pastePop.showAnchor(tmp.nodeType == 3 ? tmp.parentNode : tmp);
                            domUtils.remove(span);
                        }else{
                            pastePop.show();
                        }
                        delete editor.ui._isTransfer;
                        isPaste = false;
                    }
                }, 200)
            });
            editor.addListener('contextmenu', function (t, evt) {
                baidu.editor.ui.Popup.postHide(evt);
            });
            editor.addListener('keydown', function (t, evt) {
                if (pastePop)    pastePop.dispose(evt);
                var keyCode = evt.keyCode || evt.which;
                if(evt.altKey&&keyCode==90){
                    UE.ui.buttons['fullscreen'].onclick();
                }
            });
            editor.addListener('wordcount', function (type) {
                setCount(this,me);
            });
            function setCount(editor,ui) {
                editor.setOpt({
                    wordCount:true,
                    maximumWords:10000,
                    wordCountMsg:editor.options.wordCountMsg || editor.getLang("wordCountMsg"),
                    wordOverFlowMsg:editor.options.wordOverFlowMsg || editor.getLang("wordOverFlowMsg")
                });
                var opt = editor.options,
                    max = opt.maximumWords,
                    msg = opt.wordCountMsg ,
                    errMsg = opt.wordOverFlowMsg,
                    countDom = ui.getDom('wordcount');
                if (!opt.wordCount) {
                    return;
                }
                var count = editor.getContentLength(true);
                if (count > max) {
                    countDom.innerHTML = errMsg;
                    editor.fireEvent("wordcountoverflow");
                } else {
                    countDom.innerHTML = msg.replace("{#leave}", max - count).replace("{#count}", count);
                }
            }

            editor.addListener('selectionchange', function () {
                if (editor.options.elementPathEnabled) {
                    me[(editor.queryCommandState('elementpath') == -1 ? 'dis' : 'en') + 'ableElementPath']()
                }
                if (editor.options.scaleEnabled) {
                    me[(editor.queryCommandState('scale') == -1 ? 'dis' : 'en') + 'ableScale']();

                }
            });
            var popup = new baidu.editor.ui.Popup({
                editor:editor,
                content:'',
                className:'edui-bubble',
                _onEditButtonClick:function () {
                    this.hide();
                    editor.ui._dialogs.linkDialog.open();
                },
                _onImgEditButtonClick:function (name) {
                    this.hide();
                    editor.ui._dialogs[name] && editor.ui._dialogs[name].open();

                },
                _onImgSetFloat:function (value) {
                    this.hide();
                    editor.execCommand("imagefloat", value);

                },
                _setIframeAlign:function (value) {
                    var frame = popup.anchorEl;
                    var newFrame = frame.cloneNode(true);
                    switch (value) {
                        case -2:
                            newFrame.setAttribute("align", "");
                            break;
                        case -1:
                            newFrame.setAttribute("align", "left");
                            break;
                        case 1:
                            newFrame.setAttribute("align", "right");
                            break;
                    }
                    frame.parentNode.insertBefore(newFrame, frame);
                    domUtils.remove(frame);
                    popup.anchorEl = newFrame;
                    popup.showAnchor(popup.anchorEl);
                },
                _updateIframe:function () {
                    var frame = editor._iframe = popup.anchorEl;
                    if(domUtils.hasClass(frame, 'ueditor_baidumap')) {
                        editor.selection.getRange().selectNode(frame).select();
                        editor.ui._dialogs.mapDialog.open();
                        popup.hide();
                    } else {
                        editor.ui._dialogs.insertframeDialog.open();
                        popup.hide();
                    }
                },
                _onRemoveButtonClick:function (cmdName) {
                    editor.execCommand(cmdName);
                    this.hide();
                },
                queryAutoHide:function (el) {
                    if (el && el.ownerDocument == editor.document) {
                        if (el.tagName.toLowerCase() == 'img' || domUtils.findParentByTagName(el, 'a', true)) {
                            return el !== popup.anchorEl;
                        }
                    }
                    return baidu.editor.ui.Popup.prototype.queryAutoHide.call(this, el);
                }
            });
            popup.render();
            if (editor.options.imagePopup) {
                editor.addListener('mouseover', function (t, evt) {
                    evt = evt || window.event;
                    var el = evt.target || evt.srcElement;
                    if (editor.ui._dialogs.insertframeDialog && /iframe/ig.test(el.tagName)) {
                        var html = popup.formatHtml(
                            '<nobr>' + editor.getLang("property") + ': <span onclick=$$._setIframeAlign(-2) class="edui-clickable">' + editor.getLang("default") + '</span>&nbsp;&nbsp;<span onclick=$$._setIframeAlign(-1) class="edui-clickable">' + editor.getLang("justifyleft") + '</span>&nbsp;&nbsp;<span onclick=$$._setIframeAlign(1) class="edui-clickable">' + editor.getLang("justifyright") + '</span>&nbsp;&nbsp;' +
                                ' <span onclick="$$._updateIframe( this);" class="edui-clickable">' + editor.getLang("modify") + '</span></nobr>');
                        if (html) {
                            popup.getDom('content').innerHTML = html;
                            popup.anchorEl = el;
                            popup.showAnchor(popup.anchorEl);
                        } else {
                            popup.hide();
                        }
                    }
                });
                editor.addListener('selectionchange', function (t, causeByUi) {
                    if (!causeByUi) return;
                    var html = '', str = "",
                        img = editor.selection.getRange().getClosedNode(),
                        dialogs = editor.ui._dialogs;
                    if (img && img.tagName == 'IMG') {
                        var dialogName = 'insertimageDialog';
                        if (img.className.indexOf("edui-faked-video") != -1 || img.className.indexOf("edui-upload-video") != -1) {
                            dialogName = "insertvideoDialog"
                        }
                        if (img.className.indexOf("edui-faked-webapp") != -1) {
                            dialogName = "webappDialog"
                        }
                        if (img.src.indexOf("http://api.map.baidu.com") != -1) {
                            dialogName = "mapDialog"
                        }
                        if (img.className.indexOf("edui-faked-music") != -1) {
                            dialogName = "musicDialog"
                        }
                        if (img.src.indexOf("http://maps.google.com/maps/api/staticmap") != -1) {
                            dialogName = "gmapDialog"
                        }
                        if (img.getAttribute("anchorname")) {
                            dialogName = "anchorDialog";
                            html = popup.formatHtml(
                                '<nobr>' + editor.getLang("property") + ': <span onclick=$$._onImgEditButtonClick("anchorDialog") class="edui-clickable">' + editor.getLang("modify") + '</span>&nbsp;&nbsp;' +
                                    '<span onclick=$$._onRemoveButtonClick(\'anchor\') class="edui-clickable">' + editor.getLang("delete") + '</span></nobr>');
                        }
                        if (img.getAttribute("word_img")) {
                            //todo 放到dialog去做查询
                            editor.word_img = [img.getAttribute("word_img")];
                            dialogName = "wordimageDialog"
                        }
                        if(domUtils.hasClass(img, 'loadingclass') || domUtils.hasClass(img, 'loaderrorclass')) {
                            dialogName = "";
                        }
                        if (!dialogs[dialogName]) {
                            return;
                        }
                        str = '<nobr>' + editor.getLang("property") + ': '+
                            '<span onclick=$$._onImgSetFloat("none") class="edui-clickable">' + editor.getLang("default") + '</span>&nbsp;&nbsp;' +
                            '<span onclick=$$._onImgSetFloat("left") class="edui-clickable">' + editor.getLang("justifyleft") + '</span>&nbsp;&nbsp;' +
                            '<span onclick=$$._onImgSetFloat("right") class="edui-clickable">' + editor.getLang("justifyright") + '</span>&nbsp;&nbsp;' +
                            '<span onclick=$$._onImgSetFloat("center") class="edui-clickable">' + editor.getLang("justifycenter") + '</span>&nbsp;&nbsp;'+
                            '<span onclick="$$._onImgEditButtonClick(\'' + dialogName + '\');" class="edui-clickable">' + editor.getLang("modify") + '</span></nobr>';

                        !html && (html = popup.formatHtml(str))

                    }
                    if (editor.ui._dialogs.linkDialog) {
                        var link = editor.queryCommandValue('link');
                        var url;
                        if (link && (url = (link.getAttribute('_href') || link.getAttribute('href', 2)))) {
                            var txt = url;
                            if (url.length > 30) {
                                txt = url.substring(0, 20) + "...";
                            }
                            if (html) {
                                html += '<div style="height:5px;"></div>'
                            }
                            html += popup.formatHtml(
                                '<nobr>' + editor.getLang("anthorMsg") + ': <a target="_blank" href="' + url + '" title="' + url + '" >' + txt + '</a>' +
                                    ' <span class="edui-clickable" onclick="$$._onEditButtonClick();">' + editor.getLang("modify") + '</span>' +
                                    ' <span class="edui-clickable" onclick="$$._onRemoveButtonClick(\'unlink\');"> ' + editor.getLang("clear") + '</span></nobr>');
                            popup.showAnchor(link);
                        }
                    }

                    if (html) {
                        popup.getDom('content').innerHTML = html;
                        popup.anchorEl = img || link;
                        popup.showAnchor(popup.anchorEl);
                    } else {
                        popup.hide();
                    }
                });
            }

        },
        _initToolbars:function () {
            var editor = this.editor;
            var toolbars = this.toolbars || [];
            var toolbarUis = [];
            for (var i = 0; i < toolbars.length; i++) {
                var toolbar = toolbars[i];
                var toolbarUi = new baidu.editor.ui.Toolbar({theme:editor.options.theme});
                for (var j = 0; j < toolbar.length; j++) {
                    var toolbarItem = toolbar[j];
                    var toolbarItemUi = null;
                    if (typeof toolbarItem == 'string') {
                        toolbarItem = toolbarItem.toLowerCase();
                        if (toolbarItem == '|') {
                            toolbarItem = 'Separator';
                        }
                        if(toolbarItem == '||'){
                            toolbarItem = 'Breakline';
                        }
                        if (baidu.editor.ui[toolbarItem]) {
                            toolbarItemUi = new baidu.editor.ui[toolbarItem](editor);
                        }

                        //fullscreen这里单独处理一下，放到首行去
                        if (toolbarItem == 'fullscreen') {
                            if (toolbarUis && toolbarUis[0]) {
                                toolbarUis[0].items.splice(0, 0, toolbarItemUi);
                            } else {
                                toolbarItemUi && toolbarUi.items.splice(0, 0, toolbarItemUi);
                            }

                            continue;


                        }
                    } else {
                        toolbarItemUi = toolbarItem;
                    }
                    if (toolbarItemUi && toolbarItemUi.id) {

                        toolbarUi.add(toolbarItemUi);
                    }
                }
                toolbarUis[i] = toolbarUi;
            }

            //接受外部定制的UI

            utils.each(UE._customizeUI,function(obj,key){
                var itemUI,index;
                if(obj.id && obj.id != editor.key){
                   return false;
                }
                itemUI = obj.execFn.call(editor,editor,key);
                if(itemUI){
                    index = obj.index;
                    if(index === undefined){
                        index = toolbarUi.items.length;
                    }
                    toolbarUi.add(itemUI,index)
                }
            });

            this.toolbars = toolbarUis;
        },
        getHtmlTpl:function () {
            return '<div id="##" class="%%">' +
                '<div id="##_toolbarbox" class="%%-toolbarbox">' +
                (this.toolbars.length ?
                    '<div id="##_toolbarboxouter" class="%%-toolbarboxouter"><div class="%%-toolbarboxinner">' +
                        this.renderToolbarBoxHtml() +
                        '</div></div>' : '') +
                '<div id="##_toolbarmsg" class="%%-toolbarmsg" style="display:none;">' +
                '<div id = "##_upload_dialog" class="%%-toolbarmsg-upload" onclick="$$.showWordImageDialog();">' + this.editor.getLang("clickToUpload") + '</div>' +
                '<div class="%%-toolbarmsg-close" onclick="$$.hideToolbarMsg();">x</div>' +
                '<div id="##_toolbarmsg_label" class="%%-toolbarmsg-label"></div>' +
                '<div style="height:0;overflow:hidden;clear:both;"></div>' +
                '</div>' +
                '<div id="##_message_holder" class="%%-messageholder"></div>' +
                '</div>' +
                '<div id="##_iframeholder" class="%%-iframeholder">' +
                '</div>' +
                //modify wdcount by matao
                '<div id="##_bottombar" class="%%-bottomContainer"><table><tr>' +
                '<td id="##_elementpath" class="%%-bottombar"></td>' +
                '<td id="##_wordcount" class="%%-wordcount"></td>' +
                '<td id="##_scale" class="%%-scale"><div class="%%-icon"></div></td>' +
                '</tr></table></div>' +
                '<div id="##_scalelayer"></div>' +
                '</div>';
        },
        showWordImageDialog:function () {
            this._dialogs['wordimageDialog'].open();
        },
        renderToolbarBoxHtml:function () {
            var buff = [];
            for (var i = 0; i < this.toolbars.length; i++) {
                buff.push(this.toolbars[i].renderHtml());
            }
            return buff.join('');
        },
        setFullScreen:function (fullscreen) {

            var editor = this.editor,
                container = editor.container.parentNode.parentNode;
            if (this._fullscreen != fullscreen) {
                this._fullscreen = fullscreen;
                this.editor.fireEvent('beforefullscreenchange', fullscreen);
                if (baidu.editor.browser.gecko) {
                    var bk = editor.selection.getRange().createBookmark();
                }
                if (fullscreen) {
                    while (container.tagName != "BODY") {
                        var position = baidu.editor.dom.domUtils.getComputedStyle(container, "position");
                        nodeStack.push(position);
                        container.style.position = "static";
                        container = container.parentNode;
                    }
                    this._bakHtmlOverflow = document.documentElement.style.overflow;
                    this._bakBodyOverflow = document.body.style.overflow;
                    this._bakAutoHeight = this.editor.autoHeightEnabled;
                    this._bakScrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);

                    this._bakEditorContaninerWidth = editor.iframe.parentNode.offsetWidth;
                    if (this._bakAutoHeight) {
                        //当全屏时不能执行自动长高
                        editor.autoHeightEnabled = false;
                        this.editor.disableAutoHeight();
                    }

                    document.documentElement.style.overflow = 'hidden';
                    //修复，滚动条不收起的问题

                    window.scrollTo(0,window.scrollY);
                    this._bakCssText = this.getDom().style.cssText;
                    this._bakCssText1 = this.getDom('iframeholder').style.cssText;
                    editor.iframe.parentNode.style.width = '';
                    this._updateFullScreen();
                } else {
                    while (container.tagName != "BODY") {
                        container.style.position = nodeStack.shift();
                        container = container.parentNode;
                    }
                    this.getDom().style.cssText = this._bakCssText;
                    this.getDom('iframeholder').style.cssText = this._bakCssText1;
                    if (this._bakAutoHeight) {
                        editor.autoHeightEnabled = true;
                        this.editor.enableAutoHeight();
                    }

                    document.documentElement.style.overflow = this._bakHtmlOverflow;
                    document.body.style.overflow = this._bakBodyOverflow;
                    editor.iframe.parentNode.style.width = this._bakEditorContaninerWidth + 'px';
                    window.scrollTo(0, this._bakScrollTop);
                }
                if (browser.gecko && editor.body.contentEditable === 'true') {
                    var input = document.createElement('input');
                    document.body.appendChild(input);
                    editor.body.contentEditable = false;
                    setTimeout(function () {
                        input.focus();
                        setTimeout(function () {
                            editor.body.contentEditable = true;
                            editor.fireEvent('fullscreenchanged', fullscreen);
                            editor.selection.getRange().moveToBookmark(bk).select(true);
                            baidu.editor.dom.domUtils.remove(input);
                            fullscreen && window.scroll(0, 0);
                        }, 0)
                    }, 0)
                }

                if(editor.body.contentEditable === 'true'){
                    this.editor.fireEvent('fullscreenchanged', fullscreen);
                    this.triggerLayout();
                }

            }
        },
        _updateFullScreen:function () {
            if (this._fullscreen) {
                var vpRect = uiUtils.getViewportRect();
                this.getDom().style.cssText = 'border:0;position:absolute;left:0;top:' + (this.editor.options.topOffset || 0) + 'px;width:' + vpRect.width + 'px;height:' + vpRect.height + 'px;z-index:' + (this.getDom().style.zIndex * 1 + 100);
                uiUtils.setViewportOffset(this.getDom(), { left:0, top:this.editor.options.topOffset || 0 });
                this.editor.setHeight(vpRect.height - this.getDom('toolbarbox').offsetHeight - this.getDom('bottombar').offsetHeight - (this.editor.options.topOffset || 0),true);
                //不手动调一下，会导致全屏失效
                if(browser.gecko){
                    try{
                        window.onresize();
                    }catch(e){

                    }

                }
            }
        },
        _updateElementPath:function () {
            var bottom = this.getDom('elementpath'), list;
            if (this.elementPathEnabled && (list = this.editor.queryCommandValue('elementpath'))) {

                var buff = [];
                for (var i = 0, ci; ci = list[i]; i++) {
                    buff[i] = this.formatHtml('<span unselectable="on" onclick="$$.editor.execCommand(&quot;elementpath&quot;, &quot;' + i + '&quot;);">' + ci + '</span>');
                }
                bottom.innerHTML = '<div class="edui-editor-breadcrumb" onmousedown="return false;">' + this.editor.getLang("elementPathTip") + ': ' + buff.join(' &gt; ') + '</div>';

            } else {
                bottom.style.display = 'none'
            }
        },
        disableElementPath:function () {
            var bottom = this.getDom('elementpath');
            bottom.innerHTML = '';
            bottom.style.display = 'none';
            this.elementPathEnabled = false;

        },
        enableElementPath:function () {
            var bottom = this.getDom('elementpath');
            bottom.style.display = '';
            this.elementPathEnabled = true;
            this._updateElementPath();
        },
        _scale:function () {
            var doc = document,
                editor = this.editor,
                editorHolder = editor.container,
                editorDocument = editor.document,
                toolbarBox = this.getDom("toolbarbox"),
                bottombar = this.getDom("bottombar"),
                scale = this.getDom("scale"),
                scalelayer = this.getDom("scalelayer");

            var isMouseMove = false,
                position = null,
                minEditorHeight = 0,
                minEditorWidth = editor.options.minFrameWidth,
                pageX = 0,
                pageY = 0,
                scaleWidth = 0,
                scaleHeight = 0;

            function down() {
                position = domUtils.getXY(editorHolder);

                if (!minEditorHeight) {
                    minEditorHeight = editor.options.minFrameHeight + toolbarBox.offsetHeight + bottombar.offsetHeight;
                }

                scalelayer.style.cssText = "position:absolute;left:0;display:;top:0;background-color:#41ABFF;opacity:0.4;filter: Alpha(opacity=40);width:" + editorHolder.offsetWidth + "px;height:"
                    + editorHolder.offsetHeight + "px;z-index:" + (editor.options.zIndex + 1);

                domUtils.on(doc, "mousemove", move);
                domUtils.on(editorDocument, "mouseup", up);
                domUtils.on(doc, "mouseup", up);
            }

            var me = this;
            //by xuheng 全屏时关掉缩放
            this.editor.addListener('fullscreenchanged', function (e, fullScreen) {
                if (fullScreen) {
                    me.disableScale();

                } else {
                    if (me.editor.options.scaleEnabled) {
                        me.enableScale();
                        var tmpNode = me.editor.document.createElement('span');
                        me.editor.body.appendChild(tmpNode);
                        me.editor.body.style.height = Math.max(domUtils.getXY(tmpNode).y, me.editor.iframe.offsetHeight - 20) + 'px';
                        domUtils.remove(tmpNode)
                    }
                }
            });
            function move(event) {
                clearSelection();
                var e = event || window.event;
                pageX = e.pageX || (doc.documentElement.scrollLeft + e.clientX);
                pageY = e.pageY || (doc.documentElement.scrollTop + e.clientY);
                scaleWidth = pageX - position.x;
                scaleHeight = pageY - position.y;

                if (scaleWidth >= minEditorWidth) {
                    isMouseMove = true;
                    scalelayer.style.width = scaleWidth + 'px';
                }
                if (scaleHeight >= minEditorHeight) {
                    isMouseMove = true;
                    scalelayer.style.height = scaleHeight + "px";
                }
            }

            function up() {
                if (isMouseMove) {
                    isMouseMove = false;
                    editor.ui._actualFrameWidth = scalelayer.offsetWidth - 2;
                    editorHolder.style.width = editor.ui._actualFrameWidth + 'px';

                    editor.setHeight(scalelayer.offsetHeight - bottombar.offsetHeight - toolbarBox.offsetHeight - 2,true);
                }
                if (scalelayer) {
                    scalelayer.style.display = "none";
                }
                clearSelection();
                domUtils.un(doc, "mousemove", move);
                domUtils.un(editorDocument, "mouseup", up);
                domUtils.un(doc, "mouseup", up);
            }

            function clearSelection() {
                if (browser.ie)
                    doc.selection.clear();
                else
                    window.getSelection().removeAllRanges();
            }

            this.enableScale = function () {
                //trace:2868
                if (editor.queryCommandState("source") == 1)    return;
                scale.style.display = "";
                this.scaleEnabled = true;
                domUtils.on(scale, "mousedown", down);
            };
            this.disableScale = function () {
                scale.style.display = "none";
                this.scaleEnabled = false;
                domUtils.un(scale, "mousedown", down);
            };
        },
        isFullScreen:function () {
            return this._fullscreen;
        },
        postRender:function () {
            UIBase.prototype.postRender.call(this);
            for (var i = 0; i < this.toolbars.length; i++) {
                this.toolbars[i].postRender();
            }
            var me = this;
            var timerId,
                domUtils = baidu.editor.dom.domUtils,
                updateFullScreenTime = function () {
                    clearTimeout(timerId);
                    timerId = setTimeout(function () {
                        me._updateFullScreen();
                    });
                };
            domUtils.on(window, 'resize', updateFullScreenTime);

            me.addListener('destroy', function () {
                domUtils.un(window, 'resize', updateFullScreenTime);
                clearTimeout(timerId);
            })
        },
        showToolbarMsg:function (msg, flag) {
            this.getDom('toolbarmsg_label').innerHTML = msg;
            this.getDom('toolbarmsg').style.display = '';
            //
            if (!flag) {
                var w = this.getDom('upload_dialog');
                w.style.display = 'none';
            }
        },
        hideToolbarMsg:function () {
            this.getDom('toolbarmsg').style.display = 'none';
        },
        mapUrl:function (url) {
            return url ? url.replace('~/', this.editor.options.UEDITOR_HOME_URL || '') : ''
        },
        triggerLayout:function () {
            var dom = this.getDom();
            if (dom.style.zoom == '1') {
                dom.style.zoom = '100%';
            } else {
                dom.style.zoom = '1';
            }
        }
    };
    utils.inherits(EditorUI, baidu.editor.ui.UIBase);


    var instances = {};


    UE.ui.Editor = function (options) {
        var editor = new UE.Editor(options);
        editor.options.editor = editor;
        utils.loadFile(document, {
            href:editor.options.themePath + editor.options.theme + "/css/ueditor.css",
            tag:"link",
            type:"text/css",
            rel:"stylesheet"
        });

        var oldRender = editor.render;
        editor.render = function (holder) {
            if (holder.constructor === String) {
                editor.key = holder;
                instances[holder] = editor;
            }
            utils.domReady(function () {
                editor.langIsReady ? renderUI() : editor.addListener("langReady", renderUI);
                function renderUI() {
                    editor.setOpt({
                        labelMap:editor.options.labelMap || editor.getLang('labelMap')
                    });
                    new EditorUI(editor.options);
                    if (holder) {
                        if (holder.constructor === String) {
                            holder = document.getElementById(holder);
                        }
                        holder && holder.getAttribute('name') && ( editor.options.textarea = holder.getAttribute('name'));
                        if (holder && /script|textarea/ig.test(holder.tagName)) {
                            var newDiv = document.createElement('div');
                            holder.parentNode.insertBefore(newDiv, holder);
                            var cont = holder.value || holder.innerHTML;
                            editor.options.initialContent = /^[\t\r\n ]*$/.test(cont) ? editor.options.initialContent :
                                cont.replace(/>[\n\r\t]+([ ]{4})+/g, '>')
                                    .replace(/[\n\r\t]+([ ]{4})+</g, '<')
                                    .replace(/>[\n\r\t]+</g, '><');
                            holder.className && (newDiv.className = holder.className);
                            holder.style.cssText && (newDiv.style.cssText = holder.style.cssText);
                            if (/textarea/i.test(holder.tagName)) {
                                editor.textarea = holder;
                                editor.textarea.style.display = 'none';


                            } else {
                                holder.parentNode.removeChild(holder);


                            }
                            if(holder.id){
                                newDiv.id = holder.id;
                                domUtils.removeAttributes(holder,'id');
                            }
                            holder = newDiv;
                            holder.innerHTML = '';
                        }

                    }
                    domUtils.addClass(holder, "edui-" + editor.options.theme);
                    editor.ui.render(holder);
                    var opt = editor.options;
                    //给实例添加一个编辑器的容器引用
                    editor.container = editor.ui.getDom();
                    var parents = domUtils.findParents(holder,true);
                    var displays = [];
                    for(var i = 0 ,ci;ci=parents[i];i++){
                        displays[i] = ci.style.display;
                        ci.style.display = 'block'
                    }
                    if (opt.initialFrameWidth) {
                        opt.minFrameWidth = opt.initialFrameWidth;
                    } else {
                        opt.minFrameWidth = opt.initialFrameWidth = holder.offsetWidth;
                        var styleWidth = holder.style.width;
                        if(/%$/.test(styleWidth)) {
                            opt.initialFrameWidth = styleWidth;
                        }
                    }
                    if (opt.initialFrameHeight) {
                        opt.minFrameHeight = opt.initialFrameHeight;
                    } else {
                        opt.initialFrameHeight = opt.minFrameHeight = holder.offsetHeight;
                    }
                    for(var i = 0 ,ci;ci=parents[i];i++){
                        ci.style.display =  displays[i]
                    }
                    //编辑器最外容器设置了高度，会导致，编辑器不占位
                    //todo 先去掉，没有找到原因
                    if(holder.style.height){
                        holder.style.height = ''
                    }
                    editor.container.style.width = opt.initialFrameWidth + (/%$/.test(opt.initialFrameWidth) ? '' : 'px');
                    editor.container.style.zIndex = opt.zIndex;
                    oldRender.call(editor, editor.ui.getDom('iframeholder'));
                    editor.fireEvent("afteruiready");
                }
            })
        };
        return editor;
    };


    /**
     * @file
     * @name UE
     * @short UE
     * @desc UEditor的顶部命名空间
     */
    /**
     * @name getEditor
     * @since 1.2.4+
     * @grammar UE.getEditor(id,[opt])  =>  Editor实例
     * @desc 提供一个全局的方法得到编辑器实例
     *
     * * ''id''  放置编辑器的容器id, 如果容器下的编辑器已经存在，就直接返回
     * * ''opt'' 编辑器的可选参数
     * @example
     *  UE.getEditor('containerId',{onready:function(){//创建一个编辑器实例
     *      this.setContent('hello')
     *  }});
     *  UE.getEditor('containerId'); //返回刚创建的实例
     *
     */
    UE.getEditor = function (id, opt) {
        var editor = instances[id];
        if (!editor) {
            editor = instances[id] = new UE.ui.Editor(opt);
            editor.render(id);
        }
        return editor;
    };


    UE.delEditor = function (id) {
        var editor;
        if (editor = instances[id]) {
            editor.key && editor.destroy();
            delete instances[id]
        }
    };

    UE.insertPic = function(ueditor){
        if(!ueditor) return;
        var bodyEditor = ueditor.body;
        var btnInsertPic = ueditor.container.querySelector('.edui-for-simpleupload');
        var input = document.createElement('input');
        var range;
        input.type = 'file';
        input.accept="image/*";
        input.style.display = "none";
        btnInsertPic.appendChild(input);

        bodyEditor.onclick = function(){
            range = ueditor.window.getSelection().getRangeAt(0);//找到焦点位置
        }

        if(typeof FileReader==='undefined'){
            alert("抱歉，你的浏览器不支持 FileReader");
            input.setAttribute('disabled','disabled');
        }else{
            input.addEventListener('change',readFile,false);
        }
        btnInsertPic.onclick = function (e) {
            input.click();
            e.stopPropagation();
        }
        function readFile(e){
            e.stopPropagation();
            var file = this.files[0];
            if(!/image\/\w+/.test(file.type)){
                alert("文件必须为图片！");
                return false;
            }
            var reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = function(e){
                var img = document.createElement('img');
                img.src = this.result;
                if(range){
                    range.insertNode(img);//在焦点插入节点
                }else{
                    bodyEditor.appendChild(img);
                }
            }
        }
    };

    UE.registerUI = function(uiName,fn,index,editorId){
        utils.each(uiName.split(/\s+/), function (name) {
            UE._customizeUI[name] = {
                id : editorId,
                execFn:fn,
                index:index
            };
        })

    }

})();

// adapter/message.js
UE.registerUI('message', function(editor) {

    var editorui = baidu.editor.ui;
    var Message = editorui.Message;
    var holder;
    var _messageItems = [];
    var me = editor;

    me.addListener('ready', function(){
        holder = document.getElementById(me.ui.id + '_message_holder');
        updateHolderPos();
        setTimeout(function(){
            updateHolderPos();
        }, 500);
    });

    me.addListener('showmessage', function(type, opt){
        opt = utils.isString(opt) ? {
            'content': opt
        } : opt;
        var message = new Message({
                'timeout': opt.timeout,
                'type': opt.type,
                'content': opt.content,
                'keepshow': opt.keepshow,
                'editor': me
            }),
            mid = opt.id || ('msg_' + (+new Date()).toString(36));
        message.render(holder);
        _messageItems[mid] = message;
        message.reset(opt);
        updateHolderPos();
        return mid;
    });

    me.addListener('updatemessage',function(type, id, opt){
        opt = utils.isString(opt) ? {
            'content': opt
        } : opt;
        var message = _messageItems[id];
        message.render(holder);
        message && message.reset(opt);
    });

    me.addListener('hidemessage',function(type, id){
        var message = _messageItems[id];
        message && message.hide();
    });

    function updateHolderPos(){
        var toolbarbox = me.ui.getDom('toolbarbox');
        if (toolbarbox) {
            holder.style.top = toolbarbox.offsetHeight + 3 + 'px';
        }
        holder.style.zIndex = Math.max(me.options.zIndex, me.iframe.style.zIndex) + 1;
    }

});


// adapter/autosave.js
UE.registerUI('autosave', function(editor) {
    var timer = null,uid = null;
    editor.on('afterautosave',function(){
        clearTimeout(timer);

        timer = setTimeout(function(){
            if(uid){
                editor.trigger('hidemessage',uid);
            }
            uid = editor.trigger('showmessage',{
                content : editor.getLang('autosave.success'),
                timeout : 50000
            });

        },50000)
    })

});



})();

﻿/// <reference path="../lib/jquery-2.1.4.js" />

var Internationalization = (function () {
    function Internationalization(lang, resource) {
        this.type = lang || localStorage["language"];
        this.resource = resource || {};
    }

    Internationalization.prototype = {
        getResource: function () {
            return this.resource;
        },

        //Internationalizate whole page
        fillPage: function () {
            this.fill2($('[i18n]'));
        },

        //Internationalizate the children of this special 'JQuery element'
        fillArea: function (element) {
            //this.fill(element.find('[i18n]'));原来i18n方法
            this.fill2(element.find('[i18n]'));
            try {
                Permission.check(element);
            } catch (e) {
                console.log('check permission failed:' + e);
            }
        },

        fillAreaAttribute: function (element, attributeName) {
            this.fill(element.find('[i18n][' + attributeName + ']'), attributeName);
        },

        fill: function (arrElement, attributeName) {
            for (var i = 0, arrPath, text, len = arrElement.length; i < len; i++) {
                arrPath = arrElement[i].attributes["i18n"].value.split('.');

                text = this.resource;
                for (var j = 0; j < arrPath.length; j++) {
                    text = text && text[arrPath[j]];
                }

                if (!attributeName) {
                    arrElement[i].innerHTML = text;
                }
                else {
                    arrElement[i].setAttribute(attributeName, text);
                }
            }
        },
        getI18nValue: function (i18nKey) {
            if (!i18nKey) {
                return '';
            }
            var arrPath = i18nKey.split('.');

            var text = this.resource;
            for (var j = 0; j < arrPath.length; j++) {
                text = text && text[arrPath[j]];
            }
            return text;
        },

        fill2: function (arrElement) {
            for (var i = 0, len = arrElement.length; i < len; i++) {
                var i18nValue = arrElement[i].attributes["i18n"];
                var items = i18nValue.value.split(';'), item, attrMap;
                for (var j = 0; j < items.length; j++) {
                    item = items[j];
                    if (!item) {
                        continue;
                    }
                    if (item.indexOf('=') === -1) {
                        i18nValue = this.getI18nValue(item);
                        arrElement[i].innerHTML = i18nValue;
                    } else {
                        attrMap = item.split('=');
                        if (!attrMap[0]) {
                            continue;
                        }
                        arrElement[i].setAttribute(attrMap[0], this.getI18nValue(attrMap[1]));
                    }
                }
            }
        },

        //params: strPath: ex, observerScreen.menu.NAV_OBSERVER_TITLE. return: value
        findContent: function (strPath) {
            var arrPath = strPath.split('.');
            var text = this.resource;
            for (var i = 0, len = arrPath.length; i < len; i++) {
                text = text && text[arrPath[i]];
            }
            return text;
        }
    };

    return Internationalization;
})();

//load language
function InitI18nResource(strLanguage, isForce, filePath) {
    if (!strLanguage) {
        strLanguage = localStorage["isUserSelectedLanguage"] || navigator.language.split('-')[0];
    }
    if (isForce) {
        localStorage["isUserSelectedLanguage"] = strLanguage;
    } else if (localStorage["isUserSelectedLanguage"]) {
        strLanguage = localStorage["isUserSelectedLanguage"];
    }
    // 默认为主网页的 i18n 路径
    filePath = filePath || '/static/views/js/i18n/';
    return $.ajax({
        async: false,
        url: filePath + strLanguage + ".js",
        dataType: "script"
    }).then(function () {
        // 加载成功，将数据递出
        localStorage["language"] = strLanguage;
        return i18n_resource;
    }, function () {
        // 加载失败，则再去请求一次 en.js
        return $.ajax({
            async: false,
            url: filePath + "en.js",
            dataType: 'script'
        }).then(function () {
            localStorage["language"] = "en";
            return i18n_resource;
        }, function () {
            // 再失败，直接返回 {}
            console.warn('i18n files loading failed!');
            return {};
        });
    });
}

var infoBox = infoBox || {};

(function ($) {
    var infoBoxBase = {
        $el: null,
        options: {
            position: 'center'
        },
        _init: function () {
            this._removeAll();
            this._createBox();
            if (this.options.movable) {
                this._makeMovable();
            }

        },
        _createBox: function () {
            var me = this, $box;
            $box = $('<div class="infoBox infoBox-unique ' + me.options.boxType + '"></div>');

            this.$el = $box;

            if (me.options.hasHeader) {
                var $header = $('<div class="infoBox-header"></div>');

                if (me.options.movable) {
                    $header.addClass('movable');
                }
                if (me.options.title) {
                    $header.append('<div class="ellipsis infoBox-title">' + me.options.title + '</div>');
                }


                if (me.options.hasClose) {
                    var $close = $('<div class="infoBox-close"></div>');
                    $header.append($close);
                    $close.click(function () {
                        me._destroy();
                    })
                }
                $box.append($header);
            }

            var $body = $('<div class="infoBox-body scrollbar"></div>');

            if (me.options.icon) {
                $body.append('<div class="infoBox-icon"><img src="/static/scripts/lib/beopNotification/image/' + me.options.icon + '"></div>');
            }

            if (me.options.msg) {
                $body.append('<div class="infoBox-msg">' + me.options.msg + '</div>');
            }
            $box.append($body);
            if (me.options.buttons) {
                var $footer = $('<div class="infoBox-footer"></div>');
                $box.append($footer);
                for (var btnKey in me.options.buttons) {
                    $footer.append(me._createBtn(me.options.buttons[btnKey]));
                }
            }

            if (me.options.delay) {
                var $progress = $('<div class="progress progress-bar-success"><div class="progress-bar" role="progressbar" aria-valuemin="0" aria-valuemax="100" style="width:0%"><span class="sr-only"</span></div></div>');

                $progress.insertBefore($body);
                $progress.animate({
                    width: "100%"
                }, +me.options.delay ? +me.options.delay : 20000, function () {
                    me._destroy();
                });
            }

            if (me.options.modal) {
                var modalHtml = '<div id="infoBoxModal"></div>';
                $('body').append(modalHtml);
                //$box.addClass('modal');
            }
            $box.appendTo(document.body);
            return $box;
        },
        _processInput: function (options) {
            options.boxType = this.constructor.name ? this.constructor.name : '';
            return options;
        },
        _show: function () {
            this.$el.fadeIn('fast');
        },
        _hide: function () {
            this.$el.hide();
        },
        _destroy: function () {
            var me = this;
            me.$el.fadeOut('fast', function () {
                me.$el.remove();
            });
            if (me.options.modal) {
                $('#infoBoxModal').remove();
            }
        },

        _makeMovable: function () {
            var me = this;
            me.$el.mousedown(function () {
                me.$el.mousemove(function (e) {

                    var thisX = event.pageX - $(this).width() / 2,
                        thisY = event.pageY - $(this).height() / 2;

                    me.$el.offset({
                        left: thisX,
                        top: thisY
                    });
                })
            }).mouseup(function () {
                me.$el.off('mousemove');
            })
        },
        _removeAll: function () {
            if (this.options.boxType) {
                if (this.options.boxType == 'remind') {
                    $(document.body).children('.remind').remove();
                } else {

                }
            } else {
                $(document.body).children('.infoBox-unique').remove();
            }

        },

        _createBtn: function (option) {
            var me = this;
            var $button = $('<button class="btn btn-info alert-button"></button>');
            $button.text(option.text);
            $button.click(function () {
                me._destroy();
                option.callback && option.callback();
            });
            $button.addClass(option.css);
            this.$el.find('.infoBox-footer').append($button);
        }
    };

    function infoBoxAlert(typeOrMsg, options) {
        var _this = this;
        if (!options) {
            this.type = infoBox.alert.base.type;
            options = {msg: typeOrMsg}
        }

        if (!typeOrMsg) {
            this.type = infoBox.alert.base.type;
        } else if (infoBox.alert.options[typeOrMsg]) {
            this.type = typeOrMsg;
        } else {
            options = $.extend(options, {msg: typeOrMsg});
        }

        this.options = this._processInput(options);

        this._init();
        this._show();

        if (options.delay && !isNaN(options.delay)) {
            var timeout = setTimeout(function () {
                _this._destroy();
                timeout = null;
            }, options.delay)
        }
    }

    infoBoxAlert.prototype = $.extend({}, infoBoxBase, {
        constructor: infoBoxAlert,
        _processInput: function (options) {
            var mergedOptions = infoBoxBase._processInput.call(this, options);

            options = $.extend(true, {}, infoBox.alert.base, infoBox.alert.options[this.type], mergedOptions);

            return options;
        },
        _init: function () {
            infoBoxBase._init.call(this);
        }
    });

    infoBox.alert = function (type, options) {
        return new infoBoxAlert(type, options);
    };

    infoBox.alert.base = {
        type: 'info',
        buttons: {
            ok: {
                text: 'OK',
                class: 'alert-button',
                callback: ''
            }
        },
        modal: true,
        hasHeader: true,
        hasClose: true,
        movable: false
    };

    infoBox.alert.options = {
        success: {
            icon: 'alert-success.png'
        },
        warning: {
            icon: 'alert-warning.png'
        },
        danger: {
            icon: 'alert-danger.png'
        },
        info: {
            icon: 'alert-info.png'
        }
    };


    function infoBoxConfirm(msg, okCallback, cancelCallback, options) {
        this.type = infoBox.confirm.base.type;
        if (!okCallback && !cancelCallback) {
            okCallback = function () {
            };
            cancelCallback = function () {
            };
            this.type = 'danger';
            msg = 'warning:you not pass the callback to confirm function';
        }
        options = $.extend(options, {
            msg: msg,
            buttons: {
                ok: {
                    callback: okCallback
                },
                cancel: {
                    callback: cancelCallback
                }
            }
        });
        this.options = this._processInput(options);
        this._init();
        this._show();
    }

    infoBoxConfirm.prototype = $.extend({}, infoBoxBase, {
        constructor: infoBoxConfirm,
        _processInput: function (options) {
            var mergedOptions = infoBoxBase._processInput.call(this, options);

            options = $.extend(true, {}, infoBox.confirm.base, infoBox.confirm.options[this.type], mergedOptions);

            return options;
        },
        _init: function () {
            infoBoxBase._init.call(this);
        }
    });

    infoBox.confirm = function (msg, okCallback, cancelCallback, options) {
        return new infoBoxConfirm(msg, okCallback, cancelCallback, options);
    };

    infoBox.confirm.base = {
        type: 'info',
        buttons: {
            ok: {
                text: 'OK',
                class: 'alert-button',
                callback: function () {
                    return true;
                }
            },
            cancel: {
                text: 'Cancel',
                class: 'alert-button',
                callback: function () {
                    return false;
                }
            }
        },
        modal: true,
        hasHeader: true,
        hasClose: true,
        movable: false
    };

    infoBox.confirm.options = {
        success: {
            icon: 'alert-success.png'
        },
        warning: {
            icon: 'alert-warning.png'
        },
        danger: {
            icon: 'alert-danger.png'
        },
        info: {
            icon: 'alert-info.png'
        }
    };

    // remind
    function infoBoxRemind(typeOrMsg, options) {
        if (!options) {
            this.type = infoBox.remind.base.type;
            options = {msg: typeOrMsg}
        }

        if (!typeOrMsg) {
            this.type = infoBox.remind.base.type;
        } else if (infoBox.remind.options[typeOrMsg]) {
            this.type = typeOrMsg;
        } else {
            options = $.extend(options, {msg: typeOrMsg});
        }

        this.options = this._processInput(options);

        this._init();
        this.$el.slideDown(1000);
    }

    infoBoxRemind.prototype = $.extend({}, infoBoxBase, {
        constructor: infoBoxRemind,
        _processInput: function (options) {
            var mergedOptions = infoBoxBase._processInput.call(this, options);

            options = $.extend(true, {}, infoBox.remind.base, infoBox.remind.options[this.type], mergedOptions);

            return options;
        },
        _init: function () {
            infoBoxBase._init.call(this);
        }
    });

    infoBox.remind = function (type, options) {
        return new infoBoxRemind(type, options);
    };

    infoBox.remind.base = {
        type: 'info',
        modal: false,
        hasHeader: true,
        hasClose: true
    };

    infoBox.remind.options = {};

    // version
    function infoBoxVersion(title, content) {
        this.options = this._processInput({'msg': content});

        this._init();

        var $versionTitle = '<div class="ellipsis infoBoxVersion-title" title="' + title + '">' +
            '<span class="dib mr5">版本号：</span><span>' + title + '</span></div>';
        this.$el.find('.infoBox-header').append($versionTitle);
        this.$el.slideDown(1000);
    }

    infoBoxVersion.prototype = $.extend({}, infoBoxBase, {
        constructor: infoBoxVersion,
        _processInput: function (options) {
            var mergedOptions = infoBoxBase._processInput.call(this, options);

            options = $.extend(true, {}, infoBox.version.base, infoBox.version.options[this.type], mergedOptions);

            return options;
        },

        _init: function () {
            infoBoxBase._init.call(this);
        }
    });

    infoBox.version = function (title, content) {
        return new infoBoxVersion(title, content);
    };

    infoBox.version.base = {
        modal: false,
        hasHeader: true,
        hasClose: true,
        delay: 20000
    };

    infoBox.version.options = {};


    // message
    function infoBoxMessage(content) {
        this.options = this._processInput({'msg': content});
        this._init();
        var $messageTitle = '<div style="position: relative; top: -10px;"><span class="fl">消息</span>' +
            '<span class="fr header-right"><span class="mr5">全部已读</span><span class="glyphicon glyphicon-envelope"></span></span></div>';
        this.$el.find('.infoBox-header').append($messageTitle);
        this.$el.slideDown(1000);
    }

    infoBoxMessage.prototype = $.extend({}, infoBoxBase, {
        constructor: infoBoxMessage,
        _processInput: function (options) {
            var mergedOptions = infoBoxBase._processInput.call(this, options);

            options = $.extend(true, {}, infoBox.message.base, infoBox.message.options[this.type], mergedOptions);

            return options;
        },

        _init: function () {
            infoBoxBase._init.call(this);
        }
    });

    infoBox.message = function (content) {
        return new infoBoxMessage(content);
    };

    infoBox.message.base = {
        modal: false,
        hasHeader: true
    };

    infoBox.message.options = {};


})(jQuery);

try {
    if (infoBox) {
        alert = infoBox.alert;
        confirm = infoBox.confirm;
        remindInfoBox = infoBox.remind;
        versionInfoBox = infoBox.version;
        messageInfoBox = infoBox.message;
    }
} catch (e) {
    console.warn('弹框初始化失败' + e);
}
﻿/// <reference path="../../lib/jquery-1.8.3.js" />

var beop = beop || {};
beop.constant = {
    project_img_path: '/static/images/project_img/',
    project_default_img: 'default.jpg'
};

// 生成 object id - 24 位
var ObjectId = function () {
    // 前 8 位，随机十六进制数
    var hex8 = ('00000000' + Math.floor(Math.random() * 0xFFFFFFFF).toString(16)).slice(-8);
    // 中间 3 位，用户id，不足补 0，超过从前面截断
    var userId = ( '000' + (AppConfig.userId || '000') ).slice(-3);
    // 最后 13 位，unix 时间戳
    var timestamp = new Date().valueOf();

    return timestamp+ userId + hex8 ;
};

(function (exports) {
    exports.namespace = function (path) {
        var obj = window;
        path = path.split('.');

        path.forEach(function (p, i) {
            p = p.trim();
            if(i === 0 && p === 'window') return;
            obj = obj[p] = obj[p] || {};
        });

        return obj;
    };
}(window));

var FullScreenManager = (function () {
    var manager = Object.create({
        init: function () {
            var _this = this;

            $(document).off('webkitfullscreenchange');
            $(document).on('webkitfullscreenchange', function () {
                var isFullScreen = !!document.webkitFullscreenElement;
                if (isFullScreen) {
                    _this.onFullScreenEnter();
                } else {
                    _this.onFullScreenOut();
                }
            });
            $(document).off('mozfullscreenchange');
            $(document).on('mozfullscreenchange', function () {
                var isFullScreen = !!document.webkitFullscreenElement;
                if (isFullScreen) {
                    _this.onFullScreenEnter();
                } else {
                    _this.onFullScreenOut();
                }
            });
            $(document).off('msfullscreenchange');
            $(document).on('msfullscreenchange', function () {
                var isFullScreen = !!document.webkitFullscreenElement;
                if (isFullScreen) {
                    _this.onFullScreenEnter();
                } else {
                    _this.onFullScreenOut();
                }
            });

            if (typeof onError === 'function') {
                $(document).off('webkitfullscreenerror');
                $(document).on('webkitfullscreenerror', this.onFullScreenError);
                $(document).off('mozfullscreenerror');
                $(document).on('mozfullscreenerror', this.onFullScreenError);
                $(document).off('msfullscreenerror');
                $(document).on('msfullscreenerror', this.onFullScreenError);
            }
        },
        onFullScreenEnter: function () {
        },
        onFullScreenOut: function () {
        },
        onFullScreenError: function () {
        },
        // open/close full screen mode
        // note: for security concerns, this api an only works in user actions
        toggle: function () {
            if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {  // current working methods
                if (document.documentElement.requestFullscreen) {
                    document.documentElement.requestFullscreen();
                } else if (document.documentElement.msRequestFullscreen) {
                    document.documentElement.msRequestFullscreen();
                } else if (document.documentElement.mozRequestFullScreen) {
                    document.documentElement.mozRequestFullScreen();
                } else if (document.documentElement.webkitRequestFullscreen) {
                    document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
                }
            } else {
                if (document.exitFullscreen) {
                    document.exitFullscreen();
                } else if (document.msExitFullscreen) {
                    document.msExitFullscreen();
                } else if (document.mozCancelFullScreen) {
                    document.mozCancelFullScreen();
                } else if (document.webkitExitFullscreen) {
                    document.webkitExitFullscreen();
                }
            }
        }
    });

    manager.init();

    return manager;
}());


function StringBuilder() {
    this.data = Array("");
}
StringBuilder.prototype.append = function () {
    this.data.push(arguments[0]);
    return this;
};
StringBuilder.prototype.toString = function () {
    return this.data.join("");
};
StringBuilder.prototype.getLength = function () {
    return this.data.length;
};


//string 的format方法
//usage 1: '{0} {1} {2} {3}'.format('this', 'is', 'a', 'test') -> this is a test
//usage 2: '{0} {1} {2} {3}'.format(['this', 'is', 'a', 'test']) -> this is a test
if (!String.prototype.format) {
    String.prototype.format = function () {
        if (arguments[0] === undefined) {
            return '';
        }
        if (arguments[0].constructor === Array) {
            var args = arguments[0];
        } else {
            var args = arguments;
        }

        // var i = 0;
        // var str = this.toString();
        // while (args[i]) str = str.replace('{'+i+'}', args[i++]);
        // return str;

        return this.replace(/{(\d+)}/g, function (match, number) {
            return typeof args[number] != 'undefined' ? args[number] : match;
        });
    };
}

// input: '<td>{name}</td><td>{gender}</td>'.formatEL({name: 'zhangsan', gender: 'male'});
// output: '<td>zhangsan</td><td>male</td>'
// input: '{name},{age},{address}'.formatEL({name: 'zhangsan', age: 20, address: 'shanghai', other: 'other'});
// output: 'zhangsan,20,shanghai'
// input: '{}'.formatEL({foo: 1});
// output: '{}'
// input: '{{name}}'.formatEL({name: 'zhangsan'});
// output: '{zhangsan}'
if (!String.prototype.formatEL) {
    String.prototype.formatEL = function (o) {
        var str = this.toString();
        if (!str || !o) return '';

        for (var p in o) {
            if (o.hasOwnProperty(p)) {
                str = str.replace(new RegExp('{' + p + '}', 'g'), o[p]);
            }
        }
        return str;
    };
}

//parse String to Date
//ex:parse '2015-02-02 08:00:00' / '2015/02/02 08:00:00' to Date type
String.prototype.toDate = function () {
    var str = this;
    if (str.indexOf('-') > -1)
    //this = this.replace(/-/g, '/')
        str = str.replace('-', '/').replace('-', '/');
    return new Date(str);
};
//parse timestamp to Date
Number.prototype.toDate = function () {
    return new Date(this);
};

function Alert(targetElement, type, msg) {
    this.element = targetElement;
    this.str = new StringBuilder();
    this.str.append('<div style="display:none;" class="alert beop-alert alert-')
        .append(type)
        .append(' alert-dismissible" role="alert"><button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>')
        .append('<div class="alert-msg">' + msg + '</div>')
        .append('</div>');
    this.$alert = $(this.str.toString());
}

Alert.danger = function (targetElement, msg) {
    return new Alert(targetElement, Alert.type.danger, msg).show();
};

Alert.warning = function (targetElement, msg) {
    return new Alert(targetElement, Alert.type.warning, msg).show();
};

Alert.success = function (targetElement, msg) {
    return new Alert(targetElement, Alert.type.success, msg).show();
};

Alert.info = function (targetElement, msg) {
    return new Alert(targetElement, Alert.type.info, msg).show();
};

Alert.closeAll = function () {
    $('.beop-alert').remove();
};

Alert.type = {
    danger: 'danger',
    warning: 'warning',
    success: 'success',
    info: 'info'
};

Alert.prototype.show = function (duration) {
    Alert.closeAll();
    if (duration) {
        var _this = this;
        setTimeout(function () {
            _this.close();
        }, duration);
    }
    $(this.element).append(this.$alert);
    this.$alert.slideDown(500);
    return this;
};
Alert.prototype.close = function () {
    var _this = this;
    this.$alert.slideUp(500, function () {
        _this.$alert.remove();
        _this = null;
    });
};

Alert.prototype.setMessage = function (msg) {
    if (!msg) {
        return false
    }
    this.$alert.find('.alert-msg').text(msg);

};

Alert.prototype.setStyle = function (style) {
    if (style && typeof style !== 'string') {
        this.$alert.css(style);
    }
    return this;
};

Alert.prototype.showAtTop = function (duration) {
    this.setStyle({
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        margin: 'auto',
        width: '30%',
        textAlign: 'center',
        zIndex: 10000
    });
    this.show(duration);
};

function showDialog(url) {
    return WebAPI.get(url).done(function (resultHtml) {
        $("#dialogContent").html(resultHtml);
        $('#dialogModal').modal({});
    });
}


function clone(obj) {
    if (obj == null || typeof (obj) != 'object')
        return obj;

    var temp = obj.constructor(); // changed

    for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
            temp[key] = clone(obj[key]);
        }
    }
    return temp;
}

//对Date的扩展，将 Date 转化为指定格式的String       
//月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q) 可以用 1-2 个占位符       
//年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)       
//eg:       
//(new Date()).pattern("yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423       
//(new Date()).pattern("yyyy-MM-dd E HH:mm:ss") ==> 2009-03-10 二 20:09:04       
//(new Date()).pattern("yyyy-MM-dd EE hh:mm:ss") ==> 2009-03-10 周二 08:09:04       
//(new Date()).pattern("yyyy-MM-dd EEE hh:mm:ss") ==> 2009-03-10 星期二 08:09:04       
//(new Date()).pattern("yyyy-M-d h:m:s.S") ==> 2006-7-2 8:9:4.18       
Date.prototype.format = function (fmt) {
    var o = {
        "M+": this.getMonth() + 1, //月份           
        "d+": this.getDate(), //日           
        "h+": this.getHours() % 12 == 0 ? 12 : this.getHours() % 12, //小时           
        "H+": this.getHours(), //小时           
        "m+": this.getMinutes(), //分           
        "s+": this.getSeconds(), //秒           
        "q+": Math.floor((this.getMonth() + 3) / 3), //季度           
        "S": this.getMilliseconds() //毫秒           
    };
    var week = {
        "0": "/u65e5",
        "1": "/u4e00",
        "2": "/u4e8c",
        "3": "/u4e09",
        "4": "/u56db",
        "5": "/u4e94",
        "6": "/u516d"
    };
    if (/(y+)/.test(fmt)) {
        fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    }
    if (/(E+)/.test(fmt)) {
        fmt = fmt.replace(RegExp.$1, ((RegExp.$1.length > 1) ? (RegExp.$1.length > 2 ? "/u661f/u671f" : "/u5468") : "") + week[this.getDay() + ""]);
    }
    for (var k in o) {
        if (new RegExp("(" + k + ")").test(fmt)) {
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
        }
    }
    return fmt;
}

var DateUtil = (function () {
    var dateLocale = {
        month: {
            en: {
                month_names: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                month_names_short: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
            },
            zh: {
                month_names: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
                month_names_short: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月']
            }
        }
    };

    function getWeekNumber(d) {
        d = new Date(+d);
        d.setHours(0, 0, 0);
        d.setDate(d.getDate() + 4 - (d.getDay() || 7));
        var yearStart = new Date(d.getFullYear(), 0, 1);
        var weekNo = Math.ceil(( ( (d - yearStart) / 86400000) + 1) / 7)
        return [d.getFullYear(), weekNo];
    }

    function getLastWeekNumberOf(y, w) {
        w -= 1;
        if (w === 0) {
            y = y - 1;
            w = 52;
        }
        return [y, w];
    }

    function getNextWeekNumberOf(y, w) {
        w += 1;
        if (w === 53) {
            y += 1;
            w = 1;
        }
        return [y, w];
    }

    function isLeapYear(y) {
        if (Object.prototype.toString.call(y) === '[object Date]') {
            y = y.getUTCFullYear();
        }
        return (( y % 4 === 0 ) && ( y % 100 !== 0 )) || ( y % 400 === 0 );
    }

    function daysInMonth(dt) {
        var m = dt.getUTCMonth();
        if (m === 1) {
            return isLeapYear(dt) ? 29 : 28;
        }
        return [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][m];
    }

    function getFirstDayOfWeek(year, week) {
        var d = new Date(year, 0, 1),
            offset = d.getTimezoneOffset();
        d.setDate(d.getDate() + 4 - (d.getDay() || 7));

        d.setTime(d.getTime() + 7 * 24 * 60 * 60 * 1000
            * (week + (year == d.getFullYear() ? -1 : 0 )));

        d.setTime(d.getTime()
            + (d.getTimezoneOffset() - offset) * 60 * 1000);

        d.setDate(d.getDate() - 3);

        return d;
    }

    function getDateRangeOnWeekNumber(year, week) {
        if (!year || !week) {
            return;
        }
        var firstDay = getFirstDayOfWeek(year, week), lastDay = new Date(firstDay);
        lastDay.setDate(firstDay.getDate() + 6);
        return [firstDay, lastDay];
    }

    function getMonthName(index, language) {
        var monthList = language && language in dateLocale.month ? dateLocale.month[language].month_names : dateLocale.month['en'].month_names;
        return monthList[index];
    }

    function getMonthNameShort(index, language) {
        var monthList = language && language in dateLocale.month ? dateLocale.month[language].month_names_short : dateLocale.month['en'].month_names_short;
        return monthList[index];
    }

    function getLastMonth(currentMonth) {
        if (!currentMonth) {
            currentMonth = new Date().getMonth() + 1;
        }
        if (currentMonth === 1) {
            return 12;
        } else {
            return currentMonth - 1;
        }
    }

    function getNextMonth(currentMonth) {
        if (!currentMonth) {
            currentMonth = new Date().getMonth() + 1;
        }
        if (currentMonth === 12) {
            return 1;
        } else {
            return currentMonth + 1;
        }
    }

    /**
     * get the relative date info from date2 according to date1
     * TESTS:
     * TEST_1
     * DateUtil.getRelativeDateInfo(new Date('2015-05-08 16:03:25'), new Date('2015-05-04 14:41:57'))
     * output: "4 days ago"
     * TEST_2
     * DateUtil.getRelativeDateInfo(new Date('2015-05-08 16:03:25'), new Date('2015-05-08 15:41:57'))
     * output: "21 minutes ago"
     * TEST_3
     * DateUtil.getRelativeDateInfo(new Date('2015-05-08 16:03:25'), new Date('2015-04-04 14:41:57'))
     * output: "34 days ago"
     * TEST_4
     * DateUtil.getRelativeDateInfo(new Date('2015-05-08 16:03:25'), new Date('2014-05-04 14:41:57'))
     * output: "1 year ago"
     */
    function getRelativeDateInfo(date1, date2) {
        var now = new Date();
        var lang = I18n.type;
        var value1, value2, ts, info;

        // deal with all empty
        if (!date1 && !date2) return '';

        value1 = (date1 || now).valueOf();
        value2 = (date2 || now).valueOf();

        // do Math.abs, and turn millisecond to second
        ts = Math.floor(Math.abs(value1 - value2) / 1000);

        switch (true) {
            // seconds level
            // will show "n second(s) ago/later"
            case ts < 60:
                info = ts + (ts === 1 ? ' second' : ' seconds');
                break;
            // minutes level
            // will show "n minute(s) ago/later"
            case ts < 3600/*60 * 60*/
            :
                ts = Math.floor(ts / 60);
                info = ts + (ts === 1 ? ' minute' : ' minutes');
                break;
            // hours level
            // will show "n hour(s) ago/later"
            case ts < 86400/*60 * 60 * 24*/
            :
                ts = Math.floor(ts / (3600/*60 * 60*/));
                info = ts + (ts === 1 ? ' hour' : ' hours');
                break;
            // days level
            // will show "n day(s) ago/later"
            case ts < 31536000/*60 * 60 * 24 * 365*/
            :
                ts = Math.floor(ts / (86400/*60 * 60 * 24*/));
                info = ts + (ts === 1 ? ' day' : ' days');
                break;
            // years level
            // will show "n year(s) ago/later"
            default:
                ts = Math.floor(ts / (31536000/*60 * 60 * 24 * 365*/));
                info = ts + (ts === 1 ? ' year' : ' years');
                break;
        }
        info += value1 > value2 ? ' ago' : ' later';
        if (lang === 'zh') {
            info = info.replace(/\s(seconds?|minutes?|hours?|days?|years?)\s(ago|later)$/, function ($0, $1, $2) {
                var rs = '';
                if ($1.indexOf('second') > -1) rs += '秒钟';
                if ($1.indexOf('minute') > -1) rs += '分钟';
                if ($1.indexOf('hour') > -1) rs += '小时';
                if ($1.indexOf('day') > -1) rs += '天';
                if ($1.indexOf('year') > -1) rs += '年';
                if ($2 === 'ago') rs += '前';
                if ($2 === 'later') rs += '后';
                return rs;
            });
        }
        return info;
    }

    return {
        getWeekNumber: getWeekNumber,
        isLeapYear: isLeapYear,
        daysInMonth: daysInMonth,
        getLastWeekNumberOf: getLastWeekNumberOf,
        getNextWeekNumberOf: getNextWeekNumberOf,
        getDateRangeOnWeekNumber: getDateRangeOnWeekNumber,
        getFirstDayOfWeek: getFirstDayOfWeek,
        getMonthName: getMonthName,
        getMonthNameShort: getMonthNameShort,
        getLastMonth: getLastMonth,
        getNextMonth: getNextMonth,
        getRelativeDateInfo: getRelativeDateInfo
    }
})();
var StringUtil = (function () {
    var HTML_ENTITIES = {
        '&': '&amp;',
        '>': '&gt;',
        '<': '&lt;',
        '"': '&quot;',
        "'": '&#39;',
        '`': '&#x60;'
    }, HTML_ENTITIES_INVERT = invert(HTML_ENTITIES);

    function invert(obj) {
        var result = {}, keys = Object.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
            result[obj[keys[i]]] = keys[i];
        }
        return result;
    };

    function padLeft(oldStr, padNum, padStr) {
        if (!padStr) {
            return oldStr;
        }
        return Array(padNum - String(oldStr).length + 1).join(padStr) + oldStr;
    }

    function htmlEscape(text) {
        if (!text) {
            return text
        }
        var source = '(?:' + Object.keys(HTML_ENTITIES).join('|') + ')',
            replaceRegexp = RegExp(source, 'g');
        return text.replace(replaceRegexp, function (character) {
            return HTML_ENTITIES[character];
        });
    }

    function htmlUnEscape(text) {
        if (!text) {
            return text
        }
        var source = '(?:' + Object.keys(HTML_ENTITIES_INVERT).join('|') + ')',
            replaceRegexp = RegExp(source, 'g');
        return text.replace(replaceRegexp, function (character) {
            return HTML_ENTITIES_INVERT[character];
        });
    }

    var getI18nProjectName = function (project) {
        if (!I18n || !project) {
            return '';
        }
        var result = '';
        switch (I18n.type) {
            case 'en':
            {
                result = project.name_english;
                break;
            }
            case 'zh':
            {
                result = project.name_cn;
                break;
            }
            default :
            {
                result = project.name_english;
            }
        }
        return result || '';
    };

    return {
        padLeft: padLeft,
        htmlEscape: htmlEscape,
        htmlUnEscape: htmlUnEscape,
        getI18nProjectName: getI18nProjectName
    }
})();
var BEOPUtil = (function () {

    var jsType = {
        function: typeof $.noop,
        number: typeof 0,
        string: typeof '',
        undefined: typeof undefined
    };

    var projectImgPath = beop.constant.project_img_path;
    var setRelativePosition = function ($obj, $target, topOffset, leftOffset) {//$obj为比较对象，$target为浮动窗口对象
        var offset = $obj.offset();
        var topOffset = topOffset || 10;
        var leftOffset = leftOffset || 5;
        var top = offset.top + topOffset;
        var left = offset.left + $obj.width() + leftOffset;
        $target.css({
            "left": left,
            "top": top
        });
    };

    var projectDefaultImgPath = projectImgPath + beop.constant.project_default_img;
    var getProjectImgPath = function (project) {
        if (!project) {
            return;
        } else {
            return project.pic ? projectImgPath + project.pic : projectDefaultImgPath;
        }
    };
    var getProjectFromAppConfig = function (projectId) {
        for (var m = 0, len = AppConfig.projectList.length; m < len; m++) {
            if (AppConfig.projectList[m].id == projectId) {
                return AppConfig.projectList[m];
            }
        }
    };

    function getFunctionName(func) {
        if (!func || typeof func != jsType.function) {
            return '';
        }
        var ret = func.toString();
        ret = ret.substr('function '.length);
        ret = ret.substr(0, ret.indexOf('('));
        return ret;
    }

    function isUndefined(obj) {
        return typeof obj === jsType.undefined;
    }

    function getCookie(name) {
        var value = "; " + document.cookie;
        var parts = value.split("; " + name + "=");
        if (parts.length == 2) return parts.pop().split(";").shift();
    }

    return {
        setRelativePosition: setRelativePosition,
        getProjectImgPath: getProjectImgPath,
        getFunctionName: getFunctionName,
        isUndefined: isUndefined,
        getCookie: getCookie,
        getProjectFromAppConfig: getProjectFromAppConfig
    }
})();


(function () {
    var beop_tmpl_cache = {};

    this.beopTmpl = function tmpl(str, data) {
        var fn = !/\W/.test(str) ?
            beop_tmpl_cache[str] = beop_tmpl_cache[str] ||
                tmpl(document.getElementById(str).innerHTML) :

            new Function("obj",
                "var p=[],print=function(){p.push.apply(p,arguments);};" +

                "with(obj){p.push('" +

                str
                    .replace(/[\r\t\n]/g, " ")
                    .split(/<!/).join("\t")
                    .replace(/((^|!>)[^\t]*)'/g, "$1\r")
                    .replace(/\t=(.*?)!>/g, "',$1,'")
                    .split("\t").join("');")
                    .split(/!>/).join("p.push('")
                    .split("\r").join("\\'")
                + "');}return p.join('');");

        return data ? fn(data) : fn;
    };
})();


/* 页面折叠效果 start */
var SidebarMenuEffect = (function () {
    function SidebarMenuEffect() {
    }

    SidebarMenuEffect.prototype.init = function (center, left, right) {
        var _this = this;
        this.$paneCt = $(center);
        this.$leftBtn = $(center).find('#leftCt');
        this.$rightBtn = $(center).find('#rightCt');

        var container = document.getElementById('st-container'),
            buttons = Array.prototype.slice.call(document.querySelectorAll('.sideTrans')),
            refresh = function () {
                var leftCol = 0, rightCol = 0, centerCol = 0;
                var leftArrow = '<span class="glyphicon glyphicon-chevron-left"></span>';
                var rightArrow = '<span class="glyphicon glyphicon-chevron-right"></span>';
                if (_this.$leftBtn.length > 0) {
                    if (container.className.indexOf('st-effect-7') > 0) {
                        var prev = _this.$paneCt.prev('div')[0];
                        if (prev && prev.className.indexOf('col-') > -1) {
                            leftCol = parseInt(prev.classList[0].split('-')[2]);
                        } else {
                            leftCol = 0;
                        }
                        _this.$leftBtn.removeClass('leftCtClose').addClass('leftCtOpen').html(leftArrow);
                    } else {
                        leftCol = 0;
                        _this.$leftBtn.removeClass('leftCtOpen').addClass('leftCtClose').html(rightArrow);
                    }
                }
                if (_this.$rightBtn.length > 0) {
                    if (container.className.indexOf('st-effect-1') > 0) {
                        var next = _this.$paneCt.next('div')[0];
                        if (next && next.className.indexOf('col-') > -1) {
                            rightCol = parseInt(next.classList[0].split('-')[2]);
                        } else {
                            rightCol = 0;
                        }
                        _this.$rightBtn.removeClass('rightCtClose').addClass('rightCtOpen').html(rightArrow);
                    } else {
                        rightCol = 0;
                        _this.$rightBtn.removeClass('rightCtOpen').addClass('rightCtClose').html(leftArrow);
                    }
                }

                centerCol = 12 - leftCol - rightCol;
                _this.$paneCt.removeClass().addClass('col-sm-' + centerCol + ' st-content');
            };

        buttons.forEach(function (el, i) {
            var effect = el.getAttribute('data-effect');

            el.addEventListener('click', function (ev) {
                var target = ev.target.getAttribute('data-effect') != null ? ev.target.getAttribute('data-effect') : ev.target.parentNode.getAttribute('data-effect');
                var stCtClass = document.getElementById('st-container').className;
                if (stCtClass.indexOf(target) < 0) {
                    ev.stopPropagation();
                    ev.preventDefault();
                    container.classList.add(effect);
                    setTimeout(function () {
                        if ($(container.children[0]).children('div').length == 3) {
                            container.classList.add('st-menu-open');
                        }
                        refresh();
                    }, 250);
                } else {
                    container.classList.remove(target);
                    refresh();
                }
            });
        });
    };
    return SidebarMenuEffect;
})();
/* 页面折叠效果 end */

/* 检测浏览器及系统信息 start*/
(function (window) {
    {
        var unknown = '-';

        // screen
        var screenSize = '';
        if (screen.width) {
            var width = (screen.width) ? screen.width : '';
            var height = (screen.height) ? screen.height : '';
            screenSize += '' + width + " x " + height;
        }

        //browser
        var nVer = navigator.appVersion;
        var nAgt = navigator.userAgent;
        var browser = navigator.appName;
        var version = '' + parseFloat(navigator.appVersion);
        var majorVersion = parseInt(navigator.appVersion, 10);
        var nameOffset, verOffset, ix;

        // Opera
        if ((verOffset = nAgt.indexOf('Opera')) != -1) {
            browser = 'Opera';
            version = nAgt.substring(verOffset + 6);
            if ((verOffset = nAgt.indexOf('Version')) != -1) {
                version = nAgt.substring(verOffset + 8);
            }
        }
        // MSIE
        else if ((verOffset = nAgt.indexOf('MSIE')) != -1) {
            browser = 'Microsoft Internet Explorer';
            version = nAgt.substring(verOffset + 5);
        }
        // Chrome
        else if ((verOffset = nAgt.indexOf('Chrome')) != -1) {
            browser = 'Chrome';
            version = nAgt.substring(verOffset + 7);
        }
        // Safari
        else if ((verOffset = nAgt.indexOf('Safari')) != -1) {
            browser = 'Safari';
            version = nAgt.substring(verOffset + 7);
            if ((verOffset = nAgt.indexOf('Version')) != -1) {
                version = nAgt.substring(verOffset + 8);
            }
        }
        // Firefox
        else if ((verOffset = nAgt.indexOf('Firefox')) != -1) {
            browser = 'Firefox';
            version = nAgt.substring(verOffset + 8);
        }
        // MSIE 11+
        else if (nAgt.indexOf('Trident/') != -1) {
            browser = 'Microsoft Internet Explorer';
            version = nAgt.substring(nAgt.indexOf('rv:') + 3);
        }
        // Other browsers
        else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) < (verOffset = nAgt.lastIndexOf('/'))) {
            browser = nAgt.substring(nameOffset, verOffset);
            version = nAgt.substring(verOffset + 1);
            if (browser.toLowerCase() == browser.toUpperCase()) {
                browser = navigator.appName;
            }
        }
        // trim the version string
        if ((ix = version.indexOf(';')) != -1) version = version.substring(0, ix);
        if ((ix = version.indexOf(' ')) != -1) version = version.substring(0, ix);
        if ((ix = version.indexOf(')')) != -1) version = version.substring(0, ix);

        majorVersion = parseInt('' + version, 10);
        if (isNaN(majorVersion)) {
            version = '' + parseFloat(navigator.appVersion);
            majorVersion = parseInt(navigator.appVersion, 10);
        }

        // mobile version
        var mobile = /Mobile|mini|Fennec|Android|iP(ad|od|hone)/.test(nVer);

        // cookie
        var cookieEnabled = (navigator.cookieEnabled) ? true : false;

        if (typeof navigator.cookieEnabled == 'undefined' && !cookieEnabled) {
            document.cookie = 'testcookie';
            cookieEnabled = (document.cookie.indexOf('testcookie') != -1) ? true : false;
        }

        // system
        var os = unknown;
        var clientStrings = [
            {s: 'Windows 3.11', r: /Win16/},
            {s: 'Windows 95', r: /(Windows 95|Win95|Windows_95)/},
            {s: 'Windows ME', r: /(Win 9x 4.90|Windows ME)/},
            {s: 'Windows 98', r: /(Windows 98|Win98)/},
            {s: 'Windows CE', r: /Windows CE/},
            {s: 'Windows 2000', r: /(Windows NT 5.0|Windows 2000)/},
            {s: 'Windows XP', r: /(Windows NT 5.1|Windows XP)/},
            {s: 'Windows Server 2003', r: /Windows NT 5.2/},
            {s: 'Windows Vista', r: /Windows NT 6.0/},
            {s: 'Windows 7', r: /(Windows 7|Windows NT 6.1)/},
            {s: 'Windows 8.1', r: /(Windows 8.1|Windows NT 6.3)/},
            {s: 'Windows 8', r: /(Windows 8|Windows NT 6.2)/},
            {s: 'Windows NT 4.0', r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/},
            {s: 'Windows ME', r: /Windows ME/},
            {s: 'Android', r: /Android/},
            {s: 'Open BSD', r: /OpenBSD/},
            {s: 'Sun OS', r: /SunOS/},
            {s: 'Linux', r: /(Linux|X11)/},
            {s: 'iOS', r: /(iPhone|iPad|iPod)/},
            {s: 'Mac OS X', r: /Mac OS X/},
            {s: 'Mac OS', r: /(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/},
            {s: 'QNX', r: /QNX/},
            {s: 'UNIX', r: /UNIX/},
            {s: 'BeOS', r: /BeOS/},
            {s: 'OS/2', r: /OS\/2/},
            {s: 'Search Bot', r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\/Teoma|ia_archiver)/}
        ];
        for (var id in clientStrings) {
            var cs = clientStrings[id];
            if (cs.r.test(nAgt)) {
                os = cs.s;
                break;
            }
        }

        var osVersion = unknown;

        if (/Windows/.test(os)) {
            osVersion = /Windows (.*)/.exec(os)[1];
            os = 'Windows';
        }

        switch (os) {
            case 'Mac OS X':
                osVersion = /Mac OS X (10[\.\_\d]+)/.exec(nAgt)[1];
                break;

            case 'Android':
                osVersion = /Android ([\.\_\d]+)/.exec(nAgt)[1];
                break;

            case 'iOS':
                osVersion = /OS (\d+)_(\d+)_?(\d+)?/.exec(nVer);
                osVersion = osVersion[1] + '.' + osVersion[2] + '.' + (osVersion[3] | 0);
                break;
        }
    }

    window.jscd = {
        screen: screenSize,
        browser: browser,
        browserVersion: version,
        mobile: mobile,
        os: os,
        osVersion: osVersion,
        cookies: cookieEnabled
    };
}(this));

/* 检测浏览器及系统信息 end*/


/* 富文本编辑器 wysiwyg start */
var getWysiwyg = function (hasEditor) {
    hasEditor = hasEditor === undefined ? true : hasEditor;
    var wysiwyg = '\
        <div class="btn-toolbar" data-role="editor-toolbar" data-target="#editor">\
          <div class="btn-group">\
            <a class="btn dropdown-toggle" data-toggle="dropdown" title="Font" data-original-title="Font"><i class="icon-font"></i><b class="caret"></b></a>\
              <ul class="dropdown-menu">\
              <li><a data-edit="fontName Serif" style="font-family:\'Serif\'">Serif</a></li><li><a data-edit="fontName Sans" style="font-family:\'Sans\'">Sans</a></li><li><a data-edit="fontName Arial" style="font-family:\'Arial\'">Arial</a></li><li><a data-edit="fontName Arial Black" style="font-family:\'Arial Black\'">Arial Black</a></li><li><a data-edit="fontName Courier" style="font-family:\'Courier\'">Courier</a></li><li><a data-edit="fontName Courier New" style="font-family:\'Courier New\'">Courier New</a></li><li><a data-edit="fontName Comic Sans MS" style="font-family:\'Comic Sans MS\'">Comic Sans MS</a></li><li><a data-edit="fontName Helvetica" style="font-family:\'Helvetica\'">Helvetica</a></li><li><a data-edit="fontName Impact" style="font-family:\'Impact\'">Impact</a></li><li><a data-edit="fontName Lucida Grande" style="font-family:\'Lucida Grande\'">Lucida Grande</a></li><li><a data-edit="fontName Lucida Sans" style="font-family:\'Lucida Sans\'">Lucida Sans</a></li><li><a data-edit="fontName Tahoma" style="font-family:\'Tahoma\'">Tahoma</a></li><li><a data-edit="fontName Times" style="font-family:\'Times\'">Times</a></li><li><a data-edit="fontName Times New Roman" style="font-family:\'Times New Roman\'">Times New Roman</a></li><li><a data-edit="fontName Verdana" style="font-family:\'Verdana\'">Verdana</a></li></ul>\
            </div>\
          <div class="btn-group">\
            <a class="btn dropdown-toggle" data-toggle="dropdown" title="Font Size" data-original-title="Font Size"><i class="icon-text-height"></i>&nbsp;<b class="caret"></b></a>\
              <ul class="dropdown-menu">\
              <li><a data-edit="fontSize 5"><font size="5">Huge</font></a></li>\
              <li><a data-edit="fontSize 3"><font size="3">Normal</font></a></li>\
              <li><a data-edit="fontSize 1"><font size="1">Small</font></a></li>\
              </ul>\
          </div>\
          <div class="btn-group">\
            <a class="btn" data-edit="bold" title="Bold (Ctrl/Cmd+B)" data-original-title="Bold (Ctrl/Cmd+B)"><i class="icon-bold"></i></a>\
            <a class="btn" data-edit="italic" title="Italic (Ctrl/Cmd+I)" data-original-title="Italic (Ctrl/Cmd+I)"><i class="icon-italic"></i></a>\
            <a class="btn" data-edit="strikethrough" title="Strikethrough" data-original-title="Strikethrough"><i class="icon-strikethrough"></i></a>\
            <a class="btn" data-edit="underline" title="Underline (Ctrl/Cmd+U)" data-original-title="Underline (Ctrl/Cmd+U)"><i class="icon-underline"></i></a>\
          </div>\
          <div class="btn-group">\
            <a class="btn" data-edit="insertunorderedlist" title="Bullet list" data-original-title="Bullet list"><i class="icon-list-ul"></i></a>\
            <a class="btn" data-edit="insertorderedlist" title="Number list" data-original-title="Number list"><i class="icon-list-ol"></i></a>\
            <a class="btn" data-edit="outdent" title="Reduce indent" data-original-title="Reduce indent (Shift+Tab)"><i class="icon-indent-left"></i></a>\
            <a class="btn" data-edit="indent" title="Indent" data-original-title="Indent (Tab)"><i class="icon-indent-right"></i></a>\
          </div>\
          <div class="btn-group">\
            <a class="btn" data-edit="justifyleft" title="Align Left" data-original-title="Align Left (Ctrl/Cmd+L)"><i class="icon-align-left"></i></a>\
            <a class="btn" data-edit="justifycenter" title="Center" data-original-title="Center (Ctrl/Cmd+E)"><i class="icon-align-center"></i></a>\
            <a class="btn" data-edit="justifyright" title="Align Right" data-original-title="Align Right (Ctrl/Cmd+R)"><i class="icon-align-right"></i></a>\
            <a class="btn btn-info" data-edit="justifyfull" title="Justify" data-original-title="Justify (Ctrl/Cmd+J)"><i class="icon-align-justify"></i></a>\
          </div>\
          <div class="btn-group" style="display:none;">\
              <a class="btn dropdown-toggle" data-toggle="dropdown" title="Hyperlink" data-original-title="Hyperlink"><i class="icon-link"></i></a>\
                <div class="dropdown-menu input-append">\
                    <input class="span2" placeholder="URL" type="text" data-edit="createLink">\
                    <button class="btn" type="button">Add</button>\
            </div>\
            <a class="btn" data-edit="unlink" title="Remove Hyperlink" data-original-title="Remove Hyperlink"><i class="icon-cut"></i></a>\
          </div>\
          <div class="btn-group">\
            <a class="btn" title="Insert picture" id="pictureBtn" data-original-title="Insert picture (or just drag &amp; drop)"><i class="icon-picture"></i></a>\
            <input type="file" data-role="magic-overlay" data-target="#pictureBtn" data-edit="insertImage" style="opacity: 0; position: absolute; top: 0px; left: 0px; width: 41px; height: 30px;">\
          </div>\
          <div class="btn-group">\
            <a class="btn" data-edit="undo" title="Undo (Ctrl/Cmd+Z)" data-original-title="Undo (Ctrl/Cmd+Z)"><i class="icon-undo"></i></a>\
            <a class="btn" data-edit="redo" title="Redo (Ctrl/Cmd+Y)" data-original-title="Redo (Ctrl/Cmd+Y)"><i class="icon-repeat"></i></a>\
          </div>\
          <input type="text" data-edit="inserttext" id="voiceBtn" x-webkit-speech="" style="display: none;">\
        </div>';
    wysiwyg += hasEditor ? '<div id="editor" contenteditable="true" class="form-control gray-scrollbar">' : '';
    wysiwyg += '</div>';

    return wysiwyg;
};
/* 富文本编辑器 wysiwyg end */

/* 获取 URL 参数 */
var getUrlParams = function () {
    var search = window.location.search.substring(1);
    var kvArr = search.split('&');
    var rs = {};

    kvArr.forEach(function (kv) {
        var arr = kv.split('=');
        if (typeof arr[1] !== 'undefined') {
            rs[arr[0]] = arr[1];
        }
    });

    return rs;
};
﻿var WebAPI = (function () {
    //百度统计 置入代码
    var siteId;
    switch (window.location.hostname) {
        case 'beop.rnbtech.com.hk':
            siteId = 'b79c068f77198848e22fe79758836e53';
            break;
        case 'beop6.rnbtech.com.hk':
            siteId = 'f1f6b2b9e6b64592c0b4cb5e9b8bd79e';
            break;
        case 'beopdemo.rnbtech.com.hk':
            siteId = 'ac0df98f274d9a5980a571297248d80b';
            break;
        default:
            break;
    }

    (function () {
        if (siteId) {
            var hm = document.createElement("script");
            hm.src = "//hm.baidu.com/hm.js?" + siteId;
            var s = document.getElementsByTagName("script")[0];
            s.parentNode.insertBefore(hm, s);
        }
    })();


    var mockList = {
        // /analysis/workspace/saveLayout/<userId>/<isTemplate>
        '/static/mock/analysis_workspace_saveLayout.json': /\/analysis\/workspace\/saveLayout\/\d+\/[01]/i,
        // /analysis/template/get/<userId>
        '/static/mock/analysis_template_get.json': /\/analysis\/template\/get\/\d+/i
    };

    function mock(url) {
        var match = null;
        for (var i in mockList) {
            match = url.match(mockList[i]);
            if (match !== null) return i;
        }
        return url;
    }

    function requestFailHandle(result) {
        if (result && result.status == 401) {
            alert(i18n_resource.error.noPermission);
        }
    }

    function WebAPI() {
    }

    WebAPI.isMock = false;

    $.ajaxSetup({
        converters: {"text json": true}, //防止JQuery自动转换JSON格式
        dataFilter: function (result, type) {
            var data = result;

            if (type === 'script') {
                return data;
            } else if (typeof data === 'string') {
                if (/^\s*</.test(data)) {
                    //请求为HTML，直接返回
                    return data;
                }

                try {
                    data = JSON.parse(result);
                } catch (e) {
                    console.log('request error: ' + e + ', the data is :' + data);
                    return data;
                }
            }

            if (data) {
                if (data.error) {
                    switch (data.error) {
                        case 'token_invalid':
                        {
                            console.log(this.url + ' (' + data.error + ': code"' + data.msg + '")');
                            //TODO 测试confirm
                            confirm(i18n_resource.error.token[data.msg] + '. ' + i18n_resource.error.relogin + '.', function () {
                                location.href = '/';
                            });
                            throw data.error;
                        }
                        case 'historyData':
                        {
                            console.log(this.url + ' (' + data.error + ': code"' + data.msg + '")');
                            alert(data.msg);
                            return {};
                        }
                        default:
                            break;
                    }
                }
                if (data.code == 403) {
                    console.log(this.url + ' (' + data.msg + '")');
                    alert(I18n.resource.error.noPermission);
                    return {};
                }
            }
            return data;
        }
    });

    WebAPI.post = function (url, data, isMock) {
        var mockUrl;
        isMock = isMock === undefined ? WebAPI.isMock : isMock;
        if (isMock) {
            mockUrl = mock(url);
            if (url !== mockUrl) return this.get(mockUrl, false);
        }
        return $.ajax({
            url: url,
            type: 'POST',
            data: JSON.stringify(data),
            contentType: 'application/json'
        }).fail(requestFailHandle);
    };

    WebAPI.get = function (url, isMock) {
        isMock = isMock === undefined ? WebAPI.isMock : isMock;
        url = isMock ? mock(url) : url;

        if (window._hmt && url.indexOf('.html') > 0) window._hmt.push(['_trackPageview', url]);    //百度PV信息收集

        return $.ajax({url: url, type: 'Get', contentType: 'application/json'}).fail(requestFailHandle);
    };

    WebAPI.getHistoryDS = function (callback) {

    };

    WebAPI.getHistory = function (callback) {

    };

    //用于调试工具跨域并且server端异步响应情形
    WebAPI.ajaxForDebugTool = function (ajaxObj, host, dtuName, endpoint) {
        var defaultUrl = 'http://' + host + '/' + endpoint + '/' + dtuName,
            defaultAjaxObj = {
                url: defaultUrl,
                crossDomain: true,
                dataType: 'json'
            },
            dfd, timer = 10, intervalFlags, url, requestFlag = 'requestFlag=' + new Date().getTime() + Math.ceil(Math.random() * 100);
        $.extend(defaultAjaxObj, ajaxObj);
        url = defaultAjaxObj.url;
        if (url.indexOf('?') < 0) {
            requestFlag = '?' + requestFlag
        } else {
            requestFlag = '&' + requestFlag
        }
        var userId = BEOPUtil.getCookie('userId');
        //跨域cookie无法发送问题
        defaultAjaxObj.url += requestFlag + '&userId=' + userId;

        return $.ajax(defaultAjaxObj).then(function (result) {
            dfd = $.Deferred();
            if (result.success) {
                intervalFlags = setInterval(function () {
                    if (timer < 0) {
                        clearInterval(intervalFlags);
                        return dfd.reject({success: false, msg: 'no response from server'});
                    }
                    $.ajax({
                        type: 'GET',
                        url: 'http://' + host + '/getCMDResponse/' + dtuName + requestFlag,
                        crossDomain: true,
                        dataType: 'json'
                    }).done(function (result) {
                        if (result.success) {
                            clearInterval(intervalFlags);
                            return dfd.resolve(result);
                        }
                    }).always(function () {
                        timer--;
                    })
                }, 2000);
            } else {
                return dfd.reject(result);
            }
            return dfd;
        });
    };

    return WebAPI;
})();
/**
 * Created by win7 on 2015/7/21.
 */
    //绑定事件函数封装有2种形式
    //1.EventAdapter.on()/EventAdapter.off()
    //2.$(dom).eventOn()/$(dom).eventOff();
    //具体参数设置见以下内容

var EventAdapter = (function() {
    var eventData, eventStatus;

    function EventAdapter($) {
    }

    //兼容性事件绑定
    EventAdapter.on = function () {
        var eventTarget, eventType, eventFunction, eventSelector, eventHmt, finalFunction;
        if (arguments.length < 3 || arguments.length > 5) {
            console.log('EventAdapter.on arguments.length error');
            return;
        }
        //判断参数类型，有两个类型
        //1.（事件对象，   事件种类，事件执行函数，站长统计推送消息（可选））/
        //   (Dom Object, str,     Function，   array/str)
        //2.（事件对象，   事件种类，事件委托选择器，事件执行函数，站长统计推送消息（可选））/
        //   (Dom Object, str,     str,          Function，    array/str)
        /////////////////////////////////////////////////////////////////
        //站长统计推送消息（可选）参数设置
        //1.false/undefined/null
        //默认状态不推送统计消息
        //2.true
        //推送默认统计消息，默认推送消息信息优先级如下：
        //(1).id
        //(2).i18n
        //(3).title
        //3.string
        //可输入任意字符串或者输入，如果字符串为‘id’，‘title’等值，会尝试获取对象的这些属性值，如果获取不到，则返回这个字符串
        //如果输入字符串为‘text’，则会尝试获取对象的innerText
        //4.function
        //可输入任意函数，如
        // function(e){
        //    return $(e.currentTarget).attr(value)可以推送对象的value信息
        //}
        //5.数组
        //数组至少包含一个元素，数组第一个元素将作为粗略分类依据推送。
        //如果有的话，后面的几个元素将用‘-’相连，作为精确分裂依据推送。
        //数组元素种类和以上非数组参数种类相似
        //如['navBar']将把触发的事件标记为navBar推送
        //对于一个元素<div id='test',value="12345">南京熊猫<span>KPI统计</span></div>
        //如果绑定方式如下的话：
        //EventAdapter.on($('#test'),'click',['projSel','btnProjSel',‘南京熊猫’,'value','function(e){return $(e.currentTarget).find('span').text()}'])
        //每次点击事件后将推送信息为
        //粗分类标签：projSel
        //细分类标签：btnProjSel-南京熊猫-12345-KPI统计
        //如输出参数非以上任何一种，则和true的情况一致
        //为了一个好的分类效果，请将粗分类设置为对象所属种类，比如说ds表示数据源数据点，或者是navBar表示导航条
        //而细分类需要包裹对象进行时的project信息以及对象id等等。
        if (typeof arguments[0] != 'object') {
            console.log('EventAdapter.on arguments[0] type error');
            return;
        } else {
            //原生对象和JQ对象兼容
            if (!(arguments[0] instanceof jQuery)) {
                eventTarget = jQuery(arguments[0]);
            } else {
                eventTarget = arguments[0];
            }

        }
        if (typeof arguments[1] != 'string') {
            console.log('EventAdapter.on arguments[1] type error');
            return;
        } else {
            eventType = arguments[1];
        }
        if (typeof arguments[2] == 'function') {
            eventFunction = arguments[2];
            eventSelector = null;
            eventHmt = arguments[3]
        } else if (typeof arguments[2] == 'string') {
            if (arguments[3] && typeof arguments[3] == 'function') {
                eventSelector = arguments[2];
                eventFunction = arguments[3];
                eventHmt = arguments[4]
            } else {
                console.log('EventAdapter.on arguments[2 or 3] type error');
                return;
            }
        }
        //站长统计绑定
        finalFunction = function(e){
            if (!(eventHmt === false)) {
                EventAdapter.analyse(e,eventType, eventHmt);
            }
            eventFunction.call(this,e);
        };
        //兼容性绑定事件
        if (!AppConfig.isMobile) {
            eventTarget.on(eventType, eventSelector, finalFunction)
        } else {
            switch (eventType) {
                case 'click':
                    eventTarget.on('touchstart', eventSelector, finalFunction);
                    break;
                case 'dragstart':
                    eventTarget.on('touchstart',eventSelector,function(e){mobileDragStart.call(this,e,eventTarget,finalFunction)});
                    break;
                case 'dragover' :
                    $(document).on('touchmove.drag',eventSelector,function(e){mobileDragOver.call(this,e,eventTarget,finalFunction)});
                    break;
                case 'dragleave' :
                    $(document).on('touchmove.drag',eventSelector,function(e){mobileDragLeave.call(this,e,eventTarget,finalFunction)});
                    break;
                //case 'dragend' :
                //    mobileDragEnd(eventTarget,eventFunction);
                //    break;
                case 'drop' :
                    $(document).on('touchend.drop',eventSelector,function(e){mobileDrop.call(this,e,eventTarget,finalFunction)});
                    break;
                default :
                    eventTarget.on(eventType, eventSelector, finalFunction);
                    break;
            }
        }
        return eventTarget;
    };
    //兼容性事件解绑
    EventAdapter.off = function () {
        //参数类型
        //1.(事件对象，事件种类)/(Dom object,str)
        //2.(事件对象，事件种类，事件委托选择器)/(Dom object,str,str)
        //3.(事件对象)/(Dom Object)
        if ((arguments.length > 3 || arguments.length < 1) || (arguments[0] && typeof arguments[1] != 'string')) {
            console.log('EventAdapter.off arguments error');
            return;
        }
        var eventTarget, eventType, eventSelector;
        //原生对象和JQ对象兼容
        if (!(arguments[0] instanceof jQuery)) {
            eventTarget = jQuery(arguments[0]);
        } else {
            eventTarget = arguments[0];
        }
        if (arguments.length == 1) {
            eventTarget.off();
            return eventTarget;
        }
        if (typeof arguments[1] == 'string') {
            eventType = arguments[1]
        } else {
            console.log('EventAdapter.off eventType Error');
            return
        }
        if (typeof arguments[2] == 'string') {
            eventSelector = arguments[2];
        } else {
            eventSelector = null;
        }
        if (!AppConfig.isMobile) {
            eventTarget.off(eventType, eventSelector)
        } else {
            switch (eventType) {
                case 'click' :
                    eventTarget.off('touchstart', eventSelector);
                    break;
                case 'dragstart':
                    eventTarget.draggable('destroy');
                    break;
                case 'dragover':
                    eventTarget.droppable('destroy');
                    break;
                case 'dragleave':
                    eventTarget.droppable('destroy');
                    break;
                case 'drop':
                    eventTarget.droppable('destroy');
                    break;
                default:
                    eventTarget.off(eventType, eventSelector);
                    break;
            }
        }
        return eventTarget;
    };
    //jQuery 拓展方式事件绑定
    $.fn.extend({
        //兼容性绑定事件
        'eventOn': function () {
            var eventTarget, eventType, eventFunction, eventSelector,eventHmt,finalFunction;
            if (arguments.length < 2 || arguments.length > 4) {
                console.log('EventAdapter.on arguments.length error');
                return;
            }
            //判断参数类型，有两个类型
            //1.（事件种类，事件执行函数，站长统计推送消息（可选））/
            //   (str,     Function，   array/str)
            //2.（事件种类，事件委托选择器，事件执行函数，站长统计推送消息（可选））/
            //   (str,     str,           Function，  array/str)
            /////////////////////////////////////////////////////////////////
            //站长统计推送消息（可选）参数设置
            //1.false/undefined/null
            //默认状态不推送统计消息
            //2.true
            //推送默认统计消息，默认推送消息信息优先级如下：
            //(1).id
            //(2).i18n
            //(3).title
            //3.string
            //可输入任意字符串或者输入，如果字符串为‘id’，‘title’等值，会尝试获取对象的这些属性值，如果获取不到，则返回这个字符串
            //如果输入字符串为‘text’，则会尝试获取对象的innerText
            //4.function
            //可输入任意函数，如
            // function(e){
            //    return $(e.currentTarget).attr(value)可以推送对象的value信息
            //}
            //5.数组
            //数组至少包含一个元素，数组第一个元素将作为粗略分类依据推送。
            //如果有的话，后面的几个元素将用‘-’相连，作为精确分裂依据推送。
            //数组元素种类和以上非数组参数种类相似
            //如['navBar']将把触发的事件标记为navBar推送
            //对于一个元素<div id='test',value="12345">南京熊猫<span>KPI统计</span></div>
            //如果绑定方式如下的话：
            //$('#test').on('click',['projSel','btnProjSel',‘南京熊猫’,'value','function(e){return $(e.currentTarget).find('span').text()}'])
            //每次点击事件后将推送信息为
            //粗分类标签：projSel
            //细分类标签：btnProjSel-南京熊猫-12345-KPI统计
            //如输出参数非以上任何一种，则和true的情况一致
            //为了一个好的分类效果，请将粗分类设置为对象所属种类，比如说ds表示数据源数据点，或者是navBar表示导航条
            //而细分类需要包裹对象进行时的project信息以及对象id等等。
            if (typeof this != 'object') {
                console.log('EventAdapter.on arguments[0] type error');
                return;
            } else {
                //原生对象和JQ对象兼容
                if (!(this instanceof jQuery)) {
                    eventTarget = jQuery(arguments[0]);
                } else {
                    eventTarget = this;
                }

            }
            if (typeof arguments[0] != 'string') {
                console.log('EventAdapter.on arguments[1] type error');
                return;
            } else {
                eventType = arguments[0];
            }
            if (typeof arguments[1] == 'function') {
                eventFunction = arguments[1];
                eventSelector = null;
                eventHmt = arguments[2]
            } else if (typeof arguments[1] == 'string') {
                if (arguments[2] && typeof arguments[2] == 'function') {
                    eventSelector = arguments[1];
                    eventFunction = arguments[2];
                    eventHmt = arguments[3]
                } else {
                    console.log('EventAdapter.on arguments[2 or 3] type error');
                    return;
                }
            }
            finalFunction = function(e){
                if (!(eventHmt === false)) {
                    EventAdapter.analyse(e, eventType,eventHmt);
                }
                eventFunction.call(this,e);
            };
            //兼容性绑定事件
            if (!AppConfig.isMobile) {
                eventTarget.on(eventType, eventSelector, finalFunction)
            } else {
                switch (eventType) {
                    case 'click':
                        eventTarget.on('touchstart', eventSelector, finalFunction);
                        break;
                    case 'dragstart':
                        mobileDragStart(eventTarget, eventSelector, finalFunction);
                        break;
                    case 'dragover' :
                        mobileDragOver(eventTarget, eventSelector, finalFunction);
                        break;
                    case 'dragleave' :
                        mobileDragLeave(eventTarget, eventSelector, finalFunction);
                        break;
                    //case 'dragend' :
                    //    mobileDragEnd(eventTarget,eventFunction);
                    //    break;
                    case 'drop' :
                        mobileDrop(eventTarget, eventSelector, finalFunction);
                        break;
                    default :
                        eventTarget.on(eventType, eventSelector, finalFunction);
                        break;
                }
            }
            return eventTarget;
        },
        //兼容性解绑事件
        'eventOff': function () {
            //参数类型
            //1.(事件对象，事件种类)/(Dom object,str)
            //2.(事件对象，事件种类，事件委托选择器)/(Dom object,str,str)
            //3.无参数
            if ((arguments.length > 2) || (arguments[0] && typeof arguments[0] != 'string')) {
                console.log('EventAdapter.off arguments error');
                return;
            }
            var eventTarget, eventType, eventSelector;
            //原生对象和JQ对象兼容
            if (!(this instanceof jQuery)) {
                eventTarget = jQuery(this);
            } else {
                eventTarget = this;
            }
            if (arguments.length == 0) {
                eventTarget.off();
                return eventTarget;
            }
            if (typeof arguments[0] == 'string') {
                eventType = arguments[0];
            } else {
                console.log('EventAdapter.off eventType Error');
                return
            }
            if (typeof arguments[1] == 'string') {
                eventSelector = arguments[1];
            } else {
                eventSelector = null;
            }
            if (!AppConfig.isMobile) {
                eventTarget.off(eventType, eventSelector)
            } else {
                switch (eventType) {
                    case 'click' :
                        eventTarget.off('touchstart', eventSelector,mobileDragStart);
                        break;
                    case 'dragstart':
                        eventTarget.draggable('destroy');
                        break;
                    case 'dragover':
                        eventTarget.droppable('destroy');
                        break;
                    case 'dragleave':
                        eventTarget.droppable('destroy');
                        break;
                    case 'drop':
                        eventTarget.droppable('destroy');
                        break;
                    default:
                        eventTarget.off(eventType, eventSelector);
                        break;
                }
            }
            return eventTarget;
        }

    });

    //drag事件参数保存
    EventAdapter.setData = function (date) {
        if (date == undefined)return;
        eventData = date;
    };
    //drag事件参数获取
    EventAdapter.getData = function () {
        return eventData;
    };
    //drop事件发生后自动清空传递数据
    document.addEventListener('drop', function () {
        eventData = null;
    }, false);

    document.addEventListener('touchend', function () {
        eventData = null;
    }, false);
    //清除drag事件以免内存溢出
    EventAdapter.clearEvent = function(){
        $(document).off('touchmove.copy');
        $(document).off('touchmove.drag');
        $(document).off('touchend.drop');
    };
    //各事件触发次数站长统计
    EventAdapter.analyse = function (e,eventType, hmtInfo) {
        var mainInfo = '', initArrTag , finalArrTag, tag, unitTag;
        var target = $(e.currentTarget);

        if (hmtInfo instanceof Array && hmtInfo[0]){
            mainInfo = judgeWay(hmtInfo[0]);
            initArrTag = hmtInfo.filter(function(ele,index){
                return index > 0 && ele != '';
            });
            finalArrTag = [];
            for (var i = 0 ; i < initArrTag.length;i++){
                unitTag = judgeWay(initArrTag[i]);
                if (unitTag == '' )continue;
                finalArrTag.push(unitTag)
            }
            tag = finalArrTag.join('-');
        }else {
            if(typeof hmtInfo == 'string') {
                mainInfo = hmtInfo;
            }else{
                mainInfo = getInfo(target);
            }
            mainInfo = mainInfo ? mainInfo : '';
            tag = mainInfo;
        }
        _hmt.push(['_trackEvent', mainInfo.substr(0,30), eventType, tag.substr(0,100)]);
        //console.log('mainInfo:'+mainInfo);
        //console.log('tag:'+tag);
        function getInfo(tar){
            if (tar.length == 0)return;
            var tarInfo;
            if (tar.attr('id')){
                tarInfo = tar.attr('id');
            }else if (tar.attr('i18n')){
                tarInfo = tar.attr('i18n');
            }else if(tar.attr('title')){
                tarInfo = tar.attr('title');
            }else{
                tarInfo = tar[0].innerText.replace(/^\s\s*/, '').replace(/\s\s*$/, '').substr(0,30);
            }
            return tarInfo;
        }
        function judgeWay(arg){
            if (typeof arg == 'undefined'){
                return '';
            }
            if (arg instanceof Function){
                return arg.call(this,e)
            }else if(typeof arg == 'string'){
                if(arg == 'text'){
                    return e.currentTarget.innerText.replace(/^\s\s*/, '').replace(/\s\s*$/, '').substr(0,30)
                }else{
                    return $(e.currentTarget).attr(arg)?$(e.currentTarget).attr(arg):arg;
                }
            }else if(typeof arg == 'number'){
                return arg;
            }
        }
    };

    ////移动端事件绑定
    //var mobileDragStart = function(source,eventSelector,eventFunction){
    //    //事件委托判断
    //    var handle = eventSelector?$(eventSelector):false;
    //    var mouseLeft = source[0].offsetWidth / 2;
    //    var mouseTop = source[0].offsetHeight / 2;
    //    source.draggable({
    //        start:eventFunction,
    //        addClasses:false,
    //        helper:'clone',
    //        appendTo:'body',
    //        zIndex:210000,
    //        revert:true,
    //        opacity:0.5,
    //        cursorAt: {
    //            left: mouseLeft,
    //            top: mouseTop
    //        },
    //        handle:handle
    //    })
    //};
    //
    //var mobileDragOver = function(target,eventSelector,eventFunction){
    //    target.droppable({
    //        over:eventFunction
    //    })
    //};
    //
    //var mobileDragLeave = function(target,eventSelector,eventFunction){
    //    target.droppable({
    //        out:eventFunction
    //    })
    //};
    //
    //var mobileDrop = function(target,eventSelector,eventFunction){
    //    target.droppable({
    //        greedy:true,
    //        drop:eventFunction
    //    });
    //    eventData = null;
    //};
    var mobileDragStart = function(e,target,eventFunction){
        //e.preventDefault();
        var originalTarget = $(e.target).closest('[draggable="true"]')[0];
        var ev = e.type == 'touchstart' ? e.originalEvent.touches[0] : e,
        startPos = {
            left: $(originalTarget).css('left'),
            top: $(originalTarget).css('top'),
            zIndex: $(originalTarget).css('z-index')
        },
        disX = originalTarget.offsetWidth / 2,
        disY = originalTarget.offsetHeight / 2;
        var $copyTarget = $(originalTarget).clone();
        $copyTarget.data('startPos', startPos);
        $copyTarget.css('z-index',10000);
        $copyTarget.css('position','absolute');
        $copyTarget.css('opacity','0.5');
        $copyTarget.css('pointer-events','none');
        var $container = $('body');
        $container.append($copyTarget);
        var sPos = $(originalTarget)[0].getBoundingClientRect();
        $copyTarget.css('left',sPos.left - $container[0].offsetLeft + 'px');
        $copyTarget.css('top',sPos.top - $container[0].offsetTop + 'px');
        $copyTarget[0].cssText = originalTarget.cssText;
        $copyTarget.css('width',originalTarget.offsetWidth);
        $copyTarget.css('height',originalTarget.offsetHeight);
        //originalTarget.parentNode.appendChild($copyTarget[0]);
        eventStatus = 'dragStart';
        eventFunction.call(this, ev);
        $(document).off('touchend.copy').on('touchend.copy',function(e){
            $copyTarget.remove();
            eventStatus = 'dragEnd';
        });
        $(document).on('touchmove.copy',function(e) {
            //e.preventDefault();
            eventStatus = 'dragMove';
            var ev = e.type == 'touchmove' ? e.originalEvent.touches[0] : e;
            var $parent = $copyTarget.offsetParent();
            $parent = $parent.is(':root') ? $(window) : $parent;
            //var pPos = $parent.offset();
            //pPos = pPos ? pPos:{left:0,top:0};
            var targetLeft = ev.pageX - disX;
            var targetTop = ev.pageY - disY;
            //r = $parent.width() - $this.outerWidth(true);
            //d = $parent.height() - $this.outerHeight(true);

            //targetLeft = targetLeft < 0 ? 0 : targetLeft > r ? r : targetLeft;
            //targetTop = targetTop < 0 ? 0 : targetTop > d ? d : targetTop;

            $copyTarget.css({
                left: targetLeft + 'px',
                top: targetTop + 'px',
                'z-index': 10000
            });
        })

    };

    var mobileDragOver = function(e,target,eventFunction){
        if (eventStatus !='dragMove' && eventStatus !='dragMoveIn' && eventStatus !='dragMoveOut') return;
        var ev = e.type == 'touchmove' ? e.originalEvent.touches[0] : e;
        var targetWidth,targetHeight;
        for (var i = 0; i < target.length; i++) {
            targetWidth = target[i].offsetWidth;
            targetHeight = target[i].offsetHeight;
            if ((target.eq(i).offset().left < ev.pageX && target.eq(i).offset().left + targetWidth > ev.pageX) && (target.eq(i).offset().top < ev.pageY && target.eq(i).offset().top + targetHeight > ev.pageY)) {
                e.target = target[i];
                e.currentTarget = target[i];
                eventStatus ='dragMoveIn';
                eventFunction.call(this, e);
                break;
            }
        }
    };

    var mobileDragLeave = function(e,target,eventFunction){
        if (eventStatus !='dragMoveIn') return;
        var ev = e.type == 'touchmove' ? e.originalEvent.touches[0] : e;
        var targetWidth,targetHeight;
        for (var i = 0; i < target.length; i++) {
            targetWidth = target[i].offsetWidth;
            targetHeight = target[i].offsetHeight;
            if (!((target.eq(i).offset().left < ev.pageX && target.eq(i).offset().left + targetWidth > ev.pageX) && (target.eq(i).offset().top < ev.pageY && target.eq(i).offset().top + targetHeight > ev.pageY))) {
                e.target = target[i];
                e.currentTarget = target[i];
                eventStatus ='dragMoveOut';
                eventFunction.call(this, e);
            }
        }
    };

    var mobileDragEnd = function(e,target,eventFunction){
        eventFunction.call(this, e);
    };

    var mobileDrop = function(e,target,eventFunction){
        if (eventStatus !='dragMove' && eventStatus !='dragMoveIn')return;
        //e.stopImmediatePropagation();
        //var ev = e.originalEvent.changedTouches[0];
        var ev = e.type == 'touchend' ? e.originalEvent.changedTouches[0] : e;
        var eventTarget = target;
        var targetWidth,targetHeight;
        for (var i = 0; i < target.length; i++) {
            targetWidth = target[i].offsetWidth;
            targetHeight = target[i].offsetHeight;
            if ((target.eq(i).offset().left < ev.pageX && target.eq(i).offset().left + targetWidth > ev.pageX) && (target.eq(i).offset().top < ev.pageY && target.eq(i).offset().top + targetHeight > ev.pageY)) {
                e.target = target[i];
                e.currentTarget = target[i];
                eventFunction.call(this, e);
                break;
            }
        }
    };
    //var mobileDropLocate = function(e,target,eventFunction){
    //    dropTarget = e.originalEvent.relatedTarget;
    //};

    return EventAdapter;
})(jQuery);
/**
 * Created by vicky on 2015/10/13.
 */

/* dark theme for echart start */
var theme = {};
theme.Dark = {
    backgroundColor: 'transparent',

    color: [
        '#FE8463','#FAD860','#60C0DD','#0084C6',
        '#D7504B','#C6E579','#26C0C0','#F0805A','#F4E001',
        '#B5C334'
    ],


    title: {
        textStyle: {
            fontWeight: 'normal',
            color: '#fff'
        }
    },


    legend: {
        textStyle: {
            color: '#ccc'
        }
    },


    dataRange: {
        itemWidth: 15,
        color: ['#FFF808','#21BCF9'],
        textStyle: {
            color: '#ccc'
        }
    },

    toolbox: {
        color : ['#fff', '#fff', '#fff', '#fff'],
        effectiveColor : '#FE8463',
        disableColor: '#666'
    },


    tooltip: {
        backgroundColor: 'rgba(250,250,250,0.9)',
        axisPointer : {
            type : 'line',
            lineStyle : {
                color: '#aaa'
            },
            crossStyle: {
                color: '#aaa'
            },
            shadowStyle : {
                color: 'rgba(200,200,200,0.2)'
            }
        },
        textStyle: {
            color: '#333'
        }
    },


    dataZoom: {
        dataBackgroundColor: '#555',
        fillerColor: 'rgba(200,200,200,0.2)',
        handleColor: '#eee'
    },


    grid: {
        borderWidth: 0
    },


    categoryAxis: {
        axisLine: {
            show: false
        },
        axisTick: {
            show: false
        },
        axisLabel: {
            textStyle: {
                color: '#ccc'
            }
        },
        splitLine: {
            show: false
        }
    },


    valueAxis: {
        axisLine: {
            lineStyle: {
                color: 'rgba(217,237,247,0.3)'
            }
        },
        axisTick: {
            show: false
        },
        axisLabel: {
            textStyle: {
                color: '#ccc'
            }
        },
        splitLine: {
            lineStyle: {
                color: ['rgba(100,100,100,0.3)'],
                type: 'solid'
            }
        },
        splitArea: {
            show: false
        }
    },

    polar : {
        name : {
            textStyle: {
                color: '#ccc'
            }
        },
        axisLine: {
            lineStyle: {
                color: '#ddd'
            }
        },
        splitArea : {
            show : true,
            areaStyle : {
                color: ['rgba(250,250,250,0.2)','rgba(200,200,200,0.2)']
            }
        },
        splitLine : {
            lineStyle : {
                color : '#ddd'
            }
        }
    },

    timeline : {
        label: {
            textStyle:{
                color: '#ccc'
            }
        },
        lineStyle : {
            color : '#aaa'
        },
        controlStyle : {
            normal : { color : '#fff'},
            emphasis : { color : '#FE8463'}
        },
        symbolSize : 3
    },


    line: {
        smooth : true
    },


    k: {
        itemStyle: {
            normal: {
                color: '#FE8463',
                color0: '#9BCA63',
                lineStyle: {
                    width: 1,
                    color: '#FE8463',
                    color0: '#9BCA63'
                }
            }
        }
    },

    // 闆疯揪鍥鹃粯璁ゅ弬鏁�
    radar : {
        symbol: 'emptyCircle',
        symbolSize:3
        //symbol: null,
        //symbolRotate : null,
    },

    pie: {
        itemStyle: {
            normal: {
                borderWidth: 1,
                borderColor : 'rgba(255, 255, 255, 0.5)'
            },
            emphasis: {
                borderWidth: 1,
                borderColor : 'rgba(255, 255, 255, 1)'
            }
        }
    },

    map: {
        itemStyle: {
            normal: {
                borderColor:'rgba(255, 255, 255, 0.5)',
                areaStyle: {
                    color: '#ddd'
                },
                label: {
                    textStyle: {
                        // color: '#ccc'
                    }
                }
            },
            emphasis: {
                areaStyle: {
                    color: '#FE8463'
                },
                label: {
                    textStyle: {
                        // color: 'ccc'
                    }
                }
            }
        }
    },

    force : {
        itemStyle: {
            normal: {
                linkStyle : {
                    color : '#fff'
                }
            }
        }
    },

    chord : {
        itemStyle : {
            normal : {
                borderWidth: 1,
                borderColor: 'rgba(228, 228, 228, 0.2)',
                chordStyle : {
                    lineStyle : {
                        color : 'rgba(228, 228, 228, 0.2)'
                    }
                }
            },
            emphasis : {
                borderWidth: 1,
                borderColor: 'rgba(228, 228, 228, 0.9)',
                chordStyle : {
                    lineStyle : {
                        color : 'rgba(228, 228, 228, 0.9)'
                    }
                }
            }
        }
    },

    gauge : {
        axisLine: {
            show: true,
            lineStyle: {
                color: [[0.2, '#9BCA63'],[0.8, '#60C0DD'],[1, '#D7504B']],
                width: 3
                //shadowColor : '#fff',
                //shadowBlur: 10
            }
        },
        axisTick: {
            length :15,
            lineStyle: {
                color: 'auto'
                //shadowColor : '#fff',
                //shadowBlur: 10
            }
        },
        axisLabel: {
            textStyle: {
                fontWeight: 'bolder',
                color: '#fff'
                //shadowColor : '#fff',
                //shadowBlur: 10
            }
        },
        splitLine: {
            length :25,
            lineStyle: {
                width:3,
                color: '#fff'
                //shadowColor : '#fff',
                //shadowBlur: 10
            }
        },
        pointer: {
            //shadowColor : '#fff',
            //shadowBlur: 5
        },
        title : {
            textStyle: {
                fontWeight: 'bolder',
                //fontSize: 20,
                fontStyle: 'italic',
                color: '#fff'
                //shadowColor : '#fff',
                //shadowBlur: 10
            }
        },
        detail : {
            //shadowColor : '#fff',
            //shadowBlur: 5,
            offsetCenter: [0, '50%'],
            textStyle: {
                //fontWeight: 'bolder',
                color: '#fff'
            }
        }
    },

    funnel : {
        itemStyle: {
            normal: {
                borderColor : 'rgba(255, 255, 255, 0.5)',
                borderWidth: 1
            },
            emphasis: {
                borderColor : 'rgba(255, 255, 255, 1)',
                borderWidth: 1
            }
        }
    },

    textStyle: {
        fontFamily: 'Microsoft YaHei, Arial, Verdana, sans-serif'
    }
};
/* dark theme for echart end */
(function () {
    // 将 html 代码转换成 dom 对象（html 代码必须包含一个根节点）
    function HTMLParser(htmlString){
        var div = document.createElement('div');
        div.innerHTML = htmlString;
        return div.firstChild;
    }

    if (window.$) {
        $.extend({
            deepClone: function (obj) {
                var type = $.type(obj);
                // object
                if (type === 'object') {
                    // 深度拷贝
                    return $.extend(true, {}, obj);
                }
                // array
                else if (type === 'array') {
                    // 数组深度拷贝
                    return $.extend(true, [], obj);
                }
                // number, string, boolean, error, regexp, date, function
                else {
                    // 不做处理
                    return obj;
                }
            }
        });
    }

    if (!String.prototype.toHexString) {
        String.prototype.toHexString = function () {
            return this.split('').map(function (row) {
                return '\\' + row.charCodeAt(0).toString(16);
            }).join('');
        };
    }

    window.HTMLParser = HTMLParser;
} ());
/*
    core.js
 */
(function () {
    var ENUM_LEVEL = {
        LOG: 1,
        INFO: 2,
        DEBUG: 3,
        WARN: 4,
        ERROR: 5,
        EXCEPTION: 6
    };

    window.Log = {
        level: ENUM_LEVEL.WARN,
        log: function () {
            if(this.level > ENUM_LEVEL.LOG) return;
            Log._out('log', arguments);
        },
        info: function () {
            if(this.level > ENUM_LEVEL.INFO) return;
            Log._out('info', arguments);
        },
        debug: function () {
            if(this.level > ENUM_LEVEL.DEBUG) return;
            Log._out('debug', arguments);
        },
        warn: function () {
            if(this.level > ENUM_LEVEL.WARN) return;
            Log._out('warn', arguments);
        },
        error: function () {
            if(this.level > ENUM_LEVEL.ERROR) return;
            Log._out('error', arguments);
        },
        exception: function (message, exception) {
            if(this.level > ENUM_LEVEL.EXCEPTION) return;
            if(exception) {
                Log.error('Exception: ', message, exception.stack || exception);
            } else {
                Log.error('Exception: ', message);
            }
        },
        _out: function (type, args) {
            console[type].apply(console, args)
        }
    };
}());

(function (exports) {

    var Events = {
        /**
         * 添加事件订阅
         * @param {string}   events  需要订阅的事件，多个事件之间用' '隔开
         * @param {Function} fn      事件处理函数
         * @param {object}   context fn执行时的上下文环境
         */
        addEventListener: function (events, fn, context) {
            var _this = this;
            var e = this.__info || (this.__info = {});

            events = events.split(' ');
            events.forEach(function (event) {
                var evt;
                event = 'event:' + event;
                evt = e[event] || (e[event] = []);
                // (fn, context) 为一组
                evt.push(fn, context);
            });
        },
        /**
         * addEventListener 方法的别名
         */
        on: function (events, fn, context) {
            return this.addEventListener(events, fn, context);
        },
        /**
         * 添加一个一次性的事件订阅
         */
        once: function (event, fn, context) {
            var _this = this;
            this.addEventListener(event, function ofn() {
                _this.removeEventListener(event, ofn);
                fn.apply(context, arguments);
            }, context);
        },
        /**
         * 删除事件订阅
         */
        removeEventListener: function (events, fn) {
            var e = this.__info;
            var rs = null;

            if(e) {
                events = events.split(' ');
                events.forEach(function (event) {
                    var i;
                    event = e['event:'+event];
                    if(event) {
                        i = event.indexOf(fn);
                        if(i > -1) {
                            rs = event.splice(i, 2)[0] || null;
                        }
                    }
                });
            }

            return rs;
        },
        /**
         * 删除某个事件的所有处理方法
         */
        removeAllListeners: function (event) {
            var e = this.__info;
            if(e) {
                delete e['event:' + event];
            }
        },
        /** 
         * 获取某个事件的所有处理方法
         */
        listeners: function (event) {
            var e = this.__info;
            if(e) {
                return e['event:' + event] || [];
            }
            return [];
        },
        /**
         * 发布某个事件
         * @param  {string} event 需要发布的事件名称
         */
        emit: function (event /*, arguments ... */) {
            var e = this.__info;
            if(e) {
                e = e['event:'+event];
                if(e && e.length) {
                    for(var i = 0, len = e.length; i < len; i += 2) {
                        try {
                            e[i].apply(e[i+1], arguments);
                        } catch(_) {
                            Log.exception('emit', _);
                        }
                    }
                    return true;
                }
            }
            return false;
        }
    };

    exports.Events = Events;

} (window));

(function (exports) {

    /**
     * 对象混合
     * Mixin([, mixins[, mixins[, ...]]])
     * 示例：
     * Mixin({a:1}, {a:2, b:2}, {c:3})，返回 {a:2, b:2, c:3}
     */
    exports.Mixin = function (/* mixins ... */) {
        var prototype = {};
        var methods;

        for (var i = 0, len = arguments.length; i < len; i ++) {
            methods = arguments[i];
            for(var m in methods) {
                prototype[m] = methods[m];
            }
        }
        return prototype;
    };

} (window));

/** 数据模型 - 单个对象 */
(function (exports) {

    function Model(values) {
        this._values = values || {};

        this.initialize(this._values);
    }

    Model.prototype = Object.create(Events);

    void function () {
        this.constructor = Model;

        this.initialize = function (o) {
            for (var p in o) {
                if (o.hasOwnProperty(p)) {
                    this.property(p);
                }
            }
        };

        this.property = function (name, value) {
            // 若没有这个属性，则创建
            if (!(name in this)) {
                this[name] = this._makeProperty(name);
            }
            return arguments.length === 1 ? this[name]() : this[name](value);
        };

        this.removeProperty = function (name) {
            var arr, obj, p, lp;

            if (!(name in this)) {
                return false;
            }
            delete this[name];

            // 删除对应的值
            arr = name.split('.');
            lp = arr.pop();
            obj = this._values;
            while(p = arr.shift()) obj = obj[p];
            delete obj[lp];

            // 如果父对象被删除了，子对象应该相应的被删除
            for (var p in this) {
                if (!this.hasOwnProperty(p) || p.indexOf(name) !== 0) continue;
                delete this[p];
            }

            return true;
        };

        this.emit = function (event) {
            Events.emit.apply(this, arguments);
        };

        // 等所有的属性都赋值完毕，再触发 update 事件
        this.delayUpdate = function (fn) {
            var pending = false;
            var propsPathArr = [];

            try {
                this.emit = function (event) {
                    if (event === 'update') {
                        pending = true;
                    } else {
                        this.__proto__.emit.apply(this, arguments);
                    }
                };
                propsPathArr = fn.call(this);
            } finally {
                delete this.emit;
                if(pending) {
                    this.emit('update', propsPathArr.join(','));
                }
            }
        };

        this.update = function (props) {
            var _this = this;
            
            this.delayUpdate(function () {
                var propsPathArr = [];
                for (var prop in props) {
                    if(!(prop in this)) {
                        throw new Error('没有找到这个属性：'+prop);
                    }
                    _this[prop](props[prop]);
                    propsPathArr.push('update.'+prop);
                }
                return propsPathArr;
            });
        };

        this.serialize = function () {
            return this._values;
        };

        this._makeProperty = function (prop) {
            var body = 'var ov = this._values.{p};if(arguments.length && (v !== ov || Object.prototype.toString.call(v) === "[object Object]") ) {this._values.{p}=v; this.emit("update.{p}"); this.emit("update"); } return ov;'
            return new Function('v', body.replace(/\{p\}/g, prop) );
        };

    }.call(Model.prototype);

    exports.Model = Model;
    
} (window));

(function (exports, Model) {
    var class2type = {};
    ['Boolean', 'Number', 'String', 'Array', 'Function', 'Object', 'Date', 'RegExp', 'Error'].forEach(function (type) {
        class2type['[object ' + type + ']'] = type.toLowerCase();
    });

    function getType(o) {
        // 处理 null 和 undefined
        if(o == null) {
            return o + '';
        }

        var type = Object.prototype.toString.call(o);
        return class2type[type] || 'object';
    }

    function NestedModel() {
        Model.apply(this, arguments);
    }

    NestedModel.prototype = Object.create(Model.prototype);

    void function () {
        this.constructor = NestedModel;

        this.initialize = function (o, path, k) {
            var keys, currentPath;
            
            path = path || [];
            // 复制一份
            currentPath = path.slice(0);

            if (typeof k !== 'undefined') {
                currentPath.push(k);
            }

            if (currentPath.length > 0) {
                this.property(currentPath.join('.'));
            }

            // 如果是 object，则进入下次循环
            if (getType(o) === 'object') {
                keys = Object.keys(o);
                keys.forEach(function (p) {
                    this.initialize(o[p], currentPath, p);
                }, this);
            }
        };

        this._makeProperty = function (prop) {
            var body = 'var o = this._values, isObj = Object.prototype.toString.call(v) === \'[object Object]\', arr = \'{p}\'.split(\'.\'), n = arr.splice(arr.length-1, 1)[0], path = arr.length ? arr.slice(0) : [], row, ov; while(row = arr.shift()) { o = o[row]; }; ov = o[n]; if(arguments.length && (v !== ov || isObj )) {o[n]=v; if(isObj){this.initialize(v,path,n)};this.emit("update.{p}"); this.emit("update", \'update.{p}\'); } return ov;';
            return new Function('v', body.replace(/\{p\}/g, prop) );
        };
    }.call(NestedModel.prototype);

    exports.NestedModel = NestedModel;
}(window, window.Model));

/** 数据模型 - 对象列表 */
(function (exports) {

    function ModelSet(models) {
        this.models = models || [];
    }

    ModelSet.prototype = Object.create(Model.prototype);

    void function () {
        this.constructor = ModelSet;

        this.length = function () {
            return this.models.length;
        };

        this.get = function (index) {
            return this.models[index];
        };

        this.forEach = function (fn, ctx) {
            return this.models.forEach(fn, ctx);
        };

        this.indexOf = function (model) {
            return this.models.indexOf(model);
        };

        this.findByProperty = function (name, value) {
            var models = this.models;
            for (var i = 0, len = models.length; i < len; i++) {
                if( models[i][name]() === value ) {
                    return models[i];
                }
            }
            return null;
        };

        this.findListByProperty = function (name, value) {
            var models = this.models;
            var rs;

            rs = models.filter(function (row) {
                if(row[name]() === value) {
                    return true;
                }
                return false;
            });

            return rs;
        };

        this.insertAt = function (idx, model) {
            var count;
            // 小于0，则从后向前计算
            if(idx < 0) {
                idx += this.models.length + 1;
            }
            if(Array.isArray(model)) {
                this.models.splice.apply( this.models, [idx, 0].concat(model) );
                count = model.length;
            } else {
                this.models.splice(idx, 0, model);
                count = 1;
                model = [model];
            }
             this.emit('insert', {
                index: idx,
                count: count,
                models: model
            });
            return count;
        };

        this.emit = function (evt) {
            Model.prototype.emit.apply(this, arguments);
        };

        /** 列表前插 */
        this.prepend = function (model) {
            return this.insertAt(0, model);
        };

        /** 列表追加 */
        this.append = function (model) {
            return this.insertAt(-1, model);
        };

        this.remove = function (model) {
            var fidx = -1;
            var count = 0;
            var total = 0;
            var removed = [];

            if(Array.isArray(model)) {
                model.forEach(function () {
                    var idx = this.indexOf(m);

                    if(idx === -1) return;

                    total ++;
                    if(fidx === -1) {
                        fidx = idx;
                        count ++;
                    } else if(idx === fidx + count) {
                        count ++;
                    } else {
                        removed = removed.concat(this.models.splice(fidx, count));
                        fidx = idx < fidx ? idx : idx - count;
                        count = 1;
                    }
                }, this);
                if(count) {
                    removed = removed.concat(this.models.splice(fidx, count));
                    this.emit('remove', {
                        count: count,
                        models: removed
                    });
                }
            } else {
                var idx = this.indexOf(model);
                if(idx !== -1) {
                    this.models.splice(idx, 1);
                    this.emit('remove', {
                        count: 1,
                        models: [model]
                    });
                    total = 1;
                }
            }
            return total;
        };


        /** 删除所有元素 */
        this.removeAll = function () {
            var len = this.models.length;
            var removed;
            if(len) {
                removed = this.models.splice(0, len);
                this.emit('remove', {
                    count: len,
                    models: removed
                });
                return true;
            } else {
                return false;
            }
        };

        /** 将数组中的某个元素从下标 'from' 位置移动到下标 'to' 位置 */
        this.move = function (from, to) {
            var len = this.models.length;
            var moved = null;
            // 对负数的兼容
            while (from < 0) {
                from += len;
            }
            while (to < 0) {
                from += len;
            }

            // 如果 to 大于数组的长度，这里我们用 undefined 来填充空缺的部分
            if (to >= len) {
                while ( (len++) <= to ) {
                    this.models.push(undefined);
                }
            }

            // 开始元素移动逻辑
            moved = this.models.splice(from, 1);
            this.models.splice(to, 0, moved[0]);

            this.emit('move', {
                from: from,
                to: to,
                // 数组
                models: moved
            });

            return true;
        };

        this.serialize = function () {
            var ms = [];
            this.forEach(function (row) {
                ms.push( row.serialize() );
            });
            return ms;
        };

        /**
         * 针对于对象数组，根据数组中每个对象中的 key 属性，生成一个 Map
         * @param  {string} key 指定的对象数组中的 key 属性
         * @return {object} 最终生成的 Map
         */
        this.toMap = function (key) {
            var map = {};
            for (var i = 0, len = this.models.length; i < len; i++) {
                map[this.models[i][key]()] = this.models[i].serialize();
            }
            return map;
        };

    }.call(ModelSet.prototype);

    exports.ModelSet = ModelSet;
    
} (window));
/** 对象 diff 方法 */
/**
 * 四种差异类型：
 * 新增 - N
 * 删除 - D
 * 修改 - E
 * 数组变动 - A
 */
(function () {

    var class2type = {};
    ['Boolean', 'Number', 'String', 'Array', 'Function', 'Object', 'Date', 'RegExp', 'Error'].forEach(function (type) {
        class2type['[object ' + type + ']'] = type.toLowerCase();
    });

    function Diff(kind, path) {
        this.kind = kind;
        this.path = path || [];
    };

    /** 差异类型 - 新增 */
    function DiffNew(path, value) {
        Diff.call(this, 'N', path);
        this.rhs = value;
    };

    /** 差异类型 - 删除 */
    function DiffDelete(path, value) {
        Diff.call(this, 'D', path);
        this.lhs = value;
    };

    /** 差异类型 - 修改 */
    function DiffEdit(path, origin, value) {
        Diff.call(this, 'E', path);
        this.lhs = origin;
        this.rhs = value;
    };

    /** 差异类型 - 数组变动 */
    function DiffArray(path, index, item) {
        Diff.call(this, 'A', path);
        this.index = index;
        this.item = item;
    };

    function realTypeOf(subject) {
        // 处理 null 和 undefined
        if(subject == null) {
            return subject + '';
        }

        var type = Object.prototype.toString.call(subject);
        return class2type[type] || 'object';
    }

    function deepDiff(lhs, rhs, changes, process, path, key) {
        var currentPath;
        var ltype, rtype;
        var lkeys, rkeys;
        var rs;

        path = path || [];
        currentPath = path.slice(0);
        if (typeof key !== 'undefined') {
            currentPath.push(key);
        }

        if (typeof process === 'function') {
            rs = process(lhs, rhs, currentPath);
            if (rs === true) {
                changes(new DiffEdit(currentPath, lhs, rhs));
                return;
            } else if (rs === false) {
                return;
            }
        }

        ltype = realTypeOf(lhs);
        rtype = realTypeOf(rhs);
        if (ltype === 'undefined') {
            if (rtype !== 'undefined') {
                changes(new DiffNew(currentPath, rhs));
            }
        } else if (rtype === 'undefined') {
            changes(new DiffDelete(currentPath, lhs));
        } else if (ltype !== rtype){
            changes(new DiffEdit(currentPath, lhs, rhs));
        } else if (ltype === 'object') {
            lkeys = Object.keys(lhs);
            rkeys = Object.keys(rhs);

            lkeys.forEach(function (k) {
                var other = rkeys.indexOf(k);
                if (other >= 0) {
                    deepDiff(lhs[k], rhs[k], changes, process, currentPath, k);
                    rkeys.splice(rkeys.indexOf(k), 1);
                } else {
                    deepDiff(lhs[k], undefined, changes, process, currentPath, k);
                }
            });

            rkeys.forEach(function (k) {
                deepDiff(undefined, rhs[k], changes, process, currentPath, k);
            });
        } else if (ltype === 'array') {
            for (var i = 0, len = lhs.length; i < len; i++) {
                if (i >= rhs.length) {
                    changes(new DiffArray(currentPath, i, new DiffDelete(undefined, lhs[i])));
                } else {
                    deepDiff(lhs[i], rhs[i], changes, process, currentPath, i);
                }
            }

            while(i < rhs.length) {
                changes(new DiffArray(currentPath, i, new DiffNew(undefined, rhs[i++])));
            }

        } else if (lhs !== rhs) {
            changes(new DiffEdit(currentPath, lhs, rhs));
        }
    };

    function diff(lhs, rhs, process, format, accum) {
        var accum = accum || [];
        deepDiff(lhs, rhs, function (d) {
            if (d) {
                typeof format === 'function' && format(d);
                accum.push(d);
            }
        }, process);
        return accum.length ? accum : null;
    };

    window.diff = diff;
}.call(this));
var DataSource = (function () {
    var _this;

    function DataSource(parent) {
        _this = this;
        this.m_parent = parent;
        this.m_newPointList = [];
        this.m_allPointList = [];
        this.m_allGroupList = [];
        this.m_arrProjIdColorMap = {};
        this.m_dataSourceId;
        this.m_lang = I18n.resource.dataSource;
        this.m_selectItemId = 0;
        this.m_selectGroupId = 0;
        this.m_groupIconOpen = '/static/images/dataSource/group_head_sel.png';
        this.m_groupIconClose = '/static/images/dataSource/group_head_normal.png';
        this.m_cfgPanel;
        this.m_unassigned = 'unassigned';
        this.m_langFlag = ('zh' == localStorage['language']) ? 0 : 1;   // 0：zh，1：en
        this.$dsNavContain = undefined;
        this.m_curPageNum = 1;
        this.m_arrCloudTableInfo = [];
        this.treeObj = undefined;
        this.iotFilter = undefined;
    }

    DataSource.prototype = {
        show: function () {
            var _this = this;
            Spinner.spin(ElScreenContainer);
            I18n.fillArea($('#divAnlsDatasourcePane'));
            I18n.fillArea($('#divEnergyAnlsPane'));
            _this.loadDataSourceRecord();
            _this.initContain();
            _this.initElement();
            //_this.initDrag();
            //_this.colapseGroups(sessionStorage.getItem('dsOpenGroupId'));
            Spinner.stop();
        },

        close: function () {
            this.m_newPointList = null;
            this.m_allPointList = null;
        },

        initContain: function () {
            this.initTreeNavStyle();

            //var _this = this;
            //var dsContain = $('#dataSrcContain');
            //dsContain.html('');

            //var panel = $('<div id="dataSrcPanel"></div>');
            //dsContain.append(panel);

            //var addGroup = $('<div id="dataSrcAddGroup"><input type="text" id="inputAddGroup" placeholder="+ Add group" ></input></div>');
            //dsContain.append(addGroup);
            //dsContain.keyup(function (e) {
            //    if (13 == e.keyCode) {
            //        _this.addNewGroup();
            //    }
            //});

            //var inputAdd = addGroup.find('#inputAddGroup');
            //inputAdd.attr('placeholder', _this.m_lang.ADD_GROUP);
            //inputAdd.blur(function (e) {
            //    _this.addNewGroup();
            //});
        },

        initTreeNavStyle: function () {
            WebAPI.get('/static/views/observer/dataSource.html').done(function (resultHtml) {
                _this.$dsNavContain = $(resultHtml);
                I18n.fillArea(_this.$dsNavContain);
                var $pageMine = _this.$dsNavContain.find('#pageMine');
                var $pageCloud = _this.$dsNavContain.find('#pageCloud');
                var $pageIot = _this.$dsNavContain.find('#pageIot');
                _this.$dsNavContain.find('#liMine').click(function (e) {
                    $('#liMine').attr('class', 'active');
                    $('#liCloud').attr('class', '');
                    $('#liIot').attr('class', '');
                    $pageMine.show();
                    $pageCloud.hide();
                    $pageIot.hide();
                });
                _this.$dsNavContain.find('#liCloud').click(function (e) {
                    if (_this.m_arrCloudTableInfo.length <= 0) {
                        _this.initDsCloud();
                    }
                    $('#liMine').attr('class', '');
                    $('#liCloud').attr('class', 'active');
                    $('#liIot').attr('class', '');
                    $pageMine.hide();
                    $pageIot.hide();
                    $pageCloud.show();
                });
                _this.$dsNavContain.find('#liIot').click(function(e){
                    $('#liMine').attr('class', '');
                    $('#liCloud').attr('class', '');
                    $('#liIot').attr('class', 'active');

                    $pageMine.hide();
                    $pageIot.html('').show();
                    $pageCloud.hide();
                    _this.initIotFilter();
                });
                _this.initIotFilter();
                _this.initDsMine();
                //_this.initDsCloud();
                $('#dataSrcContain').empty();
                $('#dataSrcContain').append(_this.$dsNavContain);
                var addGroup = $('<div id="dataSrcAddGroup"><input type="text" id="inputAddGroup" placeholder="+ Add group" ></div>');
                $pageMine.append(addGroup);
                $('#inputAddGroup').attr('placeholder', I18n.resource.dataSource.ADD_GROUP);

                $pageMine.keyup(function (e) {
                    if (13 == e.keyCode) {
                        _this.addNewGroup();
                    }
                });
                var inputAdd = addGroup.find('#inputAddGroup');
                inputAdd.attr('placeholder', _this.m_lang.ADD_GROUP);
                inputAdd.blur(function (e) {
                    _this.addNewGroup();
                });
            }).always(function (e) {
            });
        },
        initIotFilter:function(){
            var $ctn = _this.$dsNavContain.find('#pageIot');
            _this.iotFilter = new HierFilter($ctn);
            _this.iotFilter.init();
            var option = {
                tree:{
                    show:true,
                    event: {
                        click: [
                            {
                                act: onNodeClick,
                                tar: ['groups', 'projects']
                            },
                            {
                                act: ontThingClick,
                                tar: 'things'
                            },
                            {
                                act: function () {
                                    console.log('click things')
                                },
                                tar: 'things'
                            }
                        ],
                    },
                    drag:{
                        dragstart:[
                            {
                                act:onAttrDragStart,
                                tar:'attrs'
                            },
                        ],
                        dragend:[
                            {
                                act:onAttrDragEnd,
                                tar:'attrs'
                            },
                        ]
                    }
                }
            };
            _this.iotFilter.setOption(option);
            function onNodeClick(event, treeId, treeNode ){
                if (_this.iotFilter.setDefault === true){
                    var node = treeNode.children[0];
                    _this.iotFilter.tree.selectNode(node);
                    _this.iotFilter.tree.setting.callback.onClick({target:document.getElementById(node.tId)}, node['_id'], node);
                    _this.iotFilter.setDefault = false
                }
            }
            function ontThingClick(event, treeId, treeNode) {
                var attrs = _this.iotFilter.dictClass['things'][treeNode.type].attrs;
                var arrNode = [];
                var node ;
                for (var pt in treeNode.arrP){
                    if(!attrs[pt])continue;
                    node = {
                        '_id':treeNode.arrP[pt],
                        'name':attrs[pt].name,
                        'attrType':pt,
                        'baseType':'attrs'
                    }
                    arrNode.push(node)
                }
                if(!treeNode.children || treeNode.children.length == 0) {
                    _this.iotFilter.tree.addNodes(treeNode, arrNode,true);
                }
            }
            function onAttrDragStart(event,treeNode){
                EventAdapter.setData({'dsItemId': treeNode['_id']});
                $('.templatePara').css('display', 'block');
            }
            function onAttrDragEnd(){
                $('.templatePara').css('display', 'none');
                var $template = $('#anlsPane').find('.anlsTemplate');
                $template.attr('class', 'anlsTemplate');
            }
            function onNodeDblClick(event, treeId, treeNode, widget){
            }
        },
        initDsMine: function () {
            var $inputSearch = _this.$dsNavContain.find('#inputDsMineSearch');
            $inputSearch.keyup(function(e) {
                var searchVal = $(e.currentTarget).val();
                if (13 == e.keyCode) {
                    var searchVal = $inputSearch.val();
                    WebAPI.get('/analysis/datasource/searchDsItemInfo/' + AppConfig.userId + '/' + searchVal).done(function (result) {
                        var treeMine = _this.$dsNavContain.find('#treeMine');
                        var zSetting = {
                            async: {
                                enable: false
                            },
                            view: {
                                addDiyDom: addDiyDom,
                                addHoverDom: addHoverDom,
                                removeHoverDom: removeHoverDom,
                                selectedMulti: false
                            },
                            edit: {
                                enable: true,
                                drag:{
                                    isCopy:false,
                                    isMove:false
                                }
                            },
                            data: {
                                simpleData: {
                                    enable: true
                                }
                            },
                            callback: {
                                beforeRename: zTreeBeforeRename,
                                beforeRemove: zTreeBeforeRemove
                            }
                        }
                        function addDiyDom(treeId, treeNode) {
                            var $itemLeaf = $('#' + treeNode.tId);
                            $itemLeaf.attr('ptid', treeNode.id);
                            $itemLeaf.attr('draggable', true);
                            EventAdapter.on($itemLeaf, 'dragstart', function (e) {
                                $('.templatePara').css('display', 'block');
                                var tar = $(e.target);
                                var dragSrcId = tar.attr('ptid');
                                EventAdapter.setData({'dsItemId': dragSrcId});
                            });
                            EventAdapter.on($itemLeaf, 'dragover', function (e) {
                                e.preventDefault();
                            });
                            EventAdapter.on($itemLeaf, 'dragend', function (e) {
                                $('.templatePara').css('display', 'none');
                                var $template = $('#anlsPane').find('.anlsTemplate');
                                $template.attr('class', 'anlsTemplate');
                            });
                            if (!treeNode.isParent) {
                                if (0 == treeNode.type) {
                                    var prjName = _this.getProjectNameFromId(treeNode.projId, _this.m_langFlag);
                                    _this.initToolTips($itemLeaf, treeNode.name, prjName, treeNode.value, treeNode.note);
                                }
                                else if (1 == treeNode.type) {
                                    var showName = _this.getShowNameFromFormula(treeNode.value);
                                    _this.initFormulaToolTips($itemLeaf, treeNode.name, showName, treeNode.note);
                                }
                            }
                        }
                        function addHoverDom(treeId, treeNode) {
                            if (!treeNode.isParent) {
                                _this.setHoverColor(treeNode);
                            }
                        }
                        function removeHoverDom(treeId, treeNode) {
                            if (!treeNode.isParent) {
                                _this.removeHoverColor(treeNode);
                            }
                        }
                        function zTreeBeforeRename(treeId, treeNode, newName, isCancel) {
                            _this.zTreeBeforeRenameFunc(treeNode, newName);
                        }
                        function zTreeBeforeRemove(treeId, treeNode) {
                            _this.zTreeBeforeRemoveFunc(treeNode);
                        }
                        var zNodes = _this.generateSearchTree(result);
                        _this.treeObj = $.fn.zTree.init(treeMine, zSetting, zNodes);
                        $('#dataSrcAddGroup').hide();
                    }).always(function (e) {
                    });
                }
                if ('' == searchVal) {
                    _this.initDsMineTree();
                    $('#dataSrcAddGroup').show();
                }
            });
            _this.$dsNavContain.find('#spanDsMineSearch').click(function (e) {
                $inputSearch.val('');
                _this.initDsMineTree();
                $('#dataSrcAddGroup').show();
            });
            //Spinner.spin(_this.$dsNavContain[2]);
            _this.initDsMineTree();
            $('#dataSrcAddGroup').show();
        },

        initDsMineTree: function () {
            var zSetting = {
                async: {
                    enable: true,
                    type: 'get',
                    url: function (treeId, treeNode) {
                        return '/analysis/datasource/getDsItemInfo/' + AppConfig.userId + '/' + (typeof treeNode === 'undefined' ? 'null' : treeNode.id);
                    },
                    dataFilter: dsItemfilter
                },
                view: {
                    addDiyDom: addDiyDom,
                    addHoverDom: addHoverDom,
                    removeHoverDom: removeHoverDom,
                    selectedMulti: false
                },
                edit: {
                    enable: true,
                    renameTitle: I18n.resource.dataSource.RENAME,
                    removeTitle: I18n.resource.dataSource.REMOVE,
                    drag:{
                        isCopy:false,
                        isMove:false
                    }
                },
                data: {
                    keep: {
                        leaf: true,
                        parent: true
                    },
                    simpleData: {
                        enable: true
                    }
                },
                callback: {
                    beforeRename: zTreeBeforeRename,
                    beforeRemove: zTreeBeforeRemove,
                    onAsyncSuccess: zTreeOnAsyncSuccess,
                    onAsyncError: zTreeOnAsyncError
                    //beforeDrag: zTreeBeforeDrag
                    //onDrag: zTreeOnDrag
                }
            };

            function dsItemfilter(treeId, parentNode, responseData) {
                Spinner.spin(_this.$dsNavContain[2]);
                return _this.generateTreeEx(responseData);
            }

            function addDiyDom(treeId, treeNode) {
                if (treeNode.num) {
                    var aObj = _this.$dsNavContain.find("#" + treeNode.tId + "_switch");
                    var $badge = $('<span class="badge treeBadge">' + treeNode.num + '</span>');
                    aObj.next('a').after($badge);
                }

                var $itemLeaf = _this.$dsNavContain.find('#' + treeNode.tId);
                $itemLeaf.attr('ptid', treeNode.id);
                $itemLeaf.attr('draggable', true);
                EventAdapter.on($itemLeaf, 'dragstart', function (e) {
                    $('.templatePara').css('display', 'block');
                    var tar = $(e.target);
                    var dragSrcId = tar.attr('ptid');
                    EventAdapter.setData({'dsItemId': dragSrcId});
                    _this.stopBubble(e);
                });
                EventAdapter.on($itemLeaf, 'dragover', function (e) {
                    e.preventDefault();
                });
                EventAdapter.on($itemLeaf, 'dragend', function (e) {
                    $('.templatePara').css('display', 'none');
                    var $template = $('#anlsPane').find('.anlsTemplate');
                    $template.attr('class', 'anlsTemplate');
                });
                EventAdapter.on($itemLeaf, 'drop', function (e) {
                    var tar = $(e.target);
                    var dstTLi = tar.closest('li');
                    var dstId = dstTLi.eq(0).attr('id');
                    var dstNode = _this.treeObj.getNodeByTId(dstId);

                    var srcId = EventAdapter.getData().dsItemId;
                    var srcJq = $('li[ptid$=' + srcId + ']');
                    var srcTId = srcJq.eq(0).attr('id');
                    var srcNode = _this.treeObj.getNodeByTId(srcTId);

                    var dstParentId = dstNode.pId;
                    var dstParentJq = $('li[ptid$=' + dstParentId + ']');
                    var dstParentTId = dstParentJq.eq(0).attr('id');
                    var dstParentNode = _this.treeObj.getNodeByTId(dstParentTId);

                    var srcParentId = srcNode.pId;
                    var srcParentJq = $('li[ptid$=' + srcParentId + ']');
                    var srcParentTId = srcParentJq.eq(0).attr('id');
                    var srcParentNode = _this.treeObj.getNodeByTId(srcParentTId);

                    var postData = {};
                    var arrSrc = [];
                    var arrDst = [];
                    var srcParId = srcNode.pId;
                    var dstParId = dstNode.pId;
                    //var srcParParId = srcParentNode.pId;
                    //var dstParParId = dstParentNode.pId;
                    var saveType = 0;
                    if (srcNode.isParent && !dstNode.isParent) {    // group --> point, deny
                        return;
                    }
                    else if (!srcNode.isParent && !dstNode.isParent) {   // point --> point
                        if (_this.treeObj.moveNode(dstNode, srcNode, 'next', true)) {
                            if (srcParId == dstParId) {    // leaf, drag in group
                                $.each((dstParentNode.children), function (i, n) {
                                    arrDst.push(n.id);
                                });
                                postData[dstParentId] = arrDst;
                            }
                            else {  // node, drag cross groups
                                $.each((srcParentNode.children), function (i, n) {
                                    arrSrc.push(n.id);
                                });
                                $.each((dstParentNode.children), function (i, n) {
                                    arrDst.push(n.id);
                                });
                                var nSrcIdx = srcParentNode.getIndex();
                                var nDstIdx = dstParentNode.getIndex();
                                if (nDstIdx < nSrcIdx) {  // 往上拖
                                    postData[dstParId] = arrDst;
                                    postData[srcParId] = arrSrc;
                                }
                                else {  // 往下拖
                                    postData[srcParId] = arrSrc;
                                    postData[dstParId] = arrDst;
                                }
                            }
                        }
                    }
                    else if (!srcNode.isParent && dstNode.isParent) {   // point --> group
                        if (_this.treeObj.moveNode(dstNode, srcNode, 'inner', true)) {
                            if (srcParentNode.children) {
                                $.each((srcParentNode.children), function (i, n) {
                                    arrSrc.push(n.id);
                                });
                            }
                            $.each((dstNode.children), function (i, n) {
                                arrDst.push(n.id);
                            });
                            var nSrcIdx = srcParentNode.getIndex();
                            var nDstIdx = dstNode.getIndex();
                            if (nDstIdx < nSrcIdx) {  // 往上拖
                                postData[dstNode.id] = arrDst;
                                postData[srcParId] = arrSrc;
                            }
                            else {  // 往下拖
                                postData[srcParId] = arrSrc;
                                postData[dstNode.id] = arrDst;
                            }
                        }
                    }
                    else if (srcNode.isParent && dstNode.isParent) {   // group --> group
                        saveType = 1;
                        var nSrcIdx = srcNode.getIndex();
                        var nDstIdx = dstNode.getIndex();
                        if (_this.treeObj.moveNode(dstNode, srcNode, 'next', true)) {
                            var liGroup = $('#treeMine').children('li');
                            if (liGroup && liGroup.length > 0) {
                                postData.groupIdList = [];
                                $.each(liGroup, function (i, n) {
                                    postData.groupIdList.push($(n).attr('ptid'));
                                });
                            }
                            //if (srcNode.children) {
                            //    $.each((srcNode.children), function (i, n) {
                            //        arrSrc.push(n.id);
                            //    });
                            //}
                            //if (dstNode.children) {
                            //    $.each((dstNode.children), function (i, n) {
                            //        arrDst.push(n.id);
                            //    });
                            //}
                            //if (nDstIdx < nSrcIdx) {  // 往上拖
                            //    postData[dstNode.id] = arrDst;
                            //    postData[srcNode.id] = arrSrc;
                            //}
                            //else {  // 往下拖
                            //    postData[srcNode.id] = arrSrc;
                            //    postData[dstNode.id] = arrDst;
                            //}
                        }
                    }
                    if (0 == saveType) {
                        WebAPI.post('/analysis/datasource/saveLayout/' + AppConfig.userId, postData).done(function (data) {
                            if (data.success) {
                            }
                        }).always(function () {
                        });
                    }
                    else if (1 == saveType) {
                        WebAPI.post('/datasource/saveDataSourceGroupLayout/' + AppConfig.userId, postData).done(function (data) {
                            if ('successful' == data.error) {
                            }
                        }).always(function () {
                        });
                    }
                    _this.stopBubble(e);
                });

                if (treeNode.id == sessionStorage.getItem('dsOpenGroupId')) {
                    sessionStorage.removeItem('dsOpenGroupId');
                    if (treeNode.isParent && _this.treeObj) {
                        _this.treeObj.expandNode(treeNode, true, false, true);
                    }
                }

                if (!treeNode.isParent) {
                    if (0 == treeNode.type) {
                        var prjName = _this.getProjectNameFromId(treeNode.projId, _this.m_langFlag);
                        _this.initToolTips($itemLeaf, treeNode.name, prjName, treeNode.value, treeNode.note);
                    }
                    else if (1 == treeNode.type) {
                        var showName = _this.getShowNameFromFormula(treeNode.value);
                        _this.initFormulaToolTips($itemLeaf, treeNode.name, showName, treeNode.note);
                    }
                }
            }

            //var newCount = 1;
            function addHoverDom(treeId, treeNode) {
                if (treeNode.isParent) {    // add btn
                    var sObj = $("#" + treeNode.tId + "_span");
                    if (treeNode.editNameFlag || $("#addBtn_" + treeNode.tId).length > 0) {
                        return;
                    }
                    //if (0 == $("#addBtnPage_"+treeNode.tId).length) {
                    //    var addStr = "<span class='button addPage' id='addBtnPage_" + treeNode.tId + "' title='add page' onfocus='this.blur();'></span>";
                    //    sObj.after(addStr);
                    //    var btnPage = $("#addBtnPage_" + treeNode.tId);
                    //    if (btnPage) btnPage.bind("click", function () {
                    //        if (_this.treeObj) {
                    //            _this.treeObj.addNodes(treeNode, {id: (100 + newCount), pId: treeNode.id, name: "new node" + (newCount++), isParent: false});
                    //        }
                    //        return false;
                    //    });
                    //}

                    if (0 == $("#addBtnFormula_"+treeNode.tId).length) {  // add formula
                        //var addStr = "<span class='button addFormula' id='addBtnFormula_" + treeNode.tId + "' title='add formula' onfocus='this.blur();'></span>";
                        var addStr = "<span class='iconfont' id='addBtnFormula_" + treeNode.tId + "' title='add group' onfocus='this.blur();' style='margin-left:4px'>&#xe63e;</span>";
                        sObj.after(addStr);
                        var btnGroup = $("#addBtnFormula_" + treeNode.tId);
                        if (btnGroup) btnGroup.attr('title', I18n.resource.dataSource.ADD_FORMULA);
                        if (btnGroup) btnGroup.bind("click", function() {
                            if (_this.m_cfgPanel) {
                                $(_this.m_cfgPanel.container).remove();
                            }
                            var addInterface = $('#addPointPanelContain');
                            if (!addInterface || addInterface.length > 0) {
                                return;
                            }
                            _this.m_selectGroupId = treeNode.id;
                            WebAPI.get('/static/views/observer/dataSourceAdd.html').done(function (result) {
                                _this.m_cfgPanel = new DataSourceConfigure(_this, 1, true, '', '', '', -1);
                                _this.m_cfgPanel.show();
                            }).always(function (e) {
                            });
                            return false;
                        });
                    }

                    if (0 == $("#addBtnPage_"+treeNode.tId).length) {  // add page
                        //var addStr = "<span class='button addPage' id='addBtnPage_" + treeNode.tId + "' title='add page' onfocus='this.blur();'></span>";
                        var addStr = "<span class='glyphicon glyphicon-plus-sign button' id='addBtnPage_" + treeNode.tId + "' title='add point' onfocus='this.blur();' style='margin-left:4px;top:2px'></span>";
                        sObj.after(addStr);
                        var btnGroup = $("#addBtnPage_" + treeNode.tId);
                        if (btnGroup) btnGroup.attr('title', I18n.resource.dataSource.ADD_POINT);
                        if (btnGroup) btnGroup.bind("click", function() {
                            var parentNodes = _this.treeObj.getNodesByParam('id', treeNode.id, null);
                            if (parentNodes.length > 0) {
                                if (!parentNodes[0].zAsync) {
                                    _this.treeObj.expandNode(parentNodes[0], true, false, true);
                                }
                            }

                            if (_this.m_cfgPanel) {
                                $(_this.m_cfgPanel.container).remove();
                            }
                            var addInterface = $('#addPointPanelContain');
                            if (!addInterface || addInterface.length > 0) {
                                return;
                            }
                            _this.m_selectGroupId = treeNode.id;
                            WebAPI.get('/static/views/observer/dataSourceAdd.html').done(function (result) {
                                _this.m_cfgPanel = new DataSourceConfigure(_this, 0, true, '', '', '', -1);
                                _this.m_cfgPanel.show();
                            }).always(function (e) {
                            });
                            return false;
                        });
                    }

                    if (0 == $("#addBtnGroup_"+treeNode.tId).length) {  // add group
                        //var addStr = "<span class='button addGroup' id='addBtnGroup_" + treeNode.tId + "' title='add group' onfocus='this.blur();'></span>";
                        var addStr = "<span class='glyphicon glyphicon-object-align-bottom button' aria-hidden='true' id='addBtnGroup_" + treeNode.tId + "' title='add group' onfocus='this.blur();' style='margin-left:20px;top:2px'></span>";
                        sObj.after(addStr);
                        var btnGroup = $("#addBtnGroup_" + treeNode.tId);
                        if (btnGroup) btnGroup.attr('title', I18n.resource.dataSource.ADD_POINT_GROUP);
                        if (btnGroup) btnGroup.bind("click", function() {
                            var newName = 'new group';
                            var postData = {
                                'groupId': '',
                                'name': newName,
                                'parent': (treeNode.id).toString(),
                                'userId': AppConfig.userId
                            }
                            WebAPI.post('/datasource/saveDataSourceGroup', postData).done(function (result) {
                                if ('successful' != result.error) {
                                    return;
                                }
                                var groupId = result.groupId;
                                if (groupId) {
                                    if (_this.treeObj) {
                                        if (treeNode.zAsync) {
                                            _this.treeObj.addNodes(treeNode, {id:result.groupId, pId:result.parentId, name:result.groupName, isParent:true});
                                        }
                                        else {
                                            _this.treeObj.expandNode(treeNode, true, false, true);
                                        }
                                    }
                                }
                            }).always(function (e) {
                            });
                            return false;
                        });
                    }
                }
                else {
                    _this.setHoverColor(treeNode);
                }
            };

            function removeHoverDom(treeId, treeNode) {
                $("#addBtnGroup_" + treeNode.tId).unbind().remove();
                $("#addBtnPage_" + treeNode.tId).unbind().remove();
                $("#addBtnFormula_" + treeNode.tId).unbind().remove();
                if (!treeNode.isParent) {
                    _this.removeHoverColor(treeNode);
                }
            };

            function zTreeBeforeRename(treeId, treeNode, newName, isCancel) {
                _this.zTreeBeforeRenameFunc(treeNode, newName);
            }

            function zTreeBeforeRemove(treeId, treeNode) {
                _this.zTreeBeforeRemoveFunc(treeNode);
            }

            function zTreeOnAsyncSuccess(event, treeId, treeNode, msg) {
                Spinner.stop();
            };

            function zTreeOnAsyncError(event, treeId, treeNode, XMLHttpRequest, textStatus, errorThrown) {
                Spinner.stop();
            };

            //function zTreeBeforeDrag(treeId, treeNodes) {
            //    var evt;
            //    var el = document.getElementById(treeNodes[0].tId);
            //    if (document.createEvent) { // DOM Level 2 standard
            //        evt = document.createEvent("MouseEvent");
            //        evt.initMouseEvent("dragstart", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
            //        el.dispatchEvent(evt);
            //    } else if (el.fireEvent) { // IE
            //        el.fireEvent('ondragstart');
            //    }
            //    return true;
            //};
            //function zTreeOnDrag(event, treeId, treeNodes){
            //    var evt;
            //    var el = document.getElementById(treeNodes[0].tId);
            //    if (document.createEvent) { // DOM Level 2 standard
            //        evt = document.createEvent("MouseEvent");
            //        evt.initMouseEvent("dragstart", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
            //        el.dispatchEvent(evt);
            //    } else if (el.fireEvent) { // IE
            //        el.fireEvent('ondragstart');
            //    }
            //}

            $(document).ready(function(){
                var treeMine = _this.$dsNavContain.find('#treeMine');
                var arrInit = _this.generateTreeEx(_this.m_parent.store.group);
                _this.treeObj = $.fn.zTree.init(treeMine, zSetting, arrInit);
            });

            /*
            var prjId = 1;
            WebAPI.get('/factory/getPageList/' + prjId + '/1').done(function (result) { // for test
                if (result && result.data) {
                    var zSetting = {
                        view: {
                            fontCss: {
                                color: "#ffffff"
                            },
                            addDiyDom: addDiyDom
                        },
                        edit: {
                            enable: true,
                            editNameSelectAll: true,
                            showRenameBtn: false,
                            showRemoveBtn: false
                        },
                        data: {
                            simpleData: {
                                enable: true,
                                idKey: 'id',
                                pIdKey: 'pId',
                                rootPId: 0
                            }
                        },
                        callback: {}
                    };

                    function addDiyDom(treeId, treeNode) {
                        if (treeNode.num) {
                            var aObj = $("#" + treeNode.tId + "_switch");
                            var $badge = $('<span class="badge treeBadge">' + treeNode.num + '</span>');
                            aObj.next('a').after($badge);
                        }
                    }

                    result.data = arrTest;  // for test
                    var zProjNodes = _this.generateTreeEx(result.data); //

                    $(document).ready(function () {
                        var treeMine = _this.$dsNavContain.find('#treeMine');
                        _this.treeObj = $.fn.zTree.init(treeMine, zSetting, zProjNodes);
                    });
                }
            }).always(function (e) {
            })*/
        },

        zTreeBeforeRenameFunc: function (treeNode, newName) {
            if (treeNode.isParent) {    // group
                var postData = {
                    'groupId': treeNode.id,
                    'name': newName,
                    'parent': Boolean(treeNode.pId) ? (treeNode.pId).toString() : '',
                    'userId': AppConfig.userId
                }
                WebAPI.post('/datasource/saveDataSourceGroup', postData).done(function (result) {
                    if ('successful' != result.error) {
                        return false;
                    }
                }).always(function (e) {
                    return true;
                });
            }
            else {  // page
                var postData = {
                    itemList: [{
                        id: treeNode.id,
                        type: 0,
                        projId: treeNode.projId,
                        alias: newName,
                        note: treeNode.note,
                        value: treeNode.value,
                        groupId: treeNode.pId
                    }]
                };
                WebAPI.post('/analysis/datasource/saveMulti', postData).done(function (data) {
                    if (data.itemIdList.length > 0) {
                        return true;
                    }
                    return false;
                }).error(function (e) {
                    return false;
                }).always(function (e) {
                });
            }
        },

        zTreeBeforeRemoveFunc: function (treeNode) {
            if (treeNode.isParent) {
                WebAPI.get('/datasource/deleteDataSourceGroup/' + AppConfig.userId + '/' + treeNode.id).done(function (result) {
                    if (('successful' != result.error)) {
                        return false
                    }
                }).always(function (e) {
                    return true;
                });
            }
            else {
                var $itemLeaf = _this.$dsNavContain.find('#' + treeNode.tId);
                if ($itemLeaf && $itemLeaf.length > 0) {
                    $itemLeaf.tooltip('destroy');
                }
                WebAPI.get('/analysis/datasource/removeSingle/' + treeNode.id).done(function (data) {
                    if (!data.success) {
                        return false;
                    }
                    else {
                        // modify num flag
                        var parentId = treeNode.pId;
                        var arrGroup = _this.m_parent.store.group;
                        for (var i = 0; i < arrGroup.length; i++) {
                            if (arrGroup[i].id == parentId) {
                                arrGroup[i].num -= 1;
                                var $nodeParent = $("li[ptid='" + parentId + "']");
                                if ($nodeParent && $nodeParent.length > 0) {
                                    var $spanBadge = $nodeParent.find('.treeBadge')
                                    if ($spanBadge && $spanBadge.length > 0) {
                                        $spanBadge.text(arrGroup[i].num.toString());
                                    }
                                }
                                break;
                            }
                        }
                        return true;
                    }
                }).always(function () {
                });
            }
        },

        generateTreeEx: function (arr) {
            var result = [];
            if (!arr) {
                return result;
            }

            var params;
            var unassigned;
            for (var i = 0, len = arr.length; i < len; i++) {
                var item = arr[i];
                if (item) {
                    params = {
                        id:item.id,
                        pId:item.parentId,
                        isParent:item.isParent,
                        name:item.alias,
                        value: item.value,
                        note: item.note,
                        projId: item.projId,
                        num: item.num,
                        type: item.type
                    }
                    if (!item.isParent) {
                        var leafIcon = (1 == item.type) ? 'ptFormula' : 'ptNormal';
                        params['iconSkin'] = leafIcon;
                    }
                    if ('unassigned' == item.alias) {
                        unassigned = params;
                    }
                    else {
                        result.push(params);
                    }
                }
            }
            if (unassigned) {
                result.push(unassigned);
            }
            return result;
        },

        generateSearchTree: function (arr) {
            var result = [];
            var params;
            for (var id in arr) {
                params = {
                    id:id,
                    pId:null,
                    isParent:true,
                    name:arr[id].groupName,
                    value: id,
                    note: '',
                    projId: '',
                    type: 0,
                    open: true
                }
                result.push(params);    // set group

                if (arr[id].dsList) {
                    for (var i = 0, len=arr[id].dsList.length; i < len; i++) {
                        var item = arr[id].dsList[i];
                        params = {
                            id:item.id,
                            pId:id,
                            isParent:false,
                            name:item.alias,
                            value: item.value,
                            note: item.note,
                            projId: item.projId,
                            type: item.type,
                            iconSkin: (1 == item.type) ? 'ptFormula' : 'ptNormal'
                        }
                        result.push(params);    // set leaf
                    }
                }
            }
            return result;
        },

        setHoverColor: function (treeNode) {
            var $row = $('#' + treeNode.tId);
            if ($row && $row.length > 0) {
                $row.css('background-color', '#FFE6B0');
                var $name = $('#' + treeNode.tId + '_span');
                if ($name && $name.length > 0) {
                    $name.css('color', '#000');
                }
                $row.find('.edit').css('color', '#000');
                $row.find('.remove').css('color', '#000');
            }
        },

        removeHoverColor: function(treeNode) {
            var $row = $('#' + treeNode.tId);
            if ($row && $row.length > 0) {
                $row.css('background-color', '');
                var $name = $('#' + treeNode.tId + '_span');
                if ($name && $name.length > 0) {
                    $name.css('color', '');
                }
                $row.find('.edit').css('color', '');
                $row.find('.remove').css('color', '');
            }
        },

        initDsCloud: function () {
            // select
            var $selPrjName = _this.$dsNavContain.find('#selectPrjName');
            $selPrjName.empty();
            var opt;
            var prjId = AppConfig.projectId;
            var nSize = AppConfig.projectList.length;
            for (var i = 0; i < nSize; i++) {
                var project = AppConfig.projectList[i];
                opt = document.createElement('option');
                if (0 == _this.m_langFlag) {
                    opt.textContent = project.name_cn;
                }
                else {
                    opt.textContent = project.name_english;
                }
                opt.value = project.id;
                $selPrjName.append(opt);
            }
            $selPrjName.val(prjId);
            $selPrjName.change(function (e) {
                var prjId = $('#selectPrjName').find('option:selected').val();
                _this.initDsCloudTable(prjId, 1, 50);
            });

            // search
            var $inputSearch = _this.$dsNavContain.find('#inputDsCloudSearch');
            $inputSearch.keyup(function (e) {
                var searchVal = $(e.currentTarget).val();
                if (13 == e.keyCode) {
                    var prjId = _this.$dsNavContain.find('#selectPrjName').val();
                    var size = 50;
                    WebAPI.get('/point_tool/searchCloudPoint/' + prjId + '/1/' + size + '/' + searchVal + '/').done(function (result) {
                        if (result.success && result.data) {
                            // empty table
                            var $tableBody = _this.$dsNavContain.find('#tableDsCloud tbody');
                            $tableBody.empty();

                            // fill table
                            _this.setCloudTable(result.data.pointTable);

                            var ptTotal = result.data.total;
                            var allPageNum = Math.ceil(ptTotal / size);
                            _this.setCloudNav(allPageNum, true);
                        }
                    }).always(function (e) {
                    });
                }
                if ('' == searchVal) {
                    _this.initDsCloudFunc();
                }
            });
            _this.$dsNavContain.find('#spanDsCloudSearch').click(function (e) {
                $inputSearch.val('');
                _this.initDsCloudFunc();
            });

            // table
            _this.initDsCloudTable(prjId, 1, 50);
        },

        initDsCloudTable: function (prjId, count, size) {
            Spinner.spin(_this.$dsNavContain[2]);
            WebAPI.get('/point_tool/getCloudPointTable/' + prjId + '/' + count + '/' + size).done(function (result) {
                if (result.success && result.data) {
                    // set table
                    _this.m_arrCloudTableInfo = result.data.pointTable;
                    _this.setCloudTable(_this.m_arrCloudTableInfo);

                    // set nav
                    var ptTotal = result.data.pointTotal;
                    var allPageNum = Math.ceil(ptTotal / size);
                    _this.setCloudNav(allPageNum, false);
                }
            }).always(function (e) {
                Spinner.stop();
            });
        },

        initDsCloudFunc: function() {
            // empty table
            var $tableBody = _this.$dsNavContain.find('#tableDsCloud tbody');
            $tableBody.empty();

            // init ds cloud table
            var prjId = _this.$dsNavContain.find('#selectPrjName').val();
            _this.initDsCloudTable(prjId, 1, 50);
        },

        setCurrentPage: function(curPageNum, size, bIsSearch) {
            curPageNum = parseInt(curPageNum, 10);
            var prjId = _this.$dsNavContain.find('#selectPrjName').val();
            Spinner.spin(_this.$dsNavContain[2]);
            var url = bIsSearch ? '/point_tool/searchCloudPoint/' : '/point_tool/getCloudPointTable/';
            var parm = prjId + '/' + curPageNum + '/' + size;
            var connectUrl = url + parm;
            if (bIsSearch) {
                connectUrl += '/' + _this.$dsNavContain.find('#inputDsCloudSearch').val() + '/';
            }
            WebAPI.get(connectUrl).done(function (result) {
                if (result.success && result.data) {
                    var ptTotal;
                    if (!bIsSearch) {
                        ptTotal = result.data.pointTotal;
                    }
                    else {
                        ptTotal = result.data.total;
                    }
                    var allPageNum = Math.ceil(ptTotal / size);

                    //_this.m_pointList = {'pointList':result.pointList, 'customName':result.customName, 'pageAllNum':result.pageAllNum};
                    _this.m_curPageNum = curPageNum;
                    var liPageNum = $('#navPageNum').find('.pageNum');
                    if (curPageNum <= 3) {
                        liPageNum.eq(0).attr('value', '1');
                        liPageNum.eq(1).attr('value', '2');
                        liPageNum.eq(2).attr('value', '3');
                        liPageNum.eq(3).attr('value', '4');
                        liPageNum.eq(4).attr('value', '5');
                        liPageNum.eq(0).text('1');
                        liPageNum.eq(1).text('2');
                        liPageNum.eq(2).text('3');
                        liPageNum.eq(3).text('4');
                        liPageNum.eq(4).text('5');
                    }
                    else if (curPageNum >= allPageNum - 2) {
                        liPageNum.eq(0).attr('value', allPageNum - 4);
                        liPageNum.eq(1).attr('value', allPageNum - 3);
                        liPageNum.eq(2).attr('value', allPageNum - 2);
                        liPageNum.eq(3).attr('value', allPageNum - 1);
                        liPageNum.eq(4).attr('value', allPageNum);
                        liPageNum.eq(0).text(allPageNum - 4);
                        liPageNum.eq(1).text(allPageNum - 3);
                        liPageNum.eq(2).text(allPageNum - 2);
                        liPageNum.eq(3).text(allPageNum - 1);
                        liPageNum.eq(4).text(allPageNum);
                    }
                    else {
                        liPageNum.eq(0).attr('value', curPageNum - 2);
                        liPageNum.eq(1).attr('value', curPageNum - 1);
                        liPageNum.eq(2).attr('value', curPageNum);
                        liPageNum.eq(3).attr('value', curPageNum + 1);
                        liPageNum.eq(4).attr('value', curPageNum + 2);
                        liPageNum.eq(0).text(curPageNum - 2);
                        liPageNum.eq(1).text(curPageNum - 1);
                        liPageNum.eq(2).text(curPageNum);
                        liPageNum.eq(3).text(curPageNum + 1);
                        liPageNum.eq(4).text(curPageNum + 2);
                    }

                    // set current page background-color
                    for (var i = 0, len = liPageNum.length; i < len; i++) {
                        var item = liPageNum.eq(i);
                        if (item.attr('value') == curPageNum) {
                            item.closest('li').attr('class', 'active');
                        }
                        else {
                            item.closest('li').removeAttr('class');
                        }
                    }

                    _this.setCloudTable(result.data.pointTable);
                }
            }).always(function (e) {
                Spinner.stop();
            });
        },

        setCloudTable: function (ptTable) {
            var $tableBody = _this.$dsNavContain.find('#tableDsCloud tbody');
            if ($tableBody) {
                $tableBody.empty();
                for (var i = 0, len = ptTable.length; i < len; i++) {
                    var $itemTr = $('<tr ptId="' + ptTable[i]._id + '" draggable="true" title="' + ptTable[i].value + ' : ' + remark + ' "></tr>');
                    //var $itemTdCnt = $('<td><span class="tabColNum">' + (i + 1) + '</span></td>');
                    var $itemTd = $('<td>');
                    var $itemTdName = $('<span class="tabColName">' + ptTable[i].value + '</span>');
                    var remark;
                    if (0 == _this.m_langFlag) {
                        remark = ptTable[i].params.remark;
                    }
                    else {
                        remark = ptTable[i].params.remark_en;
                    }
                    var $itemTdDesc = $('<span class="tabColDesc"> -- ' + remark + '</span>');
                    var $itemTdIcon = $('<span class="btnFav glyphicon glyphicon-plus-sign" aria-hidden="true"></span>');
                    $itemTdIcon.off().click(function(e){
                        var $row = $(e.currentTarget).closest('tr');
                        var ptId = $row.attr('ptId');
                        var insertItem;
                        for (var i = 0, len = _this.m_arrCloudTableInfo.length; i < len; i++) {
                            if (ptId == _this.m_arrCloudTableInfo[i]._id) {
                                _this.insertIntoMineTable(_this.m_arrCloudTableInfo[i]);
                                break;
                            }
                        }
                    });
                    //$itemTr.append($itemTdCnt);
                    $itemTd.append($itemTdName);
                    $itemTdDesc.append($itemTdIcon);
                    $itemTd.append($itemTdDesc);
                    $itemTr.append($itemTd);
                    EventAdapter.on($itemTr, 'dragstart', function (e) {
                        $('.templatePara').css('display', 'block');
                        var tar = $(e.target);
                        var dragSrcId = tar.attr('ptid');
                        EventAdapter.setData({'dsItemId': dragSrcId});
                    });
                    EventAdapter.on($itemTr, 'dragover', function (e) {
                        e.preventDefault();
                    });
                    EventAdapter.on($itemTr, 'dragend', function (e) {
                        $('.templatePara').css('display', 'none');
                        var $template = $('#anlsPane').find('.anlsTemplate');
                        $template.attr('class', 'anlsTemplate');
                    });
                    $tableBody.append($itemTr);
                }
            }
        },

        setCloudNav: function (allPageNum, bIsSearch) {
            var ul = $('<ul class="pagination">\
                <li><a class="pageFlag" value="First"><span aria-hidden="true">&laquo;</span></a></li>\
                <li><a class="pageFlag" value="Previous"><span aria-hidden="true">&lsaquo;</span></a></li>\
            </ul>');
            if (allPageNum > 5) {
                ul.append('<li class="active"><a class="pageFlag pageNum" value="1">1</a></li>\
                    <li><a class="pageFlag pageNum" value="2">2</a></li>\
                    <li><a class="pageFlag pageNum" value="3">3</a></li>\
                    <li><a class="pageFlag pageNum" value="4">4</a></li>\
                    <li><a class="pageFlag pageNum" value="5">5</a></li>');
            }
            else {
                for (var i = 0; i < allPageNum; i++) {
                    var numTmp = i + 1;
                    if (0 == i) {
                        ul.append('<li class="active"><a class="pageFlag pageNum" value="' + numTmp + '">' + numTmp + '</a></li>');
                   }
                    else {
                        ul.append('<li><a class="pageFlag pageNum" value="' + numTmp + '">' + numTmp + '</a></li>');
                    }
                }
            }
            ul.append('<li><a class="pageFlag" value="Next"><span aria-hidden="true">&rsaquo;</span></a></li>\
                        <li><a class="pageFlag" value="Last"><span aria-hidden="true">&raquo;</span></a></li>');

            var pageFlag = ul.find('.pageFlag');
            pageFlag.click(function (e) {
                var value = $(e.currentTarget).attr('value');
                if ('First' == value) {
                    if (_this.m_curPageNum != 1) {
                        _this.setCurrentPage(1, 50, bIsSearch);
                    }
                }
                else if ('Previous' == value) {
                    if (_this.m_curPageNum > 1) {
                        _this.setCurrentPage(_this.m_curPageNum - 1, 50, bIsSearch);
                    }
                }
                else if ('Next' == value) {
                    if (_this.m_curPageNum < allPageNum) {
                        _this.setCurrentPage(_this.m_curPageNum + 1, 50, bIsSearch);
                    }
                }
                else if ('Last' == value) {
                    if (_this.m_curPageNum != allPageNum) {
                        _this.setCurrentPage(allPageNum, 50, bIsSearch);
                    }
                }
                else {
                    if (_this.m_curPageNum != value) {
                        _this.setCurrentPage(value, 50, bIsSearch);
                    }
                }
            });
            var $navPage = _this.$dsNavContain.find('#navPageNum');
            $navPage.empty();
            $navPage.append(ul);
        },

        insertIntoMineTable: function (newNode) {
            var remark;
            var nodeParent = _this.treeObj.getNodesByParam('name', 'unassigned', null);
            if (nodeParent.length > 0) {
                if (0 == _this.m_langFlag) {
                    remark = newNode.params.remark;
                }
                else {
                    remark = newNode.params.remark_en;
                }
                var postData = {
                    itemList: [{
                        type: 0,
                        projId: newNode.projId,
                        alias: newNode.value,
                        note: remark,
                        value: newNode.value,
                        groupId: nodeParent[0].id
                    }]
                };
                WebAPI.post('/analysis/datasource/saveMulti', postData).done(function (data) {
                    if (data.itemIdList.length > 0) {
                        var item = data.itemIdList[0];
                        var obj = {id:item.id, pId:item.groupId, name:item.alias, isParent:false, value:item.value, note:item.note}
                        _this.treeObj.addNodes(nodeParent[0], -1, obj);
                    }
                }).always(function (e) {
                });
            }
        },

        initElement: function () {
            var _this = this;

            var len = AppConfig.projectList.length;
            var item;
            var nColorSize = _this.m_parent.arrColor.length;
            for (var i = 0; i < len; i++) {
                item = AppConfig.projectList[i];
                _this.m_arrProjIdColorMap[item.id] = _this.m_parent.arrColor[i - parseInt(i / nColorSize) * nColorSize];
            }

            EventAdapter.on($('#data_source_add'), 'click', function (e) {
            //$('#data_source_add').click(function (e) {
                if (0 == _this.m_selectGroupId) {
                    alert(_this.m_lang.NO_SELECT_GROUP);
                    return;
                }
                if (undefined != _this.m_cfgPanel) {
                    _this.m_cfgPanel.close();
                }
                WebAPI.get('/static/views/observer/dataSourceAdd.html').done(function (result) {
                    _this.m_cfgPanel = new DataSourceConfigure(_this, 0, true, '', '', '', -1);
                    _this.m_cfgPanel.show();
                }).error(function (result) {
                }).always(function (e) {
                });
            });

            EventAdapter.on($('#data_source_formula_add'), 'click', function (e) {
            //$('#data_source_formula_add').click(function (e) {
                if (0 == _this.m_selectGroupId) {
                    alert(_this.m_lang.NO_SELECT_GROUP);
                    return;
                }
                if (undefined != _this.m_cfgPanel) {
                    _this.m_cfgPanel.close();
                }
                WebAPI.get('/static/views/observer/dataSourceAdd.html').done(function (result) {
                    _this.m_cfgPanel = new DataSourceConfigure(_this, 1, true, '', '', '', -1);
                    _this.m_cfgPanel.show();
                }).error(function (result) {
                }).always(function (e) {
                });
            });

            EventAdapter.on($('#divAnlsDatasourcePane'), 'click', function (e) {
            //$('#divAnlsDatasourcePane').click(function (e) {
                _this.clearSelect();
            },false);

            $('#inputDsSearch').keyup(function (e) {
                var searchVal = $(e.currentTarget).val();
                if (13 == e.keyCode) {  // for show search ds
                    $('#dataSrcPanel').empty();
                    searchVal = searchVal.toLowerCase();
                    _this.insertTreeAllGroupItem(_this.m_allGroupList, _this.m_allPointList, searchVal);
                    $('#dataSrcAddGroup').hide();
                }
                if ('' == searchVal) {
                    $('#dataSrcPanel').empty();
                    _this.insertTreeAllGroupItem(_this.m_allGroupList, _this.m_allPointList, '');
                    _this.colapseGroupsDefault();
                    $('#dataSrcAddGroup').show();
                }
            });
        },

        insertIntoDataList: function (customName, ptName, ptDesc, prjName, iconColor, itemId, baseNode, bIsAppend, bIsSelected) {   // useless now
            var _this = this;

            var div;
            if (bIsSelected) {
                div = $('<div draggable="true" class="dsItem grow dsSelected" style="height:34px"></div>');
            }
            else {
                div = $('<div draggable="true" class="dsItem grow" style="height:34px"></div>');
            }
            div.attr('id', itemId);
            div.click(function (e) {
                _this.clearSelect();

                var target = $(e.currentTarget);
                if ('dsItem grow' == target.attr('class')) {
                    target.attr('class', 'dsItem grow dsSelected');
                } else {
                    target.attr('class', 'dsItem grow');
                }

                _this.stopBubble(e);
            });

            var icon = $('<div class="dsMark"></div>');
            icon.css('background-color', iconColor);
            div.append(icon);

            var custName = $('<div class="dsValue" style="height:36px;">' + customName + '</div>');
            div.append(custName);

            var btnRename = $('<span class="dsBtnRename grow glyphicon glyphicon-wrench"></span>');
            btnRename.click(function (e) {
                if (undefined != _this.m_cfgPanel) {
                    _this.m_cfgPanel.close();
                }

                _this.m_selectItemId = $(e.currentTarget).closest('.dsItem').get(0).id;
                var customName, ptDesc, ptName, item, prjId;
                for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                    item = _this.m_allPointList[i];
                    if (itemId === item.itemId) {
                        customName = item.customName;
                        ptName = item.ptName;
                        ptDesc = item.ptDesc;
                        prjId = item.prjId;
                        break;
                    }
                }
                WebAPI.get('/static/views/observer/dataSourceAdd.html').done(function (result) {
                    _this.m_cfgPanel = new DataSourceConfigure(_this, 0, false, customName, ptName, ptDesc, prjId);
                    _this.m_cfgPanel.show();
                }).fail(function (result) {
                }).always(function (e) {
                });

/*
                var show = $(e.currentTarget).prevAll('.dsValue');
                show.css('display', 'none');

                var target = $(e.currentTarget).nextAll('.dsDivChange');
                target.attr('class', 'dsDivChange show');
                div.css('height', '280px');
                div.css('width', '100%');

                var item;
                var strName = '';
                var strDesc = '';
                for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                    item = _this.m_allPointList[i];
                    if (itemId == item.itemId) {
                        strName = item.customName;
                        strDesc = item.ptDesc;
                        break;
                    }
                }
                var temp = target.find('input');
                if (temp.length == 4) {
                    $(temp[0]).val(strName);
                    $(temp[1]).val(strDesc);
                }

                _this.stopBubble(e);
*/
            }).error(function (e) {
            });
            div.append(btnRename);

            var btnRemove = $('<span class="dsBtnRemove grow glyphicon glyphicon-remove-sign"></span>');
            btnRemove.click(function (e) {
                //TODO 测试confirm
                confirm(_this.m_lang.REMOVE_CONFIRM_TIPS, function () {
                    var div = $(e.currentTarget).closest('.dsItem');
                    var dataSrcItemId = div.attr('id');

                    WebAPI.get('/analysis/datasource/removeSingle/' + dataSrcItemId).done(function (data) {
                        if (Boolean(data.success)) {
                            var len = _this.m_allPointList.length;
                            for (var i = 0; i < len; i++) {
                                if (dataSrcItemId == _this.m_allPointList[i].itemId) {
                                    _this.m_allPointList.splice(i, 1);
                                    break;
                                }
                            }
                            _this.calUpdateDataSources();

                            div.tooltip('destroy');
                            div.remove();

                            // delete workspace
                            var arr = data.deleteModal;
                            var len = arr.length;
                            if (len > 0) {
                                var delMod;
                                var arrDelTitle = [];
                                for (var i = 0; i < len; i++) {
                                    delMod = $('#' + arr[i]);
                                    arrDelTitle.push(delMod.find('.newDivPageTitle').val());
                                    delMod.remove();
                                }

                                var delTitle = _this.m_lang.WORKSPACE + ':';
                                for (var i = 0, len = arrDelTitle.length; i < len; i++) {
                                    delTitle += arrDelTitle[i] + ' ';
                                }
                                delTitle += _this.m_lang.REMOVE_RESULT;
                                alert(delTitle);
                            }
                        }
                    });
                });
            });
            div.append(btnRemove);

            //
            var divChange = $('<div class="dsDivChange"></div>');

            var ctlPrjName = $('<div class="form-group"><label style="color:#eee">' + _this.m_lang.PROJECT_NAME + ': ' + prjName + '</label></div>');
            ctlPrjName.click(function (e) {
                _this.stopBubble(e);
            });
            divChange.append(ctlPrjName);

            var ctlPtName = $('<div class="form-group"><label style="color:#eee">' + _this.m_lang.POINT_NAME + ': ' + ptName + '</label></div>');
            ctlPtName.click(function (e) {
                _this.stopBubble(e);
            });
            divChange.append(ctlPtName);

            var inputCustName = $('<div class="form-group"><label style="color:#eee">Custom Name</label><input type="text" class="form-control" value="" placeholder="Custom Name"></input></div>');
            inputCustName.find('label').text(_this.m_lang.CUSTOM_NAME);
            var ctlInput = inputCustName.find('input');
            ctlInput.attr('value', customName);
            ctlInput.attr('placeholder', _this.m_lang.CUSTOM_NAME);
            inputCustName.click(function (e) {
                _this.stopBubble(e);
            });
            divChange.append(inputCustName);

            var inputDesc = $('<div class="form-group"><label style="color:#eee">Description</label><input type="text" class="form-control" value="" placeholder="Description"></input></div>');
            inputDesc.find('label').text(_this.m_lang.POINT_DESC);
            ctlInput = inputDesc.find('input');
            ctlInput.attr('value', ptDesc);
            ctlInput.attr('placeholder', _this.m_lang.POINT_DESC);
            inputDesc.click(function (e) {
                _this.stopBubble(e);
            });
            divChange.append(inputDesc);

            var btnOk = $('<button class="btn btn-default btn-sm" style="position:absolute; right:70px;">OK</button>');
            btnOk.text(_this.m_lang.SURE);
            btnOk.click(function (e) {
                var temp = $(e.currentTarget).closest('.dsDivChange').find('input');
                var strName = $(temp[0]).val();
                var strDesc = $(temp[1]).val();
                var prjId, ptName, item;

                for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                    item = _this.m_allPointList[i];
                    if (itemId == item.itemId) {
                        prjId = item.prjId;
                        ptName = item.ptName;
                        break;
                    }
                }

                var postData = {
                    itemList: [{
                        id: itemId,
                        type: 0,
                        projId: prjId,
                        alias: strName,
                        note: strDesc,
                        value: ptName,
                        groupId: ''
                    }]
                };

                WebAPI.post('/analysis/datasource/saveMulti', postData).done(function (data) {
                    var id = (data.itemIdList)[0].id;

                    for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                        if (id == _this.m_allPointList[i].itemId) {
                            _this.m_allPointList[i].customName = strName;
                            _this.m_allPointList[i].ptDesc = strDesc;
                            break;
                        }
                    }
                    _this.setToolTipsCustomName(div, strName);
                    _this.setToolTipsDesc(div, strDesc);
                    _this.calUpdateDataSources();
                    $('#'+id).find('.dsValue').text(strName);
                }).error(function (e) {
                });

            });
            divChange.append(btnOk);

            var btnCancel = $('<button class="btn btn-default btn-sm" style="position:absolute; right:15px;">Cancel</button>');
            btnCancel.text(_this.m_lang.CANCEL);
            btnCancel.click(function (e) {
            });
            divChange.append(btnCancel);

            div.append(divChange);


            if (bIsAppend) {
                baseNode.append(div);
            }
            else {
                baseNode.after(div);
            }
        },
        initToolTips: function (parent, customName, projectName, pointName, pointDesc) {
            var _this = this;

            var show = new StringBuilder();
            show.append('<div class="tooltip" role="tooltip" style="z-index:10;position:fixed;max-width:300px;">');
            show.append('    <div class="tooltipTitle tooltip-inner">GeneralRegressor</div>');
            show.append('    <div class="tooltipContent">');
            show.append('        <p class="customName tipStyle"><span class="tipTitleStyle">').append(_this.m_lang.CUSTOM_NAME).append('</span>: ').append(customName).append('</p>');
            show.append('        <p class="projectName tipStyle"><span class="tipTitleStyle">').append(_this.m_lang.PROJECT_NAME).append('</span>: ').append(projectName).append('</p> ');
            show.append('        <p class="pointName tipStyle"><span class="tipTitleStyle">').append(_this.m_lang.POINT_NAME).append('</span>: ').append(pointName).append('</p> ');
            show.append('        <p class="pointDesc tipStyle"><span class="tipTitleStyle">').append(_this.m_lang.POINT_DESC).append('</span>: ').append(pointDesc).append('</p> ');
            show.append('    </div>');
            show.append('    <div class="tooltip-arrow"></div>');
            show.append('</div>');
            var options = {
                placement: 'left',
                title: _this.m_lang.PARAM,
                template: show.toString()
            };
            parent.tooltip(options);
        },

        setToolTipsAll: function (row, userName, customName, projectName, pointName, pointDesc) {
            var tip = row.data('bs.tooltip').$tip;
            userName = ': ' + userName;
            customName = ': ' + customName;
            projectName = ': ' + projectName;
            pointName = ': ' + pointName;
            pointDesc = ': ' + pointDesc;
            tip.find('.userName').text(this.m_lang.USER_NAME + userName);
            tip.find('.customName').text(this.m_lang.CUSTOM_NAME + customName);
            tip.find('.projectName').text(this.m_lang.PROJECT_NAME + projectName);
            tip.find('.pointName').text(this.m_lang.POINT_NAME + pointName);
            tip.find('.pointDesc').text(this.m_lang.POINT_DESC + pointDesc);
        },

        setToolTipsCustomName: function (row, customName) {
            var tip = row.data('bs.tooltip').$tip;
            tip.find('.customName').text(this.m_lang.CUSTOM_NAME + ': ' + customName);
        },

        setToolTipsDesc: function (row, ptDesc) {
            var tip = row.data('bs.tooltip').$tip;
            tip.find('.pointDesc').text(this.m_lang.POINT_DESC + ': ' + ptDesc);
        },

        renderTabel: function () {
            var _this = this;

            var len = _this.m_newPointList.length;
            if (len <= 0) {
                return;
            }

            /*
            // check to delete repeat new items
            for (var i = 0, lenAll = _this.m_allPointList.length; i < lenAll; i++) {
                var allItem = _this.m_allPointList[i];
                if (allItem.ptName == '') {
                    continue;
                }

                for (var j = 0, lenNew = _this.m_newPointList.length; j < lenNew; j++) {
                    var newItem = _this.m_newPointList[j];
                    if (newItem.ptName == '') {
                        continue;
                    }

                    if (allItem.ptName == newItem.ptName) {
                        if (allItem.prjId == newItem.prjId) {
                            _this.m_newPointList.splice(j, 1);

                            var showAlert = new Alert($('#showErr'), Alert.type.warning, _this.m_lang.FILTER_REPEAT_ITEM);
                            showAlert.show(2000);
                            break;
                        }
                        else {
                            newItem.customName = newItem.ptName + '_' + newItem.prjName;
                        }
                    }
                }
            }*/

            var div = $('#dataSrcPanel');
            var rowBaseNum = div.find('.dsItem').length;
            var rowCount;
            var item;
            var eachItem;
            var postData;

            len = _this.m_newPointList.length;
            if (len > 0) {
                postData = {
                    itemList: []
                };

                var arrOld = [];
                var bIsExist = false;
                var parentId = _this.m_newPointList[0].groupId;
                var parentNodes = _this.treeObj.getNodesByParam('id', parentId, null);
                if (parentNodes.length > 0) {
                    arrOld = parentNodes[0].children;
                }

                for (var i = 0; i < len; i++) {
                    item = _this.m_newPointList[i];
                    eachItem = {
                        type: 0,
                        projId: item.prjId,
                        alias: item.customName,
                        note: item.ptDesc,
                        value: item.ptName,
                        groupId: item.groupId
                    }
                    var bFlag = false;
                    for (var j = 0; j < arrOld.length; j++) {
                        if (item.prjId == arrOld[j].projId && item.ptName == arrOld[j].value) {
                            bIsExist = true;
                            bFlag = true;
                            break;
                        }
                    }
                    if (!bFlag) {
                        postData.itemList.push(eachItem);
                    }
                }
                if (bIsExist) {
                    alert(I18n.resource.dataSource.ALREADY_EXIST);
                }

                var projName = _this.m_newPointList[0].prjName;
                var iconColor = _this.m_newPointList[0].iconColor;
                if (postData.itemList.length > 0) {
                    WebAPI.post('/analysis/datasource/saveMulti', postData).done(function (data) {
                        if (data.datasourceId) {
                            _this.m_dataSourceId = data.datasourceId;
                        }

                        var list = data.itemIdList;
                        var nAddlen = postData.itemList.length;
                        for (var i = 0; i < nAddlen; i++) {
                            if (postData.itemList[i].alias == list[i].alias) {
                                postData.itemList[i].itemId = list[i].id;
                            }
                        }

                        // insert into dataSource panel
                        if (_this.treeObj) {
                            var parentId = _this.m_newPointList[0].groupId;
                            var parentNodes = _this.treeObj.getNodesByParam('id', parentId, null);
                            if (parentNodes.length > 0) {
                                if (parentNodes[0].zAsync) {    // has async load
                                    var arrNodes = [];
                                    for (var i = 0; i < postData.itemList.length; i++) {
                                        var item = postData.itemList[i];
                                        arrNodes.push({
                                            id: item.itemId,
                                            pId: item.groupId,
                                            isParent: false,
                                            name: item.alias,
                                            value: item.value,
                                            projId: item.projId,
                                            note: item.note,
                                            type: 0,
                                            iconSkin: 'ptNormal'
                                        });
                                    }
                                    _this.treeObj.addNodes(parentNodes[0], arrNodes);
                                }
                                else {  // no async load
                                    _this.treeObj.expandNode(parentNodes[0], true, false, true);
                                }

                                // modify num flag
                                var arrGroup = _this.m_parent.store.group;
                                for (var i = 0; i < arrGroup.length; i++) {
                                    if (arrGroup[i].id == parentId) {
                                        arrGroup[i].num += nAddlen;
                                        var $nodeParent = $("li[ptid='" + parentId + "']");
                                        if ($nodeParent && $nodeParent.length > 0) {
                                            var $spanBadge = $nodeParent.find('.treeBadge')
                                            if ($spanBadge && $spanBadge.length > 0) {
                                                $spanBadge.text(arrGroup[i].num.toString());
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        }

                        //var divInsert = $('#' + _this.m_selectGroupId);
                        //if (undefined != divInsert) {
                        //    for (var i = 0; i < len; i++) {
                        //        _this.insertTreeItem(divInsert, list[i].id, iconColor, list[i].alias, 0, '', true);
                        //        _this.initToolTips($('#'+list[i].id), list[i].alias, projName, list[i].value, list[i].note);
                        //    }
                        //}

                        /*
                        len = _this.m_newPointList.length;
                        var prjName;
                        for (var i = 0; i < len; i++) {
                            rowCount = rowBaseNum + i;
                            item = _this.m_newPointList[i];
                            prjName = _this.getProjectNameFromId(item.prjId);
                            _this.insertIntoDataList(item.customName, item.ptName, item.ptDesc, prjName, _this.m_arrProjIdColorMap[item.prjId], item.itemId, div, true, false);
                            _this.initToolTips(div.find('.dsItem').last(), item.ptName, prjName, item.ptName, item.ptDesc);
                        }
                        */

                        _this.m_allPointList = _this.m_allPointList.concat(_this.m_newPointList);
                        _this.calUpdateDataSources();
                    }).error(function () {
                    }).always(function () {
                    });
                }
            }
        },

        modifyTable: function () {
            var _this = this;
            var item;
            var eachItem;
            var postData;
            var len = _this.m_newPointList.length;
            if (len > 0) {
                postData = {
                    itemList: []
                };

                item = _this.m_newPointList[0];
                eachItem = {
                    id: item.itemId,
                    type: 0,
                    projId: item.prjId,
                    alias: item.customName,
                    note: item.ptDesc,
                    value: item.ptName,
                    groupId: item.groupId
                }
                postData.itemList.push(eachItem);

                WebAPI.post('/analysis/datasource/saveMulti', postData).done(function (data) {
                    if (data.datasourceId) {
                        _this.m_dataSourceId = data.datasourceId;
                    }

                    for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                        if (item.itemId === _this.m_allPointList[i].itemId) {
                            _this.m_allPointList[i].prjId = item.prjId;
                            _this.m_allPointList[i].prjName = _this.m_newPointList[0].prjName;
                            _this.m_allPointList[i].customName = item.customName;
                            _this.m_allPointList[i].ptName = item.ptName;
                            _this.m_allPointList[i].ptDesc = item.ptDesc;
                            break;
                        }
                    }

                    // change item display
                    var divItem = $('#' + item.itemId);
                    divItem.find('.showName').text(item.customName);

                    // change tips
                    _this.setToolTipsAll(divItem, item.userName, item.customName, item.prjName, item.ptName, item.ptDesc);

                    _this.calUpdateDataSources();

                    Beop.cache.ds.remove(item.itemId);
                }).error(function () {
                }).always(function () {

                });
            }
        },

        initDrag: function () {
            var _this = this;
            _this.dragOperateSrc($('#dataSrcPanel').get(0));
            _this.dragOperateCfg($('.springConfigMask').parent().get(0));
        },

        dragOperateSrc: function (tableList) {
            if (undefined == tableList) {
                return;
            }

            var _this = this;
            EventAdapter.on($(tableList), 'dragstart',
                function (e) {
                    var tar = $(e.target);
                    var className = tar.attr('class');
                    if (!className) {
                        e.preventDefault();
                        return;
                    }
                    if (tar.children('input').length > 0) {
                        e.preventDefault();
                    }

                    if (-1 != className.indexOf('nav nav-list tree-group')) {
                        var dragSrcId = tar.attr('id');
                        EventAdapter.setData({'dsGroupId': dragSrcId});
                        //e.dataTransfer.setData('dsGroupId', dragSrcId);
                    }
                    else if (-1 != className.indexOf('treeRow ui-draggable')) {
                        var dragSrcId = tar.attr('id');
                        EventAdapter.setData({'dsItemId': dragSrcId});
                        //e.dataTransfer.setData('dsItemId', dragSrcId);
                    }
                    else {
                        return;
                    }
                    $('.templatePara').css('display','block');
                }
            );

            EventAdapter.on($(tableList), 'dragover',
                function (e) {
                    e.preventDefault();
                }
            );

            EventAdapter.on($(tableList), 'drop',
                function (e) {
                    var tarItem = $(e.target);
                    var tarId = 0;
                    var dstGroupId = 0;
                    var srcGroupId = 0;
                    var rowClass = tarItem.attr('class');
                    if (!rowClass) {
                        return;
                    }
                    var dragType = -1;   // （==0：组->组）；（==1：点->点）；（==2：点->组）
                    var draggedID = 0;
                    if (-1 != rowClass.indexOf('nav nav-list tree-group') || -1 != rowClass.indexOf('dsTreeHeader')) {
                        tarId = tarItem.closest('.nav').attr('id');
                        draggedID = EventAdapter.getData().dsGroupId;
                        //draggedID = e.dataTransfer.getData('dsGroupId');
                        if (Boolean(draggedID)) {
                            dragType = 0;
                        }
                        else {
                            draggedID = EventAdapter.getData().dsItemId;
                            //draggedID = e.dataTransfer.getData('dsItemId');
                            if (Boolean(draggedID)) {
                                dragType = 2;
                                tarId = tarItem.closest('.nav').attr('id');
                                dstGroupId = tarId;
                                srcGroupId = $('#' + draggedID).closest('.nav').attr('id');
                            }
                        }
                    }
                    else if (-1 != rowClass.indexOf('showName') || -1 != rowClass.indexOf('treeRow ui-draggable')) {
                        dragType = 1;
                        draggedID = EventAdapter.getData().dsItemId;
                        //draggedID = e.dataTransfer.getData('dsItemId');
                        tarId = tarItem.closest('.treeRow').attr('id');
                        dstGroupId = tarItem.closest('.nav').attr('id');
                        srcGroupId = $('#' + draggedID).closest('.nav').attr('id');
                    }
                    else {
                        return;
                    }
                    if (draggedID == tarId || !draggedID) {
                        return;
                    }

                    if (0 === dragType) {
                        // drag group
                        var item, groupName;
                        for (var i = 0, len = _this.m_allGroupList.length; i < len; i++) {
                            item = _this.m_allGroupList[i];
                            if (draggedID == item.id) {
                                groupName = item.name;
                                break;
                            }
                        }
                        $('#' + draggedID).remove();
                        _this.insertTreeGroup(draggedID, groupName, 1, $('#' + tarId));

                        for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                            item = _this.m_allPointList[i];
                            if (draggedID == item.groupId) {
                                if (item.itemType == 0) {
                                    _this.insertTreeItem($('#' + draggedID), item.itemId, item.iconColor, item.customName, 0, '', true);
                                } else {
                                    _this.insertTreeItem($('#' + draggedID), item.itemId, item.iconColor, item.customName, 0, '', false);
                                }

                                var prjName = _this.getProjectNameFromId(item.prjId, _this.m_langFlag);
                                _this.initToolTips($('#' + item.itemId), item.customName, prjName, item.ptName, item.ptDesc);
                            }
                        }
                        /*
                         var groups = $('#dataSrcPanel .nav');
                         var arrTemp = [];
                         $.each(groups, function(i, n){
                         var id = n.id;
                         if ('' != id) {
                         if ('groupEmpty' == id) {
                         id = '';
                         }
                         arrTemp.push(id);
                         }
                         });
                         var postData = {
                         'groupIdList':arrTemp
                         };
                         */
                        var dstGroup, srcGroup;
                        var arrDst = [], arrSrc = [];
                        dstGroup = $('#' + tarId).find('.rows').find('.treeRow');
                        srcGroup = $('#' + draggedID).find('.rows').find('.treeRow');
                        $.each(dstGroup, function (i, n) {
                            arrDst.push(n.id);
                        });
                        $.each(srcGroup, function (i, n) {
                            arrSrc.push(n.id);
                        });
                        var postData = {};
                        postData[tarId] = arrDst;
                        postData[draggedID] = arrSrc;
                        WebAPI.post('/datasource/saveDataSourceGroupLayout/' + AppConfig.userId, postData).done(function (data) {
                            if ('successful' == data.error) {
                                // success
                            }
                        }).error(function () {
                        }).always(function () {
                        });
                    }
                    else if (1 === dragType || 2 === dragType) {
                        // drag item
                        var itemType = 0;
                        var iconColor = '';
                        var custName = '';
                        var projId = 0;
                        var pointName = '';
                        var pointDesc = '';
                        for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                            if (draggedID == _this.m_allPointList[i].itemId) {
                                _this.m_allPointList[i].groupId = dstGroupId;
                                itemType = _this.m_allPointList[i].itemType;
                                iconColor = _this.m_allPointList[i].iconColor;
                                custName = _this.m_allPointList[i].customName;
                                projId = _this.m_allPointList[i].prjId;
                                pointName = _this.m_allPointList[i].ptName;
                                pointDesc = _this.m_allPointList[i].ptDesc;
                                break;
                            }
                        }

                        var selItem = $('#' + draggedID);
                        selItem.tooltip('destroy');
                        selItem.remove();
                        if (itemType == 0) {
                            _this.insertTreeItem($('#' + dstGroupId), draggedID, iconColor, custName, dragType, $('#' + tarId), true);
                        } else {
                            _this.insertTreeItem($('#' + dstGroupId), draggedID, iconColor, custName, dragType, $('#' + tarId), false);
                        }

                        if (0 == itemType) {
                            var prjName = _this.getProjectNameFromId(projId, _this.m_langFlag);
                            _this.initToolTips($('#' + draggedID), custName, prjName, showName, pointDesc);
                        }
                        else if (1 == itemType) {
                            var showName = _this.getShowNameFromFormula(pointName);
                            _this.initFormulaToolTips($('#' + draggedID), custName, showName, pointDesc);
                        }
                        else {
                            // error
                            return;
                        }
                        /*
                         var lyItem = $('#dataSrcPanel .treeRow');
                         var arrTemp = [];
                         $.each(lyItem, function(i, n) {
                         var id = n.id;
                         if ('' != id) {
                         arrTemp.push(id);
                         }
                         });
                         var postData = {
                         datasourceId: _this.m_dataSourceId,
                         list: arrTemp
                         };
                         */
                        var postData = {};
                        if (dstGroupId == srcGroupId) {
                            var srcGroup, arrSrc = [];
                            srcGroup = $('#' + srcGroupId).find('.rows').find('.treeRow');
                            $.each(srcGroup, function (i, n) {
                                arrSrc.push(n.id);
                            });
                            postData[srcGroupId] = arrSrc;
                        }
                        else {
                            var dstGroup, srcGroup;
                            var arrDst = [], arrSrc = [];
                            dstGroup = $('#' + dstGroupId).find('.rows').find('.treeRow');
                            srcGroup = $('#' + srcGroupId).find('.rows').find('.treeRow');
                            $.each(dstGroup, function (i, n) {
                                arrDst.push(n.id);
                            });
                            $.each(srcGroup, function (i, n) {
                                arrSrc.push(n.id);
                            });

                            var dstGroupCnt = 0, srcGroupCnt = 0;
                            var groups = $('#dataSrcPanel .nav');
                            $.each(groups, function (i, n) {
                                if (n.id == dstGroupId) {
                                    dstGroupCnt = i;
                                }
                                if (n.id == srcGroupId) {
                                    srcGroupCnt = i;
                                }
                            });
                            if (dstGroupCnt < srcGroupCnt) {  // 从下往上拖
                                postData[dstGroupId] = arrDst;
                                postData[srcGroupId] = arrSrc;
                            }
                            else {  // 从上往下拖
                                postData[dstGroupId] = arrDst;
                                postData[srcGroupId] = arrSrc;
                            }
                        }

                        WebAPI.post('/analysis/datasource/saveLayout/' + AppConfig.userId, postData).done(function (data) {
                            if (data.success) {

                            }
                        }).error(function () {
                        }).always(function () {
                        });
                    }
                });
        },

        dragOperateCfg: function (divItem) {
            if (undefined == divItem) {
                return;
            }

            var _this = this;
            EventAdapter.on($(divItem), 'dragstart',
                function (e) {
                    var target = $(e.target);
                    var className = target.attr('class');
                    if ('dsItem grow' != className && 'dsItem grow dsSelected' != className) {
                        return;
                    }
                    var dragSrcId = target.attr('id');
                    EventAdapter.setData({'dsItemId': dragSrcId});
                    //e.dataTransfer.setData('dsItemId', dragSrcId);
                }
            );

            EventAdapter.on($(divItem), 'dragover',
                function (e) {
                    e.preventDefault();
                }
            );

            EventAdapter.on($(divItem), 'drop',
                function (e) {
                    var target = $(e.target);
                }
            );
        },

        saveCurrentRecords: function () {
            var _this = this;
            Spinner.spin(ElScreenContainer);

            // delete first
            WebAPI.post('/delete_data_source_records_by_userid', {
                userId: AppConfig.userId
            }).done(function (result) {
                if (result != 0) {
                    Spinner.stop();
                    return;
                }

                // sort second
                var newPtList = [];
                var id;
                var len = _this.m_allPointList.length;
                var newRow;
                var item;
                $('#dataSrcPanel .dsItem').each(function () {
                    id = $(this).attr('id');
                    for (var i = 0; i < len; i++) {
                        item = _this.m_allPointList[i];
                        if (id == item.itemId) {
                            newRow = {
                                'itemId': id,
                                'userId': item.userId,
                                'userName': item.userName,
                                'customName': item.customName,
                                'prjId': item.prjId,
                                'prjName': item.prjName,
                                'ptName': item.ptName,
                                'ptDesc': item.ptDesc,
                                'iconColor': item.iconColor,
                                'itemId': item.itemId
                            }
                            newPtList.push(newRow);
                            break;
                        }
                    }
                });
                _this.m_allPointList = newPtList;

                // insert third
                var row;
                var data = [];
                var len = _this.m_allPointList.length;
                for (var i = 0; i < len; i++) {
                    item = _this.m_allPointList[i];
                    row = {
                        'userId': item.userId,
                        'customName': item.customName,
                        'projectId': item.prjId,
                        'pointName': item.ptName,
                        'pointDesc': item.ptDesc,
                        'iconColor': item.iconColor
                    }
                    data.push(row);
                }

                WebAPI.post('/save_data_source_record', {
                    sourceList: data
                }).done(function (result) {
                    if (0 == result) {
                        // success
                    }
                }).error(function (result) {
                    alert(I18n.resource.observer.widgets.DATABASE_OPERATION_FAILED+'！');
                    return;
                });
            }).error(function (result) {
                alert(I18n.resource.observer.widgets.FAIL_BEFORE_EXECUTING+'！');
                return;
            }).always(function () {
                Spinner.stop();
            });

        },

        loadDataSourceRecord: function () {
            var _this = this;
            //var dataPanel = $('#dataSrcPanel');

            var groupInfo = _this.m_parent.store.group;
            if (!groupInfo) {
                return;
            }

            _this.m_allGroupList = [];
            _this.m_allPointList = [];
            var itemDefault = null;
            for (var m = 0, n = groupInfo.length; m < n; m++) {
                var groupId = groupInfo[m].groupId;
                var groupName = groupInfo[m].groupName;
                var groupIsDefault = (Boolean(groupInfo[m].isDefault)) ? true : false;
                var data = groupInfo[m].datasourceList;
                var groupItem = {'id':groupId,'name':groupName,'isDefault':groupIsDefault};
                if (groupIsDefault) {
                    itemDefault = groupItem;
                }
                else {
                    _this.m_allGroupList.push(groupItem);
                }

                if (data) {
                    var len = data.length;
                    var item;
                    for (var i = 0; i < len; i++) {
                        item = {
                            userId: AppConfig.userId,
                            userName: AppConfig.account,
                            customName: data[i].alias,
                            prjId: data[i].projId,
                            prjName: _this.getProjectNameFromId(data[i].projId),
                            ptName: data[i].value,
                            ptDesc: data[i].note,
                            iconColor: _this.m_arrProjIdColorMap[data[i].projId],
                            itemId: data[i].id,
                            itemType: data[i].type,
                            itemValue: data[i].value,
                            groupId:groupId,
                            groupName:groupName
                        }
                        if (item.itemType == 1) {
                            item.iconColor = '#000000';
                        }
                        _this.m_allPointList.push(item);
                    }

                    /*
                     var prjName;
                     for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                     item = _this.m_allPointList[i];
                     if (item.itemType == 0) {
                     prjName = _this.getProjectNameFromId(item.prjId);
                     _this.insertIntoDataList(item.customName, item.ptName, item.ptDesc, prjName, item.iconColor, item.itemId, dataPanel, true, false);
                     _this.initToolTips(dataPanel.find('.dsItem').last(), item.customName, prjName, item.ptName, item.ptDesc);
                     }
                     else if (item.itemType == 1) {
                     _this.insertFormula(item.itemId, item.customName, item.iconColor, item.ptName, item.ptDesc);
                     _this.initFormulaToolTips(dataPanel.find('.dsItem').last(), item.customName, item.ptName, item.ptDesc);
                     }
                     }
                     */
                }
            }
            if (itemDefault) {
                _this.m_allGroupList.push(itemDefault);
            }
            //_this.insertTreeAllGroupItem(_this.m_allGroupList, _this.m_allPointList, '');

/*            // insert groups and items
            for (var i = 0, len = _this.m_allGroupList.length; i < len; i++) {
                _this.insertTreeGroup(_this.m_allGroupList[i].id, _this.m_allGroupList[i].name, 0, '');
            }
            for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                var item = _this.m_allPointList[i];
                var bIsPoint = true;
                if (0 == item.itemType) {
                    bIsPoint = true;
                }
                else {
                    bIsPoint = false;
                }

                var parentGroup = $('#' + item.groupId);
                _this.insertTreeItem(parentGroup, item.itemId, item.iconColor, item.customName, 0, '', bIsPoint);

                if (bIsPoint) {
                    var prjName = _this.getProjectNameFromId(item.prjId, _this.m_langFlag);
                    _this.initToolTips($('#'+item.itemId), item.customName, prjName, item.ptName, item.ptDesc);
                }
                else {
                    var showName = _this.getShowNameFromFormula(item.ptName);
                    _this.initFormulaToolTips($('#'+item.itemId), item.customName, showName, item.ptDesc);
                }
            }
*/
            //_this.colapseGroups();
        },

        colapseGroupsDefault: function () {
            // close all groups except unassigned
            var treeAllHead = $('.dsTreeHeader .dsGroupName');
            var item, row;
            for (var i = 0, len = treeAllHead.length; i < len; i++) {
                item = treeAllHead.eq(i);
                row = item.closest('.tree-group').find('.rows');
                if (!row || row.length <= 0) {
                    continue;
                }
                if (item.text() == this.m_unassigned) {
                    row.css('display', 'block');
                }
                else {
                    row.css('display', 'none');
                }
            }
        },

        colapseGroups: function (openGroupId) {
            if (!openGroupId) {
                return;
            }
            var treeAllRow = $('#dataSrcPanel .tree-group');
            var item, row;
            for (var i = 0, len = treeAllRow.length; i < len; i++) {
                item = treeAllRow.eq(i);
                row = item.find('.rows');
                if (!row || row.length <= 0) {
                    continue;
                }
                if (item.attr('id') == openGroupId) {
                    row.css('display', 'block');
                }
                else {
                    row.css('display', 'none');
                }
            }
            sessionStorage.removeItem('dsOpenGroupId');
        },

        getProjectNameFromId: function (id, langFlag) {
            var name;
            var len = AppConfig.projectList.length;
            var item;
            for (var i = 0; i < len; i++) {
                item = AppConfig.projectList[i];
                if (id == item.id) {
                    if (0 == langFlag) {
                        name = item.name_cn;
                    }
                    else {
                        name = item.name_en;
                    }
                    break;
                }
            }

            return name;
        },

        getProjectIdFromName: function (projectName) {
            var id;
            var len = AppConfig.projectList.length;
            var item;
            for (var i = 0; i < len; i++) {
                item = AppConfig.projectList[i];
                if (projectName == item.name_cn) {
                    id = item.id;
                    break;
                }
            }

            return id;
        },

        calUpdateDataSources: function () {
            return;
            var _this = this;
            var updateData = [];
            for (var i = 0, len = _this.m_allGroupList.length; i < len; i++) {
                var groupItem = {
                    'groupId': _this.m_allGroupList[i].id,
                    'groupName': _this.m_allGroupList[i].name,
                    'parentId': '',
                    'datasourceList': ''
                };

                var dsList = [];
                for (var j = 0, len2 = _this.m_allPointList.length; j < len2; j++) {
                    var curItem = _this.m_allPointList[j];
                    if (groupItem.groupId == curItem.groupId) {
                        var pushItem = {
                            'id': curItem.itemId,
                            'type': curItem.itemType,
                            'projId': curItem.prjId,
                            'alias': curItem.customName,
                            'note': curItem.ptDesc,
                            'value': curItem.ptName,
                            'groupId': curItem.groupId
                        };
                        dsList.push(pushItem);
                    }
                }
                groupItem.datasourceList = dsList;

                updateData.push(groupItem);
            }

            this.m_parent.updateDataSources(updateData);
        },

        renderFormula: function (_customName, _formulaVal, _formulaDesc) {
            var _this = this;
            var postData = {
                itemList: []
            };

            var prjId = 0;
            var eachItem = {
                type: 1,
                projId: prjId,
                alias: _customName,
                note: _formulaDesc,
                value: _formulaVal,
                groupId: _this.m_selectGroupId
            }
            postData.itemList.push(eachItem);

            WebAPI.post('/analysis/datasource/saveMulti', postData).done(function (data) {
                if (data.id != '') {
                    _this.m_dataSourceId = data.id;
                }

                var list = data.itemIdList;
                var item;
                var arrNewFormula = [];
                for (var i = 0, len = list.length; i < len; i++) {
                    item = {
                        'itemId': list[i].id,
                        'itemType': 1,
                        'customName': list[i].alias,
                        'itemValue': list[i].value,
                        'ptName': list[i].value,
                        'prjId': prjId,
                        'iconColor': '#000000',
                        'ptDesc': _formulaDesc,
                        'groupId': list[i].groupId
                    };
                    arrNewFormula.push(item);

                    //_this.m_allPointList.push(item);
                    //_this.insertTreeItem($('#'+_this.m_selectGroupId), item.itemId, item.iconColor, item.customName, 0, '', false);
                    //var showName = _this.getShowNameFromFormula(list[i].value);
                    //_this.initFormulaToolTips($('#'+item.itemId), item.customName, showName, _formulaDesc);
                }

                // insert into dataSource panel
                if (_this.treeObj) {
                    var parentId = arrNewFormula[0].groupId;
                    var parentNodes = _this.treeObj.getNodesByParam('id', parentId, null);
                    if (parentNodes.length > 0) {
                        if (parentNodes[0].zAsync) {    // has async load
                            var arrNodes = [];
                            for (var i = 0; i < len; i++) {
                                arrNodes.push({
                                    id: arrNewFormula[i].itemId,
                                    pId: arrNewFormula[i].groupId,
                                    isParent: false,
                                    name: arrNewFormula[i].customName,// alias
                                    value: arrNewFormula[i].itemValue,
                                    projId: arrNewFormula[i].prjId,
                                    note: arrNewFormula[i].ptDesc,
                                    type: 1,
                                    iconSkin: 'ptFormula'
                                });
                            }
                            _this.treeObj.addNodes(parentNodes[0], arrNodes);
                        }
                        else {  // no async load
                            _this.treeObj.expandNode(parentNodes[0], true, false, true);
                        }

                        // modify num flag
                        var arrGroup = _this.m_parent.store.group;
                        for (var i = 0; i < arrGroup.length; i++) {
                            if (arrGroup[i].id == parentId) {
                                arrGroup[i].num += 1;
                                var $nodeParent = $("li[ptid='" + parentId + "']");
                                if ($nodeParent && $nodeParent.length > 0) {
                                    var $spanBadge = $nodeParent.find('.treeBadge')
                                    if ($spanBadge && $spanBadge.length > 0) {
                                        $spanBadge.text(arrGroup[i].num.toString());
                                    }
                                }
                                break;
                            }
                        }
                    }
                }
                _this.calUpdateDataSources();
            });
        },

        modifyFormula: function (_customName, _formulaVal, _formulaDesc) {
            var _this = this;
            var postData = {
                itemList: []
            };
            var itemId = _this.m_selectItemId;

            var prjId = Number(AppConfig.projectId);
            var eachItem = {
                id: itemId,
                type: 1,
                projId: prjId,
                alias: _customName,
                note: _formulaDesc,
                value: _formulaVal,
                groupId: _this.m_selectGroupId
            }
            postData.itemList.push(eachItem);

            WebAPI.post('/analysis/datasource/saveMulti', postData).done(function (data) {
                if (data.id != '') {
                    _this.m_dataSourceId = data.id;
                }

                var list = data.itemIdList;
                if (list.length > 0) {
                    var showName = list[0].value;
                    var arr = showName.split('<%');

                    var arrId = [];
                    var arrItem = [];
                    for (var j = 0, len2 = arr.length; j < len2; j++) {
                        var id = arr[j].split('%>')[0];
                        if ('' != id) {
                            arrId.push(id);
                        }
                    }
                    arrItem = _this.getDSItemById(arrId);

                    for (var j = 0, len2 = arr.length; j < len2; j++) {
                        var id = arr[j].split('%>')[0];
                        if ('' == id) {
                            continue;
                        }

                        for (var m = 0; m < arrItem.length; m++) {
                            if (id == arrItem[m].id) {
                                var retVal = arrItem[m];
                                if (null == retVal) {
                                    continue;
                                }
                                showName = showName.replace(id, retVal.value);
                                break;
                            }
                        }
                        //var retVal = _this.getDSItemById(id);
                        //if (null == retVal) {
                        //    continue;
                        //}
                        //showName = showName.replace(id, retVal.value);
                    }
                    showName = showName.replace(/<%/g, '');
                    showName = showName.replace(/%>/g, '');

                    for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                        if (itemId === _this.m_allPointList[i].itemId) {
                            _this.m_allPointList[i].customName = list[0].alias;
                            _this.m_allPointList[i].ptName = list[0].value;
                            _this.m_allPointList[i].ptDesc = list[0].note;
                            break;
                        }
                    }

                    var divFormula = $('#' + itemId);
                    divFormula.find('.showName').text(list[0].alias);
                    _this.setFormulaToolTipsAll(divFormula, list[0].alias, showName, list[0].note);

                    _this.calUpdateDataSources();

                    Beop.cache.ds.remove(itemId);
                }
            });
        },

        insertFormula: function (itemId, customName, iconColor, formula, desc) {    // useless now
            var _this = this;

            var div = $('<div draggable="true" class="dsItem grow" style="height:34px"></div>');
            div.attr('id', itemId);
            div.click(function (e) {
                _this.clearSelect();

                var tar = $(e.currentTarget);
                if ('dsItem grow' == tar.attr('class')) {
                    tar.attr('class', 'dsItem grow dsSelected');
                }
                else {
                    tar.attr('class', 'dsItem grow');
                }

                _this.stopBubble(e);
            });

            var icon = $('<div class="dsMark"></div>');
            icon.css('background-color', iconColor);
            div.append(icon);

            var name = $('<div class="dsValue" style="height:36px"></div>');
            name.text(customName);
            div.append(name);

            var btnRename = $('<span class="dsBtnRename grow glyphicon glyphicon-wrench"></span>');
            btnRename.click(function (e) {
/*
                    _this.m_selectItemId = $(e.currentTarget).closest('.dsItem').get(0).id;
                    var customName, ptVal, ptDesc, item;
                    for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                        item = _this.m_allPointList[i];
                        if (itemId === item.itemId) {
                            customName = item.customName;
                            ptVal = item.itemValue;
                            ptDesc = item.ptDesc;
                            break;
                        }
                    }
                    WebAPI.get('/static/views/observer/dataSourceAdd.html').done(function (result) {
                        new DataSourceConfigure(_this, 1, false, customName, ptVal, ptDesc).show();
                    }).fail(function (result) {
                    }).always(function (e) {
                    });
*/

                var show = $(e.currentTarget).prevAll('.dsValue');
                show.css('display', 'none');

                var target = $(e.currentTarget).nextAll('.dsDivChange');
                target.attr('class', 'dsDivChange show');
                div.css('height', '240px');
                div.css('width', '100%');

                var item;
                var strName = '';
                var strFormula = '';
                var strDesc = '';
                for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                    item = _this.m_allPointList[i];
                    if (itemId == item.itemId) {
                        strName = item.customName;
                        strFormula = item.ptName;
                        strDesc = item.ptDesc;
                        break;
                    }
                }
                var temp = target.find('input');
                if (temp.length == 2) {
                    $(temp[0]).val(strName);
                    $(temp[1]).val(strDesc);
                }

                _this.stopBubble(e);

            }).error(function (e) {
            });
            div.append(btnRename);

            var btnRemove = $('<span class="dsBtnRemove grow glyphicon glyphicon-remove-sign"></span>');
            btnRemove.click(function (e) {
                //TODO 测试confirm
                confirm(_this.m_lang.REMOVE_CONFIRM, function () {
                    var div = $(e.currentTarget).closest('.dsItem');
                    var dataSrcItemId = div.attr('id');

                    WebAPI.get('/analysis/datasource/removeSingle/' + dataSrcItemId).done(function (data) {
                        if (Boolean(data.success)) {
                            var len = _this.m_allPointList.length;
                            for (var i = 0; i < len; i++) {
                                if (dataSrcItemId == _this.m_allPointList[i].itemId) {
                                    _this.m_allPointList.splice(i, 1);
                                    break;
                                }
                            }
                            _this.calUpdateDataSources();

                            div.tooltip('destroy');
                            div.remove();
                        }
                    });
                });
            });
            div.append(btnRemove);

            //
            var divChange = $('<div class="dsDivChange"></div>');

            var inputCustName = $('<div class="form-group"><label style="color:#eee">Custom Name</label><input type="text" class="form-control" value="" placeholder="Custom Name"></input></div>');
            inputCustName.find('label').text(_this.m_lang.CUSTOM_NAME);
            var ctlInput = inputCustName.find('input');
            ctlInput.attr('value', customName);
            ctlInput.attr('placeholder', _this.m_lang.CUSTOM_NAME);
            inputCustName.click(function (e) {
                _this.stopBubble(e);
            });
            divChange.append(inputCustName);

            var ctlFormula = $('<div class="form-group"><label style="color:#eee">' + _this.m_lang.FORMULA_NAME + ': </label></div>');
            var showFormula = $('<span>' + formula + '</span>');
            showFormula.appendTo(ctlFormula.find('label')).mathquill();
            ctlFormula.click(function (e) {
                _this.stopBubble(e);
            });
            divChange.append(ctlFormula);

            var inputDesc = $('<div class="form-group"><label style="color:#eee">Description</label><input type="text" class="form-control" value="" placeholder="Description"></input></div>');
            inputDesc.find('label').text(_this.m_lang.POINT_DESC);
            ctlInput = inputDesc.find('input');
            ctlInput.attr('value', desc);
            ctlInput.attr('placeholder', _this.m_lang.POINT_DESC);
            inputDesc.click(function (e) {
                _this.stopBubble(e);
            });
            divChange.append(inputDesc);

            var btnOk = $('<button class="btn btn-default btn-sm" style="position:absolute; right:70px;">OK</button>');
            btnOk.text(_this.m_lang.SURE);
            btnOk.click(function (e) {
                var temp = $(e.currentTarget).closest('.dsDivChange').find('input');
                var strName = $(temp[0]).val();
                var strDesc = $(temp[1]).val();
                var prjId, ptName, item;

                for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                    item = _this.m_allPointList[i];
                    if (itemId == item.itemId) {
                        prjId = item.prjId;
                        ptName = item.ptName;
                        break;
                    }
                }

                var postData = {
                    itemList: [{
                        id: itemId,
                        type: 1,
                        projId: prjId,
                        alias: strName,
                        note: strDesc,
                        value: ptName,
                        groupId: ''
                    }]
                };

                WebAPI.post('/analysis/datasource/saveMulti', postData).done(function (data) {
                    if (0 == data.itemIdList.length) {
                        return;
                    }

                    var id = (data.itemIdList)[0].id;
                    for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                        if (id == _this.m_allPointList[i].itemId) {
                            _this.m_allPointList[i].customName = strName;
                            _this.m_allPointList[i].ptDesc = strDesc;
                            break;
                        }
                    }
                    _this.setToolTipsCustomName(div, strName);
                    _this.setToolTipsDesc(div, strDesc);
                    _this.calUpdateDataSources();
                    $('#'+id).find('.dsValue').text(strName);
                }).error(function (e) {
                });

            });
            divChange.append(btnOk);

            var btnCancel = $('<button class="btn btn-default btn-sm" style="position:absolute; right:15px;">Cancel</button>');
            btnCancel.text(_this.m_lang.CANCEL);
            btnCancel.click(function (e) {
            });
            divChange.append(btnCancel);

            div.append(divChange);


            $('#dataSrcPanel').append(div);
        },

        initFormulaToolTips: function (parent, customName, formula, desc) {
            var _this = this;

            var show = new StringBuilder();
            show.append('<div class="tooltip" role="tooltip" style="z-index:10;position:fixed;max-width:400px;">');
            show.append('    <div class="tooltipTitle tooltip-inner">GeneralRegressor</div>');
            show.append('    <div class="tooltipContent">');
            show.append('        <p class="customName tipStyle"><span class="tipTitleStyle">').append(_this.m_lang.CUSTOM_NAME).append('</span>: ').append(customName).append('</p>');
            show.append('        <p class="formula tipStyle" style="word-break:normal;"><span class="tipTitleStyle">').append(_this.m_lang.FORMULA_NAME).append('</span>: ').append('</p>');
            show.append('        <p class="pointDesc tipStyle"><span class="tipTitleStyle">').append(_this.m_lang.POINT_DESC).append('</span>: ').append(desc).append('</p>');
            show.append('    </div>');
            show.append('    <div class="tooltip-arrow"></div>');
            show.append('</div>');

            var showFormula = $('<span>' + formula + '</span>');
            var showObj = $(show.toString());
            showFormula.appendTo(showObj.find('.formula')).mathquill();

            var options = {
                placement: 'left',
                title: _this.m_lang.PARAM,
                template: showObj
            };
            parent.tooltip(options);
        },

        setFormulaToolTipsAll: function (row, customName, formulaVal, formulaDesc) {
            var tip = row.data('bs.tooltip').$tip;
            tip.find('.customName').html('<span style="font-weight:bold">' + this.m_lang.CUSTOM_NAME + '</span>: ' + customName);
            tip.find('.pointDesc').html('<span style="font-weight:bold">' + this.m_lang.POINT_DESC + '</span>: ' + formulaDesc);

            var showFormula = $('<span>' + formulaVal + '</span>');
            var dst = tip.find('.formula').html('<span style="font-weight:bold">' + this.m_lang.FORMULA_NAME + '</span>: ');
            showFormula.appendTo(dst).mathquill();
        },

        checkRepeatWithCustomName: function (_name) {
            var _this = this;
            var bRet = false;

            var grids = $('#dataSrcPanel .dsItem .dsValue');
            $.each(grids, function(i, n) {
                if (_name == $(n).text()) {
                    bRet = true;
                    return false;
                }
            });

            return bRet;
        },

        stopBubble: function (e) {
            if (e && e.stopPropagation) {
                e.stopPropagation();
            } else {
                window.event.cancelBubble = true;
            }
        },

        clearSelect: function (e) {
            var itemList = $('#dataSrcPanel .dsItem');
            itemList.attr('class', 'dsItem grow');
            itemList.css('height', '34px');
            itemList.css('width', '33%');

            var panel = $('#dataSrcPanel');
            panel.find('.dsDivChange').attr('class', 'dsDivChange');
            panel.find('.dsValue').css('display', 'inline');
        },

        insertTreeGroup: function (groupId, groupName, type, baseGroup) {
            // type         插入类型，0：尾部插入；1：插入目标位后（baseGroup）；2：插入目标位前（baseGroup）
            // baseGroup    关联 type == 1，插入前的基准Group，插入位置在其后；== 2，插入前的基准Group，插入位置在其前

            var _this = this;
            var divContain = $('#dataSrcPanel');

            var $ul = $('<ul class="nav nav-list tree-group" id="' + groupId + '" draggable="true">');
            //var $liHd = $('<li class="dsTreeHeader"><img src="/static/images/dataSource/group_head_sel.png" alt="png" class="dsTreeHeaderIcon"></li>');
            var $liHd = $('<li class="dsTreeHeader"><span class="dsTreeHeaderIcon open"></span></li>');
            var spanName = $('<span class="dsGroupName">' + groupName + '</span>');
            $liHd.append(spanName);

            if (groupName != _this.m_unassigned) {
                var btnRemove = $('<span class="glyphicon glyphicon-remove-sign panel-heading-btn grow dsTreeBtnDel" aria-hidden="true"></span>');
                EventAdapter.on(btnRemove, 'click', function (e) {
                //btnRemove.click(function (e) {
                    var div = $(e.currentTarget).closest('.nav');
                    WebAPI.get('/static/views/observer/widgets/modalFrame.html').done(function (result) {
                        var res = $(result);
                        res.find('#modalFrmBody').text(_this.m_lang.REMOVE_CONFIRM);
                        var btnSure = res.find('#btnSure');
                        btnSure.click(function(e) {
                            if (undefined != _this.m_cfgPanel) {
                                _this.m_cfgPanel.close();
                                _this.m_parent.showAnlsPane();
                            }

                            var groupId = div.attr('id');

                            // remove group animation
                            div.css('position', 'relative');
                            div.css('animation', 'dsRemove 3s infinite');
                            div.css('-moz-animation', 'dsRemove 3s infinite');// Firefox
                            div.css('-webkit-animation', 'dsRemove 3s infinite');// Safari & Chrome
                            div.css('-o-animation', 'dsRemove 3s infinite');// Opera

                            WebAPI.get('/datasource/deleteDataSourceGroup/' + AppConfig.userId + '/' + groupId).done(function (data) {
                                if (('successful' == data.error)) {
                                    var len = _this.m_allGroupList.length;
                                    for (var i = 0; i < len; i++) {
                                        if (groupId == _this.m_allGroupList[i].id) {
                                            _this.m_allGroupList.splice(i, 1);
                                            div.remove();
                                            break;
                                        }
                                    }
                                    _this.calUpdateDataSources();
                                }
                            }).fail(function (e) {
                            });
                        });
                        res.modal('show');
                    }).always(function (e) {});
                }).error(function (e) {
                });
                $liHd.append(btnRemove);
            }

            var btnAddDs = $('<span class="glyphicon glyphicon-plus-sign panel-heading-btn grow dsTreeBtnAdd" aria-hidden="true" id="data_source_add"></span>');
            EventAdapter.on(btnAddDs, 'click', function (e) {
            //btnAddDs.click(function (e) {
                var tar = $(e.currentTarget);
                _this.m_selectGroupId = tar.closest('.tree-group').get(0).id;
                _this.stopBubble(e);

                if (undefined != _this.m_cfgPanel) {
                    _this.m_cfgPanel.close();
                }
                WebAPI.get('/static/views/observer/dataSourceAdd.html').done(function (result) {
                    _this.m_cfgPanel = new DataSourceConfigure(_this, 0, true, '', '', '', -1);
                    _this.m_cfgPanel.show();
                }).error(function (result) {
                }).always(function (e) {
                });
            });
            $liHd.append(btnAddDs);

            var btnAddFormula = $('<span><img src="/static/images/dataSource/formula_add_normal.png" alt="Formula add" class="dsTreeBtnFormula" id="data_source_formula_add" /></span>');
            EventAdapter.on(btnAddFormula, 'click', function (e) {
            //btnAddFormula.click(function (e) {
                var tar = $(e.currentTarget);
                _this.m_selectGroupId = tar.closest('.tree-group').get(0).id;
                _this.stopBubble(e);

                if (undefined != _this.m_cfgPanel) {
                    _this.m_cfgPanel.close();
                }
                WebAPI.get('/static/views/observer/dataSourceAdd.html').done(function (result) {
                    _this.m_cfgPanel = new DataSourceConfigure(_this, 1, true, '', '', '', -1);
                    _this.m_cfgPanel.show();
                }).error(function (result) {
                }).always(function (e) {
                });
            });

            btnAddFormula.mouseenter(function (e) {
                var img = btnAddFormula.find('img');
                img.attr('src', '/static/images/dataSource/formula_add_hover.png');
                img.css('width', '23px');
                img.css('height', '20px');
            }).error(function (e) {
            });
            btnAddFormula.mouseleave(function (e) {
                var img = btnAddFormula.find('img');
                img.attr('src', '/static/images/dataSource/formula_add_normal.png');
                img.css('width', '21px');
                img.css('height', '19px');
            }).error(function (e) {
            });
            $liHd.append(btnAddFormula);

            if (groupName != _this.m_unassigned) {
                var spanEdit = $('<span class="glyphicon glyphicon-pencil panel-heading-btn grow dsEditGroupName" aria-hidden="true"></span>');
                EventAdapter.on(spanEdit, 'click', function (e) {
                //spanEdit.click(function (e) {
                    var tar = $(e.currentTarget);

                    var groupName = tar.siblings('.dsGroupName');
                    groupName.hide();

                    var input = tar.siblings('.inputEditGroup');
                    input.val(groupName.text());
                    input.show();
                    input.select();

                    tar.siblings('.btn').show();

                    _this.stopBubble(e);
                });
                $liHd.append(spanEdit);

                var inputEdit = $('<input type="text" value="' + groupName + '" class="inputEditGroup">');
                inputEdit.hide();
                EventAdapter.on(inputEdit, 'click', function (e) {
                //inputEdit.click(function (e) {
                    _this.stopBubble(e);
                });
                inputEdit.keyup(function (e) {
                    if (13 == e.keyCode) {
                        var tar = $(e.currentTarget);
                        tar.siblings('button').click();
                    }
                    _this.stopBubble(e);
                });
                $liHd.append(inputEdit);

                var btnEdit = $('<button class="btn btn-default btn-sm" type="submit">Change</button>');
                btnEdit.hide();
                EventAdapter.on(btnEdit, 'click', function (e) {
                //btnEdit.click(function (e) {
                    var tar = $(e.currentTarget);
                    tar.hide();

                    var input = tar.siblings('.inputEditGroup');
                    var newName = input.val();
                    input.hide();

                    var groupName = tar.siblings('.dsGroupName');
                    var oldName = groupName.text();
                    groupName.show();

                    if (oldName != newName && '' != newName) {
                        // do db change
                        var postData = {
                            'groupId': groupId,
                            'name': newName,
                            'parent': '',
                            'userId': AppConfig.userId
                        }
                        WebAPI.post('/datasource/saveDataSourceGroup', postData).done(function (data) {
                            if (undefined == data) {
                                return;
                            }
                            if ('successful' == data.error) {
                                for (var i= 0,len=_this.m_allGroupList.length; i<len; i++) {
                                    if (groupId == _this.m_allGroupList[i].id) {
                                        _this.m_allGroupList[i].name = data.groupName;
                                        break;
                                    }
                                }
                                spanName.text(data.groupName);
                            }
                        }).fail(function (e) {
                        });
                    }
                    _this.stopBubble(e);
                });
                $liHd.append(btnEdit);
            }

            EventAdapter.on($liHd, 'click', function (e) {
            //$liHd.click(function (e) {
                divContain.find('.dsTreeBtnCfg').css('display', 'none');
                divContain.find('.dsTreeBtnRemove').css('display', 'none');
                divContain.find('.dsEditGroupName').css('display', 'none');

                var curTarHead = $(e.currentTarget);
                curTarHead.find('.dsTreeBtnRemove').css('display', 'inline');
                _this.m_selectGroupId = curTarHead.closest('.tree-group').get(0).id;

                //var $otherUl = $(this).parent('ul').siblings('ul');
                //$otherUl.find('.rows').slideUp();
                //$otherUl.find('i').removeClass('icon-minus').addClass('icon-plus');
                $(this).next('.rows').slideToggle();
                var icon = $(this).find('.dsTreeHeaderIcon');
                var imgPath = icon.attr('src');
                //if (_this.m_groupIconOpen == imgPath) {
                if (icon.hasClass('open')) {
                    //icon.attr('src', _this.m_groupIconClose);
                    icon.removeClass('open');
                    curTarHead.find('.dsGroupName').css('font-weight', '400');
                    curTarHead.find('.dsTreeBtnFormula').css('display', 'none');
                    curTarHead.find('.dsTreeBtnAdd').css('display', 'none');
                    curTarHead.find('.dsTreeBtnDel').css('display', 'none');
                    curTarHead.find('.dsEditGroupName').css('display', 'none');
                }
                else {
                    //icon.attr('src', _this.m_groupIconOpen);
                    icon.addClass('open');
                    curTarHead.find('.dsGroupName').css('font-weight', '700');
                    curTarHead.find('.dsTreeBtnFormula').css('display', 'inline');
                    curTarHead.find('.dsTreeBtnAdd').css('display', 'inline');
                    curTarHead.find('.dsTreeBtnDel').css('display', 'inline');
                    curTarHead.find('.dsEditGroupName').css('display', 'inline');
                }
                //var $i = $(this).find('i');
                //var toggleClass = (function () {
                //    if ($i.hasClass('icon-minus'))
                //        return 'icon-plus icon-white'
                //    else
                //        return 'icon-minus icon-white'
                //})();
                //$(this).find('i').removeClass().addClass(toggleClass)
            });
            $ul.prepend($liHd);

            var divLiRow = $('<li class="rows"></li>');
            $ul.append(divLiRow);

            if (0 === type) {
                divContain.append($ul);
            }
            else if (1 === type) {
                if ('' != baseGroup) {
                    baseGroup.after($ul);
                }
            }
            else if (2 === type) {
                if ('' != baseGroup) {
                    baseGroup.before($ul);
                }
            }
        },

        insertTreeItem: function (divParentGroup, itemId, iconColor, itemName, insertType, baseItem, bIsPoint) {
            // insertType   0:插入组尾；1：插入目标位后（关联baseItem）；2：插入组头
            // baseItem     关联 insertType == 1，插入前的基准Item，插入位置在其后
            // bIsPoint     true：表示插入是点，false：插入是公式

            var _this = this;
            var div = $('<div class="treeRow ui-draggable" id="' + itemId + '" draggable="true"> ');//html(itemName);

            var icon = $('<div class="dsMark" style="margin-top: -1px"></div>');
            icon.css('background-color', iconColor);
            div.append(icon);

            var divShowName = $('<span class="showName">' + itemName + '</span>');
            EventAdapter.on(divShowName, 'click', function (e) {
            //divShowName.click(function (e) {
                var oldCustName = $(e.currentTarget).text();
                var input = $('<input type="text" value="' + oldCustName + '" style="width:300px;position: absolute;top: 4px">');
                input.blur(function (e) {
                    var newCustName = $(e.currentTarget).val();
                    if (oldCustName != newCustName) {
                        var item, type, prjId, ptName, ptDesc, groupId, postData;
                        for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                            item = _this.m_allPointList[i];
                            if (itemId == item.itemId) {
                                type = item.itemType;
                                prjId = item.prjId;
                                ptName = item.ptName;
                                ptDesc = item.ptDesc;
                                groupId = item.groupId;
                                break;
                            }
                        }

                        postData = {
                            itemList: []
                        };

                        var eachItem = {
                            id: itemId,
                            type: type,
                            projId: prjId,
                            alias: newCustName,
                            note: ptDesc,
                            value: ptName,
                            groupId: groupId
                        }
                        postData.itemList.push(eachItem);

                        WebAPI.post('/analysis/datasource/saveMulti', postData).done(function (data) {
                            if (data.id != '') {
                                _this.m_dataSourceId = data.id;
                            }

                            var list = data.itemIdList;
                            var dstId, dstCustomName;
                            for (var i = 0, len = list.length; i < len; i++) {
                                dstId = list[i].id;
                                dstCustomName = list[i].alias;

                                for (var j = 0, len2 = _this.m_allPointList.length; j < len2; j++) {
                                    if (dstId == _this.m_allPointList[j].itemId) {
                                        _this.m_allPointList[j].customName = dstCustomName;
                                        break;
                                    }
                                }

                                divShowName.text(dstCustomName);
                                _this.setToolTipsCustomName(divShowName.closest('.treeRow'), dstCustomName);
                            }
                            _this.calUpdateDataSources();
                        });
                    }
                    input.remove();
                    divShowName.css('display', 'inline');
                });
                input.keyup(function (e) {
                    if (13 == e.keyCode) {
                        input.blur();
                    }
                    _this.stopBubble(e);
                });
                divShowName.after(input);
                divShowName.css('display', 'none');
                input.select();
            });
            div.append(divShowName);

            var btnRemove = $('<span class="glyphicon glyphicon-remove-sign panel-heading-btn grow dsTreeBtnRemove" aria-hidden="true"></span>');
            EventAdapter.on(btnRemove, 'click', function (e) {
            //btnRemove.click(function (e) {
                var promise = $.Deferred();
                var div = $(e.currentTarget).closest('.treeRow');
                var dataSrcItemId = div.attr('id');
                var dataSrcId = _this.m_dataSourceId;

                if(typeof _this.m_parent.doSync === 'function') {
                    _this.m_parent.doSync().done(function () {
                        promise.resolve();
                    });
                } else {
                    promise.resolve();
                }

                // start promise
                promise.done(function () {
                    WebAPI.get('/analysis/checkDatasourceBeforeDelete/' + dataSrcItemId + '/' + AppConfig.userId).done(function (chkData) {
                        var nWorkSpLen = chkData.workspaceInfo.length;
                        var nDashBoLen = chkData.dashboardInfo.length;
                        if (nWorkSpLen > 0 || nDashBoLen > 0) {
                            var show = _this.m_lang.REMOVE_CONFIRM_TIPS;
                            var name;
                            for (var i = 0; i < nWorkSpLen; i++) {
                                if (0 == i) {
                                    show += 'workspace: ';
                                }
                                name = chkData.workspaceInfo[i].modalName;
                                name = Boolean(name) ? name : 'Untitled';
                                show += name + ',';
                            }
                            for (var j = 0; j < nDashBoLen; j++) {
                                if (0 == j) {
                                    show += 'dashboard: ';
                                }
                                show += chkData.dashboardInfo[j].modalType + ',';
                            }
                            show += _this.m_lang.REMOVE_CONFIRM;

                            WebAPI.get('/static/views/observer/widgets/modalFrame.html').done(function (result) {
                                var res = $(result);
                                res.find('#modalFrmBody').text(show);
                                var btnSure = res.find('#btnSure');
                                btnSure.click(function(e) {
                                    if (undefined != _this.m_cfgPanel) {
                                        _this.m_cfgPanel.close();
                                        _this.m_parent.showAnlsPane();
                                    }

                                    // remove item animation
                                    div.css('position', 'relative');
                                    div.css('animation', 'dsRemove 3s infinite');
                                    div.css('-moz-animation', 'dsRemove 3s infinite');// Firefox
                                    div.css('-webkit-animation', 'dsRemove 3s infinite');// Safari & Chrome
                                    div.css('-o-animation', 'dsRemove 3s infinite');// Opera

                                    WebAPI.get('/analysis/datasource/removeSingle/' + dataSrcItemId).done(function (data) {
                                        if (Boolean(data.success)) {
                                            var len = _this.m_allPointList.length;
                                            for (var i = 0; i < len; i++) {
                                                if (dataSrcItemId == _this.m_allPointList[i].itemId) {
                                                    _this.m_allPointList.splice(i, 1);
                                                    break;
                                                }
                                            }
                                            _this.calUpdateDataSources();

                                            div.tooltip('destroy');
                                            div.remove();

                                            // delete workspace
                                            var arr = chkData.workspaceInfo;
                                            for (var i= 0,len=arr.length; i<len; i++) {
                                                var divWoSp = $('.divPage');
                                                for (var j= 0,len2=divWoSp.length; j<len2; j++) {
                                                    if (arr[i].modalName == divWoSp.eq(j).find('.modalNameSp').text()) {
                                                        divWoSp.eq(j).remove();
                                                    }
                                                }
                                            }

                                            Beop.cache.ds.remove(dataSrcItemId);
                                        }
                                    }).fail(function (e) {
                                    });
                                });
                                res.modal('show');
                            }).always(function (e) {});
                        }
                        else {
                            if (undefined != _this.m_cfgPanel) {
                                _this.m_cfgPanel.close();
                                _this.m_parent.showAnlsPane();
                            }

                            // remove item animation
                            div.css('position', 'relative');
                            div.css('animation', 'dsRemove 3s infinite');
                            div.css('-moz-animation', 'dsRemove 3s infinite');// Firefox
                            div.css('-webkit-animation', 'dsRemove 3s infinite');// Safari & Chrome
                            div.css('-o-animation', 'dsRemove 3s infinite');// Opera

                            WebAPI.get('/analysis/datasource/removeSingle/' + dataSrcItemId).done(function (data) {
                                if (Boolean(data.success)) {
                                    var len = _this.m_allPointList.length;
                                    for (var i = 0; i < len; i++) {
                                        if (dataSrcItemId == _this.m_allPointList[i].itemId) {
                                            _this.m_allPointList.splice(i, 1);
                                            break;
                                        }
                                    }
                                    _this.calUpdateDataSources();

                                    div.tooltip('destroy');
                                    div.remove();

                                    // delete workspace
                                    var arr = chkData.workspaceInfo;
                                    for (var i= 0,len=arr.length; i<len; i++) {
                                        var divWoSp = $('.divPage');
                                        for (var j= 0,len2=divWoSp.length; j<len2; j++) {
                                            if (arr[i].modalName == divWoSp.eq(j).find('.modalNameSp').text()) {
                                                divWoSp.eq(j).remove();
                                            }
                                        }
                                    }

                                    Beop.cache.ds.remove(dataSrcItemId);
                                }
                            }).fail(function (e) {
                            });
                        }
                    }).fail(function (e) {
                    });
                });
                // end promise
            }).error(function (e) {
            });
            div.append(btnRemove);

            if (bIsPoint) {
                var btnCfg = $('<img src="/static/images/dataSource/item_edit.png" alt="png" class="dsTreeBtnCfg">');
                EventAdapter.on(btnCfg, 'click', function (e) {
                //btnCfg.click(function (e) {
                    if (undefined != _this.m_cfgPanel) {
                        _this.m_cfgPanel.close();
                    }
                    var curTar = $(e.currentTarget);
                    _this.m_selectItemId = curTar.closest('.treeRow').get(0).id;
                    _this.m_selectGroupId = curTar.closest('.tree-group').get(0).id;
                    var customName, ptDesc, ptName, item, prjId;
                    for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                        item = _this.m_allPointList[i];
                        if (itemId === item.itemId) {
                            customName = item.customName;
                            ptName = item.ptName;
                            ptDesc = item.ptDesc;
                            prjId = item.prjId;
                            break;
                        }
                    }
                    WebAPI.get('/static/views/observer/dataSourceAdd.html').done(function (result) {
                        _this.m_cfgPanel = new DataSourceConfigure(_this, 0, false, customName, ptName, ptDesc, prjId);
                        _this.m_cfgPanel.show();
                    }).fail(function (result) {
                    }).always(function (e) {
                    });
                }).error(function (e) {
                });

                btnCfg.mouseenter(function (e) {
                    btnCfg.attr('src', '/static/images/dataSource/item_edit_hover.png');
                    btnCfg.css('width', '18px');
                    btnCfg.css('height', '18px');
                }).error(function (e) {
                });
                btnCfg.mouseleave(function (e) {
                    btnCfg.attr('src', '/static/images/dataSource/item_edit.png');
                    btnCfg.css('width', '16px');
                    btnCfg.css('height', '16px');
                }).error(function (e) {
                });

                div.append(btnCfg);
            }else{
                var btnCfg = $('<img src="/static/images/dataSource/item_edit.png" alt="png" class="dsTreeBtnCfg">');
                EventAdapter.on(btnCfg, 'click', function (e) {
                //btnCfg.click(function (e){
                    if (undefined != _this.m_cfgPanel) {
                        _this.m_cfgPanel.close();
                    }
                    var curTar = $(e.currentTarget);
                    _this.m_selectItemId = curTar.closest('.treeRow').get(0).id;
                    _this.m_selectGroupId = curTar.closest('.tree-group').get(0).id;
                    var customName, ptDesc, ptName, item, prjId;
                    for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                        item = _this.m_allPointList[i];
                        if (itemId === item.itemId) {
                            customName = item.customName;
                            ptName = item.ptName;
                            ptDesc = item.ptDesc;
                            prjId = item.prjId;
                            break;
                        }
                    }
                    WebAPI.get('/static/views/observer/dataSourceAdd.html').done(function (result) {
                        _this.m_cfgPanel = new DataSourceConfigure(_this, 1, false, customName, ptName, ptDesc, prjId);
                        _this.m_cfgPanel.show();
                    }).fail(function (result) {
                    }).always(function (e) {
                    });
                }).error(function (e) {
                });

                btnCfg.mouseenter(function (e) {
                    btnCfg.attr('src', '/static/images/dataSource/item_edit_hover.png');
                    btnCfg.css('width', '18px');
                    btnCfg.css('height', '18px');
                }).error(function (e) {
                });
                btnCfg.mouseleave(function (e) {
                    btnCfg.attr('src', '/static/images/dataSource/item_edit.png');
                    btnCfg.css('width', '16px');
                    btnCfg.css('height', '16px');
                }).error(function (e) {
                });
                div.append(btnCfg);
            }

            EventAdapter.on(div, 'click', function (e) {
            //div.click(function (e) {
                var divContain = $('#dataSrcPanel');
                //divContain.find('.tree-group').css('border-style', 'none');
                divContain.find('.dsTreeBtnCfg').css('display', 'none');
                divContain.find('.dsTreeBtnRemove').css('display', 'none');

                var curTarItem = $(e.currentTarget);
                //curTarItem.closest('.tree-group').css('border-style', 'solid');
                curTarItem.find('.dsTreeBtnCfg').css('display', 'inline');
                curTarItem.find('.dsTreeBtnRemove').css('display', 'inline');
                _this.m_selectGroupId = curTarItem.closest('.tree-group').get(0).id;
            });

            if (0 === insertType) {
                divParentGroup.find('.rows').append(div);
            }
            else if (1 === insertType) {
                if ('' != baseItem) {
                    baseItem.after(div);
                }
            }
            else if (2 === insertType) {
                var lyRow = divParentGroup.find('.rows').find('.treeRow');
                if (0 == lyRow.length) {
                    divParentGroup.find('.rows').append(div);
                }
                else {
                    lyRow.eq(0).before(div);
                }
            }
        },

        insertTreeAllGroupItem: function(groupList, pointList, searchPointName) {
            var _this = this;
            var divContain = $('#dataSrcPanel');

            // insert group
            var groupId, groupName, bIsDefault;
            for (var i= 0, len=groupList.length; i<len; i++) {
                groupId = groupList[i].id;
                groupName = groupList[i].name;
                bIsDefault = groupList[i].isDefault;

                var $ul = $('<ul class="nav nav-list tree-group" id="' + groupId + '" draggable="true" dropable="true" isDefault="' + bIsDefault + '">');
                //var $liHd = $('<li class="dsTreeHeader"><img src="/static/images/dataSource/group_head_sel.png" alt="png" class="dsTreeHeaderIcon"></li>');
                var $liHd;
                if (groupName == this.m_unassigned) {
                    $liHd = $('<li class="dsTreeHeader"><span class="dsTreeHeaderIcon open"></span></li>');
                }
                else {
                    $liHd = $('<li class="dsTreeHeader"><span class="dsTreeHeaderIcon"></span></li>');
                }
                var spanName = $('<span class="dsGroupName">' + groupName + '</span>');
                $liHd.append(spanName);

                if (groupName != _this.m_unassigned) {
                    var btnRemove = $('<span class="glyphicon glyphicon-remove-sign panel-heading-btn grow dsTreeBtnDel" aria-hidden="true" style="display:none"></span>');
                    EventAdapter.on($(btnRemove), 'click',
                        function (e) {
                            var div = $(e.currentTarget).closest('.nav');
                            WebAPI.get('/static/views/observer/widgets/modalFrame.html').done(function (result) {
                                var res = $(result);
                                res.find('#modalFrmBody').text(_this.m_lang.REMOVE_CONFIRM);
                                var btnSure = res.find('#btnSure');
                                btnSure.click(function(e) {
                                    if (undefined != _this.m_cfgPanel) {
                                        _this.m_cfgPanel.close();
                                        _this.m_parent.showAnlsPane();
                                    }

                                    var groupId = div.attr('id');

                                    // remove group animation
                                    div.css('position', 'relative');
                                    div.css('animation', 'dsRemove 3s infinite');
                                    div.css('-moz-animation', 'dsRemove 3s infinite');// Firefox
                                    div.css('-webkit-animation', 'dsRemove 3s infinite');// Safari & Chrome
                                    div.css('-o-animation', 'dsRemove 3s infinite');// Opera

                                    WebAPI.get('/datasource/deleteDataSourceGroup/' + AppConfig.userId + '/' + groupId).done(function (data) {
                                        if (('successful' == data.error)) {
                                            var len = _this.m_allGroupList.length;
                                            for (var i = 0; i < len; i++) {
                                                if (groupId == _this.m_allGroupList[i].id) {
                                                    _this.m_allGroupList.splice(i, 1);
                                                    div.remove();
                                                    break;
                                                }
                                            }
                                            _this.calUpdateDataSources();
                                        }
                                    }).fail(function (e) {
                                    });
                                });
                                res.modal('show');
                            }).always(function (e) {});
                        }
                    );
                    $liHd.append(btnRemove);
                }

                var btnAddDs = $('<span class="glyphicon glyphicon-plus-sign panel-heading-btn grow dsTreeBtnAdd" aria-hidden="true" id="data_source_add" style="display:none"></span>');
                if (groupName == this.m_unassigned) {
                    btnAddDs.css('display', 'inline');
                }
                EventAdapter.on($(btnAddDs), 'click',
                    function (e) {
                        // clear data filter page if exist
                        var $pageFilter = $('#pageDataFilter');
                        if ($pageFilter.length > 0) {
                            $pageFilter.find('#btnCancel').click();
                        }

                        var tar = $(e.currentTarget);
                        _this.m_selectGroupId = tar.closest('.tree-group').get(0).id;
                        _this.stopBubble(e);

                        if (undefined != _this.m_cfgPanel) {
                            _this.m_cfgPanel.close();
                        }
                        WebAPI.get('/static/views/observer/dataSourceAdd.html').done(function (result) {
                            _this.m_cfgPanel = new DataSourceConfigure(_this, 0, true, '', '', '', -1);
                            _this.m_cfgPanel.show();
                        }).error(function (result) {
                        }).always(function (e) {
                        });
                    }
                );
                $liHd.append(btnAddDs);

                var btnAddFormula = $('<span><img src="/static/images/dataSource/formula_add_normal.png" alt="Formula add" class="dsTreeBtnFormula" id="data_source_formula_add"  style="display:none"/></span>');
                if (groupName == this.m_unassigned) {
                    btnAddFormula.children('img').css('display', 'inline');
                }
                EventAdapter.on($(btnAddFormula), 'click',
                    function (e) {
                        // clear data filter page if exist
                        var $pageFilter = $('#pageDataFilter');
                        if ($pageFilter.length > 0) {
                            $pageFilter.find('#btnCancel').click();
                        }

                        var tar = $(e.currentTarget);
                        _this.m_selectGroupId = tar.closest('.tree-group').get(0).id;
                        _this.stopBubble(e);

                        if (undefined != _this.m_cfgPanel) {
                            _this.m_cfgPanel.close();
                        }
                        WebAPI.get('/static/views/observer/dataSourceAdd.html').done(function (result) {
                            _this.m_cfgPanel = new DataSourceConfigure(_this, 1, true, '', '', '', -1);
                            _this.m_cfgPanel.show();
                        }).error(function (result) {
                        }).always(function (e) {
                        });
                    }
                );

                btnAddFormula.mouseenter(function (e) {
                    var img = btnAddFormula.find('img');
                    img.attr('src', '/static/images/dataSource/formula_add_hover.png');
                    img.css('width', '23px');
                    img.css('height', '20px');
                }).error(function (e) {
                });
                btnAddFormula.mouseleave(function (e) {
                    var img = btnAddFormula.find('img');
                    img.attr('src', '/static/images/dataSource/formula_add_normal.png');
                    img.css('width', '21px');
                    img.css('height', '19px');
                }).error(function (e) {
                });
                $liHd.append(btnAddFormula);

                if (groupName != _this.m_unassigned) {
                    var spanEdit = $('<span class="glyphicon glyphicon-pencil panel-heading-btn grow dsEditGroupName" aria-hidden="true" style="display:none"></span>');
                    EventAdapter.on($(spanEdit), 'click',
                        function (e) {
                            var tar = $(e.currentTarget);

                            var groupName = tar.siblings('.dsGroupName');
                            groupName.hide();

                            var input = tar.siblings('.inputEditGroup');
                            input.val(groupName.text());
                            input.show();
                            input.select();

                            tar.siblings('.btn').show();

                            _this.stopBubble(e);
                        }
                    );
                    $liHd.append(spanEdit);

                    var inputEdit = $('<input type="text" value="' + groupName + '" class="inputEditGroup">');
                    inputEdit.hide();
                    EventAdapter.on($(inputEdit), 'click',
                        function (e) {
                            _this.stopBubble(e);
                        }
                    );
                    inputEdit.keyup(function (e) {
                        if (13 == e.keyCode) {
                            var tar = $(e.currentTarget);
                            tar.siblings('button').click();
                        }
                        _this.stopBubble(e);
                    });
                    $liHd.append(inputEdit);

                    var btnEdit = $('<button class="btn btn-primary btn-sm" type="submit">Change</button>');
                    btnEdit.hide();
                    EventAdapter.on($(btnEdit), 'click',
                        function (e) {
                            var tar = $(e.currentTarget);
                            tar.hide();

                            var input = tar.siblings('.inputEditGroup');
                            var newName = input.val();
                            input.hide();

                            var groupName = tar.siblings('.dsGroupName');
                            var oldName = groupName.text();
                            groupName.show();

                            if (oldName != newName && '' != newName) {
                                // do db change
                                var ulNav = tar.closest('.nav');
                                var groupId = ulNav.attr('id');
                                var postData = {
                                    'groupId': groupId,
                                    'name': newName,
                                    'parent': '',
                                    'userId': AppConfig.userId
                                }
                                WebAPI.post('/datasource/saveDataSourceGroup', postData).done(function (data) {
                                    if (undefined == data) {
                                        return;
                                    }
                                    if ('successful' == data.error) {
                                        for (var i = 0, len = _this.m_allGroupList.length; i < len; i++) {
                                            if (groupId == _this.m_allGroupList[i].id) {
                                                _this.m_allGroupList[i].name = data.groupName;
                                                break;
                                            }
                                        }
                                        var spanName = ulNav.find('.dsGroupName');
                                        if (Boolean(spanName)) {
                                            spanName.text(data.groupName);
                                        }
                                    }
                                }).fail(function (e) {
                                });
                            }
                            _this.stopBubble(e);
                        }
                    );
                    $liHd.append(btnEdit);
                }

                EventAdapter.on($($liHd), 'click',
                    function (e) {
                        divContain.find('.dsTreeBtnCfg').css('display', 'none');
                        divContain.find('.dsTreeBtnRemove').css('display', 'none');
                        divContain.find('.dsEditGroupName').css('display', 'none');

                        var curTarHead = $(e.currentTarget);
                        curTarHead.find('.dsTreeBtnRemove').css('display', 'inline');
                        _this.m_selectGroupId = curTarHead.closest('.tree-group').get(0).id;

                        $(this).next('.rows').slideToggle();
                        var icon = $(this).find('.dsTreeHeaderIcon');
                        //var imgPath = icon.attr('src');
                        //if (_this.m_groupIconOpen == imgPath) {
                        if (icon.hasClass('open')) {
                            //icon.attr('src', _this.m_groupIconClose);
                            icon.removeClass('open');
                            curTarHead.find('.dsGroupName').removeClass('selected');
                            curTarHead.find('.dsTreeBtnFormula').css('display', 'none');
                            curTarHead.find('.dsTreeBtnAdd').css('display', 'none');
                            curTarHead.find('.dsTreeBtnDel').css('display', 'none');
                            curTarHead.find('.dsEditGroupName').css('display', 'none');
                        }
                        else {
                            //icon.attr('src', _this.m_groupIconOpen);
                            icon.addClass('open');
                            curTarHead.find('.dsGroupName').addClass('selected');
                            curTarHead.find('.dsTreeBtnFormula').css('display', 'inline-block');
                            curTarHead.find('.dsTreeBtnAdd').css('display', 'inline');
                            curTarHead.find('.dsTreeBtnDel').css('display', 'inline');
                            curTarHead.find('.dsEditGroupName').css('display', 'inline');
                        }
                    }
                );
                $ul.prepend($liHd);

                var divLiRow = $('<li class="rows"></li>');
                if (groupName == _this.m_unassigned) {
                    divLiRow.css('display', 'block');
                }
                else {
                    divLiRow.css('display', 'none');
                }
                $ul.append(divLiRow);

                // insert points
                var itemId, iconColor, itemName, itemPtName;
                var bHasSearched = false;
                for (var j= 0, len2=pointList.length; j<len2; j++) {
                    if (groupId == pointList[j].groupId) {
                        itemId = pointList[j].itemId;
                        iconColor = pointList[j].iconColor;
                        itemName = pointList[j].customName;
                        itemPtName = pointList[j].ptName;
                        if ('' != searchPointName) {
                            var custNameLower = itemName.toLowerCase();
                            var ptNameLower = itemPtName.toLowerCase();
                            if (-1 == custNameLower.indexOf(searchPointName) && -1 == ptNameLower.indexOf(searchPointName)) {
                                continue;
                            }
                            else {
                                bHasSearched = true;
                            }
                        }

                        var div = $('<div class="treeRow ui-draggable" id="' + itemId + '" draggable="true" dropable="true"> ');
                        var icon = $('<div class="dsMark" style="margin-top: -1px"></div>');
                        icon.css('background-color', iconColor);
                        div.append(icon);

                        var divShowName = $('<span class="showName">' + itemName + '</span>');
                        EventAdapter.on($(divShowName), 'click',
                            function (e) {
                                var divCurShowName = $(e.currentTarget);
                                var oldCustName = divCurShowName.text();
                                var selItemId = divCurShowName.closest('.treeRow').attr('id');
                                var input = $('<input type="text" value="' + oldCustName + '" style="width:300px;position: absolute;top: 4px;background-color:#465b85">');
                                input.blur(function (e) {
                                    var $tar = $(e.currentTarget);
                                    var newCustName = $tar.val();
                                    if ('' == newCustName) {
                                        $tar.select();
                                        alert(I18n.resource.dataSource.CUSTOM_NOT_NULL);
                                        return;
                                    }
                                    if (oldCustName != newCustName) {
                                        var item, type, prjId, ptName, ptDesc, groupId, postData;
                                        for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                                            item = _this.m_allPointList[i];
                                            if (selItemId == item.itemId) {
                                                type = item.itemType;
                                                prjId = item.prjId;
                                                ptName = item.ptName;
                                                ptDesc = item.ptDesc;
                                                groupId = item.groupId;
                                                break;
                                            }
                                        }
                                        
                                        postData = {
                                            itemList: []
                                        };

                                        var eachItem = {
                                            id: selItemId,
                                            type: type,
                                            projId: prjId,
                                            alias: newCustName,
                                            note: ptDesc,
                                            value: ptName,
                                            groupId: groupId
                                        }
                                        postData.itemList.push(eachItem);

                                        WebAPI.post('/analysis/datasource/saveMulti', postData).done(function (data) {
                                            if (data.id != '') {
                                                _this.m_dataSourceId = data.id;
                                            }

                                            var list = data.itemIdList;
                                            var dstId, dstCustomName;
                                            for (var i = 0, len = list.length; i < len; i++) {
                                                dstId = list[i].id;
                                                dstCustomName = list[i].alias;

                                                for (var j = 0, len2 = _this.m_allPointList.length; j < len2; j++) {
                                                    if (dstId == _this.m_allPointList[j].itemId) {
                                                        _this.m_allPointList[j].customName = dstCustomName;
                                                        break;
                                                    }
                                                }

                                                divCurShowName.text(dstCustomName);
                                                _this.setToolTipsCustomName(divCurShowName.closest('.treeRow'), dstCustomName);
                                            }
                                            _this.calUpdateDataSources();
                                        });
                                    }
                                    input.remove();
                                    divCurShowName.css('display', 'inline');
                                });
                                input.keyup(function (e) {
                                    if (13 == e.keyCode) {
                                        input.blur();
                                    }
                                    _this.stopBubble(e);
                                });
                                divCurShowName.after(input);
                                divCurShowName.css('display', 'none');
                                input.select();
                            }
                        );
                        div.append(divShowName);

                        var btnRemove = $('<span class="glyphicon glyphicon-remove-sign panel-heading-btn grow dsTreeBtnRemove" aria-hidden="true"></span>');
                        EventAdapter.on($(btnRemove), 'click',
                            function (e) {
                                var promise = $.Deferred();
                                var div = $(e.currentTarget).closest('.treeRow');
                                var dataSrcItemId = div.attr('id');
                                var dataSrcId = _this.m_dataSourceId;

                                if(typeof _this.m_parent.doSync === 'function') {
                                    _this.m_parent.doSync().done(function () {
                                        promise.resolve();
                                    });
                                } else {
                                    promise.resolve();
                                }

                                Spinner.spin(div[0]);
                                // promise start
                                promise.done(function () {
                                    WebAPI.get('/analysis/checkDatasourceBeforeDelete/' + dataSrcItemId + '/' + AppConfig.userId)
                                        .done(function (chkData) {
                                        var nWorkSpLen = chkData.workspaceInfo.length;
                                        var nDashBoLen = chkData.dashboardInfo.length;
                                        if (nWorkSpLen > 0 || nDashBoLen > 0) {
                                            var show = _this.m_lang.REMOVE_CONFIRM_TIPS;
                                            var name;
                                            for (var i = 0; i < nWorkSpLen; i++) {
                                                if (0 == i) {
                                                    show += 'workspace: ';
                                                }
                                                name = chkData.workspaceInfo[i].modalName;
                                                name = Boolean(name) ? name : 'Untitled';
                                                show += name + ',';
                                            }
                                            for (var j = 0; j < nDashBoLen; j++) {
                                                if (0 == j) {
                                                    show += 'dashboard: ';
                                                }
                                                show += chkData.dashboardInfo[j].modalType + ',';
                                            }
                                            show += _this.m_lang.REMOVE_CONFIRM;

                                            WebAPI.get('/static/views/observer/widgets/modalFrame.html').done(function (result) {
                                                var res = $(result);
                                                res.find('#modalFrmBody').text(show);
                                                var btnSure = res.find('#btnSure');
                                                btnSure.click(function(e) {
                                                    if (undefined != _this.m_cfgPanel) {
                                                        _this.m_cfgPanel.close();
                                                        _this.m_parent.showAnlsPane();
                                                    }

                                                    // remove item animation
                                                    div.css('position', 'relative');
                                                    div.css('animation', 'dsRemove 3s infinite');
                                                    div.css('-moz-animation', 'dsRemove 3s infinite');// Firefox
                                                    div.css('-webkit-animation', 'dsRemove 3s infinite');// Safari & Chrome
                                                    div.css('-o-animation', 'dsRemove 3s infinite');// Opera

                                                    WebAPI.get('/analysis/datasource/removeSingle/' + dataSrcItemId).done(function (data) {
                                                        if (Boolean(data.success)) {
                                                            var len = _this.m_allPointList.length;
                                                            for (var i = 0; i < len; i++) {
                                                                if (dataSrcItemId == _this.m_allPointList[i].itemId) {
                                                                    _this.m_allPointList.splice(i, 1);
                                                                    break;
                                                                }
                                                            }
                                                            _this.calUpdateDataSources();

                                                            div.tooltip('destroy');
                                                            div.remove();

                                                            // delete workspace
                                                            var arr = chkData.workspaceInfo;
                                                            for (var i= 0,len=arr.length; i<len; i++) {
                                                                var divWoSp = $('.divPage');
                                                                for (var j= 0,len2=divWoSp.length; j<len2; j++) {
                                                                    if (arr[i].modalName == divWoSp.eq(j).find('.modalNameSp').text()) {
                                                                        divWoSp.eq(j).remove();
                                                                    }
                                                                }
                                                            }

                                                            Beop.cache.ds.remove(dataSrcItemId);
                                                        }
                                                    }).fail(function (e) {
                                                    });
                                                });
                                                res.modal('show');
                                            }).always(function (e) {});
                                        }
                                        else {
                                            // another remove logic
                                            // remove item animation
                                            div.css('position', 'relative');
                                            div.css('animation', 'dsRemove 3s infinite');
                                            div.css('-moz-animation', 'dsRemove 3s infinite');// Firefox
                                            div.css('-webkit-animation', 'dsRemove 3s infinite');// Safari & Chrome
                                            div.css('-o-animation', 'dsRemove 3s infinite');// Opera

                                            WebAPI.get('/analysis/datasource/removeSingle/' + dataSrcItemId).done(function (data) {
                                                if (Boolean(data.success)) {
                                                    var len = _this.m_allPointList.length;
                                                    for (var i = 0; i < len; i++) {
                                                        if (dataSrcItemId == _this.m_allPointList[i].itemId) {
                                                            _this.m_allPointList.splice(i, 1);
                                                            break;
                                                        }
                                                    }
                                                    _this.calUpdateDataSources();

                                                    div.tooltip('destroy');
                                                    div.remove();

                                                    // delete workspace
                                                    var arr = chkData.workspaceInfo;
                                                    for (var i= 0,len=arr.length; i<len; i++) {
                                                        var divWoSp = $('.divPage');
                                                        for (var j= 0,len2=divWoSp.length; j<len2; j++) {
                                                            if (arr[i].modalName == divWoSp.eq(j).find('.modalNameSp').text()) {
                                                                divWoSp.eq(j).remove();
                                                            }
                                                        }
                                                    }

                                                    Beop.cache.ds.remove(dataSrcItemId);
                                                }
                                            }).fail(function (e) {
                                            });
                                        }
                                    }).fail(function (e) {
                                    }).always(function (e) {
                                        Spinner.stop();
                                    });
                                });
                                // promise end
                            }
                        );
                        div.append(btnRemove);

                        var bIsPoint = (0 == pointList[j].itemType) ? true : false;
                        if (bIsPoint) {
                            var btnCfg = $('<img src="/static/images/dataSource/item_edit.png" alt="png" class="dsTreeBtnCfg">');
                            EventAdapter.on($(btnCfg), 'click',
                                function (e) {
                                    // clear data filter page if exist
                                    var $pageFilter = $('#pageDataFilter');
                                    if ($pageFilter.length > 0) {
                                        $pageFilter.find('#btnCancel').click();
                                    }

                                    if (undefined != _this.m_cfgPanel) {
                                        _this.m_cfgPanel.close();
                                    }
                                    var curTar = $(e.currentTarget);
                                    _this.m_selectItemId = curTar.closest('.treeRow').get(0).id;
                                    _this.m_selectGroupId = curTar.closest('.tree-group').get(0).id;
                                    var customName, ptDesc, ptName, item, prjId;
                                    for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                                        item = _this.m_allPointList[i];
                                        if (itemId === item.itemId) {
                                            customName = item.customName;
                                            ptName = item.ptName;
                                            ptDesc = item.ptDesc;
                                            prjId = item.prjId;
                                            break;
                                        }
                                    }
                                    WebAPI.get('/static/views/observer/dataSourceAdd.html').done(function (result) {
                                        _this.m_cfgPanel = new DataSourceConfigure(_this, 0, false, customName, ptName, ptDesc, prjId);
                                        _this.m_cfgPanel.show();
                                    }).fail(function (result) {
                                    }).always(function (e) {
                                    });
                                }
                            );

                            btnCfg.mouseenter(function (e) {
                                btnCfg.attr('src', '/static/images/dataSource/item_edit_hover.png');
                                btnCfg.css('width', '18px');
                                btnCfg.css('height', '18px');
                            }).error(function (e) {
                            });
                            btnCfg.mouseleave(function (e) {
                                btnCfg.attr('src', '/static/images/dataSource/item_edit.png');
                                btnCfg.css('width', '16px');
                                btnCfg.css('height', '16px');
                            }).error(function (e) {
                            });

                            div.append(btnCfg);
                        }else{
                            var btnCfg = $('<img src="/static/images/dataSource/item_edit.png" alt="png" class="dsTreeBtnCfg">');
                            EventAdapter.on($(btnCfg), 'click',
                                function (e){
                                    // clear data filter page if exist
                                    var $pageFilter = $('#pageDataFilter');
                                    if ($pageFilter.length > 0) {
                                        $pageFilter.find('#btnCancel').click();
                                    }

                                    if (undefined != _this.m_cfgPanel) {
                                        _this.m_cfgPanel.close();
                                    }
                                    var curTar = $(e.currentTarget);
                                    _this.m_selectItemId = curTar.closest('.treeRow').get(0).id;
                                    _this.m_selectGroupId = curTar.closest('.tree-group').get(0).id;
                                    var customName, ptDesc, ptName, item, prjId;
                                    for (var i = 0, len = _this.m_allPointList.length; i < len; i++) {
                                        item = _this.m_allPointList[i];
                                        if (itemId === item.itemId) {
                                            customName = item.customName;
                                            ptName = item.ptName;
                                            ptDesc = item.ptDesc;
                                            prjId = item.prjId;
                                            break;
                                        }
                                    }
                                    WebAPI.get('/static/views/observer/dataSourceAdd.html').done(function (result) {
                                        _this.m_cfgPanel = new DataSourceConfigure(_this, 1, false, customName, ptName, ptDesc, prjId);
                                        _this.m_cfgPanel.show();
                                    }).fail(function (result) {
                                    }).always(function (e) {
                                    });
                                }
                            );

                            btnCfg.mouseenter(function (e) {
                                btnCfg.attr('src', '/static/images/dataSource/item_edit_hover.png');
                                btnCfg.css('width', '18px');
                                btnCfg.css('height', '18px');
                            }).error(function (e) {
                            });
                            btnCfg.mouseleave(function (e) {
                                btnCfg.attr('src', '/static/images/dataSource/item_edit.png');
                                btnCfg.css('width', '16px');
                                btnCfg.css('height', '16px');
                            }).error(function (e) {
                            });
                            div.append(btnCfg);
                        }

                        EventAdapter.on($(div), 'click',
                            function (e) {
                                var divContain = $('#dataSrcPanel');
                                divContain.find('.dsTreeBtnCfg').css('display', 'none');
                                divContain.find('.dsTreeBtnRemove').css('display', 'none');

                                var curTarItem = $(e.currentTarget);
                                curTarItem.find('.dsTreeBtnCfg').css('display', 'inline');
                                curTarItem.find('.dsTreeBtnRemove').css('display', 'inline');
                                _this.m_selectGroupId = curTarItem.closest('.tree-group').get(0).id;
                            }
                        );

                        $ul.find('.rows').append(div);

                        // init tips
                        if (bIsPoint) {
                            var prjName = _this.getProjectNameFromId(pointList[j].prjId, _this.m_langFlag);
                            _this.initToolTips(div, pointList[j].customName, prjName, pointList[j].ptName, pointList[j].ptDesc);
                        }
                        else {
                            var showName = _this.getShowNameFromFormula(pointList[j].ptName);
                            _this.initFormulaToolTips(div, pointList[j].customName, showName, pointList[j].ptDesc);
                        }
                    }
                }

                if ('' == searchPointName) {
                    divContain.append($ul);
                }
                else {
                    if (bHasSearched) {
                        divContain.append($ul);
                    }
                }
            }
        },

        getDSItemById: function (datasourceItemId) {
            //if (undefined != this.m_parent.store.group) {
            //    var itemGroup, lenItem;
            //    for (var i = 0, len = this.m_parent.store.group.length; i < len; i++) {
            //        itemGroup = this.m_parent.store.group[i];
            //        lenItem = itemGroup.datasourceList.length;
            //        for (var j = 0; j < lenItem; j++) {
            //            if (datasourceItemId == itemGroup.datasourceList[j].id) {
            //                return itemGroup.datasourceList[j];
            //            }
            //        }
            //    }
            //}

            var postData = [];
            var bIsArray = Object.prototype.toString.call(datasourceItemId) === '[object Array]';

            if (!bIsArray) {    // single
                if (this.m_parent.store.dsInfoList) {
                    var itemInfo;
                    for (var i = 0, len = this.m_parent.store.dsInfoList.length; i < len; i++) {
                        itemInfo = this.m_parent.store.dsInfoList[i];
                        if (datasourceItemId == itemInfo.id) {
                            return itemInfo;
                        }
                    }
                }
                for (var i = 0, len = this.m_arrCloudTableInfo.length; i < len; i++) {
                    var item = this.m_arrCloudTableInfo[i];
                    if (datasourceItemId == item._id) {
                        var remark;
                        if (0 == this.m_langFlag) {
                            remark = item.params.remark;
                        }
                        else {
                            remark = item.params.remark_en;
                        }
                        return {id:item._id, groupId:'', alias:item.alias, note:remark, projId:item.projId, type:0, value:item.value}
                    }
                }
            }
            else {  // array
                var ret = [];
                if (this.m_parent.store.dsInfoList) {
                    var itemInfo;
                    for (var j = 0; j < datasourceItemId.length; j++) {
                        for (var i = 0, len = this.m_parent.store.dsInfoList.length; i < len; i++) {
                            itemInfo = this.m_parent.store.dsInfoList[i];
                            if (datasourceItemId[j] == itemInfo.id) {
                                ret.push(itemInfo);
                                break;
                            }
                        }
                    }
                    if (ret.length > 0) {
                        return ret;
                    }
                }
                for (var j = 0; j < datasourceItemId.length; j++) {
                    for (var i = 0, len = this.m_arrCloudTableInfo.length; i < len; i++) {
                        var item = this.m_arrCloudTableInfo[i];
                        if (datasourceItemId[j] == item._id) {
                            var remark;
                            if (0 == this.m_langFlag) {
                                remark = item.params.remark;
                            }
                            else {
                                remark = item.params.remark_en;
                            }
                            ret.push({
                                id: item._id,
                                groupId: '',
                                alias: item.alias,
                                note: remark,
                                projId: item.projId,
                                type: 0,
                                value: item.value
                            });
                        }
                    }
                }
                if (ret.length > 0) {
                    return ret;
                }
            }

            if (!bIsArray) {
                postData.push(datasourceItemId);
            }
            else {
                postData = datasourceItemId;
            }
            var dsRet = $.ajax({
                type:'POST',
                url: '/analysis/datasource/getDsItemsById',
                data: JSON.stringify(postData),
                contentType: 'application/json',
                async: false}).responseText;
            if (dsRet) {
                var temp = JSON.parse(dsRet);
                var ret;
                if (!bIsArray) {
                    ret = temp[0];
                    if (!ret) {
                        ret = {
                            alias : undefined,
                            groupId : undefined,
                            id : undefined,
                            note : undefined,
                            projId : undefined,
                            type : undefined,
                            value : undefined
                        }
                    }
                }
                else {
                    ret = temp;
                }
                return ret;
            }
            return {};
        },

        getDSItemData: function (target, arrDSItemIds) {
            var _this = this.m_parent;

            var tmStart = _this.curModal.startTime.toDate();
            var tmEnd = _this.curModal.endTime.toDate();
            var tmFmt = _this.curModal.format;

            var key;
            // 新增"回归"和"预测"点的判定
            var preloadIds = [];
            var row = null, arrId;
            // 在这里拷贝一份，这点很重要
            var ids = arrDSItemIds.concat();

            var postData = {
                //dataSourceId: AppConfig.datasource.getId(),
                dsItemIds: ids,
                timeStart: tmStart.format('yyyy-MM-dd HH:mm:ss'),
                timeEnd: tmEnd.format('yyyy-MM-dd HH:mm:ss'),
                timeFormat: tmFmt
            };

            var promise = $.Deferred();

            // find in cache
            // notice that the ids may be changed in this call
            Beop.cache.ds.getBatch(ids, tmFmt, tmStart, tmEnd).done(function (rs) {
                promise.resolve(rs);
            }).fail(function (e) {
                console.warn(e);
                promise.reject();
            });

            promise.always(function (rs) {
                var idsNotFound, cacheData;
                if(rs) {
                    idsNotFound = rs.idsNotFound;
                    cacheData = rs.data;

                    if (idsNotFound.length > 0) {
                        postData.dsItemIds = idsNotFound;
                    } else {
                        target.spinnerStop();
                        target.renderModal(cacheData);
                        return;
                    }
                }

                WebAPI.post('/analysis/startWorkspaceDataGenHistogram', postData).done(function (data) {
                    if(data.error && data.error.length > 0) {
                        target.errAlert(data.error);
                        target.spinnerStop();
                        return;
                    }
                    Beop.cache.ds.set( data, tmFmt, tmStart, tmEnd ).done(function () {
                        // combine with cacheData
                        if( cacheData !== null ) {
                            data = {
                                list: data.list.concat(cacheData.list),
                                timeShaft: data.timeShaft
                            };
                        }
                        
                    }).fail(function (e) {
                        console.warn(e);
                    }).always(function () {
                        target.renderModal(data);
                    });
                    
                }).error(function (e) {
                    _this.paneCenter.spinnerStop();
                    _this.alertNoData();
                });
            });

        },

        getDSItemDataMulti: function (target, arrDSItemIds) {
            var _this = this.m_parent;
            _this.curModal.arrComparePeriodLabel = [];

            var tmStart = _this.curModal.startTime;
            tmStart = tmStart.length <= 10 ? tmStart + ' 00:00:00': tmStart;
            var tmEnd = _this.curModal.endTime;
            tmEnd = tmEnd.length <= 10 ? tmEnd + ' 00:00:00': tmEnd;
            var tmFmt = _this.curModal.format;
            var comparePeriod = _this.curModal.comparePeriod;

            var period1, period2, time;
            var startDate = new Date(tmStart);
            var endDate = new Date(tmEnd);
            var compareDateI18n = I18n.resource.analysis.historyCompare;
            if(comparePeriod == 'hour'){
                time = 3600000;//60 * 60 * 1000;
                period1 = new Date(startDate.getTime() + time).format('yyyy-MM-dd HH:mm:ss');
                period2 = new Date(endDate.getTime() + time).format('yyyy-MM-dd HH:mm:ss');

                _this.curModal.arrComparePeriodLabel.push(startDate.getFullYear()+'-'+(startDate.getMonth()+1) + '-'+ startDate.getDate()+' '+startDate.getHours()+':00');
                _this.curModal.arrComparePeriodLabel.push(endDate.getFullYear()+'-'+(endDate.getMonth()+1) + '-'+ endDate.getDate()+' '+endDate.getHours()+':00');
            }
            if(comparePeriod == 'day'){
                time = 86400000;//24 * 60 * 60 * 1000;
                period1 = new Date(startDate.getTime() + time).format('yyyy-MM-dd HH:mm:ss');
                period2 = new Date(endDate.getTime() + time).format('yyyy-MM-dd HH:mm:ss');
                _this.curModal.arrComparePeriodLabel.push(startDate.getFullYear()+'-'+(startDate.getMonth()+1) + '-'+ startDate.getDate());
                _this.curModal.arrComparePeriodLabel.push(endDate.getFullYear()+'-'+(endDate.getMonth()+1) + '-'+ endDate.getDate());
            }
            if(comparePeriod == 'week'){
                time = 604800000;//7 * 24 * 60 * 60 * 1000;
                period1 = new Date(startDate.getTime() + time).format('yyyy-MM-dd HH:mm:ss');
                period2 = new Date(endDate.getTime() + time).format('yyyy-MM-dd HH:mm:ss');

                _this.curModal.arrComparePeriodLabel.push(compareDateI18n.YEAR_WEEK.replace('<%year%>',startDate.getFullYear()).replace('<%week%>',getWeekNumber(tmStart)));
                _this.curModal.arrComparePeriodLabel.push(compareDateI18n.YEAR_WEEK.replace('<%year%>',endDate.getFullYear()).replace('<%week%>',getWeekNumber(tmEnd)));
            }
            if(comparePeriod == 'month'){
                period1 = getCurrentMonthLastDay(tmStart);
                period2 = getCurrentMonthLastDay(tmEnd);
                function getCurrentMonthLastDay(date){
                    var current=date.toDate();
                    var currentMonth = current.getMonth();
                    var nextMonth =++currentMonth;
                    var nextMonthDayOne =new Date(current.getFullYear(),nextMonth,1);
                    return new Date(nextMonthDayOne.getTime());
                }
                _this.curModal.arrComparePeriodLabel.push(startDate.getFullYear()+'-'+(startDate.getMonth()+1));
                _this.curModal.arrComparePeriodLabel.push(endDate.getFullYear()+'-'+(endDate.getMonth()+1));
            }

            var postData = [{
                dsItemIds: arrDSItemIds,
                timeStart: tmStart.format('yyyy-MM-dd HH:mm:ss'),
                timeEnd: period1.format('yyyy-MM-dd HH:mm:ss'),
                timeFormat: tmFmt
            },{
                dsItemIds: arrDSItemIds,
                timeStart: tmEnd.format('yyyy-MM-dd HH:mm:ss'),
                timeEnd: period2.format('yyyy-MM-dd HH:mm:ss'),
                timeFormat: tmFmt
            }];

            //var ItemKey = 'anal_' + tmFmt + '_' + arrDSItemIds[0];

            WebAPI.post('/analysis/startWorkspaceDataGenHistogramMulti', postData).done(function (data) {
                if(data.error && data.error.length > 0) {
                    target.errAlert(data.error);
                    target.spinnerStop();
                    return;
                }
                //sessionStorage.setItem(ItemKey, result);// 此 sessionStorage 没有再用到了
                target.renderModal(data);
            }).error(function (e) {
                _this.paneCenter.spinnerStop();
                _this.alertNoData();
            });


            /**
             * 判断年份是否为润年
             */
            function isLeapYear(year) {
                return (year % 400 == 0) || (year % 4 == 0 && year % 100 != 0);
            }
            /**
             * 获取某一年份的某一月份的天数
             */
            function getMonthDays(year, month) {
                return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month] || (isLeapYear(year) ? 29 : 28);
            }
            /**
             * 获取某年的某天是第几周
             */
            function getWeekNumber(date) {
                var now = date.toDate(),
                    year = now.getFullYear(),
                    month = now.getMonth(),
                    days = now.getDate();
                //那一天是那一年中的第多少天
                for (var i = 0; i < month; i++) {
                    days += getMonthDays(year, i);
                }

                //那一年第一天是星期几
                var yearFirstDay = new Date(year, 0, 1).getDay() || 7;

                var week = null;
                if (yearFirstDay == 1) {
                    week = Math.ceil(days / yearFirstDay);
                } else {
                    days -= (7 - yearFirstDay + 1);
                    week = Math.ceil(days / 7) + 1;
                }

                return week;
            }
        },

        getShowNameFromFormula: function (formula) {
            var _this = this;
            var inputStr = formula;
            var nStart = inputStr.indexOf('<%');
            var nEnd = inputStr.indexOf('%>');
            if (-1 == nStart || -1 == nEnd) {
                return inputStr;
            }

            var id = inputStr.substring(nStart + 2, nEnd);
            if ('' == id) {
                return _this.getShowNameFromFormula(inputStr);
            }

            var retVal = _this.getDSItemById(id);
            if (null == retVal) {
                return _this.getShowNameFromFormula(inputStr);
            }

            inputStr = inputStr.replace('<%' + id + '%>', retVal.value);
            return _this.getShowNameFromFormula(inputStr);

            //var showName = formula;
            //var arr = showName.split('<%');
            //for (var k = 0, len2 = arr.length; k < len2; k++) {
            //    var id = arr[k].split('%>')[0];
            //    if ('' == id) {
            //        continue;
            //    }
            //    var retVal = _this.getDSItemById(id);
            //    if (null == retVal) {
            //        continue;
            //    }
            //    showName = showName.replace(id, retVal.value);
            //}
            //showName = showName.replace(/<%/g, '');
            //showName = showName.replace(/%>/g, '');
            //return showName;
        },

        addNewGroup: function () {
            var groupName = $('#inputAddGroup').val();
            if ('' == groupName) {
                return;
            }

            var _this = this;
            var postData = {
                'groupId': '',
                'name': groupName,
                'parent': '',
                'userId': AppConfig.userId
            }
            WebAPI.post('/datasource/saveDataSourceGroup', postData).done(function (data) {
                if ('successful' != data.error) {
                    return;
                }
                var groupId = data.groupId;
                if (groupId) {
                    if (_this.treeObj) {
                        var nodeUnassigned = _this.treeObj.getNodesByParam('name', 'unassigned', null);
                        var index = -1;
                        if (nodeUnassigned.length > 0) {
                            index = _this.treeObj.getNodeIndex(nodeUnassigned[0]);
                        }
                        _this.treeObj.addNodes(null, index, {id:data.groupId, pId:data.parentId, name:data.groupName, isParent:true});
                    }
                }
                $('#inputAddGroup').val('');
                $('#inputAddGroup').blur();

                //var groupId = data.groupId;
                //if (groupId) {
                //    var bIsFind = false;
                //    for (var i = 0, len = _this.m_allGroupList.length; i < len; i++) {
                //        if (groupId === _this.m_allGroupList[i].id) {
                //            bIsFind = true;
                //            break;
                //        }
                //    }
                //    if (!bIsFind) {
                //        _this.m_allGroupList.push({'id': groupId, 'name': data.groupName, 'isDefault':false});
                //        var ulCnt = $('#dataSrcPanel').find('ul').length;
                //        if (ulCnt > 1) {
                //            var defaultGroup = $('#dataSrcPanel ul[isDefault=true]').eq(0);
                //            if (defaultGroup && defaultGroup.length > 0) {
                //                _this.insertTreeGroup(data.groupId, data.groupName, 1, defaultGroup.prev());
                //            }
                //            else {
                //                _this.insertTreeGroup(data.groupId, data.groupName, 0, null);
                //            }
                //        }
                //        else {
                //            var defaultGroup = $('#dataSrcPanel ul[isDefault=true]').eq(0);
                //            if (defaultGroup && defaultGroup.length > 0) {
                //                _this.insertTreeGroup(data.groupId, data.groupName, 2, defaultGroup.prev());
                //            }
                //            else {
                //                _this.insertTreeGroup(data.groupId, data.groupName, 0, null);
                //            }
                //        }
                //        $('#' + data.groupId).find('.dsTreeHeader').click();
                //    }
                //    $('#inputAddGroup').val('');
                //}
            }).fail(function (result) {
            }).always(function (e) {
            });
        }
    }

    return DataSource;
})();
/**
 * Created by win7 on 2016/2/6.
 */
var HierFilter = (function(){
    var _this;
    function HierFilter($ctn,theme,parent){
        _this = this;
        _this.$ctn = $ctn;
        _this.theme = theme;
        _this.opt = undefined;
        _this.parent = parent;
        _this.defaultOpt = {
                title:{
                    show:false
                },
                search:{
                    show:true
                },
                class: {
                    show:true,
                    projects: {
                        show: true,
                        class: 'all',
                        showAll: true,
                        showNone: true,
                        add:true,
                        delete:true
                    },
                    groups: {
                        show: true,
                        class: 'all',
                        showAll: true,
                        showNone: true,
                        add:true,
                        delete:true
                    },
                    things: {
                        show: true,
                        class: 'all',
                        showAll: true,
                        showNone: true,
                        add:true,
                        delete:true
                    }
                },
                tree:{
                    show:true,
                    event:{},
                    drag:{
                        enable:true
                    },
                    tool:{
                        add:{

                        },
                        edit:{

                        },
                        del:{

                        }
                    }
                }
            };
        _this.dictClass = {};
        _this.store = undefined;
        _this.initDeferred = $.Deferred();
        _this.$paneClass = undefined;
        _this.$paneSearch = undefined;
        _this.$paneTree = undefined;
        _this.$paneAdd = undefined;

        _this.tree = undefined;
        _this.setDefault = false;
        _this.prevProjId = undefined;
        _this.isSearch = false;
    }
    HierFilter.prototype = {
        init:function(ctn,theme){
            _this.$ctn = ctn?ctn:_this.$ctn;
            _this.theme = theme?theme:_this.theme;
            WebAPI.get('/static/scripts/iot/hierFilter.html').done(function(resultHTML){
                _this.$ctn.append(resultHTML);
                _this.initAddPane();
                _this.initSearch();
                _this.initDeferred.resolve();
            });
        },
        setOption:function(opt){
            _this.initDeferred.done(function() {
                _this.opt = $.extend(true, {}, _this.defaultOpt, opt);
                var postData = {
                    parent: []
                };
                WebAPI.get('/iot/getClassFamily/group/cn').done(function (result) {
                    _this.dictClass['groups'] = result;
                });
                WebAPI.get('/iot/getClassFamily/thing/cn').done(function (result) {
                    _this.dictClass['things'] = result;
                });
                WebAPI.get('/iot/getClassFamily/project/cn').done(function (result) {
                    _this.dictClass['projects'] = result;
                });
                WebAPI.post('/iot/search', postData).done(function (resultDate) {
                    _this.isSearch = false;
                    _this.store = {
                        groups: resultDate.groups,
                        projects: resultDate.projects,
                        things: resultDate.things
                    };
                    for (var i = 0; i < _this.store.groups.length; i++) {
                        _this.store.groups[i].isParents = true;
                        //_this.store.groups[i].open = true;
                        _this.store.groups[i].baseType = 'groups';
                    }
                    for (var i = 0; i < _this.store.projects.length; i++) {
                        _this.store.projects[i].isParents = true;
                        //_this.store.projects[i].open = true;
                        _this.store.projects[i].baseType = 'projects';
                    }
                    for (var i = 0; i < _this.store.things.length; i++) {
                        _this.store.things[i].baseType = 'things';
                    }
                    _this.initClassPane();
                    //_this.initClassDetail();
                    _this.initTreePane(_this.store);
                    var node = _this.tree.getNodes();
                    if (node.length == 0)return;
                    node = node[0];
                    _this.tree.selectNode(node);
                    _this.setDefault = true;
                    _this.tree.setting.callback.onClick({target:document.getElementById(node.tId)}, node['_id'], node);
                    //var treeNode = {
                    //    _id: "ddddddddddddf32fbc300001",
                    //    _idProj: "aaaaaaaaabaaf32fbc300001",
                    //    baseType: "groups",
                    //    check_Child_State: 0,
                    //    check_Focus: false,
                    //    checked: false,
                    //    checkedOld: false,
                    //    chkDisabled: false,
                    //    editNameFlag: false,
                    //    halfCheck: false,
                    //    isAjaxing: false,
                    //    isFirstNode: true,
                    //    isHover: true,
                    //    isLastNode: false,
                    //    isParent: true,
                    //    level: 1,
                    //    name: "冷冻水系统",
                    //    nocheck: false,
                    //    open: true,
                    //    pId: "aaaaaaaaabaaf32fbc300001",
                    //    parentTId: "paneIotData_4",
                    //    prefix: "",
                    //    tId: "paneIotData_5",
                    //    type: "Group",
                    //    weight: 0,
                    //    zAsync: true
                    //};
                    //Spinner.spin($('#paneAssetList')[0]);
                    //WebAPI.get('/asset/getThingInfoList/' + treeNode['_id']).done(function (result) {
                    //    WebAPI.post('/iot/search',{parent:[{id:treeNode['_id'],type:treeNode['baseType']}]}).done(function(subRes){
                    //        //拼接数据
                    //        treeNode.children = [];
                    //        for (var ele in subRes){
                    //            if (ele == 'class')continue;
                    //            for (var i = 0 ; i < subRes[ele].length; ++i){
                    //                treeNode.children.push(subRes[ele][i])
                    //            }
                    //        }
                    //        if (result.data && result.data.length > 0 && treeNode.children && treeNode.children.length > 0) {
                    //            result.data.forEach(function (data) {
                    //                treeNode.children.forEach(function (node) {
                    //                    if (data._id == node._id) {
                    //                        data.name = node.name;
                    //                        data.type = node.type;
                    //                    }
                    //                });
                    //            });
                    //        }
                    //
                    //        //渲染到页面
                    //        _this.parent.listPanel.render(result.data, treeNode);
                    //        //默认选中第一个
                    //        $('#assetTable tr:eq(0)').click();
                    //    });
                    //});
                });
            });
        },
        refresh:function(){

        },
        dispose:function(){

        },
        close:function(){

        },
        initClassPane:function(){
            if(!(_this.opt.class && _this.opt.class.show ))return;
            _this.$paneClass = $('#paneIotType');
            _this.$paneClass.html('');
            setClassSel('projects');
            setClassSel('groups');
            setClassSel('things');
            function setClassSel(type){
                if(_this.opt.class && _this.opt.class[type] && _this.opt.class[type].show){
                    var strType = type.slice(0,type.length - 1);
                    strType = strType[0].toLocaleUpperCase() + strType.slice(1);
                    var $divSelect = $('<div class="divSelect">');
                    var selOpt = [];
                    if (_this.opt.class[type].showAll){
                        selOpt.push({
                            value:'all',
                            name:'全部'
                        })
                    }
                    if (_this.opt.class[type].showNone){
                        selOpt.push({
                            value:'none',
                            name:'隐藏'
                        })
                    }
                    for (var cls in  _this.dictClass[type]){
                        if (_this.dictClass[type][cls].parent == 'BaseIOT')continue;
                        selOpt.push({
                            value:cls,
                            name:_this.dictClass[type][cls].name
                        })
                    }
                    var $selector = _this.setSel(selOpt).addClass('selClass');
                    if ($selector.children('option').length == 0)return;
                    $selector.off('change').on('change',function(e){
                        var opt = {
                            'type':type,
                            'val': $(e.target).val()
                        };
                        _this.initTreeData(opt);
                        _this.initAttrPane(opt)
                    });
                    $divSelect.append($selector);
                    _this.$paneClass.append($divSelect);
                }
            }
        },
        setSel:function(selOpt){
            var $selector = $('<select>');
            var $option;
            for (var i = 0 ; i< selOpt.length;i++){
                $option = $('<option>').attr('value',selOpt[i].value).text(selOpt[i].name);
                $selector.append($option);
            }
            return $selector
        },
        initAttrPane:function(opt){
            var $paneClass,cls,type,clsStore,$divAttr,attrStore,$selAttr,parentStore;
            cls = opt.val;
            type = opt.type;
            clsStore = _this.searchClass(cls);
            $paneClass = $('#paneIot-' + type).html('').removeClass('on');
            if(!clsStore)return;
            $paneClass.append('<div class="className">' + clsStore.name + '</div>');
            parentStore = _this.searchClass(clsStore.parent);
            if(parentStore && parentStore.name) {
                $paneClass.append('<div class="classParentName">' + parentStore.name + '</div>');
            }
            $divAttr = $('<div class="divAttr">');
            for (var attr in clsStore.attrs) {
                attrStore = clsStore.attrs[attr];
                setAttr(attrStore, $divAttr);
                $paneClass.find('.className').after($divAttr);
            }
            if($paneClass.find('select').length > 0) {
                $paneClass.addClass('on');
            }
            function setAttr(attrStore,$divAttr){
                if (attrStore.filter){
                    $divAttr.append('<span class="label">' + attrStore.name +'</span>');
                    $selAttr = $('<select class="filterAttr">').addClass('attr').attr('filterMode',attrStore.filter.t);
                    if (attrStore.filter.t = 'enum'){
                        for (var attrOpt in attrStore.filter.opt){
                            $selAttr.append('<option value="' + attrOpt + '">' + attrStore.filter.opt[attrOpt] + '</option>')
                        }
                    }else if(attrStore.filter.t = 'range'){
                        for (var j = 0 ; j < attrStore.filter.opt.length; j++){
                            $selAttr.append('<option value="' + attrStore.filter.opt[j] + '">' + attrStore.filter.opt[j] + '</option>')
                        }
                    }
                    $divAttr.append($selAttr);
                }
            }
        },
        initSearch:function(){
            var $iptSearch = $('#paneIotSearch').find('input');
            $iptSearch.on('propertychange input',function(e){
                if ($iptSearch.val() == '') {
                    var postData = {
                        parent: []
                    };
                    WebAPI.post('/iot/search', postData).done(function (result) {
                        if (!result)return;
                        _this.isSearch = false;
                        $.fn.zTree.destroy('paneIotData');
                        _this.store = {
                            projects: [],
                            groups: [],
                            things: []
                        };
                        _this.tree = null;
                        _this.store = {
                            groups: result.groups,
                            projects: result.projects,
                            things: result.things
                        };
                        for (var i = 0; i < _this.store.groups.length; i++) {
                            _this.store.groups[i].isParents = true;
                            //_this.store.groups[i].open = true;
                            _this.store.groups[i].baseType = 'groups';
                        }
                        for (var i = 0; i < _this.store.projects.length; i++) {
                            _this.store.projects[i].isParents = true;
                            //_this.store.projects[i].open = true;
                            _this.store.projects[i].baseType = 'projects';
                        }
                        for (var i = 0; i < _this.store.things.length; i++) {
                            _this.store.things[i].baseType = 'things';
                        }
                        _this.initClassPane();
                        //_this.initClassDetail();
                        _this.initTreePane(_this.store);
                    })
                }
            })
            $iptSearch.keyup(function(e){
                if (13 == e.keyCode) {
                    $iptSearch.blur();
                    var projId;
                    var selectNode = _this.tree.getSelectedNodes()[0];
                    if (!selectNode || !selectNode['projId']){
                        projId = _this.prevProjId
                    }else{
                        projId = selectNode['projId'];
                        _this.prevProjId = projId;
                    }
                    var postData
                    if ($iptSearch.val() == ''){
                        postData = {
                            parent: []
                        };
                        WebAPI.post('/iot/search', postData).done(function (result) {
                            if(!result )return;
                            _this.isSearch = false;
                            $.fn.zTree.destroy('paneIotData');
                            _this.store = {
                                projects:[],
                                groups:[],
                                things:[]
                            };
                            _this.tree = null;
                            _this.store = {
                                groups: result.groups,
                                projects: result.projects,
                                things: result.things
                            };
                            for (var i = 0; i < _this.store.groups.length; i++) {
                                _this.store.groups[i].isParents = true;
                                //_this.store.groups[i].open = true;
                                _this.store.groups[i].baseType = 'groups';
                            }
                            for (var i = 0; i < _this.store.projects.length; i++) {
                                _this.store.projects[i].isParents = true;
                                //_this.store.projects[i].open = true;
                                _this.store.projects[i].baseType = 'projects';
                            }
                            for (var i = 0; i < _this.store.things.length; i++) {
                                _this.store.things[i].baseType = 'things';
                            }
                            _this.initClassPane();
                            //_this.initClassDetail();
                            _this.initTreePane(_this.store);
                        })
                    }else {
                        postData = {
                            searchName:$iptSearch.val(),
                            projId:projId
                        };
                        WebAPI.post('/iot/fuzzysearch', postData).done(function (result) {
                            if(!result || !result.data)return;
                            _this.isSearch = true;
                            $.fn.zTree.destroy('paneIotData');
                            _this.store = {
                                projects:[],
                                groups:[],
                                things:[]
                            };
                            _this.tree = null;
                            for (var i = 0 ; i < result.data.length;i++){
                                result.data[i].pId = result.data[i]['_idPrt'];
                                _this.store[result.data[i].baseType].push(result.data[i])
                            }
                            //for (var i = 0; i < _this.store.groups.length; i++) {
                            //    _this.store.groups[i].isParents = true;
                            //    //_this.store.groups[i].open = true;
                            //    _this.store.groups[i].baseType = 'groups';
                            //}
                            //for (var i = 0; i < _this.store.projects.length; i++) {
                            //    _this.store.projects[i].isParents = true;
                            //    //_this.store.projects[i].open = true;
                            //    _this.store.projects[i].baseType = 'projects';
                            //}
                            //for (var i = 0; i < _this.store.things.length; i++) {
                            //    _this.store.things[i].baseType = 'things';
                            //}
                            _this.initTreePane(_this.store);
                        })
                    }
                }
            })
        },
        searchName:function(name){
            for (var type in _this.store.class){
                for( var keyName in _this.store.class[type]){
                    if(keyName == name)return _this.store.class[type][keyName]
                }
            }
        },
        searchClass:function(cls){
            for( var type in _this.dictClass) {
                for (var keyCls in _this.dictClass[type]) {
                    if (keyCls == cls)return _this.dictClass[type][keyCls]
                }
            }
        },
        initTreePane:function(opt,parentNode){
            if(_this.tree)return;
            _this.$paneTree =$('#paneIotData');
            if(_this.opt.tree && _this.opt.tree.show){

                var setting = {
                    data: {
                        simpleData: {
                            enable: true,
                            idKey: '_id'
                        }
                    },
                    edit: {
                        enable: true,
                        drag:{
                            isCopy:false,
                            isMove:false
                        }
                    },
                    view: {
                        addDiyDom:addDiyDom,
                        addHoverDom:addHoverDom,
                        removeHoverDom:removeHoverDom,
                        dblClickExpand:false
                    },
                    callback: {
                        //onRightClick: function (event, treeId, item) {
                        //    var cls = {};
                        //    for (var type in _this.dictClass) {
                        //        var dictClass = _this.dictClass[type];
                        //        if (dictClass) {
                        //            for (var keyCls in dictClass) {
                        //                if (keyCls == item.type) {
                        //                    cls = dictClass[keyCls];
                        //                    break;
                        //                }
                        //            }
                        //        }
                        //    }
                        //
                        //    var str = '', i = 0;
                        //
                        //    for (var attr in cls.attrs) {
                        //        str += cls.attrs[attr].name + ": " + item.arrP[i++] + ";  \n";
                        //    }
                        //
                        //    alert(str);
                        //},
                        //beforeExpand:function(event, treeId, treeNode){
                        //    _this.childAppend(treeNode);
                        //},
                        beforeRename:function(){
                            return false;
                        },
                        beforeRemove:function(){
                        },
                        beforeDrag:function(){
                            return false;
                        },
                        onDblClick:function (event, treeId, treeNode){
                            if(!_this.opt.tree.event.dblClick)return;
                            _this.opt.tree.event.dblClick.call(_this, event, treeId, treeNode);
                        },
                        onClick: function (event, treeId, treeNode) {
                            //_this.childAppend(treeNode);
                            if(!_this.opt.tree.event.click)return;
                            var that = this;
                            var dblFlag = false;
                            var clkInterval;
                            if(typeof  treeNode.clickTime =='undefined'){
                                clkInterval = Infinity;
                            }else{
                                clkInterval = new Date() - treeNode.clickTime;
                            }
                            treeNode.clickTime = new Date();
                            $(event.target).on('click.judgeDbl',function(){
                                dblFlag = true;
                            });
                            var dblJudge = window.setInterval(function(){
                                $(event.target).off('click.judgeDbl');
                                window.clearInterval(dblJudge);
                                if(!dblFlag && clkInterval > 200) {
                                    _this.childAppend(treeNode, function () {
                                        if (_this.opt.tree.event.click){
                                            if (!_this.opt.tree.event.click instanceof Array) {
                                                _this.opt.tree.event.click.call(that, event, treeId, treeNode);
                                            }else{
                                                for (var i = 0; i < _this.opt.tree.event.click.length ;i++){
                                                    if (_this.opt.tree.event.click[i].tar.toString().indexOf(treeNode.baseType) > -1 || _this.opt.tree.event.click[i].tar == 'all'){
                                                        _this.opt.tree.event.click[i].act.call(that, event, treeId, treeNode)
                                                    }
                                                }
                                            }
                                        }
                                    });
                                    //_this.opt.tree.event.click.call(that, event, treeId, treeNode);
                                }
                            },200);
                        }
                    }
                };
                var zNodes = _this.initTreeData(opt);
                _this.tree = $.fn.zTree.init(this.$paneTree, setting, zNodes);
                //if (_this.opt.tree.drag && _this.opt.tree.drag.enable){
                //    _this.$paneTree.attr('draggable',true);
                //    if (_this.opt.tree.drag.dragstart) {
                //        attachDragEvent('dragstart');
                //    }
                //    if (_this.opt.tree.drag.drop) {
                //        attachDragEvent('drop');
                //    }
                //}
                _this.$paneTree.on('click','.btnEdit',function(e){
                    e.stopPropagation();
                    var treeNode = _this.tree.getNodeByTId(e.target.parentNode.id);
                    var parentNode = treeNode.getParentNode();
                    new CreateDeviceModal({
                        mode: 'edit',
                        baseType: treeNode.baseType,
                        filter: _this,
                        parentNode: parentNode,
                        treeNode: treeNode
                    });
                });
                _this.$paneTree.on('click','.btnDelete',function(e){
                    e.stopPropagation();
                    var treeNode = _this.tree.getNodeByTId(e.target.parentNode.id);
                    var postData = [{
                        'id':[treeNode['_id']],
                        'type':treeNode['baseType']
                    }];
                    WebAPI.post('/iot/delIotInfo',postData).done(function(){
                        var nodes = _this.tree.getNodesByParam('_id',$(e.target.parentNode).attr('ptid'));
                        for (var i = 0 ;i < nodes.length ;i++){
                            _this.tree.removeNode(nodes[i]);
                        }
                        if(typeof _this.opt.tree.tool.delete == 'function'){
                            _this.opt.tree.tool.delete.call(_this,treeNode)
                        }
                    });
                });
                _this.$paneTree.on('click','.btnTemplate',function(e){
                    e.stopPropagation();
                    var treeNode = _this.tree.getNodeByTId(e.target.parentNode.id);
                    var strModalContent = new StringBuilder();
                    //strModalContent.append('<div class="modal fade">');
                    //strModalContent.append('   <div class="modal-dialog">');
                    //strModalContent.append('       <div class="modal-content">');
                    //strModalContent.append('           <div class="modal-header">');
                    //strModalContent.append('               <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>');
                    //strModalContent.append('               <h4 class="modal-title">Modal title</h4>');
                    //strModalContent.append('           </div>');
                    //strModalContent.append('           <div class="modal-body">');
                    strModalContent.append('               <iframe style="width:100%;height:100%;" name="ifram_factory" sandbox="allow-forms allow-popups allow-scripts allow-same-origin allow-modals" frameborder="0"></iframe>');
                    //strModalContent.append('           </div>');
                    //strModalContent.append('           <div class="modal-footer">');
                    //strModalContent.append('               <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>');
                    //strModalContent.append('               <button type="button" class="btn btn-primary">Save changes</button>');
                    //strModalContent.append('           </div>');
                    //strModalContent.append('       </div>');
                    //strModalContent.append('   </div>');
                    //strModalContent.append('</div>');
                    var $modalContent = $(strModalContent.toString());
                    var $modal = $('#templateModal');
                    $modal.find('.modal-content').append($modalContent);
                    $modal.modal('show');
                    $modal.off().on('shown.bs.modal',function(){
                        //WebAPI.get('/asset/getThingDetail/'+ treeNode['_id']).done(function(result){
                            var form, ipt;
                            //postData = {};
                            //for (var ele in treeNode.arrP){
                            //    postKey = _this.dictClass[treeNode.baseType][treeNode.type].attrs[ele].name;
                            //    if (postKey) {
                            //        postData[postKey] = treeNode.arrP[ele]
                            //    }
                            //}
                            //if (result.data) {
                                // 动态创建表单
                                // iframe 的 name 不能用大小写驼峰，否则 form 的 target 属性链接会失败
                                // 按照官方的说法，“iframe 需要一个明确的名称”
                                form = document.createElement('form');
                                form.action = '/factory/preview/8f54051d0011456903054765';
                                form.method = 'post';
                                form.target = 'ifram_factory';

                                ipt = document.createElement('input');
                                ipt.type = 'hidden';
                                ipt.name = 'params';
                                ipt.value = JSON.stringify(treeNode.arrP);

                                form.appendChild(ipt);
                                document.body.appendChild(form);
                                form.submit();
                                document.body.removeChild(form);
                            //}
                        })
                    //});
                    $modal.on('hidden.bs.modal',function(){
                        $modalContent.remove();
                    })
                });
                function addDiyDom(treeId,treeNode){
                    var $target = $('#' + treeNode.tId);
                    $target.attr('ptId',treeNode['_id']);
                    $target.addClass(treeNode.baseType);
                    if (typeof _this.opt.tree.event.addDom == 'function'){
                        _this.opt.tree.event.addDom.call(_this,treeNode,$target);
                    }else {
                        if (treeNode.baseType == 'groups' || treeNode.baseType == 'things') {
                            $target.append('\
                        <span class="btnEdit btnTreeNode glyphicon glyphicon-edit"></span>\
                        <span class="btnDelete btnTreeNode glyphicon glyphicon-remove-sign"></span>\
                        <span class="btnTemplate btnTreeNode glyphicon glyphicon-comment"></span>\
                        ');
                        }
                    }
                    if (_this.opt.tree.drag && _this.opt.tree.drag.enable){
                        $target.attr('draggable',true);
                        if (_this.opt.tree.drag.dragstart) {
                            attachDragEvent('dragstart',$target,treeNode);
                        }
                        if (_this.opt.tree.drag.dragend) {
                            attachDragEvent('dragend',$target,treeNode);
                        }
                        if (_this.opt.tree.drag.drop) {
                            attachDragEvent('drop',$target,treeNode);
                        }
                    }
                }
                function addHoverDom(treeId,treeNode){
                    var $target = $('#' + treeNode.tId);
                }
                function removeHoverDom(treeId,treeNode){
                    var $target = $('#' + treeNode.tId);
                }
                function attachDragEvent(type,target,treeNode){
                    if (_this.opt.tree.drag[type]) {
                        if (_this.opt.tree.drag[type] instanceof Function){
                            target.on(type,function (e) {
                                e.preventDefault();
                                _this.opt.tree.drag[type].call(_this,e,treeNode);
                            });
                        }else if(_this.opt.tree.drag[type].act instanceof Function && _this.opt.tree.drag[type].tar == treeNode.baseType){
                            target.on(type,function (e) {
                                _this.opt.tree.drag[type].act.call(_this,e,treeNode);
                            });
                        }else if(_this.opt.tree.drag[type] instanceof Array){
                            _this.opt.tree.drag[type].forEach(function(event,i){
                                if (event.act instanceof Function && event.tar == treeNode.baseType) {
                                    target.on(type,function (e) {
                                        e.stopPropagation();
                                        event.act.call(_this, e, treeNode);
                                    });
                                }
                            })
                        }
                    }
                }
                //function attachDragEvent(type){
                //    if (_this.opt.tree.drag[type]) {
                //        if (_this.opt.tree.drag[type] instanceof Function){
                //            _this.$paneTree.on('dragstart', 'li', function (e) {
                //                var treeNode = _this.tree.getNodeByTId($(e.target).attr('id'));
                //                _this.opt.tree.drag[type].call(_this,e,treeNode);
                //            });
                //        }else if(_this.opt.tree.drag[type].act instanceof Function && _this.opt.tree.drag[type].tar){
                //            _this.$paneTree.on(type, _this.opt.tree.drag[type].tar == 'all'?null:'.'+ _this.opt.tree.drag[type].tar, function (e) {
                //                var treeNode = _this.tree.getNodeByTId($(e.target).attr('id'));
                //                _this.opt.tree.drag[type].act.call(_this,e,treeNode);
                //            });
                //        }else if(_this.opt.tree.drag[type] instanceof Array){
                //            _this.opt.tree.drag[type].forEach(function(event,i){
                //                if (event.act instanceof Function && event.tar) {
                //                    _this.$paneTree.on('dragstart', event.tar == 'all'?null:'.'+ event.tar, function (e) {
                //                        e.stopPropagation();
                //                        var treeNode = _this.tree.getNodeByTId($(e.currentTarget).attr('id'));
                //                        event.act.call(_this, e, treeNode);
                //                    });
                //                }
                //            })
                //        }
                //    }
                //}
            }
        },
        initTreeData: function (option) {
            if (!_this.tree) {
                var data = [];
                data = data.concat(this.store.projects);
                data = data.concat(this.store.groups);
                data = data.concat(this.store.things);
            }else{
                var root = _this.tree.getNodes();
                var data = _this.tree.transformToArray(root);
                for (var i = 0;i < data.length;i++){
                    if (data[i].baseType == option.type){
                        _this.tree.showNode(data[i]);
                        if (option.val == 'all'){
                            continue;
                        }else if(option.val =='none'){
                            //data[i].isHidden = true;
                            //_this.tree.updateNode(data[i]);
                            _this.tree.hideNode(data[i]);
                        }else if (data[i].type != option.val) {
                            //data[i].isHidden = true;
                            //_this.tree.updateNode(data[i]);
                            _this.tree.hideNode(data[i]);
                        }
                    }
                }
            }
            //var length;
            //if (option.type == 'groups') {
            //    if (option.val != 'all'){
            //        length = arrGroups.length;
            //        for (var i = 0; i < length;i++){
            //            if (arrGroups[i].type != option.val){
            //                arrGroups.splice(i,1);
            //                length--;
            //                i--
            //            }
            //        }
            //    }
            //}
            //else if (option.type == 'things') {
            //    if (option.val != 'all') {
            //        length = arrThings.length;
            //        for (var i = 0; i < length; i++) {
            //            if (arrThings[i].type != option.val) {
            //                arrThings.splice(i, 1);
            //                length--;
            //                i--
            //            }
            //        }
            //    }
            //} else if (option.type == 'projects'){
            //    if (option.val != 'all'){
            //        length = arrProjects.length;
            //        for (var i = 0; i < length;i++){
            //            if (arrProjects[i].type != option.val){
            //                arrProjects.splice(i,1);
            //                length--;
            //                i--
            //            }
            //        }
            //    }
            //}
            //data = data.concat(arrProjects);
            //data = data.concat(arrGroups);
            //data = data.concat(arrThings);
            if (typeof _this.opt.tree.data == 'function'){
                _this.opt.tree.data.call(_this,data)
            }
            return data;
        },
        childAppend:function(treeNode,func){
            if(treeNode.open || _this.isSearch){
                _this.tree.expandNode(treeNode);
                return;
            }else {
                if(treeNode.baseType == 'things') {
                    func();
                    _this.tree.expandNode(treeNode);
                    return;
                }else {
                    var postData = {
                        parent: [{
                            id: treeNode['_id'],
                            type: treeNode['baseType']
                        }]
                    };
                    WebAPI.post('/iot/search', postData).done(function (resultData) {
                        for (var type in resultData.class) {
                            for (var cls in resultData.class[type]) {
                                _this.dictClass[type][cls] = resultData.class[type][cls]
                            }
                        }
                        var tempArr = [];
                        for (var ele in resultData) {
                            if (ele == 'class')continue;
                            if (typeof _this.opt.tree.data == 'function'){
                                _this.opt.tree.data.call(_this,resultData[ele],ele)
                            }
                            var flag;
                            for (var i = 0; i < resultData[ele].length; i++) {
                                for (var j = 0; j < _this.store[ele].length; j++) {
                                    if (_this.store[ele][j]['_id'] == resultData[ele][i]['_id']) {
                                        if (ele == 'groups' && !resultData[ele][i].pId) {
                                            resultData[ele][i].pId = resultData[ele][i]['_idProj'];
                                        }
                                        if (_this.store[ele][j]['pId'] == resultData[ele][i]['pId']) {
                                            flag = true;
                                        } else {
                                            if (treeNode.children) {
                                                for (var k = 0; k < treeNode.children.length; k++) {
                                                    if (resultData[ele][i]['_id'] == treeNode.children[k]['_id']) {
                                                        flag = true;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _this.store[ele][j] = resultData[ele][i];
                                        break;
                                    }
                                }
                                if (!flag) {
                                    resultData[ele][i].baseType = ele;
                                    //resultData[ele][i].open = true;
                                    _this.store[ele].push(resultData[ele][i]);
                                    tempArr.push(resultData[ele][i]);
                                }
                            }
                        }
                        if (tempArr.length == 0) {
                            func();
                            _this.tree.expandNode(treeNode);
                            return;
                        }
                        _this.tree.addNodes(treeNode, tempArr, true);
                        _this.tree.expandNode(treeNode);
                        _this.initClassPane();
                        func();
                        //_this.initTreePane(_this.store,treeNode)
                    })
                }
            }
        },
        initAddPane:function(){
            _this.$paneAdd = $('#paneIotAdd');
            var $btnAdd = $('.btnAddEle');
            $btnAdd.click(function(e){
                var parentNode = _this.tree.getSelectedNodes()[0];
                if (typeof _this.opt.tree.tool.add == 'function'){
                    _this.opt.tree.tool.add.call(_this,parentNode)
                }
                if (typeof _this.opt.tree.tool.add.act == 'function'){
                    _this.opt.tree.tool.add.act.call(_this,parentNode)
                }
                if (_this.opt.tree.tool.add.default || typeof _this.opt.tree.tool.add == 'function') {
                    if (parentNode.length == 0) {
                        alert('请选择父节点');
                        return;
                    }
                    new CreateDeviceModal({
                        mode: 'add',
                        baseType: $(e.currentTarget).attr('typeAdd'),
                        filter: _this,
                        parentNode: parentNode
                    });
                }
            });
        }
    };
    return HierFilter;
})();

var CreateDeviceModal = (function () {
    var _this;

    function CreateDeviceModal(opt) {
        _this = this;
        this.devices = null;
        this.names = null;
        this.type = null;
        this.mode = opt.mode;
        this.baseType = opt.baseType?opt.baseType:undefined;
        this.filter = opt.filter?opt.filter:undefined;
        this.parentNode = opt.parentNode;
        this.treeNode = opt.treeNode;
        this.group = [];
        this.prefix = null;
        this.batch = null; //批量
        this.batchErr = {
            name:false,
            prefix:false
        };
        this.show();    }

    CreateDeviceModal.prototype = {
        show: function () {
            var _this = this;
            if(_this.mode == 'add' && _this.baseType =='things' && _this.parentNode.baseType == 'projects'){
                alert('项目下不支持直接增加设备');
                return;
            }
            WebAPI.get("/static/scripts/iot/config/addThing.html").done(function (rsHtml) {
                _this.content = rsHtml;
                _this.$createDev = $("#dialogModal");
                _this.$createDev.find("#dialogContent").append(rsHtml);
                if(_this.mode == 'add') {
                    _this.$createDev.find('.modal-title').text('添加' + _this.baseType);
                }else{
                    _this.$createDev.find('.modal-title').text('修改' + _this.baseType);
                }
                _this.$createDev.modal({backdrop: 'static', keyboard: false }); //closing modal by 'escape' keydown and click on outside are not allowed                _this.init();
                _this.init();
            });
        },
        init: function () {
            var _this = this;
            _this.names = [];
            _this.devices = [];
            _this.prefix = [];
            _this.type = "";
            _this.batch = false;
            _this.$createDev.modal('show');
            _this.$innerSLD = $("#createModalSld");
            _this.closeBtn = document.getElementById("closeBtn"); //$("$closeBtn")
            _this.skipBtn = document.getElementById("skipBtn"); //$("#skipBtn")
            _this.nextBtn = document.getElementById("nextBtn");//$("#nextBtn")
            _this.confirmBtn = document.getElementById("confirmBtn");
            _this.nameInput = document.getElementById("nameInput");
            _this.nameConfigInput = document.getElementById("batchNameArea");
            _this.prefixInput = document.getElementById("prefixInput");
            _this.typeList = document.getElementById("typeList");
            _this.groupList = document.getElementById("addedGroup");
            _this.bindDataGroup = document.getElementById("bindDataGroup");

            _this.typeDataSource = null;
            if (_this.parentNode.baseType == 'things') {
                _this.parentNode = _this.parentNode.getParentNode();
            }
            _this.initTypeList();
            _this.initParentType();
            if (_this.mode == 'edit'){
                _this.initEditMode();
            }
            _this.attachEvent();
        },
        attachEvent: function () {
            //setup onclick or onchange events
            var _this = this;
            var btnAddParent = document.getElementById("btnAddParent");
            btnAddParent.addEventListener("click", _this.parentAdd, false);
            _this.closeBtn.onclick = function () {
                _this.closeModal(false);
            };
            _this.confirmBtn.onclick = function () {
                _this.closeModal(true);
            };
            _this.nextBtn.onclick = function () {
                var currentIndex = _this.$innerSLD.find('.active').index();
                _this.checkValid(currentIndex);
            };
            _this.$innerSLD.on('slide.bs.carousel', _this.onCarouselMove);

            $(".batchBtn").on("change", function () {
                var batch = $(this).attr("data-batch");
                if (batch === "true") {
                    $("#divNameBatch").removeClass("hide");
                    $("#divPrefixBatch").removeClass("hide");
                    _this.batch = true;
                } else {
                    $("#divNameBatch").addClass("hide");
                    $("#divPrefixBatch").addClass("hide");
                    _this.batch = false;
                }
            });
        },
        closeModal: function (flag) {
            //flag 判断是否中途退出
            var _this = this;
            if (flag) {
                if(_this.mode == 'add'){
                    _this.addModeClose();
                }else if(_this.mode == 'edit'){
                    _this.editModeClose();
                }
                //window.alert("您已成功创建设备");
                _this.devices = null;
                _this.name = null;
                _this.type = null;
                _this.group = [];
                _this.prefix = null;
                _this.batch = false; //批量

                _this.$createDev.modal('hide');
                _this.$createDev.find("#dialogContent").empty();
            } else {
                var message = "确定要中途退出吗？";
                var rs = window.confirm(message);
                if(rs){
                    _this.devices = null;
                    _this.names = null;
                    _this.type = null;
                    _this.group = [];
                    _this.prefix = null;
                    _this.batch = false; //批量
                    _this.$createDev.modal('hide');
                    _this.$createDev.find("#dialogContent").empty();
                }else{
                    return;
                }
            }
        },
        editModeClose:function(){
            var postData = [];
            for (var i = 0; i < _this.devices.length; i++) {
                postData.push({
                    '_id':_this.treeNode['_id'],
                    name:_this.devices[i].name,
                    arrP:_this.devices[i].arrP,
                    _idProj:_this.parentNode.baseType == 'projects'?_this.parentNode['_id']:_this.parentNode['_idProj'],
                    projId:_this.parentNode.projId,
                    pId:_this.parentNode.baseType == 'projects'?undefined:_this.pId,
                    path:null,
                    prefix:_this.devices[i].prefix,
                    type:_this.type,
                    weight:0,
                    baseType:_this.baseType
                })
            }
            WebAPI.post('/iot/setIotInfo', postData).done(function (result) {
                if (result.data && result.data.length == 0)return;
                $.extend(true,_this.treeNode,postData[0]);
                _this.filter.tree.updateNode(_this.treeNode);
                for (var  i = 0 ; i < _this.filter.store[_this.treeNode['baseType']].length; i++){
                    if (_this.filter.store[_this.treeNode['baseType']][i]['_id'] == _this.treeNode['_id']){
                        for (var ele in _this.filter.store[_this.treeNode['baseType']][i]){
                            _this.filter.store[_this.treeNode['baseType']][i][ele] = _this.treeNode[ele]
                        }
                        break;
                    }
                }
                if (typeof _this.filter.opt.tree.tool.edit == 'function' && _this.mode == 'edit'){
                    _this.filter.opt.tree.tool.edit.call(_this.filter,_this.treeNode)
                }
            });
        },
        addModeClose:function(){
            var postData = [];
            for (var i = 0; i < _this.devices.length; i++) {
                postData.push({
                    name:_this.devices[i].name,
                    arrP:_this.devices[i].arrP,
                    _idProj:_this.parentNode.baseType == 'projects'?_this.parentNode['_id']:_this.parentNode['_idProj'],
                    projId:_this.parentNode.projId,
                    pId:_this.parentNode.baseType == 'projects'?undefined:_this.pId,
                    path:null,
                    prefix:_this.devices[i].prefix,
                    type:_this.type,
                    weight:0,
                    baseType:_this.baseType
                })
            }
            WebAPI.post('/iot/setIotInfo', postData).done(function (result) {
                if (result.data && result.data.length == 0)return;
                postData.forEach(function (val, index) {
                    val['_id'] = result.data[index]
                });
                var arrParent = [];
                var arrNodes = [];
                var parent;
                if (_this.pId instanceof Array) {
                    for (var i = 0; i < _this.pId.length; i++) {
                        parent = _this.filter.tree.getNodeByParam('_id', _this.pId[i]);
                        arrParent.push(parent);
                        _this.filter.tree.addNodes(parent, postData);
                    }
                } else {
                    _this.filter.tree.addNodes(_this.parentNode, postData);
                    arrParent.push(_this.parentNode);
                }
                _this.filter.store[_this.baseType] = _this.filter.store[_this.baseType].concat(postData);
                if (typeof _this.filter.opt.tree.tool.add == 'function'){
                    for (var i = 0 ;i < postData.length ;i++){
                        arrNodes.push(_this.filter.tree.getNodeByParam('_id', postData[i]['_id']))
                    }
                    _this.filter.opt.tree.tool.add.call(_this.filter,arrParent,arrNodes)
                }
            });
        },
        initEditMode:function(){
            $('#divBatch').hide();
            $('#nameInput').val(_this.treeNode.name);
            $('#prefixInput').val(_this.treeNode.prefix)
        },
        createDevice: function(){            //create objects and add values
            var _this = this;
            var typeProp;
            for (var i = 0, len = _this.names.length; i < len; i++) {
                var obj = {};
                obj.name = _this.names[i];
                obj.type = _this.type;
                if (_this.prefix && _this.prefix[i]) {
                    obj.prefix = _this.prefix[i];
                } else {
                    obj.prefix = '';
                }
                obj.attrs = []; //containing the fullName, cnName, id and value of binddata
                obj.arrP = {};
                typeProp = _this.typeDataSource[_this.type];
                for (var attr in typeProp['attrs']) {
                    if (typeProp['attrs'].hasOwnProperty(attr)) {
                        var att = {};
                        att['name'] = attr;
                        att["fullName"] = obj.prefix + attr;
                        att["cnName"] = typeProp['attrs'][attr]["name"];
                        att["value"] = '--';
                        att["id"] = null;
                        obj["attrs"].push(att);
                    }
                }
                _this.devices.push(obj);
            }
        },
        updateDevice: function () {
            var _this = this;
            //update devices' info if added
        },
        initTypeList: function () {
            var _this = this;
            var arrHtml = ["<option value='-1'>请选择</option>"];
            var $typeList = $("#typeList");
            WebAPI.get('/iot/getClassFamily/' + _this.baseType.slice(0, -1) + '/cn').done(function (result) {
                if (result) {
                    _this.typeDataSource = result;
                    for (var obj in result) {
                        if (result.hasOwnProperty(obj)) {
                            var name = result[obj]["name"];
                            arrHtml.push("<option value='" + obj + "'>" + name + "</option>");
                        }
                    }
                    $typeList.html(arrHtml.join(''));
                    if (_this.mode == 'edit') {
                        $('#typeList').val(_this.treeNode.type);
                    }
                } else {
                    console.log("type list is null");
                }
            });
        },
        initParentType: function () {
            var _this = this;
            var arrHtml = ['<option value="-1">全部</option>'];
            var $parentTypeList = $("#parentTypeList");
            var $parentList = $('.parentList');

            //init subGroupList
            if (_this.baseType == 'groups'){
                $parentList.html('<option value="'+ _this.parentNode['_id'] +'">' + _this.parentNode.name + '</option>');
                $parentList.attr("disabled","disabled");
            }else {                $parentList.html(arrHtml.join(''));
                $('#btnAddParent').show();
            }
            //init GroupList
            WebAPI.get('/iot/getClassFamily/' + _this.parentNode.baseType.slice(0, -1) + '/cn').done(function (result) {
                if (result) {
                    _this.groupDataSource = result;
                    if (_this.baseType == "groups" && result[_this.parentNode.type]) {
                        $parentTypeList.html('<option value="' + _this.parentNode.type + '">' + result[_this.parentNode.type].name + '</option>')
                            .attr('disabled', 'disabled');
                        return;
                    }
                    for (var obj in result) {
                        if (result.hasOwnProperty(obj)) {
                            var name = result[obj]["name"];
                            arrHtml.push("<option value='" + obj + "'>" + name + "</option>");
                        }
                    }
                    var arrParentList = ['<option value="-1">请选择</option>'];
                    for (var i = 0; i < _this.filter.store.groups.length; i++) {
                        if (_this.filter.store.groups[i]['_id'] == _this.parentNode['_id']) {
                            $parentList.val(_this.parentNode['_id'])
                        }
                        arrParentList.push('<option value="' + _this.filter.store.groups[i]['_id'] + '">' + _this.filter.store.groups[i].name + '</option>')
                    }
                    $parentList.html(arrParentList.join(''));
                    $parentTypeList.html(arrHtml.join(''));
                    if(_this.mode == 'add'){
                        $parentList.val(_this.parentNode['_id']);
                    } else if(_this.mode == 'edit'){
                        if(typeof _this.treeNode.pId =='string'){
                            $('.parentList').eq(0).val(_this.treeNode.pId)
                        }else if(_this.treeNode.pId instanceof Array){
                            $('.parentList').eq(0).val(_this.treeNode.pId[0]);
                            for (var i = 1; i < _this.treeNode.pId.length; i++){
                                _this.parentAdd().val(_this.treeNode.pId[i])
                            }
                        }
                    }
                } else {
                    console.log("type list is null");
                }
            });
            $parentTypeList.on("change", function () {
                if (_this.baseType == 'groups')return;
                var selectedOpt = $("#parentTypeList option:selected").attr("value");
                _this.getParentList(selectedOpt);
            });
        },
        getParentList: function (val) {
            var _this = this;
            var arrHtml = ["<option value='-1'>请选择</option>"];
            var $parentList = $('.parentList');
            for (var i = 0; i < _this.filter.store.groups.length; i++) {
                if (val == -1 || _this.filter.store.groups[i].type == val) {
                    if (_this.filter.store.groups[i]['_id'] == _this.parentNode['_id']) {
                        $parentList.val(_this.parentNode['_id'])
                    }
                    arrHtml.push('<option value="' + _this.filter.store.groups[i]['_id'] + '">' + _this.filter.store.groups[i].name + '</option>')
                } else {

                }
            }
            $parentList.html(arrHtml.join(""));
        },
        parentAdd: function () {
            var $divParentList = $($('.divParentList')[0].outerHTML);
            $('#boxParentList').append($divParentList);
            return $divParentList;
        },
        //getSubGroupList: function(val){
        //    var _this = this;
        //    var arrHtml = ["<option value='-1'>请选择</option>"];
        //    var $subGroupList = $("#subGroupList");
        //    if(val !== '-1'){
        //        var data = _this.groupDataSource[val]["attrs"];
        //        if(Object.keys(data).length > 0){
        //            for(var obj in data){
        //                if(data.hasOwnProperty(obj)){
        //                    var name = data[obj]["name"];
        //                    arrHtml.push("<option text='"+name+"' value='"+obj+"'>"+name+"</option>");
        //                }
        //            }
        //            $subGroupList.html(arrHtml.join(""));
        //            $subGroupList.removeAttr("disabled");
        //        }else{
        //            $subGroupList.html(arrHtml.join(""));
        //            $subGroupList.attr("disabled", "disabled");
        //        }
        //    }else{
        //        $subGroupList.html(arrHtml.join(""));
        //        $subGroupList.attr("disabled", "disabled");
        //    }
        //},
        generateName: function () {
            var _this = this;
            var input = _this.nameInput.value.trim();
            var names = [];
            if (_this.batch) {
                try {
                    var config = $("#batchNameArea").val().trim();//if the input is a valid JSON string or need to convert to a valid one
                    config = config.replace((/([\w]+)(:)/g), "\"$1\"$2"); //add "" before : if doesnt exist
                    config = config.replace((/'/g), "\"");  //replace '' with ""
                    if (config == '') {
                        alert('名称批量设置为空！');
                        return names
                    } else {
                        var nameConfig = JSON.parse(config);
                        for (var item in nameConfig) {
                            if (nameConfig.hasOwnProperty(item)) {
                                var reg = new RegExp('<#' + item + '#>', 'g');
                                if (Object.prototype.toString.call(nameConfig[item]).slice() === '[object Array]') {
                                    //confing in array
                                    for (var j = 0; j < nameConfig[item].length; j++) {
                                        if (names.length !== nameConfig[item].length) {
                                            names.push(input.replace(reg, nameConfig[item][j]));
                                        } else {
                                            names[j] = names[j].replace(reg, nameConfig[item][j]);
                                        }
                                    }
                                } else {
                                    //config in obj
                                    var min = parseInt(nameConfig[item]["min"], 10);
                                    var max = parseInt(nameConfig[item]["max"], 10);
                                    var step = parseInt(nameConfig[item]["step"], 10) || 1;
                                    for (var k = 0; k < max - min + 1; k++) {
                                        if (names.length !== max - min + 1) {
                                            names.push(input.replace(reg, k + min));
                                        } else {
                                            console.log(typeof names[k]);
                                            names[k] = names[k].replace(reg, k * step + min);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                catch(e){
                    _this.batchErr.name = true;
                }
            } else {
                names.push(input);
            }
            return names;
        },
        generatePrefix: function () {
            //generate prefix (default as names)
            var _this = this;
            var input = _this.prefixInput.value.trim();
            var prefix = [];
            if (_this.batch) {
                try {
                    if (input === '' || input.length === 0) {
                        //if the user hasn't input the prefix then the prefix will be the same as names with '_' behind
                        for (var i = 0; i < _this.names.length; i++) {
                            //var name = _this.names[i];
                            //name += (name.slice(-1) === "_") ? "" : "_";
                            prefix.push('');
                        }
                    } else {
                        //if the prefixInput is filled
                        var config = $("#batchPrefixArea").val().trim();//if the input is a valid JSON string or need to convert to a valid one
                        config = config.replace((/([\w]+)(:)/g), "\"$1\"$2"); //add "" before : if doesnt exist
                        config = config.replace((/'/g), "\"");  //replace '' with ""
                        if (config == '') {
                            alert('前缀批量设置为空！');
                            return prefix
                        }
                        var prefixConfig = JSON.parse(config);
                        for (var item in prefixConfig) {
                            if (prefixConfig.hasOwnProperty(item)) {
                                var reg = new RegExp('<#' + item + '#>', 'g');
                                if (Object.prototype.toString.call(prefixConfig[item]).slice() === '[object Array]') {
                                    //confing in array
                                    var pre;
                                    for (var j = 0; j < prefixConfig[item].length; j++) {
                                        if (prefix.length !== prefixConfig[item].length) {
                                            pre = input.replace(reg, prefixConfig[item][j]);
                                            //pre += (pre.slice(-1) === "_") ? "" : "_";
                                            prefix.push(pre);
                                        } else {
                                            pre = prefix[j].replace(reg, prefixConfig[item][j]);
                                            //pre += (pre.slice(-1) === "_") ? "" : "_";
                                            prefix[j] = pre;
                                        }
                                    }
                                } else {
                                    //config in obj
                                    var min = parseInt(prefixConfig[item]["min"], 10);
                                    var max = parseInt(prefixConfig[item]["max"], 10);
                                    //var step = parseInt(prefixConfig[item]["step"],10) || 1 ;
                                    for (var k = 0; k < max - min + 1; k++) {
                                        if (prefix.length !== max - min + 1) {
                                            prefix.push(input.replace(reg, k + min));
                                        } else {
                                            console.log(typeof prefix[k]);
                                            prefix[k] = prefix[k].replace(reg, k + min);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }catch(e){
                    _this.batchErr.prefix = true;
                }
            } else {
                if (input === '' || input.length === 0) {
                    //if the user hasn't input the prefix then the prefix will be the same as names with '_' behind
                    //    for(var i=0;i<_this.names.length;i++){
                    //        var name = _this.names[i];
                    //        name += (name.slice(-1) === "_")? "":"_";
                    //        prefix.push(name);
                    //    }
                    prefix.push('');
                } else {
                    //if the prefixInput is filled
                    //input += (input.slice(-1) === "_")? "":"_";
                    prefix.push(input);
                }
            }
            return prefix;
        },
        generatePId: function () {
            var $parentList = $('.parentList');
            var pId = {};
            var arrPId = [];
            pId[_this.parentNode['_id']] = true;
            for (var i = 0; i < $parentList.length; i++) {
                if ($parentList.eq(i).val() && $parentList.eq(i).val() != '-1') {
                    pId[$parentList.eq(i).val()] = true
                }
            }
            for (var ele in pId) {
                arrPId.push(ele)
            }
            if (arrPId.length == 1)arrPId = arrPId.toString();
            return arrPId;
        },
        addGroup: function () {
            var _this = this;
            var groupList = document.getElementById("groupList"),
                subGroupList = document.getElementById("subGroupList"),
                group = groupList.options[groupList.selectedIndex].value,
                subGroup = subGroupList.options[subGroupList.selectedIndex].value,
                subGroupName = subGroupList.options[subGroupList.selectedIndex].text;
            //not the the default option    
            if (group !== "-1" && subGroup !== "-1") {
                var addedGroup = document.getElementById("addedGroup");
                var div = document.createElement("div"),
                    name = document.createElement("span"),
                    rmBtn = document.createElement("div"),
                    icon = document.createElement("span");

                div.className = "col-sm-3 btn";
                div.setAttribute("data-group", group);
                div.setAttribute("data-subgroup", subGroup);
                div.setAttribute("data-name", subGroupName);

                name.innerHTML = subGroupName;
                icon.className = "glyphicon glyphicon-minus";

                rmBtn.appendChild(icon);
                rmBtn.style.float = "right";

                div.appendChild(name);
                div.appendChild(rmBtn);
                addedGroup.appendChild(div);

                if (addedGroup.classList.contains("hide")) {
                    addedGroup.classList.remove("hide");
                }
                rmBtn.onclick = function (e) {
                    var addedGroup = document.getElementById("addedGroup"),
                        currentRow = e.target.parentElement.parentElement;//e.target ==> <span>
                    addedGroup.removeChild(currentRow);
                    if (addedGroup.childElementCount === 0) {
                        addedGroup.classList.add("hide");
                    }
                }
            }
        },
        removeGroup: function (e) {
            //console.log("remove");
            var addedGroup = document.getElementById("addedGroup"),
                currentRow = e.parentNode;
            addedGroup.removeChild(currentRow);
            if (addedGroup.childElementCount === 0) {
                addedGroup.classList.add("hide");
            }
        },
        getAddedGroup: function () {
            //groups in obj
            var _this = this;
            var arr = [];
            var groupRow = document.getElementById("addedGroup").childNodes;
            for (var i = 0; i < groupRow.length; i++) {
                if (groupRow[i].nodeName.toLowerCase() == 'div' && groupRow[i].hasAttribute("data-group")) {
                    var g = {};
                    g.group = groupRow[i].getAttribute("data-group");
                    g.subGroup = groupRow[i].getAttribute("data-subGroup");
                    g.name = groupRow[i].getAttribute("data-name");
                    arr.push(g);
                }
            }
            return arr;
        },
        getBindDataSource: function () {
            var _this = this;

            _this.devices.forEach(function (val, index) {
                var device = val;
                var p = device.prefix;
                var attrs = device.attrs;
                var arrP = device.arrP;
                WebAPI.get("/point_tool/searchCloudPoint/" + _this.parentNode.projId + "/" + p + "/").done(function (result) {
                    if (result.success) {
                        var data = result.data["pointTable"];
                        if (data.length == 0){
                            _this.initBindData(device);
                            return;
                        }
                        var idGroup = [];
                        for (var n = 0, len = data.length; n < len; n++) {
                            idGroup.push(data[n]._id);
                        }
                        //console.log(_this.devices[i].attrs);
                        for (var j = 0; j < attrs.length; j++) {
                            for (var k = 0; k < data.length; k++) {
                                if (attrs[j]["fullName"] === data[k]["value"]) {
                                    attrs[j]["id"] = data[k]["_id"];
                                    arrP[attrs[j]["name"]] = data[k]["_id"];
                                }
                            }
                        }
                        var postData = {"dsItemIds": idGroup};
                        WebAPI.post('/analysis/startWorkspaceDataGenPieChart', postData).done(function (result) {
                            if (result.dsItemList && result.dsItemList.length > 0) {
                                var d = result["dsItemList"];
                                for (var l = 0; l < attrs.length; l++) {
                                    for (var m = 0; m < d.length; m++) {
                                        if (attrs[l]["id"] === d[m]["dsItemId"]) {
                                            attrs[l]["value"] = d[m]["data"];
                                        }
                                    }
                                }
                            } else {
                                console.log("the data of bind point is not loaded");
                            }
                            _this.initBindData(device);
                        });
                    } else {
                        console.log("the data of prefix attrs is not loaded");
                    }
                }).fail(function(){
                    _this.initBindData(device);
                });
            })
        },
        initBindData: function (device) {
            var _this = this;
            var names = _this.names;
            var frag = document.createDocumentFragment();
            //for(var i=0,len=_this.devices.length;i<len;i++){
            var name = document.createElement("label"),
                wrap = document.createElement("div"),
                container = document.createElement("div");

            wrap.className = "form-group row";
            container.className = "container-fluid";
            container.setAttribute("data-name", device.name);
            name.className = "text-center col-sm-12 form-control-label";
            name.innerHTML = "名称(Name)：" + device.name;
            wrap.appendChild(name);
            container.appendChild(wrap);

            for (var k = 0, leng = device.attrs.length; k < leng; k++) {
                var div = document.createElement("div"),
                    lab = document.createElement("label"),
                    cnlab = document.createElement("label"),
                    btn = document.createElement("div");
                // span = document.createElement("span");

                div.className = "form-group row";
                lab.className = "text-center col-sm-4 form-control-label";
                cnlab.className = "text-center col-sm-4 form-control-label";
                btn.className = "btn text-center col-sm-3";
                // span.className = "glyphicon glyphicon-plus";

                div.id = device.attrs[k]["id"];
                lab.innerHTML = device.attrs[k]["fullName"];
                cnlab.innerHTML = device.attrs[k]["cnName"];
                btn.innerHTML = device.attrs[k]["value"];

                div.appendChild(lab);
                div.appendChild(cnlab);
                div.appendChild(btn);

                container.appendChild(div);
            }
            frag.appendChild(container);
            //}
            _this.bindDataGroup.appendChild(frag);
        },
        generateFullBindData: function () {
            var _this = this;
            var arr = [];
            //_this.prefix += (_this.prefix.slice(-1) === "_")? "":"_";
            for (var i = 0; i < _this.devices.length; i++) {
                for (var attr in _this.type["attrs"]) {
                    if (_this.type["attrs"].hasOwnProperty(attr)) {
                        var obj = {};
                        obj["fullName"] = _this.devices[i]["prefix"] + attr;
                        obj["cnName"] = _this.type["attrs"][attr]["name"];
                        obj["value"] = '--';
                        obj["id"] = null;
                        arr.push(obj);
                        _this.devices[i]["attrs"].push(obj);
                    }
                }
            }
            console.log(JSON.stringify(_this.devices));
            return arr;
        },
        onCarouselMove: function () {
            var _this = this;
            var currentIndex = $(this).find('.active').index() + 1;
            if (currentIndex !== 1) {
                //$("#skipBtn").removeAttr("disabled");
            } else {
                //$("#skipBtn").attr("disabled", "disabled").addClass("hide");
                $("#nextBtn").hide();
                $("#confirmBtn").removeClass("hide");
            }
        },
        checkValid: function (index) {
            var _this = this;
            var valid;
            if (index === 0) {
                _this.batchErr = {
                    name:false,
                    prefix:false
                };
                _this.names = _this.generateName();
                _this.prefix = _this.generatePrefix();
                if (_this.nameInput.value.trim() === "") {
                    alert("请输入设备名称");
                    _this.nameInput.focus();
                    valid = false;
                } else if (_this.batch && _this.nameConfigInput.value.trim() === "") {
                    alert("请输入名称批量设置");
                    _this.nameConfigInput.focus();
                } else if (_this.typeList.options[_this.typeList.selectedIndex].value === '-1') {
                    alert("请选择类型");
                    _this.typeList.focus();
                    valid = false;
                    // }else if(_this.prefixInput.value.trim() === ""){
                    //     alert("请输入前缀名称");
                    //     prefixInput.focus();
                    //     valid = false;
                } else if( _this.batchErr.name){
                    alert("名字批量设置格式错误，请检查");
                } else if( _this.batchErr.prefix){
                    alert("前缀批量设置格式错误，请检查");
                } else {
                    valid = true;
                }
                if (valid) {
                    console.log(_this.getAddedGroup());
                    _this.type = _this.typeList.options[_this.typeList.selectedIndex].value;
                    _this.pId = _this.generatePId();
                    _this.createDevice();
                    //if(_this.names.length == 0|| _this.prefix.length == 0)return;

                    if (_this.mode == 'edit' || _this.prefix && _this.prefix instanceof Array && _this.prefix.join('').length > 0) {
                        _this.getBindDataSource();
                        $("#createModalSld").carousel("next");
                    } else {
                        _this.closeModal(true)
                    }
                }
            }
        }
    };
    return CreateDeviceModal;
})();

/** 数据同步 */
(function ($, window) {
    var _this;

    function SyncWorker(factory) {
        _this = this;
        this.factory = factory;
        this.store = null;
    }

    SyncWorker.prototype.init = function () {};

    SyncWorker.prototype.initPagesData = function (data) {
        this.store = this.store || {};
        this.store.pages = $.extend(true, {}, data.toMap('_id'));
    };

    SyncWorker.prototype.initLayersData = function (data) {
        this.store = this.store || {};
        this.store.layers = $.extend(true, {}, data.toMap('_id'));
    };

    SyncWorker.prototype.initWidgetsData = function (data) {
        this.store = this.store || {};
        this.store.widgets = $.extend(true, {}, data.toMap('_id'));
    };

    SyncWorker.prototype.hasChange = function () {
        return this.diffPages() || this.diffLayers() || this.diffWidgets();
    };

    SyncWorker.prototype.syncPage = function () {
        var diffPages;

        if (this.store === null) {
            Log.info('data loading now');
            return;
        }

        diffOfPages = this.diffPages();
        if (diffOfPages === null) {
            Log.info('no data need to be upload.');
        } else {
            WebAPI.post('/factory/save/'+AppConfig.project.id, {
                page: diffOfPages
            }).done(function (rs) {
                if (rs.status === 'OK') {
                    Log.info('sync data success!');
                } else {
                    Log.warn('sync data failed, data process error!');
                }
            }).fail(function () {
                console.warn('sync data failed, backend error!');
            });
        }
    };

    SyncWorker.prototype.sync = function (callBack) {
        var diffs = {};
        var diffOfPages, diffOfLayers, diffOfWidgets;

        if (this.store === null) {
            Log.info('data loading now');
            return;
        }

        diffOfPages = this.diffPages();
        diffOfLayers = this.diffLayers();
        diffOfWidgets = this.diffWidgets();

        if (diffOfPages !== null) diffs['page'] = diffOfPages;
        if (diffOfLayers !== null) diffs['layer'] = diffOfLayers;
        if (diffOfWidgets !== null) diffs['widget'] = diffOfWidgets;

        if (diffOfPages === null && 
            diffOfLayers === null && 
            diffOfWidgets === null) {
            Log.info('no data need to be upload.');
            if (callBack&&(typeof callBack === 'function')) {
                callBack();
            }
        } else {
            WebAPI.post('/factory/save/'+AppConfig.project.id, diffs).done(function (rs) {
                if (rs.status === 'OK') {
                    Log.info('sync data success!');
                } else {
                    Log.warn('sync data failed, data process error!');
                }
            }).fail(function () {
                console.warn('sync data failed, backend error!');
            }).always(function () {
                if (callBack&&(typeof callBack === 'function')) {
                    callBack();
                }
            });
        }
    };

    SyncWorker.prototype.mergeDiffs = (function () {

        /** 将最终输出结果格式化成想要的方式 */
        function mergeGroup(id, group) {
            var rs = {
                _id: id,
                k: 'E'
            };
            var newDiff = null;

            // 合并所有编辑类的操作
            group.forEach(function (d) {
                var len = d.path.length;
                var kv = {};

                // 如果在这里发现有对象级别的操作，则说明随着业务逻辑的扩展，有一些新的情况没有被考虑到
                if (d.length === 1) {
                    Log.warn('page \"' + d.path[0] + '" has an unexpected operation that has not been considered, we will ignore it.');
                    return;
                }

                // 属性的新增操作
                if (d.kind === 'N') {
                    // 将此新增操作合并到编辑操作中
                    if (len === 2) {
                        rs.v[d.path[1]] = d.rhs;
                    } else {
                        Log.warn('property "' + d.path.join('.') + '" is a object, expect not a object, will ignore it and do not upload to the server.');
                    }
                }
                // 编辑操作
                else if (d.kind === 'E') {
                    // 合并编辑操作
                    if (len === 2) {
                        rs._id = d.path[0];
                        kv[d.path[1]] = d.rhs;
                        rs.v = $.extend(false, rs.v, kv);
                    } else {
                        Log.warn('property "' + d.path.join('.') + '" is a object, expect not a object, will ignore it and do not upload to the server.');
                    }
                }
                // 删除操作
                else if (d.kind === 'D') {
                    // 将此删除操作合并到编辑操作中
                    if (len === 2) {
                        if (rs.v.hasOwnProperty(d.path[1])) {
                            delete rs.v[d.path[1]];
                        }
                    } else {
                        Log.warn('property "' + d.path.join('.') + '" is a object, expect not a object, will ignore it and do not upload to the server.');
                    }
                } else {
                    Log.warn('there shouldn\'t have any type except \'N\', \'E\' or \'D\' in the group diffs, unusual type: ' + d.kind);
                }
            });

            return rs;
        }

        return function (diffs) {
            // 先按照 _id 进行分类
            var map = {};
            var rs = [];

            // 转换成 map
            diffs.forEach(function (d) {
                var id = d.path[0];
                map[id] = map[id] || [];

                // 若操作为对象层级的操作，则后续所有操作均被忽略
                if (map[id].length === 1 && map[id][0].path.length === 1) return;
                
                // 若为对象层级的操作，则覆盖所有其他操作
                if (d.path.length === 1) {
                    map[id] = [d];
                    return;
                }

                map[id].push(d);
            }, this);

            // 格式化和合并
            for (var id in map) {
                if (!map.hasOwnProperty(id)) continue;

                // 若为对象层级的操作，则跳过进一步的合并操作
                if (map[id].length === 1 && map[id][0].path.length === 1) {
                    // 格式化对象
                    if (map[id][0].kind === 'D') {
                        rs.push({
                            k: 'D',
                            _id: map[id][0].lhs['_id']
                        });
                    } else if (map[id][0].kind === 'N') {
                        rs.push({
                            k: 'N',
                            v: map[id][0].rhs
                        });
                    }
                    continue;   
                }
                // 能走到这一步的，说明都是属性级别的操作，对象层级的操作在这之前已经全部过滤掉了
                rs.push( mergeGroup(id, map[id]) );
            }

            return rs;
        }
    } ());

    SyncWorker.prototype.diffPages = function () {
        var oldData = this.store.pages;
        var newData = this.factory.getPagesData();
        var rs = null;

        if (typeof oldData === 'undefined') return null;

        newData = newData.toMap('_id');
        rs = window.diff(oldData, newData, function (lhs, rhs, path) {
            var cmp;
            if (path.length !== 2 || ['layerList'].indexOf(path[1]) === -1) return;
            cmp = window.diff(lhs, rhs);
            return cmp !== null;
        });

        if (rs !== null) {
            rs = this.mergeDiffs(rs);
            this.store.pages = $.extend(true, {}, newData);
        }

        return rs;
    };

    SyncWorker.prototype.diffLayers = function () {
        var oldData = this.store.layers;
        var newData = this.factory.getLayersData();
        var rs = null;

        if (typeof oldData === 'undefined') return null;

        newData = newData.toMap('_id');
        rs = window.diff(oldData, newData, function (lhs, rhs, path) {
            var cmp;
            // TODO: 这里的耦合要解开
            if (path.length !== 2 || ['option', 'list'].indexOf(path[1]) === -1) return;
            cmp = window.diff(lhs, rhs);
            return cmp !== null;
        });

        if (rs !== null) {
            rs = this.mergeDiffs(rs);
            this.store.layers = $.extend(true, {}, newData);
        }

        return rs;
    };

    SyncWorker.prototype.diffWidgets = function () {
        var oldData = this.store.widgets;
        var newData = this.factory.getWidgetsData();
        var rs = null;

        if (typeof oldData === 'undefined') return null;
        
        newData = newData.toMap('_id');
        rs = window.diff(oldData, newData, function (lhs, rhs, path) {
            var cmp;
            // TODO: 这里的耦合要解开
            if (path.length !== 2 || ['option', 'idDs', 'templateId'].indexOf(path[1]) === -1) return;
            cmp = window.diff(lhs, rhs);
            return cmp !== null;
        });

        if (rs !== null) {
            rs = this.mergeDiffs(rs);
            this.store.widgets = $.extend(true, {}, newData);
        }

        return rs;
    };

    SyncWorker.prototype.close = function () {
        _this = null;
        this.factory = null;
        this.store = null;
    };

    window.SyncWorker = SyncWorker;
}.call(this, jQuery, window));
/** 
 * factory Canvas 控件基类
 */

(function () {

    // 不需要重写，但需要调用的方法
    var methods = ['moveToBottom', 'getType', 'id', 'getZIndex', 'getAbsolutePosition', 'x', 'y', 'offsetX', 'offsetY', 'hasName', 'getParent', 'points', 'radius', 'strokeWidth'];

    // 需要重写的方法
    var CanvasWidgetMixin = {
        getChildren: function () {
            return this.children;
        },
        getLayer: function () {
            return this.layer;
        },
        hasShape: function (shape) {
            return this.shape === shape;
        },
        setAbsolutePosition: function (pos) {
            var model = this.store.model;
            model.update(pos);
        },
        position: function (pos) {
            var model = this.store.model;
            model.update(pos);
        },
        width: function (val) {
            if(Object.prototype.toString.call(val) === '[object Number]') {
                return this.store.model.w(val);
            }
            return this.store.model.w();
        },
        height: function (val) {
            if(Object.prototype.toString.call(val) === '[object Number]') {
                return this.store.model.h(val);
            }
            return this.store.model.h();
        }
    };

    /** 默认方法 */
    methods.forEach(function (m) {
        CanvasWidgetMixin[m] = function () {
            return this.shape[m].apply(this.shape, arguments);
        };
    });

    window.mixins = window.mixins || {};
    window.mixins.CanvasWidgetMixin = CanvasWidgetMixin;

} ());
/** 
 * factory HTML 控件基类
 */

(function () {

    var HtmlWidgetMixin = {
        type: 'html',
        name: '',
        zIndex: 1,
        getType: function () {
            return this.type;
        },
        id: function () {
            return this.shape.id;
        },
        getChildren: function () {
            return this.children;
        },
        getLayer: function () {
            return this.layer;
        },
        getZIndex: function () {
            return this.zIndex;
        },
        getAbsolutePosition: function () {
            var model = this.store.model;
            var style = window.getComputedStyle(this.layer.stage.shape);
            var left = parseFloat(style.left);
            var top = parseFloat(style.top);
            var scale = this.layer.painter.scale;

            return {
                x: model.x() * scale + left,
                y: model.y() * scale + top,
                width: model.w(),
                height: model.h()
            };
        },
        setAbsolutePosition: function (pos) {
            var model = this.store.model;
            model.update(pos);
        },
        position: function (pos) {
            var model = this.store.model;

            model.update(pos);
        },
        width: function (val) {
            if(Object.prototype.toString.call(val) === '[object Number]') {
                return this.store.model.w(val);
            }
            return this.store.model.w();
        },
        height: function (val) {
            if(Object.prototype.toString.call(val) === '[object Number]') {
                return this.store.model.h(val);
            }
            return this.store.model.h();
        },
        hasName: function (name) {
            return this.shape.classList.contains(name);
        },
        moveToBottom: function () {},
    };

    window.mixins = window.mixins || {};
    window.mixins.HtmlWidgetMixin = HtmlWidgetMixin;

} ());
(function () {

    function PagePanel(screen) {
        this.screen = screen;
        this.container = screen.pagePanelCtn;
        this.project = screen.project;

        this.treeView = null;
    }

    PagePanel.prototype.init = function () {
        this.treeView = new TreeView(this);
        this.treeView.show();
    };

    PagePanel.prototype.show = function () {};

    PagePanel.prototype.hide = function () {};

    PagePanel.prototype.initSyncWorker = function () {
        this.screen.syncWorker.initPagesData(this.getPagesData());
    };

    PagePanel.prototype.syncPage = function () {
        this.screen.syncWorker.syncPage();
    };

    PagePanel.prototype.getPagesData = function () {
        var data = this.treeView.getTreeData().map(function (o) {
            return new Model(o);
        });

        return new ModelSet(data);
    };

    PagePanel.prototype.onPageResize = function (width, height) {
        var page = this.screen.page;
        var painter = null;

        if (page) {
            painter = page.painter;
            painter.resizePage(width, height)
        }
    };

    PagePanel.prototype.close = function () {
        this.treeView.close();
        this.container.innerHTML = '';
    };

    window.PagePanel = PagePanel;

} ());

(function () {
    var _this;
    function TreeView(screen) {
        _this = this;
        this.screen = screen;
        this.container = screen.container;
        this.treeObj = undefined;
        this.openPageId = undefined;
        this.projectId = screen.project.id;

        this.init();
    }
    TreeView.prototype.layerTools = [
        {id: 'delGroupPage', name: 'Delete', icon: 'glyphicon glyphicon-trash', iconType: 1},
        {id: 'importPageTemplet', name: 'import', icon: 'glyphicon glyphicon-import', iconType: 1},
        {id: 'exportPageTemplet', name: 'export', icon: 'glyphicon glyphicon-export', iconType: 1},
        {id: 'lockPage', name: 'Lock', icon: 'glyphicon glyphicon-lock', iconType: 1},
        {id: 'editPage', name: 'Edit', icon: 'glyphicon glyphicon-edit', iconType: 1},
        {id: 'addPage', name: 'Add Page', icon: 'glyphicon glyphicon-file', iconType: 1},
        {id: 'addGroup', name: 'Add Group', icon: 'glyphicon glyphicon-folder-open', iconType: 1}
    ];

    TreeView.prototype.init = function () {
        this.container.innerHTML = '<ul id="treeControl" class="ztree"></ul>';
    };

    TreeView.prototype.show = function () {
        WebAPI.get('/factory/getPageList/' + _this.projectId+'/1').done(function (result) {
            if (result && result.data) {
                var zSetting = {
                    view: {
                        fontCss: {
                            color: "#ffffff"
                            //background: "#000000"
                        },
                        //addHoverDom: addHoverDom,
                        //removeHoverDom: removeHoverDom,
                        addDiyDom: addDiyDom
                    },
                    edit: {
                        enable: true,
                        editNameSelectAll: true,
                        showRenameBtn: true,
                        showRemoveBtn: false
                    },
                    data: {
                        keep:{
                            parent: true,
                        },
                        simpleData: {
                            enable: true,
                            idKey: 'id',
                            pIdKey: 'pId',
                            rootPId: 0
                        }
                    },
                    callback: {
                        onClick: zTreeOnClick,
                        onDblClick: zTreeOnDblClick.bind(_this),
                        beforeDrop: zTreeBeforeDrop,
                        onDrop:  zTreeOnDrop,
                        onRename: zTreeOnRename,
                        onNodeCreated: zTreeOnNodeCreated
                    }
                };
                function zTreeOnNodeCreated(event, treeId, treeNode){
                    if(treeNode.type != 'DropDownList') {
                        $("#" + treeNode.tId).addClass('tree-page-hover');
                    }
                }

                function zTreeOnClick(event, treeId, treeNode) {
                    var $liLayer = $("#" + treeNode.tId);
                    //如果按住Ctrl键,则多选,增加选中样式
                    if(event.ctrlKey){
                        if($liLayer.hasClass('curSelectedNode')){
                            $liLayer.removeClass('curSelectedNode');
                        }else {
                            $liLayer.addClass('curSelectedNode');
                        }
                    }else{
                        $liLayer.addClass('curSelectedNode');
                        $('#treeControl *').not($liLayer).removeClass('curSelectedNode');//去除选中的其他的所有的单机样式
                    }
                };

                function zTreeOnDblClick(event, treeId, treeNode) {
                    if (!treeNode.isParent) {
                        if (treeNode && treeNode.id) {
                            var openedNodes = $('#treeControl').find('.curOpenedNode');
                            if (openedNodes) {
                                openedNodes.removeClass('curOpenedNode');
                            }

                            var curNode = $('#' + treeNode.tId);
                            curNode.removeClass('curSelectedNode');
                            curNode.addClass('curOpenedNode');
                            _this.openPageId = treeNode.id;
                            // search layList
                            _this.screen.screen.showPage(treeNode);
                        }
                    }
                };

                function zTreeBeforeDrop(treeId, treeNodes, targetNode, moveType) {
                    if (!targetNode.isParent && 'inner' == moveType) {
                        return false;
                    }else if('inner' == moveType && treeNodes[0].type == 'DropDownList' && targetNode.getParentNode()){//文件夹内子节点没有文件夹
                        alert('目录下只支持三级结构！');
                        return false;
                    }else if('prev' == moveType && treeNodes[0].type == 'DropDownList' && targetNode.getParentNode().getParentNode()){//文件夹不能移动到文件夹内
                        alert('目录下只支持三级结构！');
                        return false;
                    }else if('next' == moveType && treeNodes[0].type == 'DropDownList' && targetNode.getParentNode().getParentNode()){//文件夹不能移动到文件夹内
                        alert('目录下只支持三级结构！');
                        return false;
                    }else {
                        return true;
                    }
                };
                function  zTreeOnDrop(event, treeId, treeNodes, targetNode, moveType) {
                    _this.syncPageList();
                    _this.screen.syncPage();
                }

                function zTreeOnRename(event, treeId, treeNode, isCancel) {
                    _this.screen.syncPage();
                }
/*
                function addHoverDom(treeId, treeNode) {
                    if (treeNode.isParent) {
                        var sObj = $("#" + treeNode.tId + "_span");
                        if (treeNode.editNameFlag) {
                            return;
                        }
                        if (0 == $("#addBtnPage_"+treeNode.tId).length) {
                            var addStr = "<span class='button addPage' id='addBtnPage_" + treeNode.tId + "' title='add page' onfocus='this.blur();'></span>";
                            sObj.after(addStr);
                            var btnPage = $("#addBtnPage_" + treeNode.tId);
                            if (btnPage) btnPage.bind("click", function () {
                                if (_this.treeObj) {
                                    _this.treeObj.addNodes(treeNode, {
                                        id: (100 + _this.nNodeCount),
                                        pId: treeNode.id,
                                        name: "new node" + (_this.nNodeCount++),
                                        'isParent': false
                                    });
                                }
                                return false;
                            });
                        }
                        if (0 == $("#addBtnGroup_"+treeNode.tId).length) {
                            var addStr = "<span class='button addGroup' id='addBtnGroup_" + treeNode.tId + "' title='add group' onfocus='this.blur();'></span>";
                            sObj.after(addStr);
                            var btnGroup = $("#addBtnGroup_"+treeNode.tId);
                            if (btnGroup) btnGroup.bind("click", function() {
                                if (_this.treeObj) {
                                    _this.treeObj.addNodes(treeNode, {id:(100 + _this.nNodeCount), pId:treeNode.id, name:"new node" + (_this.nNodeCount++), 'isParent':true});
                                }
                                return false;
                            });
                        }
                    }
                };
                function removeHoverDom(treeId, treeNode) {
                    if (treeNode.isParent) {
                        $("#addBtnGroup_" + treeNode.tId).unbind().remove();
                        $("#addBtnPage_" + treeNode.tId).unbind().remove();
                    }
                };
*/
                function addDiyDom(treeId, treeNode) {
                    if (treeNode.isParent) {
                        return;
                    }

                    var aObj = $("#" + treeNode.tId + "_switch");
                    var $divTreeCfg = $('<div class="treeCfg"></div>');
                    var $btnEye = $('<span class="nodeEye glyphicon"></span>');
                    var $btnLock = $('<span class="nodeLock glyphicon glyphicon-lock"></span>');
                    if (treeNode.isHide) {
                        $btnEye.addClass('glyphicon-eye-close');
                    } else {
                        $btnEye.addClass('glyphicon-eye-open');
                    }
                    if (treeNode.isLock) {
                        $btnLock.show();
                    } else {
                        $btnLock.hide();
                    }
                    $divTreeCfg.append($btnLock);
                    $divTreeCfg.append($btnEye);
                    aObj.next('a').after($divTreeCfg);
                    //aObj.next('a').after($btnEye);
                    //aObj.next('a').after($btnLock);
                    $btnEye[0].onclick = function(){
                        _this.switchEyeState($(this));
                        _this.screen.syncPage();
                    };
                    $btnLock[0].onclick = function(){
                        _this.switchLockState($(this));
                        _this.screen.syncPage();
                    };
                };

                var zProjNodes = _this.generateTreeEx(result.data);

                (function () {
                    _this.treeObj = $.fn.zTree.init($('#treeControl'), zSetting, zProjNodes);

                    var strHtml = '', $ul = $('<ul class="list-inline treeToolWrap"></ul>');
                    for(var i = 0, tool; i < _this.layerTools.length; i++){
                        tool = _this.layerTools[i];
                        if(tool.iconType == 1){
                            strHtml += ('<li><span class="'+ tool.icon +'" id="'+ tool.id +'" title="' + tool.name + '"></span></li>');
                        }
                    }
                    $ul.html(strHtml);
                    $(_this.screen.container).append($ul);

                    //国际化
                    $('#addGroup').attr('title', I18n.resource.mainPanel.layerPanel.ADD_GROUP);
                    $('#addPage').attr('title', I18n.resource.mainPanel.layerPanel.ADD_PAGE);
                    $('#delGroupPage').attr('title', I18n.resource.mainPanel.layerPanel.DELETE_PAGE);
                    $('#lockPage').attr('title', I18n.resource.mainPanel.layerPanel.LOCK_PAGE);
                    $('#importPageTemplet').attr('title', I18n.resource.mainPanel.layerPanel.IMPORT_PAGE_TEMPLET);
                    $('#exportPageTemplet').attr('title', I18n.resource.mainPanel.layerPanel.EXPORT_PAGE_TEMPLET);
                    $('#editPage').attr('title', I18n.resource.mainPanel.layerPanel.EDIT_PAGE);

                    //event
                    $('#addGroup')[0].onclick = _this.funcAddGroup;
                    $('#addPage')[0].onclick = _this.funcAddPage;
                    $('#delGroupPage')[0].onclick = _this.funcDelGroupPage;
                    $('#lockPage')[0].onclick = _this.funcLockPage;
                    $('#importPageTemplet')[0].onclick = _this.importTemplate;
                    $('#exportPageTemplet')[0].onclick = _this.exportTemplate;
                    $('#editPage')[0].onclick = _this.funcEditPage;
                } ());
            }
        }).always(function (e) {
            _this.screen.initSyncWorker();
        });
    };

    TreeView.prototype.remove = function () {

    };

    TreeView.prototype.generateTreeEx = function (arr) {
        var result = [];
        var params;
        for (var i = 0, len = arr.length; i < len; i++) {
            var item = arr[i];
            params = {id:item._id, pId:item.parent, name:item.text +' - '+ item.type, type: item.type};
            if ('DropDownList' == item.type) {
                params = {id:item._id, pId:item.parent, name:item.text, type: item.type};
                params.isParent = true;
                result.push(params);
            }
            else if ('PageScreen' == item.type) {
                params.isParent = false;
                params.isHide = item.isHide;
                params.isLock =item.isLock;
                params.layerList = item.layerList;
                params.width = item.width;
                params.height = item.height;
                params.display = item.display;
                result.push(params);
            }
            else {
                params.isParent = false;
                params.isHide = item.isHide;
                params.isLock =item.isLock;
                result.push(params);
            }
        }
        return result;
    };

    TreeView.prototype.generateTree = function (arr) {
        arr.sort(function (a, b) {
            return parseInt(a._id, 16) > parseInt(b._id, 16);
        });

        var dataTree = [];
        for (var i = 0, lenI = arr.length; i < lenI; i++) {
            if ('DropDownList' == arr[i].type && !arr[i].parent) {
                dataTree.push({'id': arr[i]._id, 'name': arr[i].text, 'isParent': true, 'children': []});
            }
        }
        for (var i = 0, lenI = arr.length; i < lenI; i++) {
            if ('DropDownList' == arr[i].type && arr[i].parent) {
                for (var j = 0, lenJ = dataTree.length; j < lenJ; j++) {
                    this.setNode(arr[i], dataTree[j]);
                }
            }
        }
        for (var i = 0, lenI = arr.length; i < lenI; i++) {
            if ('DropDownList' != arr[i].type) {
                if (!arr[i].parent) {
                    dataTree.push({'id': arr[i]._id, 'name': arr[i].text, 'isParent': false});
                }
                else {
                    for (var j = 0, lenJ = dataTree.length; j < lenJ; j++) {
                        this.setLeaf(arr[i], dataTree[j]);
                    }
                }
            }
        }
        return dataTree;
    };

    TreeView.prototype.setNode = function (node, tree) {
        if (node.parent == tree.id && tree.isParent) {
            tree.children.push({'id': node._id, 'name': node.text, 'isParent': true, 'children': []});
            return;
        }
        else {
            for (var i = 0, len = tree.children.length; i < len; i++) {
                this.setNode(node, tree.children[i]);
            }
        }
    };

    TreeView.prototype.setLeaf = function (node, tree) {
        if (tree.children) {
            if (node.parent == tree.id && tree.isParent) {
                tree.children.push({'id': node._id, 'name': node.text, 'isParent': false});
                return;
            }
            else {
                for (var i = 0, len = tree.children.length; i < len; i++) {
                    this.setLeaf(node, tree.children[i]);
                }
            }
        }
    };

    TreeView.prototype.switchLockState = function ($lock) {
        var model = this.getModelByTreeNode($lock);
        if(!model) return;
        if($lock.is(':hidden')){
            model.isLock = 1;
        }else{
            model.isLock = 0;
        }
        $lock.toggle();
    };

    TreeView.prototype.switchEyeState = function ($eye) {
        var model = this.getModelByTreeNode($eye);
        if(!model) return;
        if($eye.hasClass('glyphicon-eye-open')){
            model.isHide = 1;
            $eye.removeClass('glyphicon-eye-open').addClass('glyphicon-eye-close');
        }else{
            model.isHide = 0;
            $eye.removeClass('glyphicon-eye-close').addClass('glyphicon-eye-open');
        }
    };

    TreeView.prototype.getModelByTreeNode = function ($obj) {
        var treeNodeId = $obj.parent().parent().attr('id');
        return this.treeObj.getNodeByTId(treeNodeId);
    };

    TreeView.prototype.funcAddGroup = function () {
        if (_this.treeObj) {
            var parentId = null,grandfatherId = null;
            var parentNode = null,grandfatherNode = null;
            var index = 0;
            var selectNodes = _this.treeObj.getSelectedNodes();
            if (selectNodes.length > 0) {
                parentId = selectNodes[0].parentTId;
                parentNode = _this.treeObj.getNodeByTId(parentId);
                if(parentNode){
                    grandfatherId = parentNode.parentTId;
                    grandfatherNode = _this.treeObj.getNodeByTId(grandfatherId);
                }
                index = selectNodes[0].getIndex();
            };
            if(grandfatherNode){
                  alert('目录下只支持三级结构！');
            }else{
                var newId = ObjectId();
                var newNode = {id:newId, pId:parentId, name:'new node', 'isParent':true, 'open':true, type: 'DropDownList'};
                var ret = _this.treeObj.addNodes(parentNode, index, newNode);
                _this.treeObj.editName(ret[0]);
                _this.screen.syncPage();
            }
            _this.syncPageList();
        }
    };

    TreeView.prototype.funcAddPage = function () {
        $(".modal-title").html("Add Page")
        PageEditModal.show({name:'Untitled', type:'PageScreen', width:1366, height:650,disabled:0,display:0}, _this.callbackAddPage);
    };

    TreeView.prototype.callbackAddPage = function (pageCfg) {
        if (_this.treeObj) {
            var parentId = null;
            var parentNode = null;
            var index = 0;
            var selectNodes = _this.treeObj.getSelectedNodes();
            var newNode = {id: ObjectId(), pId:null, name:pageCfg.name, isParent:false, isHide:0, isLock:0, type: pageCfg.type};
            var ret;

            switch (pageCfg.type) {
                case 'PageScreen':
                    newNode = $.extend(false, newNode, {layerList:[], width: pageCfg.width, height: pageCfg.height, display:pageCfg.display});
                    break;
                case 'EnergyScreen':
                case 'FacReportScreen':
                case 'FacReportWrapScreen':
                    break;
                default: return;
            }

            if (selectNodes.length > 0) {
                parentId = selectNodes[0].parentTId;
                parentNode = _this.treeObj.getNodeByTId(parentId);
                index = selectNodes[0].getIndex();
            };
            
            ret = _this.treeObj.addNodes(parentNode, index, newNode);
            _this.screen.syncPage();

            // 显示类型更新
            $('#'+ret[0].tId+'_span').text(pageCfg.name + ' - ' + pageCfg.type);
            //同步pageList
            _this.syncPageList();
            //新建页面，默认进入页面
            $('#'+ret[0].tId+'_a').dblclick();
        }
    };

    TreeView.prototype.funcDelGroupPage = function () {
        var removeNodesIds = [];
        if (_this.treeObj) {
            var selectNodes = _this.treeObj.getSelectedNodes();
            if (selectNodes.length < 1) {
                return;
            };

            var show = '';
            for (var i = 0, len = selectNodes.length; i < len; i++) {
                show += selectNodes[i].name + '\n';
            }
            show += 'Be sure to delete ?';
            //TODO 测试confirm
            confirm(show, function () {
                for (var i = 0, len = selectNodes.length; i < len; i++) {
                    // 判断 selectNodes[i] 是不是文件夹，如果是，拿到它的所有非文件夹的直接子元素；
                    // 如果不是，直接进行删除操作
                    if (selectNodes[i].isParent && selectNodes[i].children) {
                        // 是文件夹
                        selectNodes[i].children.forEach(function (child) {
                            if (!child.isParent) {
                                removeNodesIds.push(child.id);
                            }
                        });
                    }
                    // 不是文件夹
                    else {
                        removeNodesIds.push(selectNodes[i].id);
                    }
                    _this.treeObj.removeNode(selectNodes[i], true);
                }

                if (_this.screen.screen.page) {
                    if (removeNodesIds.indexOf(_this.openPageId) > -1 ) {
                        _this.screen.screen.page.close();
                    }
                }
                _this.screen.syncPage();
                _this.syncPageList();
            });
        }
    };

    TreeView.prototype.funcLockPage = function () {
        if (_this.treeObj) {
            var selectNodes = _this.treeObj.getSelectedNodes();
            if (selectNodes.length > 0) {
                selectNodes.forEach(function(item) {
                    _this.switchLockState($('#' + item.tId).find('.nodeLock'));
                });
            }
            _this.screen.syncPage();
        }
    };

    TreeView.prototype.importTemplate = function () {
        //todo
        MaterialModal.show(['page'], function (data) {
            console.log(data);
        });
        // setTimeout(function(){
        //     $('#materiaModal .pageBox').dblclick(function(){
        //         var id = this.id;
        //         if (_this.treeObj) {
        //             var parentId = null;
        //             var parentNode = null;
        //             var index = 0;
        //             var selectNodes = _this.treeObj.getSelectedNodes();
        //             if (selectNodes.length > 0) {
        //                 parentId = selectNodes[0].parentTId;
        //                 parentNode = _this.treeObj.getNodeByTId(parentId);
        //                 index = selectNodes[0].getIndex();
        //             };
        //             var newId = ObjectId();
        //             var newNode = {id:newId, pId:null, name:'new node', 'isParent':false, 'isHide':0, 'isLock':0, 'layerList':[]};
        //             var ret = _this.treeObj.addNodes(parentNode, index, newNode);
        //             //_this.treeObj.editName(ret[0]);
        //         }
        //     });
        // }, 1500);

    };

    TreeView.prototype.exportTemplate = function () {
        var selectNodes = _this.treeObj.getSelectedNodes();
        var templateName, data;
        if (selectNodes.length <= 0) {
            alert('请选择一个需要导出的页面！');
            return;
        }
        templateName = prompt('输入模板名称');
        if(!templateName) return;

        data = {
            _id: ObjectId(),
            pageId: selectNodes[0].id,
            name: templateName,
            creator: AppConfig.userId,
            time: new Date().format('yyyy-MM-dd HH:mm:ss'),
            'public': 1,
            group: '',
            type: 'page',
            content: {
                width: selectNodes[0].width,
                height: selectNodes[0].height,
                display: selectNodes[0].display
            }
        }

        // 如果 page 存在，则不用去后台查找
        if(_this.screen.screen.page) {
            data.content.template = JSON.stringify({
                layers: painter.screen.getLayersData().serialize(),
                widgets: painter.screen.getWidgetsData().serialize()
            })
        }
        WebAPI.post('/factory/material/save', data
            ).done(function(result){
                if(result && result._id){
                    data._id = result._id;
                }
            }).always(function(){});
    };

    TreeView.prototype.funcEditPage = function () {
        $(".modal-title").html("Edit Page");
        var selectNodes = _this.treeObj.getSelectedNodes();
        if (selectNodes && selectNodes.length === 1 ) {
             if(selectNodes[0].type == 'DropDownList'){
                 var $spanLayer = $("#" + selectNodes[0].tId+ "_a");//重命名的对象
                 $spanLayer.children('span.edit').click();//触发ztree控件的一个按钮重命名点击事件
             }else {
                 if(!selectNodes[0].display) {
                     selectNodes[0].display = 0;
                 }
                 var src = {name:selectNodes[0].name, type:selectNodes[0].type, width:selectNodes[0].width, height:selectNodes[0].height, disabled:1, display:selectNodes[0].display};
                 PageEditModal.show(src, _this.callbackEditPage);
             }
        }else {
            alert('必须选中或者不能同时改多个文件的name！')
        }
    };

    TreeView.prototype.callbackEditPage = function (pageCfg) {
        var selectNodes = _this.treeObj.getSelectedNodes();
        if (selectNodes && selectNodes.length > 0) {
            selectNodes[0].name = pageCfg.name;
            selectNodes[0].type = pageCfg.type;
            selectNodes[0].width = pageCfg.width;
            selectNodes[0].height = pageCfg.height;
            selectNodes[0].display = pageCfg.display;
            _this.treeObj.updateNode(selectNodes[0]);
            _this.screen.syncPage();

            // 显示类型更新
            $('#'+selectNodes[0].tId+'_span').text(pageCfg.name + ' - ' + pageCfg.type);

            // 更新页面大小
            _this.screen.onPageResize(pageCfg.width, pageCfg.height);
        }
    };

    TreeView.prototype.getTreeData = function () {
        if (!_this.treeObj) {
            return null;
        }
        else {
            var arr = _this.treeObj.transformToArray(_this.treeObj.getNodes());
            var ret = [];
            var type = '';
            var pId = '';
            for (var i = 0, len = arr.length, item, p; i < len; i++) {
                item = arr[i];
                pId = '';
                for (var j = 0, len2 = arr.length; j < len2; j++) {
                    if (item.parentTId === arr[j].tId) {
                        pId = arr[j].id;
                        break;
                    }
                }
                p = {_id:item.id, parent:pId, text:item.name, type:item.type}

                switch(item.type) {
                    case 'PageScreen':
                        ret.push( $.extend(false, p, {isHide:item.isHide, isLock:item.isLock, layerList:item.layerList, width:item.width, height:item.height, display:item.display}) );
                        break;
                    default:
                        ret.push( $.extend(false, p, {isHide:item.isHide, isLock:item.isLock}) );
                        break;
                };
            }
            return ret;
        }
    };

    TreeView.prototype.close = function () {
        _this.treeObj && _this.treeObj.destroy();
    };

    TreeView.prototype.syncPageList = function(){
        var pageList = [];
        var treeData = this.getTreeData();
        if(!treeData || treeData.length == 0) return;
        treeData.forEach(function(data){
            pageList.push(data._id);
        });
        // 保存页面列表顺序
        WebAPI.post('/factory/modifyPageList/' + AppConfig.project.id, {pageList: pageList}).done(function(result){
            if(result.status && result.status == "OK"){
                //todo nothing
            }
        });
    }

    window.TreeView = TreeView;

}());
(function () {
    var _this;
    function DataSourcePanel(screen) {
        _this = this;
        this.screen = screen;
        this.container = screen.dataSourcePanelCtn;
        this.project = screen.project;
        this.store = {};
        window.ElScreenContainer = this.container;
        this.arrColor = ["#ff7f50", "#87cefa", "#da70d6", "#32cd32", "#6495ed", "#ff69b4", "#ba55d3", "#cd5c5c", "#ffa500", "#40e0d0", "#1e90ff", "#ff6347", "#7b68ee", "#00fa9a", "#ffd700", "#6699FF", "#ff6666", "#3cb371", "#b8860b", "#30e0e0"];
    }

    DataSourcePanel.prototype.init = function () { };

    DataSourcePanel.prototype.show = function () {
        // 如果已经预加载过了，则直接显示
        if (typeof _this.store.group !== 'undefined') return;

        $(_this.container).append('<div id="dataSrcContain" class="gray-scrollbar" style="height: 100%;overflow-y: auto;"></div>');

        if (!AppConfig.datasource) {
            // 如果没有预加载，则先去加载数据，再做显示
            Spinner.spin(_this.container);
            WebAPI.get('/datasource/get/' + AppConfig.userId).done(function (result) {
                _this.store.group = result.group;

                AppConfig.datasource = _this.paneDatasource = new DataSource(_this);

                _this.paneDatasource.show();

            }).always(function (e) {
                Spinner.stop();
            });
        } else {
            this.store.group = AppConfig.datasource.m_parent.store.group;
            this.paneDatasource = AppConfig.datasource = new DataSource(this);
            this.paneDatasource.show();
        }
    };

    DataSourcePanel.prototype.hide = function () {};

    window.DataSourcePanel = DataSourcePanel;

} ());
(function () {
    var _this;
    function LayerPanel(screen) {
        _this = this;
        this.screen = screen;
        this.container = screen.layerPanelCtn;
        this.treeObj = undefined;
        this.store = undefined;
        this.parentTree = undefined;

        this.painter = this.screen.painter;
    }
    LayerPanel.prototype.layerTools = [
        {id: 'delLayer', name: 'delete', icon: 'glyphicon glyphicon-trash', iconType: 1},
        {id: 'importLayerTemplet', name: 'import', icon: 'glyphicon glyphicon-import', iconType: 1},
        {id: 'exportLayerTemplet', name: 'export', icon: 'glyphicon glyphicon-export', iconType: 1},
        {id: 'lockLayer', name: 'lock', icon: 'glyphicon glyphicon-lock', iconType: 1},
        {id: 'editLayer', name: 'edit', icon: 'glyphicon glyphicon-edit', iconType: 1},
        {id: 'addLayer', name: 'create', icon: 'glyphicon glyphicon-file', iconType: 1}
    ];
    LayerPanel.prototype.defaultSetting = {
        view:{
            fontCss:{
                color: '#fff'
            },
            addDiyDom: addDiyDom,
            showLine: false
        },
        edit:{
            enable: true,
            showRemoveBtn: false,
			showRenameBtn: true,
            drag:{
                isCopy: true,
                isMove: true,
                prev: true,
                inner: false,
                next: true
            }
        },
        callback:{
            beforeDrag: beforeDrag,
            beforeDrop: beforeDrop,
            onRename: zTreeOnRename,
            onClick: zTreeOnClick,
            onDrop: zTreeOnDrop,
            beforeClick: zTreeBeforeClick
        }
    };

    LayerPanel.prototype.init = function () {};

    LayerPanel.prototype.show = function () {
        this.initTools();
        this.store = this.screen.store.layerModelSet;
        this.bindLayerModelInsert();
        this.bindLayerModelRemove();
        this.bindLayerModelSetOb();
        //如果有选中图层,则显示选中图层
        if(this.painter.state.activeLayers().length > 0){
            var layerId = undefined, nodeId = undefined, node;
            //如果只有一个选中图层,触发该图层dom的click事件
            if(this.painter.state.activeLayers().length == 1){
                layerId = this.painter.state.activeLayers()[0].store.model._id();
                layerId && (nodeId = this.treeObj.getNodeByParam('modelId',layerId).tId);
                nodeId && $('#' + nodeId + '_a').click();
            }else{//如果有多个选中图层,增加选中样式
                this.painter.state.activeLayers().forEach(function(layer){
                    layerId = layer.store.model._id();
                    node = _this.treeObj.getNodeByParam('modelId',layerId);
                    if(!node) return;
                    $('#' + node.tId + '_a').addClass('curSelectedNode');
                });
            }
        }else if(this.treeObj.getNodes().length > 0){//选中第一图层
            $('#' + this.treeObj.getNodes()[0].tId + '_a').click();
        }else{
            setTimeout(function(){
                if(_this.treeObj.getNodes().length > 0){
                    $('#' + _this.treeObj.getNodes()[0].tId + '_a').click();
                }
            }, 500)
        }
    };

    LayerPanel.prototype.hide = function () {
        this.store.removeEventListener('insert', this.bindLayerModelInsert, this);
        this.store.removeEventListener('remove', this.bindLayerModelRemove, this);
        this.treeObj && this.treeObj.destroy();
    };

    LayerPanel.prototype.bindLayerModelOb = function (model) {
        model.addEventListener('update', function (e) {
            Log.info('update values');
        });
    };

    LayerPanel.prototype.bindLayerModelSetOb = function () {
        this.store.addEventListener('insert', this.bindLayerModelInsert, this);
        this.store.addEventListener('remove', this.bindLayerModelRemove, this);
    };

    LayerPanel.prototype.bindLayerModelInsert = function(e, data){
        var arr = undefined;
        this.count = 0;//canvas 图层节点在tree的插入位置
        if(!e) {
            arr = this.store.models;
        }else{
            arr = data.models;
        }
        arr.forEach(function (model) {
            this.bindLayerModelOb(model);
            this.addZTreeNode(model);
        }, this);
    };

    LayerPanel.prototype.bindLayerModelRemove = function(e, data){
        if(!data || !data.models) return;
        data.models.forEach(function(model){
            _this.treeObj.removeNode(_this.treeObj.getNodeByParam('modelId',model._id()));
        });
    };

    LayerPanel.prototype.add = function () {
        var layerId = undefined, nodeId = undefined;
        var name = _this.generateLayerName();
        var opt = {
            _id: ObjectId(),
            type: "canvas",
            name: name,
            isLock: 0,
            isHide: 0,
            list: [],
            option: {}
        };
        _this.store.prepend(new NestedModel(opt));
        //新建图层默认进入图层
        layerId = opt._id;
        layerId && (nodeId = _this.treeObj.getNodeByParam('modelId',layerId).tId);
        nodeId && $('#' + nodeId + '_a').click();

    };

    LayerPanel.prototype.remove = function () {
        var layerLen = _this.treeObj.getSelectedNodes();
        if(layerLen.length < 1) {
            return
        }else {
            confirm('是否要删除所选图层！',function(){
                 _this.painter.setActiveWidgets();
                for(var i = 0, model = undefined; i < layerLen.length; i++){
                    model = _this.store.findByProperty('_id',layerLen[i].modelId);
                    if(model.type() == 'html' || model.type() == 'bg'){
                        alert(I18n.resource.mainPanel.layerPanel.DELETE_INFO);//'Html图层和背景图层不能被删除'
                    }else if(model.isLock() == 1){//被锁定的图层不能删除
                        alert(I18n.resource.mainPanel.layerPanel.DELETE_INFO_TIP);//'不可以删除被锁定的图层'
                    }else{
                        _this.store.remove(model);
                    }
                }
            },function(){
                return;
            });
        };
    };

    //锁定图层
    LayerPanel.prototype.lockLayer = function () {
        if(_this.treeObj.getSelectedNodes().length > 0){
            _this.treeObj.getSelectedNodes().forEach(function(layer){
                //更改isLock字段
                _this.store.findByProperty('_id',layer.modelId).isLock(1);
                _this.switchLockState($('#' + layer.tId + '_a').next('.glyphicon'));
            });
        }
    };
    //重命名函数
    LayerPanel.prototype.editLayer = function () {
        if(_this.treeObj.getSelectedNodes().length === 1){//只有选中一个才能触发
            var $spanLayer = $("#" + _this.treeObj.getSelectedNodes()[0].tId+ "_a");//重命名的对象
            $spanLayer.children('.button.edit').click();//触发ztree控件的一个按钮重命名点击事件
        }
    };
    LayerPanel.prototype.importTemplate = function () {
        MaterialModal.show(['layer'], function (data) {
            var content = data.content;
            var layerId = ObjectId();
            var widgets = [];

            if (_this.treeObj) {
                // 添加新图层
                _this.store.append(new NestedModel({
                    _id: layerId,
                    isHide: 0,
                    isLock: 0,
                    list: [],
                    name: data.name,
                    option: {},
                    type: content.type
                }));
                // 添加新控件
                // 更新 layerId
                widgets = content.widgets.map(function (row) {
                    row._id = ObjectId();
                    row.layerId = layerId;
                    return new NestedModel(row);
                });
                _this.screen.store.widgetModelSet.append(widgets);
            }
        });
    };

    LayerPanel.prototype.exportTemplate = function () {
        var layer = _this.treeObj.getSelectedNodes();
        var templateName, data;

        if (layer.length !== 1) {
            alert(I18n.resource.mainPanel.layerPanel.EXPORT_INFO);//'请选择一个图层!'
            return;
        }

        layer = layer[0];
        if (layer.type !== 'canvas') {
            alert(I18n.resource.mainPanel.layerPanel.EXPORT_INFO_TIP);//'目前只支持 canvas 图层模板的导出'
            return;
        }
        templateName = prompt('输入模板名称');
        if(!templateName) return;
        data = {
            _id: ObjectId(),
            name: templateName,
            creator: AppConfig.account,
            time: new Date().format('yyyy-MM-dd HH:mm:ss'),
            'public': 1,
            group: [],
            type: 'layer',
            content: {
                isHide: layer.isHide,
                isLock: layer.isLock,
                list: layer.list,
                name: layer.name,
                option: layer.option || {},
                type: layer.type,
                widgets: (function (widgetModelSet) {
                    var widgets = widgetModelSet.findListByProperty('layerId', layer.modelId) || [];
                    return widgets.map(function (row) {
                        return row.serialize();
                    });
                } (painter.screen.getWidgetsData()))
            }
        };
        WebAPI.post('/factory/material/save', data
        ).done(function(result){
            if(result && result._id){
                data._id = result._id;
            }
        }).always(function(){

        });
    };

    LayerPanel.prototype.switchLockState = function ($lock) {
        var model = this.getModelByTreeNode($lock);
        if(!model) return;
        if($lock.is(':hidden')){
            model.isLock(1);
        }else{
            model.isLock(0);
        }
        $lock.toggle();
    };

    LayerPanel.prototype.switchEyeState = function ($eye) {
        var model = this.getModelByTreeNode($eye);
        if(!model) return;
        if($eye.hasClass('glyphicon-eye-open')){
            model.isHide(1);
            $eye.removeClass('glyphicon-eye-open').addClass('glyphicon-eye-close');
        }else{
            model.isHide(0);
            $eye.removeClass('glyphicon-eye-close').addClass('glyphicon-eye-open');
        }

    };

    LayerPanel.prototype.getModelByTreeNode = function ($obj) {
        var treeNodeId = $obj.parent().attr('id');
        var treeNode = this.treeObj.getNodeByTId(treeNodeId);
        var model = this.store.findByProperty('_id', treeNode.modelId);
        return model;
    }

    LayerPanel.prototype.close = function () {
        this.screen = null;
        this.store = null;
        this.container = null;
        this.painter = null;

        this.treeObj.destroy();
        this.treeObj = null;
        this.count = null;
        this.container.innerHTML = '';
    };

    LayerPanel.prototype.initTools = function () {
        this.parentTree && this.parentTree.remove();
        $('.layerTopToolWrap').remove();
        this.container.innerHTML = '';
        var strHtml = '', $ul = $('<ul class="list-inline layerTopToolWrap toolWrap"></ul>');
        $(this.container).append('<ul id="parentTree" class="ztree"></ul>');
        for(var i = 0, tool; i < this.layerTools.length; i++){
            tool = this.layerTools[i];
            if(tool.iconType == 1){
                strHtml += ('<li><span class="'+ tool.icon +'" id="'+ tool.id +'"></span></li>');
            }
        }
        $ul.html(strHtml);
        $(this.container).append($ul);

        $('#addLayer').attr('title', I18n.resource.mainPanel.layerPanel.ADD_LAYER);
        $('#editLayer').attr('title', I18n.resource.mainPanel.layerPanel.EDIT_LAYER);
        $('#lockLayer').attr('title', I18n.resource.mainPanel.layerPanel.LOCK_LAYER);
        $('#exportLayerTemplet').attr('title', I18n.resource.mainPanel.layerPanel.EXPORT_LAYER_TEMPLET);
        $('#importLayerTemplet').attr('title', I18n.resource.mainPanel.layerPanel.IMPORT_LAYER_TEMPLET);
        $('#delLayer').attr('title', I18n.resource.mainPanel.layerPanel.DELETE_LAYER);

        this.parentTree = $('#parentTree');
        this.treeObj = $.fn.zTree.init(this.parentTree, this.defaultSetting, []);
        //event
        $('#addLayer')[0].onclick = this.add;
        $('#delLayer')[0].onclick = this.remove;
        $('#lockLayer')[0].onclick = this.lockLayer;
        $('#importLayerTemplet')[0].onclick = _this.importTemplate;
        $('#exportLayerTemplet')[0].onclick = _this.exportTemplate;
        $('#editLayer')[0].onclick = _this.editLayer;
    };

    LayerPanel.prototype.addZTreeNode = function(model){
        var zNode= {}, value = model.serialize(), index = 1;//index 图层层级设置
        zNode.modelId = value._id;
        //是否隐藏
        zNode.isHide = value.isHide;
        //是否锁定
        zNode.isLock = value.isLock;
        // 图层类型
        zNode.type = value.type;
        // option
        zNode.option = value.option;
        // list
        zNode.list = value.list;
        //图层名字
        if(!value.name){
            if(value.type == 'html'){
                zNode.name = 'html';
            }else if(value.type == 'bg'){
                zNode.name = '背景';
            }else{
                zNode.name = this.generateLayerName();
            }
        }else{
            zNode.name = value.name;
        }
        //图层顺序
        if(value.type == 'html'){
            index = 0;
            zNode.drag = false;
            zNode.drop = false;
        }else if(value.type == 'bg'){
            index = -1;
            zNode.drag = false;
            zNode.drop = false;
        }else{
            this.count ++;
            index = this.count;
        }
        _this.treeObj.addNodes(null, index, new Array(zNode));//html图层在最高层
    };
    //判断工具是否可用
    LayerPanel.prototype.toolbarDisable = function (selectedNodes) {
        //判断工具是否可用
        function isDisabled($current, judgeStr) {
            if (judgeStr) {
                $current.removeAttr('disabled').css('color', 'inherit');
            } else {
                $current.attr('disabled', 'disabled').css('color', 'rgba(255, 255, 255, 0.35)');
            }
        }
        var $toolbar = $('#toolbar'); //_this.screen.factoryScreen.page.toolbar.container;_this.screen.factoryScreen.page.toolbar.tools
        var $toolbarText = $toolbar.find('button[data-type="textCtrl"]');
        var $textSvg = $toolbarText.find('text');
        var $toolbarBtn = $toolbar.find('button[data-type="btnCtrl"]');
        var $toolbarHtml = $toolbar.find('button[data-type="htmlCtrl"]');
        var $toolbarScreen = $toolbar.find('button[data-type="screenCtrl"]');
        var $toolbarImg = $toolbar.find('button[data-type="imgeCtrl"]');
        var $toolbarPipe = $toolbar.find('button[data-type="pipeCtrl"]');
        if (selectedNodes.length > 1) {
            $textSvg.css('fill', 'rgba(255, 255, 255, 0.35)');
            isDisabled($toolbarText, false);
            isDisabled($toolbarBtn, false);
            isDisabled($toolbarHtml, false);
            isDisabled($toolbarScreen, false);
            isDisabled($toolbarImg, false);
            isDisabled($toolbarPipe, false);
        } else {
            if (selectedNodes[0].type === 'html') {
                isDisabled($toolbarText, true);
                $textSvg.css('fill', 'inherit');
                isDisabled($toolbarBtn, true);
                isDisabled($toolbarHtml, true);
                isDisabled($toolbarScreen, true);
                isDisabled($toolbarImg, false);
                isDisabled($toolbarPipe, false);
            } else if (selectedNodes[0].type === 'canvas') {
                isDisabled($toolbarText, false);
                $textSvg.css('fill', 'rgba(255, 255, 255, 0.35)');
                isDisabled($toolbarBtn, false);
                isDisabled($toolbarHtml, false);
                isDisabled($toolbarScreen, false);
                isDisabled($toolbarImg, true);
                isDisabled($toolbarPipe, true);
            } else {
                $textSvg.css('fill', 'rgba(255, 255, 255, 0.35)');
                isDisabled($toolbarText, false);
                isDisabled($toolbarBtn, false);
                isDisabled($toolbarHtml, false);
                isDisabled($toolbarScreen, false);
                isDisabled($toolbarImg, false);
                isDisabled($toolbarPipe, false);
            }
        }
    };
    LayerPanel.prototype.generateLayerName = function(){
        var max = 0, curtOrder = 0;
        this.parentTree.children('li').each(function(){
            curtOrder = $(this).children('a').children('span:nth-child(2)').text().split(' ');
            if(curtOrder.length > 1) {
                curtOrder = parseInt(curtOrder[1]);
                if(curtOrder > max){
                    max = curtOrder;
                }
            }
        });
        return 'layer '+ (max + 1);
    };

    function addDiyDom(treeId, treeNode) {
        var aObj = $("#" + treeNode.tId + "_switch");
        var $btnEye = $('<span class="glyphicon"></span>');
        var $btnLock = $('<span class="glyphicon glyphicon-lock"></span>');
        var $spanLayer = $("#" + treeNode.tId + "_a").children('span:nth-child(2)');
        //是否可见
        if(treeNode.isHide){
            $btnEye.addClass('glyphicon-eye-close');
        }else{
            $btnEye.addClass('glyphicon-eye-open');
        }
        //是否锁定
        if(treeNode.isLock){
            $btnLock.show();
        }else{
            $btnLock.hide();
        }
        aObj.before($btnEye);
        aObj.next('a').after($btnLock);
        $btnEye[0].onclick = function(){
            _this.switchEyeState($(this));
        };
        $btnLock[0].onclick = function(){
            _this.switchLockState($(this))
        };
        $spanLayer[0].ondblclick = function(){
            $(this).next('.button.edit').click();
        }
    };

    function beforeDrag(treeId, treeNodes) {
        for (var i=0,l=treeNodes.length; i<l; i++) {
            if (treeNodes[i].drag === false) {
                return false;
            }
        }
        return true;
    }
    function beforeDrop(treeId, treeNodes, targetNode, moveType) {
        return targetNode ? targetNode.drop !== false : true;
    }

    function zTreeOnRename(event, treeId, treeNode, isCancel){
        var model = _this.store.findByProperty('_id', treeNode.modelId);
        model.name(treeNode.name);
    }
    function zTreeBeforeClick() {
        if (arguments[2] === 0) {
            var selectedNodes = _this.treeObj.getSelectedNodes();
            if (selectedNodes.length === 1) {
                return false;
            }
        }
    }
    function zTreeOnClick(event, treeId, treeNode) {
        var selectedNodes = _this.treeObj.getSelectedNodes();
        var $liLayer = $("#" +treeNode.tId);
        var layerId =[];

            //如果按住Ctrl键,则多选,增加选中样式
        if (event.ctrlKey) {
            if ($liLayer.hasClass('curSelectedNode')) {
                $liLayer.removeClass('curSelectedNode');
            } else {
                $liLayer.addClass('curSelectedNode');
        }
            _this.toolbarDisable(selectedNodes);
        } else {
            $liLayer.addClass('curSelectedNode').siblings('li').removeClass('curSelectedNode');
            //判断特定图层，不可用的工具紧灰
            _this.toolbarDisable(selectedNodes);
        }

        if (selectedNodes instanceof Array && selectedNodes.length >0) {
            selectedNodes.forEach(function (node) {
                layerId.push(node.modelId);
        });
        }
        _this.painter.setActiveLayers(layerId);
    }

    function zTreeOnDrop(event, treeId, treeNodes, targetNode, moveType) {
        var from, to;
        var modelSet;

            // 过滤无效操作
        if (moveType === null || moveType === 'inner') return false;

            // 同一时间，只能拖拽移动一个元素
        if (treeNodes.length > 1) {
            alert(I18n.resource.mainPanel.layerPanel.DRAG_LAYER_INFO); //'请选择一个图层进行拖拽！'
            return false;
        }

        modelSet = _this.screen.store.layerModelSet;
        from = modelSet.indexOf(modelSet.findByProperty('_id', treeNodes[0].modelId));
        to = modelSet.indexOf(modelSet.findByProperty('_id', targetNode.modelId));

            // move operation
        modelSet.move(from, to);
    };

    window.LayerPanel = LayerPanel;

} ());
(function () {
    var _this;
    function PropertyPanel(screen) {
        _this = this;
        this.screen = screen;
        this.container = screen.propPanelCtn;
        this.state = screen.painter.state;
        this.$propertyList = undefined;
        this.widgetProp = undefined;
    }

    PropertyPanel.prototype.init = function () {
        this.$propertyList && this.$propertyList.remove();
        this.container.innerHTML = '';
        $(this.container).append('<ul id="propertyList" class="list-unstyled gray-scrollbar"></ul>');
        this.$propertyList = $('#propertyList');
        this.bindStateOb();
    };

    PropertyPanel.prototype.close = function () {
        if(this.$propertyList){
            this.$propertyList.next().remove();
            this.$propertyList.remove();
        }
        this.screen = null;
        this.container = null;
        this.state = null;
        this.$propertyList = null;
        this.widgetProp = null;
    };

    PropertyPanel.prototype.show = function () {
        this.init();
    };

    PropertyPanel.prototype.showWidgetProp = function(activeWidgets){
        var model = activeWidgets[0].store.model;
        var modelType = model.type();//存放第一个选中控件的类型
        activeWidgets = activeWidgets.map(function (m) {
            var md = m.store.model;
            if(model.type() != md.type()) modelType = '';
            return md;
        });
        if(modelType != ''){//widget has the same type
            this.widgetProp = new window.widgets.props[modelType+'Prop'](this, this.$propertyList, new window.widgets.propModels[modelType+'PropModel'](activeWidgets));
        }else{//widget has different type, just show property of [x,y,w,h]
            this.widgetProp = new window.widgets.props['WidgetProp'](this, this.$propertyList, new window.widgets.propModels['PropModel'](activeWidgets));
        }
        this.widgetProp.show();
    };
    PropertyPanel.prototype.showLayerProp = function(activeLayers){
        var model = activeLayers[0].store.model;
        var modelType = model.type();//存放第一个选中控件的类型
        activeLayers = activeLayers.map(function (m) {
            var md = m.store.model;
            if(model.type() != md.type()) modelType = '';
            return md;
        });
        if(modelType != ''){//widget has the same type
            var type = model.type();
            type = type.substr(0,1).toUpperCase()+type.substr(1);
            this.widgetProp = new window.widgets.props[type+'Prop'](this, this.$propertyList, new window.widgets.propModels[type+'PropModel'](activeLayers));
        }else{//widget has different type, just show property of [x,y,w,h]
            this.widgetProp = new window.widgets.props['WidgetProp'](this, this.$propertyList, new window.widgets.propModels['PropModel'](activeLayers));
        }
        this.widgetProp.show();
    };
    PropertyPanel.prototype.bindStateOb = function () {
        this.state.addEventListener('update.activeLayers', function (e) {
            Log.info('property panel change activing layer');
            var activeLayers=this.state.activeLayers();
            if(activeLayers && activeLayers.length == 1 && activeLayers[0].store.model.type() === 'bg'){
                _this.showLayerProp(activeLayers);
            }else{
                _this.$propertyList.next().remove();
                _this.$propertyList.empty();
                }
        }, this);
        this.state.addEventListener('update.activeWidgets', function (e, data) {
            Log.info('property panel change activing widgets');
            var activeWidgets = this.state.activeWidgets();
            if(activeWidgets && activeWidgets.length > 0){
                activeWidgets.forEach(function(widget){
                    var model = widget.store.model;
                    model.removeEventListener('update', this.eventListenerPropModel);
                    model.addEventListener('update', this.eventListenerPropModel, this);
                }, this);
                _this.showWidgetProp(activeWidgets);
            }else{
                _this.$propertyList.next().remove();
                _this.$propertyList.empty();
            }
        }, this);
    };

    PropertyPanel.prototype.eventListenerPropModel = function(){
        Log.info('property model update');
        this.widgetProp.show();
    }

    window.PropertyPanel = PropertyPanel;

} ());
(function () {
    var _this;
    function HistoryPanel(screen) {
        _this = this;
        this.screen = screen;
        this.container = screen.historyPanelCtn;
        this.store = undefined;
        this.painter = this.screen.painter;
        this.historyList = new window.ModelSet();
        this.historyController = screen.historyController;
    }

    HistoryPanel.prototype.historyTools = [
        {id: 'delHistory', name: 'delete', icon: 'glyphicon glyphicon-trash', iconType: 1},
        {id: 'addSnap', name: 'create', icon: 'glyphicon glyphicon-camera', iconType: 1}
    ];

    //对historyRecordManager的数据监听
    HistoryPanel.prototype.init = function () {
        this.historyController.store.records.addEventListener('insert', this.bindHistoryRecordModelInsert, this);
        this.historyController.store.records.addEventListener('remove', this.bindHistoryRecordModelRemove, this);
        this.historyController.state.addEventListener('update.index', this.bindStateUpdate, this);

        this.historyController.store.snapshotModelSet.addEventListener('insert', this.bindSnapshotModelInsert, this);
        this.historyController.store.snapshotModelSet.addEventListener('remove', this.bindSnapshotModelRemove, this);
    };

    HistoryPanel.prototype.show = function () {
        this.$snapshotList = undefined;
        this.$historyList = undefined;
        $(this.container).empty();
        var $ul = $('<ul id="recordList" class="list-unstyled"></ul>');
        $ul.append('<li><ul id="snapList" class="list-unstyled"></ul></li>');
        $ul.append('<li><ul id="historyList" class="list-unstyled"></ul></li>');

        $(this.container).html($ul);

        this.$snapshotList = $('#snapList', this.container);
        this.$historyList = $('#historyList', this.container);
        this.init();
        this.initTools();

        for(var i = 0; i < this.historyController.store.records.length(); i++){
            this.renderHistoryRecordModel(this.historyController.store.records.models[i]);
        }

        for(var i = 0; i < this.historyController.store.snapshotModelSet.models.length; i++){
            this.renderSnapshot(this.historyController.store.snapshotModelSet.models[i]);
        }

        this.bindStateUpdate();
    };

    HistoryPanel.prototype.hide = function () {
        this.historyController.store.records.removeEventListener('insert', this.bindHistoryRecordModelInsert, this);
        this.historyController.state.removeEventListener('update.index', this.bindStateUpdate, this);

        this.historyController.store.snapshotModelSet.removeEventListener('insert', this.bindSnapshotModelInsert, this);
        this.historyController.store.snapshotModelSet.removeEventListener('remove', this.bindSnapshotModelInsert, this);
        this.historyController.store.snapshotModelSet.removeEventListener('update', this.bindSnapshotModelUpdate, this);
    };

    HistoryPanel.prototype.add = function (type, entity) {

    };
    HistoryPanel.prototype.addSnap = function () {
        var snapName = '快照 ' + (_this.$snapshotList.children().length + 1);
        var data = {
            pageId: painter.screen.page.id,
            userId: AppConfig.userId,
            time: new Date().format('yyyy-MM-dd HH:mm:ss'),
            name: snapName,
            content: {
                layers: painter.screen.getLayersData().serialize(),
                widgets: painter.screen.getWidgetsData().serialize()
            }
        };
        WebAPI.post('/factory/historyShot/save', data
        ).done(function(result){
            if(result && result._id){
                data._id = result._id;
                _this.historyController.store.snapshotModelSet.append(new Model(data));
            }
        }).always(function(){

        });
    };

    HistoryPanel.prototype.remove = function () {
        $('#snapList .historyItem.selected').each(function(){
            var id = $(this).attr('id');
            WebAPI.get('/factory/historyShot/remove/' + id).done(function(result){
                _this.historyController.store.snapshotModelSet.remove(_this.historyController.store.snapshotModelSet.findByProperty('_id', id));
            });
        });
    };

    HistoryPanel.prototype.close = function () {

    };

    HistoryPanel.prototype.bindHistoryRecordModelInsert = function(event, data){
        var model = data.models[0];
        this.renderHistoryRecord(model);
    };

    HistoryPanel.prototype.bindSnapshotModelInsert = function(event, data){
        var model = data.models[0];
        this.renderSnapshot(model);
    };

    HistoryPanel.prototype.bindSnapshotModelRemove = function(event, data){
        var model = data.models[0];
        this.$snapshotList.children('#' + model._id()).remove();
    };

    HistoryPanel.prototype.bindSnapshotModelUpdate = function(event, data){};

    HistoryPanel.prototype.renderHistoryRecordModel = function(data){
        var model = data;
        this.renderHistoryRecord(model);
    };

    HistoryPanel.prototype.renderHistoryRecord =  function(model){
        var $li = $('<li class="historyItem" id="'+ model.id() +'">').html('<span>'+ model.name() +'</span>');
        $li[0].onclick = function(){
            var index = $(this).index();
            _this.historyController.state.index(index);
        }
        this.$historyList.append($li);
    };

    HistoryPanel.prototype.renderSnapshot =  function(model){
        var timmer = null;
        var $li = $('<li class="historyItem" id="'+ model._id() +'">').html('<span class="glyphicon glyphicon-camera" style="margin-right: 12px;"></span><span class="snapName">'+ model.name() +'</span>');
        $li.dblclick(function(){
            var $input = $('<input type="text"/>').val(model.name()).blur(function(){
                saveRename({_id: model._id(), name: this.value}, this);
            }).keypress(function(e){
                if(e.keyCode == 13){
                    saveRename({_id: model._id(), name: this.value}, this);
                }
            });
            $(this).children('.snapName').hide();
            $(this).append($input);
            $input.focus();

            function saveRename(data, domInput){
                WebAPI.post('/factory/historyShot/edit', data)
                    .done(function(result){
                        if(result.status){
                            model.name(data.name);
                            $(domInput).prev('.snapName').text(data.name).show();//
                        }else{
                            $(domInput).prev('.snapName').show();//
                        }
                        $(domInput).remove();
                    }).always(function(){

                    });
            }
        })
        // click 事件
        .click(function(){
            var $this = $(this);
            var id = this.id;
            var shotModelSet = _this.historyController.store.snapshotModelSet;
            var model = shotModelSet.findByProperty('_id', id);
            var content, promise;

            if (!model) return Log.warn('snap shot not found: ' + id);

            promise = $.Deferred();
            content = model.property('content');
            if (!content) {
                // 去服务端拉取快照的数据
                WebAPI.get('/factory/historyShot/getDetail/'+id).done(function (rs) {
                    content = rs.content || {};
                    // 将快照保存到 modelset 中
                    model.content(content);
                    promise.resolve();
                });
            } else {
                promise.resolve();
            }

            promise.done(function () {
                var index = _this.historyController.state.index();
                if (index === -1) {
                    // 快照之间的切换，由于 index 一直都为 -1
                    // 所以 update 事件不会切换，这里手动执行
                    _this.historyController.update(content);
                } else {
                    _this.historyController.state.index(-1);
                }
                
                // 添加选中效果
                $this.addClass('selected').siblings().removeClass('selected');
            });
        });

        this.$snapshotList.append($li);
    };

    HistoryPanel.prototype.bindHistoryRecordModelRemove = function(event, data){
        $('#' + data.models[0].id()).remove();
    };

    HistoryPanel.prototype.bindStateUpdate = function(){
        var index = this.historyController.state.index();
        if (index > -1) {
            $('.historyItem', '#historyList').removeClass('shallow').filter(':gt('+index+')').addClass('shallow');
        } else {
            $('.historyItem', '#historyList').addClass('shallow');
        }
    };

    HistoryPanel.prototype.initTools = function () {
        $('.historyToolWrap').remove();
        var strHtml = '';
        var $ul = $('<ul class="list-inline historyToolWrap toolWrap"></ul>');

        for(var i = 0, tool; i < this.historyTools.length; i++){
            tool = this.historyTools[i];
            if(tool.iconType == 1){
                strHtml += ('<li><span class="'+ tool.icon +'" id="'+ tool.id +'"></span></li>');
            }
        }
        $ul.html(strHtml);
        $(this.container).append($ul);
        //event
        $('#addSnap')[0].onclick = this.addSnap;
        $('#delHistory')[0].onclick = this.remove;
    };

    window.HistoryPanel = HistoryPanel;

} ());


(function () {
    var _this;
    function ModulePanel(screen) {
        _this = this;
        this.screen = screen;
        this.container = screen.modulePanelCtn;

        this.init();
    }

    ModulePanel.prototype.tpl = '<div id="modalCt" class="panel-body"><span id="btnModalAdd" class="glyphicon glyphicon-plus-sign" style="position:absolute;top: 5px;right: 15px;font-size: 16px;"></span></div>';

    ModulePanel.prototype.show = function() {
        //默认显示第一组
        $('#modalCt').children('ul:eq(0)').children('.nav-header').click();
    };

    ModulePanel.prototype.init = function () {
        this.initModuleList();
        this.attachEvents();
    };

    ModulePanel.prototype.attachEvents = function () {
        var _this = this;

        $('#btnModalAdd', this.container).off('click').click(function (e) {
            var entity = new ModalNone(_this.screen, {
                id: (+new Date()).toString(),
                spanC: 6,
                spanR: 2,
                modal: {type:"ModalNone"}
            });
            _this.screen.arrEntityOrder.push(entity.entity.id);
            _this.screen.listEntity[entity.entity.id] = entity;
            entity.render();
            entity.configure();
        });
    };

    ModulePanel.prototype.detachEvents = function () {
        $('#btnModalAdd', this.container).off('click');
    };

    ModulePanel.prototype.initModuleList = (function () {

        function getModuleList(group) {
            var $ul = $('<ul class="nav nav-list accordion-group">');
            var $liList = $('<li class="rows" style="display: none;">').appendTo($ul);
            for (var i in group) {
                if (i == 0) {
                    var $liHd = $('<li class="nav-header">').append('<i class="icon-plus icon-white"></i>' + I18n.findContent(group[i].name))
                        .click(function () {
                            var $otherUl = $(this).parent('ul').siblings('ul');
                            $otherUl.find('.rows').slideUp();
                            $otherUl.find('i').removeClass('icon-minus').addClass('icon-plus');
                            $(this).next('.rows').slideToggle();
                            var $i = $(this).find('i');
                            var toggleClass = (function () {
                                if ($i.hasClass('icon-minus'))
                                    return 'icon-plus icon-white'
                                else
                                    return 'icon-minus icon-white'
                            })();
                            $(this).find('i').removeClass().addClass(toggleClass)
                        });
                    $ul.prepend($liHd);
                } else {
                    var $div = $('<div class="lyrow ui-draggable" draggable="true"> ').html(I18n.findContent(group[i].name)).attr('type',group[i].type);
                    $div[0].ondragstart = function(e){
                        e.dataTransfer.setData("type",$(this).attr('type'));
                        e.dataTransfer.setData("title",$(this).text());
                    }
                    $liList.append($div);
                }
            }
            return $ul;
        }

        return function () {
            var list, groupList = [];
            var list = this.screen.factoryIoC.getList();

            var $modals = $(this.tpl);

            for (var i = 0, len = list.length, option; i < list.length; i++) {
                option = list[i].prototype.optionTemplate;
                if(option && option.parent != null) {
                    groupList[option.parent] = groupList[option.parent] || [];
                    groupList[option.parent].push(option)
                }
            }
            for(var i = 0; i < groupList.length; i++){
                $modals.append(getModuleList(groupList[i]));
            }

            $(this.container).append($modals);
        };
    } ());

    ModulePanel.prototype.hide = function () {};

    ModulePanel.prototype.close = function () {
        this.container.innerHTML = '';
    };

    window.ModulePanel = ModulePanel;

} ());
/** 
 * factory 控件基类
 */

(function () {

    function Widget(layer, model) {
        this.layer = layer;
        this.page = layer.painter.screen;

        this.store = {};
        this.store.model = model;
        this.store.imageModelSet = this.layer.painter.screen.store.imageModelSet;

        this.shape = null;

        this.init();
    }

    Widget.prototype.init = function () {
        this.layer.children.push(this);
        this.bindModelOb();
    };
    
    Widget.prototype.bindModelOb = function () {
        this.store.model.addEventListener('update', this.update, this);
    };

    Widget.prototype.update = function (e) {
        // 更新交互图层图形的位置和大小
        var layer = this.layer.painter.interactiveLayer;
        var id = this.id();
        var shape = layer.findOne('#'+id);
    };

    Widget.prototype.show = function () {};

    Widget.prototype.close = function () {
        // 将父容器的 list 字段对 widget 的 id 的引用去掉
        this.layer.removeChild(this.store.model._id());

        // widget 分为两类，一类 html，一类 canvas
        // 这里删除的时候做一下区分
        if (typeof this.shape.destroy === 'function') {
            this.shape.destroy();
        } else {
            this.shape.parentNode.removeChild(this.shape);
        }
    };

    window.widgets = window.widgets || {};
    window.widgets.factory = window.widgets.factory  || {};
    window.widgets.factory.Widget = Widget;
} ());
(function (CanvasWidgetMixin) {

    function CanvasLine(layer, options) {
        this.layer = layer;
        this.shape = new Konva.Line(options);
    }

    CanvasLine.prototype = Mixin({}, CanvasWidgetMixin);
    CanvasLine.prototype.constructor = CanvasLine;

    window.widgets = window.widgets || {};
    window.widgets.factory = window.widgets.factory  || {};
    window.widgets.factory.CanvasLine = CanvasLine;

} (window.mixins.CanvasWidgetMixin));
(function (CanvasWidgetMixin) {
    var methods = ['position'];

    function CanvasCircle(layer, options) {
        this.layer = layer;
        this.options = options;
        this.shape = new Konva.Circle(options);
    }

    CanvasCircle.prototype = Mixin({}, CanvasWidgetMixin);
    CanvasCircle.prototype.constructor = CanvasCircle;

    CanvasCircle.prototype.width = function () {
        return this.options.radius*2;
    };

    CanvasCircle.prototype.height = function () {
        return this.options.radius * 2;
    };

    methods.forEach(function (m) {
        this[m] = function () {
            Konva.Circle.prototype[m].apply(this.shape, arguments);   
        };
    }, CanvasCircle.prototype);

    window.widgets = window.widgets || {};
    window.widgets.factory = window.widgets.factory  || {};
    window.widgets.factory.CanvasCircle = CanvasCircle;

} (window.mixins.CanvasWidgetMixin));
(function (CanvasWidgetMixin) {

    function CanvasRect(layer, options) {
        this.layer = layer;
        this.options = options;
        this.shape = new Konva.Rect(options);
    }

    CanvasRect.prototype = Mixin({}, CanvasWidgetMixin);
    CanvasRect.prototype.constructor = CanvasRect;

    CanvasRect.prototype.width = function () {
        return this.shape.width();
    };

    CanvasRect.prototype.height = function () {
        return this.shape.height();
    };

    window.widgets = window.widgets || {};
    window.widgets.factory = window.widgets.factory  || {};
    window.widgets.factory.CanvasRect = CanvasRect;

} (window.mixins.CanvasWidgetMixin));
(function (Widget, CanvasWidgetMixin) {

    function CanvasImage(layer, model) {
        Widget.apply(this, arguments);
        this.imageModel = null;
    }

    CanvasImage.prototype.init = function () {
        // 兼容一下老数据格式
        this._format();
    };

    CanvasImage.prototype._format = function () {
        //兼容老数据
        var options = this.store.model.option();
        if(options.rotate == undefined) {
            options.rotate = 0;
            this.store.model.option(options);
        }
    };

    CanvasImage.prototype = Object.create(Widget.prototype);
    CanvasImage.prototype.constructor = CanvasImage;

    CanvasImage.prototype.defaultColor = '#ddd';

    /** override */
    CanvasImage.prototype.show = function () {
        var model = this.store.model;

        this.shape = new Konva.Image({
            id: model._id(),
            fill: this.defaultColor
        });

        this.layer.add(this.shape);
        
        this.update();
    };

    /** override */
    CanvasImage.prototype.update = function (e, propName) {
        var _this = this;
        var model = this.store.model;
        var options = model.option();
        var imageModel;

        this.shape.position({
            x: model.x(),
            y: model.y()
        });

        this.shape.width(model.w());
        this.shape.height(model.h());
        if (options.text){
                imageModel = this.store.imageModelSet.findByProperty('_id', options.text);
            } else {
                imageModel = this.store.imageModelSet.findByProperty('_id', options.trigger['default']);
            }
        if (!propName || propName === 'update.option'|| propName === 'update.w,update.h,update.option.trigger.default' || propName === 'update.idDs,update.option.trigger') {
            //todo 暂时的处理方式
            if (imageModel) {
                GUtil.loadImage(imageModel.url(), function (image) {
                    _this.shape.destroy();
                    if (imageModel.interval() > 0) {
                        _this.shape = new Konva.Sprite({
                            id: model._id(),
                            x: model.x(),
                            y: model.y(),
                            width: model.w(),
                            height: model.h(),
                            image: image,
                            animations: {
                                main: [0, 0, imageModel.pw(), imageModel.h()]
                            },
                            animation: 'main'
                        });
                        _this.layer.add(_this.shape);
                        _this.startAnimation(imageModel);
                    }
                     //如果是普通图片
                    else {
                        _this.shape = new Konva.Image({
                            id: model._id(),
                            x: model.x(),
                            y: model.y(),
                            width: model.w(),
                            height: model.h(),
                            image: image
                        });
                        _this.layer.add(_this.shape);
                    }
                    _this.shape.rotation(options.rotate);
                    _this.layer.draw();
                });
            }
        }
        this.shape.rotation(options.rotate);
        this.layer.draw();
    };

    CanvasImage.prototype.startAnimation = function () {};

    CanvasImage.prototype.stopAnimation = function () {};

    CanvasImage.prototype = Mixin(CanvasImage.prototype, CanvasWidgetMixin);

    window.widgets = window.widgets || {};
    window.widgets.factory = window.widgets.factory  || {};
    window.widgets.factory.CanvasImage = CanvasImage;

} (window.widgets.factory.Widget, window.mixins.CanvasWidgetMixin));
/////////////////////////////////
/// CanvasPipeShape DEFINITION //
/////////////////////////////////
(function (CanvasLine, CanvasCircle, CanvasRect) {

    function CanvasPipeShape(layer, options) {
        this.layer = layer;
        this.options = options;

        // 当前图形的位置和大小信息
        this.shapeInfo = null;

        this.line = null;
        this.joins = [];
        this.rects = [];

        this.moves = [];
        this.anim = null;
        this.animationOptions = {
            speed: 50
        }
    }

    CanvasPipeShape.prototype.CIRCLE_RADIUS = 10;

    CanvasPipeShape.prototype.paint = function (isActive) {
        var x, y;
        var points = this.options.points;
        var color = this.options.color;
        var width = this.options.width;
        var id = this.options._id;
        var rotation = 0;

        //弯头宽度 = 管道宽度 + 4px;
        if(width && Number(width)){
            this.CIRCLE_RADIUS = Number(width)/2 + 2;
        }

        this.destroy();

        this.line = new CanvasLine(this.layer, {
            id: id,
            name: 'pipe-line pipe-'+id,
            points: (function (points) {
                var arr = [];
                points.forEach(function (row) {
                    arr.push(row.x);
                    arr.push(row.y);
                });
                return arr;
            } (points)),
            stroke: color ? color : 'rgba(0, 114, 201, .7)',
            strokeWidth: width ? width : 14,
            lineJoin: 'round'
        });

        for (var i = 0, len = points.length; i < len; i+=1) {
            // 添加圆形连接点
            this.joins.push(new CanvasCircle(this.layer, {
                id: 'pipejoin_'+id,
                name: 'pipe-joint pipe-joint-circle pipe-'+id,
                x: points[i].x - this.CIRCLE_RADIUS,
                y: points[i].y - this.CIRCLE_RADIUS,
                offsetX: -this.CIRCLE_RADIUS,
                offsetY: -this.CIRCLE_RADIUS,
                radius: this.CIRCLE_RADIUS,
                fill: '#888'
            }));

            // 添加方形管道入口/出口
            if (i - 1 > -1) {
                rotation = Math.atan2(points[i-1].y-points[i].y, points[i-1].x-points[i].x) * GUtil.DEG;
                this.rects.push(new CanvasRect(this.layer, {
                    id: id+'_r_f_'+i,
                    name: 'pipe-joint pipe-joint-rect',
                    x: points[i].x,
                    y: points[i].y,
                    width: this.CIRCLE_RADIUS * 1.7,
                    height: this.CIRCLE_RADIUS * 2,
                    offsetY: this.CIRCLE_RADIUS,
                    rotation: rotation,
                    fill: '#888'
                }));
            }

            if (i + 1 < len) {
                rotation = Math.atan2(points[i+1].y-points[i].y, points[i+1].x-points[i].x) * GUtil.DEG;
                this.rects.push(new CanvasRect(this.layer, {
                    id: id+'_r_b_'+i,
                    name: 'pipe-joint-rect',
                    x: points[i].x,
                    y: points[i].y,
                    width: this.CIRCLE_RADIUS * 1.7,
                    height: this.CIRCLE_RADIUS * 2,
                    offsetY: this.CIRCLE_RADIUS,
                    rotation: rotation,
                    fill: '#888'
                }));
            }
        }

        if (isActive) {
            this.addAnimation();
        } else {
            this.removeAnimation();
        }

        this.shapeInfo = GUtil.getPipeRect(points);
    };

    CanvasPipeShape.prototype.addAnimation = function () {
        var _this = this;
        var points = this.options.points;
        var distance, durations = [];

        // 添加动画
        for (var i = 0, len = points.length; i < len-1; i++) {
            this.moves.push(new CanvasCircle(this.layer, {
                name: 'pipe-animation',
                x: points[i].x - this.CIRCLE_RADIUS/2,
                y: points[i].y - this.CIRCLE_RADIUS/2,
                radius: this.CIRCLE_RADIUS/2,
                fill: '#ff0000',
                shadowForStrokeEnabled: false,
                shadowEnabled: false
            }));
            distance = GUtil.getDistance(points[i], points[i+1]);
            durations.push(distance/this.animationOptions.speed*1000);
        }

        this.anim = new Konva.Animation(function(frame) {
            _this.moves.forEach(function (row, i) {
                var prograss = (frame.time % durations[i]) / durations[i];
                row.position({
                    x: prograss * (points[i+1].x-points[i].x) + points[i].x,
                    y: prograss * (points[i+1].y-points[i].y) + points[i].y
                });
            });
        }, this.layer.stage.shape);

        this.anim.start();
    };

    CanvasPipeShape.prototype.removeAnimation = function () {
        this.moves.forEach(function (row) {
            row.shape.destroy();
        });
        this.moves = [];
        if (this.anim) this.anim.stop();
    };

    CanvasPipeShape.prototype.updatePoints = function (points) {
        this.options.points = points;
        this.paint();
    };

    CanvasPipeShape.prototype.toArray = function () {
        var shapes = [];
        shapes.push(this.line);
        shapes = shapes.concat(this.moves);
        shapes = shapes.concat(this.rects).concat(this.joins);
        return shapes;
    };

    CanvasPipeShape.prototype.id = function () {
        return this.options._id;
    };

    /** @override */
    CanvasPipeShape.prototype.getZIndex = function () {
        return this.line.getZIndex();
    };

    /** 获取父容器 */
    CanvasPipeShape.prototype.getParent = function () {
        return this.line.getParent();
    };

    /** @override */
    CanvasPipeShape.prototype.getAbsolutePosition = function () {
        var painter = this.layer.painter;
        return painter.inverseTransform({
            x: this.shapeInfo.xMin,
            y: this.shapeInfo.yMin
        });
    };

    CanvasPipeShape.prototype.destroy = function () {
        if (this.line) this.line.shape.destroy();
        this.joins.forEach(function (row) {
            row.shape.destroy();
        });
        
        this.rects.forEach(function (row) {
            row.shape.destroy();
        });
        this.moves.forEach(function (row) {
            row.shape.destroy();
        });
        this.moves = [];
        this.line = null;
        this.joins = [];
        this.rects = [];

        if (this.anim) this.anim.stop();
    };

    window.widgets = window.widgets || {};
    window.widgets.factory = window.widgets.factory  || {};
    window.widgets.factory.CanvasPipeShape = CanvasPipeShape;

} ( window.widgets.factory.CanvasLine,
    window.widgets.factory.CanvasCircle,
    window.widgets.factory.CanvasRect));
(function (Widget, CanvasWidgetMixin, CanvasPipeShape) {

    ////////////////////////////
    /// CanvasPipe DEFINITION //
    ////////////////////////////
    function CanvasPipe(layer, model) {
        Widget.apply(this, arguments);

        this.children = [];
    }

    CanvasPipe.prototype = Object.create(Widget.prototype);
    CanvasPipe.prototype.constructor = CanvasPipe;

    CanvasPipe.prototype.init = function () {
        // 兼容一下老数据格式
        this._format();

        Widget.prototype.init.call(this);
    };

    CanvasPipe.prototype._format = function () {
        var options = this.store.model.option();
        var points = options.points, pArr = [];

        if (typeof points[0] === 'number') {
            for (var i = 0, len = points.length; i < len; i += 2) {
                pArr.push({
                    x: points[i],
                    y: points[i+1],
                    join: 1
                });
            }
            options.points = pArr;
        }
    };

    /** override */
    CanvasPipe.prototype.show = function () {
        var _this = this;
        var model = this.store.model;
        var initPos = {};
        //var points = model.option().points;
        var option = model.option();

        this.shape = new CanvasPipeShape(this.layer, {
            _id: model._id(),
            points: option.points,
            color: option.color,
            width: option.width
        });

        this.update();
    };

    /** override */
    CanvasPipe.prototype.update = function (e, propType) {
        var model = this.store.model;
        var option = model.option();
        var points = option.points;
        var info, dx, dy, pw, ph;

        // x,y 更新时，需要更新 points 数组
        if (propType && (propType.indexOf('update.x') > -1 || propType.indexOf('update.y') > -1 )) {
            info = this.shape.shapeInfo;
            dx = model.x() - info.xMin;
            dy = model.y() - info.yMin;

            for (var i = 0, len = points.length; i < len; i++) {
                points[i].x = points[i].x + dx;
                points[i].y = points[i].y + dy;
            }
            this.shape.options.points = points;
        }

        // w,h 更新时，需要更新 points 数组
        // 按比例增加
        if ( propType && (propType.indexOf('update.w') > -1 || propType.indexOf('update.h') > -1 ) ) {
            info = this.shape.shapeInfo;
            pw = model.w() / info.w;
            ph = model.h() / info.h;

            for (var i = 0, len = points.length; i < len; i++) {
                points[i].x = (points[i].x-info.xMin) * pw + info.xMin;
                points[i].y = (points[i].y-info.yMin) * ph + info.yMin;
            }
            this.shape.options.points = points;
        }

        // 颜色或者宽度更新时, 需要更新 color
        if( propType && propType.indexOf('update.option') > -1 ){
            this.shape.options.color = option.color;
            this.shape.options.width = option.width;
            this.shape.options.points = option.points;
        }

        this.shape.paint();
        this.children = this.shape.toArray();

        this.layer.add(this.children.map(function (row) {
            return row.shape;
        }));

        this.layer.draw();
    };

    CanvasPipe.prototype = Mixin(CanvasPipe.prototype, CanvasWidgetMixin);

    CanvasPipe.prototype.hasShape = function (shape) {
        return this.children.some(function (row) {
            return shape === row.shape;
        });
    };

    CanvasPipe.prototype.width = function () {
        return 0;
    };

    CanvasPipe.prototype.height = function () {
        return 0;
    };

    CanvasPipe.prototype.getType = function () {
        return 'Combine';
    };

    CanvasPipe.prototype.getPoints = function () {
        return this.store.model['option.points']();
    };

    CanvasPipe.prototype.getRadius = function () {
        return this.shape.CIRCLE_RADIUS;
    };

    window.widgets = window.widgets || {};
    window.widgets.factory = window.widgets.factory  || {};
    window.widgets.factory.CanvasPipe = CanvasPipe;

} (window.widgets.factory.Widget, window.mixins.CanvasWidgetMixin,
   window.widgets.factory.CanvasPipeShape));
(function (Widget, HtmlWidgetMixin) {

    function HtmlContainer(layer, model) {
        Widget.apply(this, arguments);
    }

    HtmlContainer.prototype = Object.create(Widget.prototype);
    HtmlContainer.prototype.constructor = HtmlContainer;

    HtmlContainer.prototype.tpl = '<div class="html-widget html-container"></div>';

    /** override */
    HtmlContainer.prototype.show = function () {
        var model = this.store.model;

        this.shape = HTMLParser(this.tpl);
        this.shape.id = model._id();
        this.shape.style.position = 'absolute';
        this.shape.style.backgroundImage = 'url("/static/app/WebFactory/themes/default/images/demo/htmlContainer.png")';
        this.shape.style.backgroundSize = '100% 100%';
        this.shape.style.backgroundColor = 'rgba(243, 219, 202, 0.35)';
        this.shape.style.border = '1px dashed #aaa';
        this.update();

        this.layer.add(this.shape);
    };

    /** override */
    HtmlContainer.prototype.update = function () {
        var model = this.store.model;
        var options = model.option();
        if(!model.option().css){model.option().css = '';}
        if(!model.option().js){model.option().js = '';}
        this.shape.style.left = model.x() + 'px';
        this.shape.style.top = model.y() + 'px';
        this.shape.style.width = model.w() + 'px';
        this.shape.style.height = model.h() + 'px';
        //this.shape.innerHTML = options.html;

        Log.info('html container widget has been updated.');
    };

    /** 适配工作 */
    HtmlContainer.prototype = Mixin(HtmlContainer.prototype, HtmlWidgetMixin);
    HtmlContainer.prototype.type = 'HtmlContainer';

    window.widgets = window.widgets || {};
    window.widgets.factory = window.widgets.factory  || {};
    window.widgets.factory.HtmlContainer = HtmlContainer;

} (window.widgets.factory.Widget, window.mixins.HtmlWidgetMixin));
(function (Widget, HtmlWidgetMixin) {

    function HtmlButton(layer, model) {
        Widget.apply(this, arguments);
    }

    HtmlButton.prototype = Object.create(Widget.prototype);
    HtmlButton.prototype.constructor = HtmlButton;

    HtmlButton.prototype.tpl = '<button class="html-widget html-btn"></button>';

    /** override */
    HtmlButton.prototype.show = function () {
        var model = this.store.model;

        this.shape = HTMLParser(this.tpl);
        this.shape.id = model._id();
        this.shape.style.position = 'absolute';
        this.update();
        this.layer.add(this.shape);
    };

    /** override */
    HtmlButton.prototype.update = function () {
        var model = this.store.model;
        var options = model.option();
        this.shape.style.left = model.x() + 'px';
        this.shape.style.top = model.y() + 'px';
        this.shape.style.width = model.w() + 'px';
        this.shape.style.height = model.h() + 'px';
        this.shape.innerHTML = options.text;
        this.shape.className = 'html-widget html-btn ' + options['class'];
        if(options.style) {
            var initStyle = options.style;
            var normalStyle = initStyle.replace(/.Normal/g, '#' + model._id().toHexString());
            var head = document.head || document.getElementsByTagName('head')[0],
                style = document.createElement('style');
            //style.type = 'text/css';
            style.id = 'style-' + model._id();
            if (style.stylesheet) {
                style.stylesheet.cssText = normalStyle;
            } else {
                style.appendChild(document.createTextNode(normalStyle))
            }
            if (document.getElementById(style.id)) {
                $('#' + style.id).remove();
            }
            head.appendChild(style);
        }else{
            $('#style-' + model._id()).remove();
        }
        Log.info('html button widget has been updated.');
    };

    /** 适配工作 */
    HtmlButton.prototype = Mixin(HtmlButton.prototype, HtmlWidgetMixin);
    HtmlButton.prototype.type = 'HtmlButton';

    window.widgets = window.widgets || {};
    window.widgets.factory = window.widgets.factory  || {};
    window.widgets.factory.HtmlButton = HtmlButton;

} (window.widgets.factory.Widget, window.mixins.HtmlWidgetMixin));
(function (Widget, HtmlWidgetMixin) {

    function HtmlText(layer, model) {
        Widget.apply(this, arguments);
    }

    HtmlText.prototype = Object.create(Widget.prototype);
    HtmlText.prototype.constructor = HtmlText;

    HtmlText.prototype.tpl = '<p class="html-widget html-text"></p>';

    /** override */
    HtmlText.prototype.show = function () {
        var model = this.store.model;

        this.shape = HTMLParser(this.tpl);
        this.shape.id = model._id();
        this.shape.style.position = 'absolute';
        this.update();

        this.layer.add(this.shape);
    };

    /** override */
    HtmlText.prototype.update = function (e) {
        var model = this.store.model;
        var options = model.option();
        this.shape.style.left = model.x() + 'px';
        this.shape.style.top = model.y() + 'px';
        this.shape.style.width = model.w() + 'px';
        this.shape.style.height = model.h() + 'px';
        if(isNaN(options.text)){
            this.shape.innerHTML = options.text;
        }else{
            var nx = Math.pow(10, options.precision || 2);
            this.shape.innerHTML = Math.round( parseFloat(options.text) * nx ) / nx;
        }
        this.shape.className = 'html-widget html-text' + (options.class ? ' '+options.class : '');
        if(options.style) {
            var initStyle = options.style;
            var normalStyle = initStyle.replace(/.Normal/g, '#' + model._id().toHexString());
            var head = document.head || document.getElementsByTagName('head')[0],
                style = document.createElement('style');
            //style.type = 'text/css';
            style.id = 'style-' + model._id();
            if (style.stylesheet) {
                style.stylesheet.cssText = normalStyle;
            } else {
                style.appendChild(document.createTextNode(normalStyle))
            }
            if (document.getElementById(style.id)) {
                $('#' + style.id).remove();
            }
            head.appendChild(style);
        }else{
            $('#style-' + model._id()).remove();
        }
        Log.info('html text widget has been updated.');
    };

    HtmlText.prototype = Mixin(HtmlText.prototype, HtmlWidgetMixin);

    HtmlText.prototype.type = 'HtmlText';

    window.widgets = window.widgets || {};
    window.widgets.factory = window.widgets.factory  || {};
    window.widgets.factory.HtmlText = HtmlText;

} (window.widgets.factory.Widget, window.mixins.HtmlWidgetMixin));
(function (Widget, HtmlWidgetMixin) {

    function HtmlScreenContainer(layer, model) {
        Widget.apply(this, arguments);
    }

    HtmlScreenContainer.prototype = Object.create(Widget.prototype);
    HtmlScreenContainer.prototype.constructor = HtmlScreenContainer;

    HtmlScreenContainer.prototype.tpl = '<div class="html-widget html-screen"></div>';

    /** override */
    HtmlScreenContainer.prototype.show = function () {
        var model = this.store.model;

        this.shape = HTMLParser(this.tpl);
        this.shape.id = model._id();
        this.shape.style.position = 'absolute';
        this.shape.style.backgroundImage = 'url("/static/app/WebFactory/themes/default/images/demo/htmlScreen.png")';
        this.shape.style.backgroundSize = '100% 100%';
        this.shape.style.backgroundColor = 'rgba(238, 238, 238,0.6)';
        //this.shape.style.border = '1px dashed #aaa';
        this.update();

        this.layer.add(this.shape);
    };

    /** override */
    HtmlScreenContainer.prototype.update = function () {
        var model = this.store.model;
        var options = model.option();

        this.shape.style.left = model.x() + 'px';
        this.shape.style.top = model.y() + 'px';
        this.shape.style.width = model.w() + 'px';
        this.shape.style.height = model.h() + 'px';
        //this.shape.innerHTML = options.html;
        if(!model.option().pageId){model.option().pageId = ''}
        if(!model.option().pageType){model.option().pageType = ''}
        if (options.style) {
            var initStyle = options.style;
            var normalStyle = initStyle.replace(/.Normal/g, '#' + model._id().toHexString());
            var head = document.head || document.getElementsByTagName('head')[0],
                style = document.createElement('style');
            //style.type = 'text/css';
            style.id = 'style-' + model._id();
            if (style.stylesheet) {
                style.stylesheet.cssText = normalStyle;
            } else {
                style.appendChild(document.createTextNode(normalStyle));
            }
            if (document.getElementById(style.id)) {
                $('#' + style.id).remove();
            }
            head.appendChild(style);
        } else {
            $('#style-' + model._id()).remove();
        }
        Log.info('html container widget has been updated.');
    };

    /** 适配工作 */
    HtmlScreenContainer.prototype = Mixin(HtmlScreenContainer.prototype, HtmlWidgetMixin);
    HtmlScreenContainer.prototype.type = 'HtmlScreenContainer';

    window.widgets = window.widgets || {};
    window.widgets.factory = window.widgets.factory  || {};
    window.widgets.factory.HtmlScreenContainer = HtmlScreenContainer;

} (window.widgets.factory.Widget, window.mixins.HtmlWidgetMixin));
/** toolbar.js */
(function () {
    function Toolbar(screen) {
        this.screen = screen;
        this.container = screen.toolbarCtn;
        this.painter = screen.painter;

        this.toolsCtn = undefined;
        this.optionToolsCtn = undefined;

        this.tools = [];
        this.optionTools = [];
    }

    Toolbar.prototype.init = function () {
        ////////////////
        // 绘图类工具 //
        ////////////////
        /** 箭头工具 */
        this.tools.push(TPointer);
        /** 手型工具 */
        this.tools.push(THand);
        /** Html 文本框工具 */
        this.tools.push(TText);
        /** Html 按钮工具 */
        this.tools.push(TButton);
        /** Html 容器工具 */
        this.tools.push(THtml);
        /** Screen 容器工具 */
        this.tools.push(TScreen);
        /** Canvas 图片工具 */
        this.tools.push(TImage);
        /** 管道工具 */
        this.tools.push(TPipe);
        /** 管道编辑工具 */
        // this.tools.push(TPipeEdit);
        /** 放大镜工具 */
        this.tools.push(TZoomSelect);
        /** 项目素材库 */
        this.tools.push(TProjectMaterial);
        /** 网格开关 */
        this.tools.push(TGridLine);
        /** 格式化 */
        this.tools.push(TLayout);

        ////////////////
        // 设置类工具 //
        ////////////////
        /** 比例调整工具 */
        // this.optionTools.push(TZoomSelect);

        /////////
        // DOM //
        /////////
        this.toolsCtn = document.createElement('div');
        this.toolsCtn.className = 'tools-ctn tool';
        
        this.optionToolsCtn = document.createElement('div');
        this.optionToolsCtn.className = 'tools-ctn option';

        // 清空容器
        while(this.container.firstChild) {
            this.container.removeChild(this.container.firstChild);
        }

        this.container.appendChild(this.toolsCtn);
        this.container.appendChild(this.optionToolsCtn);
    };

    Toolbar.prototype.show = function () {
        var _this = this;

        this.init();

        this.tools = this.tools.map(function (row) {
            var ins = new row(_this, _this.toolsCtn);
            ins.show();
            return ins;
        });
        this.optionTools = this.optionTools.map(function (row) {
            var ins = new row(_this, _this.optionToolsCtn);
            ins.show();
            return ins;
        });

        this.attachEvents();
        // 默认选中第一个控件
        $(this.tools[0].element).trigger('click');
    };
    //改变类为window的对象的cursor属性
    Toolbar.prototype.changeCursor = function (cursorType) {
        this.painter.domContainer.style.cursor = cursorType;
    }
    Toolbar.prototype.attachEvents = function () {
        var _this = this;
        $(this.toolsCtn).off('click').on('click', '> .btn-switch', function () {
            // 处理选中样式
            $(_this.toolsCtn).children('.btn-switch').removeClass('t-active');
            $(this).addClass('t-active');
            var attrType = $(this).attr('data-type');
            if (attrType === 'handCtrl') {
                //当点击手型工具时鼠标样式变为手型
                _this.changeCursor('-webkit-grab');
            } else if (attrType === 'pointerCtrl' || attrType === 'pipeEditCtrl') {
                //当点击箭头工具或管道编辑工具时鼠标样式变为默认
                _this.changeCursor('default');
            } else {
                //当点击其他工具时鼠标样式变为十字型
                _this.changeCursor('crosshair');
        }
        });
    };

    Toolbar.prototype.switchTool = function (type) {
        $(this.tools[0].element).trigger('click');
    };

    Toolbar.prototype.close = function () {
        //还原鼠标样式
        this.changeCursor('default');
        sessionStorage.removeItem('copy');
    };

    window.Toolbar = Toolbar;
} ());
(function () {

    function TBase(toolbar, container) {
        this.toolbar = toolbar;
        this.screen = toolbar.screen;
        this.painter = toolbar.painter;

        this.container = container;
        this.element = HTMLParser(this.tpl);
        this.container.appendChild(this.element);
        var toolbarTypeArr = ['pointerCtrl', 'handCtrl', 'textCtrl', 'btnCtrl', 'htmlCtrl', 'screenCtrl', 'imgeCtrl', 'pipeCtrl', 'materalCtrl', 'gridLineCtrl'];
        var toolbarTitleIner = [I18n.resource.mainPanel.toolbar.ARROW_TOOL, I18n.resource.mainPanel.toolbar.HAND_TOOL, I18n.resource.mainPanel.toolbar.TEXT_TOOL, I18n.resource.mainPanel.toolbar.BUTTON_TOOL,
                               I18n.resource.mainPanel.toolbar.HTML_TOOL, I18n.resource.mainPanel.toolbar.SCREEN_TOOL, I18n.resource.mainPanel.toolbar.IMG_TOOL, I18n.resource.mainPanel.toolbar.PIPE_TOOL,
                               I18n.resource.mainPanel.toolbar.MATERAL_TOOL, I18n.resource.mainPanel.toolbar.GRID_TOOL];

        for (var i = 0; i < toolbarTypeArr.length;i++){
            $(this.container).find('button[data-type="' + toolbarTypeArr[i] + '"]').attr('title', toolbarTitleIner[i]);
        }
    }

    TBase.prototype.init = function () {};

    TBase.prototype.show = function () {
        this.attachEvents();
    };

    TBase.prototype.attachEvents = function () {
        var cssClassList = this.element.classList;

        // 开关式的按钮
        if (cssClassList.contains('btn-switch')) {
            $(this.element).off('click').on('click', function () {
                this.initSceneMode();
                this.setSceneMode();
            }.bind(this));
        }
        // 触发式的按钮
        else if (cssClassList.contains('btn-trigger')) {
            $(this.element).off('click').on('click', function () {
                this.onTrigger();
            }.bind(this));
        }
    };

    TBase.prototype.onTrigger = function () {};

    TBase.prototype.initSceneMode = function () {
        delete this.painter.mouseDownActionPerformed;
        delete this.painter.mouseUpActionPerformed;
        delete this.painter.mouseMoveActionPerformed;
        delete this.painter.keyDownActionPerformed;
        delete this.painter.keyUpActionPerformed;
    };

    TBase.prototype.setSceneMode = function () {
        this.painter.mouseDownActionPerformed = function(e) {
            this.mouseDownActionPerformed(e);
            // 鼠标按下，方才触发 move 事件
            this.painter.mouseMoveActionPerformed = this.mouseMoveActionPerformed.bind(this);
        }.bind(this);

        this.painter.mouseUpActionPerformed = function (e) {
            // 鼠标松开，移出 move 事件
            delete this.painter.mouseMoveActionPerformed;
            this.mouseUpActionPerformed(e);
        }.bind(this);

        this.painter.keyDownActionPerformed = this.keyDownActionPerformed.bind(this);

        this.painter.keyUpActionPerformed = this.keyUpActionPerformed.bind(this);
    };

    TBase.prototype.mouseDownActionPerformed = function (e) {};
    TBase.prototype.mouseMoveActionPerformed = function (e) {};
    TBase.prototype.mouseUpActionPerformed = function (e) {};

    TBase.prototype.keyDownActionPerformed = function (e) {};
    TBase.prototype.keyUpActionPerformed = function (e) {};

    TBase.prototype.close = function () {
        // 清除变量引用
        this.toolbar = null;
        this.screen = null;
        this.painter = null;
        this.container = null;

        // 删除 DOM
        this.element.parentNode.removeChild(this.element);
    };

    window.TBase = TBase;
} ());
(function () {

    function TPointer(toolbar, container) {
        TBase.apply(this, arguments);

        this.layer = this.painter.interactiveLayer;
        this.previewRect = undefined;
    }

    TPointer.prototype = Object.create(TBase.prototype);
    TPointer.prototype.constructor = TPointer;

    TPointer.prototype.tpl = '\
<button class="btn-switch" title="箭头工具" data-type="pointerCtrl">\
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0.5 18.5 18 18" width="18px" height="18px">\
        <path stroke="none" d="M3.5,18.5v18l5-7h9L3.5,18.5z"></path>\
    </svg>\
</button>';

    TPointer.prototype.settings = {
        // 单位 px
        keyMoveStep: 1
    };
    
    +function () {
        var mDownX, mDownY;
        var gridInfo = {};

        TPointer.prototype.mouseDownActionPerformed = function (e) {
            var evt = e.evt;
            var hitShape;
            var editableGroups = this.layer.find('.resizable-group');
            var m = this.painter.getTransform();
            var activeWidgets = this.painter.state.activeWidgets().slice();

            mDownX = evt.layerX;
            mDownY = evt.layerY;

            // 判断落点是否在 可编辑组 内
            if(editableGroups.length) {
                hitShape = GUtil.getIntersection(mDownX, mDownY, this.layer);
                //鼠标Ctrl点击事件
                if( hitShape && (hitShape.hasName('resizable-shape')) ) {
                    // 注册鼠标行为 - 拖拽行为
                    this.mouseMoveActionPerformed = this.dragShapeActionPerformed;
                    gridInfo.width = this.painter.getGridWidth() * this.painter.scale;
                    gridInfo.sPos = hitShape.getParent().position();

                    if(evt.ctrlKey) {
                        // 拖拽复制
                        this.mouseUpActionPerformed = this.copyShapeActionPerformed;
                    } else {
                        // 拖拽
                        this.mouseUpActionPerformed = this.dropShapeActionPerformed;
                    }
                    return;
                }
            }

            // 判断落点是否在某个图形内
            hitShape = GUtil.getIntersectionByPoint(mDownX, mDownY, this.painter.state.activeLayers(), m);

            // 清除的可编辑矩形
            if(!evt.ctrlKey){
                this.painter.setActiveWidgets();
            }

            if(hitShape) {
                // 注册鼠标行为 - 拖拽行为
                this.mouseMoveActionPerformed = this.dragShapeActionPerformed;
                gridInfo.width = this.painter.getGridWidth() * this.painter.scale;
                gridInfo.sPos = {x: 0 ,y: 0};
                if(evt.ctrlKey) {
                    // 拖拽复制
                    this.mouseUpActionPerformed = this.copyShapeActionPerformed;
                } else {
                    // 拖拽
                    this.mouseUpActionPerformed = this.dropShapeActionPerformed;
                    this.painter.setActiveWidgets(hitShape);
                }
            } else {
                // 注册鼠标行为 - 框选行为
                this.mouseMoveActionPerformed = this.selectingAreaActionPerformed;
                this.mouseUpActionPerformed = this.selectedAreaActionPerformed;

                // 处理某些特殊情况下，预览框没有消失的问题
                if(this.previewRect) {
                    this.previewRect.destroy();
                }
                this.previewRect = new Konva.Rect({
                    id: '__previewRect',
                    name: '__previewRect',
                    x: mDownX,
                    y: mDownY,
                    width: 1,
                    height: 1,
                    fill: 'rgba(91, 192, 222, .2)',
                    stroke: 'rgba(48, 114, 171, .9)',
                    strokeWidth: 1
                });
                this.layer.add(this.previewRect);
            }
            this.layer.draw();
        };

        //////////////
        // 拖拽行为 //
        //////////////
        TPointer.prototype.dragShapeActionPerformed = function (e) {
            var evt = e.evt;
            var dx = evt.layerX - mDownX;
            var dy = evt.layerY - mDownY;
            var gridWidth = gridInfo.width;

            this.layer.find('.resizable-group').each(function (row, i) {
                var x = gridInfo.sPos.x + dx;
                var y = gridInfo.sPos.y + dy;
                x = Math.round(x / gridWidth) * gridWidth;
                y = Math.round(y / gridWidth) * gridWidth;

                row.position({
                    x: x,
                    y: y
                });
            });

            this.layer.draw();
        };

        TPointer.prototype.dropShapeActionPerformed = function (e) {
            var _this = this;
            var shapes = this.layer.find('.resizable-group');
            var isAdsorptive = true;

            if (e === false) { 
                isAdsorptive = false; 
            }
            // 取四舍五入的较小值 4
            else if ( Math.abs(e.evt.layerX - mDownX) < 4 && Math.abs(e.evt.layerY - mDownY) < 4 ) {
                return;
            }


            shapes.each(function (shape) {
                shape.resizeShape(isAdsorptive);
            });

            this.painter.draw();

            this.resetMouseAction();
        };

        //////////////
        // 框选行为 //
        //////////////
        TPointer.prototype.selectingAreaActionPerformed = function (e) {
            var evt = e.evt;

            var startX, endX, startY, endY;

            if(mDownX <= evt.layerX) {
                startX = mDownX;
                endX = evt.layerX;
            } else {
                startX = evt.layerX;
                endX = mDownX;
            }

            if(mDownY <= evt.layerY) {
                startY = mDownY;
                endY = evt.layerY;
            } else {
                startY = evt.layerY;
                endY = mDownY;
            }

            this.previewRect.position({
                x: startX,
                y: startY
            });
            this.previewRect.width(endX - startX);
            this.previewRect.height(endY - startY);

            this.layer.draw();
        };

        TPointer.prototype.selectedAreaActionPerformed = function (e) {
            var hitShapes = [];
            var r = this.previewRect;
            var rw = r.width(), rh = r.height();
            var pos = r.getAbsolutePosition();

            // 屏蔽一些多余操作
            if (rw < 10 && rh < 10) {
                hitShapes = [];
            } else {
                hitShapes = GUtil.getIntersectionByRect(pos.x, pos.y, rw, rh, this.painter.state.activeLayers(), this.painter.getTransform());
            }


            if(hitShapes.length) {
                // 凸显所有选中的图形
                this.painter.setActiveWidgets(hitShapes);
            }

            if(this.previewRect) {
                this.previewRect.destroy();
                this.previewRect = undefined;
            }
            this.layer.draw();
            this.resetMouseAction();
        };

        TPointer.prototype.keyDownActionPerformed = function (e) {
            var handler = null, code = e.keyCode;
            var step = this.settings.keyMoveStep * this.painter.scale;
            var shapes;

            // 监控箭头按键(37~40)事件、Delete按键(46)事件
            // 67(Ctrl) 86(v) 8(Backspace)
            if( [37, 38, 39, 40, 46, 67, 86, 8].indexOf(code) === -1 ) return;
            //ctrl+v
            if(e.ctrlKey && code == 86){
                this.pasteWidgetShapeActionPerformed();
                return;
            }
            shapes = this.layer.find('.resizable-group');

            // 没有选中的元素，不进行任何操作
            if(shapes.length === 0) return;
            //ctrl+c
            if (e.ctrlKey && code == 67) {
                this.copyWidgetShapeActionPerformed();
                return;
            }

            if (code === 46 || code === 8) {
                e.preventDefault();
                this.removeShapes();
                return;
            }

            switch(code) {
                // left
                case 37:
                    handler = function (row) { row.x(row.x() - step); };
                    break;
                // top
                case 38:
                    handler = function (row) { row.y(row.y() - step); };
                    break;
                // right
                case 39:
                    handler = function (row) { row.x(row.x() + step); };
                    break;
                // bottom
                case 40:
                    handler = function (row) { row.y(row.y() + step); };
                    break;
                default: return;
            }

            shapes.each(handler);
            this.layer.draw();
        };

        //////////////
        // 按键行为 //
        //////////////
        TPointer.prototype.keyUpActionPerformed = function (e) {
            // 只监控四个箭头事件
            if( [37, 38, 39, 40].indexOf(e.keyCode) === -1 ) return;

            this.dropShapeActionPerformed(false);
        };

        //////////////////
        // 拖拽复制行为 //
        //////////////////
        TPointer.prototype.copyShapeActionPerformed = function (e) {
            var _this = this;
            var shapes = this.layer.find('.resizable-shape');
            var offset = this.painter.getViewportPosition();
            var scale = this.painter.scale;
            var shapeAdded = [], shapeAddedIds = [];
            var eDownX = (e.evt.layerX - mDownX)/scale;//结束时距离减去开始的距离除以比例
            var eDownY = (e.evt.layerY - mDownY)/scale;
            if(Math.abs(eDownX) < 10 && Math.abs(eDownY) < 10){
                var hitShape;
                var editableGroups = this.layer.find('.resizable-group');
                var m = this.painter.getTransform();
                var activeWidgets = this.painter.state.activeWidgets().slice();
                if(editableGroups.length) {
                    //Ctrl多次点击同一个的可编辑矩形切换
                    hitShape = GUtil.getIntersection(mDownX, mDownY, this.layer);
                    //鼠标Ctrl点击事件
                    if( hitShape && (hitShape.hasName('resizable-shape')) ) {
                    //Ctrl多次点击同一个的可编辑矩形切换
                        var len = activeWidgets.length;
                        var hitShapeId = hitShape.attrs.id.split('_')[0];
                            for (var i=0;i< len;i++){
                                if( hitShapeId === activeWidgets[i].id()){
                                    activeWidgets.splice(i,1);
                                    break;
                                }
                            }
                        this.painter.setActiveWidgets(activeWidgets);
                    }else{
                        hitShape = GUtil.getIntersectionByPoint(mDownX, mDownY, this.painter.state.activeLayers(), m);
                        if(hitShape) {
                        //Ctrl多选控件
                        activeWidgets.push(hitShape);
                        this.painter.setActiveWidgets(activeWidgets);
                        }
                    }
                    return;
                }
                hitShape = GUtil.getIntersectionByPoint(mDownX, mDownY, this.painter.state.activeLayers(), m);
                if(hitShape) {
                    //Ctrl多选控件
                    activeWidgets.push(hitShape);
                    this.painter.setActiveWidgets(activeWidgets);
                    return;
                }
            }

            shapes.each(function (row) {
                var refid = row.id().split('_')[0];
                var ref = this.painter.find('#'+refid);
                var pos = _this.painter.transform(row);
                var id = ObjectId();

                ref.forEach(function (row) {
                    var options = $.extend(true, {}, row.store.model.serialize());
                    options._id = id;
                    if (options.type === 'CanvasPipe'){
                        options.option.points[0].x += eDownX;
                        options.option.points[1].x += eDownX;
                        options.option.points[0].y += eDownY;
                        options.option.points[1].y += eDownY;
                    } else {
                        options.x = pos.x;
                        options.y = pos.y;
                    }
                    // 将需要添加的图形先放到一个临时数组中，方便后面一次性插入
                    shapeAddedIds.push(id);
                    shapeAdded.push(new NestedModel(options));
                }, this);
            });
            // 一次性加入到页面
            this.painter.store.widgetModelSet.append(shapeAdded);

            // 将当前的选中矩形定位到新增加的图形
            this.painter.setActiveWidgets(shapeAddedIds);

            this.painter.draw();
        };

        ////////////
        // Ctrl+C //
        ////////////
        TPointer.prototype.copyWidgetShapeActionPerformed = function (e) {
            var _this = this;
            var shapes = this.layer.find('.resizable-shape');
            var offset = this.painter.getViewportPosition();
            var scale = this.painter.scale;
            var shapeAdded = [];
            var activeLayers = this.painter.state.activeLayers();
            for (var i = 0, len = activeLayers.length-1; i < len; i++) {
                if (activeLayers[i].store.model.type() !== activeLayers[i+1].store.model.type()) {
                    alert('只能在相同类型的同层进行复制操作！');
                    return;
                }
            }
            shapes.each(function (row) {
                var refid = row.id().split('_')[0];
                var ref = this.painter.find('#'+refid);
                var pos = _this.painter.transform(row);
                ref.forEach(function (row) {
                    var options = $.extend(true, {}, row.store.model.serialize());
                    if (options.type === 'CanvasPipe'){
                        options.option.points[0].x += 20;
                        options.option.points[1].x += 20;
                        options.option.points[0].y += 20;
                        options.option.points[1].y += 20;
                    } else {
                        options.x = pos.x + 20;
                        options.y = pos.y + 20;
                    }
                    // 将需要添加的图形先放到一个临时数组中，方便后面一次性插入
                    shapeAdded.push(options);
                }, this);
            });
            sessionStorage.setItem('copy' ,JSON.stringify(shapeAdded));
        };

        //////////////
        // Ctrl + V //
        //////////////
        TPointer.prototype.pasteWidgetShapeActionPerformed = function(){
            var addArr = JSON.parse(sessionStorage.getItem('copy'));
            var ids = [];

            if (!addArr) return;
            var activeLayerModel = this.painter.state.activeLayers()[0].store.model;
            var activeLayerType = activeLayerModel.type();
            var addLayerType = this.painter.findLayer(addArr[0].layerId).store.model.type();
            if (addLayerType !== activeLayerType) {
                alert('只能在相同类型的图层间进行复制！');
                return;
            }
            addArr = addArr.map(function(row){
                row._id = ObjectId();
                ids.push(row._id);
                row.layerId = activeLayerModel._id();
                return new NestedModel(row);
            });
                // 一次性加入到页面
            this.painter.store.widgetModelSet.append(addArr);

            // 将当前的选中矩形定位到新增加的图形
            this.painter.setActiveWidgets(ids);

            this.painter.draw();            
        }

        /////////////////////////
        // Delete 删除控件行为 //
        /////////////////////////
        TPointer.prototype.removeShapes = function () {
            var _this = this;
            var shapes = this.layer.find('.resizable-shape');

            shapes.each(function (row) {
                var refid = row.id().split('_')[0];
                var ref = this.painter.find('#'+refid);

                ref.forEach(function (row) {
                    var layer = row.getLayer();
                    var model = this.painter.store.widgetModelSet.findByProperty('_id', refid);

                    if(model !== null) {
                        this.painter.store.widgetModelSet.remove(model);
                    }
                }, this);
            });

            this.painter.setActiveWidgets();
            this.painter.draw();
        };

        // 重置鼠标行为
        TPointer.prototype.resetMouseAction = function () {
            delete this.mouseMoveActionPerformed;
            delete this.mouseUpActionPerformed;
        };
    }();

    window.TPointer = TPointer;
} ());
(function () {

    function THand(toolbar, container) {
        TBase.apply(this, arguments);
    }

    THand.prototype = Object.create(TBase.prototype);
    THand.prototype.constructor = THand;

    THand.prototype.tpl = '\
<button class="btn-switch" title="手型工具" data-type="handCtrl">\
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0.5 18.5 18 18" width="18px" height="18px">\
<path stroke="none" d="M13.7,22.6C10.3,19,7.9,19,7,19.2l-0.4-0.4c-0.1,0-0.5-0.3-1.1-0.3c-0.4,0-0.7,0.1-1,0.4\
C4.2,19,4.1,19.2,4,19.4c-0.6-0.3-1.3-0.3-1.8,0.2c-0.3,0.3-0.5,0.7-0.5,1.1c0,0.1,0,0.3,0.1,0.4c-0.2,0.1-0.5,0.2-0.7,0.4\
c-0.9,0.7-0.5,1.7-0.2,2.3c2.7,2.6,5.6,5.8,6.1,7c-0.5-0.2-1.4-0.9-1.9-1.4c-1.7-1.4-2.8-2.2-3.6-1.7c-0.6,0.3-0.7,0.8-0.8,1.1\
c-0.4,1.5,3.4,5.2,3.6,5.4c1.2,1.3,8.9,2.4,8.9,2.4c0.1,0,0.2,0,0.3-0.1l4.8-3.3c0.1-0.1,0.2-0.2,0.2-0.4\
C18.5,32.5,18.7,27.8,13.7,22.6z M13.1,35.5L13.1,35.5c-2.9-0.4-7.4-1.3-8.1-2.1c0,0-0.1-0.1-0.2-0.2c-2.6-2.7-3.6-4.1-3.1-4.6\
c0.1-0.1,0.2-0.1,0.4-0.1c0.5,0,1.4,0.7,2.1,1.3L4.4,30c1,0.8,2.1,1.6,2.8,1.6c0.2,0,0.4-0.1,0.5-0.2c0.1-0.1,0.1-0.2,0.1-0.3\
c0-1.3-3.2-5.1-6.3-8c-0.2-0.3-0.3-0.7,0-1C1.8,22,2,21.9,2.2,21.9c0.2,0,0.3,0.1,0.4,0.1l4.5,4.3c0.2,0.1,0.4,0.1,0.6,0\
c0.1-0.1,0.1-0.1,0.1-0.2c0-0.1-0.1-0.3-0.1-0.3l-4.5-4.3c0,0-0.5-0.4-0.5-0.9c0-0.2,0.1-0.3,0.2-0.4c0.1-0.1,0.3-0.2,0.4-0.2\
c0.4,0,0.9,0.4,1.1,0.7L9,25.2c0.2,0.1,0.4,0.1,0.6,0c0.1-0.1,0.1-0.1,0.1-0.2c0-0.1-0.1-0.3-0.1-0.3l-4.6-4.4\
c-0.1-0.1-0.1-0.4,0.1-0.6c0.1-0.1,0.3-0.2,0.5-0.2c0.2,0,0.4,0.1,0.4,0.2h0l5,4.3c0.2,0.1,0.4,0.1,0.6,0c0.1-0.1,0.1-0.2,0.1-0.3\
c0-0.1-0.1-0.2-0.1-0.3L7.8,20l0.5,0.1c1,0.2,2.6,0.9,4.7,3.1c4,4.2,4.5,8.1,4.5,9.2l0,0.1L13.1,35.5z"></path>\
</svg></button>';
    
    (function () {
        var mDownX, mDownY;

        THand.prototype.mouseDownActionPerformed = function (e) {
            //鼠标按下时鼠标样式为伸手型
            this.toolbar.changeCursor('-webkit-grabbing');
            var evt = e.evt;

            mDownX = evt.layerX;
            mDownY = evt.layerY;

            this.painter.setActiveWidgets();
        };

        THand.prototype.mouseMoveActionPerformed = function (e) {
            var evt = e.evt;
            var canvasLayer = this.painter.staticLayer;
            var htmlLayer = this.painter.htmlLayer;
            var bgLayer = this.painter.bgLayer;
            var offsetX = evt.layerX - mDownX;
            var offsetY = evt.layerY - mDownY;
            var scale = this.painter.scale;

            // canvas 图层的移动
            // 对于变化的部分，canvas 图层也会进行缩放处理，而 html 图层不会
            // 所以这里 canvas 图层需要对变化的部分进行反缩放处理，而 html 图层不用
            canvasLayer.offsetX(canvasLayer.offsetX() - offsetX/this.painter.scale);
            canvasLayer.offsetY(canvasLayer.offsetY() - offsetY/this.painter.scale);
            canvasLayer.draw();

            // html 图层的移动
            htmlLayer.position({
                x: htmlLayer.x() + offsetX,
                y: htmlLayer.y() + offsetY
            });

            // 背景 图层的移动
            bgLayer.position({
                x: bgLayer.x() + offsetX,
                y: htmlLayer.y() + offsetY
            });

            mDownX = evt.layerX;
            mDownY = evt.layerY;
        };

        THand.prototype.mouseUpActionPerformed = function (e) {
            //鼠标松开时鼠标样式为抓手型
            this.toolbar.changeCursor('-webkit-grab');
        };
    } ());

    THand.prototype.close = function () {

    };

    window.THand = THand;
} ());
(function () {

    function TShape() {
        TBase.apply(this, arguments);

        this.layer = this.painter.interactiveLayer;
        this.previewRect = null;
        this.supportLayerType = 'html';
    }

    TShape.prototype = Object.create(TBase.prototype);
    TShape.prototype.constructor = TShape;

    void function () {

        var mDownX, mDownY;

        this.mouseDownActionPerformed = function (e) {
            var evt = e.evt;

            mDownX = evt.layerX;
            mDownY = evt.layerY;

            // 处理某些特殊情况下，预览框没有消失的问题
            if(this.previewRect) {
                this.previewRect.destroy();
            }
            this.previewRect = new Konva.Rect({
                id: '__previewRect',
                name: '__previewRect',
                x: mDownX,
                y: mDownY,
                width: 1,
                height: 1,
                stroke: '#2aabd2',
                strokeWidth: 2
            });
            this.layer.add(this.previewRect);

            this.layer.draw();
        };

        this.mouseMoveActionPerformed = function (e) {
            var evt = e.evt;

            var startX, endX, startY, endY;

            if(mDownX <= evt.layerX) {
                startX = mDownX;
                endX = evt.layerX;
            } else {
                startX = evt.layerX;
                endX = mDownX;
            }

            if(mDownY <= evt.layerY) {
                startY = mDownY;
                endY = evt.layerY;
            } else {
                startY = evt.layerY;
                endY = mDownY;
            }

            this.previewRect.position({
                x: startX,
                y: startY
            });
            this.previewRect.width(endX - startX);
            this.previewRect.height(endY - startY);

            this.layer.draw();
        };

        this.mouseUpActionPerformed = function (e) {
            var pos, id;
            var layers = this.painter.state.activeLayers(), layer;
            var widget, entity;
            var gridWidth;

            if(layers.length > 1 || layers.length === 0 
                || layers[0].getLayerType() !== this.supportLayerType) {
                alert('无法完成请求，请先选中'+this.supportLayerType+'图层');
            } else {
                pos = this.painter.transform(this.previewRect);
                if (pos.w > 10 && pos.h > 10) {
                    gridWidth = this.painter.getGridWidth();
                    layer = layers[0];
                    id = ObjectId();

                    entity = this.createEntity();
                    entity._id = id;
                    entity.layerId = layer.id();

                    // 数据格式化，使之吸附到网格上去
                    entity.x = Math.round(pos.x / gridWidth) * gridWidth;
                    entity.y = Math.round(pos.y / gridWidth) * gridWidth;
                    entity.w = Math.round(pos.w / gridWidth) * gridWidth;
                    entity.h = Math.round(pos.h / gridWidth) * gridWidth;
                    
                    // 创建图形
                    this.createShape(entity);

                    // 切换到箭头工具
                    this.toolbar.switchTool('TPointer');
                }
            }

            if(this.previewRect) {
                this.previewRect.destroy();
                this.previewRect = undefined;
            }
            this.layer.draw();
        };

        this.createShape = function (entity) {
            this.painter.store.widgetModelSet.append( new NestedModel(entity) );
            // 选中生成的 widget
            this.painter.setActiveWidgets(entity._id);
        };

        this.createEntity = function () {
            return {};
        };

    }.call(TShape.prototype);

    window.TShape = TShape;
} ());
(function () {

    function THtml(toolbar, container) {
        TShape.apply(this, arguments);

        this.layer = this.painter.interactiveLayer;
        this.previewRect = undefined;
    }

    THtml.prototype = Object.create(TShape.prototype);
    THtml.prototype.constructor = THtml;

    THtml.prototype.tpl = '<button class="btn-switch" title="Html容器控件" data-type="htmlCtrl"><strong style="font-size: 20px;">H</strong></button>';
    
    void function () {

        this.createEntity = function () {
            return {
                option: {
                    html: '',
                    css: '',
                    js: ''
                },
                type: 'HtmlContainer',
                templateId: ''
            };
        };

    }.call(THtml.prototype);

    window.THtml = THtml;
} ());
(function () {

    function TText() {
        TShape.apply(this, arguments);

        this.layer = this.painter.interactiveLayer;
        this.previewRect = undefined;
    }

    TText.prototype = Object.create(TShape.prototype);
    TText.prototype.constructor = TText;

    TText.prototype.tpl = '\
<button class="btn-switch" title="文本控件" data-type="textCtrl">\
    <svg xmlns="http://www.w3.org/2000/svg" width="18px" height="18px">\
        <text style="stroke:none; fill: inherit; font-family: Arial; font-size: 18px; text-anchor: middle" x="9" y="15">T</text>\
    </svg>\
</button>';
    
    void function () {

        this.createEntity = function () {
            return {
                option: {
                    text: I18n.resource.mainPanel.attrPanel.attrText.TEXT_CONDITION,//'请此处输入文本'
                    'class': 'txtStyle1',
                    trigger:{},
                    precision: 2
                },
                type: 'HtmlText',
                idDs: []
            };
        };

    }.call(TText.prototype);

    TText.prototype.close = function () {  };

    window.TText = TText;
} ());
(function () {

    function TButton(toolbar, container) {
        TShape.apply(this, arguments);

        this.layer = this.painter.interactiveLayer;
        this.previewRect = undefined;
    }

    TButton.prototype = Object.create(TShape.prototype);
    TButton.prototype.constructor = TButton;

    TButton.prototype.tpl = '\
<button class="btn-switch" title="按钮控件" data-type="btnCtrl">\
    <strong style="font-size: 20px;">B</strong>\
</button>';
    
    void function () {

        this.createEntity = function () {
            return {
                option: {
                    text: 'Button',
                    'class': 'default',
                    trigger:{}
                },
                type: 'HtmlButton',
                idDs: []
            };
        };

    }.call(TButton.prototype);

    TButton.prototype.close = function () {  };

    window.TButton = TButton;
} ());
(function () {

    function TImage(toolbar, container) {
        TBase.apply(this, arguments);

        this.layer = this.painter.interactiveLayer;
        this.previewRect = undefined;
        this.supportLayerType = 'canvas';
    }
    TImage.prototype = Object.create(TBase.prototype);
    //TImage.prototype = Object.create(TShape.prototype);
    TImage.prototype.constructor = TImage;

    TImage.prototype.tpl = '<button class="btn-trigger" title="图片控件" data-type="imgeCtrl"><span class="glyphicon glyphicon-picture"></span></button>';
    TImage.prototype.onTrigger = function () {
        var _this = this;
        MaterialModal.show(['pic','img'], function (data) {
            var entity = {
                _id: ObjectId(),
                layerId: _this.painter.state.activeLayers()[0].store.model._id(),
                option: {
                    "trigger": {
                        'default': data._id
                    },
                    rotate: 0
                },
                x: 10,
                y: 10,
                w: data.w,
                h: data.h,
                type: 'CanvasImage',
                idDs: []
            };
            _this.painter.screen.store.imageModelSet.append( new Model(data) );
            _this.painter.store.widgetModelSet.append( new NestedModel(entity) );
            _this.painter.setActiveWidgets(entity._id);

        });
    };
    void function () {

         this.createEntity = function () {
            return {
                option: {
                    "trigger": {
                        'default': ''
                    },
                    rotate: 0
                },
                type: 'CanvasImage',
                idDs: []
            }
        }

    }.call(TImage.prototype);

    window.TImage = TImage;
} ());
(function () {

    function TPipe(toolbar, container) {
        TBase.apply(this, arguments);

        this.layer = this.painter.interactiveLayer;
        // 分成两段，方便以后做变化
        this.line = null;
        this.previewLine = null;
        // 自动吸附功能的指示图形
        this.circle = null;
    }

    TPipe.prototype = Object.create(TBase.prototype);
    TPipe.prototype.constructor = TPipe;

    TPipe.prototype.supportLayerType = 'canvas';

    TPipe.prototype.tpl = '\
<button class="btn-switch" title="管道控件" data-type="pipeCtrl">\
    <span class="glyphicon glyphicon-random"></span>\
</button>';
    
    void function () {

        var mDownX, mDownY;
        var points = [];
        var previewPoints = [];
        var hotPoint = null;

        this.setSceneMode = function () {
            this.painter.mouseDownActionPerformed = function(e) {
                var rs = this.mouseDownActionPerformed(e);

                // 没有返回值，或返回值不为 false，则绑定下一步的操作
                if (rs !== false) {
                    this.painter.keyDownActionPerformed = this.keyDownActionPerformed.bind(this);
                }
            }.bind(this);

            this.painter.mouseMoveActionPerformed = this.mouseMoveActionPerformed.bind(this);
        };

        this.mouseDownActionPerformed = function (e) {
            var evt = e.evt;
            var layers = this.painter.state.activeLayers();
            var pos = {};

            if(layers.length > 1 || layers.length === 0 || 
                layers[0].getLayerType() !== this.supportLayerType) {
                // 删除对 move 事件的处理
                alert('无法完成请求，请先选中canvas图层');
                return false;
            }

            pos = this._dealWithShiftKey(evt.shiftKey, previewPoints.slice(0, 2), [evt.layerX, evt.layerY]);

            // 判断是否在连接点上
            if (hotPoint) {
                mDownX = hotPoint.x;
                mDownY = hotPoint.y;
            } else {
                mDownX = pos.x;
                mDownY = pos.y;
            }

            points.push(mDownX);
            points.push(mDownY);

            previewPoints = [mDownX, mDownY];

            if (!this.line) {
                this.line = new Konva.Line({
                    points: points,
                    stroke: '#2780C4',
                    strokeWidth: 2,
                    lineJoin: 'round',
                    dash: [2, 2]
                });
                this.layer.add(this.line);
            } else {
                this.line.points(points);
            }
    
            if (!this.previewLine) {
                this.previewLine = new Konva.Line({
                    points: previewPoints,
                    stroke: '#2780C4',
                    strokeWidth: 2
                });
                this.layer.add(this.previewLine);
            } else {
                this.previewLine.points(previewPoints);
            }

            this.layer.draw();
        };

        this.mouseMoveActionPerformed = function (e) {
            var evt = e.evt;
            var len = previewPoints.length;
            var radius;
            var p = {};
            var points;

            mDownX = evt.layerX;
            mDownY = evt.layerY;

            p = this._dealWithShiftKey(evt.shiftKey, previewPoints.slice(0, 2), [mDownX, mDownY]);
            mDownX = p.x;
            mDownY = p.y;

            if (previewPoints.length > 0) {
                previewPoints.splice(2, 2, mDownX, mDownY);
                this.previewLine.points(previewPoints);
            }

            // 判断是否在连接点上
            hitShape = GUtil.getIntersectionByPointInCanvasLayers(mDownX, mDownY, this.painter.state.activeLayers(), 'Combine');

            if (this.circle) {
                this.circle.destroy();
            }

            if (hitShape) {
                if ( hitShape.hasName('pipe-joint-circle') ) {
                    radius = hitShape.radius();
                    p = this.painter.inverseTransform({x: hitShape.x()-hitShape.offsetX(), y: hitShape.y()-hitShape.offsetY()})

                } else if ( hitShape.hasName('pipe-line') ) {
                    radius = hitShape.strokeWidth()/2;
                    points = hitShape.points();
                    points = this._transformPoints([points[0], points[1], points[2], points[3]], true);
                    p = GUtil.getPointProjectionOnLine(
                        // p1
                        [points[0], points[1]],
                        // p2
                        [points[2], points[3]],
                        [mDownX, mDownY]
                    );
                }
                
                // 显示吸附图形
                this.circle = new Konva.Circle({
                    name: 'preview-pipe-circle',
                    x: p.x,
                    y: p.y,
                    radius: radius,
                    strokeWidth: 2,
                    stroke: '#ff0000'
                });
                hotPoint = {
                    x: p.x,
                    y: p.y
                };
                this.layer.add(this.circle);
            } else {
                hotPoint = null;
            }

            this.layer.draw();
        };

        this.keyDownActionPerformed = function (e) {
            var layers, entity;
            var code = e.keyCode;
            var info;
            var models = [], entity;

            // ESC，取消当前画的管道
            if (code === 32 || code === 27) {
                // 删除对 move 事件的处理
                delete this.painter.keyDownActionPerformed;

                if (code === 32) {
                    layers = this.painter.state.activeLayers();
                    // 管道最少存储 4 个点
                    if (points.length <= 2) return;

                    // 坐标系转换
                    points = this._transformPoints(points);

                    // 生成分段管道
                    for (var i = 0, len = points.length-2, p; i < len; i += 2) {
                        p = [{
                            x: points[i],
                            y: points[i+1],
                        }, {
                            x: points[i+2],
                            y: points[i+3],
                        }];

                        entity = this.createEntity(p);
                        entity.layerId = layers[0].id();
                        models.push( new NestedModel(entity) );
                    }
                    this.painter.store.widgetModelSet.append(models);
                    // 切换到箭头工具
                    this.toolbar.switchTool('TPointer');
                }

                this.line.destroy();
                this.previewLine.destroy();

                this.line = null;
                this.previewLine = null;
                points = [];
                previewPoints = [];
                xMin = 99999;
                yMin = 99999;
                xMax = 0;
                yMax = 0;

                this.layer.draw();
            }
        };

        this.createEntity = function (points) {
            var entity = {};

            info = GUtil.getPipeRect(points);

            entity.type = 'CanvasPipe';
            entity._id = ObjectId();
            entity.idDs = [];
            entity.option = {
                points: points,
                color: '#4C9CD9',
                width: 8
            };
            return entity;
        };

        this._transformPoints = function (points, inverse) {
            var p;

            inverse = typeof inverse === 'undefined' ? false : inverse;
            for (var i = 0, len = points.length; i < len; i+=2) {
                p = this.painter[inverse ? 'inverseTransform' : 'transform']({
                    x: points[i],
                    y: points[i+1]
                });
                points[i] = p.x;
                points[i+1] = p.y;
            }
            return points;
        };

        this._dealWithShiftKey = function (shiftKey, lastPos, cursorPos) {
            if (shiftKey && lastPos.length) {
                if (Math.abs(lastPos[0] - cursorPos[0]) < Math.abs(lastPos[1] - cursorPos[1])) {
                    return {
                        x: lastPos[0],
                        y: cursorPos[1]
                    };
                } else {
                    return {
                        x: cursorPos[0],
                        y: lastPos[1]
                    };
                }
            } else {
                return {
                    x: cursorPos[0],
                    y: cursorPos[1]
                };
            }
        };

    }.call(TPipe.prototype);

    window.TPipe = TPipe;
} ());
(function () {

    var tpl = '<div class="dropdown">\
    <button class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false"><span class="glyphicon glyphicon-search"></span></button>\
    <ul class="dropdown-menu dropdown-menu-right" style="left:32px;top:-50px;">\
        <li><a href="javascript:;" data-value="0.25">25%</a></li>\
        <li><a href="javascript:;" data-value="0.5">50%</a></li>\
        <li><a href="javascript:;" data-value="0.75">75%</a></li>\
        <li><a href="javascript:;" data-value="1" class="curSelectedScale">100%</a></li>\
        <li><a href="javascript:;" data-value="1.5">150%</a></li>\
        <li><a href="javascript:;" data-value="2">200%</a></li>\
        <li><a href="javascript:;" data-value="5">500%</a></li>\
        <li><a href="javascript:;" data-value="10">1000%</a></li>\
    </ul>\
    </div>';

    function TZoomSelect(toolbar, container) {
        this.toolbar = toolbar;
        this.screen = toolbar.screen;
        this.painter = toolbar.painter;

        this.container = container;

        this.element = undefined;

        this.init();
    }

    TZoomSelect.prototype.init = function () {
        this.element = HTMLParser(tpl);
        this.container.appendChild(this.element);
    };

    TZoomSelect.prototype.show = function () {
        this.attachEvents();
        this.bindEventsToPainter();
    };

    TZoomSelect.prototype.attachEvents = function () {
        var _this = this;
        //var isAltKey = false;
        this.scale = 1;
        $(this.element).children('.dropdown-menu').on('click', 'a', function () {
            var value = parseFloat(this.dataset.value);
            _this.painter.setActiveWidgets();
            _this.painter.scaleTo(value);
            _this.painter.interactiveLayer.draw();
            _this.scale = value;

            //当前比例选中
            $('.curSelectedScale').removeClass('curSelectedScale');
            $(this).addClass('curSelectedScale');
        });

        // alt + 鼠标滚轮 控制缩放比例
        document.onmousewheel = function(e){
            var num = 0;
            if(e.altKey){
                if(e.wheelDelta > 0){
                    num = 1
                }else{
                    num = -1
                }
                _this.scale = _this.scale + 0.05 * num;
                _this.painter.setActiveWidgets();
                _this.painter.scaleTo(_this.scale);
                _this.painter.interactiveLayer.draw();
            }
        }
    };

    TZoomSelect.prototype.bindEventsToPainter = function () {
    };

    TZoomSelect.prototype.mouseDownActionPerformed = function () {
    };

    TZoomSelect.prototype.mouseMoveActionPerformed = function () {
    };

    TZoomSelect.prototype.mouseUpActionPerformed = function () {

    };

    TZoomSelect.prototype.close = function () {
        document.onmousewheel = null;
    };

    window.TZoomSelect = TZoomSelect;
} ());
(function () {

    function TProjectMaterial() {
        TBase.apply(this, arguments);
    }

    TProjectMaterial.prototype = Object.create(TBase.prototype);
    TProjectMaterial.prototype.constructor = TProjectMaterial;

    TProjectMaterial.prototype.tpl = '\
<button class="btn-trigger" title="项目素材控件">\
    <span class="glyphicon glyphicon-certificate"></span>\
</button>';
    
    TProjectMaterial.prototype.onTrigger = function () {
        MaterialModal.show();
    };

    window.TProjectMaterial = TProjectMaterial;
} ());
(function () {

    function TScreen() {
        TShape.apply(this, arguments);

        this.layer = this.painter.interactiveLayer;
        this.previewRect = undefined;
    }

    TScreen.prototype = Object.create(TShape.prototype);
    TScreen.prototype.constructor = TScreen;

    TScreen.prototype.tpl = '\
<button class="btn-switch" title="Screen容器控件" data-type="screenCtrl">\
    <strong style="font-size: 20px;">S</strong>\
</button>';
    
    void function () {

        this.createEntity = function () {
            return {
                option: {
                    pageId: '',
                    pageType: ''
                },
                type: 'HtmlScreenContainer'
            };
        };

    }.call(TScreen.prototype);

    window.TScreen = TScreen;
} ());
(function () {

    function TGridLine() {
        TBase.apply(this, arguments);
    }

    TGridLine.prototype = Object.create(TBase.prototype);
    TGridLine.prototype.constructor = TGridLine;

    TGridLine.prototype.tpl = '\
<button class="btn-trigger" data-type="gridLineCtrl" title="显示网格线">\
    <span class="glyphicon glyphicon-th"></span>\
</button>';

    TGridLine.prototype.onTrigger = function () {
        var $gridLine = $('.html-group.bg-group.gridLine');
        var $bg = $('.html-group.bg-group');
        if($gridLine.length < 1){
            $bg.after('<div class="html-group bg-group gridLine"></div>')
        }else{
            $gridLine.remove();
        }
    };

    window.TGridLine = TGridLine;
} ());
(function(){

    var tpl ='<div class="dropdown" id="divWrench">\
    <button class="dropdown-toggle" data-toggle="dropdown" title="格式化" role="button" aria-expanded="false"><span class="glyphicon glyphicon-wrench"></span></button>\
    <ul class="dropdown-menu dropdown-menu-right" style="left:32px;top:-50px;">\
        <li><a href="javascript:;" data-value="top"><span class="glyphicon glyphicon-arrow-up" aria-hidden="true"></span>上端对齐</a></li>\
        <li><a href="javascript:;" data-value="right"><span class="glyphicon glyphicon-arrow-right" aria-hidden="true"></span>右端对齐</a></li>\
        <li><a href="javascript:;" data-value="down"><span class="glyphicon glyphicon-arrow-down" aria-hidden="true"></span>下端对齐</a></li>\
        <li><a href="javascript:;" data-value="left"><span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span>左端对齐</a></li>\
        <li><a href="javascript:;" data-value="level"><span class="glyphicon glyphicon-option-horizontal" aria-hidden="true"></span>水平等间距</a></li>\
        <li><a href="javascript:;" data-value="vertical"><span class="glyphicon glyphicon-option-vertical" aria-hidden="true"></span>垂直等间距</a></li>\
    </ul>\
    </div>';
    function TLayout(toolbar, container) {
        this.toolbar = toolbar;
        this.screen = toolbar.screen;
        this.painter = toolbar.painter;

        this.container = container;

        this.element = undefined;

        this.init();
    }
    TLayout.prototype.init = function () {
        this.element = HTMLParser(tpl);
        this.container.appendChild(this.element);
    };
    TLayout.prototype.show = function () {
        this.attachEvents();
    };
    TLayout.prototype.attachEvents = function () {
        var _this = this;
        $(this.element).children('.dropdown-menu').on('click', 'a', function () {
            var value = this.dataset.value;
            var activeWidgets = _this.painter.state.activeWidgets();
            var len = activeWidgets.length;
            var activeWidgetsArrY = [];
            var activeWidgetsArrXW = [];
            var activeWidgetsArrX = [];
            var activeWidgetsArrYH = [];
            if(len > 1){
                for(var i=0;i<len;i++){
                    if(activeWidgets[i].store.model.type() == 'CanvasPipe'){
                        return;
                    }
                }
                for(var i=0;i<len;i++){
                    var x = activeWidgets[i].store.model.x();
                    var xaddw = x + activeWidgets[i].store.model.w();
                    activeWidgetsArrX.push(x);
                    activeWidgetsArrXW.push(xaddw);
                }
                var maxInNumbersXW = Math.max.apply(Math, activeWidgetsArrXW);
                var maxInNumbersX = Math.max.apply(Math, activeWidgetsArrX);
                var minInNumbersX = Math.min.apply(Math, activeWidgetsArrX);
                for(var i=0;i<len;i++){
                    var y = activeWidgets[i].store.model.y();
                    var yaddh = y + activeWidgets[i].store.model.h();
                    activeWidgetsArrY.push(y);
                    activeWidgetsArrYH.push(yaddh);
                }
                var maxInNumbersYH = Math.max.apply(Math, activeWidgetsArrYH);
                var maxInNumbersY = Math.max.apply(Math, activeWidgetsArrY);
                var minInNumbersY = Math.min.apply(Math, activeWidgetsArrY);
                //上对齐
                if(value == "top"){
                    _this.top(minInNumbersY);
                }
                //右对齐
                if(value == "right"){
                    _this.right(maxInNumbersXW);
                }
                //下对齐
                if(value == "down"){
                    _this.down(maxInNumbersYH);
                }
                //左对齐
                if(value == "left"){
                    _this.left(minInNumbersX);
                }
                //水平等间距
                if(value == "level"){
                    _this.level(maxInNumbersX,minInNumbersX);
                }
                //垂直等间距
                if(value == "vertical"){
                    _this.vertical(maxInNumbersY,minInNumbersY);
                }
            }
            _this.painter.setActiveWidgets();
            _this.painter.setActiveWidgets(activeWidgets);
        })
    };
    TLayout.prototype.top = function (minInNumbersY) {
        var _this = this;
        var activeWidgets = _this.painter.state.activeWidgets();
        var len = activeWidgets.length;
        for(var i=0;i<len;i++) {
            activeWidgets[i].store.model.y(minInNumbersY);
        }
    };
    TLayout.prototype.right = function (maxInNumbersXW) {
        var _this = this;
        var activeWidgets = _this.painter.state.activeWidgets();
        var len = activeWidgets.length;
        for(var i=0;i<len;i++) {
            activeWidgets[i].store.model.x(maxInNumbersXW - activeWidgets[i].store.model.w() );
        }
    };
    TLayout.prototype.down = function (maxInNumbersYH){
        var _this = this;
        var activeWidgets = _this.painter.state.activeWidgets();
        var len = activeWidgets.length;
        for(var i=0;i<len;i++) {
            activeWidgets[i].store.model.y(maxInNumbersYH - activeWidgets[i].store.model.h());
        }
    };
    TLayout.prototype.left = function (minInNumbersX){
        var _this = this;
        var activeWidgets = _this.painter.state.activeWidgets();
        var len = activeWidgets.length;
        for(var i=0;i<len;i++) {
            activeWidgets[i].store.model.x(minInNumbersX);
        }
    };
    TLayout.prototype.level = function (maxInNumbersX,minInNumbersX) {
        var _this = this;
        var activeWidgets = _this.painter.state.activeWidgets();
        var allactiveWidgetsW = 0;
        var len = activeWidgets.length;
        activeWidgets.sort(function (a, b) {
            return a.store.model.x() > b.store.model.x();
        });
        for(var i = 0;i<len - 1;i++){
            allactiveWidgetsW += activeWidgets[i].store.model.w();
        }
        var differenceX = maxInNumbersX - minInNumbersX - allactiveWidgetsW;
        var averageX = differenceX/(len-1);
        for(var i=1;i<len - 1;i++){
            var nowactiveWidgetsX = activeWidgets[i-1].store.model.x() + activeWidgets[i-1].store.model.w() + averageX;
            activeWidgets[i].store.model.x(nowactiveWidgetsX);
        }
    };
    TLayout.prototype.vertical = function (maxInNumbersY,minInNumbersY){
        var _this = this;
        var activeWidgets = _this.painter.state.activeWidgets();
        var allactiveWidgetsH = 0;
        var len = activeWidgets.length;
        activeWidgets.sort(function (a, b) {
            return a.store.model.y() > b.store.model.y();
        });
        for(var i = 0;i<len - 1;i++){
            allactiveWidgetsH += activeWidgets[i].store.model.h();
        }
        var differenceY = maxInNumbersY - minInNumbersY - allactiveWidgetsH;
        var averageY = differenceY/(len-1);
        for(var i=1;i<len - 1;i++){
            var nowactiveWidgetsY = activeWidgets[i-1].store.model.y() + activeWidgets[i-1].store.model.h() + averageY;
            activeWidgets[i].store.model.y(nowactiveWidgetsY);
        }
    };
    TLayout.prototype.close = function () {};

    window.TLayout = TLayout;
} ());
(function () {

    window.GUtil = {
        DEG: 180 / Math.PI,
        isPointInRect: function (x, y, rx, ry, rw, rh) {
            return x>rx && x<(rx+rw) && y>ry && y<(ry+rh);
        },
        isIntersect: function (a, b) {
            return !(
                b.left > a.right ||
                b.right < a.left ||
                b.top > a.bottom ||
                b.bottom < a.top
            );
        },
        getIntersection: function (x, y, layer) {
            return layer.getIntersection({
                x: x,
                y: y
            });
        },
        /**
         * 返回给定的点在指定 Html 图层的哪个图形范围中
         * @param  {Number} x          给定点的横坐标
         * @param  {Number} y          给定点的纵坐标
         * @param  {Array|Object} layer      指定的容器
         * @param  {Array} metrix      当前的转换矩阵，表示当前页面的缩放和偏移量
         * @return {Object} 若不在任何图形中，则返回 null，否则返回找到的图形
         */
        getIntersectionByPointInHtmlLayers: function (x, y, layer, metrix) {
            var children, pos;
            var stack = [];
            metrix = metrix || [1, 0, 0, 1, 0, 0];

            if( Object.prototype.toString.call(layer) === '[object Array]' ) {
                this.sortShapesByZIndex(layer);
                stack = stack.concat(layer);
                layer = stack.pop();
            }

            if(!layer) return null;

            do {
                /** 判断有没有子节点 */
                /** 如果有子节点，则加入栈中进行循环 */
                if( ['Layer', 'Group'].indexOf(layer.getType()) > -1 ) {
                    children = layer.getChildren();
                    // children 数组按照 z-index 排序
                    this.sortShapesByZIndex(children);
                    stack = stack.concat(Array.prototype.slice.call(children));
                    continue;
                }
                
                pos = GUtil.transform(layer, metrix);
                if( this.isPointInRect(x, y, pos.x, pos.y, pos.w, pos.h) ) {
                    return layer;
                }
                
            } while(layer = stack.pop());

            return null;
        },
        /**
         * 返回给定的点在指定 Canvas 图层的哪个图形范围中
         * @param  {Number} x          给定点的横坐标
         * @param  {Number} y          给定点的纵坐标
         * @param  {Array|Object} layer      指定的 Factory Canvas 图层对象
         * @return {Object} 若不在任何图形中，则返回 null，否则返回找到的图形
         */
        getIntersectionByPointInCanvasLayers: function (x, y, layer, ignoreType) {
            var layerShape = null;
            var findShape = null;
            var shape = null;
            var stack = [], s;

            ignoreType = typeof ignoreType === 'undefined' ? [] : [ignoreType];
            ignoreType = ['Layer', 'Group'].concat(ignoreType);

            if ( Object.prototype.toString.call(layer) !== '[object Array]' ) {
                layer = [layer];
            }

            // 过滤掉非 canvas 图层
            layer = layer.filter(function (row) {
                return row.getLayerType() === 'canvas';
            });

            // 如果没有找到，则返回 null
            if (layer.length === 0) return null;

            // 获取 Layer 图层
            layerShape = layer[0].shape.getLayer();
            // 在 Layer 图层中查找指定位置有无图形
            // 注意，这里返回的 findShape 是 Konva 对象
            findShape = layerShape.getIntersection({
                x: x,
                y: y
            });

            if (!findShape) return null;

            // 深度搜索
            stack = stack.concat(layer);
            while ( s = stack.pop() ) {
                if (ignoreType.indexOf(s.getType()) > -1 ) {
                    stack = stack.concat(s.children);
                    continue;
                }

                if (s.hasShape(findShape)) {
                    shape = s;
                    break;
                }
            }

            return shape;
        },
        /**
         * 返回给定的点在指定图层的哪个图形范围中
         */
        getIntersectionByPoint: function (x, y, layer, metrix, ignoreType) {
            var htmlLayers = [];
            var canvasLayers = [];
            var shape = null;

            if ( Object.prototype.toString.call(layer) !== '[object Array]' ) {
                layer = [layer];
            }

            // 将 html 图层和 canvas 图层区分开来
            layer.forEach(function (row) {
                var layerType = row.getLayerType();

                if (layerType === 'canvas') {
                    canvasLayers.push(row);
                    return;
                }
                if (layerType === 'html') {
                    htmlLayers.push(row);
                    return;
                }
            });

            // 先在 html 图层中查找
            if (htmlLayers.length !== 0) {
                shape = this.getIntersectionByPointInHtmlLayers(x, y, htmlLayers, metrix);
            }
            // 再在 canvas 图层中查找
            else if (canvasLayers.length !== 0) {
                shape = this.getIntersectionByPointInCanvasLayers(x, y, canvasLayers, metrix, ignoreType);
            }

            return shape;
        },
        getIntersectionByRect: function (x, y, w, h, shape, metrix) {
            var hitShapes = [];
            var children, isHit;
            var stack = [];
            var pos;

            if( Object.prototype.toString.call(shape) === '[object Array]' ) {
                this.sortShapesByZIndex(shape);
                stack = stack.concat(shape);
                shape = stack.pop();
            }

            if(!shape) return [];

            do {
                if(['Layer', 'Group'].indexOf(shape.getType()) > -1) {
                    stack = stack.concat(Array.prototype.slice.call(shape.getChildren()));
                    continue;
                }

                pos = GUtil.transform(shape, metrix);
                isHit = this.isIntersect({
                    left: pos.x,
                    top: pos.y,
                    right: pos.x+pos.w,
                    bottom: pos.y+pos.h
                }, {
                    left: x,
                    top: y,
                    right: x+w,
                    bottom: y+h
                });

                if(isHit) {
                    hitShapes.push(shape);
                }

            } while(shape = stack.pop());

            return hitShapes;
        },
        sortShapesByZIndex: function (shapes) {
            /** Konva 的 Collection 使用 sort 按照 index 排序时会有问题 */
            if(shapes instanceof Konva.Collection) return;
            shapes.sort(function (first, second) {
                return first.getZIndex() > second.getZIndex();
            });
        },
        getPipeRect: function (points) {
            var xMin, xMax, yMin, yMax;
            var pArr = [];
            
            // 先进行一次格式转换
            points.forEach(function (row) {
                if (typeof row !== 'number') {
                    pArr.push(row.x);
                    pArr.push(row.y);
                    return;
                }
                pArr.push(row);
            });

            for (var i = 0, len = pArr.length; i < len ; i += 2){
                if (typeof xMin === 'undefined' || pArr[i] < xMin) {
                    xMin = pArr[i];
                }
                if (typeof xMax === 'undefined' || pArr[i] > xMax) {
                    xMax = pArr[i];
                }
            }
            for (var i = 1, len = pArr.length; i < len ; i += 2){
                if (typeof yMin === 'undefined' || pArr[i] < yMin) {
                    yMin = pArr[i];
                }
                if (typeof yMax === 'undefined' || pArr[i] > yMax) {
                    yMax = pArr[i];
                }
            }
            return {
                xMin: xMin,
                yMin: yMin,
                xMax: xMax,
                yMax: yMax,
                w: Math.max(xMax - xMin, 10),
                h: Math.max(yMax - yMin, 10)
            }
        },
        /** 坐标转换 */
        transform: function () {
            var x, y, w, h, m, inverse;
            var pos;
            if(arguments.length > 3) {
                x = arguments[0];
                y = arguments[1];
                w = arguments[2];
                h = arguments[3];
                m = arguments[4];
                inverse = arguments[5];
            } else {
                pos = arguments[0].getAbsolutePosition();
                x = pos.x;
                y = pos.y;
                w = arguments[0].width();
                h = arguments[0].height();
                m = arguments[1];
                inverse = arguments[2];
            }

            /** 
             * 处理 width 和 height 为负数的情况
             * width 和 height 为负数是允许存在的
             * width 为负数，相当于做垂直翻转
             * height 为负数，相当于做水平翻转
             */
            if(w < 0) {
                w = Math.abs(w);
                x = x - w;
            }
            if(h < 0) {
                h = Math.abs(h);
                y = y - h;
            }

            return inverse === true ? {
                x: x,
                y: y,
                w: w / m[0],
                h: h / m[3]
            } : {
                x: x,
                y: y,
                w: w * m[0],
                h: h * m[3]
            };
        },
        getDistance: function (p1, p2) {
            var dx = Math.abs(p1.x - p2.x);
            var dy = Math.abs(p1.y - p2.y);

            return Math.sqrt(dx*dx+dy*dy);
        },
        /**
         * 计算点 p3 在线段 (p1, p2) 上的投影
         * 额外规则：若最终计算出的投影点 p0 在线段 (p1, p2) 之外，
         * 则返回超出方向的最大点（在这里为 p1 或 p2）
         * 计算公式
         * y = ((x2-x1)(y2-y1)(x3-x1)+(y2-y1)(y2-y1)y3+(x2-x1)(x2-x1)y1) / ((x2-x1)(x2-x1)+(y2-y1)(y2-y1))
         * x = x3 - (y2-y1)(y-y3)/(x2-x1);
         * 计算公式由算法组-张文博提供，感谢文博
         * @param  {Array} p1 线段的一个端点
         * @param  {Array} p2 线段的另一个端点
         * @param  {Array} p3 线段外一点
         * @return {Array}    投影点
         */
        getPointProjectionOnLine: function (p1, p2, p3) {
            // p[0]
            var x;
            // p[1]
            var y;
            // x2 - x1
            var a;
            // a * a
            var a2;
            // y2 - y1
            var b;
            // b * b
            var b2;
            // 是否在矩形内
            var isInRect = false;

            // 如果 x2 等于 x1，则说明 (p1, p2) 垂直于 x 轴，斜率不存在
            // 这里可以之间换算出结果
            if (p1[0] === p2[0]) {
                x = p1[0];
                y = p3[1];
            } else {
                a = p2[0] - p1[0];
                a2 = a * a;
                b = p2[1] - p1[1];
                b2 = b * b;
                // 直接套公式
                y = (a*b*(p3[0]-p1[0])+b2*p3[1]+a2*p1[1]) / (a2+b2);
                x = p3[0] - b*(y-p3[1]) / a;
            }

            // 处理投影不在线段上的情况
            if (p1[0] < p2[0]) {
                if (x < p1[0]) {
                    x = p1[0];
                    y = p1[1];
                } else if (x > p2[0]) {
                    x = p2[0];
                    y = p2[1];
                }
            } else {
                if (x < p2[0]) {
                    x = p2[0];
                    y = p2[1];
                } else if (x > p1[0]) {
                    x = p1[0];
                    y = p1[1];
                }
            }

            return {
                x: x,
                y: y
            };
        },
        loadImage: function (url, callback) {
            var image = new Image();
            image.src = url;
            image.onload = function () {
                callback(this);
            };
        }
    };
} ());
(function (Group) {

    function GResizableRect(shape, layer) {
        Group.call(this, {
            name: 'resizable-group',
            dragable: false
        });

        this.resizableShape = null;

        this.shape = shape;
        this.layer = layer;
        this.transform = layer.getTransform().m;

        this.init();
    }

    GResizableRect.prototype = Object.create(Group.prototype);
    GResizableRect.prototype.constructor = GResizableRect;

    GResizableRect.prototype.init = function () {
        this.bindModelOb();
        this.create();
    };

    GResizableRect.prototype.create = (function () {

        var ANCHOR_SIZE = 6;

        function update(activeAnchor,startVal) {
            var group = activeAnchor.getParent();
            var x, y, width, height;

            var topLeft = group.find('.top-left')[0];
            var topMiddle = group.find('.top-middle')[0];
            var topRight = group.find('.top-right')[0];
            var rightMiddle = group.find('.right-middle')[0];
            var bottomRight = group.find('.bottom-right')[0];
            var bottomMiddle = group.find('.bottom-middle')[0];
            var bottomLeft = group.find('.bottom-left')[0];
            var leftMiddle = group.find('.left-middle')[0];

            var shape = group.find('.resizable-shape')[0];

            var anchorX = activeAnchor.getX();
            var anchorY = activeAnchor.getY();

            switch (activeAnchor.getName().split(' ')[1]) {
                case 'top-left':
                    topRight.setY(anchorY);
                    bottomLeft.setX(anchorX);
                    break;
                case 'top-middle':
                    topLeft.setY(anchorY);
                    topRight.setY(anchorY);
                    break;
                case 'top-right':
                    topLeft.setY(anchorY);
                    bottomRight.setX(anchorX);
                    break;
                case 'right-middle':
                    topRight.setX(anchorX);
                    bottomRight.setX(anchorX);
                    break;
                case 'bottom-right':
                    topRight.setX(anchorX);
                    bottomLeft.setY(anchorY);
                    break;
                case 'bottom-middle':
                    bottomLeft.setY(anchorY);
                    bottomRight.setY(anchorY);
                    break;
                case 'bottom-left':
                    topLeft.setX(anchorX);
                    bottomRight.setY(anchorY);
                    break;
                case 'left-middle':
                    topLeft.setX(anchorX);
                    bottomLeft.setX(anchorX);
                    break;
            }

            width = topRight.getX() - topLeft.getX();
            height = bottomLeft.getY() - topLeft.getY();
            if (startVal) {//按住shift键情况下
                var endKw = width/startVal.w;//结束时width的比值
                var endKh = height/startVal.h;//结束时height的比值
                if(endKw > endKh){
                    height = endKw * height;
                }else if(endKw < endKh){
                    width = endKh * width;
                }
                //调整几个点的位置
                x = topLeft.getX() + width;
                y = topLeft.getY() + height;

                topRight.setX(x);
                topRight.setY(topLeft.getY());
                bottomLeft.setX(topLeft.getX());
                bottomLeft.setY(y);
                bottomRight.setX(x);
                bottomRight.setY(y);
            }
                // 调整 4 个中点的位置
                x = topLeft.getX() + width/2;
                y = topLeft.getY() + height/2;
                topMiddle.setX(x);
                topMiddle.setY(topLeft.getY());
                rightMiddle.setX(topRight.getX());
                rightMiddle.setY(y);
                bottomMiddle.setX(x);
                bottomMiddle.setY(bottomLeft.getY());
                leftMiddle.setX(topLeft.getX());
                leftMiddle.setY(y);

            // 调整图形的位置和大小
            shape.position(topLeft.position());

            if(width && height) {
                shape.width(width);
                shape.height(height);
            }
        }
        
        function addAnchor(group, name) {
            var _this = this;
            var anchor = new Konva.Rect({
                stroke: '#666',
                fill: '#ddd',
                strokeWidth: 1,
                width: ANCHOR_SIZE,
                height: ANCHOR_SIZE,
                name: name,
                offsetX: ANCHOR_SIZE/2,
                offsetY: ANCHOR_SIZE/2,
                draggable: true,
                dragOnTop: true
            });
            var type = name.split(' ')[1];

            if (type === 'top-middle' || type === 'bottom-middle') {
                // 限制垂直拖动
                anchor.dragBoundFunc(function (pos) {
                    return {
                        x: this.getAbsolutePosition().x,
                        y: pos.y
                    }
                });
            } else if (type === 'left-middle' || type === 'right-middle') {
                // 限制水平拖动
                anchor.dragBoundFunc(function (pos) {
                    return {
                        x: pos.x,
                        y: this.getAbsolutePosition().y
                    }
                });
            }

            anchor.on('dragmove', function(e) {
                var layer = this.getLayer();
                //按住shift键等比例缩放控件
                if(e.evt.shiftKey){
                    var startVal = _this.shape.store.model._values;
                }
                update(this,startVal);
                layer.draw();
            });
            anchor.on('mousedown touchstart', function (e) {
                this.moveToTop();
                e.cancelBubble = true;
            });
            anchor.on('mouseup', function (e) {
                e.cancelBubble = true;
            });
            anchor.on('dragend', function() {
                _this.resizeShape();
            });
            // 鼠标悬浮样式定义
            anchor.on('mouseenter', function() {
                var layer = this.getLayer();
                this.setStrokeWidth(2);
                layer.draw();
            });
            anchor.on('mouseout', function() {
                var layer = this.getLayer();
                this.setStrokeWidth(1);
                layer.draw();
            });

            group.add(anchor);
        }

        return function () {
            var _this = this;
            var shape, bound;
            var group = this;
            var id = this.shape.id();
            var pos = GUtil.transform(this.shape, this.transform);

            this.resizableShape = shape = new Konva.Rect({
                id: id+'_a',
                name: 'resizable-shape',
                x: pos.x,
                y: pos.y,
                width: pos.w,
                height: pos.h,
                strokeWidth: 1,
                stroke: '#2aabd2'
            });
            bound = shape.getClientRect();

            group.add(shape);
            addAnchor.call(this, group, 'anchor top-left');
            addAnchor.call(this, group, 'anchor top-middle');
            addAnchor.call(this, group, 'anchor top-right');
            addAnchor.call(this, group, 'anchor right-middle');
            addAnchor.call(this, group, 'anchor bottom-right');
            addAnchor.call(this, group, 'anchor bottom-middle');
            addAnchor.call(this, group, 'anchor bottom-left');
            addAnchor.call(this, group, 'anchor left-middle');

            group.find('.anchor').each(function (anchor, i) {
                switch (anchor.getName().split(' ')[1]) {
                    case 'top-left':
                        anchor.setX(bound.x);
                        anchor.setY(bound.y);
                        break;
                    case 'top-middle':
                        anchor.setX(bound.x + bound.width / 2);
                        anchor.setY(bound.y);
                        break;
                    case 'top-right':
                        anchor.setX(bound.x + bound.width);
                        anchor.setY(bound.y);
                        break;
                    case 'right-middle':
                        anchor.setX(bound.x + bound.width);
                        anchor.setY(bound.y + bound.height / 2);
                        break;
                    case 'bottom-right':
                        anchor.setX(bound.x + bound.width);
                        anchor.setY(bound.y + bound.height);
                        break;
                    case 'bottom-middle':
                        anchor.setX(bound.x + bound.width / 2);
                        anchor.setY(bound.y + bound.height);
                        break;
                    case 'bottom-left':
                        anchor.setX(bound.x);
                        anchor.setY(bound.y + bound.height);
                        break;
                    case 'left-middle':
                        anchor.setX(bound.x);
                        anchor.setY(bound.y + bound.height / 2);
                        break;
                }

            });

            return group;
        };
    }());
        
    GResizableRect.prototype.destroy = function () {
        Group.prototype.destroy.call(this);
        this.unbindModelOb();
    };

    GResizableRect.prototype.bindModelOb = function () {
        this.shape.store.model.addEventListener('update', this.update, this);
    };

    GResizableRect.prototype.unbindModelOb = function () {
        this.shape.store.model.removeEventListener('update', this.update);
    };

    GResizableRect.prototype.update = function () {
        var posOfResizableShape = GUtil.transform(this.resizableShape, this.transform);
        var posOfShape = GUtil.transform(this.shape, this.transform);

        this.position({
            x: this.x() + parseInt(posOfShape.x) - posOfResizableShape.x,
            y: this.y() + posOfShape.y - posOfResizableShape.y
        });

        this.resizableShape.width(posOfShape.w);
        this.resizableShape.height(posOfShape.h);

        this.resize();

        this.getLayer().draw();
    };

    /** 调整大小，用于同步那些通过属性面板修改导致的大小调整 */
    GResizableRect.prototype.resize = function () {
        var pos = this.resizableShape.position();
        var w = this.resizableShape.width();
        var h = this.resizableShape.height();

        var topLeft = this.find('.top-left')[0];
        var topMiddle = this.find('.top-middle')[0];
        var topRight = this.find('.top-right')[0];
        var rightMiddle = this.find('.right-middle')[0];
        var bottomRight = this.find('.bottom-right')[0];
        var bottomMiddle = this.find('.bottom-middle')[0];
        var bottomLeft = this.find('.bottom-left')[0];
        var leftMiddle = this.find('.left-middle')[0];

        topMiddle.x(pos.x + w/2);
        topRight.x(pos.x + w);
        rightMiddle.x(pos.x + w);
        rightMiddle.y(pos.y + h/2);
        bottomRight.x(pos.x + w);
        bottomRight.y(pos.y + h);
        bottomMiddle.x(pos.x + w/2);
        bottomMiddle.y(pos.y + h);
        bottomLeft.y(pos.y + h);
        leftMiddle.y(pos.y + h/2);
    };

    GResizableRect.prototype.resizeShape = function (isAdsorptive) {
        var shape = this.shape;
        var pos = this.layer.painter.transform(this.resizableShape, this.transform, true);
        var gridWidth;

        isAdsorptive = typeof isAdsorptive === 'undefined' ? true : isAdsorptive;

        if (isAdsorptive) {
            gridWidth = this.layer.painter.getGridWidth();
            pos.x = Math.round(pos.x / gridWidth) * gridWidth;
            pos.y = Math.round(pos.y / gridWidth) * gridWidth;
        }
        
        // pos.w = Math.round(pos.w / gridWidth) * gridWidth;
        // pos.h = Math.round(pos.h / gridWidth) * gridWidth;

        // 水平翻转
        if(pos.w < 0) { pos.x += pos.w; }
        // 垂直翻转
        if(pos.h < 0) { pos.y += pos.h; }

        shape.setAbsolutePosition(pos);
        shape.width(Math.abs(pos.w));
        shape.height(Math.abs(pos.h));

        this.layer.draw();
    };

    window.GResizableRect = GResizableRect;
} (Konva.Group));
(function (Group) {

    function GResizableLine(shape, layer) {
        Group.call(this, {
            name: 'resizable-group',
            dragable: false
        });

        this.resizableShape = null;
        this.anchorStart = null;
        this.anchorEnd = null;

        this.shape = shape;
        this.layer = layer;
        this.painter = this.layer.painter;
        this.transform = layer.getTransform().m;

        this.init();
    }

    GResizableLine.prototype = Object.create(Group.prototype);
    GResizableLine.prototype.constructor = GResizableLine;

    GResizableLine.prototype.init = function () {
        this.create();
    };

    GResizableLine.prototype.create = (function () {

        var ANCHOR_SIZE = 12;

        function addAnchor(group, pos) {
            var _this = this;
            var anchor = new Konva.Circle({
                stroke: '#666',
                fill: '#ddd',
                strokeWidth: 1,
                radius: ANCHOR_SIZE/2,
                x: pos.x,
                y: pos.y,
                draggable: true,
                dragOnTop: true
            });

            anchor.on('dragmove', function(e) {
                var layer = this.getLayer();
                _this.resize();
                layer.draw();
            });
            anchor.on('mouseup', function(e) {
                if(e.evt.shiftKey){
                    var shiftY = _this.shape.store.model._values.option.points[0].y;
                    if(e.target === _this.anchorStart){//以左边点按住shift移动
                        var shiftAnchorStart = _this.anchorEnd;
                        var shiftAnchorEnd = _this.anchorStart;
                    }
                    _this.resize(shiftY,shiftAnchorStart,shiftAnchorEnd);
                }
            });
            anchor.on('mousedown touchstart', function (e) {
                this.moveToTop();
                e.cancelBubble = true;
            });
            anchor.on('dragend', function() {
                _this.resizeShape();
            });
            // 鼠标悬浮样式定义
            anchor.on('mouseover', function(e) {
                var layer = this.getLayer();
                this.setStrokeWidth(2);
                layer.draw();
                e.cancelBubble = true;
            });
            anchor.on('mouseout', function() {
                var layer = this.getLayer();
                this.setStrokeWidth(1);
                layer.draw();
            });

            group.add(anchor);

            return anchor;
        }

        return function () {
            var group;
            var _this = group = this;
            var id = this.shape.store.model._id();
            var points = (function (points) {
                var p1 = this.painter.inverseTransform(points[0]);
                var p2 = this.painter.inverseTransform(points[1]);
                return [p1, p2];
            }).call(this, this.shape.store.model['option.points']());

            this.resizableShape = new Konva.Line({
                id: id+'_a',
                name: 'resizable-shape',
                points: [points[0].x, points[0].y, points[1].x, points[1].y],
                strokeWidth: 4,
                stroke: '#2aabd2'
            });

            group.add(this.resizableShape);
            this.anchorStart = addAnchor.call(this, group, points[0]);
            this.anchorEnd = addAnchor.call(this, group, points[1]);

            return group;
        };
    }());
        
    GResizableLine.prototype.destroy = function () {
        Group.prototype.destroy.call(this);
    };

    /** 调整大小，用于同步那些通过属性面板修改导致的大小调整 */
    GResizableLine.prototype.resize = function (shiftY,shiftAnchorStart,shiftAnchorEnd) {
        var line = this.resizableShape;
        var anchorStart = this.anchorStart;
        var anchorEnd = this.anchorEnd;
        var lastPosX = this.anchorStart.getX();
        var cursorPosX = this.anchorEnd.getX();
        var lastPosY = this.anchorStart.getY();
        var cursorPosY = this.anchorEnd.getY();
        var x,y;
        if(shiftY){//按住shift垂直调整管道
            if(shiftAnchorStart && shiftAnchorEnd){
                anchorStart = this.anchorEnd;
                anchorEnd = this.anchorStart;
                cursorPosX = this.anchorStart.getX();
                lastPosX = this.anchorEnd.getX();
                cursorPosY = this.anchorStart.getY();
                lastPosY = this.anchorEnd.getY();
            }
            if (anchorStart) {
                if (Math.abs(lastPosX - cursorPosX) < Math.abs(lastPosY - cursorPosY)) {
                    x = lastPosX;
                    y = cursorPosY;
                } else {
                    x = cursorPosX;
                    y = lastPosY;
                }
            } else {
                x = cursorPosX;
                y = cursorPosY;
            }
            line.points([anchorStart.getX(), anchorStart.getY(), x,y]);
            anchorEnd.setAbsolutePosition({x:x,y:y});
        } else {
            line.points([anchorStart.getX(), anchorStart.getY(), anchorEnd.getX(), anchorEnd.getY()]);
        }
    };

    GResizableLine.prototype.resizeShape = function () {
        var shape = this.shape;
        var points = shape.store.model['option.points']();
        var startPoint = this.anchorStart.getAbsolutePosition();
        var endPoint = this.anchorEnd.getAbsolutePosition();

        startPoint = this.painter.transform(startPoint);
        endPoint = this.painter.transform(endPoint);

        shape.store.model['option.points']([startPoint, endPoint]);

        this.layer.draw();
    };

    window.GResizableLine = GResizableLine;
} (Konva.Group));
(function () {

    function GStage(painter) {
        this.painter = painter;

        this.shape = null;
        this.children = [];

        this.init();
    }

    GStage.prototype.init = function () {
        throw new Error('method "init" need to be implemented.');
    };

    GStage.prototype.removeChild = function (id) {
        var children = this.children;
        var removed = [];

        for (var i = 0, len = children.length; i < len; i++) {
            if( children[i].id() === id ) {
                removed = children.splice(i, 1);
                break;
            }
        }

        if(removed.length === 0) return false;
        return true;
    };

    GStage.prototype.close = function () {
        this.painter = null;
        this.children = null;
    };

    window.GStage = GStage;
} ());
(function (GStage, Layer) {

    function GCanvasStage(painter, options) {
        this.options = options || {};

        GStage.apply(this, arguments);
    }

    GCanvasStage.prototype = Object.create(GStage.prototype);
    GCanvasStage.prototype.constructor = GCanvasStage;

    /** override */
    GCanvasStage.prototype.init = function () {
        this.shape = new Layer({
            id: '__staticLayer',
            name: '__staticLayer',
            hitGraphEnabled: typeof this.options.hitGraphEnabled === 'undefined' ? true : this.options.hitGraphEnabled
        });
        this.shape.getCanvas()._canvas.style.zIndex = 2;
        this.painter.stage.add(this.shape);
    };

    GCanvasStage.prototype.getChildren = function () {
        return this.children;
    };

    GCanvasStage.prototype.findOne = function (selector) {
        var id = selector.substr(1).trim();
        var rs = [];
        rs = this.children.filter(function (row) {
            return row.store.model._id() === id;
        });
        return rs.length > 0 ? rs[0] : null;
    };

    GCanvasStage.prototype.add = function (layer) {
        this.children.push(layer);
        this.shape.add(layer.shape);
    };

    GCanvasStage.prototype.draw = function () {
        this.shape.draw();
    };

    GCanvasStage.prototype.getTransform = function () {
        return this.shape.getTransform();
    };

    GCanvasStage.prototype.offsetX = function (v) {
        if(v !== undefined) {
            return this.shape.offsetX(v);
        }
        return this.shape.offsetX();
    };

    GCanvasStage.prototype.offsetY = function (v) {
        if(v !== undefined) {
            return this.shape.offsetY(v);
        }
        return this.shape.offsetY();
    };

    GCanvasStage.prototype.x = function () {
        return Layer.prototype.x.apply(this.shape, arguments);
    };

    GCanvasStage.prototype.y = function () {
        return Layer.prototype.y.apply(this.shape, arguments);
    };

    GCanvasStage.prototype.width = function () {
        return Layer.prototype.width.apply(this.shape, arguments);
    };

    GCanvasStage.prototype.height = function () {
        return Layer.prototype.height.apply(this.shape, arguments);
    };

    GCanvasStage.prototype.scale = function () {
        return Layer.prototype.scale.apply(this.shape, arguments);
    };

    GCanvasStage.prototype.close = function () {
        GStage.prototype.close.call(this);
        this.shape.destroy();
    };

    window.GCanvasStage = GCanvasStage;

} (window.GStage, Konva.Layer));
(function (GStage) {

    function GHtmlStage(painter) {
        GStage.apply(this, arguments);
    }

    GHtmlStage.prototype = Object.create(GStage.prototype);
    GHtmlStage.prototype.constructor = GHtmlStage;

    /** override */
    GHtmlStage.prototype.init = function () {
        var w = this.painter.stage.width();
        var h = this.painter.stage.height();
        var pageWidth = this.painter.pageWidth;
        var pageHeight = this.painter.pageHeight;
        
        this.shape = document.createElement('div');
        this.shape.className = 'html-layer';
        this.shape.style.width = pageWidth + 'px';
        this.shape.style.height = pageHeight + 'px';
        this.shape.style.left = (w - pageWidth) / 2 + 'px';
        this.shape.style.top = (h - pageHeight) / 2 + 'px';
        this.shape.style.zIndex = 3;

        this.painter.stage.getContent().appendChild(this.shape);
    };

    GHtmlStage.prototype.setZIndex = function (zIndex) {
        this.shape.style.zIndex = zIndex;
    };

    GHtmlStage.prototype.getChildren = function () {
        return this.children;
    };

    GHtmlStage.prototype.findOne = function (selector) {
        var id = selector.substr(1).trim();
        var rs = [];
        rs = this.children.filter(function (row) {
            return row.store.model._id() === id;
        });
        return rs.length > 0 ? rs[0] : null;
    };

    GHtmlStage.prototype.add = function (layer) {
        this.children.push(layer);
        this.shape.appendChild(layer.shape);
    };

    GHtmlStage.prototype.draw = function () { /** 不需要做任何事 */ };

    GHtmlStage.prototype.position = function (params) {
        if(typeof params !== 'undefined') {
            this.x(params.x);
            this.y(params.y);
            return true;
        }

        return {
            x: this.x(),
            y: this.y()
        };
    };

    GHtmlStage.prototype.x = function (val) {
        if(Object.prototype.toString.call(val) === '[object Number]') {
            return this.shape.style.left = val + 'px';
        }
        return parseFloat(this.shape.style.left || 0);
    };

    GHtmlStage.prototype.y = function (val) {
        if(Object.prototype.toString.call(val) === '[object Number]') {
            return this.shape.style.top = val + 'px';
        }
        return parseFloat(this.shape.style.top || 0);
    };

    GHtmlStage.prototype.offsetX = function (v) {
        var style;
        if(v !== undefined) {
            return this.shape.style.left = v + 'px';
        }
        style = window.getComputedStyle(this.shape);
        return parseFloat(style.left);
    };

    GHtmlStage.prototype.offsetY = function (v) {
        var style;
        if(v !== undefined) {
            return this.shape.style.top = v + 'px';
        }
        style = window.getComputedStyle(this.shape);
        return parseFloat(style.top);
    };

    GHtmlStage.prototype.width = function () {};

    GHtmlStage.prototype.height = function () {};

    GHtmlStage.prototype.scale = function (scale) {
        var tW = this.painter.stage.width();
        var tH = this.painter.stage.height();
        var w = parseFloat(this.painter.pageWidth);
        var h = parseFloat(this.painter.pageHeight);

        this.shape.style.transform = 'scale('+scale+')';
        this.shape.style.width = w + 'px';
        this.shape.style.height = h + 'px';
        this.shape.style.left = (tW - w*scale)/2 + 'px';
        this.shape.style.top = (tH - h*scale)/2 + 'px';
    };

    GHtmlStage.prototype.viewScale = function (scaleX, scaleY) {
        var tW = this.painter.stage.width();
        var tH = this.painter.stage.height();
        var w = parseFloat(this.painter.pageWidth)*scaleX;
        var h = parseFloat(this.painter.pageHeight)*scaleY;

        this.shape.style.width = w + 'px';
        this.shape.style.height = h + 'px';
        this.shape.style.left = (tW - w)/2 + 'px';
        this.shape.style.top = (tH - h)/2 + 'px';
    };

    GHtmlStage.prototype.close = function () {
        GStage.prototype.close.call(this);
        this.shape.parentNode.removeChild(this.shape);
    };

    window.GHtmlStage = GHtmlStage;

} (window.GStage));
/** 
 * 图层基类
 */

(function () {

    function GLayer(painter, model) {
        this.painter = painter;
        this.store = {};
        this.store.model = model;

        this.shape = null;
        this.children = [];

        this.init();
    }

    GLayer.prototype.init = function () {
        this.bindModelOb();
    };
    
    GLayer.prototype.bindModelOb = function () {
        this.store.model.addEventListener('update', this.update, this);
    };

    GLayer.prototype.update = function (e) {
        var isHide = this.store.model.isHide();
        if(isHide === 1) {
            this.hideLayer();
        } else {
            this.showLayer();
        }
        this.painter.setActiveWidgets();
        this.draw();
    };

    GLayer.prototype.add = function (e) {};

    GLayer.prototype.show = function () {};

    GLayer.prototype.showLayer = function () {};

    GLayer.prototype.hideLayer = function () {};

    GLayer.prototype.getPainter = function () {
        return this.painter;
    };

    GLayer.prototype.find = function (selector) {
        var type = selector[0];
        var rs;

        selector = selector.substr(1);
        rs = this.children.filter(function (row) {
            switch(type) {
                case '#':
                    if(row.store.model._id() === selector) {
                        return true;
                    }
                    break;
                case '.':
                    if( row.shape.hasName(selector) ) {
                        return true;
                    }
                    break;
            }
            return false;
        });

        return rs;
    };

    GLayer.prototype.draw = function () {
        this.shape.getLayer().draw();
    };

    GLayer.prototype.removeChild = function (id) {
        var children = this.children;
        var removed = [];
        var idx, list;

        for (var i = 0, len = children.length; i < len; i++) {
            if( children[i].id() === id ) {
                removed = children.splice(i, 1);
                // 删除 model.list 字段中对该 id 的引用
                if ( (idx = this.store.model.list().indexOf(id)) > -1 ) {
                    // 修改属性，不触发 update 事件
                    this.store.model.list().splice(idx, 1);
                }
                break;
            }
        }

        if(removed.length === 0) return false;
        return true;
    };

    GLayer.prototype.close = function () {
        // 将 layer 中包含的 widget 全部销毁
        this.children.forEach(function (row) {
            row.close();
        });

        // 将父容器的 list 字段中的 id 引用清空
        this.stage.removeChild(this.store.model._id());
    };

    window.layers = window.layers || {};
    window.layers.GLayer = GLayer;
} ());
/** 
 * 背景图层
 */

(function (GLayer, HtmlWidgetMixin) {

    function GBgLayer(painter, model) {
        GLayer.apply(this, arguments);

        this.stage = this.painter.bgLayer;
        this.imageModelSet = this.painter.screen.store.imageModelSet;
    }

    GBgLayer.prototype = Object.create(GLayer.prototype);
    GBgLayer.prototype.constructor = GBgLayer;

    GBgLayer.prototype.add = function () {};

    GBgLayer.prototype.show = function () {
        var model = this.store.model;

        // 图形创建
        this.shape = document.createElement('div');
        this.shape.id = model._id();
        this.shape.className = 'html-group bg-group';

        this.stage.add(this);
        this.update();

        // 父类方法
        GLayer.prototype.show.apply(this, arguments);
    };

    GBgLayer.prototype.update = function (e, propName) {
        var model = this.store.model;
        var options = model.option();
        var isHide = model.isHide();

        if (isHide === 1) {
            this.shape.style.display = 'none';//隐藏背景图层
            return;
        }else {
            this.shape.style.display = 'block';//显示背景图层
        }

        this.shape.style.background = null;
        // 纯色背景
        if (!options.type || options.type === 'color') {
            this.shape.style.backgroundColor = options.color || '#ffffff';
        }
        // 图片背景
        else if (options.type === 'image') {
            if (options.url == ''){
                this.shape.style.backgroundColor = '#ffffff';
            } else {
                this.shape.style.backgroundSize = options.display === 'stretch' ? '100% 100%' : options.display;
                this.shape.style.backgroundImage = 'url('+options.url+')';
            }
        } else if (options.type === 'html') {
            this.shape.style.backgroundColor = '#ffffff';
        }
    };


    GBgLayer.prototype.close = function () {
        GLayer.prototype.close.call(this);

        // 销毁 shape
        this.shape.parentNode.removeChild(this.shape);
    };

    GBgLayer.prototype.getLayerType = function () {
        return 'bg';
    };

    GBgLayer.prototype = Mixin(GBgLayer.prototype, HtmlWidgetMixin);

    /** @override */
    GBgLayer.prototype.type = 'Layer';

    ///////////////////
    // STATIC METHOD //
    ///////////////////
    GBgLayer.getEmptyEntity = function () {
        return {
            "_id": ObjectId(),
            "type": "bg",
            "name": I18n.resource.mainPanel.layerPanel.BG_LAYER,//"背景"
            "isLock": 0,
            "isHide": 0,
            "list": [],
            "w": 800,
            "h": 600,
            "option": {
                "type": "color", // color, image
                "color": "#ffffff",
                "display": "",
                "url": ""
            }
        };
    };

    window.layers = window.layers || {};
    window.layers.bg = GBgLayer;
} (window.layers.GLayer, window.mixins.HtmlWidgetMixin));
/** 
 * Html 图层
 */

(function (GLayer, HtmlWidgetMixin) {

    function GHtmlLayer(painter, model) {
        GLayer.apply(this, arguments);

        this.stage = painter.htmlLayer;
        this.children = [];
    }

    GHtmlLayer.prototype = Object.create(GLayer.prototype);
    GHtmlLayer.prototype.constructor = GHtmlLayer;

    GHtmlLayer.prototype.init = function () {
        GLayer.prototype.init.apply(this, arguments);
    };

    GHtmlLayer.prototype.show = function () {

        this.shape = document.createElement('div');
        this.shape.id = this.store.model._id();
        this.shape.className = 'html-group';

        this.painter.htmlLayer.add(this);

        // 父类方法
        GLayer.prototype.show.apply(this, arguments);
    };

    GHtmlLayer.prototype.showLayer = function () {
        this.shape.style.display = 'block';
    };

    GHtmlLayer.prototype.hideLayer = function () {
        this.shape.style.display = 'none';
    };

    GHtmlLayer.prototype.add = function (shape) {
        this.shape.appendChild(shape);
    };

    /** override */
    GHtmlLayer.prototype.draw = function () {};

    GHtmlLayer.prototype.getLayerType = function () {
        return 'html';
    };

    GHtmlLayer.prototype.close = function () {
        GLayer.prototype.close.call(this);

        // 销毁 shape
        this.shape.parentNode.removeChild(this.shape);
    };

    GHtmlLayer.prototype = Mixin(GHtmlLayer.prototype, HtmlWidgetMixin);

    GHtmlLayer.prototype.type = 'Layer';

    ///////////////////
    // STATIC METHOD //
    ///////////////////
    GHtmlLayer.getEmptyEntity = function () {
        return {
            "_id": ObjectId(),
            "type": "html",
            "name": I18n.resource.mainPanel.layerPanel.HTML_LAYER,//"Html 图层"
            "isLock": 0,
            "isHide": 0,
            "list": [], 
            "option": {}
        };
    };

    window.layers = window.layers || {};
    window.layers.html = GHtmlLayer;
} (window.layers.GLayer, window.mixins.HtmlWidgetMixin));
/** 
 * Canvas 图层
 */

(function (GLayer, CanvasWidgetMixin) {

    function GCommLayer() {
        GLayer.apply(this, arguments);

        this.stage = this.painter.staticLayer;
    }

    GCommLayer.prototype = Object.create(GLayer.prototype);
    GCommLayer.prototype.constructor = GCommLayer;

    GCommLayer.prototype.add = function (shape) {
        if (Object.prototype.toString.call(shape) !== '[object Array]') {
            shape = [shape];
        }
        this.shape.add.apply(this.shape, shape);
    };

    GCommLayer.prototype.show = function () {
        var model = this.store.model;
        var width = this.painter.stage.width();
        var height = this.painter.stage.height();

        this.shape = new Konva.Group({
            id: model._id(),
            x: 0,
            y: 0
        });

        this.painter.staticLayer.add(this);

        // 父类方法
        GLayer.prototype.show.apply(this, arguments);
    };

    GCommLayer.prototype.showLayer = function () {
        this.shape.show();
    };

    GCommLayer.prototype.hideLayer = function () {
        this.shape.hide();
    };

    GCommLayer.prototype.getLayerType = function () {
        return 'canvas';
    };

    GCommLayer.prototype.close = function () {
        GLayer.prototype.close.call(this);

        // 销毁 shape
        this.shape.destroy();
    };

    GCommLayer.prototype = Mixin(GCommLayer.prototype, CanvasWidgetMixin);

    window.layers = window.layers || {};
    window.layers.canvas = GCommLayer;
} (window.layers.GLayer, window.mixins.CanvasWidgetMixin));
/** 
 * Canvas Painter
 */

(function () {
    var class2type = Object.prototype.toString;

    var DEFAULT_PAGE_WIDTH = 800;
    var DEFAULT_PAGE_HEIGHT = 600;

    function GPainter(screen, options) {
        this.screen = screen;
        this.domContainer = screen.painterCtn;
        
        this.domCanvas = undefined;
        this.context2d = undefined;
        this.scale = undefined;

        this.stage = undefined;
        this.staticLayer = undefined;
        this.interactiveLayer = undefined;
        this.htmlLayer = undefined;
        this.bgLayer = undefined;
        this.background = undefined;

        // 默认的页面大小
        this.pageWidth = options.pageWidth || DEFAULT_PAGE_WIDTH;
        this.pageHeight = options.pageHeight || DEFAULT_PAGE_HEIGHT;

        // Event
        this.eventHandlers = {};

        // Model
        this.store = {};
        this.store.layerModelSet = screen.store.layerModelSet;
        this.store.widgetModelSet = screen.store.widgetModelSet;

        // bind observer
        this.bindLayerModelSetOb();
        this.bindWidgetModelSetOb();

        // 当前状态数据
        this.state = new Model({
            activeLayers: [],
            activeWidgets: []
        });
        this.bindStateOb();
    }

    GPainter.prototype = {
        constructor: GPainter,
            
        init: function () {},

        show: function () {
            var styles = window.getComputedStyle(this.domContainer);
            var width = parseInt(styles.width);
            var height = parseInt(styles.height);

            // 舞台创建
            this.stage = new Konva.Stage({
                container: this.domContainer,
                width: width,
                height: height
            });

            // 静态图层创建
            this.staticLayer = new GCanvasStage(this);

            // 交互图层创建
            this.interactiveLayer = new Konva.Layer({
                id: '__interactiveLayer',
                name: '__interactiveLayer'
            });
            this.interactiveLayer.getCanvas()._canvas.style.zIndex = 4;

            // html 图层创建
            this.htmlLayer = new GHtmlStage(this);

            // bg 图层创建
            this.bgLayer = new GHtmlStage(this);
            this.bgLayer.setZIndex(1);

            // 增加一个透明的背景 Rect
            this.background = new Konva.Rect({
                id: '__background',
                name: '__background',
                x: 0,
                y: 0,
                width: width,
                height: height
            });

            this.interactiveLayer.add(this.background);
            this.stage.add(this.interactiveLayer);

            // 默认显示比例为 1
            this.scale = 1;
            this.resizePage(this.pageWidth, this.pageHeight);
            this.initMouseListeners();
            this.initKeyListeners();
        },

        setActiveLayers: function (layerIds) {
            var layers = [], idx;

            if (typeof layerIds === 'string') {
                layerIds = [layerIds];
            }

            layerIds.forEach(function (row) {
                // 先在 canvas stage 中查找
                var layer = this.staticLayer.findOne('#'+row);
                if (!!layer) {
                    return layers.push(layer);
                }

                // 再在 bg stage 中查找
                layer = this.bgLayer.findOne('#'+row);
                if (!!layer) {
                    return layers.push(layer);
                }

                // 再在 html stage 中查找
                layer = this.htmlLayer.findOne('#'+row);
                if (!!layer) {
                    return layers.push(layer);
                }
            }, this);

            this.setState({
                activeLayers: layers
            });
        },

        /**
         * [setActiveWidgets description]
         * @param {Array|String} shapes 单个控件、控件数组、单个控件id、控件id数组
         */
        setActiveWidgets: function (shapes) {
            var type, rs = [];
            shapes = shapes || [];

            // 判断是否是数组
            type = Object.prototype.toString.call(shapes);
            if (type !== '[object Array]') {
                shapes = [shapes];
            }

            // 判断是 id 数组 还是 对象数组
            type = Object.prototype.toString.call(shapes[0]);
            if (type === '[object String]') {
                shapes.forEach(function (row) {
                    var search = this.find('#'+row)[0];
                    if (search) rs.push(search);
                }, this);
            } else {
                rs = shapes;
            }

            if (this.state.activeWidgets().length ===  0 && rs.length === 0) {
                return;
            }

            this.setState({
                activeWidgets: rs
            });
        },

        setState: function (options) {
            this.state.update(options);
        },
        bindStateOb: function () {
            this.state.addEventListener('update.activeLayers', function (e) {
                Log.info('painter change activing layers');
                // 1、所有图层的所有高亮的矩形
                var activeWidgets = this.state.activeWidgets();
                // 2、从中去除掉不在选中图层中的高亮矩形
                var activeLayers = this.state.activeLayers();
                var childsArr = [] ,childrensArr = [];
                // 循环遍历 activeLayers， 将所有 activeLayers 的 children 数组拼接成一个大的数组 childrenArr
                for(var k=0,layersLen = activeLayers.length;k < layersLen;k++){
                    childrensArr = childrensArr.concat(activeLayers[k].children);
                }
                // 循环遍历 activeWidgets，判断每个 widget 是否在 childrenArr 中，存在则保留在数组 childsArr，不存在则过滤掉
                for(var j= 0,widgetsLen = activeWidgets.length;j < widgetsLen;j++){
                    if(!(childrensArr.indexOf(activeWidgets[j]) === -1)) {
                        childsArr.push(activeWidgets[j]);
                    }
                }
                // 将过滤后的 activeWidgets 通过 setActiveWidgets 方法进行设置
                this.setActiveWidgets(childsArr);
            }, this);

            this.state.addEventListener('update.activeWidgets', function (e) {
                Log.info('painter change activing widgets');
                // 先清空交互图层中的可编辑矩形
                this.interactiveLayer.find('.resizable-group').destroy();
                this.state.activeWidgets().forEach(function (row) {
                    if (row.store.model.type() === 'CanvasPipe') {
                        this.interactiveLayer.add(new GResizableLine(row, this.staticLayer));
                    } else {
                        this.interactiveLayer.add(new GResizableRect(row, this.staticLayer));
                    }
                }, this);
                this.interactiveLayer.draw();
            }, this);
        },

        // 更新图层顺序
        updateLayerOrder: function () {
            this.store.layerModelSet.forEach(function (model) {
                var layer = this.findLayer(model._id());
                if (layer === null || layer.getLayerType() !== 'canvas') {
                    return;
                }
                layer.moveToBottom();
            }, this);
            this.staticLayer.draw();
        },

        addWidget: function (model) {
            var ModalClass = null;
            var widget = null;
            var layer, layerId = model.layerId(), list;

            if ( !(ModalClass = window.widgets.factory[model.type()]) ) {
                Log.error('Class not found: ' + model.type());
                return;
            }

            layer = this.findLayer(layerId);
            if (layer === null) {
                Log.warn('one widget that has no parent layer.');
                return;
            }


            list = layer.store.model.list();
            if (list.indexOf(model._id()) === -1) list.push(model._id());
            widget = new ModalClass(layer, model);
            widget.show();
        },

        removeWidget: function (model) {
            var widget;

            widget = this.find('#'+model._id());

            if (widget.length === 0) {
                Log.error('Can\'t find the widget in page when remove the widget.');
                return;
            }

            // 从画板中删除该元素
            widget[0].close();
        },

        addLayer: function (model) {
            var ModalClass;
            if ( !(ModalClass = window.layers[model.type()]) ) {
                Log.error('Class not found: ' + model.type());
                return;
            }

            new ModalClass(this, model).show();
        },

        removeLayer: function (model) {
            var layer;

            layer = this.findLayer(model._id());

            if (layer === null) {
                Log.error('Can\'t find the layer in page when remove the layer.');
                return;
            }

            // 从画板上删除该图层
            layer.close();
        },

        bindWidgetModelSetOb: function () {
            this.store.widgetModelSet.addEventListener('insert', function (e, data) {
                data.models.forEach(function (model) {
                    this.addWidget(model);
                }, this);
                this.stage.draw();

                Log.info('insert {count} widget(s) at index {index}'.formatEL(data));
            }, this);

            this.store.widgetModelSet.addEventListener('remove', function (e, data) {
                data.models.forEach(function (model) {
                    this.removeWidget(model);
                }, this);
                this.stage.draw();

                Log.info('remove {count} widget(s)'.formatEL(data));
            }, this);
        },

        bindLayerModelSetOb: function () {
            this.store.layerModelSet.addEventListener('insert', function (e, data) {
                data.models.forEach(function (model) {
                    this.addLayer(model);
                }, this);
                this.stage.draw();

                Log.info('insert {count} layer(s) at index {index}'.formatEL(data));
            }, this);
            this.store.layerModelSet.addEventListener('remove', function (e, data) {
                data.models.forEach(function (model) {
                    this.removeLayer(model);
                }, this);
                this.stage.draw();

                Log.info('remove {count} layer(s)'.formatEL(data));
            }, this);
        },

        resizePage: function (width, height) {
            this.pageWidth = width;
            this.pageHeight = height;

            this.scaleTo(this.scale);
        },

        initMouseListeners: function () {
            var _this = this;

            this.interactiveLayer.on('mousedown', function (e) {
                _this.mouseDownActionPerformed(e);
            });

            this.interactiveLayer.on('mousemove', function (e) {
                _this.mouseMoveActionPerformed(e);
            });

            this.interactiveLayer.on('mouseup', function (e) {
                _this.mouseUpActionPerformed(e);
            });
        },
        mouseDownActionPerformed: function () {},
        mouseMoveActionPerformed: function () {},
        mouseUpActionPerformed: function () {},

        initKeyListeners: function () {
            var _this = this;
            var isInPainter = true;

            this.domContainer.addEventListener('mouseenter', function (e) {
                isInPainter = true;
            });

            this.domContainer.addEventListener('mouseleave', function (e) {
                isInPainter = false;
            });
    
            this.eventHandlers['keydown'] = function (e) {
                if (!isInPainter) return;
                _this.keyDownActionPerformed(e);
            };
            this.eventHandlers['keyup'] = function (e) {
                if (!isInPainter) return;
                _this.keyUpActionPerformed(e);
            };

            window.addEventListener('keydown', this.eventHandlers['keydown']);
            window.addEventListener('keyup', this.eventHandlers['keyup']);
        },
        keyDownActionPerformed: function (e) {},
        keyUpActionPerformed: function (e) {},

        getTransform: function () {
            return this.staticLayer.getTransform().m;
        },

        getViewportPosition: function () {
            var w = this.stage.width();
            var h = this.stage.height();
            var vw = this.pageWidth * this.scale;
            var vh = this.pageHeight * this.scale;

            return {
                x: (w-vw)/2,
                y: (h-vh)/2
            }
        },

        getOffset: function () {
            var ox = this.staticLayer.offsetX();
            var oy = this.staticLayer.offsetY();

            return {
                x: ox*this.scale,
                y: oy*this.scale
            }
        },

        getGridWidth: function () {
            return 10;
        },

        transform: function () {
            var offset = this.getOffset();
            var scale = this.scale;
            var x, y, w, h, rs = {};
            var abPos;

            if (arguments.length === 4) {
                x = arguments[0];
                y = arguments[1];
                w = arguments[2];
                h = arguments[3];

                return {
                    x: (x + offset.x)/scale,
                    y: (y + offset.y)/scale,
                    w: w/scale,
                    h: h/scale
                }
            } else if ( class2type.call(arguments[0].x) !== '[object Function]' ) {
                if (arguments[0].x !== undefined) rs.x = (arguments[0].x + offset.x)/scale;
                if (arguments[0].y !== undefined) rs.y = (arguments[0].y + offset.y)/scale;
                if (arguments[0].w !== undefined) rs.w = arguments[0].w/scale;
                if (arguments[0].h !== undefined) rs.h = arguments[0].h/scale;

                return rs;
            } else {
                abPos = arguments[0].getAbsolutePosition();
                x = abPos.x;
                y = abPos.y;
                w = arguments[0].width();
                h = arguments[0].height();

                return {
                    x: (x + offset.x)/scale,
                    y: (y + offset.y)/scale,
                    w: w/scale,
                    h: h/scale
                }
            }
        },

        inverseTransform: function () {
            var offset = this.getOffset();
            var scale = this.scale;
            var rs = {};

            if (arguments[0].x !== undefined) rs.x = arguments[0].x * scale - offset.x;
            if (arguments[0].y !== undefined) rs.y = arguments[0].y * scale - offset.y;
            if (arguments[0].w !== undefined) rs.w = arguments[0].w*scale;
            if (arguments[0].h !== undefined) rs.h = arguments[0].h*scale;

            return rs;
        },

        scaleTo: function (scale) {
            var offset;

            this.scale = scale;

            // 调整比例
            this.staticLayer.scale({
                x: scale,
                y: scale
            });

            offset = this.getViewportPosition();
            this.staticLayer.offsetX(-offset.x/scale);
            this.staticLayer.offsetY(-offset.y/scale);

            this.staticLayer.draw();

            // 处理 html layer 的缩放
            this.htmlLayer.scale(scale);

            // 处理 bg layer 的缩放
            this.bgLayer.scale(scale);
        },

        getAllLayers: function () {
            return this.staticLayer.getChildren()
                .concat(this.htmlLayer.getChildren())
                .concat(this.bgLayer.getChildren());
        },

        // 在图层中查找指定的图形
        find: function (selector) {
            var type = selector[0];
            var layers = this.getAllLayers();
            var rs = [];

            layers.forEach(function (layer) {
                var search = layer.find(selector);

                if (!search || !search.length) {
                    return;
                }
                rs = rs.concat(search);
            });

            return rs;
        },

        // 根据 layer id 查找 layer
        findLayer: function (layerId) {
            var selector = '#' + layerId;
            // 在 canvas layer 中查找
            var layer = this.staticLayer.findOne(selector);
            if (!!layer) {
                return layer;
            }

            // 在 html layer 中查找
            layer = this.htmlLayer.findOne(selector);
            if (!!layer) {
                return layer;
            }

            // 在 bg layer 中查找
            layer = this.bgLayer.findOne(selector);
            if (!!layer) {
                return layer;
            }

            return null;
        },

        draw: function () {
            this.staticLayer.draw();
            this.htmlLayer.draw();
            this.bgLayer.draw();
        },

        close: function () {
            // 由于 keydown 和 keyup 事件不会随着 DOM 删除而删除，所以这里手动删除
            window.removeEventListener('keydown', this.eventHandlers['keydown']);
            window.removeEventListener('keyup', this.eventHandlers['keyup']);

            /** 删除所有舞台 */
            this.htmlLayer.close();
            this.bgLayer.close();
            this.staticLayer.close();

            // Konva 对象的销毁和普通的不一样，有所区别
            this.stage.destroy();
            this.interactiveLayer.destroy();
        }
    };

    window.GPainter = GPainter;

} ());
/** 
 * factory 控件属性基类
 */

(function () {

    function WidgetProp(panel, propCtn, model) {
        this.panel = panel;

        this.store = {};
        this.store.model = model;

        this.shape = null;
        this.$propertyList = propCtn;

        this.init();
    }

    WidgetProp.prototype.init = function () {
        //this.bindModelOb();
    };

    WidgetProp.prototype.tplProp = '<li><ul class="list-inline"><li id="prop_x"><label class="property-name">X:</label><span class="property-value p_span">{x}</span><input class="property-value p_input" type="text" value="{x}"/>px</li>\
        <li id="prop_y"><label class="property-name">Y:</label><span class="property-value p_span">{y}</span><input class="property-value p_input" type="text" value="{y}"/>px</li>\
        <li id="prop_w"><label class="property-name">W:</label><span class="property-value p_span">{w}</span><input class="property-value p_input" type="text" value="{w}"/>px</li>\
        <li id="prop_h"><label class="property-name">H:</label><span class="property-value p_span">{h}</span><input class="property-value p_input" type="text" value="{h}"/>px</li></ul></li>';

    WidgetProp.prototype.update = function (e) {};

    WidgetProp.prototype.show = function () {
        this.$propertyList.empty();
        var model = this.store.model;
        var option = {
            x: model.x() || '-',
            y: model.y() || '-',
            w: model.w() || '-',
            h: model.h() || '-'
        };
        this.$propertyList.html(this.tplProp.formatEL(option));
        this.attachPubEvent(this.store.model);
    };

    WidgetProp.prototype.close = function () {};

    WidgetProp.prototype.attachPubEvent = function (model) {
        $('.property-value.p_span', this.$propertyList).off('click').click(function(){
            var $input = $(this).hide().next('.p_input');
            $input.show().focus().val($input.val());
        });
        $('.property-value.p_input', this.$propertyList).off('blur').blur(function(){
            var changeVal = this.value;
            var $span = $(this).prev('.p_span');
            if(!isNaN(changeVal)){
                changeVal = parseFloat(this.value);
                $(this).hide().prev('.p_span').show();//.html(changeVal)
                var curtLiId = $(this).closest('li').attr('id');
                if(curtLiId == 'prop_x'){
                    model.x(changeVal);
                }else if(curtLiId == 'prop_y'){
                    model.y(changeVal);
                }else if(curtLiId == 'prop_w'){
                    model.w(changeVal);
                }else if(curtLiId == 'prop_h'){
                    model.h(changeVal);
                }else if(curtLiId == 'prop_bgw'){
                    model.models[0].w(changeVal);
                    $span.html(changeVal);
                }else if(curtLiId == 'prop_bgh'){
                    model.models[0].h(changeVal);
                    $span.html(changeVal);
                }
            }else{

            }
        });
    };

    window.widgets = window.widgets || {};
    window.widgets.props = window.widgets.factory  || {};
    window.widgets.props.WidgetProp = WidgetProp;
} ());

/** prop model */
(function () {

    var class2type = Object.prototype.toString;

    function PropModel(models) {
        this.models = models;
    }

    PropModel.prototype.update = function (k) {
        this.models.forEach(function (model) {
            model.update(k);
        });
    };

    PropModel.prototype._setProperty = function (k, v) {
        this.models.forEach(function (model) {
            model.property(k, v);
        });
    };

    PropModel.prototype._isPropertyValueSame = function (k) {
        var ov = this.models[0].property(k);
        for(var i = 1, model, len = this.models.length; i < len; i ++) {
            model = this.models[i];
            // 值不同，或者为对象类型，返回 false
            if (model.property(k) !== ov || class2type.call(ov) === '[object Object]') {
                var modalproperty = model.property(k);
                //判断ov和modalproperty都为数组并且内容相同，顺序可不同
                if ((ov instanceof Array) && (modalproperty instanceof Array) && modalproperty.length === ov.length) {
                    if (ov.sort().toString() === modalproperty.sort().toString()) {
                        return ov;
                    }
                }
                return false;
            }
        }
        return ov;
    };

    ['x', 'y', 'w', 'h'].forEach(function (name) {
        this[name] = function (val) {
            var v;
            if( !isNaN(val) ) {
                val = parseFloat(val);
                this._setProperty(name, val);
                return true;
            }

            if( (v = this._isPropertyValueSame(name) ) !== false ) {
                if(typeof v == "string"){
                    v = parseFloat(v);
                }
                if(typeof v == "number"){
                    v = parseFloat(v.toFixed(1));
                    return v;
                }
                return v;
            } else {
                return '';
            }
        };

    }, PropModel.prototype);

    window.widgets = window.widgets || {};
    window.widgets.propModels = window.widgets.propModels || {};
    window.widgets.propModels.PropModel = PropModel;
} ());
(function (WidgetProp) {

    function CanvasImageProp(propCtn, model) {
        WidgetProp.apply(this, arguments);
    }

    CanvasImageProp.prototype = Object.create(WidgetProp.prototype);
    CanvasImageProp.prototype.constructor = CanvasImageProp;

    CanvasImageProp.prototype.tplPrivateProp = '\
        <li>\
            <ul class="list-inline">\
                <li>\
                    <label class="img-canvas">Image: </label><button id="btnChooseImg" type="button" class="btn btn-xs btn-default">Choose</button>\
                    <label class="rotate-canvas">Rotate: </label><input id="inputRotate" class="p_input" value="{rotate}"/>°\
                </li>\
            </ul>\
        </ii>\
        <li>\
            <ul class="list-inline" style="position: relative;">\
                <li class="divPorpertyBase">\
                    <div class="dataSource">\
                        <span class="span-bold">Datasource:</span>\
                        <span class="spanDs" ds-id="{dsId}" style="display:{isShowDsName}">\
                            <span class=="dsText">{dsName}</span>\
                            <span class="btnRemoveDs glyphicon glyphicon-remove"></span>\
                        </span>\
                        <span class="dropArea" style="display:{isShowDropArea}">\
                            <span class="glyphicon glyphicon-plus"></span>\
                        </span>\
                    </div>\
                    </li>\
                    <li id="liEnumerateWrap" style="padding-top: 10px;display:{isShowEnumerate}">\
                    <div class="divTool">\
                        <div class="enumerateCtn{isDisabled}">\
                            <span class="span-bold">Enumerate:</span>\
                        <input id="ckbEnumerate" type="checkbox" style="margin-left:10px;" {isDisabled}/>\
                        </div>\
                        <span id="btnAddEnumerate" class="glyphicon glyphicon-plus-sign btnEnumerate"></span>\
                        <span id="btnSaveEnumerate" class="glyphicon glyphicon-ok-circle btnEnumerate"></span>\
                    </div>\
                </li>\
                <div id="enumerateWrap">\
                    <ul class="list-unstyled">\
                        <li class="enumerateItem">\
                            <div class="enumeratePart"><label class="enumerateLabel">Key:</label><input class="enumerateKey"></div>\
                            <div class="enumeratePart divEnumerateVal"><label class="enumerateLabel">Value:</label><input class="enumerateVal"><span class="glyphicon glyphicon-picture btnEnumerate btnChoosePic"></span></div>\
                            <span class="glyphicon glyphicon-remove-circle btnRemove btnEnumerate">\
                        </li>\
                    </ul>\
                </div>\
            </ul>\
        </li>';

    /** override */
    CanvasImageProp.prototype.show = function () {
        var _this = this;
        this.$propertyList.empty();
        var model = this.store.model, isShowDsName = 'none',isShowEnumerate = 'none', isShowDropArea = 'inline-block', isDisabled = ' disabled';
        var opt = model.option();
        var defaultOpt = {
            x: typeof model.x() === 'number' ? model.x() : '-',// model.x() || '-',
            y: typeof model.y() === 'number' ? model.y() : '-',//model.y() || '-',
            w: typeof model.w() === 'number' ? model.w() : '-',//model.w() || '-',
            h: typeof model.h() === 'number' ? model.h() : '-'//model.h() || '-'
        };

        var option = {
            html: opt.html,
            width: opt.width,
            color: opt.color,
            dsId: model.idDs(),
            rotate: opt.rotate ,
            dsName: (function(ids){//获取点名
                var idsName = [];
                if(!ids || !(ids instanceof Array) || ids.length == 0) return;
                isShowDsName = 'inline-block';
                isShowDropArea = 'none';
                isShowEnumerate = 'block';
                isDisabled = '';

                var arrItem = [];
                arrItem = AppConfig.datasource.getDSItemById(ids);
                ids.forEach(function(id){
                    for (var m = 0; m < arrItem.length; m++) {
                        if (id == arrItem[m].id) {
                            idsName = arrItem[m].alias
                            break;
                        }
                    }
                    //idsName = AppConfig.datasource.getDSItemById(id).alias
                });
                return idsName;
            }(model.idDs())),
            //enumerateHTML: (function(trigger){//显示枚举列表
            //    var tpl = '<li class="enumerateItem"><label class="enumerateLabel">key:</label><input class="enumerateKey" value="{i}"><label class="enumerateLabel">value:</label><input class="enumerateVal" value="{val}"><span class="glyphicon glyphicon-picture btnEnumerate btnChoosePic"></span><span class="glyphicon glyphicon-remove-circle btnRemove btnEnumerate"></span></li>';
            //    var temp = '';
            //    if(!trigger || $.isEmptyObject(trigger)) return tpl.formatEL({i: '', val: ''});
            //    for(var i in trigger){
            //        temp += tpl.formatEL({i: i, val: trigger[i]})
            //    }
            //    return temp;
            //}(opt.trigger)),
            isShowDsName: isShowDsName,
            isShowEnumerate: isShowEnumerate,
            isShowDropArea: isShowDropArea,
            isDisabled: isDisabled
        }
        this.$propertyList.html(this.tplProp.formatEL(defaultOpt));
        this.$propertyList.append(this.tplPrivateProp.formatEL(option));

        //国际化
        $('.dataSource').find('.span-bold').html(I18n.resource.mainPanel.attrPanel.attrRepeat.DATA_SOURCE);
        $('.img-canvas').html(I18n.resource.mainPanel.attrPanel.attrImg.IMAGE);
        $('.rotate-canvas').html(I18n.resource.mainPanel.attrPanel.attrImg.ROTATE);
        $('#btnChooseImg').html(I18n.resource.mainPanel.attrPanel.attrImg.CHOOSE);

         //枚举初始化
        var $enumerateWrap = $('#enumerateWrap');
        var trigger = model.models[0].option().trigger;
		var strEnumerate='';
        if ( !$.isEmptyObject(trigger) ) {
            $('.enumerateItem').remove();
            var triggerConCount = 0;
            for (var row in trigger) {
                if (row === 'default') continue;
                triggerConCount += 1;
                strEnumerate += _this.addEnumerate(row, trigger[row]);
            }
            if (triggerConCount === 0) {
                strEnumerate += _this.addEnumerate('', '');
                $enumerateWrap.find('ul').append(strEnumerate);
                $enumerateWrap.hide();
                this.$propertyList.find('#ckbEnumerate').prop('checked', false);
            } else {
                $enumerateWrap.find('ul').append(strEnumerate);
                $enumerateWrap.show();
                this.$propertyList.find('#ckbEnumerate').prop('checked', true);
            }
            //if (!strEnumerate) {
                //$enumerateWrap.hide();
            //} else {
                //$enumerateWrap.find('ul').append(strEnumerate);
                //$('#liEnumerateWrap .divTool .btnEnumerate').show();
                //this.$propertyList.find('#ckbEnumerate').prop('checked', false);
                //$enumerateWrap.show();
            //}
        }
        this.attachPubEvent(this.store.model);
        this.attachEvent();
    };


    /** override */
    CanvasImageProp.prototype.close = function () {

    };

    CanvasImageProp.prototype.addEnumerate=function(key, value) {
        var html = '<li class="enumerateItem">\
                <div class="enumeratePart"><label class="enumerateLabel">Key:</label><input class="enumerateKey" value={key}></div>\
                <div class="enumeratePart"><label class="enumerateLabel">Value:</label><input class="enumerateVal" value={value}><span class="glyphicon glyphicon-picture btnEnumerate btnChoosePic"></span></div>\
                <span class="glyphicon glyphicon-remove-circle btnRemove btnEnumerate"></li>\
                ';
        var li = html.formatEL({
            key: key,
            value: value
        });
        return li;
    };
    /** override */
    CanvasImageProp.prototype.update = function () { };

    CanvasImageProp.prototype.attachEvent = function () {
        var _this = this;

        $('#btnChooseImg', this.$propertyList).off('click').click(function(){
            MaterialModal.show(['pic','img'], function (data) {
                var model = _this.store.model;
                //var options = model.option();
                var w = model.w();
                var h = model.h();
                //model['option.trigger.default'](data._id);
                //options.trigger.default = data._id;
                _this.panel.screen.store.imageModelSet.append( new Model(data) );

                //w = (data.pw || data.w || w);
                //h = (data.h || h);
                //model.w(data.pw || data.w || w);
                //model.h(data.h || h);
                //model.option(options);
                //model['option'](options);
                model.update({
                    'w': data.pw || data.w || w,
                    'h': data.h || h,
                    'option.trigger.default': data._id
                });
            });
        });

        //数据源接收
        var $dataSource = $('.dataSource');
        $dataSource[0].ondrop = function(e){
            e.preventDefault();
            var id = EventAdapter.getData().dsItemId;
            _this.store.model.idDs(new Array(id));
        };
        $dataSource[0].ondragenter = function(e){
            e.preventDefault();
        };
        $dataSource[0].ondragover = function(e){
            e.preventDefault();
        };
        $dataSource[0].ondragleave = function(e){
            e.preventDefault();
        };
        $dataSource.off('click').on('click','.btnRemoveDs',function(e){
            //数据源删除后,枚举也同时删除
            //var opt = _this.store.model.option();
            //_this.store.model.idDs([]);
            //opt.trigger = {};
            //_this.store.model.option(opt, 'trigger');
            var triggerAll = _this.store.model.models[0].option().trigger;
            var triggerDefault = {};
            triggerDefault = triggerAll.default ? { 'default': triggerAll.default } : {};
            _this.store.model.update({
                'idDs': [],
                'option.trigger': triggerDefault
            })
        });
        $('.dropArea', this.$propertyList)[0].ondragover = function(e){
            e.preventDefault();
            $(e.currentTarget).addClass('dragover');
            console.log('drag over');
        };
        $('.dropArea', this.$propertyList)[0].ondragleave = function(e){
            e.preventDefault();
            $(e.currentTarget).removeClass('dragover');
            console.log('drag over');
        };

        //是否启用枚举
        var $btnEnumerate = $('#liEnumerateWrap .divTool #btnAddEnumerate');
        var $btnSaveEnumerate = $('#liEnumerateWrap .divTool #btnSaveEnumerate');
        $('#ckbEnumerate')[0].onclick = function(){
            if ($(this).is(':checked')) {
                //当删除没提交时，ul的内容为空需要重新载入子元素
                if ($('#enumerateWrap').find('.list-unstyled').children().length===0) {
                    $('#enumerateWrap').find('ul').append(_this.addEnumerate('',''));
                }
                $('#enumerateWrap').slideDown();
                $btnEnumerate.show();
                $btnSaveEnumerate.show();
            }else {
                $('#enumerateWrap').slideUp();
                $btnEnumerate.hide();
                $btnSaveEnumerate.hide();
            }
        }
        if (!$('#ckbEnumerate').is(':checked')) {
            $btnEnumerate.hide();
            $btnSaveEnumerate.hide();
        }

        var $enumerateWrap = $('#enumerateWrap');
        var $ulEnumerate= $enumerateWrap.find('ul');
        //添加枚举
        $('#btnAddEnumerate')[0].onclick = function(){
            var $li = $('' +
                '<li class="enumerateItem">\
                <div class="enumeratePart"><label class="enumerateLabel">Key:</label><input class="enumerateKey"></div>\
                <div class="enumeratePart"><label class="enumerateLabel">Value:</label><input class="enumerateVal"><span class="glyphicon glyphicon-picture btnEnumerate btnChoosePic"></span></div>\
                <span class="glyphicon glyphicon-remove-circle btnRemove btnEnumerate"></li>\
                ');
            $ulEnumerate.append($li);
        };

        $('#enumerateWrap').off('click').on('click', '.btnRemove',function(){
            //删除枚举
            $(this).parents('#enumerateWrap').hide();
            $(this).parent().remove() ;
            var enumerateKey= $(this).siblings().find('input.enumerateKey').val();
            if(enumerateKey){
                delete _this.store.model['option.trigger']()[enumerateKey];
                _this.store.model.update({
                    'option.trigger': _this.store.model['option.trigger']()
                })
            }
            _this.$propertyList.find('#ckbEnumerate').prop('checked', false);
        }).on('click', '.btnChoosePic',function(){
            //枚举:选择图片
            var key = $.trim($(this).closest('.enumerateItem').find('.enumerateKey').val());
            var _btn = this;
            if(!key){
                //todo
                alert(I18n.resource.mainPanel.attrPanel.attrImg.ENUMER_INFO);
            }else{
                MaterialModal.show(['pic','img'], function (data) {
                    var options = _this.store.model.option();
                    options.trigger[key] = data._id;
                    $(_btn).siblings('.enumerateVal').val(data._id);
                });
            }
        });

        //枚举:选择图片
        //$('#enumerateWrap').off('click').on('click', '.btnChoosePic',function(){
        //    var key = $.trim($(this).siblings('.enumerateKey').val());
        //    var _btn = this;
        //    if(!key){
        //        //todo
        //        alert('先输入key值,谢谢!');
        //    }else{
        //        MaterialModal.show(['pic','img'], function (data) {
        //            var options = _this.store.model.option();
        //            options.trigger[key] = data._id;
        //            $(_btn).siblings('.enumerateVal').val(data._id);
        //        });
        //    }
        //});

        //保存枚举
        $('#btnSaveEnumerate')[0].onclick = function(e){
            var $arrKey = $('.enumerateKey'),$arrVal = $('.enumerateVal');
            var tempOpt = _this.store.model.option();
            tempOpt.trigger = {default: tempOpt.trigger.default};
            for (var i = 0 ; i < $arrKey.length; i++) {
                //var parseFloatKey = parseFloat($arrKey.eq(i).val()).toFixed(0);
                //if(isNaN(parseFloatKey))continue;
                tempOpt.trigger[$arrKey.eq(i).val()] = $arrVal.eq(i).val();
            }
            _this.store.model.option(tempOpt, 'trigger');
            //$('#enumerateWrap').slideUp();
        };

        $('#inputRotate', this.$propertyList).off('change').on('change', function(){
            if(isNaN(this.value)) return;
            var opt = _this.store.model.option();
            opt.rotate = Number(this.value);
            _this.store.model.option(opt,'rotate');
        });
    };

    window.widgets = window.widgets || {};
    window.widgets.props = window.widgets.factory  || {};
    window.widgets.props.CanvasImageProp = CanvasImageProp;

} (window.widgets.factory.WidgetProp));

/** Canvas Image Prop Model */
(function (PropModel) {

    var _this;
    var class2type = Object.prototype.toString;

    function CanvasImagePropModel() {
        _this = this;
        PropModel.apply(this, arguments);
    }

    CanvasImagePropModel.prototype = Object.create(PropModel.prototype);
    CanvasImagePropModel.prototype.constructor = CanvasImagePropModel;

    CanvasImagePropModel.prototype.option = function (params) {
        if(class2type.call(params) === '[object Object]') {
            if(arguments.length == 1){
                this._setProperty('option', params);
            }else if(arguments.length == 2){//只设置option的指定属性:attr
                this._setProperty('option.' + arguments[1], params[arguments[1]]);
            }
            return true;
        }
        var opt = $.extend(true, {}, this.models[0].option());
        for(var i = 1, len = this.models.length, modelOpt; i < len; i ++){
            modelOpt = this.models[i].option();
            for(var i in modelOpt){
                if(opt[i] != modelOpt[i]){
                    opt[i] = {};
                }
            }
        }
        return opt;
    };
    ['idDs','option.trigger.default','option.trigger'].forEach(function(type){
        CanvasImagePropModel.prototype[type] = function (params) {
            var v;
            if(params) {
                this._setProperty(type, params);
                return true;
            }
            if((v = this._isPropertyValueSame(type) ) !== false ) {
                return v;
            }
        };
    });
    //CanvasImagePropModel.prototype.idDs = function (params) {
    //    var v;
    //    if(params) {
    //        this._setProperty('idDs', params);
    //        return true;
    //    }
    //    if((v = this._isPropertyValueSame('idDs') ) !== false ) {
    //        return v;
    //    }
    //};

    window.widgets = window.widgets || {};
    window.widgets.propModels = window.widgets.propModels || {};
    window.widgets.propModels.CanvasImagePropModel = CanvasImagePropModel;

} (window.widgets.propModels.PropModel));
(function (WidgetProp) {

    function CanvasPipeProp(propCtn, model) {
        WidgetProp.apply(this, arguments);
    }

    CanvasPipeProp.prototype = Object.create(WidgetProp.prototype);
    CanvasPipeProp.prototype.constructor = CanvasPipeProp;

    CanvasPipeProp.prototype.tplPrivateProp = '\
        <li>\
            <ul class="list-inline">\
                <li id="pipeWidth"><label class="pipe-width">Pipewidth:</label><span class="property-value"> {width}</span><input class="property-value" type="text" value="{width}" style="display:none;border-color: #aaa;border-radius: 2px;width: 40px;"/>px</li>\
                <li id="pipeColor"><label class="pipe-color">Color:</label></span><input class="property-value" type="color" value="{color}"/></li>\
            </ul>\
        </li>\
       <li>\
            <ul class="list-inline" style="position: relative;">\
                <li class="divPorpertyBase">\
                    <div class="dataSource">\
                        <span class="span-bold">Datasource:</span>\
                        <span class="spanDs" ds-id="{dsId}" style="display:{isShowDsName}">\
                            <span class="dsText">{dsName}</span>\
                            <span class="btnRemoveDs glyphicon glyphicon-remove"></span>\
                        </span>\
                        <span class="dropArea" style="display:{isShowDropArea}">\
                            <span class="glyphicon glyphicon-plus"></span>\
                        </span>\
                    </div>\
                    </li>\
                    <li id="liEnumerateWrap" style="padding-top: 10px;display:{isShowEnumerate}">\
                    <div class="divTool">\
                        <div class="enumerateCtn{isDisabled}">\
                            <span class="span-bold">Enumerate:</span>\
                        <input id="ckbEnumerate" type="checkbox" style="margin-left:10px;" {isDisabled}/>\
                        </div>\
                        <span id="btnAddEnumerate" class="glyphicon glyphicon-plus-sign btnEnumerate"></span>\
                        <span id="btnSaveEnumerate" class="glyphicon glyphicon-ok-circle btnEnumerate"></span>\
                    </div>\
                </li>\
                <div id="enumerateWrap">\
                    <ul class="list-unstyled">\
                        <li class="enumerateItem">\
                            <div class="enumeratePart"><label class="enumerateLabel">Key:</label><input class="enumerateKey"></div>\
                            <div class="enumeratePart divEnumerateVal"><label class="enumerateLabel">Value:</label><input class="enumerateVal"></div>\
                            <span class="glyphicon glyphicon-remove-circle btnRemove btnEnumerate">\
                        </li>\
                    </ul>\
                </div>\
            </ul>\
        </li>';

    /** override */
    CanvasPipeProp.prototype.show = function () {
        this.$propertyList.empty();
        var model = this.store.model, isShowDsName = 'none',isShowEnumerate = 'none', isShowDropArea = 'inline-block', isDisabled = ' disabled';
        var opt = model.option();
        var defaultOpt = {
            x: typeof model.x() === 'number' ? model.x() : '-',// model.x() || '-',
            y: typeof model.y() === 'number' ? model.y() : '-',//model.y() || '-',
            w: typeof model.w() === 'number' ? model.w() : '-',//model.w() || '-',
            h: typeof model.h() === 'number' ? model.h() : '-'//model.h() || '-'
        };
        var option = {
            html: opt.html,
            width: opt.width,
            color: opt.color,
            dsId: model.idDs(),
            dsName: (function(ids){//获取点名
                var idsName = [];
                if(!ids || !(ids instanceof Array) || ids.length == 0) return;
                isShowDsName = 'inline-block';
                isShowDropArea = 'none';
                isShowEnumerate = 'block';
                isDisabled = '';

                var arrItem = [];
                arrItem = AppConfig.datasource.getDSItemById(ids);
                ids.forEach(function(id){
                    for (var m = 0; m < arrItem.length; m++) {
                        if (id == arrItem[m].id) {
                            idsName = arrItem[m].alias
                            break;
                        }
                    }
                    //idsName = AppConfig.datasource.getDSItemById(id).alias
                });
                return idsName;
            }(model.idDs())),
            //enumerateHTML: (function(trigger){//显示枚举列表
            //    var tpl = '<li class="enumerateItem"><label class="enumerateLabel">key:</label><input class="enumerateKey" value="{i}"><label class="enumerateLabel">value:</label><input class="enumerateVal" value="{val}"><span class="glyphicon glyphicon-remove-circle btnRemove btnEnumerate"></span></li>';
            //    var temp = '';
            //    if(!trigger || $.isEmptyObject(trigger)) return tpl.formatEL({i: '', val: ''});
            //    for(var i in trigger){
            //        temp += tpl.formatEL({i: i, val: trigger[i]})
            //    }
            //    return temp;
            //}(opt.trigger)),
            isShowDsName: isShowDsName,
            isShowEnumerate: isShowEnumerate,
            isShowDropArea: isShowDropArea,
            isDisabled: isDisabled
        }
        this.$propertyList.html(this.tplProp.formatEL(defaultOpt));
        this.$propertyList.append(this.tplPrivateProp.formatEL(option));

        //国际化
        $('.dataSource').find('.span-bold').html(I18n.resource.mainPanel.attrPanel.attrRepeat.DATA_SOURCE); 
        $('.pipe-width').html(I18n.resource.mainPanel.attrPanel.attrPipe.PIPE_WIDTH);
        $('.pipe-color').html(I18n.resource.mainPanel.attrPanel.attrPipe.PIPE_COLOR);

        //枚举初始化
        var $enumerateWrap = $('#enumerateWrap');
        var trigger = model.models[0].option().trigger;
		var strEnumerate='';
        var triggerEptCount = 0;
        if(!$.isEmptyObject(trigger)) {
            $('.enumerateItem').remove();
            for (var row in trigger) {
                strEnumerate += addEnumerate(row, trigger[row]);
				
            }
			$enumerateWrap.find('ul').append(strEnumerate);
            $('#liEnumerateWrap .divTool .btnEnumerate').show();
            var models = model.models;
            //判断选中的按钮的trigger是否有为空的，如果有则枚举不显示
            for (var i = 0; i < models.length; i++) {
                if ($.isEmptyObject(models[i].option().trigger)) {
                    triggerEptCount += 1;
                }
            }
            if (triggerEptCount===0) {
                this.$propertyList.find('#ckbEnumerate')[0].checked = true;
                $enumerateWrap.show();
            } else {
                $enumerateWrap.find('ul').children().remove();
                addEnumerate('', '');
                }
        }
        function addEnumerate(key, value){
            var html =  '<li class="enumerateItem">\
                <div class="enumeratePart"><label class="enumerateLabel">Key:</label><input class="enumerateKey" value={key}></div>\
                <div class="enumeratePart"><label class="enumerateLabel">Value:</label><input class="enumerateVal" value={value}></div>\
                <span class="glyphicon glyphicon-remove-circle btnRemove btnEnumerate"></li>\
                ';
            var li = html.formatEL({
                key: key,
                value: value
            });
            return li;
        };
        this.attachPubEvent(this.store.model);
        this.attachEvent();
    };

    CanvasPipeProp.prototype.loadImage = function (value, callback) {

    }

    /** override */
    CanvasPipeProp.prototype.close = function () {

    };

    /** override */
    CanvasPipeProp.prototype.update = function () {
        console.log('pipe is update');
    };

    CanvasPipeProp.prototype.attachEvent = function () {
        var _this = this;
        //管道宽度输入框
        $('#pipeWidth input', this.$propertyList).off('change').change(function(){
            var opt = _this.store.model.option();
            opt.width = this.value;
            _this.store.model.option(opt,'width');
        });

        $('#pipeWidth span', this.$propertyList).off('click').click(function(){
            var $input = $(this).hide().next('input');
            $input.show().focus().val($input.val());
        });
        $('#pipeWidth input', this.$propertyList).off('blur').blur(function(){
            var $span = $(this).hide().prev('span');
            $span.show().focus().val($span.val());
        });

        //管道颜色选择
        $('#pipeColor input', this.$propertyList).off('change').change(function () {
            var opt = _this.store.model.option();
            opt.color = this.value;
            _this.store.model.option(opt, 'color');
        });

        //数据源接收
        var $dataSource = $('.dataSource');
        $dataSource[0].ondrop = function(e){
            e.preventDefault();
            var id = EventAdapter.getData().dsItemId;
            _this.store.model.idDs(new Array(id));
        };
        $dataSource[0].ondragenter = function(e){
            e.preventDefault();
        };
        $dataSource[0].ondragover = function(e){
            e.preventDefault();
        };
        $dataSource[0].ondragleave = function(e){
            e.preventDefault();
        };
        $dataSource.off('click').on('click','.btnRemoveDs',function(e){
            //数据源删除后,枚举也同时删除
            //var opt = _this.store.model.option();
            //_this.store.model.idDs([]);
            //opt.trigger = {};
            //_this.store.model.option(opt, 'trigger');
            _this.store.model.update({
                'idDs': [],
                //'option.trigger': {}
            })
        });
        $('.dropArea', this.$propertyList)[0].ondragover = function(e){
            e.preventDefault();
            $(e.currentTarget).addClass('dragover');
        };
        $('.dropArea', this.$propertyList)[0].ondragleave = function(e){
            e.preventDefault();
            $(e.currentTarget).removeClass('dragover');
        };

        //是否启用枚举
        var $btnEnumerate = $('#liEnumerateWrap .divTool #btnAddEnumerate');
        var $btnSaveEnumerate = $('#liEnumerateWrap .divTool #btnSaveEnumerate');
        $('#ckbEnumerate')[0].onclick = function(){
            if($(this).is(':checked')){
                $('#enumerateWrap').slideDown();
                $btnEnumerate.show();
                $btnSaveEnumerate.show();
            }else {
                $('#enumerateWrap').slideUp();
                $btnEnumerate.hide();
                $btnSaveEnumerate.hide();
            }
        }
        if (!$('#ckbEnumerate').is(':checked')) {
            $btnEnumerate.hide();
            $btnSaveEnumerate.hide();
        }
        var $enumerateWrap = $('#enumerateWrap');
        var $ulEnumerate= $enumerateWrap.find('ul');
        //添加枚举
        $('#btnAddEnumerate')[0].onclick = function(){
            var $li = $('' +
                '<li class="enumerateItem">\
                <div class="enumeratePart"><label class="enumerateLabel">key:</label><input class="enumerateKey"></div>\
                <div class="enumeratePart"><label class="enumerateLabel">value:</label><input class="enumerateVal"></div>\
                <span class="glyphicon glyphicon-remove-circle btnRemove btnEnumerate"></li>\
                ');
            $ulEnumerate.append($li);
        };

        //删除枚举
        $('#enumerateWrap').off('click').on('click', '.btnRemove',function(){
            $(this).parents('#enumerateWrap').hide();
            var enumerateKey= $(this).siblings().find('input.enumerateKey').val();
            if(enumerateKey){
                delete _this.store.model['option.trigger']()[enumerateKey];
                _this.store.model.update({
                    'option.trigger': _this.store.model['option.trigger']()
                })
            }
            $(this).parent().remove();
            _this.$propertyList.find('#ckbEnumerate').prop('checked', false);
        });

        //保存枚举
        $('#btnSaveEnumerate')[0].onclick = function(e){
            var $arrKey = $('.enumerateKey'),$arrVal = $('.enumerateVal');
            var tempOpt = _this.store.model.option();
            tempOpt.trigger = {};
            for (var i = 0 ; i < $arrKey.length; i++) {
                var parseFloatKey = parseFloat($arrKey.eq(i).val()).toFixed(0);
                if(isNaN(parseFloatKey))continue;
                tempOpt.trigger[parseFloatKey] = $arrVal.eq(i).val();
            }
            _this.store.model.option(tempOpt, 'trigger');
            //$('#enumerateWrap').slideUp();
        };
    };

    window.widgets = window.widgets || {};
    window.widgets.props = window.widgets.factory  || {};
    window.widgets.props.CanvasPipeProp = CanvasPipeProp;

} (window.widgets.factory.WidgetProp));

/** Canvas Image Prop Model */
(function (PropModel) {

    var class2type = Object.prototype.toString;

    function CanvasPipePropModel() {
        PropModel.apply(this, arguments);
    }

    CanvasPipePropModel.prototype = Object.create(PropModel.prototype);
    CanvasPipePropModel.prototype.constructor = CanvasPipePropModel;

    CanvasPipePropModel.prototype.option = function (params, attr) {//attr可以为空
        if(class2type.call(params) === '[object Object]') {
            if(arguments.length == 1){
                this._setProperty('option', params);
            }else if(arguments.length == 2){//只设置option的指定属性:attr
                this._setProperty('option.' + arguments[1], params[arguments[1]]);
            }
            return true;
        }
        var opt = $.extend(true, {}, this.models[0].option());
        for(var i = 1, len = this.models.length, modelOpt; i < len; i ++){
            modelOpt = this.models[i].option();
            for(var j in modelOpt){
                if(opt[j] != modelOpt[j]){
                    opt[j] = '';
                }
            }
        }
        return opt;
    };
    ['idDs','option.trigger'].forEach(function(type){
        CanvasPipePropModel.prototype[type] = function (params) {
            var v;
            if(params) {
                this._setProperty(type, params);
                return true;
            }
            if((v = this._isPropertyValueSame(type) ) !== false ) {
                return v;
            }
        };
    })
    //CanvasPipePropModel.prototype.idDs = function (params) {
    //    var v;
    //    if(params) {
    //        this._setProperty('idDs', params);
    //        return true;
    //    }
    //    if((v = this._isPropertyValueSame('idDs') ) !== false ) {
    //        return v;
    //    }
    //};

    window.widgets = window.widgets || {};
    window.widgets.propModels = window.widgets.propModels || {};
    window.widgets.propModels.CanvasPipePropModel = CanvasPipePropModel;

} (window.widgets.propModels.PropModel));
(function (WidgetProp) {
    var _this = undefined;
    function HtmlContainerProp(propCtn, model) {
        WidgetProp.apply(this, arguments);
        _this = this;
    }

    HtmlContainerProp.prototype = Object.create(WidgetProp.prototype);
    HtmlContainerProp.prototype.constructor = HtmlContainerProp;

    HtmlContainerProp.prototype.tplPrivateProp = '\
        <li>\
            <ul class="list-inline">\
                <li class="txtShow">\
                    <label class="text-content">Content:</label>\
                    <span class="btnEditTxt glyphicon glyphicon-edit"></span>\
                </li>\
            </ul>\
        </li>\
        <li>\
            <ul class="list-inline">\
                <li><span class="glyphicon glyphicon-export" id="exportHtmlCtTemplet"></span></li>\
                <li><span class="glyphicon glyphicon-import" id="importHtmlCtTemplet"></span></li>\
            </ul>\
        </li>';

    /** override */
    HtmlContainerProp.prototype.show = function () {
        this.$propertyList.empty();
        var model = this.store.model;
        var defaultOpt = {
            x: typeof model.x() === 'number' ? model.x() : '-',// model.x() || '-',
            y: typeof model.y() === 'number' ? model.y() : '-',//model.y() || '-',
            w: typeof model.w() === 'number' ? model.w() : '-',//model.w() || '-',
            h: typeof model.h() === 'number' ? model.h() : '-'//model.h() || '-'
        };
        var option = {
            html: model.option().html//.replace(/[<>]/ig, function ($0) { switch($0) {case '<': return '&lt;';case '>': return '&gt;';} })
        };
        this.$propertyList.html(this.tplProp.formatEL(defaultOpt));
        this.$propertyList.append(this.tplPrivateProp.formatEL(option));
        //国际化
        $('.text-content').html(I18n.resource.mainPanel.attrPanel.attrRepeat.CONTENT);
        $('.txtShow').find('.btnEditTxt').attr('title', I18n.resource.mainPanel.attrPanel.attrRepeat.EDIT_CONTENT_TITLE);
        $('#exportHtmlCtTemplet').attr('title', I18n.resource.mainPanel.attrPanel.attrRepeat.EXPORT_STYLE_TITLE);
        $('#importHtmlCtTemplet').attr('title', I18n.resource.mainPanel.attrPanel.attrRepeat.IMPORT_STYLE_TITLE);

        this.attachPubEvent(this.store.model);
        this.attachEvent();
    };

    /** override */
    HtmlContainerProp.prototype.close = function () {

    };

    /** override */
    HtmlContainerProp.prototype.update = function () {

    };

    HtmlContainerProp.prototype.attachEvent = function () {
        //修改文本显示内容
        $('.btnEditTxt', this.$propertyList).off('click').click(function(){
            CodeEditorModal.show(_this.store.model.option(), function (code) {
                var opt = _this.store.model.option();
                opt.html = code.html;
                opt.css = code.css;
                opt.js = code.js;
                _this.store.model.option(opt);
            });
        });

        $('#importHtmlCtTemplet')[0].onclick = this.importTemplate;
        $('#exportHtmlCtTemplet')[0].onclick = this.exportTemplate;
    };

    HtmlContainerProp.prototype.importTemplate = function () {
        MaterialModal.show(['widget.HtmlContainer'], function (data, isCopy) {
            var content = data.content;
            var opt = _this.store.model.option();
            opt.html = content.html;
            //_this.store.model.option(opt);
            if (!isCopy) {
                //_this.store.model.templateId(data._id);
                _this.store.model.update({
                'option': opt,
                'templateId': data._id
            });
            } else {
                //_this.store.model.templateId('');
                _this.store.model.update({
                'option': opt,
                'templateId': ''
            });
            }

        });
    };

    HtmlContainerProp.prototype.getTemplateFromCode = function (html) {
        var pattern = /<%([\sA-Za-z0-9])*?%>/mg;
        var tmp = [];
        var count = 0;
        var tplValueNamePrefix = 'VALUE_';

        html = html.replace(pattern, function ($0, $1) {
            // $0 为包含 <%、%> 的匹配
            // $1 为 $0 中去除 <%、%> 的结果
            $1 = $1.trim();
            if (tmp.indexOf($1) === -1) {
                tmp.push($1);
                count ++;
            }
            return ['<%', tplValueNamePrefix + tmp.indexOf($1), '%>'].join('');
        });

        return {
            html: html,
            tplValueCount: count
        }
    };

    HtmlContainerProp.prototype.exportTemplate = function () {
        var options = _this.store.model.option();
        var templateName, data;

        templateName = prompt(I18n.resource.mainPanel.exportModal.EXPORT_INFO);
        if(!templateName) return;

        data = {
            _id: ObjectId(),
            name: templateName,
            creator: AppConfig.account,
            time: new Date().format('yyyy-MM-dd HH:mm:ss'),
            'public': 1,
            group: '',
            type: 'widget.HtmlContainer',
            content: {
                html: options.html || '',
                css: options.css || '',
                js: options.js || ''
            }
        };
        WebAPI.post('/factory/material/save', data
        ).done(function(result){

        }).always(function(){

        });
    };

    window.widgets = window.widgets || {};
    window.widgets.props = window.widgets.factory  || {};
    window.widgets.props.HtmlContainerProp = HtmlContainerProp;

} (window.widgets.factory.WidgetProp));

/** Html Container Prop Model */
(function (PropModel) {

    var class2type = Object.prototype.toString;

    function HtmlContainerPropModel() {
        PropModel.apply(this, arguments);
    }

    HtmlContainerPropModel.prototype = Object.create(PropModel.prototype);
    HtmlContainerPropModel.prototype.constructor = HtmlContainerPropModel;

    ['option,templateId'].forEach(function(type){
        HtmlContainerPropModel.prototype[type] = function (params) {
            var v;
            if(params) {
                this._setProperty(type, params);
                return true;
            }
            if((v = this._isPropertyValueSame(type) ) !== false ) {
                return v;
            }
        };
    })
    HtmlContainerPropModel.prototype.templateId = function (params) {
        var v;
        if (class2type.call(params) === '[object String]') {
            this._setProperty('templateId', params);
            return true;
        }
        if ( (v = this._isPropertyValueSame('templateId')) !== false ) {
            return v;
        }
    };

    HtmlContainerPropModel.prototype.option = function (params) {
        if(class2type.call(params) === '[object Object]') {
            this._setProperty('option', params);
            return true;
        }
        var opt = $.extend(true, {}, this.models[0].option());
        for(var i = 1, len = this.models.length, modelOpt; i < len; i ++){
            modelOpt = this.models[i].option();
            for(var i in modelOpt){
                if(opt[i] != modelOpt[i]){
                    opt[i] = '';
                }
            }
        }
        return opt;
    };

    window.widgets = window.widgets || {};
    window.widgets.propModels = window.widgets.propModels || {};
    window.widgets.propModels.HtmlContainerPropModel = HtmlContainerPropModel;

} (window.widgets.propModels.PropModel));
(function (WidgetProp) {

    function HtmlButtonProp(propCtn, model) {
        WidgetProp.apply(this, arguments);
    }

    HtmlButtonProp.prototype = Object.create(WidgetProp.prototype);
    HtmlButtonProp.prototype.constructor = HtmlButtonProp;

    HtmlButtonProp.prototype.tplPrivateProp = '\
        <li>\
            <ul class="list-inline">\
                <li>\
                    <span class="span-bold">Style:</span>\
                    <div class="btn-group">\
                      <button id="btnTxtStyle" type="button" class="btn btn-xs btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\
                        {class}<span class="caret"></span>\
                      </button>\
                      <ul class="dropdown-menu" id="btnTxtStyleList">\
                        <li data-class="default"><a href="#">Default</a></li>\
                        <li data-class="primary"><a href="#">Primary</a></li>\
                        <li data-class="success"><a href="#">Success</a></li>\
                        <li data-class="info"><a href="#">Info</a></li>\
                        <li data-class="warning"><a href="#">Warning</a></li>\
                        <li data-class="danger"><a href="#">Danger</a></li>\
                        <li data-class="link"><a href="#">Link</a></li>\
                        <li data-class="pink"><a href="#">Pink</a></li>\
                        <li data-class="blue"><a href="#">Blue</a></li>\
                        <li data-class="green"><a href="#">Green</a></li>\
                      </ul>\
                    </div>\
                </li>\
            </ul>\
            <ul class="list-inline" style="padding-top: 10px;">\
                <li class="txtShow">\
                    <label class="text-content">Content:</label>\
                    <span class="btnEditTxt glyphicon glyphicon-edit" style="padding-left: 10px;"></span>\
                </li>\
            </ul>\
        </li>\
        <li>\
            <ul class="list-inline" style="position: relative;">\
                <li class="divPorpertyBase">\
                    <div class="dataSource">\
                        <span class="span-bold">Datasource:</span>\
                        <span class="spanDs" ds-id="{dsId}" style="display:{isShowDsName}">\
                            <span class="dsText">{dsName}</span>\
                            <span class="btnRemoveDs glyphicon glyphicon-remove"></span>\
                        </span>\
                        <span class="dropArea" style="display:{isShowDropArea}">\
                            <span class="glyphicon glyphicon-plus"></span>\
                        </span>\
                    </div>\
                </li>\
                <li id="liEnumerateWrap" style="padding-top: 10px;display:{isShowEnumerate}">\
                    <div class="divTool">\
                    <div class="enumerateCtn{isDisabled}">\
                        <label for="ckbEnumerate">Enumerate:</label>\
                        <input id="ckbEnumerate" type="checkbox" style="margin-left:10px;" {isDisabled}/> \
                    </div>\
                        <span id="btnAddEnumerate" class="glyphicon glyphicon-plus-sign btnEnumerate"></span>\
                        <span id="btnSaveEnumerate" class="glyphicon glyphicon-ok-circle btnEnumerate"></span>\
                    </div>\
                </li>\
                <div id="enumerateWrap">\
                    <ul class="list-unstyled">\
                        <li class="enumerateItem">\
                            <div class="enumeratePart"><label class="enumerateLabel">Key:</label><input class="enumerateKey"></div>\
                            <div class="enumeratePart divEnumerateVal"><label class="enumerateLabel">Value:</label><input class="enumerateVal"></div>\
                            <span class="glyphicon glyphicon-remove-circle btnRemove btnEnumerate">\
                        </li>\
                    </ul>\
                </div>\
            </ul>\
        </li>\
        <li>\
            <ul class="list-inline" style="position:realtive">\
                <li class="divPorpertyBase" id="liTempltConfigWrap">\
                    <div class="propertyTemplt">\
                        <label for="ckbpropertyTemplt">Customstyle:</label>\
                        <input id="ckbpropertyTemplt" type="checkbox" />\
                    </div>\
                    <div class="divTool">\
                        <span id="btnPropTempltApply" class="glyphicon glyphicon-check"></span>\
                        <span id="btnPropTempltExport" class="glyphicon glyphicon-export"></span>\
                        <span id="btnPropTempltImport" class="glyphicon glyphicon-import"></span>\
                    </div>\
                </li>\
                <div id="templtConfigWrap">\
                    <ul class="list-unstyled">\
                        <li class="tplStyle">\
                            <label class="sr-only" for="inputNormalTemplt"></label>\
                            <textarea class="form-control gray-scrollbar" id="inputTplStyle" rows="3"></textarea>\
                        </li>\
                    </ul>\
                </div>\
            </ul>\
        </li>';
    //<span class="p_span">{text}</span><input class="p_input" type="text" value="{text}"/>\
        HtmlButtonProp.prototype.tplStyle = '' +
        '.Normal{\n' +
        '    /* Please input text normal style */\n' +
        '}\n' +
        '.Normal:hover{\n' +
        '    /* Please enter a state of suspension style text */\n'+
        '}' +
        '';
    /** override */
    HtmlButtonProp.prototype.show = function () {
        this.$propertyList.empty();
        var model = this.store.model, isShowDsName = 'none', isShowEnumerate = 'none', isShowDropArea = 'inline-block', isDisabled = ' disabled';
        var defaultOpt = {
            x: typeof model.x() === 'number' ? model.x() : '-',// model.x() || '-',
            y: typeof model.y() === 'number' ? model.y() : '-',//model.y() || '-',
            w: typeof model.w() === 'number' ? model.w() : '-',//model.w() || '-',
            h: typeof model.h() === 'number' ? model.h() : '-'//model.h() || '-'
        };
        var option = {
            text: model.option().text,
            class: model.option().class ? model.option().class: '---',
            dsId: model.idDs(),
            dsName: (function(ids){
                var idsName = [];
                if(!ids || !(ids instanceof Array) || ids.length == 0) return;
                isShowDsName = 'inline-block';
                isShowDropArea = 'none';
                isShowEnumerate = 'block';
                isDisabled = '';

                var arrItem = [];
                arrItem = AppConfig.datasource.getDSItemById(ids);
                ids.forEach(function(id){
                    for (var m = 0; m < arrItem.length; m++) {
                        if (id == arrItem[m].id) {
                            idsName = arrItem[m].alias
                            break;
                        }
                    }
                    //idsName = AppConfig.datasource.getDSItemById(id).alias
                });
                return idsName;
            }(model.idDs())),
            isShowDsName: isShowDsName,
            isShowEnumerate: isShowEnumerate,
            isShowDropArea: isShowDropArea,
            isDisabled: isDisabled
        };
        this.$propertyList.html(this.tplProp.formatEL(defaultOpt));
        this.$propertyList.append(this.tplPrivateProp.formatEL(option));
        //国际化
        $('.span-bold').html(I18n.resource.mainPanel.attrPanel.attrRepeat.STYLE);
        $('.text-content').html(I18n.resource.mainPanel.attrPanel.attrRepeat.CONTENT);
        $('.dataSource').find('.span-bold').html(I18n.resource.mainPanel.attrPanel.attrRepeat.DATA_SOURCE);
        $('.propertyTemplt').find('label').html(I18n.resource.mainPanel.attrPanel.attrRepeat.CUSTOMSTYLE);
        $('.txtShow').find('.btnEditTxt').attr('title', I18n.resource.mainPanel.attrPanel.attrRepeat.EDIT_CONTENT_TITLE);
        $('#btnPropTempltApply').attr('title', I18n.resource.mainPanel.attrPanel.attrRepeat.SAVE_STYLE_TITLE);
        $('#btnPropTempltExport').attr('title', I18n.resource.mainPanel.attrPanel.attrRepeat.EXPORT_STYLE_TITLE);
        $('#btnPropTempltImport').attr('title', I18n.resource.mainPanel.attrPanel.attrRepeat.IMPORT_STYLE_TITLE);
        var styleArr = [I18n.resource.mainPanel.attrPanel.attrButton.STYLE_ONE, I18n.resource.mainPanel.attrPanel.attrButton.STYLE_TWO, I18n.resource.mainPanel.attrPanel.attrButton.STYLE_THREE, I18n.resource.mainPanel.attrPanel.attrButton.STYLE_FOUR,
                        I18n.resource.mainPanel.attrPanel.attrButton.STYLE_FIVE, I18n.resource.mainPanel.attrPanel.attrButton.STYLE_SIX, I18n.resource.mainPanel.attrPanel.attrButton.STYLE_SEVEN, I18n.resource.mainPanel.attrPanel.attrButton.STYLE_EIGHT,
                        I18n.resource.mainPanel.attrPanel.attrButton.STYLE_NINE, I18n.resource.mainPanel.attrPanel.attrButton.STYLE_TEN];
        for (var m = 0; m < styleArr.length; m++) {
            $('#btnTxtStyleList').find('a').eq(m).html(styleArr[m]);
        }


        //按钮预置样式的文本
        var btnTxt = option.class == '---' ? '---' : $('[data-class="' + option.class + '"] a').text();
        $('#btnTxtStyle').html(btnTxt + '<span class="caret"></span>');

        //枚举初始化
        var $enumerateWrap = $('#enumerateWrap');
        var trigger = model.models[0].option().trigger;
        var triggerEptCount = 0;
        if(!$.isEmptyObject(trigger)){
            $('.enumerateItem').remove();
            for (var row in trigger){
                addEnumerate(row, trigger[row]);
            }
            $('#liEnumerateWrap .divTool .btnEnumerate').show();
            var models = model.models;
            //判断选中的按钮的trigger是否有为空的，如果有则枚举不显示
            for (var i = 0; i < models.length; i++) {
                if ($.isEmptyObject(models[i].option().trigger)) {
                    triggerEptCount += 1;
                }
            }
            if (triggerEptCount===0) {
            this.$propertyList.find('#ckbEnumerate')[0].checked = true;
            $enumerateWrap.show();
            } else {
                $enumerateWrap.find('ul').children().remove();
                addEnumerate('', '');
        }
        }
        function addEnumerate(key, value){
            var html =  '<li class="enumerateItem">\
                <div class="enumeratePart"><label class="enumerateLabel">Key:</label><input class="enumerateKey" value={key}></div>\
                <div class="enumeratePart"><label class="enumerateLabel">Value:</label><input class="enumerateVal" value={value}></div>\
                <span class="glyphicon glyphicon-remove-circle btnRemove btnEnumerate"></li>\
                ';
            var $li = $(html.formatEL({
                key: key,
                value: value
            }));
            $enumerateWrap.find('ul').append($li);
        };
        if(model.option().style) {
            this.$propertyList.find('#inputTplStyle').val(model.option().style).prop('disabled', false);
            this.$propertyList.find('#ckbpropertyTemplt')[0].checked = true;
            $('#templtConfigWrap').show();
        }else if(model.models.length>1){
            if (!model.option().style) {
                this.$propertyList.find('#inputTplStyle').val(this.tplStyle).prop('disabled', false);
                this.$propertyList.find('#ckbpropertyTemplt')[0].checked = true;
                $('#templtConfigWrap').show();
            }
        }else {
            this.$propertyList.find('#inputTplStyle').val(this.tplStyle).prop('disabled',true);
            $('#liTempltConfigWrap .divTool').hide();
        }
        this.attachPubEvent(this.store.model);
        this.attachEvent();
    };

    /** override */
    HtmlButtonProp.prototype.close = function () {

    };

    /** override */
    HtmlButtonProp.prototype.update = function () {

    };

    HtmlButtonProp.prototype.attachEvent = function () {
        var _this = this;
        var tempStyle = '';
        var templateId = null;

        //选择按钮样式
        $('#btnTxtStyleList li', this.$propertyList).off('click').click(function(){
            var opt = _this.store.model.option();
            opt.class = this.dataset.class;
            _this.store.model.option(opt,'class');
        });
        //预览按钮样式
        $('#btnTxtStyleList li', this.$propertyList).hover(function(){
            tempStyle = this.dataset.class;
            for(var i = 0, model; i < _this.store.model.models.length; i++){
                model = _this.store.model.models[i];
                $('#' + model._id()).removeClass(model.option().class).addClass(tempStyle);
            }
        }, function(){
            for(var i = 0, model; i < _this.store.model.models.length; i++){
                model = _this.store.model.models[i];
                $('#' + model._id()).removeClass(tempStyle).addClass(model.option().class);
            }
        });

        //修改按钮显示内容
        $('.btnEditTxt', this.prototype).off('click').click(function(){
            //todo
            //var $li = $(this).parent('li').addClass('showInput');
            //$(this).prev('.p_input').focus().one('blur',function(){
            //    $li.removeClass('showInput');
            //    var opt = _this.store.model.option();
            //    opt.text = this.value;
            //    _this.store.model.option(opt);
            //});
            EditorModal.show(_this.store.model.option().text, true, function (newContent) {
                var opt = _this.store.model.option();
                opt.text = newContent;
                _this.store.model.option(opt,'text');
            });
        });

        var $dataSource = $('.dataSource');
        $dataSource[0].ondrop = function(e){
            e.preventDefault();
            var id = EventAdapter.getData().dsItemId;
             _this.store.model.update({
                'idDs': new Array(id),
                 'option.text': AppConfig.datasource.getDSItemById(id).alias
            });
            //_this.store.model.idDs(new Array(id));
        };
        $dataSource[0].ondragenter = function(e){
            e.preventDefault();
        };
        $dataSource[0].ondragover = function(e){
            e.preventDefault();
        };
        $dataSource[0].ondragleave = function(e){
            e.preventDefault();
        };
        $dataSource.off('click').on('click','.btnRemoveDs',function(e){
            //数据源删除后,枚举也同时删除
            //var opt = _this.store.model.option();
            //_this.store.model.idDs([]);
            //opt.trigger = {};
            //_this.store.model.option(opt,'trigger');
            var triggerAll = _this.store.model.models[0].option().trigger;
            var triggerDefault = {};
            triggerDefault = triggerAll.default ? { 'default': triggerAll.default } : {};
            _this.store.model.update({
                'idDs': [],
                'option.trigger': triggerDefault,
                'option.text': 'Button'
            })
        });
        $('.dropArea', this.$propertyList)[0].ondragover = function(e){
            e.preventDefault();
            $(e.currentTarget).addClass('dragover');
            console.log('drag over');
        };
        $('.dropArea', this.$propertyList)[0].ondragleave = function(e){
            e.preventDefault();
            $(e.currentTarget).removeClass('dragover');
            console.log('drag over');
        };

        //是否启用枚举
        var $btnEnumerate = $('#liEnumerateWrap .divTool #btnAddEnumerate');
        var $btnSaveEnumerate = $('#liEnumerateWrap .divTool #btnSaveEnumerate');
        $('#ckbEnumerate')[0].onclick = function(){
            if($(this).is(':checked')){
                $('#enumerateWrap').slideDown();
                $btnEnumerate.show();
                $btnSaveEnumerate.show();
            }else{
                $('#enumerateWrap').slideUp();
                $btnEnumerate.hide();
                $btnSaveEnumerate.hide();
            }
        };
        if (!$('#ckbEnumerate').is(':checked')) {
            $btnEnumerate.hide();
            $btnSaveEnumerate.hide();
        }
        var $enumerateWrap = $('#enumerateWrap');
        var $ulEnumerate= $enumerateWrap.find('ul');
        //添加枚举
        $('#btnAddEnumerate')[0].onclick = function(){
            var $li = $('' +
                '<li class="enumerateItem">\
                <div class="enumeratePart"><label class="enumerateLabel">Key:</label><input class="enumerateKey"></div>\
                <div class="enumeratePart"><label class="enumerateLabel">Value:</label><input class="enumerateVal"></div>\
                <span class="glyphicon glyphicon-remove-circle btnRemove btnEnumerate"></li>\
                ');
            $ulEnumerate.append($li);
        };

        //删除枚举
        $enumerateWrap.off('click').on('click', '.btnRemove',function(){
            $(this).parents('#enumerateWrap').hide();
            var enumerateKey= $(this).siblings().find('input.enumerateKey').val();
            if(enumerateKey){
                delete _this.store.model['option.trigger']()[enumerateKey];
                _this.store.model.update({
                    'option.trigger': _this.store.model['option.trigger']()
                })
            }
            $(this).parent().remove();
            _this.$propertyList.find('#ckbEnumerate').prop('checked', false);
        });

        //保存枚举 绑点返回的值和枚举的key值进行匹配, 显示key对应的value值
        $('#btnSaveEnumerate')[0].onclick = function(e){
            var $arrKey = $('.enumerateKey'),$arrVal = $('.enumerateVal');
            var tempOpt = _this.store.model.option();
            tempOpt.trigger = {};
            for (var i = 0; i < $arrKey.length; i++) {
                var parseFloatKey = parseFloat($arrKey.eq(i).val()).toFixed(0);
                if(isNaN(parseFloatKey))continue;
                tempOpt.trigger[parseFloatKey] = $arrVal.eq(i).val();
            }
            _this.store.model.option(tempOpt,'trigger');
        };

        //启用样式模板编辑
        var tpltConfigWrap = $('#templtConfigWrap');
        var divCustom = $('#liTempltConfigWrap .divTool');
        $('#ckbpropertyTemplt')[0].onclick = function(){
            if($(this).is(':checked')){
                $('#inputTplStyle').prop('disabled',false);
                tpltConfigWrap.slideDown();
                 divCustom.show();
            }else{
                $('#inputTplStyle').prop('disabled',true);
                tpltConfigWrap.slideUp();
                divCustom.hide();
            }
        };
        //应用模板
        $('#btnPropTempltApply')[0].onclick = function(){
            var tempOpt = _this.store.model.option();
            if($('#ckbpropertyTemplt').is(':checked')) {
                tempOpt.style = $('#inputTplStyle').val();
                // 如果有模板 id，则说明是不保留副本的模板应用
                if (templateId) {
                    _this.store.model.templateId(templateId);
                    // 这里需要将 templateId 置为空，以免和保留副本的模版应用混合到一起
                    templateId = null;
                } else {
                    _this.store.model.templateId('');
                }
            } else {
                tempOpt.style = null;
            }
            _this.store.model.option(tempOpt,'style');
        };
        //取消样式
        $('#ckbpropertyTemplt').off('click').click(function () {
            if (!$(this).is(':checked')) {
                _this.store.model.templateId('');
                var tempOpt = _this.store.model.option();
                tempOpt.style = '';
                $('#inputTplStyle').val(_this.tplStyle);
                _this.store.model.option(tempOpt,'style');
            }
        });
        //导入模板
        $('#btnPropTempltImport')[0].onclick = function () {
            MaterialModal.show(['widget.HtmlButton'], function (data, isCopy) {
                // 根据判断，确定是否是保留副本的引用
                if (isCopy === false) {
                    templateId = data._id;
                }
                $('#inputTplStyle').val(data.content.style).prop('disabled',false);
                _this.$propertyList.find('#ckbpropertyTemplt')[0].checked = true;
                tpltConfigWrap.slideDown();
            });
        };
         
        //导出模板
        $('#btnPropTempltExport')[0].onclick = function(){
            var templateName = prompt(I18n.resource.mainPanel.exportModal.EXPORT_INFO);
            if(!templateName) return;
            var tplStyle = $('#inputTplStyle').val();
            var data = {
                _id: ObjectId(),
                name: templateName,
                creator: AppConfig.userId,
                time: new Date().format('yyyy-MM-dd HH:mm:ss'),
                "public": 1,
                group: '',
                type: 'widget.HtmlButton',
                content: {
                    style:tplStyle
                }
            };
            WebAPI.post('/factory/material/save', data).done(function(result){
                if(result && result._id){
                    data._id = result._id;
                }
            }).always(function(){

            });
        };
    };

    window.widgets = window.widgets || {};
    window.widgets.props = window.widgets.factory  || {};
    window.widgets.props.HtmlButtonProp = HtmlButtonProp;

} (window.widgets.factory.WidgetProp));

/** Html Button Prop Model */
(function (PropModel) {

    var class2type = Object.prototype.toString;

    function HtmlButtonPropModel() {
        PropModel.apply(this, arguments);
    }

    HtmlButtonPropModel.prototype = Object.create(PropModel.prototype);
    HtmlButtonPropModel.prototype.constructor = HtmlButtonPropModel;

    HtmlButtonPropModel.prototype.option = function (params,attr) {
        if (class2type.call(params) === '[object Object]') {
            if (arguments.length == 1) {
            this._setProperty('option', params);
            } else if (arguments.length == 2) {//只设置option的指定属性:attr
                this._setProperty('option.' + arguments[1], params[arguments[1]]);
            }
            return true;
        }
        var opt = $.extend(true, {}, this.models[0].option());
        for(var i = 1, len = this.models.length, modelOpt; i < len; i ++){
            modelOpt = this.models[i].option();
            for(var i in modelOpt){
                if (opt[i] != modelOpt[i]) {
                    if (i === 'trigger') {
                        opt[i] = {};
                    } else {
                    opt[i] = '';
                }
            }
        }
        }
        return opt;
    };

    ['idDs','templateId','option.trigger','idDs,option.text'].forEach(function(type){
        HtmlButtonPropModel.prototype[type] = function (params) {
            var v;
            if(params) {
                this._setProperty(type, params);
                return true;
            }
            if((v = this._isPropertyValueSame(type) ) !== false ) {
                return v;
            }
        };
    })
    //HtmlButtonPropModel.prototype.idDs = function (params) {
    //    var v;
    //    if(params) {
    //        this._setProperty('idDs', params);
    //        return true;
    //    }
    //    if((v = this._isPropertyValueSame('idDs') ) !== false ) {
    //        return v;
    //    }
    //};

    //HtmlButtonPropModel.prototype.templateId = function (params) {
    //    var v;
    //    if (class2type.call(params) === '[object String]') {
    //        this._setProperty('templateId', params);
    //        return true;
    //    }
    //    if ( (v = this._isPropertyValueSame('templateId')) !== false ) {
    //        return v;
    //    }
    //};

    window.widgets = window.widgets || {};
    window.widgets.propModels = window.widgets.propModels || {};
    window.widgets.propModels.HtmlButtonPropModel = HtmlButtonPropModel;

} (window.widgets.propModels.PropModel));
(function (WidgetProp) {

    function HtmlTextProp(propCtn, model) {
        WidgetProp.apply(this, arguments);
    }

    HtmlTextProp.prototype = Object.create(WidgetProp.prototype);
    HtmlTextProp.prototype.constructor = HtmlTextProp;

    WidgetProp.prototype.tplPrivateProp = '\
        <li>\
            <ul class="list-inline">\
                <li>\
                    <span class="span-bold">Style:</span>\
                    <div class="btn-group">\
                      <button id="btnTxtStyle" type="button" class="btn btn-xs btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\
                        {class} <span class="caret"></span>\
                      </button>\
                      <ul class="dropdown-menu" id="txtStyle">\
                        <li data-class="txtStyle1"><a href="#" class="txtStyle1">正文1</a></li>\
                        <li data-class="txtStyle8"><a href="#" class="txtStyle1">正文2</a></li>\
                        <li data-class="txtStyle2"><a href="#" class="txtStyle2">标题1</a></li>\
                        <li data-class="txtStyle3"><a href="#" class="txtStyle3">标题2</a></li>\
                        <li data-class="txtStyle4"><a href="#" class="txtStyle4">标题3</a></li>\
                        <li data-class="txtStyle5"><a href="#" class="txtStyle5">标题4</a></li>\
                        <li data-class="txtStyle6"><a href="#" class="txtStyle6">标题5</a></li>\
                        <li data-class="txtStyle7"><a href="#" class="txtStyle7">副标题</a></li>\
                      </ul>\
                    </div>\
                </li>\
            </ul>\
            <ul class="list-inline" style="padding-top: 10px;">\
                <li class="txtShow">\
                    <label class="text-content">Content:</label>\
                    <span class="p_span" style="display:none;">{text}</span>\
                    <span class="btnEditTxt glyphicon glyphicon-edit" style="padding-left: 10px;"></span>\
                </li>\
            </ul>\
        </li>\
        <li>\
            <ul class="list-inline" style="position: relative;">\
                <li class="divPorpertyBase">\
                    <div class="dataSource">\
                        <span class="span-bold">Datasource:</span>\
                        <span class="spanDs" ds-id="{dsId}" style="display:{isShowDsName}">\
                            <span class="dsText">{dsName}</span>\
                            <span class="btnRemoveDs glyphicon glyphicon-remove"></span>\
                        </span>\
                        <span class="dropArea" style="display:{isShowDropArea}">\
                            <span class="glyphicon glyphicon-plus"></span>\
                        </span>\
                    </div>\
                </li>\
                <li id="liFloat" style="padding-top: 10px;">\
                        <label class="property-name" style="width: 52px;">精确位数:</label>\
                        <span class="property-value p_span"></span>\
                        <input class="property-value p_input" type="text" value="">\
                </li>\
                <li id="liEnumerateWrap" style="padding-top: 10px;display:{isShowEnumerate}">\
                    <div class="divTool">\
                        <div class="enumerateCtn{isDisabled}">\
                            <label for="ckbEnumerate">Enumerate:</label>\
                            <input id="ckbEnumerate" type="checkbox" style="margin-left:10px;" {isDisabled}/>\
                        </div>\
                        <span id="btnAddEnumerate" class="glyphicon glyphicon-plus-sign btnEnumerate"></span>\
                        <span id="btnSaveEnumerate" class="glyphicon glyphicon-ok-circle btnEnumerate"></span>\
                    </div>\
                </li>\
                <div id="enumerateWrap">\
                    <ul class="list-unstyled">\
                        <li class="enumerateItem">\
                            <div class="enumeratePart"><label class="enumerateLabel">Key:</label><input class="enumerateKey"></div>\
                            <div class="enumeratePart divEnumerateVal"><label class="enumerateLabel">Value:</label><input class="enumerateVal"></div>\
                            <span class="glyphicon glyphicon-remove-circle btnRemove btnEnumerate">\
                        </li>\
                    </ul>\
                </div>\
            </ul>\
        </li>\
        <li>\
            <ul class="list-inline" style="position:realtive">\
                <li class="divPorpertyBase" id="liTempltConfigWrap">\
                    <div class="propertyTemplt">\
                        <label for="ckbpropertyTemplt">Customstyle:</label>\
                        <input id="ckbpropertyTemplt" type="checkbox"/>\
                    </div>\
                    <div class="divTool">\
                        <span id="btnPropTempltApply" class="glyphicon glyphicon-check"></span>\
                        <span id="btnPropTempltExport" class="glyphicon glyphicon-export"></span>\
                        <span id="btnPropTempltImport" class="glyphicon glyphicon-import"></span>\
                    </div>\
                </li>\
                <div id="templtConfigWrap">\
                    <ul class="list-unstyled">\
                        <li class="tplStyle">\
                            <label class="sr-only" for="inputNormalTemplt"></label>\
                            <textarea class="form-control gray-scrollbar" id="inputTplStyle" rows="3"></textarea>\
                        </li>\
                    </ul>\
                </div>\
            </ul>\
        </li>';
    HtmlTextProp.prototype.tplStyle = '' +
        '.Normal{\n' +
        '    /* Please input text normal style */\n' +
        '}\n' +
        '.Normal:hover{\n' +
        '    /* Please enter a state of suspension style text */\n'+
        '}' +
        '';
    /** override */
    HtmlTextProp.prototype.show = function () {
        this.$propertyList.empty();
        var model = this.store.model, isShowDsName = 'none', isShowEnumerate = 'none', isShowDropArea = 'inline-block', isDisabled = ' disabled';
        var defaultOpt = {
            x: typeof model.x() === 'number' ? model.x() : '-',// model.x() || '-',
            y: typeof model.y() === 'number' ? model.y() : '-',//model.y() || '-',
            w: typeof model.w() === 'number' ? model.w() : '-',//model.w() || '-',
            h: typeof model.h() === 'number' ? model.h() : '-'//model.h() || '-'
        };
        var option = {
            text: model.option().text,
            class: model.option().class ? model.option().class: '---',
            dsId: model.idDs(),
            dsName: (function(ids){
                var idsName = [];
                if(!ids || !(ids instanceof Array) || ids.length == 0) return;
                isShowDsName = 'inline-block';
                isShowDropArea = 'none';
                isShowEnumerate = 'block';
                isDisabled = '';

                var arrItem = [];
                arrItem = AppConfig.datasource.getDSItemById(ids);
                ids.forEach(function(id){
                    for (var m = 0; m < arrItem.length; m++) {
                        if (id == arrItem[m].id) {
                            idsName = arrItem[m].alias;
                            break;
                        }
                    }
                    //idsName = AppConfig.datasource.getDSItemById(id).alias
                });
                return idsName;
            }(model.idDs())),
            isShowDsName: isShowDsName,
            isShowEnumerate: isShowEnumerate,
            isShowDropArea: isShowDropArea,
            isDisabled: isDisabled
        };
        this.$propertyList.html(this.tplProp.formatEL(defaultOpt));
        this.$propertyList.append(this.tplPrivateProp.formatEL(option));
        //国际化
        $('.span-bold').html(I18n.resource.mainPanel.attrPanel.attrRepeat.STYLE); 
        $('.text-content').html(I18n.resource.mainPanel.attrPanel.attrRepeat.CONTENT);
        $('.dataSource').find('.span-bold').html(I18n.resource.mainPanel.attrPanel.attrRepeat.DATA_SOURCE);
        $('.propertyTemplt').find('label').html(I18n.resource.mainPanel.attrPanel.attrRepeat.CUSTOMSTYLE);
        $('.txtShow').find('.btnEditTxt').attr('title', I18n.resource.mainPanel.attrPanel.attrRepeat.EDIT_CONTENT_TITLE);
        $('#btnPropTempltApply').attr('title', I18n.resource.mainPanel.attrPanel.attrRepeat.SAVE_STYLE_TITLE);
        $('#btnPropTempltExport').attr('title', I18n.resource.mainPanel.attrPanel.attrRepeat.EXPORT_STYLE_TITLE);
        $('#btnPropTempltImport').attr('title', I18n.resource.mainPanel.attrPanel.attrRepeat.IMPORT_STYLE_TITLE);
        var styleArr = [I18n.resource.mainPanel.attrPanel.attrText.TEXT_ONE, I18n.resource.mainPanel.attrPanel.attrText.TEXT_TWO, I18n.resource.mainPanel.attrPanel.attrText.TITLE_ONE, I18n.resource.mainPanel.attrPanel.attrText.TITLE_TWO,
                        I18n.resource.mainPanel.attrPanel.attrText.TITLE_THREE, I18n.resource.mainPanel.attrPanel.attrText.TITLE_FOUR, I18n.resource.mainPanel.attrPanel.attrText.TITLE_FIVE, I18n.resource.mainPanel.attrPanel.attrText.SUBTITLE];
        for (var m = 0; m < styleArr.length; m++) {
            $('#txtStyle').find('a').eq(m).html(styleArr[m]);
        }


        //文本预置样式的文本
        var btnTxt = option.class == '---' ? '---' : $('[data-class="' + option.class + '"] a').text();
        $('#btnTxtStyle').html(btnTxt + '<span class="caret"></span>');

        //数字精确位数
        var $liFloat = $('#liFloat');
        var float = model['option.precision']();
        if(!float){
            model.models.forEach(function(e,index){
                model.models[index]._values.option.precision = 5;
            })
            float = model['option.precision']();
        }
        $liFloat.children('span').text(float);
        $liFloat.children('input').val(float);

        //枚举初始化
        var $enumerateWrap = $('#enumerateWrap');
        var trigger = model.models[0].option().trigger;
        var triggerEptCount = 0;
        if(!$.isEmptyObject(trigger)) {
            $('.enumerateItem').remove();
            for (var row in trigger) {
                addEnumerate(row, trigger[row]);
            }
            $('#liEnumerateWrap .divTool .btnEnumerate').show();
            var models =model.models;
            for (var i = 0; i < models.length; i++) {
                if($.isEmptyObject(models[i].option().trigger)) {
                    triggerEptCount += 1;
                }
            }
            if (triggerEptCount === 0) {
            this.$propertyList.find('#ckbEnumerate')[0].checked = true;
            $enumerateWrap.show();
            } else {
                $enumerateWrap.find('ul').children().remove();
                addEnumerate('', '');
        }
        }
        function addEnumerate(key, value){
            var html =  '<li class="enumerateItem">\
                <div class="enumeratePart"><label class="enumerateLabel">Key:</label><input class="enumerateKey" value={key}></div>\
                <div class="enumeratePart"><label class="enumerateLabel">Value:</label><input class="enumerateVal" value={value}></div>\
                <span class="glyphicon glyphicon-remove-circle btnRemove btnEnumerate"></li>\
                ';
            var $li = $(html.formatEL({
                key: key,
                value: value
            }));
            $enumerateWrap.find('ul').append($li);
        };
        if(model.option().style) {
            this.$propertyList.find('#inputTplStyle').val(model.option().style).prop('disabled', false);
            this.$propertyList.find('#ckbpropertyTemplt')[0].checked = true;
            $('#templtConfigWrap').show();

        }else if(model.models.length>1){
            if (!model.option().style) {
                this.$propertyList.find('#inputTplStyle').val(this.tplStyle).prop('disabled', false);
                this.$propertyList.find('#ckbpropertyTemplt')[0].checked = true;
                $('#templtConfigWrap').show();
            }
        }else {
            this.$propertyList.find('#inputTplStyle').val(this.tplStyle).prop('disabled',true);
            $('#liTempltConfigWrap .divTool').hide();
        }
        this.attachPubEvent(this.store.model);
        this.attachEvent();
    };

    /** override */
    HtmlTextProp.prototype.close = function () {

    };

    /** override */
    HtmlTextProp.prototype.update = function () {

    };

    HtmlTextProp.prototype.attachEvent = function () {
        var _this = this;
        var tempStyle = '';
        var templateId = null;

        //选择文本样式
        $('#txtStyle li', this.$propertyList).off('click').click(function(){
            var htmlClass = this.dataset.class;
            _this.store.model['option.class'](htmlClass);
        });
        //预览文本样式
        $('#txtStyle li', this.$propertyList).hover(function(){
            tempStyle = this.dataset.class;
            for(var i = 0, model; i < _this.store.model.models.length; i++){
                model = _this.store.model.models[i];
                $('#' + model._id()).removeClass(model.option().class).addClass(tempStyle);
            }
        }, function(){
            for(var i = 0, model; i < _this.store.model.models.length; i++){
                model = _this.store.model.models[i];
                $('#' + model._id()).removeClass(tempStyle).addClass(model.option().class);
            }
        });

        $('.btnEditTxt', this.$propertyList).off('click').click(function(){
            EditorModal.show(_this.store.model.option().text, true, function (newContent) {
                var opt = _this.store.model.option();
                opt.text = newContent;
                _this.store.model.option(opt,'text');
            });
        });

        //数字精确位数
        var $liFloat = $('#liFloat');
        var currentVal = $liFloat.children('input').val();
        $liFloat.children('input').on('focus',function(){
            $liFloat.children('input').val(currentVal);
        });
        $liFloat.children('input').on('blur',function(){
            var blurVal = $liFloat.children('input').val();
            $liFloat.children('span').text(blurVal);
            _this.store.model['option.precision'](blurVal);
        });

        //数据源接收
        var $dataSource = $('.dataSource');
        $dataSource[0].ondrop = function(e){
            e.preventDefault();
            var id = EventAdapter.getData().dsItemId;
            _this.store.model.update({
                'idDs': new Array(id),
                 'option.text': AppConfig.datasource.getDSItemById(id).alias
            });
            //_this.store.model.idDs(new Array(id));
        };
        $dataSource[0].ondragenter = function(e){
            e.preventDefault();
        };
        $dataSource[0].ondragover = function(e){
            e.preventDefault();
        };
        $dataSource[0].ondragleave = function(e){
            e.preventDefault();
        };
        $dataSource.off('click').on('click','.btnRemoveDs',function(e){
            //数据源删除后,枚举也同时删除
            //var opt = _this.store.model.option();
            //_this.store.model.idDs([]);
            //opt.trigger = {};
            //_this.store.model.option(opt,'trigger');
            var triggerAll = _this.store.model.models[0].option().trigger;
            var triggerDefault = {};
            triggerDefault = triggerAll.default ? { 'default': triggerAll.default } : {};
            _this.store.model.update({
                'idDs': [],
                'option.trigger': triggerDefault,
                'option.text': '请此处输入文本'
            })
        });
        $('.dropArea', this.$propertyList)[0].ondragover = function(e){
            e.preventDefault();
            $(e.currentTarget).addClass('dragover');
            console.log('drag over');
        };
        $('.dropArea', this.$propertyList)[0].ondragleave = function(e){
            e.preventDefault();
            $(e.currentTarget).removeClass('dragover');
            console.log('drag over');
        };

        //是否启用枚举
        var $btnEnumerate = $('#liEnumerateWrap .divTool #btnAddEnumerate');
        var $btnSaveEnumerate = $('#liEnumerateWrap .divTool #btnSaveEnumerate');
        $('#ckbEnumerate')[0].onclick = function(){
            if($(this).is(':checked')){
                $('#enumerateWrap').slideDown();
                $btnEnumerate.show();
                $btnSaveEnumerate.show();
            }else{
                $('#enumerateWrap').slideUp();
                $btnEnumerate.hide();
                $btnSaveEnumerate.hide();
            }
        };
        if (!$('#ckbEnumerate').is(':checked')) {
            $btnEnumerate.hide();
            $btnSaveEnumerate.hide();
        }
        var $enumerateWrap = $('#enumerateWrap');
        var $ulEnumerate= $enumerateWrap.find('ul');
        //添加枚举
        $('#btnAddEnumerate')[0].onclick = function(){
            var $li = $('' +
                '<li class="enumerateItem">\
                <div class="enumeratePart"><label class="enumerateLabel">Key:</label><input class="enumerateKey"></div>\
                <div class="enumeratePart"><label class="enumerateLabel">Value:</label><input class="enumerateVal"></div>\
                <span class="glyphicon glyphicon-remove-circle btnRemove btnEnumerate"></li>\
                ');
            $ulEnumerate.append($li);
        };

        //删除枚举
        $enumerateWrap.off('click').on('click', '.btnRemove',function(){
            $(this).parents('#enumerateWrap').hide();
            var enumerateKey= $(this).siblings().find('input.enumerateKey').val();
            if(enumerateKey){
                delete _this.store.model['option.trigger']()[enumerateKey];
                _this.store.model.update({
                    'option.trigger': _this.store.model['option.trigger']()
                })
            }
            $(this).parent().remove();
            _this.$propertyList.find('#ckbEnumerate').prop('checked', false);
        });

        //保存枚举
        $('#btnSaveEnumerate')[0].onclick = function(e){
            var $arrKey = $('.enumerateKey'),$arrVal = $('.enumerateVal');
            var tempOpt = _this.store.model.option();
            tempOpt.trigger = {};
            for (var i = 0; i < $arrKey.length; i++) {
                var parseFloatKey = parseFloat($arrKey.eq(i).val()).toFixed(0);
                if(isNaN(parseFloatKey))continue;
                tempOpt.trigger[parseFloatKey] = $arrVal.eq(i).val();
                //_this.store.model.option().trigger[$arrKey.eq(i).val()] = $arrVal.eq(i).val();
            }
            _this.store.model.option(tempOpt, 'trigger');
            //$('#enumerateWrap').slideUp();
        };

        //启用样式模板编辑
        var tpltConfigWrap = $('#templtConfigWrap');
        var divCustom = $('#liTempltConfigWrap .divTool');
        $('#ckbpropertyTemplt')[0].onclick = function(){
            if($(this).is(':checked')){
                $('#inputTplStyle').prop('disabled',false);
                tpltConfigWrap.slideDown();
                divCustom.show();
            }else{
                $('#inputTplStyle').prop('disabled',true);
                tpltConfigWrap.slideUp();
                divCustom.hide();
                _this.store.model.templateId('');
                var tempOpt = _this.store.model.option();
                tempOpt.style = '';
                $('#inputTplStyle').val(_this.tplStyle);
                _this.store.model.option(tempOpt,'style');
            }
        };
        //应用模板
        $('#btnPropTempltApply')[0].onclick = function(){
            var tempOpt = _this.store.model.option();
            if($('#ckbpropertyTemplt').is(':checked')) {
                tempOpt.style = $('#inputTplStyle').val();
                // 如果有模板 id，则说明是不保留副本的模板应用
                if (templateId) {
                    _this.store.model.templateId(templateId);
                    // 这里需要将 templateId 置为空，以免和保留副本的模版应用混合到一起
                    templateId = null;
                } else {
                    _this.store.model.templateId('');
                }
            }else{
                tempOpt.style = null;
            }
            _this.store.model.option(tempOpt,'style');
        };
        //导入模板
        $('#btnPropTempltImport')[0].onclick = function(){
            MaterialModal.show(['widget.HtmlText'], function (data, isCopy) {
                // 根据判断，确定是否是保留副本的引用
                if (isCopy === false) {
                    templateId = data._id;
                }
                $('#inputTplStyle').val(data.content.style).prop('disabled',false);
                _this.$propertyList.find('#ckbpropertyTemplt')[0].checked = true;
                tpltConfigWrap.slideDown();
            });
        };

        //导出模板
        $('#btnPropTempltExport')[0].onclick = function(){
            var templateName = prompt(I18n.resource.mainPanel.exportModal.EXPORT_INFO);
            if(!templateName) return;
            var tplStyle = $('#inputTplStyle').val();
            var data = {
                _id: ObjectId(),
                name: templateName,
                creator: AppConfig.userId,
                time: new Date().format('yyyy-MM-dd HH:mm:ss'),
                "public": 1,
                group: '',
                type: 'widget.HtmlText',
                content: {
                    style:tplStyle
                }
            };
            WebAPI.post('/factory/material/save', data
            ).done(function(result){
                if(result && result._id){
                    data._id = result._id;
                }
            }).always(function(){

            });
        };
    };

    window.widgets = window.widgets || {};
    window.widgets.props = window.widgets.factory  || {};
    window.widgets.props.HtmlTextProp = HtmlTextProp;

} (window.widgets.factory.WidgetProp));

/** Html Text Prop Model */
(function (PropModel) {

    var class2type = Object.prototype.toString;

    function HtmlTextPropModel() {
        PropModel.apply(this, arguments);
    }

    HtmlTextPropModel.prototype = Object.create(PropModel.prototype);
    HtmlTextPropModel.prototype.constructor = HtmlTextPropModel;

    HtmlTextPropModel.prototype.option = function (params,attr) {
        if (class2type.call(params) === '[object Object]') {
            if (arguments.length == 1) {
            this._setProperty('option', params);
            } else if (arguments.length == 2) {//只设置option的指定属性:attr
                this._setProperty('option.' + arguments[1], params[arguments[1]]);
            }
            return true;
        }
        var opt = $.extend(true, {}, this.models[0].option());
        for(var i = 1, len = this.models.length, modelOpt; i < len; i ++){
            modelOpt = this.models[i].option();
            for(var i in modelOpt){
                if(opt[i] != modelOpt[i]){
                    if (i === 'trigger') {
                        opt[i] = {};
                    } else {
                    opt[i] = '';
                }
            }
        }
        }
        return opt;
    };
    ['idDs','idDs,option.text','option.class','templateId','option.precision','option.trigger'].forEach(function(type){
        HtmlTextPropModel.prototype[type] = function (params) {
            var v;
            if(params) {
                this._setProperty(type, params);
                return true;
            }
            if((v = this._isPropertyValueSame(type) ) !== false ) {
                return v;
            }
        };
    })
    //HtmlTextPropModel.prototype.idDs = function (params) {
    //    var v;
    //    if(params) {
    //        this._setProperty('idDs', params);
    //        return true;
    //    }
    //    if((v = this._isPropertyValueSame('idDs') ) !== false ) {
    //        return v;
    //    }
    //};
    //
    //HtmlTextPropModel.prototype.templateId = function (params) {
    //    var v;
    //    if (class2type.call(params) === '[object String]') {
    //        this._setProperty('templateId', params);
    //        return true;
    //    }
    //    if ( (v = this._isPropertyValueSame('templateId')) !== false ) {
    //        return v;
    //    }
    //};

    window.widgets = window.widgets || {};
    window.widgets.propModels = window.widgets.propModels || {};
    window.widgets.propModels.HtmlTextPropModel = HtmlTextPropModel;

} (window.widgets.propModels.PropModel));

(function (WidgetProp) {

    function BgProp(propCtn, model) {
        WidgetProp.apply(this, arguments);

    }

    BgProp.prototype = Object.create(WidgetProp.prototype);
    BgProp.prototype.constructor = BgProp;

    BgProp.prototype.tplPrivateProp = '\
                    <li>\
                        <ul class="list-inline">\
                            <li>\
                            <span style="vertical-align: middle;">Background Selection：</span>\
                            <div class="btn-group">\
                                <button type="button" class="btn btn-xs btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span></span><span class="caret"></span>\
                                </button>\
                                <ul class="dropdown-menu" id="ulBg">\
                                <li><a href="#" data-view="color">Pure</a></li>\
                                <li><a href="#" data-view="image">Image</a></li>\
                                <li><a href="#" data-view="html">Html</a></li>\
                                </ul>\
                                <input type="color" style="display: none;margin-left: 20px;height: 22px;" value="{colorVal}">\
                            </div>\
                            </li>\
                        </ul>\
                        <ul class="list-inline">\
                            <li class="txtShow" style="display:none;">\
                                <label class="">Content:</label>\
                                <span class="p_span" style="display:none;">{text}</span>\
                                <span class="btnEditTxt glyphicon glyphicon-edit"></span>\
                            </li>\
                            <li id="btnImg" style="display: none;">\
                                <div style="margin-top: 10px;">\
                                    <button type="button" class="btn btn-xs btn-default" id="btnBg">Choose Image</button>\
                                    <div class="btn-group" style="margin-left: 42px;">\
                                    <button type="button" style="width:65px;" class="btn btn-xs btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span>display</span><span class="caret"></span>\
                                    </button>\
                                    <ul class="dropdown-menu selectItem" id="ulStyle">\
                                    <li><a href="#" id="bgCenter" data-view="contain">Cotain</a></li>\
                                    <li><a href="#" id="bgStretch" data-view="stretch">Stretch</a></li>\
                                    </ul>\
                                    </div>\
                                </div>\
                            </li>\
                        </ul>\
                    </li>';
     /** override */
    BgProp.prototype.show = function () {
        var model = this.store.model.models[0], isShowDsName = 'none', isShowDropArea = 'inline-block', enumerateOpacity = ' disabled';
        var modelOptions = model.option();
        var type = modelOptions.type;
        var option = {
            text: model.option().text,
            colorVal:model.option().color,
            isShowDsName: isShowDsName,
            isShowDropArea: isShowDropArea,
            isAddOpacity: enumerateOpacity
        };
        this.$propertyList.empty().append(this.tplPrivateProp.formatEL(option));
        this.attachPubEvent(this.store.model);
        this.attachEvent();
        $('#ulBg').find('[data-view="'+type+'"]').trigger('click');
        if (type === 'image') {
            $('#ulStyle').find('[data-view="'+modelOptions.display+'"]').trigger('click')
        }
    };
    BgProp.prototype.attachEvent = function () {
        var model = this.store.model.models[0];
        var _this= this;
        $('#ulBg').off('click').on('click', 'a', function () {
            var $current = $(this);
            var $ul = $current.closest('ul');
            var $button = $ul.siblings('.btn').children();
            var $input = $ul.siblings('input');
            var $btnImg = $('#btnImg');
            var $liTxtshow = $btnImg.prev('.txtShow');
            var type = $current[0].dataset.view;
            $button.eq(0).html( $current.html() );

            if ( type === 'color' ) {
                $input.focus();
                $input.off().change(function() {
                    model['option.color'](this.value.trim());
                });
                model['option.type']('color');
                $input.show();
                $btnImg.hide();
                $liTxtshow.hide();
            } else if ( type === 'image' ) {
                model['option.type']('image');
                $input.hide();
                $btnImg.show();
                $liTxtshow.hide();
            }else if(type === 'html'){
                model['option.type']('html');
                $liTxtshow.show();
                $input.hide();
                $btnImg.hide();
            }
	    });

        $('#btnBg').click(function() {
            MaterialModal.show(['pic','img'],function(data) {
                model['option.type']('image');
                model['option.url'](data.url);
            });
        });

        $('#ulStyle').off('click').on('click', 'a', function () {
            var $current = $(this);
            var $button = $current.closest('ul').siblings('.btn').children();
            $button.eq(0).html( $current.html() );
            model['option.display'](this.dataset.view);
        });
        //修改按钮显示内容
        $('.btnEditTxt', this.prototype).off('click').click(function(){
            function saveContent(content){
                var opt = _this.store.model.option();
                opt.html = content;
                _this.store.model.option(opt);
            }
            EditorModal.show(_this.store.model.option().html, false, saveContent);
        });
    };

    window.widgets = window.widgets || {};
    window.widgets.props = window.widgets.factory  || {};
    window.widgets.props.BgProp = BgProp;
}(window.widgets.factory.WidgetProp));

(function (PropModel) {

    var class2type = Object.prototype.toString;

    function BgPropModel() {
        PropModel.apply(this, arguments);
    }

    BgPropModel.prototype = Object.create(PropModel.prototype);
    BgPropModel.prototype.constructor = BgPropModel;

    BgPropModel.prototype.option = function (params) {
        if(class2type.call(params) === '[object Object]') {
            this._setProperty('option', params);
            return true;
        }
        var opt = $.extend(true, {}, this.models[0].option());
        for(var i = 1, len = this.models.length, modelOpt; i < len; i ++){
            modelOpt = this.models[i].option();
            for(var i in modelOpt){
                if(opt[i] != modelOpt[i]){
                    opt[i] = '';
                }
            }
        }
        return opt;
    };

    BgPropModel.prototype.idDs = function (params) {
        var v;
        if(params) {
            this._setProperty('idDs', params);
            return true;
        }
        if((v = this._isPropertyValueSame('idDs') ) !== false ) {
            return v;
        }
    };

    window.widgets = window.widgets || {};
    window.widgets.propModels = window.widgets.propModels || {};
    window.widgets.propModels.BgPropModel = BgPropModel;

} (window.widgets.propModels.PropModel));
(function (WidgetProp) {
    var _this = undefined;
    function HtmlScreenContainerProp(propCtn, model) {
        WidgetProp.apply(this, arguments);
        _this = this;
    }

    HtmlScreenContainerProp.prototype = Object.create(WidgetProp.prototype);
    HtmlScreenContainerProp.prototype.constructor = HtmlScreenContainerProp;

    HtmlScreenContainerProp.prototype.tplPrivateProp = '\
        <li>\
            <ul class="list-inline">\
                <li class="txtShow">\
                    <label class="screen-page">Page:</label>\
                    <select class="" id="pageList">\
                      {selectHTML}\
                    </select>\
                </li>\
            </ul>\
        </li>\
        <li>\
            <ul class="list-inline" style="position:realtive">\
                <li class="divPorpertyBase" id="liTempltConfigWrap">\
                    <div class="propertyTemplt">\
                        <label for="ckbpropertyTemplt">Customstyle:</label>\
                        <input id="ckbpropertyTemplt" type="checkbox" />\
                    </div>\
                    <div class="divTool">\
                        <span id="btnPropTempltApply" class="glyphicon glyphicon-check"></span>\
                        <span id="btnPropTempltExport" class="glyphicon glyphicon-export"></span>\
                        <span id="btnPropTempltImport" class="glyphicon glyphicon-import"></span>\
                    </div>\
                </li>\
                <div id="templtConfigWrap">\
                    <ul class="list-unstyled">\
                        <li class="tplStyle">\
                            <label class="sr-only" for="inputNormalTemplt"></label>\
                            <textarea class="form-control gray-scrollbar" id="inputTplStyle" rows="3"></textarea>\
                        </li>\
                    </ul>\
                </div>\
            </ul>\
        </li>';

    HtmlScreenContainerProp.prototype.tplStyle = '' +
        '.Normal{\n' +
        '    /* Please input text normal style */\n' +
        '}\n' +
        '';

    /** override */
    HtmlScreenContainerProp.prototype.show = function () {
        this.$propertyList.empty();
        var model = this.store.model;
        var defaultOpt = {
            x: typeof model.x() === 'number' ? model.x() : '-',// model.x() || '-',
            y: typeof model.y() === 'number' ? model.y() : '-',//model.y() || '-',
            w: typeof model.w() === 'number' ? model.w() : '-',//model.w() || '-',
            h: typeof model.h() === 'number' ? model.h() : '-'//model.h() || '-'
        };
        var option = {
            selectHTML: (function(){
                var tempHTML = '', tpl = '<option value="{id}-{type}">{text}</option>';
                var pages = _this.panel.screen.screen.pagePanel.getPagesData();
                if(!pages || !pages.models || pages.models.length < 1) return;
                pages.forEach(function(page){
                    if(page.type() !== 'DropDownList' && page._id() != _this.panel.screen.page.id){
                        tempHTML += (tpl.formatEL({id: page._id(), text: page.text(), type: page.type()}));
                    }
                });
                return tempHTML;
            }())
        };
        this.$propertyList.html(this.tplProp.formatEL(defaultOpt));
        this.$propertyList.append(this.tplPrivateProp.formatEL(option));
        //国际化
        $('.screen-page').html(I18n.resource.mainPanel.attrPanel.attrRepeat.PAGE);
        $('.propertyTemplt').find('label').html(I18n.resource.mainPanel.attrPanel.attrRepeat.CUSTOMSTYLE);
        $('#btnPropTempltApply').attr('title', I18n.resource.mainPanel.attrPanel.attrRepeat.SAVE_STYLE_TITLE);
        $('#btnPropTempltExport').attr('title', I18n.resource.mainPanel.attrPanel.attrRepeat.EXPORT_STYLE_TITLE);
        $('#btnPropTempltImport').attr('title', I18n.resource.mainPanel.attrPanel.attrRepeat.IMPORT_STYLE_TITLE);


        //设置默认选中项
        if(model.option().pageId){
            $('#pageList').val([model.option().pageId, model.option().pageType].join('-'));
        }else{
            $('#pageList').prepend('<option id="unchoose" selected="selected" value="">Choose Screen</option>');
        }

        $('#unchoose').html(I18n.resource.mainPanel.attrPanel.attrRepeat.SELECT_SCREEN);

        if (model.option().style) {
            this.$propertyList.find('#inputTplStyle').val(model.option().style).prop('disabled', false);
            this.$propertyList.find('#ckbpropertyTemplt')[0].checked = true;
            $('#templtConfigWrap').show();
        } else if (model.models.length > 1) {
            if (!model.option().style) {
                this.$propertyList.find('#inputTplStyle').val(this.tplStyle).prop('disabled', false);
                this.$propertyList.find('#ckbpropertyTemplt')[0].checked = true;
                $('#templtConfigWrap').show();
            }
        } else {
            this.$propertyList.find('#inputTplStyle').val(this.tplStyle).prop('disabled', true);
            $('#liTempltConfigWrap .divTool').hide();
        }

        this.attachPubEvent(this.store.model);
        this.attachEvent();
    };

    /** override */
    HtmlScreenContainerProp.prototype.close = function () {

    };

    /** override */
    HtmlScreenContainerProp.prototype.update = function () {

    };

    HtmlScreenContainerProp.prototype.attachEvent = function () {
        var _this = this;
        var templateId = null;
        //修改文本显示内容
        $('#pageList', this.$propertyList).off('change').change(function() {
            var opt = _this.store.model.option();
            var arr;

            if (!this.value) {
                opt.pageId = opt.pageType = '';
            } else {
                arr = this.value.split('-');
                opt.pageId = arr[0];
                opt.pageType = arr[1];
            }
            _this.store.model.update({
                'option.pageId': opt.pageId,
                'option.pageType': opt.pageType
            });
            //_this.store.model['option.pageId'](opt.pageId);
            //_this.store.model.option().pageType = opt.pageType;
            //_this.store.model.option(opt);
        });

        //启用样式模板编辑
        var tpltConfigWrap = $('#templtConfigWrap');
        var divCustom = $('#liTempltConfigWrap .divTool');
        $('#ckbpropertyTemplt')[0].onclick = function () {
            if ($(this).is(':checked')) {
                $('#inputTplStyle').prop('disabled', false);
                tpltConfigWrap.slideDown();
                divCustom.show();
            } else {
                $('#inputTplStyle').prop('disabled', true);
                tpltConfigWrap.slideUp();
                divCustom.hide();
            }
        };

        //应用模板
        $('#btnPropTempltApply')[0].onclick = function () {
            var tempOpt = _this.store.model.option();
            if ($('#ckbpropertyTemplt').is(':checked')) {
                tempOpt.style = $('#inputTplStyle').val();
                // 如果有模板 id，则说明是不保留副本的模板应用
                if (templateId) {
                    _this.store.model.templateId(templateId);
                    // 这里需要将 templateId 置为空，以免和保留副本的模版应用混合到一起
                    templateId = null;
                } else {
                    _this.store.model.templateId('');
                }
            } else {
                tempOpt.style = null;
            }
            _this.store.model.option(tempOpt, 'style');
        };
        //取消样式
        $('#ckbpropertyTemplt').off('click').click(function () {
            if (!$(this).is(':checked')) {
                _this.store.model.templateId('');
                var tempOpt = _this.store.model.option();
                tempOpt.style = '';
                $('#inputTplStyle').val(_this.tplStyle);
                _this.store.model.option(tempOpt, 'style');
            }
        });
        //导入模板
        $('#btnPropTempltImport')[0].onclick = function () {
            MaterialModal.show(['widget.HtmlScreenContainer'], function (data, isCopy) {
                // 根据判断，确定是否是保留副本的引用
                if (isCopy === false) {
                    templateId = data._id;
                }
                $('#inputTplStyle').val(data.content.style).prop('disabled', false);
                _this.$propertyList.find('#ckbpropertyTemplt')[0].checked = true;
                tpltConfigWrap.slideDown();
            });
        };

        //导出模板
        $('#btnPropTempltExport')[0].onclick = function () {
            var templateName = prompt(I18n.resource.mainPanel.exportModal.EXPORT_INFO);
            if (!templateName) return;
            var tplStyle = $('#inputTplStyle').val();
            var data = {
                _id: ObjectId(),
                name: templateName,
                creator: AppConfig.userId,
                time: new Date().format('yyyy-MM-dd HH:mm:ss'),
                "public": 1,
                group: '',
                type: 'widget.HtmlScreenContainer',
                content: {
                    style: tplStyle
                }
            };
            WebAPI.post('/factory/material/save', data).done(function (result) {
                if (result && result._id) {
                    data._id = result._id;
                }
            }).always(function () {

            });
        };
    };

    window.widgets = window.widgets || {};
    window.widgets.props = window.widgets.factory  || {};
    window.widgets.props.HtmlScreenContainerProp = HtmlScreenContainerProp;

} (window.widgets.factory.WidgetProp));

/** Html Container Prop Model */
(function (PropModel) {

    var class2type = Object.prototype.toString;

    function HtmlScreenContainerPropModel() {
        PropModel.apply(this, arguments);
    }

    HtmlScreenContainerPropModel.prototype = Object.create(PropModel.prototype);
    HtmlScreenContainerPropModel.prototype.constructor = HtmlScreenContainerPropModel;

    HtmlScreenContainerPropModel.prototype.option = function (params, attr) {
        if (class2type.call(params) === '[object Object]') {
            if (arguments.length == 1) {
                this._setProperty('option', params);
            } else if (arguments.length == 2) {//只设置option的指定属性:attr
                this._setProperty('option.' + arguments[1], params[arguments[1]]);
            }
            return true;
        }
        var opt = $.extend(true, {}, this.models[0].option());
        for(var i = 1, len = this.models.length, modelOpt; i < len; i ++){
            modelOpt = this.models[i].option();
            for(var i in modelOpt){
                if(opt[i] != modelOpt[i]){
                    opt[i] = '';
                }
            }
        }
        return opt;
    };

    ['option.pageId,option.pageType','templateId',].forEach(function(type){
        HtmlScreenContainerPropModel.prototype[type] = function (params) {
             var v;
            if (class2type.call(params) === '[object String]') {
                this._setProperty(type, params);
                return true;
            }
            if ((v = this._isPropertyValueSame(type)) !== false) {
                return v;
            }
        };
    })
    //HtmlScreenContainerPropModel.prototype.templateId = function (params) {
    //    var v;
    //    if (class2type.call(params) === '[object String]') {
    //        this._setProperty('templateId', params);
    //        return true;
    //    }
    //    if ((v = this._isPropertyValueSame('templateId')) !== false) {
    //        return v;
    //    }
    //};
    window.widgets = window.widgets || {};
    window.widgets.propModels = window.widgets.propModels || {};
    window.widgets.propModels.HtmlScreenContainerPropModel = HtmlScreenContainerPropModel;

} (window.widgets.propModels.PropModel));
(function (window, $) {
    var _this;

    //////////////
    // REGISTER //
    //////////////
    function OpType(id, name) {
        this.id = id;
        this.name = name;
    }
    
    var opTypes = {
        UNDEFINED: new OpType(0, ''),
        // 创建图层
        CREATE_LAYER: new OpType(100, ''),
        // 删除图层
        DELETE_LAYER: new OpType(101, ''),
        // 修改图层名称
        CHANGE_LAYER_NAME: new OpType(102, ''),
        // 显示图层
        SHOW_LAYER: new OpType(103, ''),
        // 隐藏图层
        HIDE_LAYER: new OpType(104, ''),
        // 锁定图层
        LOCK_LAYER: new OpType(105, ''),
        // 解锁图层
        UNLOCK_LAYER: new OpType(106, ''),
        //导出图层
        EXPORT_LAYER: new OpType(107, ''),
        //导入图层
        IMPORT_LAYER: new OpType(108, ''),
        // 创建控件
        CREATE_WIDGET: new OpType(200, ''),
        // 删除控件
        DELETE_WIDGET: new OpType(201, ''),
        // 移动控件位置
        MOVE_WIDGET: new OpType(300, ''),
        // 调整控件大小
        RESIZE_WIDGET: new OpType(301, ''),
        //移动控件位置或者调整控件大小
        MOVE_WIDGET_OR_RESIZE_WIDGET: new OpType('302', ''),
        // 创建按钮控件
        CREATE_BUTTON_WIDGET: new OpType(400, ''),
        // 删除按钮控件
        DELETE_BUTTON_WIDGET: new OpType(401, ''),
        // 改变按钮控件文字
        CHANGE_BUTTON_WIDGET_TEXT: new OpType(402, ''),
        // 改变按钮控件样式
        CHANGE_BUTTON_WIDGET_STYLE: new OpType(403, ''),
        //给按钮控件添加数据源
        ADD_BUTTON_WIDGET_IDDS: new OpType(404, ''),
        //改变按钮控件枚举
        CHANGE_BUTTON_WIDGET_ENUMERATE: new OpType(405, ''),
        //改变按钮控件数据源
        CHANGE_BUTTON_WIDGET_IDDS: new OpType(406, ''),
        //改变按钮控件自定义样式
        CHANGE_BUTTON_WIDGET_CUSTOMSTYLE: new OpType(407, ''),
        // 创建文本控件
        CREATE_TEXT_WIDGET: new OpType(500, ''),
        // 删除文本控件
        DELETE_TEXT_WIDGET: new OpType(501, ''),
        // 改变文本控件文字
        CHANGE_TEXT_WIDGET_TEXT: new OpType(502, ''),
        // 改变文本控件样式
        CHANGE_TEXT_WIDGET_STYLE: new OpType(503, ''),
        //给文本控件添加数据源
        ADD_TEXT_WIDGET_IDDS: new OpType(504, ''),
        //改变文本控件枚举
        CHANGE_TEXT_WIDGET_ENUMERATE: new OpType(505, ''),
        //改变文本控件数据源
        CHANGE_TEXT_WIDGET_IDDS: new OpType(506, ''),
        //改变文本控件自定义样式
        CHANGE_TEXT_WIDGET_CUSTOMSTYLE: new OpType(507, ''),
        //改变文本控件的数字精确度
        CHANGE_TEXT_WIDGET_PRECISION: new OpType(508, ''),
        // 创建Html容器控件
        CREATE_HTMLCONTAINER_WIDGET: new OpType(600, ''),
        // 删除Html容器控件
        DELETE_HTMLCONTAINER_WIDGET: new OpType(601, ''),
        //改变Html容器控件内容
        CHANGE_HTMLCONTAINER_WIDGET_CONTENT: new OpType(602, ''),
        //导入Html容器控件
        IMPORT_HTMLCONTAINER_WIDGET: new OpType(604, ''),
        // 创建Screen容器控件
        CREATE_HTMLSCREENCONTAINER_WIDGET: new OpType(700, ''),
        // 删除Screen容器控件
        DELETE_HTMLSCREENCONTAINER_WIDGET: new OpType(701, ''),
        //改变Screen容器控件页面内容
        CHANGE_HTMLSCREENCONTAINER_WIDGET_CONTENT: new OpType(702, ''),
        //改变Screen容器控件自定义样式
        CHANGE_HTMLSCREENCONTAINER_WIDGET_CUSTOMSTYLE: new OpType(703, ''),
        // 创建管道控件
        CREATE_PIPE_WIDGET: new OpType(800, ''),
        // 删除管道控件
        DELETE_PIPE_WIDGET: new OpType(801, ''),
        //改变管道控件长度
        CHANGE_PIPE_WIDGET_WIDTH: new OpType(802, ''),
        //改变管道控件颜色
        CHANGE_PIPE_WIDGET_COLOR: new OpType(803, ''),
        //给管道控件添加数据源
        ADD_PIPE_WIDGET_IDDS: new OpType(804, ''),
        //改变管道控件枚举
        CHANGE_PIPE_WIDGET_ENUMERATE: new OpType(805, ''),
        //改变管道控件数据源
        CHANGE_PIPE_WIDGET_IDDS: new OpType(806, ''),
        // 创建图片控件
        CREATE_IMAGE_WIDGET: new OpType(900, ''),
        // 删除图片控件
        DELETE_IMAGE_WIDGET: new OpType(901, ''),
        //改变图片控件内容
        CHANGE_IMAGE_WIDGET_CONTENT: new OpType(902, ''),
        //改变图片控件角度
        CHANGE_IMAGE_WIDGET_ANGLE: new OpType(903, ''),
        //给图片控件添加数据源
        ADD_IMAGE_WIDGET_IDDS: new OpType(904, ''),
        //改变图片控件枚举
        CHANGE_IMAGE_WIDGET_ENUMERATE: new OpType(905, ''),
        //改变图片控件数据源
        CHANGE_IMAGE_WIDGET_IDDS: new OpType(906, '')
    };
    var OP_TYPE = {};

    // 操作类型
    if (!OP_TYPE.__props) OP_TYPE.__props = opTypes;
    Object.keys(opTypes).forEach(function (propName) {
        Object.defineProperty(OP_TYPE, propName, {
            get: function () {
                // I18N 翻译逻辑
                var op = this.__props[propName];
                op.name = I18n.resource.mainPanel.historyPanel[propName];
                return op;
            }
        });
    });
    

    ////////////////////////
    // HISTORY CONTROLLER //
    ////////////////////////
    function HistoryController(page) {
        _this = this;
        this.page = page;
        this.store = {};
        this.store.records = new window.ModelSet();
        this.store.snapshotModelSet = page.store.snapshotModelSet;

        this.state = new Model({
            index: -1,
            snapshotId: -1
        });

        this.frozen = false;
    }

    HistoryController.prototype.init = function (page) {
        this.bindOb();
        // 绑定 ctrl+z 和 ctrl+y 事件
        window.addEventListener('keyup', this.onKeyUpActionPerformed, false);
    };

    HistoryController.prototype.bindOb = function () {
        this.bindOpOb();
        this.state.addEventListener('update.index', this.to, this);
    };

    HistoryController.prototype.bindOpOb = function () {
        var layerModelSet = this.page.getLayersData();
        var widgetModelSet = this.page.getWidgetsData();

        // layer 增和删
        layerModelSet.addEventListener('insert', function (e, data) {
            data.models.forEach(function (model) {
                this.bindLayerOpOb(model);
            }, this);
            this.addRecord('layer', OP_TYPE.CREATE_LAYER);
        }, this);
        layerModelSet.addEventListener('remove', this._getOpHandler('layer', OP_TYPE.DELETE_LAYER), this);
        // layer models
        layerModelSet.forEach(function (model) {
            this.bindLayerOpOb(model);
        }, this);

        // widget 增和删
        widgetModelSet.addEventListener('insert', function (e, data) {
            data.models.forEach(function (model) {
                this.bindWidgetOpOb(model);
            }, this);
            this.addRecord('widget', OP_TYPE.CREATE_WIDGET)   
        }, this);
        widgetModelSet.addEventListener('remove', this._getOpHandler('widget', OP_TYPE.DELETE_WIDGET), this);
        // widget models
        widgetModelSet.forEach(function (model) {
            this.bindWidgetOpOb(model);
        }, this);
    };

    // 绑定 layer 的行为记录事件
    HistoryController.prototype.bindLayerOpOb = function (model) {
        // 只对 canvas 图层做处理
        if (model.type() !== 'canvas') return;

        var opMap = {
            'update.name': OP_TYPE.CHANGE_LAYER_NAME,
            'update.isLock': function () {
                if(model.isLock() === 1) {
                    return OP_TYPE.LOCK_LAYER;
                } else {
                    return OP_TYPE.UNLOCK_LAYER;
                }
            },
            'update.isHide': function () {
                if (model.isHide() === 1) {
                    return OP_TYPE.HIDE_LAYER;
                } else {
                    return OP_TYPE.SHOW_LAYER;
                }
            }
        };

        // 格式化一下，将空格的多个事件分开
        this._formatOpMap(opMap);
        model.addEventListener('update', function (e, type) {
            var op = opMap[type];

            if (!op) {
                this.addRecord('layer', OP_TYPE.UNDEFINED);
            } else {
                this.addRecord('layer', $.type(op) === 'function' ? op() : op);
            }
        }, this);
    };

    // 绑定 widget 的行为记录事件
    HistoryController.prototype.bindWidgetOpOb = function (model) {
        var type = model.type();
        var opMap = {
            'update.x update.y update.x,update.y': OP_TYPE.MOVE_WIDGET,
            'update.w update.h update.w,update.h': OP_TYPE.RESIZE_WIDGET,
            'update.x,update.y,update.w,update.h': OP_TYPE.MOVE_WIDGET_OR_RESIZE_WIDGET,
            'update.option': OP_TYPE.UNDEFINED
        };

        switch(type) {
            case 'HtmlButton':
                opMap['update.option.text'] = OP_TYPE.CHANGE_BUTTON_WIDGET_TEXT;
                opMap['update.option.class'] = OP_TYPE.CHANGE_BUTTON_WIDGET_STYLE;
                opMap['update.idDs,update.option.text'] = OP_TYPE.ADD_BUTTON_WIDGET_IDDS;
                opMap['update.option.trigger'] = OP_TYPE.CHANGE_BUTTON_WIDGET_ENUMERATE;
                opMap['update.idDs,update.option.trigger,update.option.text'] = OP_TYPE.CHANGE_BUTTON_WIDGET_IDDS;
                opMap['update.option.style'] = OP_TYPE.CHANGE_BUTTON_WIDGET_CUSTOMSTYLE;
                break;
            case 'HtmlText':
                opMap['update.option.text'] = OP_TYPE.CHANGE_TEXT_WIDGET_TEXT;
                opMap['update.option.class'] = OP_TYPE.CHANGE_TEXT_WIDGET_STYLE;
                opMap['update.idDs,update.option.text'] = OP_TYPE.ADD_TEXT_WIDGET_IDDS;
                opMap['update.option.trigger'] = OP_TYPE.CHANGE_TEXT_WIDGET_ENUMERATE;
                opMap['update.idDs,update.option.trigger,update.option.text'] = OP_TYPE.CHANGE_TEXT_WIDGET_IDDS;
                opMap['update.option.style'] = OP_TYPE.CHANGE_TEXT_WIDGET_CUSTOMSTYLE;
                opMap['update.option.precision'] = OP_TYPE.CHANGE_TEXT_WIDGET_PRECISION;
                break;
            case 'HtmlContainer':
                opMap['update.option'] = OP_TYPE.CHANGE_HTMLCONTAINER_WIDGET_CONTENT;
                opMap['update.option,update.templateId'] = OP_TYPE.IMPORT_HTMLCONTAINER_WIDGET;
                break;
            case 'HtmlScreenContainer':
                opMap['update.option.style'] = OP_TYPE.CHANGE_HTMLSCREENCONTAINER_WIDGET_CUSTOMSTYLE;
                opMap['update.option.pageId,update.option.pageType'] = OP_TYPE.CHANGE_HTMLSCREENCONTAINER_WIDGET_CONTENT;
                break;
            case 'CanvasPipe':
                opMap['update.option.points'] = OP_TYPE.MOVE_WIDGET_OR_RESIZE_WIDGET;
                opMap['update.option.width'] = OP_TYPE.CHANGE_PIPE_WIDGET_WIDTH;
                opMap['update.option.color'] = OP_TYPE.CHANGE_PIPE_WIDGET_COLOR;
                opMap['update.idDs'] = OP_TYPE.ADD_PIPE_WIDGET_IDDS;
                opMap['update.option.trigger'] = OP_TYPE.CHANGE_PIPE_WIDGET_ENUMERATE;
                opMap['update.idDs,update.option.trigger'] = OP_TYPE.CHANGE_PIPE_WIDGET_IDDS;
                break;
            case 'CanvasImage':
                opMap['update.w,update.h,update.option.trigger.default'] = OP_TYPE.CHANGE_IMAGE_WIDGET_CONTENT;
                opMap['update.option.rotate'] = OP_TYPE.CHANGE_IMAGE_WIDGET_ANGLE;
                opMap['update.idDs'] = OP_TYPE.ADD_IMAGE_WIDGET_IDDS;
                opMap['update.option.trigger'] = OP_TYPE.CHANGE_IMAGE_WIDGET_ENUMERATE;
                opMap['update.idDs,update.option.trigger'] = OP_TYPE.CHANGE_IMAGE_WIDGET_IDDS;
                break;
            default:
                break;
        }

        // 格式化一下，将空格的多个事件分开
        this._formatOpMap(opMap);
        model.addEventListener('update', function (e, type) {
            var op = opMap[type];

            if (!op) {
                this.addRecord('widget', OP_TYPE.UNDEFINED);
            } else {
                this.addRecord('widget', $.type(op) === 'function' ? op() : op);
            }
        }, this);
    };

    HistoryController.prototype._formatOpMap = function (opMap) {
        Object.keys(opMap).forEach(function (row) {
            var arr, v;
            if(row.indexOf(' ') > 0) {
                arr = row.split(' ');
                v = opMap[row];
                arr.forEach(function (t) {
                    opMap[t] = v;
                });
                delete opMap[row];
            }
        });
    };

    HistoryController.prototype._getOpHandler = function (type, op) {
        return function () {
            this.addRecord(type, op);
        }.bind(this);
    };

    HistoryController.prototype.set = function (index, actionName, data) {
        var len = this.store.records.length();

        if( index < len ){
            //在某一条非最后历史记录的基础上发生了改动,该历史记录后面的数据都删除
            for(var i = len - 1; i >= index; i--){
                this.store.records.remove(this.store.records.models[i]);
            }
        }

        this.store.records.append(new Model({
            id: new Date().valueOf(),
            name: actionName,
            data: data
        }));

        if (this.store.records.length() > 20) {
            this.store.records.remove(this.store.records.models[0]);
        }
    };

    HistoryController.prototype.get = function (index) {
        var arr = [];
        var set = this.store.records.serialize();
        var len = set.length;

        if (index < 0 || index >= len) {
            // 超出边界，直接返回空数组
            return null;
        }

        return set[index];
    };

    HistoryController.prototype.to = function () {
        var index = this.state.index();
        var snapshotId = this.state.snapshotId();
        var snapshot = null;

        // 如果为 -1 的话，加载快照
        if (index === -1) {
            // 为 -1 的话，默认加载第一个
            if (snapshotId === -1) {
                snapshot = this.store.snapshotModelSet.get(0);
            } else {
                snapshot = this.store.snapshotModelSet.findByProperty('_id', snapshotId);
            }
            this.update(snapshot.content())
            return;
        }

        this.update(this.get(index).data);
    };

    HistoryController.prototype.update = function (data) {
        this.frozen = true;
        this.page.updateModelSet($.deepClone(data));
        this.frozen = false;
    };

    HistoryController.prototype.onKeyUpActionPerformed = function (e) {
        var which = e.which;
        var index, len;
        // 只处理 ctrl+z 和 ctrl+y 事件
        if (!e.ctrlKey) return;

        index = _this.state.index();
        len = _this.store.records.length();
        // ctrl+y
        if (which === 89) {
            index = Math.min(Math.max(-1, index+1), len-1);
            _this.state.index(index);
        }
        // ctrl+z
        else if (which === 90) {
            index = Math.min(Math.max(-1, index-1), len-1);
            _this.state.index(index);
        }
    };

    HistoryController.prototype.addRecord = function (type, op) {
        var state, data;

        // 冻结期间不添加任何记录
        if (this.frozen) return;

        state = this.state.serialize()

        data = $.deepClone({
            layers: this.page.getLayersData().serialize(),
            widgets: this.page.getWidgetsData().serialize()
        });

        this.set(state.index+1, op.name, data);

        // 只更改，不触发事件
        state.index = this.store.records.length() - 1;
    };


    HistoryController.prototype.close = function () {
        this.frozen = true;
        window.removeEventListener('onkeyup', this.onKeyUpActionPerformed);
    };

    window.HistoryController = HistoryController;
    
} (window, jQuery));

(function () {
    function AddProModal() {
        this.screen = null;
    }
    AddProModal.prototype.show = function (screen) {
        var _this = this;
        this.$addProj = undefined;
        this.showModal();
        this.screen = screen;
    };
    AddProModal.prototype.showModal = function () {
        var _this = this;
        WebAPI.get('/static/app/WebFactory/scripts/modals/addProject/addProject.html').done(function (resultHtml) {
            if (resultHtml) {
                $('#modalframe').append(resultHtml);
                _this.addEvent();
            }
        });
    };
    AddProModal.prototype.addEvent = function () {
        var _this = this;
        _this.$addProj = $('#addProj');
        _this.$addProj.modal();
        I18n.fillArea(_this.$addProj.fadeIn());
        var postData = {}, itemList = {};
        var proNameVal;
        $('#addNewPro').off('click').click(function () {
            _this.$addProj.find('.wrongAlert').html('');
            proNameVal = _this.$addProj.find('.proName').val();
            if (proNameVal === '') {
                _this.$addProj.find('.wrongAlert').html(I18n.resource.admin.welcom.newProj.LOG_ADD);//'项目名称或项目中文名称或项目英文名称不能为空！'
            } else {
                postData = {
                    userId: AppConfig.userId,
                    proName: proNameVal,
                    proZhName: proNameVal,
                    proEnName: proNameVal
                };
                WebAPI.post('/factory/addProject/save', postData).done(function (result) {
                    if (result.status === 'OK') {
                        var $proBox;
                        itemList = {
                            id: result.data._id,
                            name_cn: proNameVal
                        };
                        $proBox = _this.screen.createProItem(itemList, AppConfig.userId);
                        _this.screen.$projectList.append($proBox);
                        _this.$addProj.remove();
                        //新建项目默认进入项目
                        $proBox.children('.proText').click();
                    } else {
                        _this.$addProj.find('.wrongAlert').html(result.msg);
                    } 
                });
            }
        });
        $('#addClose').off('click').click(function () {
            _this.$addProj.remove();
        })
        _this.$addProj.find('.close').off('click').click(function () {
            _this.$addProj.remove();
        });
    };
    AddProModal.prototype.close = function () {
        this.$addProj = null;
    };
    window.AddProModal = new AddProModal();
}());
(function () {
    function RemoveProModal() {
        this.screen = undefined;
        this.projectId = undefined;
    }
    RemoveProModal.prototype.show = function (screen, projectId) {
        var _this = this;
        this.showModal();
        this.screen = screen;
        this.projectId = projectId;
    }
    RemoveProModal.prototype.showModal = function () {
        var _this = this;
        WebAPI.get('/static/app/WebFactory/scripts/modals/removeProject/removeProject.html').done(function (resultHtml) {
            if (resultHtml) {
                $('#mainframe').parent().append(resultHtml);
                //绑定事件
                _this.eventAll();
            }
        });
    }
    RemoveProModal.prototype.eventAll = function () {
        var _this = this;
        var $removeProModal = $('#removeProModal');
        $removeProModal.modal();
        I18n.fillArea($removeProModal.fadeIn());
        $removeProModal.find('.btn-primary').off('click').click(function () {
            $removeProModal.remove();
        });
        $removeProModal.find('.directRemove').off('click').click(function () {
            var $this = $(this);
            $removeProModal.find('.removeProFst').hide();
            $removeProModal.find('.removeProSnd').show();
            //$removeProModal.find('.modal-title').html('发布到');
            $this.html(I18n.resource.admin.welcom.deleteProj.OK);
            $this.off('click').click(function () {
                _this.screen.removeProItem(_this.projectId);
                //var password = $('#removePass').val();
                //var relName = $('#removeName').val();
                //if (password === '' || relName == '') {
                //    $removeProModal.find('.wrongPromt').html('请填写密码或项目名称');
                //} else {
                //    $removeProModal.find('.wrongPromt').html('');
                //    var postData = {
                //        userId: AppConfig.userId,
                //        projId: $dom.parent().attr('projectid'),
                //        proPass: password,
                //        proNameEnglish: relName
                //    };
                //    WebAPI.post('/factory/removeProject/remove', postData).done(function (result) {
                //        //console.log(result);
                //        if (result.status === 'OK') {
                //            $dom.parent('.proHover').remove();
                //            $removeProModal.remove();
                //            var arr = JSON.parse(localStorage.getItem('fac_project_topArray_' +AppConfig.userId));
                //            if (arr.length !== 0) {
                //                for (var i = 0; i < arr.length; i++) {
                //                    if ($dom.parent().attr('projectid') == arr[i].id) {
                //                        arr.splice(i, 1);
                //                        console.log(arr);
                //                        localStorage.setItem('fac_project_topArray_' + AppConfig.userId, JSON.stringify([]));
                //                        localStorage.setItem('fac_project_topArray_' + AppConfig.userId, JSON.stringify(arr));
                //                    }
                //                }
                //            }
                //        }
                //    });
                //}
            });
        });
        $removeProModal.find('.close').off('click').click(function () {
            $removeProModal.remove();
        });
    }
    window.RemoveProModal = new RemoveProModal();
}());
(function () {

    function ImportProjectModal() {
        this.$modal = null;
        this.callback = null;
    }

    +function () {
        this.show = function (callback) {
            var _this = this;
            var $wrap = $(document.body);

            this.callback = callback;
            if (this.$modal) {
                $wrap.append(this.$modal);
                this.$modal.modal('show');
                return;
            }
            // 获取组件的 HTML
            WebAPI.get('/static/app/WebFactory/scripts/modals/importProjectModal/importProjectModal.html')
            .done(function (html) {
                _this.$modal = $(html);
                $wrap.append(_this.$modal);
                _this.init();
                _this.$modal.modal('show');
            });

        };

        this.init = function () {
            // 国际化代码
            I18n.fillArea(this.$modal);

            // 初始化项目列表
            this.initProjectList();
            this.attachEvents();

            $('#selProjectList', this.$modal).trigger('change');
        };

        this.initProjectList = function () {
            var arrHtml = AppConfig.projectList.map(function (project) {
                return '<option value="'+project.id+'">'+project['name_'+(I18n.type === 'zh' ? 'cn' : I18n.type)]+'</option>';
            });
            $('#selProjectList', this.$modal).empty().html(arrHtml.join(''));
        };

        // 事件绑定
        this.attachEvents = function () {
            var _this = this;

            this.$modal.off();

            this.$modal.on('hidden.bs.modal', function () {
                _this.reset();
                _this.$modal.detach();
            });

            $('#btnSubmit', this.$modal).off().on('click', function () {
                var data = _this.getFormData();
                var $this = $(this);

                if (!data.iptNewProjectName.trim()) {
                    alert('新的项目名称不能为空！');
                    return;
                }

                $this.prop('disabled', true);

                WebAPI.post('/factory/importOnlineProject', {
                    projectId: data['selectedProject'],
                    newProjName: data['iptNewProjectName'],
                    userId: AppConfig.userId
                }).done(function (rs) {
                    if (rs.status === 'OK') {
                        _this.$modal.modal('hide');
                        typeof _this.callback === 'function' && _this.callback(rs.data);
                    } else {
                        alert(rs.msg);
                    }
                }).always(function () {
                    $this.prop('disabled', false);
                });
            });

            $('#selProjectList', this.$modal).off().on('change', function () {
                var title = $(this).children('[value="'+this.value+'"]')[0].innerHTML;
                $('#iptNewProjectName').val(title || '');
            });
        };

        this.getFormData = function () {
            var data = {};
            
            $('#formProject', this.$modal).serializeArray().forEach(function (row) {
                data[row.name] = row.value;
            });

            return data;
        };

        // 重置组件状态
        this.reset = function () {
            var $selProjectList = $('#selProjectList', this.$modal);

            $selProjectList.val($('option:first', $selProjectList).val());
        };

        this.close = function () {
            this.$modal.remove();
        };

    }.call(ImportProjectModal.prototype);

    window.ImportProjectModal = new ImportProjectModal();

} ());
var PageEditModal = (function () {
    var _this = undefined;

    function PageEditModal() {
        _this = this;
        _this.src = undefined;
        _this.callback = undefined;
    }
    
    PageEditModal.prototype.show = function(src, callback) {
        _this.src = src;
        _this.callback = callback;
        var $modalPageEdit = $('#pageEditModal');
        if (!$modalPageEdit || 0 == $modalPageEdit.length) {
            WebAPI.get('/static/app/WebFactory/scripts/modals/pageEditModal/pageEditModal.html').done(function (resultHTML) {
                _this.$contain = $(resultHTML);
                _this.init();
                _this.$contain.modal('show');
            }).always(function(e) {
            });
        }
        else {
            $modalPageEdit.modal('show');
            _this.init();
        }
    };

    PageEditModal.prototype.init = function() {
        _this.$btnOk = _this.$contain.find('#btnOk');
        _this.$inputPageName = _this.$contain.find('#inputPageName');
        _this.$selectPageType = _this.$contain.find('#selectPageType');
        _this.$divPageSize = _this.$contain.find('#divPageSize');
        _this.$inputPageWidth = _this.$contain.find('#inputPageWidth');
        _this.$inputPageHeight = _this.$contain.find('#inputPageHeight');
        _this.$divPageDisplay = _this.$contain.find('#divPageDisplay');
        _this.$selectPageDisplay = _this.$contain.find('#selectPageDisplay');
        _this.$selectPageDisplayOption = _this.$contain.find('#selectPageDisplay option');

        _this.$inputPageName.val(_this.src.name.split(' - ')[0]);
        _this.$selectPageType.val(_this.src.type);
        _this.$inputPageWidth.val(_this.src.width);
        _this.$inputPageHeight.val(_this.src.height);
        _this.$selectPageDisplayOption[_this.src.display].setAttribute('selected',true);


        _this.attachEvent();
        if(_this.src.disabled === 1){
            _this.$selectPageType.prop('disabled',true);
        }else {
            _this.$selectPageType.prop('disabled',false);
        }
    };

    PageEditModal.prototype.close = function() {
        _this.$contain.remove();
    };

    PageEditModal.prototype.attachEvent = function() {
        _this.$selectPageType.change(function(e) {
            if ('PageScreen' == this.value) {
                _this.$divPageSize.show();
                _this.$divPageDisplay.show();
            }
            else {
                _this.$divPageSize.hide();
                _this.$divPageDisplay.hide();
            }
        });

        _this.$btnOk.off().click(function(e) {
            var pageName = _this.$inputPageName.val();
            var pageType = _this.$selectPageType.val();
            var pageWidth = parseInt(_this.$inputPageWidth.val(), 10);
            var pageHeight = parseInt(_this.$inputPageHeight.val(), 10);
            var pageDisplay = parseInt(_this.$selectPageDisplay.val());
            var objPageCfg = {name:pageName, type:pageType, width:pageWidth, height:pageHeight, display:pageDisplay};
            _this.callback(objPageCfg);
            _this.$contain.modal('hide');
        });
    };

    PageEditModal = new PageEditModal();
    return PageEditModal;
})();
﻿var pyFormat = (function () {

    var pyFormat = function () {
        this._configMap = {
            "KEY_PY_STORY": "BEOP.WF.PY",
            "version": "1451029779889",
            "JSONUrl": '/static/scripts/workflow2.0/wf.pinyin.json'
        };
    };

    //范例
    /*
     var PYFormat = new pyFormat();
     PYFormat.getPYLocalStorage().done(function (result) {
     PYFormat.getPYMap(result, /!*想要转换的值*!/)
     });
     */
    //getPYLocalStorage 类似于 window.localStorage.getItem
    pyFormat.prototype = {
        init: function () {

        },
        //获取到PY
        getPYLocalStorage: function () {
            var _this = this, $Dfd = $.Deferred();
            var setLocalStorage = function (result) {
                window.localStorage.setItem(_this._configMap.KEY_PY_STORY, JSON.stringify(result));
            };
            if (!this._isPYStored()) {
                //如果不存在py
                return $.getJSON(_this._configMap.JSONUrl).done(function (result) {
                    if (result) {
                        setLocalStorage(result);
                    }
                })
            } else {
                //如果存在了py，就尝试获取version属性，如果没有，或者不符，就重新获取
                var py = window.localStorage.getItem(this._configMap.KEY_PY_STORY);
                try {
                    py = JSON.parse(py);
                    if (py.version && py.version == this._configMap.version) {
                        //如果版本正常
                        return $Dfd.resolve(py);
                    } else {
                        //如果版本不对
                        return $.getJSON(_this._configMap.JSONUrl).done(function (result) {
                            if (result) {
                                setLocalStorage(result);
                            }
                        });
                    }
                } catch (ex) {
                    //如果报错
                    return $.getJSON(_this._configMap.JSONUrl).done(function (result) {
                        if (result) {
                            setLocalStorage(result);
                        }
                    });
                }
            }
        },
        //传入一个要转换的数组，然后返回一个转换后的对象数组
        getPYMap: function (PY, value) {
            if (!(!!value) || value === 'undefined') return value;
            return this._dealPYMap(PY, value);
        },
        //得到版本的方法
        _getVersion: function () {
            return new Date().getTime()
        },
        _dealPYMap: function (PY, value) {
            if (arguments.length !== 2) return new SyntaxError('arguments \'s length isn\'t 2');
            var format, result = [], _this = this;
            [].slice.call(value).forEach(function (item) {
                if (typeof item != 'string' || !(!!item) || item === 'undefined') {
                    result.push({
                        key: item,
                        pinyin: item,
                        acronym: item
                    })
                } else {
                    format = _this._getZH_EN(PY, item);
                    result.push({
                        key: item,
                        pinyin: format.pinyin,
                        acronym: format.acronym
                    })
                }
            });
            return result;
        },
        _isPYStored: function () {
            return !!window.localStorage.getItem(this._configMap.KEY_PY_STORY);
        },
        _getZH_EN: function (PinYin, first_letter) {
            var _name = '',
                _char = '',
                _firstChar = '',
                _reg = /[a-z0-9A-Z\- ]/,
                i = 0, len = first_letter.length;

            for (i = 0; i < len; i++) {
                var _val = first_letter[i];
                if (_reg.test(_val)) {
                    _name += _val;
                } else {
                    _char = getPinYin(_val);
                    _name += _char;
                    _firstChar += _char[0];
                }
            }
            return {
                // 转化为拼音的全拼
                pinyin: _name,
                // 转化为拼音的声母首字母
                acronym: _firstChar
            };

            function getPinYin(_val) {
                var _key = '';
                for (var key in PinYin) {
                    if (PinYin.hasOwnProperty(key)) {
                        if (PinYin[key].indexOf(_val) == -1) {// 如果无法转化为拼音，则返回原来的字符串
                            _key = _val;
                        } else {
                            _key = key;
                            break;
                        }
                    }
                }
                return _key;
            }
        }
    };
    return pyFormat;
})();
(function (beop) {
    var makeError, setConfigMap;
    makeError = function (name_text, msg_text, data) {
        var error = new Error();
        error.name = name_text;
        error.message = msg_text;

        if (data) {
            error.data = data;
        }

        return error;
    };

    setConfigMap = function (arg_map) {
        var
            input_map = arg_map.input_map,
            settable_map = arg_map.settable_map,
            config_map = arg_map.config_map,
            key_name, error;

        for (key_name in input_map) {
            if (input_map.hasOwnProperty(key_name)) {
                if (settable_map.hasOwnProperty(key_name)) {
                    config_map[key_name] = input_map[key_name];
                }
                else {
                    error = makeError('Bad Input',
                        'Setting config key |' + key_name + '| is not supported'
                    );
                    throw error;
                }
            }
        }
    };

    $.fn.serializeObject = function () {
        var obj = {};
        this.serializeArray().map(function (item) {
            if (/\[\]$/.test(item.name)) {
                if (obj[item.name]) {
                    obj[item.name].push(item.value);
                } else {
                    obj[item.name] = [item.value];
                }
            } else {
                obj[item.name] = item.value;
            }

        });
        return obj;
    };

    beop.util = $.extend(beop.util ? beop.util : {}, {
        makeError: makeError,
        setConfigMap: setConfigMap
    })
}(beop || (beop = {})));


var WorkflowTool = (function () {
    var pic_path = '/static/images/workflow/', templateStorage;

    function getStatusText(status) {
        if (status == 0) {
            status = 'new';
        }
        switch (status) {
            case 'new':
                return I18n.resource.workflow.main.NEW;
            case 1 || 'closed':
                return I18n.resource.workflow.main.CLOSE;
            case 2 || 'start':
                return I18n.resource.workflow.main.DEALING;
            case 3 || 'pause':
                return I18n.resource.workflow.main.PAUSED;
            case 4 || 'completed':
                return I18n.resource.workflow.main.FINISHED;
            case 5 || 'deleted':
                return I18n.resource.workflow.main.DELETED;
        }
    }

    function translate(text) {
        if (!text) {
            return '';
        }

        try {
            text = JSON.parse(text);
        } catch (e) {
        }

        var Translation = function (text) {
            switch (text) {
                case 'detail':
                    return I18n.resource.workflow.main.FAULT_INFO;
                case 'dueDate':
                    return I18n.resource.workflow.notice.DEADLINE;
                case 'title':
                    return I18n.resource.workflow.main.FAULT_TITLE;
                case 'due_date':
                    return I18n.resource.workflow.common.DEADLINE;
                case 'critical':
                    return I18n.resource.workflow.urgencyLevel.URGENCY_LEVEL;
                case 'executor':
                    return I18n.resource.workflow.common.EXECUTOR;
                case 'assignTime':
                    return I18n.resource.workflow.notice.TASK_ASSIGN_TIME;
                case 'groupid':
                    return I18n.resource.workflow.task.TASK_GROUP;
                case 'tags':
                    return I18n.resource.workflow.task.TAGS;
                case 'verifiers':
                    return I18n.resource.workflow.task.VERIFIERS;
                case 'watchers':
                    return I18n.resource.workflow.task.WATCHERS;
                case 'op':
                    return I18n.resource.workflow.task.STATUS;
                default :
                    return text;
            }
        };

        var criticalTranslate = function (num) {
            var level = I18n.resource.workflow.urgencyLevel[parseInt(num)];
            //兼容老的数据
            if (level == 'undefined' || level == undefined || level == null) {
                return ''
            } else {
                return level;
            }
        };

        var groupIdTranslate = function (num) { // 用户组
            for (var i = 0; i < beop.model.stateMap.group_list.length; i++) {
                var groupItem = beop.model.stateMap.group_list[i];
                if (groupItem.id == num) {
                    //兼容老的数据
                    if (groupItem.name == 'undefined' || groupItem.name == undefined || groupItem.name == null) {
                        return ''
                    } else {
                        return groupItem.name;
                    }
                }
            }
        };

        var listObjTranslate = function (list) { // 审核人，相关人员
            if (!list) {
                return "";
            }
            var text = "";
            for (var i = 0; i < list.length; i++) {
                if (i != list.length - 1) {
                    text += list[i].userfullname + ", ";
                } else {
                    text += list[i].userfullname;
                }
            }
            //兼容老的数据
            if (text == 'undefined' || text == null || text == undefined) {
                return ''
            } else {
                return text;
            }
        };

        var html = '<ul class="historyEdit list-unstyled">';
        if ($.isPlainObject(text)) {
            for (var prop in text) {
                if (prop == 'critical') {
                    html += '<li><span class="historyConTitle">' + Translation(prop) + '：</span> ' + '<span class="oldName">' + (criticalTranslate(text[prop].old) ? criticalTranslate(text[prop].old) : '' ) + '</span><strong class="historyAction">' + I18n.resource.workflow.notice.TASK_MODIFY + '</strong><span class="newName">' + (criticalTranslate(text[prop].new) ? criticalTranslate(text[prop].new) : '') + '</span></li>';
                } else if (prop == 'groupid') {
                    html += '<li><span class="historyConTitle">' + Translation(prop) + '：</span> ' + '<span class="oldName">' + (groupIdTranslate(text[prop].old) ? groupIdTranslate(text[prop].old) : '') + '</span><strong class="historyAction">' + I18n.resource.workflow.notice.TASK_MODIFY + '</strong><span class="newName">' + (groupIdTranslate(text[prop].new) ? groupIdTranslate(text[prop].new) : '') + '</span></li>';
                } else if (prop == 'watchers') {
                    html += '<li><span class="historyConTitle">' + Translation(prop) + '：</span> ' + '<span class="oldName">' + (listObjTranslate(text[prop].old) ? listObjTranslate(text[prop].old) : '') + '</span><strong class="historyAction">' + I18n.resource.workflow.notice.TASK_MODIFY + '</strong><span class="newName">' + (listObjTranslate(text[prop].new) ? listObjTranslate(text[prop].new) : '') + '</span></li>';
                } else if (prop == 'verifiers') {
                    html += '<li><span class="historyConTitle">' + Translation(prop) + '：</span> ' + '<span class="oldName">' + (listObjTranslate(text[prop].old) ? listObjTranslate(text[prop].old) : '') + '</span><strong class="historyAction">' + I18n.resource.workflow.notice.TASK_MODIFY + '</strong><span class="newName">' + (listObjTranslate(text[prop].new) ? listObjTranslate(text[prop].new) : '') + '</span></li>';
                } else if (prop == 'op') {
                    html += '<li><span class="historyConTitle">' + Translation(prop) + '：</span> ' + '<strong class="historyAction">' + I18n.resource.workflow.notice.TASK_MODIFY + '</strong><span class="newName">' + (text[prop] ? text[prop] : '') + '</span></li>';
                } else if (prop == 'delete_reply') {
                    html += '<li><span class="historyConTitle"></span> ' + '<strong class="historyAction"></strong><span class="newName">' + (text[prop] ? ( text[prop] ? text[prop] : '' ) : '') + '</span></li>';
                } else if (prop == 'reply') {
                    html += '<li><span class="historyConTitle"></span> ' + '<strong class="historyAction"></strong><span class="newName">' + (text[prop] ? ( text[prop] ? text[prop] : '' ) : '') + '</span></li>';
                }
                else {
                    if (prop != 'forward') {
                        html += '<li><span class="historyConTitle">' + Translation(prop) + '：</span> ' + '<span class="oldName">' + (text[prop].old ? text[prop].old : '') + '</span><strong class="historyAction">' + I18n.resource.workflow.notice.TASK_MODIFY + '</strong><span class="newName">' + (text[prop].new ? text[prop].new : '') + '</span></li>';
                    } else {
                        html += '<li><span class="historyConTitle">' + Translation(prop) + '：</span> ' + '<span class="oldName">' + (text[prop].old ? text[prop].old : '') + '</span><strong class="historyAction">' + I18n.resource.workflow.notice.TASK_MODIFY + '</strong><span class="newName">' + (text[prop].new ? text[prop].new : '') + '</span></li>';
                    }
                }

            }
            html += '</ul>';
            return html;
        } else {
            // 兼容之前的detail
            var textList = text.split('was renamed');
            if (textList.length != 2) {
                switch (text) {
                    case 'edit':
                        return I18n.resource.workflow.notice.TASK_EDIT;
                    case 'complete':
                        return I18n.resource.workflow.notice.TASK_FINISH;
                    case 'restart':
                        return I18n.resource.workflow.notice.TASK_RESTART;
                    case 'start':
                        return I18n.resource.workflow.notice.TASK_START;
                    case 'pause':
                        return I18n.resource.workflow.notice.TASK_PAUSE;
                    case 'reply':
                        return I18n.resource.workflow.notice.TASK_REPLY + ':';
                    case 'new':
                        return I18n.resource.workflow.notice.TASK_CREATE;
                    case 'verified':
                        return I18n.resource.workflow.notice.TASK_VERIFIED;
                    case 'not_pass':
                        return I18n.resource.workflow.notice.TASK_VERIFIED_FAILED;
                    case 'delete':
                        return I18n.resource.workflow.notice.TASK_DELETE;
                    case 'forward':
                        return I18n.resource.workflow.notice.TASK_FORWARD;
                    case 'close':
                        return I18n.resource.workflow.notice.TASK_CLOSED;
                    case 'delete_reply':
                        return I18n.resource.workflow.notice.DELETE_REPLY + ':';
                    default :
                        return text;
                }
            } else {
                return '<p>' + 'title' + ':' + textList[0] + ' <strong>' + I18n.resource.workflow.notice.TASK_MODIFY + '</strong>' + textList[1] + '</p>';
            }
        }
    }

    function recordTranslate(text) {
        switch (text) {
            case 'complete':
                return I18n.resource.workflow.record.FINISH;
            case 'start':
                return I18n.resource.workflow.record.START;
            case 'new':
                return I18n.resource.workflow.record.CREATE;
            case 'verified':
                return I18n.resource.workflow.record.VERIFIED;
            default :
                return text;
        }
    }

    function updateBadge(count, list) {
        var $badge = $('#paneWorkflow').find('li[screen="mine"]').find('.badge');
        if (!count) {
            $badge.text('').data('new-tasks', '');
        } else {
            $badge.text(count).data('new-tasks', list);
        }
    }

    function updateNewTaskCount() {
        if (!AppConfig['userId']) {
            return;
        }
        WebAPI.get('/workflow/new_task_count/' + AppConfig['userId']).done(function (r_obj) {
            if (!r_obj.length) return false;
            var storageNewTask = localStorage.getItem('new_task_' + AppConfig['userId']);
            if (!storageNewTask) {
                updateBadge(r_obj.length, r_obj);
            } else {
                try {
                    storageNewTask = JSON.parse(storageNewTask);
                } catch (e) {
                    return false;
                }
                var unreadList = [];
                for (var n = 0, len = r_obj.length; n < len; n++) {
                    if ($.inArray(r_obj[n], storageNewTask) === -1) {
                        unreadList.push(r_obj[n]);
                    }
                }
                updateBadge(unreadList.length, unreadList);
                localStorage.setItem('new_task_temp_' + AppConfig['userId'], result);
            }
        })
    }

    function getTemplate(template, selector) {
        templateStorage = templateStorage || {};
        var promise;
        if (templateStorage[template]) {
            promise = templateStorage[template];
        } else {
            promise = templateStorage[template] = WebAPI.get(template);
        }
        var dfd = $.Deferred();
        promise.done(function (result) {
            var $result = $(result), $template = $result.find(selector).children();
            var $return = $template.clone()
            I18n.fillArea($return)
            dfd.resolve($return);
        });
        return dfd;
    }

    function getWorkflowTemplate(selector) {
        return getTemplate('/static/views/workflow/template.html', selector);
    }

    function inherits(clazz, base) {
        var clazzPrototype = clazz.prototype;

        function F() {
        }

        F.prototype = base.prototype;
        clazz.prototype = new F();
        for (var prop in clazzPrototype) {
            clazz.prototype[prop] = clazzPrototype[prop];
        }
        clazz.constructor = clazz;
    }

    function getUserName(rawUserName) {
        if (rawUserName.indexOf('@') > 0) {
            return rawUserName.substring(0, rawUserName.indexOf('@'))
        }
        return rawUserName;
    }

    function delArrInvalidValue(arr) { //将数组为空项删除
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] == '' || arr[i] == null) {
                arr.splice(i, 1);
                i = i - 1;
            }
        }
        return arr;
    }

    function screeningItem($obj, str, num) { //我创建的筛选工单
        if ($obj.hasClass("selectAll")) {
            $(".task-item").show();
            return;
        }
        var text = $obj.text();
        if (!num) {//(状态,截止日期,工单名,执行人)
            $.each($(".task-item ." + str), function (index, item) {
                var $item = $(item);
                var itemStatus = $item.text();
                if (text !== itemStatus) {
                    $item.closest(".task-item").hide();
                } else {
                    $item.closest(".task-item").show();
                }
            });
        } else {//(紧急程度 )
            var urgencyClass = $obj.attr("urgencyClass");
            $(".task-item").hide();
            $(".task-item ." + urgencyClass).closest(".task-item").show();
        }
    }

    return {
        pic_path: pic_path,
        getStatusText: getStatusText,
        updateBadge: updateBadge,
        updateNewTaskCount: updateNewTaskCount,
        getWorkflowTemplate: getWorkflowTemplate,
        inherits: inherits,
        getUserName: getUserName,
        translate: translate,
        recordTranslate: recordTranslate,
        delArrInvalidValue: delArrInvalidValue,
        screeningItem: screeningItem
    };
})();

(function (beop) {
    var configMap = {
            htmlURL: '/static/views/workflow/memberSelected.html',
            htmlTemplateId: '#wf-memberSelected-container',
            settable_map: {
                cb_dialog_hide: true,
                cb_dialog_show: true,
                userHasSelected: true,
                userMemberMap: true,
                maxSelected: true,
                enableDeleteMember: true,
                enableAddMember: true,
                maxDelete: true
            },
            cb_dialog_hide: $.noop,
            cb_dialog_show: $.noop,
            userMemberMap: null,
            userHasSelected: [],
            maxSelected: null,
            enableDeleteMember: true,
            enableAddMember: true,
            KEY_PY_STORY: 'BEOP.WF.PY',
            maxDelete: null
        },
        stateMap = {
            usersMap: [],
            addedUserList: [],
            userHasSelectedDefault: [],
            allUserList: [],
            PYMap: [],
            selectedClassPrefix: 'wf-member-selected',
            //取消已经选中的人物  和删除区分开来
            memberSelectedDiff: [],
            isConfirm: false
        },
        jqueryMap = {},
        setJqueryMap,
        configModel,
        init;
    //方法名称
    var progressResultData, bindEvents, renderCheckedUsers, isPYStored;
    //事件操作方法名称
    var filterCheckedUser, searchByFirstName, getPYLocalStorage, getZH_EN, addActiveSearchBtn, setPYMap, searchByInput, showSearchByID, resetData,
        renderAddedUsers, onClickUser, onClickRemoveUser, removeMember, addMember, isMemberAdded, checkUserSelectedAmount, checkUserDeletedAmount, restoreSearchResult;

    setJqueryMap = function () {
        var $container = stateMap.$container;

        jqueryMap = {
            $container: $container,
            $add_user_dialog: $container.find('#wf-add-person'),
            $wf_check_result: $container.find('.wf-check-result')
        };
        jqueryMap.$wf_search_by_firstName_li = jqueryMap.$add_user_dialog.find('.wf-search-result-title ul li');
        jqueryMap.$wf_search_byInput = jqueryMap.$add_user_dialog.find('#input-search-name');
        jqueryMap.$wf_search_result = jqueryMap.$add_user_dialog.find('.wf-search-result');
        jqueryMap.$wf_search_result_list = jqueryMap.$add_user_dialog.find('.wf-member');
        jqueryMap.$wf_added_user_list = jqueryMap.$add_user_dialog.find('.wf-added-user-list');
        jqueryMap.$wf_seaych_byInput = jqueryMap.$add_user_dialog.find('#input-search-name');
        jqueryMap.$wf_close_btn1 = jqueryMap.$add_user_dialog.find('.modal-header button');
        jqueryMap.$wf_search_result_list.removeClass(stateMap.selectedClassPrefix);
        jqueryMap.$wf_check_result.empty();
        jqueryMap.$wf_search_byInput.val('');
    };

    configModel = function (input_map) {
        beop.util.setConfigMap({
            input_map: input_map,
            settable_map: configMap.settable_map,
            config_map: configMap
        });
        return true;
    };

    init = function ($container) {
        if (!configMap.userMemberMap || Object.prototype.toString.call(configMap.userMemberMap) !== "[object Array]") {
            infoBox.alert('现在人物选择框需要提前预制人员列表');
            return false;
        }
        if (arguments.length > 1) {
            console.warn('人物选择框现在只需要一个参数 $container' + arguments[0].toString());
        }
        //兼容老数据
        if (!configMap.userHasSelected) {
            configMap.userHasSelected = [];
        }
        Spinner.spin($container.get(0));
        stateMap.$container = $container;
        WebAPI.get(configMap.htmlURL + '?=' + new Date().getTime().toString(16)).done(function (html) {
            stateMap.$container.append(html);
            resetData();
            setJqueryMap();
            //处理数据
            progressResultData();
        }).always(function () {
            Spinner.stop();
        }).fail(function () {
            infoBox.alert('获取人物选择框模板失败！');
        });
    };

    //---------DOM操作------
    bindEvents = function () {

        jqueryMap.$wf_search_result.off().on('click', '.wf-member', onClickUser);
        //删除人物
        jqueryMap.$wf_check_result.off().on('click', '.glyphicon-remove', onClickRemoveUser);
        //通过首字母筛选任务
        jqueryMap.$wf_search_by_firstName_li.off().on('click', searchByFirstName);
        //通过搜索来查询
        jqueryMap.$wf_seaych_byInput.off().on('keyup', searchByInput);

        jqueryMap.$wf_comfirm_btn = jqueryMap.$add_user_dialog.find('#wf-member-comfirm-btn');
        jqueryMap.$wf_comfirm_btn.off().on('click', renderAddedUsers);
        jqueryMap.$add_user_dialog.off().on('show.bs.modal', function () {
            restoreSearchResult();
            stateMap.isConfirm = false;
        }).on('hidden.bs.modal', function () {
            jqueryMap.$wf_check_result.empty().html(beopTmpl('tpl_wf_dialog_added_member', {members: stateMap.userHasSelectedDefault}));
            jqueryMap.$wf_search_result_list.removeClass(stateMap.selectedClassPrefix);
            jqueryMap.$wf_search_result_list.each(function () {
                var $this = $(this);
                stateMap.userHasSelectedDefault.forEach(function (item) {
                    if (item.id == $this.data('user-id')) {
                        $this.addClass(stateMap.selectedClassPrefix)
                    }
                });
            });
            //确保全部移除
            [].slice.call(document.querySelectorAll(configMap.htmlTemplateId)).forEach(function (item) {
                item.parentNode.removeChild(item);
            });
        });
    };

    renderAddedUsers = function () {
        jqueryMap.$wf_added_user_list.html(beopTmpl('tpl_wf_added_member', {members: stateMap.addedUserList}));

        //如果用户点击确认的话把提前保存的数据覆盖过去
        stateMap.userHasSelectedDefault = [];
        stateMap.addedUserList.forEach(function (item) {
            stateMap.userHasSelectedDefault.push(item);
        });

        configMap.cb_dialog_hide(stateMap.addedUserList);
        jqueryMap.$add_user_dialog.modal('hide');
    };

    renderCheckedUsers = function (data) {
        jqueryMap.$wf_check_result.html(beopTmpl('tpl_wf_dialog_added_member', {members: data}))
    };
    //---------方法---------
    progressResultData = function () {
        var addedUserMap = {};
        var m, result = [];

        stateMap.addedUserList = [];
        stateMap.userHasSelectedDefault = [];

        configMap.userHasSelected.forEach(function (item) {
            stateMap.addedUserList.push(item);
            stateMap.userHasSelectedDefault.push(item);
            addedUserMap['' + item.id] = item;
        });

        stateMap.allUserList = [];
        configMap.userMemberMap.forEach(function (item) {
            stateMap.allUserList.push(item)
        });
        /* 20160303 新增 - 开始 */
        stateMap.addedUserList = stateMap.addedUserList.map(function (row) {
            if (typeof row.userfullname === 'undefined') {
                return (function (userId, userList) {
                    var findUser = null;
                    userList = userList || [];
                    userList.some(function (user) {
                        if (user.id === userId) {
                            findUser = user;
                            return true;
                        }
                    });
                    return findUser;
                }(row.id, result.data))
            }
            return row;
        });
        /* 20160303 新增 - 结束 */
        jqueryMap.$wf_search_result.html(beopTmpl('tpl_wf_member', {
            members: stateMap.allUserList,
            addUserMap: addedUserMap
        }));

        stateMap.allUserList.forEach(function (item) {
            stateMap.usersMap['' + item.id] = item;
        });

        I18n.fillArea(stateMap.$container);
        setPYMap();
        //只有这个内容是动态刷新出来的，其他的都不是
        jqueryMap.$wf_search_result_list = jqueryMap.$add_user_dialog.find('.wf-member');
        bindEvents();
        //重新画一次那个已经选择好人物的状态栏
        renderCheckedUsers(stateMap.userHasSelectedDefault);
        //重置搜索状态
        restoreSearchResult();
        Spinner.stop();
        jqueryMap.$add_user_dialog.modal('show');

    };
    restoreSearchResult = function () {
        stateMap.addedUserList = [];
        stateMap.userHasSelectedDefault.forEach(function (item) {
            stateMap.addedUserList.push(item);
        });
        jqueryMap.$wf_search_result_list.show();
        addActiveSearchBtn(null, 2);
    };
    //通过头部的  stateMap.usersMap 设定拼音表
    setPYMap = function () {
        var PYFormat = new pyFormat(), itemPY = {};
        PYFormat.getPYLocalStorage().done(function (result) {
            stateMap.usersMap.forEach(function (item) {
                itemPY = PYFormat.getPYMap(result.data, item.userfullname.charAt(0))[0];
                if (item.id && itemPY) {
                    itemPY.id = item.id;
                }
                stateMap.PYMap.push(itemPY);
            });
        });
        PYFormat = null;
    };
    //显示出来搜索的内容统一方法
    showSearchByID = function (result) {
        if (Object.prototype.toString.call(result) !== '[object Array]') return;
        jqueryMap.$wf_search_result_list.hide();
        var i;
        for (i = 0; i < result.length; i++) {
            jqueryMap.$wf_search_result_list.each(function () {
                if ($(this).data('user-id') == result[i]) {
                    $(this).show();
                }
            })
        }
    };

    removeMember = function (userId) {
        for (var m = 0; m < stateMap.addedUserList.length; m++) {
            if (stateMap.addedUserList[m].id == userId) {
                stateMap.addedUserList.splice(m, 1);
            }
        }
    };


    addMember = function (userId) {
        stateMap.addedUserList.push(stateMap.usersMap['' + userId]);
    };
    isMemberAdded = function (userId) {
        for (var m = 0; m < stateMap.addedUserList.length; m++) {
            if (stateMap.addedUserList[m].id == userId) {
                return true;
            }
        }
        return false;
    };

    resetData = function () {
        stateMap.usersMap = [];
        stateMap.addedUserList = [];
        stateMap.allUserList = [];
        stateMap.PYMap = [];
        stateMap.memberSelectedDiff = [];
        stateMap.isConfirm = false;
        stateMap.userHasSelectedDefault = [];
    };
    //---------事件---------

    //检查用户选择了多少人物
    checkUserSelectedAmount = function () {
        if (configMap.maxSelected) {
            var li = jqueryMap.$wf_check_result.find('li');
            var length = li.length == 'undefined' ? 0 : li.length;
            if (configMap.maxSelected <= length) {
                return false;
            }
        }
        return true;
    };
    checkUserDeletedAmount = function () {
        if (configMap.maxDelete) {
            var li = jqueryMap.$wf_check_result.find('li');
            var length = li.length == 'undefined' ? 0 : li.length;
            if (configMap.maxDelete < length) {
                return true;
            }
            return false;
        }
        return true;
    };
    onClickUser = function () {
        var $this = $(this), selectedClass = stateMap.selectedClassPrefix;
        var userId = '' + $this.data('user-id');
        if (configMap.maxSelected == 1) {
            if (!$this.hasClass(selectedClass)) {
                if (!isMemberAdded(userId)) {
                    stateMap.addedUserList = [];
                    addMember(userId);
                    jqueryMap.$wf_search_result_list.removeClass(selectedClass);
                    $this.addClass(selectedClass);
                }
            }
        } else {
            if (!$this.hasClass(selectedClass)) {
                //默认情况下 可以添加人物 也可以删除人物
                if (configMap.enableAddMember) {
                    if (checkUserSelectedAmount()) {
                        if (!isMemberAdded(userId)) {
                            addMember(userId);
                            $this.addClass(selectedClass);
                            //stateMap.memberSelectedDiff.push(userId);
                        }
                    } else {
                        Alert.danger(ElScreenContainer, '超过最大选择数量').showAtTop(300);
                        return false;
                    }
                } else {
                    Alert.danger(ElScreenContainer, '不能添加人物').showAtTop(300);
                    return false;
                }
            } else {
                if (configMap.enableDeleteMember) {
                    if (checkUserDeletedAmount()) {
                        $this.removeClass(selectedClass);
                        removeMember(userId);
                    }
                } else {
                    Alert.danger(ElScreenContainer, '不能删除人物').showAtTop(300);
                    return false;
                }
            }
        }
        renderCheckedUsers(stateMap.addedUserList);
    };

    onClickRemoveUser = function () {
        var $this = $(this), userId = $this.data('user-id');
        if (configMap.enableDeleteMember) {
            if (checkUserDeletedAmount()) {
                $this.parent().remove();
                removeMember(userId);
                filterCheckedUser(userId);
            }
        } else {
            Alert.danger(ElScreenContainer, '不能删除已经存在的人物').showAtTop(300);
            return false;
        }
    };
    //通过首字母来筛选人物
    //只要中文或者英文的首字母匹配到就显示
    searchByFirstName = function () {
        var $this = $(this), searchIndex = $this.text(), result = [], key, i;
        //更改字母选中样式
        addActiveSearchBtn($this, 1);
        //如果点击的是第一个 全部
        if ($this.index() == 0) {
            jqueryMap.$wf_search_result_list.show();
        } else {
            //遍历提前设定好的 PYMap
            for (i = 0; i < stateMap.PYMap.length; i++) {
                if (stateMap.PYMap[i] && (stateMap.PYMap[i].pinyin.charAt(0).toLowerCase() == searchIndex || stateMap.PYMap[i].acronym.charAt(0).toLowerCase() == searchIndex)) {
                    result.push(stateMap.PYMap[i].id)
                }
            }
            showSearchByID(result);
        }
    };
    //通过输入文字来筛选人物
    searchByInput = function (ev) {
        ev.preventDefault();
        ev.stopPropagation();
        var $this = $(this);
        var value = $.trim($this.val());
        //如果输入的文字是空的时候,就显示全部
        if (value == '') {
            jqueryMap.$wf_search_result_list.show();
            addActiveSearchBtn(null, 2);
        } else {
            var result = [];
            for (var i = 0; i < stateMap.allUserList.length; i++) {
                (function (i) {
                    var member = stateMap.allUserList[i];
                    if (member.userfullname.toLowerCase().indexOf(value.toLowerCase()) != -1 || (member.useremail && member.useremail.toLowerCase().indexOf(value.toLowerCase()) != -1)) {
                        result.push(member.id)
                    }
                })(i)
            }
            showSearchByID(result)
        }
    };
    //删除人物的同时视图显示出来   去掉 wf-member-selected
    filterCheckedUser = function (userId) {
        jqueryMap.$wf_search_result_list.each(function () {
            var $this = $(this);
            if ($this.data('user-id') == userId) {
                $this.removeClass(stateMap.selectedClassPrefix);
            }
        })
    };
    addActiveSearchBtn = function ($which, type) {
        //点击 li 搜索的时候
        if ($which && type == 1) {
            jqueryMap.$wf_search_by_firstName_li.removeClass('active');
            $which.addClass('active');
        } else if (type == 2) {
            //输入文字搜索 文字为空的时候
            jqueryMap.$wf_search_by_firstName_li.removeClass('active').eq(0).addClass('active');
        }
    };

    //---------Exports---------
    beop.view = beop.view || {};
    beop.view.memberSelected = {
        configModel: configModel,
        init: init
    };
}(beop || (beop = {})));

;(function (exports) {

    function MemberSelectedModal() {
        this.$modalWrap = null;
        this.$modal = null;

        this.callback = null;

        this.state = {};
        // 默认选中的用户
        this.state.selectedUser = [];
    }

    ~function () {

        this.show = function (callback) {
            var _this = this;
            var domWrap = document.body;

            this.callback = callback;

            // 如果之前实例化过，直接 append 到页面上
            if (this.$modalWrap) {
                this.$modalWrap.appendTo(domWrap);
                this.initModal();
                return;
            } 
            
            // 如果没有实例化过，则进行实例化操作
            WebAPI.get('/static/app/WebFactory/scripts/modals/memberSelectedModal/memberSelectedModal.html')
            .done(function (html) {
                _this.$modalWrap = $(html).appendTo(domWrap);
                _this.init();
            });
        };

        this.setState = function (state) {
            this.state = $.extend(false, this.state, state);
            return this;
        };

        this.init = function () {
            // 初始化 DOM
            this.$modal = this.$modalWrap.children('.modal');

            this.initModal();
            this.attachEvents();
        };

        this.initModal = function () {
            // 显示用户选择模态框
            beop.view.memberSelected.configModel({
                group_model: {
                    userDialogList: function () {
                        return WebAPI.get('/workflow/group/user_dialog_list/'+AppConfig.userId);
                    }
                },
                maxSelected: null,
                userHasSelected: this.state.selectedUser,
                cb_dialog_hide: this.onConfirmCallback.bind(this)
            });
            beop.view.memberSelected.init($(document.body));
        };

        this.attachEvents = function () {
            var _this = this;
            this.$modal.off('hidden.bs.modal').on('hidden.bs.modal', function () {
                _this.hide();
            });
        };

        this.reset = function () {
            this.setState({
                memberSelected: []
            });
        };

        this.onConfirmCallback = function () {
            typeof this.callback === 'function' && this.callback.apply(null, arguments);
        };

        this.hide = function () {
            this.reset();
            if (this.$modalWrap) {
                this.$modalWrap.detach();
            }
        };

    }.call(MemberSelectedModal.prototype);

    exports.MemberSelectedModal = new MemberSelectedModal();
} (window));
/**
 * Created by vicky on 2015/12/16.
 * 编辑相关控件内容,比如:HTMLContainer, HTMLText
 */
(function(win){
    var _this = undefined;
    var ue = undefined;
    function EditorModal(){
        _this = this;
        this.htmlContent = undefined;
        this.$editorModal = undefined;
        this.$wrap = undefined;
        this.callback = undefined;
        this.showEditor = undefined;
    };

    EditorModal.prototype.show = function (htmlContent, showEditor, callback) {
        this.htmlContent = htmlContent;
        this.callback = callback;
        this.showEditor = showEditor;
        if($('#editorModal').length === 0){
            WebAPI.get('/static/app/WebFactory/scripts/screens/page/modals/editorModal/editorModal.html').done(function (resultHTML) {
                $('#mainframe').parent().append(resultHTML);
                _this.$wrap = $('#editorModalWrap');
                _this.$editorModal = $('#editorModal', _this.$wrap);
                _this.init();
                _this.$editorModal.modal('show');
                _this.$editorModal.on('hidden.bs.modal',function(){
                    //_this.close();
                });
            })
        }else{
            this.init();
            _this.$editorModal.modal('show');
            _this.$editorModal.on('hidden.bs.modal',function(){
                //_this.close();
            });
        }
    };

    EditorModal.prototype.init = function () {
        var $ueditorWrap = _this.$editorModal.find('.ueditorWrap');
        var $textareaWrap = _this.$editorModal.find('.textareaWrap');
        if (_this.showEditor === true) {
            $ueditorWrap.show();
            $textareaWrap.hide();
            this.$editorModal.show();
            if (!ue) {
                ue = UE.getEditor('ueditor', { lang: (I18n.type == 'zh' ? 'zh-cn' : 'en') });
                ue.ready(function () {
                    //设置内容
                    UE.insertPic(this);
                    ue.setContent(_this.htmlContent ? _this.htmlContent : '');
                    if (_this.htmlContent && _this.htmlContent == '请此处输入文本') {
                        ue.execCommand('selectall')
                    }
                    $('.btnWrap').show();
                });
                this.attachEvent();
            } else {
                ue.reset();
                ue.setContent(_this.htmlContent ? _this.htmlContent : '');

                if (_this.htmlContent && _this.htmlContent == '请此处输入文本') {
                    ue.execCommand('selectall')
                }
                $('.btnWrap').show();
            }
        } else {
            $ueditorWrap.hide();
            $textareaWrap.show();
            _this.$editorModal.find('.textareaCon').val('');
            _this.$editorModal.find('.textareaCon').val(_this.htmlContent ? _this.htmlContent : '');
            this.attachEvent();
        }
    };

    EditorModal.prototype.close = function(){
        ue.destory();
        this.$wrap.remove();
    };

    EditorModal.prototype.attachEvent = function () {
        $('#btnSaveContent', this.$editorModal)[0].onclick = function () {
            var newContent = _this.showEditor ? ue.getContent() : _this.$editorModal.find('.textareaCon').val();
            //_this.callback(newContent);//ue.getContent()
            if (!_this.callback(newContent)) {
                _this.$editorModal.modal('hide');
            } 
        }

        $('#btnCancelEdit', this.$editorModal)[0].onclick = function(){
            _this.$editorModal.modal('hide');
        }
    };

    win.EditorModal = new EditorModal();
}(window));
(function () {
    function MaterialModal() {
        this.$sourceCtn = undefined;
        this.navBtn = [
            { type: 'pic', contain: '<div class="icoBtn priMeta"><span class="glyphicon glyphicon-picture icoBtnImg"></span><span class="icoBtnText" i18n="mainPanel.materalPanel.toolbar.PRIVATE_MATERAL"></span></div>'},
            { type: 'page', contain: '<div class="icoBtn pages"><span class="glyphicon glyphicon-picture icoBtnImg"></span><span class="icoBtnText" i18n="mainPanel.materalPanel.toolbar.PAGE_MATERAL"></span></div>' },
            { type: 'layer', contain: '<div class="icoBtn layers"><span class="glyphicon glyphicon-picture icoBtnImg"></span><span class="icoBtnText" i18n="mainPanel.materalPanel.toolbar.LAYER_MATERAL"></span></div>' },
            { type: 'widget', contain: '<div class="icoBtn widgets" data-filter="{filter}"><span class="glyphicon glyphicon-picture icoBtnImg"></span><span class="icoBtnText" i18n="mainPanel.materalPanel.toolbar.BUTTON_MATERAL"></span></div>' },
            { type: 'img', contain: '<div class="icoBtn pubMeta"><span class="glyphicon glyphicon-picture icoBtnImg"></span><span class="icoBtnText" i18n="mainPanel.materalPanel.toolbar.PUBLIC_MATERAL"></span></div>' }
        ];
        this.materiaModal = undefined;
        //this.btnOK = undefined;
        this.$photoUnload = undefined;
        this.$addPhoto = undefined;
        this.$addPrvtPhoto = undefined;
        this.$deletePrvt = undefined;
        this.$deletePage = undefined;
        this.$deleteLayer = undefined;
        this.$deleteWidget = undefined;
        this.$deletePub = undefined;
        this.$usePage = undefined;
        this.$batchApplyPage = undefined;
        this.$editPage = undefined;
        this.$editLayer = undefined;
        this.$addTemplate = undefined;
        this.store = { 'privateMaterial': [],'publicMaterial':[] };
        this.pageCtn = [];
        this.layerCtn = [];
        this.widgetCtn = [];
        this.onChosenCallback = null;
    }
    
    MaterialModal.prototype.show = function (navArr, callback) {
        var _this = this;
        this.onChosenCallback = callback;
        WebAPI.get('/static/app/WebFactory/scripts/screens/page/modals/materialModal/materialModal.html').done(function (resultHTML) {
            if ($('#materiaModal').length === 0) {
                $('#mainframe').parent().append(resultHTML);
            }
            $('#materiaModal').show();
            I18n.fillArea($('#materiaModal').fadeIn());
            $('#mainframe').addClass('blur');

            _this.materiaModal = $('#materiaModal');
            _this.$photoUnload = _this.materiaModal.find('.uploadPhoto');
            _this.$addPhoto = _this.materiaModal.find('.addPhoto');
            _this.$addPrvtPhoto = _this.materiaModal.find('.addPrvtPhoto');
            _this.$deletePrvt = _this.materiaModal.find('.deletePrvt');
            _this.$deletePage = _this.materiaModal.find('.deletePage');
            _this.$deleteLayer = _this.materiaModal.find('.deleteLayer');
            _this.$deleteWidget = _this.materiaModal.find('.deleteWidget');
            _this.$editWidget = _this.materiaModal.find('.editWidget');
            _this.$deletePub = _this.materiaModal.find('.deletePub');
            _this.$usePage = _this.materiaModal.find('.usePage');
            _this.$batchApplyPage = _this.materiaModal.find('.batchApplyPage');
            _this.$editPage = _this.materiaModal.find('.editPage');
            _this.$editLayer = _this.materiaModal.find('.editLayer');
            _this.$addTemplate = _this.materiaModal.find('.addPageTempate');

            $('#materiaClose').off('click').click(function () {
                _this.materiaModal.hide();
                $('#mainframe').removeClass('blur');
            });
            //加载素材页面左侧导航
            var $navContainer = _this.materiaModal.find('.icoBtn-container');
            $navContainer.children().remove();
            if (!navArr) navArr = ['pic', 'page', 'layer', 'widget', 'img'];
            for (var i = 0; i < navArr.length; i++) {
                var navTitle = navArr[i];
                var isExsit = false;
                var navBtnArr = _this.navBtn;
                for (var j = 0; j < navBtnArr.length; j++) {
                    if (navTitle.indexOf(navBtnArr[j].type) === 0) {
                        $navContainer.append(navBtnArr[j].contain.formatEL({filter: navTitle.split('.')[1] || ''}));
                        break;
                    }
                }
            }
            I18n.fillArea($navContainer);

            _this.$sourceCtn = _this.materiaModal.find('.sourceCon');
            _this.$sourceCtn.children().remove();

            _this.materiaModal.find('.icoBtn').off('click').click(function () {
                var $current = $(this);
                $current.css('background', 'rgba(28,173,189,0.8)');
                $current.siblings().css('background', 'transparent');
                if ($current.hasClass('priMeta')) {
                    _this.initPriMeta();
                } else if ($current.hasClass('pages')) {
                    _this.initPages();
                } else if ($current.hasClass('layers')) {
                    _this.initLayers();
                } else if ($current.hasClass('widgets')) {
                    _this.initWidgets($current[0].dataset.filter);
                } else {
                    _this.initPubMeta();
                }
            });
            _this.materiaModal.find('.icoBtn:first-child').trigger('click');
        });
    }
    MaterialModal.prototype.photoCellTpl = '<div class="{classAll}" id="photoItem_{id}"><span class="animFlag"></span><div class="thumbnail"><img id="{id}"/>\
                                            <div class="selectOK"><span class="glyphicon glyphicon-ok-sign"></span></div>\
                                            </div><div class="caption"><h3>{title}</h3></div></div>';
    MaterialModal.prototype.photoCell = function (result, $current, classAll) {
        var tempHtml = [];
        tempHtml.push(this.photoCellTpl.formatEL({
            classAll:classAll,
            id: result._id,
            title:result.name?result.name:''
        }));
        $current.append(tempHtml.join(''));
    };
    MaterialModal.prototype.showPage = function (data, $tools) {
        var _this = this;
        var $spanSearch = $('#spanSearch');
        var $spanRemove = $('#spanRemove');
        for (var i = 0; i < data.length; i++) {
            $pageBox = $('<div class="col-sm-6 col-md-4 col-lg-2 pageBox" id="' + data[i]._id + '">\
                            <div class="pageInfo"><div class="pageName">\
                            <span class="pageText pageText1">' + I18n.resource.mainPanel.materalPanel.materalRepeat.PAGE_NAME + '</span><span class="pageName">' + data[i].name + '</span></div>\
                            <div class="pageCreator"><span class="pageText pageText2">' + I18n.resource.mainPanel.materalPanel.materalRepeat.PAGE_CREATOR + '</span><span>' + data[i].creator + '</span></div>\
                            <div class="pageTime"><span class="pageText pageText3">' + I18n.resource.mainPanel.materalPanel.materalRepeat.PAGE_TIME + '</span><span>' + data[i].time + '</span></div></div>\
                            <div class="pageMask"><span class="glyphicon glyphicon-ok-sign"></span></div></div>');

            $pageBox.appendTo(this.$sourceCtn);
        }

        //页面，图层，控件的搜索
        $('#iptSearch').bind('keypress',function(event){
            var searchVal = $('#iptSearch').val();
            if (event.keyCode == "13" && searchVal != '') {
                $spanRemove.show();
                $spanSearch.hide();
                for(var i = 0; i < data.length; i++){
                    if(data[i].name.toLowerCase().indexOf(searchVal.toLowerCase()) >= 0){
                        $('#' + data[i]._id).show();
                    }else{
                        $('#' + data[i]._id).hide();
                    }
                }
            } else if(event.keyCode == "13" && searchVal == '') {
                $spanRemove.hide();
                $spanSearch.show();
                for(var i = 0; i < data.length; i++){
                    $('#' + data[i]._id).hide();
                };
            }
        });
        $spanRemove.click(function(){
            $spanRemove.hide();
            $spanSearch.show();
            $('#iptSearch').val('');
            for(var i = 0; i < data.length; i++){
                $('#' + data[i]._id).show();
            };
        });

        this.$sourceCtn.off('click').on('click', '.pageBox', function (e) {
            var $target = $(e.currentTarget);
            var action;

            if ($target.hasClass('active')) {
                $target.removeClass('active');
                action = 'hide';
            } else {
                _this.$sourceCtn.find('.pageBox').removeClass('active');
                $target.addClass('active');
                action = 'show';
            }
            $tools.forEach(function ($tool) {
                $tool[action]();
            });
        });
    };
    MaterialModal.prototype.showPhoto = function (resule, photoBoxArray, $btnOne, $btnTwo) {
        for (var i = 0; i < resule.length; i++) {
            //根据interval判断图片或动画载入到不同的容器
            var interval;
            if (resule[i].interval === 0 || resule[i].interval) {
                interval = resule[i].interval;
            } else {
                interval = resule[i].content.interval;
            }
            if (interval === 0) {
                this.photoCell(resule[i], photoBoxArray[0], 'col-sm-1 col-md-1 col-lg-1 photoItem');//col-sm-6 col-md-4 col-lg-2 photoItem
                $('.photoItemBox').find('.animFlag').css('background', '#078A98').html(I18n.resource.mainPanel.materalPanel.materalRepeat.PHOTO);
            } else {
                this.photoCell(resule[i], photoBoxArray[1], 'col-sm-1 col-md-1 col-lg-1 photoItem');
                $('.animItemBox').find('.animFlag').html(I18n.resource.mainPanel.materalPanel.materalRepeat.ANIMATION);
            }
            var url, name;
            if (resule[i]) {
                url = resule[i].content ? resule[i].content.url : resule[i].url;
            }
            //this.photoCell(resule[i], $photoItemBox, 'col-sm-6 col-md-4 col-lg-2 photoItem');
            this.loadImage(resule[i]._id, url, this.loadResult);
            //图片素材的搜索
            var $spanSearch = $('#spanSearch');
            var $spanRemove = $('#spanRemove');
            $('#iptSearch').bind('keypress',function(event){
                var searchVal = $('#iptSearch').val();
                if (event.keyCode == "13" && searchVal != '') {
                    $spanRemove.show();
                    $spanSearch.hide();
                    for(var i = 0; i < resule.length; i++){
                        if(resule[i].name.toLowerCase().indexOf(searchVal.toLowerCase()) >= 0){
                            $('#' + resule[i]._id).closest('div.photoItem').show();
                        }else{
                            $('#' + resule[i]._id).closest('div.photoItem').hide();
                        }
                    }
                } else if(event.keyCode == "13" && searchVal == '') {
                    $spanRemove.hide();
                    $spanSearch.show();
                    for(var i = 0; i < resule.length; i++){
                        $('#' + resule[i]._id).closest('div.photoItem').hide();
                    };
                }
            });
            $spanRemove.click(function(){
                $spanRemove.hide();
                $spanSearch.show();
                $('#iptSearch').val('');
                for(var i = 0; i < resule.length; i++){
                        $('#' + resule[i]._id).closest('div.photoItem').show();
                    };
            });
        }
        $('.photoItem').off('click').click(function (e) {
            var e = e || window.event;
            e.stopPropagation();
            var $current = $(this);
            var $thumbnail = $current.find('.thumbnail');
            if ($current.hasClass('active')) {
                $current.removeClass('active');
                //$thumbnail.removeClass('hideUseBtn');
                if (!$current.parents('.sourceCon').find('.photoItem').hasClass('active')) {
                    if ($btnOne !== null) $btnOne.hide();
                    $btnTwo.hide();
                }
            } else {
                if (!$current.find('img').hasClass('noImg')) {
                    $current.addClass('active');
                    //$thumbnail.addClass('hideUseBtn');
                    if ($btnOne !== null) $btnOne.show();
                    $btnTwo.show();
                }
            }
        });
    };
    //使用图片或动画
    MaterialModal.prototype.usePriPhoto = function (photoDiff) {
        var _this = this;
        _this.materiaModal.find('.thumbnail').append('<span class="usePriPhoto">' + I18n.resource.mainPanel.materalPanel.privateMateral.USE_PHOTO + '</span>');
        $('.usePriPhoto').off('click').click(function (e) {//this.btnOK
            var e = e || window.event;
            e.stopPropagation();
            e.preventDefault();
            var $itemActive = $(this).parents('.photoItem');
            var activeImgId = $itemActive.find('img').attr('id');
            var datas = (photoDiff === 'priPhoto') ? _this.store.privateMaterial : _this.store.publicMaterial;
            for (var i = 0; i < datas.length; i++) {
                if (datas[i]._id === activeImgId) {
                    if (photoDiff === 'priPhoto') {
                        typeof _this.onChosenCallback === 'function' &&
                            _this.onChosenCallback(datas[i]);
                    } else {
                        var dataContent = {};
                        dataContent = datas[i].content;
                        dataContent['_id'] = datas[i]._id;
                        typeof _this.onChosenCallback === 'function' &&
                            _this.onChosenCallback(dataContent);
                    }
                    break;
                }
            }
            _this.materiaModal.hide();
            $('#mainframe').removeClass('blur');
        });
    };

    MaterialModal.prototype.initPriMeta = function () {
        var _this = this;
        var $photoItemBox = $('<div class="row photoItemBox"></div>');
        var $animItemBox = $('<div class="row animItemBox"></div>');

        this.reset();
        // 需要默认显示的按钮
        this.$addPhoto.show();
        this.$sourceCtn.append($photoItemBox).append($animItemBox);

        if (this.store.privateMaterial.length !== 0) {
            _this.showPhoto(this.store.privateMaterial, [$photoItemBox, $animItemBox],null , _this.$deletePrvt);//_this.btnOK
            _this.usePriPhoto('priPhoto');
        } else {
            WebAPI.get('/factory/projSprite/get/' + AppConfig.project.id).done(function (result) {
                _this.store.privateMaterial = result;
                _this.showPhoto(result, [$photoItemBox, $animItemBox],null , _this.$deletePrvt);//_this.btnOK
                _this.usePriPhoto('priPhoto');
            });
        }
        this.$addPhoto.off('click').click(function () {
            _this.materiaModal.find('.pubMeta').trigger('click');
        });
        this.$deletePrvt.off('click').click(function () {
            //删除素材事件
            var $activeImgs = _this.$sourceCtn.find('.active img');
            var $active = _this.$sourceCtn.find('.active');
            var data = [];
            for (var i = 0,len =$activeImgs.length ; i <len ; i++) {
                var itemId = $activeImgs.eq(i).attr('id');
                data.push(itemId);
            }
            //var spriteId = $active.find('img').attr('id');
            WebAPI.post('/factory/projSprite/remove/' + AppConfig.project.id , data).done(function (result) {
                if (result.status === 'OK') {
                    $active.remove();
                    _this.$deletePrvt.hide();
                    //_this.btnOK.hide();
                    _this.successAlert(I18n.resource.mainPanel.materalPanel.materalRepeat.DELETE_OK);
                }
            });
        });
    };

    MaterialModal.prototype.loadImage = function (id, src, callback) {
        var imgLoad = new window.Image();
        //当图片成功加载到浏览器缓存
        imgLoad.onload = function (e) {
            if (typeof (imgLoad.readyState) == 'undefined') {
                imgLoad.readyState = 'undefined';
            }
            if ((imgLoad.readyState == 'complete' || imgLoad.readyState == 'loaded') || imgLoad.complete) {
                callback({ 'id': id, 'src': src, 'msg': 'ok' });
            } else {
                //imgLoad.onreadystatechange(e);ie8及以下版本会出现
            }
        };
        imgLoad.onerror = function (e) {
            callback({ 'id': id, 'msg': 'error' });
        };
        imgLoad.src = src;
    };

    //图片加载回调函数
    MaterialModal.prototype.loadResult = function (data) {
        var currentObj = document.getElementById('' + data.id);
        data = data || {};
        if (typeof (data.msg) != 'undefined') {
            if (data.msg == 'ok') {
                if (currentObj) {
                    $(currentObj).addClass('photoLoad');
                    currentObj.src = data.src;
                }
            } else {
                if (currentObj) {
                    currentObj.src = '/static/images/home/yellowDot.png';
                    $(currentObj).addClass('noImg photoLoad');
                }
            }
        }
    };

    // 重置容器
    MaterialModal.prototype.reset = function () {
        this.$sourceCtn.children().remove();

        this.$photoUnload.hide();
        this.$addPhoto.hide();
        this.$addPrvtPhoto.hide();
        this.$usePage.hide();
        this.$deletePrvt.hide();
        this.$deletePage.hide();
        this.$deleteLayer.hide();
        this.$deleteWidget.hide();
        this.$editWidget.hide();
        this.$deletePub.hide();
        this.$batchApplyPage.hide();
        this.$addTemplate.hide();
        this.$editPage.hide();
        this.$editLayer.hide();
    };

    MaterialModal.prototype.initPages = function () {
        var _this = this;
        var $pageBox = undefined;

        this.reset();
        // 需要默认显示的按钮
        this.$addTemplate.show();

        //todo 缓兵之计
        /*if (this.pageCtn.length !== 0) {
            _this.showPage(this.pageCtn, _this.$usePage, _this.$deletePage, 'page');
            //initPhoto(privateMaterial);
        } else {*/
            WebAPI.get('/factory/material/get/page').done(function (data) {
                _this.pageCtn = data;
                _this.showPage(data, [_this.$usePage, _this.$deletePage, _this.$editPage, _this.$batchApplyPage]);
            });
        /*}*/

        //删除页面
        this.$deletePage.off('click').click(function () {
            var $active = _this.$sourceCtn.find('.active');
            var pubMateId = { 'ids': [] };
            pubMateId.ids.push($active.attr('id'));
            WebAPI.post('/factory/material/remove', pubMateId).done(function (result) {
                if (result.status === 'OK') {
                    $active.remove();
                    _this.$usePage.hide();
                    _this.$deletePage.hide();
                    _this.$batchApplyPage.hide();
                }
            });
        });
        //编辑页面
        this.$editPage.off('click').click(function () {
            var pageId = _this.$sourceCtn.find('.active').attr('id');
            var page = (function () {
                if (!_this.pageCtn || _this.pageCtn.length == 0) return;
                for (var i = 0; i < _this.pageCtn.length; i++) {
                    if (_this.pageCtn[i]._id === pageId) {
                        return _this.pageCtn[i];
                    }
                }
                return null;
            }(pageId));
            var content = page.content;

            if (page.type === 'PageScreen' || page.type === 'page') {
                TemplateEditorModal.show({
                    js: content.js,
                    template: typeof content.template === 'string' ? content.template : JSON.stringify(content.template)
                }, function (code) {
                    try{
                        JSON.parse(code.template);
                        content.template = code.template;
                        content.js = code.js;
                    }catch(e){
                        alert(I18n.resource.mainPanel.materalPanel.materalRepeat.FORMAT_LOG);
                        return false;
                    }

                    if (content) { 
                        var data = {
                            _id: pageId,
                            content: $.extend(false, content, {
                                template: code.template,
                                js: code.js
                            })
                        };
                        WebAPI.post('/factory/material/edit', data).done(function (result) {

                        }).fail(function () {

                        }).always(function () {

                    });
                }
                });
            }
        });
        //使用页面
        this.$usePage.off('click').click(function () {
            var pageId = _this.$sourceCtn.find('.active').attr('id');
            var page = (function () {
                if (!_this.pageCtn || _this.pageCtn.length == 0) return;
                for (var i = 0; i < _this.pageCtn.length; i++) {
                    if (_this.pageCtn[i]._id === pageId) {
                        return _this.pageCtn[i];
                    }
                }
                return null;
            }(pageId));
            var content = page.content;

            TemplateEditorModal.show({
                js: content.js,
                template: content.template
            }, function () {

            });
        });

        // 批量生成
        this.$batchApplyPage.off('click').click(function () {
            var pageId = _this.$sourceCtn.find('.active').attr('id');
            var page = (function () {
                if (!_this.pageCtn || _this.pageCtn.length == 0) return;
                for (var i = 0; i < _this.pageCtn.length; i++) {
                    if (_this.pageCtn[i]._id === pageId) {
                        return _this.pageCtn[i];
                    }
                }
                return null;
            }(pageId));
            var content = page.content;

            TemplateBatchEditorModal.show({
                template: ['[', content.template, ']'].join('')
            }, function () {

            });
        });

        // 新建模板
        this.$addTemplate.off('click').click(function () {
            TemplateEditorModal.show({}, function () {

            });
        });
    };
    MaterialModal.prototype.initLayers = function () {
        var _this = this;
        this.reset();

        //todo 缓兵之计
        /*if (this.layerCtn.length !== 0) {
            _this.showPage(this.layerCtn, _this.$usePage, _this.$deleteLayer, 'layer');
        } else {*/
            WebAPI.get('/factory/material/get/layer').done(function (data) {
                _this.layerCtn = data;
                _this.showPage(data, [_this.$usePage, _this.$deleteLayer, _this.$editLayer]);
            });
        /*}*/
        //删除图层
        this.$deleteLayer.off('click').click(function () {
            var $active = _this.$sourceCtn.find('.active');
            var pubMateId = { 'ids': [] };
            pubMateId.ids.push($active.attr('id'));
            WebAPI.post('/factory/material/remove', pubMateId).done(function (result) {
                if (result.status === 'OK') {
                    $active.remove();
                    _this.$usePage.hide();
                    _this.$deleteLayer.hide();
                    _this.successAlert(I18n.resource.mainPanel.materalPanel.materalRepeat.DELETE_OK);
                }
            });
        });
        //编辑图层
        this.$editLayer.off('click').click(function () {
            var layerId = _this.$sourceCtn.find('.active').attr('id');
            var attr = ''
            var layer = (function () {
                if (!_this.layerCtn || _this.layerCtn.length == 0) return;
                for (var i = 0; i < _this.layerCtn.length; i++) {
                    if (_this.layerCtn[i]._id === layerId) {
                        return _this.layerCtn[i];
                    }
                }
                return null;
            }(layerId));
            if (layer.type === 'layer') {
                var content = JSON.stringify(layer.content);
                EditorModal.show(content, false, function (newContent) {
                    try{
                        layer.content = JSON.parse(newContent);
                    }catch(e){
                        alert(I18n.resource.mainPanel.materalPanel.materalRepeat.FORMAT_LOG);
                        return true;
                    }

                    if (layer.content) {
                        var data = {
                            _id: layerId, content: layer.content
                        }
                        WebAPI.post('/factory/material/edit', data).done(function (result) {

                        }).fail(function () {

                        }).always(function () {

                        });
                    }
                });
            }
        });
        //使用图层
        this.$usePage.off('click').click(function () {
            var $itemActive = _this.materiaModal.find('.active');
            var activeImgId = $itemActive.attr('id');
            var datas = _this.layerCtn;
            for (var i = 0; i < datas.length; i++) {
                if (datas[i]._id === activeImgId) {
                    typeof _this.onChosenCallback === 'function' && 
                        _this.onChosenCallback(datas[i]);
                    break;
                }
            }
            _this.materiaModal.hide();
            $('#mainframe').removeClass('blur');
        });
    };
    MaterialModal.prototype.initWidgets = function (filter) {
        var _this = this;
        this.reset();

        // 显示“新增模板”按钮
        this.$addTemplate.show();

        //todo 缓兵之计
        /*if (this.widgetCtn.length !== 0) {
            _this.showPage(this.widgetCtn, _this.$usePage, _this.$deleteWidget, 'widget');
        } else {*/
            WebAPI.get('/factory/material/get/widget').done(function (data) {
                if (filter) {
                    filter = 'widget.'+filter;
                    data = data.filter(function (row) {
                        return row.type === filter;
                    });    
                }
                _this.widgetCtn = data;
                _this.showPage(data, [_this.$usePage, _this.$deleteWidget, _this.$editWidget]);
            });
        /*}*/

        // 新增模板
        this.$addTemplate.off('click').click(function () {
            var $widgitNameModal = $('<div class="modal fade" id="widgitNameModal">\
              <div class="modal-dialog">\
                <div class="modal-content">\
                  <div class="modal-header">\
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>\
                    <h4 class="modal-title">控件</h4>\
                  </div>\
                  <div class="modal-body">\
                        <div class="form-group form-goupCy">\
                            <label for="widgetName" class="col-sm-2 control-label">模板名称:</label>\
                            <div class="col-sm-10">\
                                <input type="text" class="form-control" id="widgetName" i18n="placeholder=mainPanel.exportModal.EXPORT_INFO">\
                            </div>\
                        </div>\
                        <div class="form-group form-goupCy">\
                            <label for="widgetType" class="col-sm-2 control-label">模板类型:</label>\
                            <div class="col-sm-10">\
                                <select class="form-control" id="widgetType"><option value="text">文本控件</option><option value="button">按钮控件</option><option value="html">HTML容器控件</option></select>\
                            </div>\
                        </div>\
                        <div class="form-group" id="wrongInfo">\
                        </div>\
                  </div>\
                  <div class="modal-footer">\
                    <button type="button" class="btn btn-default" data-dismiss="modal">取消</button>\
                    <button type="button" class="btn btn-primary" id="nameSub">确定</button>\
                  </div>\
                </div>\
              </div>\
            </div>');
            var $materiaModalWrap = $('#materiaModalWrap');
            $('#widgitNameModal').remove();
            $materiaModalWrap.append($widgitNameModal);
            $widgitNameModal.modal('show');
            $('#nameSub').on('click',function () {
                var widgetName = $('#widgetName').val();
                var $wrongInfo = $('#wrongInfo');
                var widgetType = 'widget.HtmlText';
                var widgetTypeSign = $('#widgetType').val();
                if (widgetTypeSign === 'text') {
                    widgetType = 'widget.HtmlText';
                } else if (widgetTypeSign === 'button') {
                    widgetType = 'widget.HtmlButton';
                } else if (widgetTypeSign === 'html') {
                    widgetType = 'widget.HtmlContainer';
                }
                if (widgetName === '') {
                    alert('请输入模板名称！');
                } else {
                    $widgitNameModal.modal('hide');
                    var _id = ObjectId();
                    var data = {
                        _id: _id,
                        name: widgetName,
                        content: (widgetTypeSign === 'text' || widgetTypeSign === 'button') ? { html: '', style: '', js: '' } : { html: '', css: '', js: '' },
                        creator: AppConfig.account,
                        time: new Date().format('yyyy-MM-dd HH:mm:ss'),
                        group: '',
                        'public': 1,
                        type: widgetType
                    };
                    WebAPI.post('/factory/material/save', data).done(function (result) {
                        if (result.status === 'OK') {
                            _this.materiaModal.find('.widgets').trigger('click');
                        }
                    }).always(function () {

                    });
                    CodeEditorModal.show({}, function (code) {
                        var codeCopy ;
                        if (widgetTypeSign === 'text' || widgetTypeSign === 'button') {
                            codeCopy = {
                                style: code.css || ''
                            };
                        } else {
                            codeCopy = code;
                        }
                        var widget = {
                            _id: _id,
                            content: codeCopy
                        };
                        WebAPI.post('/factory/material/edit', widget).done(function (result) {
                            if (result.status === 'OK') {
                                _this.materiaModal.find('.widgets').trigger('click');
                            }
                        }).always(function () {

                        });
                    });
                }
            });
        });

        // 删除控件
        this.$deleteWidget.off('click').click(function () {
            var $active = _this.$sourceCtn.find('.active');
            var pubMateId = { 'ids': [] };
            pubMateId.ids.push($active.attr('id'));
            WebAPI.post('/factory/material/remove', pubMateId).done(function (result) {
                if (result.status === 'OK') {
                    $active.remove();
                    _this.$usePage.hide();
                    _this.$deleteWidget.hide();
                    _this.$editWidget.hide();
                    _this.successAlert(I18n.resource.mainPanel.materalPanel.materalRepeat.DELETE_OK);
                }
            });
        });

        //编辑控件
        this.$editWidget.off('click').click(function () {
            var widgetId = _this.$sourceCtn.find('.active').attr('id');
            var widget = (function(){
                if(!_this.widgetCtn || _this.widgetCtn.length == 0) return;
                for(var i = 0; i < _this.widgetCtn.length; i++){
                    if(_this.widgetCtn[i]._id === widgetId){
                        return _this.widgetCtn[i];
                    }
                }
                return null;
            }(widgetId));
            var content = widget.content;
            var type = 'html';

            if (widget.type.indexOf('HtmlContainer') === -1) {
                content = {
                    css: content['style'] || ''
                }
                type = 'style';
            }
            CodeEditorModal.show(content, function (code) {
                var data;
                if(type == 'style') {
                    widget.content.style = code.css;
                } else if(type == 'html') {
                    widget.content = code;
                }
                data = {
                    _id: widgetId,
                    content: widget.content
                };
                WebAPI.post('/factory/material/edit', data).done(function(result) { 

                }).fail(function () {

                });
            });
        });
        
        //使用控件
        this.$usePage.off('click').click(function () {
            var $itemActive = _this.materiaModal.find('.active');
            var activeImgId = $itemActive.attr('id');
            var datas = _this.widgetCtn;

            for (var i = 0; i < datas.length; i++) {
                if (datas[i]._id === activeImgId) {

                    //TODO 测试confirm
                    confirm(I18n.resource.mainPanel.materalPanel.buttonMateral.USE_COPY, function () {
                        typeof _this.onChosenCallback === 'function' &&
                        _this.onChosenCallback(datas[i], true);
                    }, function () {
                        typeof _this.onChosenCallback === 'function' &&
                        _this.onChosenCallback(datas[i], false);
                    });

                    break;
                }
            }
            _this.materiaModal.hide();
            $('#mainframe').removeClass('blur');
        });
    };

    MaterialModal.prototype.successAlert = function (alertCon) {
        var _this = this;
        var alertContent = alertCon || '';
        this.materiaModal.find('.alert-success').css('display', 'inline-block').html(alertCon);
        setTimeout(function () { _this.materiaModal.find('.alert-success').hide(); }, 1500);
    };

    MaterialModal.prototype.initPubMeta = function () {
        var _this = this;
        var $photoItemBox = $('<div class="row photoItemBox" id="photoItemBox"></div>');
        var $animItemBox = $('<div class="row animItemBox"></div>');
        var upData = {};

        this.reset();
        // 需要默认显示的按钮
        this.$photoUnload.show();
        this.$sourceCtn.append($photoItemBox).append($animItemBox);
        //todo 缓兵之计
        /*if (this.store.publicMaterial.length !== 0) {
            _this.showPhoto(this.store.publicMaterial, $photoItemBox, _this.$addPrvtPhoto, _this.$deletePub);
        } else {*/
            WebAPI.get('/factory/material/get/image').done(function (result) {
                _this.store.publicMaterial = result;
                _this.showPhoto(result, [$photoItemBox, $animItemBox], _this.$addPrvtPhoto, _this.$deletePub);
                _this.usePriPhoto('pubPhoto');
            });
        /*}*/
        
        //删除公共素材
        this.$deletePub.off('click').click(function () {
            //_this.deleteMaterial(_this.store.publicMaterial, _this.$addPrvtPhoto, _this.$deletePub);
            var $activeImgs = _this.$sourceCtn.find('.active img');
            var $active = _this.$sourceCtn.find('.active');
            var pubMateId = {'ids':[]};
            for (var j = 0,len=$activeImgs.length; j < len; j++) {
                var itemId = $activeImgs.eq(j).attr('id');
                pubMateId.ids.push(itemId);
            }
            WebAPI.post('/factory/material/remove', pubMateId).done(function (result) {
                if (result.status === 'OK') {
                    $active.remove();
                    _this.$addPrvtPhoto.hide();
                    _this.$deletePub.hide();
                    _this.successAlert(I18n.resource.mainPanel.materalPanel.materalRepeat.DELETE_OK);
                }
            });
        });
        //添加到私有素材事件
        this.$addPrvtPhoto.off('click').click(function () {
            var $activeImgs = _this.$sourceCtn.find('.active img');
            var $active = _this.$sourceCtn.find('.active');
            var data = [];
            for (var i = 0, len = $activeImgs.length; i < len; i++) {
                var itemId = $activeImgs.eq(i).attr('id');
                data.push(itemId);
            }
            WebAPI.post('/factory/projSprite/add/' + AppConfig.project.id , data).done(function (result) {
                if (result.status === 'OK') {
                    _this.store.privateMaterial = [];
                    $('.active').removeClass('active');
                    _this.$addPrvtPhoto.hide();
                    _this.$deletePub.hide();
                    _this.successAlert(I18n.resource.mainPanel.materalPanel.materalRepeat.ADD_OK);
                }
            });
        });
        //筛选符合规则的图片
        function filterImg(files) {
            var arrFiles = [];
            for (var i = 0, len = files.length; i < len; i++) {
                var file = files[i];
                if (!/(gif|jpg|png|jpeg)$/i.test(file.type)) {
                    alert(I18n.resource.mainPanel.materalPanel.publicMateral.UPLOAD_INFO);
                } else {
                    if (file.size > 614400) {
                        alert(I18n.resource.mainPanel.materalPanel.publicMateral.UPLOAD_INFO_TIP);
                    } else {
                        arrFiles.push(file);
                    }
                }
            }
            return arrFiles;
        };
        //读取并编辑符合规则的图片
        function readImage(files, imgsLoadSuccess) {
            var image = new Image();
            var $imgFilterBox = $('#imgFilterBox');
            var file;
            var imgInfoArr = [];
            var count = 0,i=0;
            var len = files.length;
            var imgFileCellTpl = '<div class="formSingle clearfix">\
                        <div class="imgCheck col-sm-2">\
                            <div class="imgCheckBox"><img src="{src}"/></div>\
                        </div>\
                        <div class="imgInfos col-sm-9">\
                            <div class="form-group">\
                                <label for="inputName" class="col-sm-1 control-label">Name:</label>\
                                <div class="col-sm-11">\
                                    <input type="text" class="form-control" id="inputName_{i}" placeholder="write name">\
                                </div>\
                            </div><div class="form-group">\
                                <label class="col-sm-1 control-label">Type:</label>\
                                <label class="radio-inline radio-inline_{i}">\
                                    <input type="radio" name="inlineRadioOptions_{i}" id="inlineRadio1_{i}" value="option1" checked> static\
                                </label>\
                                <label class="radio-inline radio-inline_{i} ">\
                                    <input type="radio" name="inlineRadioOptions_{i}" id="inlineRadio2_{i}" class="inlineRadio" value="option2"> animation\
                                </label>\
                            </div>\
                            <div id="radioAnimation_{i}" class="clearfix radioAnimation">\
                                <div class="form-group animationInfo">\
                                    <label for="inputWidth" class="col-sm-3 control-label">Frame:</label><div class="col-sm-8">\
                                        <input type="text" class="form-control" id="inputFrame_{i}" placeholder="write frame">\
                                    </div><span></span>\
                                </div>\
                                <div class="form-group animationInfo">\
                                    <label for="inputInterval" class="col-sm-3 control-label">Interval:</label><div class="col-sm-8">\
                                        <input type="text" class="form-control" id="inputInterval_{i}" placeholder="write interval">\
                                    </div><span>ms</span>\
                                </div>\
                            </div>\
                        </div>\
                    </div>';
            //for (var i = 0; i < len; i++) {
            //建立编辑页面
            var editImgInfo=function(){
                var reader = new FileReader();
                file = files[i];
                if (file){
                    reader.readAsDataURL(file);
                    reader.onload = function (_file) {
                        image.src = _file.target.result;
                        image.onload = function () {
                            imgInfoArr.push({
                                pw: this.width,
                                ph: this.height
                            });
                            count += 1;
                            if (count === len) {
                                imgsLoadSuccess(imgInfoArr, files);
                            } else if (count<len) {
                                editImgInfo();
                            }
                            //imgsLoadSuccess(imgInfo, i);
                        //return imgInfo;
                        };
                        image.onerror = function () {
                            alert('Invaild file type' + file.type);
                        };
                        $imgFilterBox.append(imgFileCellTpl.formatEL({
                            src: image.src,
                            i: i
                        }));
                        i++;
                    };
                }
            }
            editImgInfo();
            //}
        };
        //为成功上传的图片建立dom对象
        function imgsLoadSuccess(imgInfoArr, imgStandardArr) {
            var imgContentArr = [];
            var $formModal = $('#formModal');//模态框
            var $fileUpload = $('#fileUpload');
            $formModal.modal('show');
            $formModal.off('hide.bs.modal').on('hide.bs.modal',function(){//每次隐藏模态框，清空处理一次图片路径
                        $fileUpload.replaceWith( $fileUpload = $fileUpload.clone(true));
                    });
            var $inputSelect = $formModal.find('.radio-inline');
            //动画模式被选中时
            $inputSelect.off('click').on('click', function () {
                var $radioAnimation = $(this).parents('.imgInfos').find('.radioAnimation');
                if ($('.inlineRadio').is(":checked")) {//animation被选中,弹出width和interval
                    $radioAnimation.show();
                } else {
                    $radioAnimation.hide();
                }
            });
            $formModal.off('shown.bs.modal').on('shown.bs.modal', function () {//弹出模态框
                $('#buttonOk').off('click').on('click', function () {//点击OK按钮
                    for (var j = 0, len = imgStandardArr.length; j < len; j++) {
                        var imgContent = {
                            interval: 0,
                            list: [],
                            name: '',
                            time: new Date().format('yyyy-MM-dd'),
                            creator: AppConfig.userProfile['fullname']
                        };
                        imgContent.w = imgInfoArr[j].pw;
                        imgContent.h = imgInfoArr[j].ph;
                        if ($('#inlineRadio2_' + j).is(":checked")) {//animation被选中
                            imgContent.name = $('#inputName_' + j).val();//改值
                            imgContent.pf = parseInt($('#inputFrame_' + j).val());//图片的帧数
                            imgContent.pw = parseInt(imgContent.w / imgContent.pf);//图片的单帧宽度
                            imgContent.interval = parseFloat($('#inputInterval_' + j).val());//图片的每帧的毫秒数
                            imgContent.list = [];
                            for (var i = 0; i < imgContent.pf; i++) {
                                imgContent.list.push(i * imgContent.pw, 0, imgContent.pw, imgContent.h);
                            }
                            //imgContent.list = $('#inputWidth').val().split(',').map(function (row) {return parseFloat(row);});
                            //submit();//ajax
                        } else {
                            imgContent.name = $('#inputName_' + j).val();//改值
                            //submit();//ajax
                        }
                        imgContentArr.push(imgContent);
                    }
                    submit();
                    $('#formModal').modal('hide');//隐藏模态框
                });
                function submit() {
                    for (var i = 0, len = imgStandardArr.length; i < len; i++) {
                        var formData = new FormData();
                        var id = ObjectId();
                        var count = 0;
                        imgContentArr[i].id = id;
                        formData.append('_id', id);
                        formData.append('name', imgContentArr[i].name + '.' + imgStandardArr[i].type.substring(6));
                        formData.append('creator', JSON.parse(localStorage.getItem('userInfo')).name);
                        formData.append('time', new Date().format('yyyy-MM-dd'));
                        formData.append('public', 1);
                        formData.append('group', []);
                        formData.append('type', 'image');
                        formData.append('content', JSON.stringify(imgContentArr[i]));
                        formData.append('image', imgStandardArr[i]);
                        formData.append('w', imgContentArr[i].w);
                        formData.append('h', imgContentArr[i].h);
                        $.ajax({
                            type: 'POST',
                            url: '/factory/material/saveform',
                            data: formData,
                            cache: false,
                            processData: false,  // 告诉jQuery不要去处理发送的数据
                            contentType: false,// 告诉jQuery不要去设置Content-Type请求头
                            success: function (data) {
                                _this.store.publicMaterial = [];
                                var standId = data.split('/')[4].split('.')[0];
                                if (count < imgStandardArr.length) {
                                    for (var j = 0, len = imgContentArr.length; j < len;j++){
                                        if (imgContentArr[j].id === standId) {
                                            _this.showPhoto([{ _id: imgContentArr[j].id, name: imgContentArr[j].name + '.' + imgStandardArr[j].name.split('.')[1], content: { url: 'http://images.rnbtech.com.hk/' + data, interval: imgContentArr[j].interval } }], [$photoItemBox, $animItemBox], _this.$addPrvtPhoto, _this.$deletePub);
                                            break;
                                        }
                                    }
                                    count++;
                                }
                            },
                            error: function (data) {
                                console.log(data);
                            }
                        });
                    }
                }
            });
        }
        //上传图片事件
        $('#fileUpload').off('change').change(function (e) {
            var imgFilterHtml;
            var imgCheck = e.target.files || e.dataTransfer.files;
            var imgStandardArr = filterImg(imgCheck);
            var $imgFilterBox = $('#imgFilterBox');
            $imgFilterBox.children().remove();
            //为每个图片添加索引
            for (var i = 0, file; file = imgStandardArr[i]; i++) {
                file.index = i;
            }
            readImage(imgStandardArr, imgsLoadSuccess);
        });
    };

    MaterialModal.prototype.close = function () {
        this.$sourceCtn = null;
        //this.btnOK = null;
        this.materiaModal = null;
        this.$photoUnload = null;
        this.$addPhoto = null;
        this.$addPrvtPhoto = null;
        this.$usePage = null;
        this.$deletePrvt = null;
        this.$deletePage = null;
        this.$deleteLayer = null;
        this.$deleteWidget = null;
        this.$deletePub = null;
        this.$batchApplyPage = null;
        this.$addTemplate = null;

        this.store = null;
        this.pageCtn = null;
        this.layerCtn = null;
        this.widgetCtn = null;
        this.onChosenCallback = null;
    };
    window.MaterialModal = new MaterialModal();
}());
(function () {
    function ReleaseModal() {
        this.idFlag = undefined;
        this.pageId = undefined;
    }

    ReleaseModal.prototype.show=function(id,pageId){
        var _this = this;
        this.idFlag = id;
        this.pageId = pageId?pageId:'';
        this.showModal();
    };

    ReleaseModal.prototype.showModal = function () {
        var _this = this;

        WebAPI.get('/static/app/WebFactory/scripts/screens/page/modals/releaseModal/releaseModal.html')
        .done(function (resultHtml) {
            if (resultHtml) {
                $('#mainframe').parent().append(resultHtml);

                // 初始化项目列表下拉框
                _this.initDropDownList();

                // 绑定事件
                _this.attachEvents();

                $('#releaseModal').modal('show');
                I18n.fillArea($('#releaseModal').fadeIn());
            }
        });
    };

    ReleaseModal.prototype.initDropDownList = function () {
        var arrHtml = ['<option value="-1" i18n="mainPanel.releaseRepeat.SELECT"></option>'];//请选择
        var $relProj = $('#relProj');
        var $projNameBox = $('.projNameBox');

        arrHtml = AppConfig.projectList.map(function (row) {
            return '<option value="{id}">{name_cn}</option>'.formatEL(row);
        });

        $relProj.html(arrHtml.join(''));
        if (this.idFlag === 'lkRelease') {
            $relProj.prepend('<option value="newProject" i18n="mainPanel.releaseRepeat.NEW_PROJECT"></option>');//新项目
            if ($relProj.val() === 'newProject') {
                $projNameBox.show();
                $('#relPName').val(AppConfig.project.cnName);
            }
        } else {
            $projNameBox.hide();
        }
    };

    ReleaseModal.prototype.attachEvents = function () {
        var _this = this;
        var $releaseModal = $('#releaseModal');
        var $relProj = $('#relProj');

        //发布事件
        $releaseModal.find('.directRelease').off('click').click(function () {
            var $this = $(this);
            $releaseModal.find('.releaseFst').hide();
            $releaseModal.find('.releaseSnd').show();
            $releaseModal.find('.modal-title').html(I18n.resource.mainPanel.releaseRepeat.RELEASE_TITLE);
            $this.html(I18n.resource.mainPanel.releaseRepeat.TITLE);

            $relProj.change(function () {
                var $projNameBox = $('.projNameBox');
                if ($(this).val() === 'newProject' && _this.idFlag === 'lkRelease') {
                    $projNameBox.show();
                    $('#relPName').val(AppConfig.project.cnName);
                } else {
                    $projNameBox.hide();
                }
            });

            $this.off('click').click(function () {
                var relProjVal = $('#relProj').val();
                var projId = Number(relProjVal) ? Number(relProjVal) : relProjVal;
                var password = $('#relPass').val();
                var $errTip = $releaseModal.find('.wrongPromt');
                var relPName = $('#relPName').val();
                var project;

                if (projId === -1) {
                    $errTip.html(I18n.resource.mainPanel.releasePage.RELEASE_INFO_TIP);
                    return;
                }

                AppConfig.projectList.some(function (row) {
                    if (row.id === projId) {
                        project = row;
                        return true;
                    }
                    return false;
                });

                if (project) {
                    if (password === '') {
                        $errTip.html(I18n.resource.mainPanel.releasePage.RELEASE_INFO);
                        return;
                    }
                } else {
                    if (password === '') {
                        $errTip.html(I18n.resource.mainPanel.releaseProject.RELEASE_INFO);
                        return;
                    }
                }
                // 清除错误信息
                $errTip.html('');
                //if (_this.idFlag === 'lkRelease') {
                if (relProjVal === 'newProject') {
                    projId = -1;//发布为新项目时将projId设为-1
                }
                if (_this.idFlag === 'lkRelease') { 
                    if (relPName === '') {
                        $errTip.html('项目名称不能为空！');
                        return;
                    }
                }
                if (password !== '') { 
                    _this.publish(projId, _this.pageId, password, relPName);
                    $this.attr('disabled', 'disabled');
                    Spinner.spin($('#mainframe')[0]);
                }
                //} else if (_this.idFlag === 'lkReleasePage') {
                    //if(_this.pageId!==''){
                    //    _this.pagePublish(projId,_this.pageId);
                    //}
                //}
            });
        });
        $releaseModal.off('hidden.bs.modal').on('hidden.bs.modal', function () {
            $('#releaseModalWrap').remove();
        });
    };

    ReleaseModal.prototype.publish = function (tProjId, pageId, password, relPName) {
        var data = pageId?{
            sourceId: pageId,
            targetId: pageId,
            projId: tProjId,
            password: password,
            userId: AppConfig.userId,
            type: 1//0项目1页面
        } : {
            sourceId: AppConfig.project.id,
            targetId: tProjId,
            userId: AppConfig.userId,
            password: password,
            userId: AppConfig.userId,
            projName: relPName,
            type: 0
        };

        WebAPI.post('/factory/publish', data).done(function(rs) {
            if (rs.status === 'OK') {
                alert(I18n.resource.mainPanel.releaseRepeat.OK);
            } else {
                alert(rs.msg || I18n.resource.mainPanel.releaseRepeat.NO);
            }
        }).always(function () {
            $('#releaseModal').modal('hide');
            $('.directRelease').removeAttr('disabled');
            Spinner.stop();
        });
    };
    ReleaseModal.prototype.close = function () {
        this.idFlag = null;
    };

    window.ReleaseModal = new ReleaseModal();
}());
;(function (exports) {

    function TemplateEditorModal() {
        this.$modalWrap = null;

        this.callback = null;
    }

    +function () {
        
        // 显示组件
        this.show = function (data, callback) {
            var _this = this;
            var promise = $.Deferred();

            data = data || {};
            this.callback = callback;

            // 如果之前实例化过，直接 append 到页面上
            if (this.$modalWrap) {
                this.$modalWrap.appendTo(document.body);
                promise.resolve();
            } else {
                 // 如果没有实例化过，则进行实例化操作
                WebAPI.get('/static/app/WebFactory/scripts/screens/page/modals/templateEditorModal/templateEditorModal.html')
                .done(function (html) {
                    _this.init(html);
                    promise.resolve();
                });
            }

            promise.done(function () {
                // 初始化编辑器
                _this.initEditor(data);
            });
        };

        // 组件初始化
        this.init = function (html) {
            var element = HTMLParser(html);
            
            this.$modalWrap = $(element);
            this.$modal = $('#templateEditorModal', this.$modalWrap);
            this.$formResult = $('#formResult', this.$modal);
            // textareas
            this.$taVar = $('#idCodeVar', this.$modal);
            this.$taTemplate = $('#idCodeTemplate', this.$modal);
            this.$taJs = $('#idCodeJs', this.$modal);
            // 关闭按钮
            this.$btnClose = $('.close', this.$modal);
            // 运行代码按钮
            this.$btnRunCode = $('#btnRunCode', this.$modal);
            // 保存并退出按钮
            this.$btnSaveAndExit = $('#btnSaveAndExit', this.$modal);

            // 刷新模板变量按钮
            this.$btnVarRefresh = $('#btnVarRefresh', this.$modal);

            this.$modalWrap.appendTo('body');

            // 绑定 modal 事件
            this.attachEvents();
        };

        this.initEditor = function (data) {
            var options = {
                    lineNumbers: true,
                    extraKeys: {
                        Tab: function(cm) {
                            var spaces = Array(cm.getOption("indentUnit") + 1).join(" ");
                            cm.replaceSelection(spaces);
                        }
                    },
                    mode: 'application/json'
                },
                variables;

            // Editor 初始化
            // Variables
            if (!this.cmVar)  {
                this.cmVar = CodeMirror.fromTextArea(this.$taVar[0], options);
            }
            // 从模板的代码中提取出模板变量
            this.extractTemplateVariables(data.template);
            
            // Template
            if (!this.cmTemplate) {
                this.cmTemplate = CodeMirror.fromTextArea(this.$taTemplate[0], options);
            }
            if (data.template) { this.cmTemplate.doc.setValue(data.template); }

            // Code
            if (!this.cmJs) {
                this.cmJs = CodeMirror.fromTextArea(this.$taJs[0], $.extend(false, options, {
                    mode: 'text/javascript'
                }));
            }
            if (data.js) { this.cmJs.doc.setValue(data.js); }
        };

        /**
         * 从模板代码中提取模板变量，刷新模板变量代码区域
         * @param  {string} code 模板代码
         */
        this.extractTemplateVariables = function (code) {
            var pattern, match;
            var rs = {};
            var varCode, variables;

            if (!code) return false;

            pattern = /<#\s*(\w*?)\s*#>/img;
            varCode = this.cmVar.doc.getValue();
            variables = varCode ? JSON.parse(varCode) : {};

            // 查找符合 '<#...#>' 模式的字符串片段
            while (match = pattern.exec(code)) {
                // 模板变量的值合并，这样是为了防止用户自己填写的变量值被覆盖
                rs[match[1]] = variables[match[1]] || '';
            }

            // 将变量结果显示到指定代码区域
            this.cmVar.doc.setValue( JSON.stringify(rs) );

            return true;
        };

        // 绑定事件
        this.attachEvents = function () {
            var _this = this;

            // “关闭”按钮事件
            this.$btnClose.off('click').on('click', function () {
                _this.hide();
            });

            // “运行代码”按钮事件
            this.$btnRunCode.off('click').on('click', function () {
                // 代码预览
                _this.preview(_this.getCode());
            });

            // “保存和退出”按钮事件
            this.$btnSaveAndExit.off('click').on('click', function () {
                typeof _this.callback === 'function' && _this.callback(_this.getCode());
                _this.hide();
            });

            // 更新模板变量
            this.$btnVarRefresh.off('click').on('click', function () {
                _this.extractTemplateVariables(_this.getTemplateCode());
            });
        };

        this.preview = function (code) {
            // 表单赋值
            this.$taVar.val(code.variable);
            this.$taTemplate.val(code.template);
            this.$taJs.val(code.js);

            // this.$formResult[0].submit();
        };

        this.getCode = function () {
            return {
                variable: this.getVarCode(),
                js: this.getJsCode(),
                template: this.getTemplateCode()
            }
        };

        this.getVarCode = function () {
            if (this.cmVar) {
                return this.cmVar.doc.getValue();
            }
            return '';
        };

        this.getTemplateCode = function () {
            if (this.cmTemplate) {
                return this.cmTemplate.doc.getValue();
            }
            return '';
        };

        this.getJsCode = function () {
            if (this.cmJs) {
                return this.cmJs.doc.getValue();
            }
            return '';
        };

        // 组件状态还原
        this.reset = function () {
            // 重置回调函数
            this.callback = null;
            // 重置编辑器内容
            if (this.cmVar) { this.cmVar.doc.setValue(''); }
            if (this.cmTemplate) { this.cmTemplate.doc.setValue(''); }
            if (this.cmJs) { this.cmJs.doc.setValue(''); }
        };

        // 隐藏组件
        this.hide = function () {
            if (this.$modalWrap) {
                this.reset();
                this.$modalWrap.detach();
            }
        };

    }.call(TemplateEditorModal.prototype);

    exports.TemplateEditorModal = new TemplateEditorModal();
} (window));
;(function (exports) {

    function TemplateBatchEditorModal() {
        this.$modalWrap = null;

        this.callback = null;
    }

    +function () {
        
        // 显示组件
        this.show = function (data, callback) {
            var _this = this;
            var promise = $.Deferred();

            // 参数格式化
            data = data || {};
            this.callback = callback;

            // 如果之前实例化过，直接 append 到页面上
            if (this.$modalWrap) {
                this.$modalWrap.appendTo(document.body);
                promise.resolve();
            } else {
                 // 如果没有实例化过，则进行实例化操作
                WebAPI.get('/static/app/WebFactory/scripts/screens/page/modals/templateBatchEditorModal/templateBatchEditorModal.html')
                .done(function (html) {
                    _this.init(html);
                    promise.resolve();
                });
            }

            promise.done(function () {
                // 初始化编辑器
                _this.initEditor(data);
            });
        };

        // 组件初始化
        this.init = function (html) {
            var element = HTMLParser(html);
            
            this.$modalWrap = $(element);
            this.$modal = $('#templateBatchEditorModal', this.$modalWrap);
            this.$formResult = $('#formResult', this.$modal);
            // textareas
            this.$taDs = $('#idCodeDs', this.$modal);
            this.$taTemplate = $('#idCodeTemplate', this.$modal);
            // 关闭按钮
            this.$btnClose = $('.close', this.$modal);
            // 运行代码按钮
            this.$btnRunCode = $('#btnRunCode', this.$modal);
            // 保存并退出按钮
            this.$btnSaveAndExit = $('#btnSaveAndExit', this.$modal);

            this.$modalWrap.appendTo('body');

            // 绑定 modal 事件
            this.attachEvents();
        };

        this.initEditor = function (data) {
            var options = {
                lineNumbers: true,
                extraKeys: {
                    Tab: function(cm) {
                        var spaces = Array(cm.getOption("indentUnit") + 1).join(" ");
                        cm.replaceSelection(spaces);
                    }
                }
            }
            // Editor 初始化
            // DataSource
            if (!this.cmDs) {
                this.cmDs = CodeMirror.fromTextArea(this.$taDs[0], $.extend(false, options, {
                    mode: 'application/json'
                }));
            }
            if (data.ds) { this.cmDs.doc.setValue(data.ds); }

            // Template
            if (!this.cmTemplate) {
                this.cmTemplate = CodeMirror.fromTextArea(this.$taTemplate[0], $.extend(false, options, {
                    mode: 'application/json'
                }));
            }
            if (data.template) { this.cmTemplate.doc.setValue(data.template); }
        };

        // 绑定事件
        this.attachEvents = function () {
            var _this = this;

            // 关闭按钮事件
            this.$btnClose.off('click').on('click', function () {
                _this.hide();
            });

            // 运行代码按钮事件
            this.$btnRunCode.off('click').on('click', function () {
                // 代码预览
                _this.preview(_this.getCode());
            });

            this.$btnSaveAndExit.off('click').on('click', function () {
                typeof _this.callback === 'function' && _this.callback(_this.getCode());
                _this.hide();
            });
        };

        this.preview = function (code) {
            // 表单赋值
            this.$taDataSource.val(code.ds);
            this.$taTemplate.val(code.template);
            this.$taJs.val(code.js);

            // this.$formResult[0].submit();
        };

        this.getCode = function () {
            return {
                ds: this.getDsCode(),
                template: this.getTemplateCode()
            }
        };

        this.getDsCode = function () {
            if (this.cmDs) {
                return this.cmDs.doc.getValue();
            }
            return '';
        };

        this.getTemplateCode = function () {
            if (this.cmTemplate) {
                return this.cmTemplate.doc.getValue();
            }
            return '';
        };

        // 组件状态还原
        this.reset = function () {
            // 重置回调函数
            this.callback = null;
            // 重置编辑器内容
            if (this.cmDs) { this.cmDs.doc.setValue(''); }
            if (this.cmTemplate) { this.cmTemplate.doc.setValue(''); }
        };

        // 隐藏组件
        this.hide = function () {
            if (this.$modalWrap) {
                this.reset();
                this.$modalWrap.detach();
            }
        };

    }.call(TemplateBatchEditorModal.prototype);

    exports.TemplateBatchEditorModal = new TemplateBatchEditorModal();
} (window));
/**
 * PageScreen
 */
(function () {
    var _this;

    function PageScreen(page, screen) {
        _this = this;
        this.page = page;
        this.screen = screen;

        // 工具箱容器
        this.toolbarCtn = null;
        // 图层面板容器
        this.layerPanelCtn = null;
        // 属性面板容器
        this.propPanelCtn = null;
        // 历史记录面板容器
        this.historyPanelCtn = null;
        // 中间内容区域容器
        this.windowCtn = null;
        // 绘图区域容器
        this.painterCtn = null;
        // 数据源面板容器
        this.dataSourcePanelCtn = null;

        this.layout = {
            layerPanel: null,
            propPanel: null,
            historyPanel: null,
            windowPanel: null,
            dataSourcePanel: null
        };

        this.$pageNav = null;

        this.toolbar = null;
        this.painter = null;
        this.layerPanel = null;
        this.propPanel = null;
        this.historyPanel = null;
        this.dataSourcePanel = null;

        this.store = {};
        this.store.layerModelSet = new ModelSet();
        this.store.widgetModelSet = new ModelSet();
        this.store.imageModelSet = new ModelSet();
        this.store.snapshotModelSet = new ModelSet();

        this.historyController = null;
    }

    PageScreen.prototype = {
        show: function () {
            Spinner.spin(document.body);
            // 初始化 页面导航条 先
            this.initNav();

            if (this.page.layerList.length === 0) {
                this.init();
                // 初始化 worker
                this.initSync();
                // 新增 HTML 图层和背景图层
                this.store.layerModelSet.append([
                    new NestedModel( window.layers.html.getEmptyEntity() ),
                    new NestedModel( window.layers.bg.getEmptyEntity() )
                ]);
                // 对于新增的页面，默认添加背景和Html图层，并立即同步一次
                this.screen.syncWorker.sync();

                // 初始化 "历史记录" 控制器
                this.initHistoryController();
                // 清除 Spinner
                Spinner.stop();
                return;
            }

            WebAPI.get('/factory/getPageDetail/'+this.page.id+'/1').done(function (rs) {
                // 这里用不到 rs.page
                if(!rs || !rs.data) {
                    Log.error('get page detail faild!');
                }
                // 初始化控件
                this.init();
                // 将数据转换成可监控的数据
                this.updateModelSet(rs.data);
                // 初始化 worker
                this.initSync();
                // 初始化 "历史记录" 控制器
                this.initHistoryController();
                // 清除 Spinner
                Spinner.stop();
            }.bind(this));
        },
        initNav: function () {
            this.$pageNav = $('#pageNav');
            this.$pageTopTools = $('#pageTopTools');

            $('a', this.$pageTopTools).hide();
            // 显示页面名称
            $('#lkName', this.$pageNav)
                .text(this.page.name).show();
            // 数据同步链接
            $('#lkSync', this.$pageTopTools)
                .off('click')
                .click(function () {
                    _this.screen.syncWorker.sync();
                })
                .show();
            //撤销
            $('#lkUndo').off('click').click(function() {
                var index, len;
                index = _this.historyController.state.index();
                len = _this.historyController.store.records.length();
                index = Math.min(Math.max(0, index-1), len-1);
                _this.historyController.state.index(index);
            }).show();
            //重做
            $('#lkRedo').off('click').click(function() {
                var index, len;
                index = _this.historyController.state.index();
                len = _this.historyController.store.records.length();
                index = Math.min(Math.max(0, index + 1), len -1);
                _this.historyController.state.index(index);
            }).show();
            //发布页面
            $('#lkReleasePage')
                .off('click')
                .click(function () {
                    ReleaseModal.show('lkReleasePage', _this.page.id);
            }).show();
            // 预览链接
            $('#lkPreview', this.$pageTopTools).off('click').click(function () {
                _this.screen.syncWorker.sync(function () { $('#lkPreview').attr('href', '/factory/preview/' + _this.page.id) });
                //$(this).attr('href', '/factory/preview/' + AppConfig.userId + '/' + _this.page.id);
            }).show();

            // 显示 Nav
            this.$pageNav.show();
            this.$pageTopTools.show();
            $('[data-toggle="tooltip"]').tooltip({trigger:'hover'});
        },
        initHistoryController: function () {
            this.historyController = new window.HistoryController(this);
            this.historyController.init();
        },
        initSync: function () {
            // 注册 ctrl+s 保存事件
            window.addEventListener('keydown', this.onKeyDownActionPerformed, false);
            // 注册 beforeunload 事件
            window.addEventListener('beforeunload', this.onBeforeUnloadActionPerformed, false);

            this.screen.syncWorker.initLayersData(this.getLayersData());
            this.screen.syncWorker.initWidgetsData(this.getWidgetsData());
        },
        initLayoutDOM: function () {
            // 创建属性面板容器
            this.propPanelCtn = document.createElement('div');
            this.propPanelCtn.id = 'propPanel';
            this.propPanelCtn.setAttribute('caption', I18n.resource.mainPanel.attrPanel.attrTab.TITLE); //'属性'
            this.propPanelCtn.dataset.type = 'PropPanel';

            // 创建历史记录面板容器
            this.historyPanelCtn = document.createElement('div');
            this.historyPanelCtn.id = 'historyPanel';
            this.historyPanelCtn.setAttribute('caption', I18n.resource.mainPanel.attrPanel.attrTab.HISTORY_RECORD);//'历史记录'
            this.historyPanelCtn.dataset.type = 'HistoryPanel';

            // 创建图层记录面板容器
            this.layerPanelCtn = document.createElement('div');
            this.layerPanelCtn.id = 'layerPanel';
            this.layerPanelCtn.setAttribute('caption', I18n.resource.mainPanel.layerPanel.TITLE);//'图层'
            this.layerPanelCtn.dataset.type = 'LayerPanel';

            // 创建数据源面板容器
            this.dataSourcePanelCtn = document.createElement('div');
            this.dataSourcePanelCtn.id = 'dataSourcePanel';
            this.dataSourcePanelCtn.setAttribute('caption', I18n.resource.mainPanel.attrPanel.attrTab.DATA_SOURCE);//'数据源'
            this.dataSourcePanelCtn.dataset.type = 'DataSourcePanel';

            // 中间内容区域面板容器
            this.windowCtn = document.createElement('div');
            this.windowCtn.id = 'windows';
            
            this.toolbarCtn = document.createElement('div');
            this.toolbarCtn.id = 'toolbar';
            this.toolbarCtn.className = 'toolbar';
            this.windowCtn.appendChild(this.toolbarCtn);

            this.painterCtn = document.createElement('div');
            this.painterCtn.className = 'window';
            this.windowCtn.appendChild(this.painterCtn);
        },
        initLayout: function () {
            var dockManager = this.screen.layout.dockManager;
            var documentNode = this.screen.layout.documentNode;
            var pageNode = this.screen.layout.pageNode;

            var propPanel, layerPanel, historyPanel, windowPanel, dataSourcePanel;
            var windowNode, layerNode, historyNode, dataSourceNode;

            this.initLayoutDOM();

            this.layout.propPanel = propPanel = new dockspawn.PanelContainer(this.propPanelCtn, dockManager);
            this.layout.layerPanel = layerPanel = new dockspawn.PanelContainer(this.layerPanelCtn, dockManager);
            this.layout.historyPanel = historyPanel = new dockspawn.PanelContainer(this.historyPanelCtn, dockManager);
            this.layout.windowPanel = windowPanel = new dockspawn.PanelContainer(this.windowCtn, dockManager);
            this.layout.dataSourcePanel = dataSourcePanel = new dockspawn.PanelContainer(this.dataSourcePanelCtn, dockManager);

            dataSourceNode = dockManager.dockFill(pageNode, dataSourcePanel);
            historyNode = dockManager.dockFill(pageNode, historyPanel);
            layerNode = dockManager.dockFill(pageNode, layerPanel, .2);
            dockManager.dockDown(layerNode, propPanel, .4);
            windowNode = dockManager.dockFill(documentNode, windowPanel);
        },
        init: function () {
            // 初始化布局
            this.initLayout();

            // 初始化 painter
            if(this.painter) {
                this.painter.close();
            }
            window.painter = this.painter = new GPainter(this, {
                pageWidth: this.page.width,
                pageHeight: this.page.height,
                // 0 - full screen
                // 1 - show in center
                display: this.page.display
            });
            this.painter.show();

            // 初始化 toolbar
            if(this.toolbar) {
                this.toolbar.close();
            }

            this.toolbar = new Toolbar(this);
            this.toolbar.show();

            // 初始化 图层面板
            this.initLayerPanel();

            // 初始化 属性面板
            this.initPropPanel();

            //初始化 历史记录面板
            this.initHistoryPanel();

            // 初始化 数据源面板
            this.initDataSourcePanel();

            // 绑定图层监控事件
            this.bindLayerModelSetOb();
        },
        initLayerPanel: function () {
            if(this.layerPanel) {
                this.layerPanel.close();
                this.layerPanel = null;
            }
            if( $(this.layerPanelCtn).is(':visible') ) {
                this.layerPanel = new LayerPanel(this);
                this.layerPanel.show();
            }
            this.layerPanelCtn.removeEventListener('dock.tabPage.changed', this.onTabPageChanged);
            this.layerPanelCtn.addEventListener('dock.tabPage.changed', this.onTabPageChanged, false);
        },
        initPropPanel: function () {
            if(this.propPanel) {
                this.propPanel.close();
                this.propPanel = null;
            }
            if( $(this.propPanelCtn).is(':visible') ) {
                this.propPanel = new PropertyPanel(this);
                this.propPanel.show();
            }
            this.propPanelCtn.removeEventListener('dock.tabPage.changed', this.onTabPageChanged);
            this.propPanelCtn.addEventListener('dock.tabPage.changed', this.onTabPageChanged, false);
        },
        initHistoryPanel: function () {
            if(this.historyPanel) {
                this.historyPanel.close();
                this.historyPanel = null;
            }
            if( $(this.historyPanelCtn).is(':visible') ) {
                this.historyPanel = new HistoryPanel(this);
                this.historyPanel.show();
            }
            this.historyPanelCtn.removeEventListener('dock.tabPage.changed', this.onTabPageChanged);
            this.historyPanelCtn.addEventListener('dock.tabPage.changed', this.onTabPageChanged, false);
        },
        initDataSourcePanel: function () {
            if(this.dataSourcePanel) {
                this.dataSourcePanel.close();
                this.dataSourcePanel = null;
            }
            if( $(this.dataSourcePanelCtn).is(':visible') ) {
                this.dataSourcePanel = new DataSourcePanel(this);
                this.dataSourcePanel.show();
            }
            this.dataSourcePanelCtn.removeEventListener('dock.tabPage.changed', this.onTabPageChanged);
            this.dataSourcePanelCtn.addEventListener('dock.tabPage.changed', this.onTabPageChanged, false);
        },
        onKeyDownActionPerformed: function (e) {
            if(e.which === 83 && e.ctrlKey) {
                e.stopPropagation();
                e.preventDefault();
                try {
                    _this.screen.syncWorker.sync();
                } catch (e) {
                    Log.exception(e);                
                }
            }
        },
        onBeforeUnloadActionPerformed: function (e) {
            if (_this.screen.syncWorker.hasChange()) {
                e.returnValue = I18n.resource.screen.UNSAVED_PAGE_TIP;
                return e.returnValue;
            }
        },
        onTabPageChanged: function (e) {
            var isShow = e.detail;
            var type = e.currentTarget.dataset.type;

            switch(type) {
                case 'LayerPanel':
                    if(isShow) {
                        if(_this.layerPanel === null) {
                            _this.layerPanel = new LayerPanel(_this);
                        }
                        _this.layerPanel.show();
                    } else {
                        _this.layerPanel.hide();
                    }
                    break;
                case 'PropPanel':
                    if(isShow) {
                        if(_this.propPanel === null) {
                            _this.propPanel = new PropPanel(_this);
                        }
                        _this.propPanel.show();
                    } else {
                        _this.propPanel.hide();
                    }                 
                    break;
                case 'HistoryPanel':
                    if(isShow) {
                        if(_this.historyPanel === null) {
                            _this.historyPanel = new HistoryPanel(_this);
                        }
                        _this.historyPanel.show();
                    } else {
                        _this.historyPanel.hide();
                    }
                    break;
                case 'DataSourcePanel':
                    if(isShow) {
                        if(_this.dataSourcePanel === null) {
                            _this.dataSourcePanel = new DataSourcePanel(_this);
                        }
                        _this.dataSourcePanel.show();
                    } else {
                        _this.dataSourcePanel.hide();
                    }
                    break;
            }
        },
        updateModelSet: function (data) {
            var layers, widgets, images, snapshots;
            var activeWidgetIds = [], activeLayerIds = [];

            // 删除的时候需要先删除 widgets，再删除 layer
            if (data.widgets) {
                // 保存当前选中的控件
                activeWidgetIds = this.painter.state.activeWidgets().map(function (row) {
                    return row.store.model._id();
                });

                this.painter.setActiveWidgets();
                this.store.widgetModelSet.removeAll();
            }
            if (data.layers) {
                // 保存当前选中的图层
                activeLayerIds = this.painter.state.activeLayers().map(function (row) {
                    return row.store.model._id();
                });
                this.store.layerModelSet.removeAll();
            }

            // 先添加图片，再添加 layers 和 widgets
            if (data.images) {
                images = data.images.map(function (row) {
                    // 创建 Model
                    var model = new Model(row);
                    return model;
                }, this);
                this.store.imageModelSet.removeAll();
                this.store.imageModelSet.append(images);
            }

            // 添加的时候需要先添加 layers，再添加 widgets
            if (data.layers) {
                layers = data.layers.map(function (row) {
                    // 创建 Model
                    var model = new NestedModel(row);
                    return model;
                }, this);
                this.store.layerModelSet.append(layers);

                // 恢复选中的图层
                if (activeLayerIds.length) {
                    this.painter.setActiveLayers(activeLayerIds);
                }
            }
            if (data.widgets) {
                widgets = data.widgets.map(function (row) {
                    // 创建 Model
                    var model = new NestedModel(row);
                    return model;
                }, this);
                this.store.widgetModelSet.append(widgets);
                
                // 恢复选中的控件
                if (activeWidgetIds.length) {
                    this.painter.setActiveWidgets(activeWidgetIds);
                }
            }

            if (data.shots) {
                snapshots = data.shots.map(function (row) {
                    // 创建 Model
                    var model = new Model(row);
                    return model;
                }, this);
                this.store.snapshotModelSet.removeAll();
                // 默认将当前页面添加进去
                this.store.snapshotModelSet.append( new Model({
                    _id: ObjectId(),
                    name: this.page.name,
                    content: $.deepClone({
                        layers: this.store.layerModelSet.serialize(),
                        widgets: this.store.widgetModelSet.serialize()
                    })
                }) );
                this.store.snapshotModelSet.append(snapshots);
            }
        },
        bindLayerModelSetOb: function () {
            this.store.layerModelSet.addEventListener('insert', this.updateLayerList, this);
            this.store.layerModelSet.addEventListener('remove', this.updateLayerList, this);
            this.store.layerModelSet.addEventListener('move', this.updateLayerList, this);
        },
        updateLayerList: function () {
            this.page.layerList = Object.keys(this.store.layerModelSet.toMap('_id'));

            // 更新图层显示顺序
            this.painter.updateLayerOrder();
        },
        resize: function(){
            var styles = window.getComputedStyle(this.painter.domContainer);
            var width = parseInt(this.painter.pageWidth);
            var height = parseInt(this.painter.pageHeight);
            this.painter.stage.width(parseInt(styles.width));
            this.painter.stage.height(parseInt(styles.height));
            this.painter.resizePage(width, height);
        },
        getLayersData: function () {
            return this.store.layerModelSet;
        },
        getWidgetsData: function () {
            return this.store.widgetModelSet;
        },
        close: function () {
            var dockManager = this.screen.layout.dockManager;

            // 隐藏 页面导航条
            this.$pageNav.hide();
            this.$pageTopTools.hide();

            // 页面关闭时，立即同步一次，防止页面与页面之间的数据互相影响
            this.screen.syncWorker.sync();
            // 清除 ctrl+s 保存事件
            window.removeEventListener('keydown', this.onKeyDownActionPerformed);

            // 清除同步 layerList 的事件,注意此事件必须在 painter.close 前被清除,否则会出现 layerList 被清空的问题
            this.store.layerModelSet.removeAllListeners('insert');
            this.store.layerModelSet.removeAllListeners('remove');
            this.store.layerModelSet.removeAllListeners('move');
            
            // 清除历史记录控制器
            this.historyController && this.historyController.close();
            
            // 删除 toolbar
            this.toolbar.close();
            this.toolbar = null;
            this.toolbarCtn.innerHTML = '';

            // 删除 painter
            this.painter.close();
            this.painter = null;
            this.painterCtn.innerHTML = '';

            // 销毁 PageScreen 的所有面板
            dockManager.requestUndock(this.layout.propPanel);
            dockManager.requestUndock(this.layout.layerPanel);
            dockManager.requestUndock(this.layout.historyPanel);
            dockManager.requestUndock(this.layout.windowPanel);
            dockManager.requestUndock(this.layout.dataSourcePanel);
            this.layout = {};

            // 将 factoryScreen 的 page 引用置空
            this.screen.page = null;
        }
    };

    namespace('factory.screens').PageScreen = PageScreen;
} ());
// factory.js - factory 入口

;(function (exports, screens) {

    var delayTimer = null;
    var DELAY_TIME = 300;

    function FactoryScreen() {
        // 页面面板容器
        this.pagePanelCtn = null;

        // 窗口管理器
        this.layout = {
            dockManager: null,
            documentNode: null,
            pageNode: null
        }

        this.page = null;
        this.layerPanel = null;
        this.propPanel = null;
        this.historyPanel = null;
        this.windowPanel = null;
        this.pagePanel = null;
        this.dataSourcePanel = null;

        // 项目相关数据
        this.project = {};

        // 数据同步者
        this.syncWorker = null;

        // 初始化
        this.init();
        // 初始化布局
        this.initLayout();
        // 初始化数据同步者
        this.initSyncWorker();
    }

    FactoryScreen.prototype.show = function (projectId, projectCnName) {
        var _this = this;
        Spinner.spin(document.body);
        this.project = AppConfig.project = {
            id: projectId,
            cnName: projectCnName
        };

        // 预加载步骤
        this.preLoad().done(function () {
            // 初始化页面管理面板
            _this.initPagePanel();
            _this.pagePanel.show();
            Spinner.stop();
        });
    };

    FactoryScreen.prototype.preLoad = function () {
        var promise = $.Deferred();
        
        return promise.resolve().then(function () {
            // 预加载数据源
            return WebAPI.get('/analysis/datasource/getDsItemInfo/' + AppConfig.userId + '/null').done(function (result) {
                AppConfig.datasource = new DataSource({
                    store: {
                        group: result
                    }
                });
            });
        });
    };

    FactoryScreen.prototype.init = function () {
        this.initNav();
    };

    FactoryScreen.prototype.initNav = function () {
        var _this = this;

        // 顶部用户菜单的相关操作初始化
        document.querySelector('#userAccount').innerHTML = window.AppConfig.account;

        // 注销
        $('#lkLogOut').off('click').on('click', function () {
            WebAPI.get('/logout/' + AppConfig.userId).always(function () {
                AppConfig = {};
                localStorage.removeItem("userInfo");
                window.location.href = '/factory';
            });
        });

        // 切换项目
        $('#lkSwitchProject,#lkProjectLogo').off('click').click(function () {
            _this.close();
            $('#mainframe').hide();
            $('#modalframe').show();
        });

        // 发布项目
        $('#lkRelease').off('click').click(function () {
            ReleaseModal.show('lkRelease');
        });
    };

    FactoryScreen.prototype.initLayoutDOM = function () {
        // 创建页面管理面板容器
        this.pagePanelCtn = document.createElement('div');
        this.pagePanelCtn.id = 'pagePanel';
        this.pagePanelCtn.setAttribute('caption', I18n.resource.mainPanel.attrPanel.attrTab.PAGE_MANAGE);//'页面管理'
        this.pagePanelCtn.dataset.type = 'PagePanel';
    };

    FactoryScreen.prototype.initLayout = function () {
        var _this = this;
        var divDockManager = document.querySelector('#panels');
        var dockManager = this.layout.dockManager = new dockspawn.DockManager(divDockManager);

        var onResized = function(e) {
            dockManager.resize(window.innerWidth - (divDockManager.clientLeft + divDockManager.offsetLeft), window.innerHeight - (divDockManager.clientTop + divDockManager.offsetTop));

            if (delayTimer) {
                window.clearTimeout(delayTimer);
                delayTimer = null;
            }

            delayTimer = window.setTimeout(function () {
                if(_this.page && typeof _this.page.resize === 'function'){
                    _this.page.resize();
                }
                window.clearTimeout(delayTimer);
                delayTimer = null;
            }, DELAY_TIME);
        };
        var documentNode, pagePanel;

        dockManager.initialize();
        // 自适应
        window.onresize = onResized;
        onResized(null);

        this.initLayoutDOM();

        pagePanel = new dockspawn.PanelContainer(this.pagePanelCtn, dockManager);
        this.layout.documentNode = documentNode = dockManager.context.model.documentManagerNode;
        this.layout.pageNode = dockManager.dockRight(documentNode, pagePanel, .2);
    };

    FactoryScreen.prototype.initSyncWorker = function () {
        this.syncWorker && this.syncWorker.close();
        this.syncWorker = new SyncWorker(this);
        this.syncWorker.init();
    };

    FactoryScreen.prototype.initPagePanel = function () {
        this.pagePanel && this.pagePanel.close();
        this.pagePanel = new PagePanel(this);
        this.pagePanel.init();
    };

    FactoryScreen.prototype.showPage = function (page) {
        var modalClass;
        if (this.page) {
            this.page.close();
            this.page = null;
        }

        modalClass = screens[page.type];

        if (!modalClass) {
            Log.warn('page type not found: "' + page.type + '"');
            return;
        }

        this.page = new modalClass(page, this);
        this.page.show();
    };

    FactoryScreen.prototype.getPagesData = function () {
        return this.pagePanel.getPagesData();
    };

    FactoryScreen.prototype.getLayersData = function () {
        if (!this.page) return null;
        return this.page.getLayersData();
    };

    FactoryScreen.prototype.getWidgetsData = function () {
        if (!this.page) return null;
        return this.page.getWidgetsData();
    };

    FactoryScreen.prototype.close = function () {
        // 销毁当前页面
        this.page && this.page.close();
        this.page = null;

        // 停止数据同步
        this.syncWorker && this.syncWorker.close();

        // 销毁所有停靠窗口
        this.layout.dockManager.context.model.rootNode.container.destroy();
    };

    exports.FactoryScreen = FactoryScreen;
} ( namespace('factory'), namespace('factory.screens') ));

// factoryTpl.js - factory 模板入口
;(function (exports, SuperClass, screens) {

    function FactoryTplScreen() {
        SuperClass.apply(this, arguments);
    }

    FactoryTplScreen.prototype = Object.create(SuperClass.prototype);

    +function () {

        /** @override */
        this.init = function () {
            SuperClass.prototype.init.apply(this, arguments);
        };

        this.initNav = function () {
            // 隐藏 LOGO
            document.querySelector('#divLogoWrap').style.display = 'none';
            // 隐藏用户菜单
            document.querySelector('#pageNav').style.display = 'none';
        };

        /** @override */
        this.show = function (params, type) {
            var _this = this;
            Spinner.spin(document.body);

            // 预加载步骤
            this.preLoad().done(function () {
                this.showTemplatePage(params, type);
                Spinner.stop();
            }.bind(this));
        };

        this.showTemplatePage = function (params, type) {
            if (type === 'report') {
                this.page = new screens.FacReportTplScreen(params, this);
                this.page.show();
            }
        };

        /** @override */
        this.initLayoutDOM = function () {};

        /** @override */
        this.initLayout = function () {
            var divDockManager = document.querySelector('#panels');
            var dockManager = this.layout.dockManager = new dockspawn.DockManager(divDockManager);

            var onResized = function(e) {
                dockManager.resize(window.innerWidth - (divDockManager.clientLeft + divDockManager.offsetLeft), window.innerHeight - (divDockManager.clientTop + divDockManager.offsetTop));
            };

            dockManager.initialize();
            // 自适应
            window.onresize = onResized;
            onResized(null);

            this.layout.documentNode = dockManager.context.model.documentManagerNode;
        };

        this.close = function () {
            this.page = null;

            // 停止数据同步
            this.syncWorker && this.syncWorker.close();

            // 销毁所有停靠窗口
            this.layout.dockManager.context.model.rootNode.container.destroy();

            // 恢复LOGO
            document.querySelector('#divLogoWrap').style.display = '';
            // 恢复用户菜单
            document.querySelector('#pageNav').style.display = '';

            $('#mainframe').hide();
            $('#modalframe').show();
        };

    }.call(FactoryTplScreen.prototype);

    exports.FactoryTplScreen = FactoryTplScreen;

} ( namespace('factory'), namespace('factory.FactoryScreen'), namespace('factory.screens') ));
;(function (exports, FactoryTplScreen) {

    var clickTimer = null;
    var CLICK_DELAY = 500;

    function TemplateList(container) {
        this.close();

        this.store = {};
        this.container = container;
    }

    +function () {

        this.tplItemTpl = '<div class="tpl-item" data-id="{_id}" data-type="{type}"><span class="glyphicon glyphicon-file"></span>\
        <span class="tpl-item-name" title="{name}">{name}</span></div>';

        this.show = function () {
            this.render();
        };

        this.render = function () {
            // 显示报表级别模板
            this.addTplPanel('report', '报表模板');
        };

        this.addTplPanel = function (type, title) {
            var wrapTpl = '<div class="panel-heading">'+title+'\
            <span class="glyphicon glyphicon-plus-sign btn-add-tpl" title="新增"></span>\
            <span class="glyphicon glyphicon-remove-sign btn-remove-tpl" title="删除"></span>\
            </div><div class="panel-body">{items}</div>';
            var arrHtml = [];

            this.__loadData(type).done(function (rs) {
                var domWrap;
                rs.forEach(function (row) {
                    arrHtml.push(this.tplItemTpl.formatEL(row));
                }.bind(this));

                domWrap = document.createElement('div');
                domWrap.className = 'panel panel-default tpl-panel';
                domWrap.id = type + 'TplPanel';
                domWrap.dataset.type = type;

                domWrap.innerHTML = wrapTpl.formatEL({
                    items: arrHtml.join(''),
                    type: type
                });

                this.container.appendChild(domWrap);
                this.attachEvents();
            }.bind(this));
        };

        this.__loadData = function (type) {
            return WebAPI.get('/factory/material/get/'+type).then(function (rs) {
                return this.store[type] = rs;
            }.bind(this));
        };

        this.attachEvents = function () {
            var _this = this;
            var $container = $(this.container);
            var $tplPanel = $('.tpl-panel', $container);

            $tplPanel.find('.btn-add-tpl').off().on('click', function (e) {
                var type = $(this).closest('.tpl-panel')[0].dataset.type;
                _this.addTplItem(type);
            });

            $tplPanel.find('.btn-remove-tpl').off().on('click', function (e) {
                var $item = $tplPanel.find('.tpl-item.on');

                if ($item.length <= 0) {
                    alert('请选择一个模板！');
                    return;
                }
                $item.remove();
                WebAPI.post('/factory/material/remove', {
                    ids: [$item[0].dataset.id]
                }).done(function (rs) {
                    if (rs.status === 'OK') {
                        alert('删除成功！');
                    }
                });
            });

            $tplPanel.on('click', '.tpl-item', function (e) {
                var $this = $(this);
                var ipt;

                if (!$this.hasClass('on')) {
                    $this.siblings('.tpl-item').removeClass('on');
                    $this.addClass('on');
                    clickTimer = window.setTimeout(function () {
                        window.clearTimeout(clickTimer);
                        clickTimer = null;
                    }, CLICK_DELAY);
                    return;
                }

                if (clickTimer) {
                    window.clearTimeout(clickTimer);
                    clickTimer = null;
                    _this.showTemplateScreen({
                        id: this.dataset.id,
                        name: this.querySelector('.tpl-item-name').innerHTML
                    }, this.dataset.type);
                    return;
                }

                clickTimer = window.setTimeout(function () {
                    // 重命名
                    var $spName = $this.children('.tpl-item-name');
                    // rename 逻辑
                    ipt = document.createElement('input');
                    ipt.className = 'ipt-name-editor'
                    ipt.value = $spName.text();
                    ipt.onblur = function () {
                        var params = {};
                        // 如果名称有变动，或者是第一次新建，则进行更新
                        if (this.value !== $spName.text() || 
                            !$this[0].dataset.id) {
                            params = {
                                _id: $this[0].dataset.id,
                                name: this.value,
                                type: $this[0].dataset.type
                            };
                            _this.modifyTplItem(params);
                            $this[0].dataset.id = params._id;
                        }
                        $spName.text(this.value);
                        this.parentNode.removeChild(this);
                        $spName.show();
                    };
                    ipt.onkeyup = function (e) {
                        if (e.which === 13) {
                            this.blur();
                        }
                    };
                    ipt.onclick = function (e) {
                        e.stopPropagation();
                    };

                    $spName.hide();
                    $this.append(ipt);
                    ipt.focus();

                    window.clearTimeout(clickTimer);
                    clickTimer = null;
                }, CLICK_DELAY);
            });

        };

        this.addTplItem = function (type, data) {
            var domPanel = this.container.querySelector('#'+type+'TplPanel');
            var domItemCtn = domPanel.querySelector('.panel-body');
            var isNew = !data;

            // 如果 data 不存在，则进行新增操作
            if (!data) {
                data = {
                    _id: '',
                    name: '未命名',
                    type: type
                };
            }

            var $item = $(this.tplItemTpl.formatEL(data));
            domItemCtn.appendChild($item[0]);

            if (isNew) {
                // 让名称处于可编辑状态
                $('.tpl-item', domItemCtn).removeClass('on');
                $item.addClass('on');
                $item.trigger('click');
            }
        };

        this.modifyTplItem = function (data) {
            var id;
            if (!data._id) {
                data._id = ObjectId();
                data.content = { layouts: [] }
                return WebAPI.post('/factory/material/save', data);
            }
            return WebAPI.post('/factory/material/edit', data);
        };

        this.showTemplateScreen = function (params, type) {

            $('#modalframe').hide();
                I18n.fillArea($('#mainframe').fadeIn());

            if (type === 'report') {
                new FactoryTplScreen().show(params, type);
            }
        };

        this.close = function () {
            this.container = null;
            this.store = null;

            window.onkeyup = null;
        };

    }.call(TemplateList.prototype);

    exports.TemplateList = TemplateList;

} ( namespace('factory.components'), namespace('factory.FactoryTplScreen') ));
var AppConfig = {
        projectId: undefined,
        projectName: undefined,
        userId: undefined,
        account: undefined,
        level: undefined,
        projectList: undefined,
        isMobile: false,
        isFactory: 1,
        isReportConifgMode: 1,
        menu: [],
        chartTheme: theme.Dark
    }; //配置文件


var Spinner = new LoadingSpinner({ color: '#00FFFF' });
var I18n = I18n || undefined;
var I18N_PATH = '/static/app/WebFactory/views/js/i18n/';

$(document).ready(function () {
    initI18n(navigator.language.split('-')[0], false);
});

function initI18n(lang, isForce) {
    InitI18nResource(lang, isForce, I18N_PATH).always(function (rs) {
        I18n = new Internationalization(null, rs);
        new FactoryLogin().show();
    });
};

var FactoryLogin = (function (FactoryScreen, TemplateList) {
    
    function FactoryLogin() {
        this.topArr = [];
        this.$addProj = undefined;
        this.$projectList = undefined;
    }

    FactoryLogin.prototype.show = function () {
        var _this = this;
        $("#selectLanguage a").off('click').click(function (e) {
            initI18n(e.currentTarget.attributes.value.value, true);
            e.preventDefault();
        });
        $('#login').off('click').click(function () {
            _this.login();
        });
        $(document).on("keydown", ".loginBox input", function (event) {
            var e = event || window.event || arguments.callee.caller.arguments[0];
            if (e && e.keyCode == 13) {
                _this.login();
            }
        });
        _this.restorePwd();
        var $userPass = $('#userPass');
        if (I18n.type === 'en') {
            $userPass.css('margin-left', '87px');
        } else {
            $userPass.css('margin-left', '45px');
        }

        // 获取 url 参数
        var token = document.querySelector('#hidToken').value;
        if (token !== '') {
            this.loginTask({
                token: token
            });
        } else {
            I18n.fillArea($('#divFactoryLanguage').fadeIn());
            I18n.fillArea($('#modalLogin').fadeIn());
        }
    };


    FactoryLogin.prototype.login = function () {
        var _this = this;
        var txtName = $("#userName").val(), txtPwd = $("#userPass").val();

        if (!(txtName && txtPwd)) {
            loginFail(I18n.resource.admin.login.LOG_IN_EMPTY);
            return;
        }

        this.loginTask({
            name: txtName,
            pwd: txtPwd
        });
    };

    FactoryLogin.prototype.loginTask = function (loginInfo) {
        var _this = this;
        var $btnLogin = $('#login');
        var loginFail = function (msg) {
            $('.alert').remove();
            new Alert($("#factoryLogin"), "danger", msg).show().close();
            $btnLogin.prop('disabled', false);
        }
        $btnLogin.prop('disabled', false);

        WebAPI.post("/login", loginInfo).then(function (login_result) {
            try {
                if (login_result.status != undefined && login_result.status == true) {
                    if (login_result.projects && login_result.projects.length > 0) {
                        _this.rememberPwd();
                        //添加版本历史
                        window.localStorage.setItem("versionHistory", login_result.version);
                        AppConfig.userId = login_result.id;
                        AppConfig.projectList = login_result.projects;
                        AppConfig.userProfile = login_result.userProfile;
                        AppConfig.account = login_result.userProfile.name;
                        AppConfig.userOfRole = login_result.userProfile.userOfRole;

                        $('#modalLogin').hide();
                        document.onkeydown = null;
                        //$('#modalframe').show();
                        I18n.fillArea($('#modalframe').fadeIn());
                        _this.$projectList = $('#projectList');
                        _this.createPro(login_result.id);
                        _this.createTemlatePanel();

                        _this.attachEvents();                        
                    } else {
                        loginFail("<strong>" + I18n.resource.admin.login.LOG_IN_FAILED + "！</strong> ");
                    }
                } else {
                    loginFail("<strong>" + I18n.resource.admin.login.LOG_IN_FAILED + "！</strong> ");
                }
            } catch (e) {
                loginFail("<strong>" + I18n.resource.admin.login.LOG_IN_FAILED + "！</strong>");
                return false;
            }
        });
    };

    FactoryLogin.prototype.attachEvents = function () {
        var _this = this;
        
        $('#addPro').off('click').click(function () {
            AddProModal.show(_this);
        });

        $('#btnImportProject').off('click').click(function () {
            ImportProjectModal.show(function (project) {
                var $proBox = _this.createProItem(project, AppConfig.userId);
                _this.$projectList.append($proBox);
            });
        });
    };

    FactoryLogin.prototype.rememberPwd = function() {
        if ($("#rememberPass").is(":checked")) {
            localStorage["userInfo"] = JSON.stringify({ name: $("#userName").val(), pwd: $("#userPass").val() });
        }
        else {
            localStorage.removeItem("userInfo");
        }
    };

    FactoryLogin.prototype.restorePwd = function() {
        if (localStorage["userInfo"]) {
            var data = JSON.parse(localStorage["userInfo"]);
            if (data.pwd && data.pwd != "") {
                $("#rememberPass").attr("checked", true);
                $("#userName").val(data.name);
                $("#userPass").val(data.pwd);
            }
        }
    };

    FactoryLogin.prototype.createTemlatePanel = function () {
        this.templateList = new TemplateList(document.querySelector('#tplContainer'));
        this.templateList.show();
    };

    FactoryLogin.prototype.createPro = function (loginResultId) {
        var _this = this;
        var $proBox, item, deleteArr = [], itemLocalList = {};
        var userId = loginResultId;
        var jsonTopArr = JSON.parse(localStorage.getItem('fac_project_topArray_' + userId));
        if (jsonTopArr && jsonTopArr.length !== 0) {
            _this.topArr = jsonTopArr;
        }
        WebAPI.get('/factory/getProjectList/' + userId).done(function (result) {
            var loginResult = [];
            loginResult = result ? result.data : [];
            for (var i = 0; i < loginResult.length; i++) {
                _this.createProItems(i, loginResult);
            }
            for (var k = _this.topArr.length - 1; k >= 0; k--) {
                item = _this.topArr[k];
                $proBox = _this.createProItem(item, userId)
                _this.$projectList.prepend($proBox);
            }
        });

    };

    FactoryLogin.prototype.createProItems = function (i, loginResult) {
        var _this = this;
        item = loginResult[i];
        itemLocalList = {
            id: item.id ? item.id : item._id,
            name_cn: item.name_cn
        };
        $proBox = _this.createProItem(itemLocalList, AppConfig.userId);
        //遍历本地数组中项目，前置
        if (_this.topArr.length !== 0) {
            var isExist = false;
            for (var j = _this.topArr.length - 1; j >= 0; j--) {
                var topArrId;
                topArrId = _this.topArr[j].id;

                if (topArrId == itemLocalList.id) {
                    isExist = true;
                    break;
                    return;
                }
            }
            if (!isExist) {
                _this.$projectList.append($proBox);
            } else {
                $proBox.remove();
                return;
            }
        } else {
            _this.$projectList.append($proBox);
        }
    };


    FactoryLogin.prototype.createProItem = function (item, userId) {
        var _this = this;
        var $projectBox, $thParent;
        $projectBox = $('<div class="divHover proHover" projectId=' + item.id + '>\
                    <span class="glyphicon glyphicon-share-alt exportPro" title=' + I18n.resource.admin.welcom.yourProj.EXPORT + ' id="exportPro' + item.id + '"></span>\
                    <span class="proText"></span><span class="glyphicon glyphicon-upload proTop" title=' +  I18n.resource.admin.welcom.yourProj.TOP + '></span>\
                    <span class="glyphicon glyphicon-remove-sign deletePro" title=' + I18n.resource.admin.welcom.yourProj.DELETE + ' id="deletePro_' + item.id + '"></span>\
                    <span class="glyphicon glyphicon-user editAuth" data-id="' + item.id + '" title=' + I18n.resource.admin.welcom.yourProj.EDIT_AUTH + '></span>\
                    <br style="clear:both"/></div>');
        $projectBox.find('.proText').html(item.name_cn).attr('title', item.name_cn);
        $projectBox.find('.proText').off('click').click(function (e) {
            $('#modalframe').hide();
            //$('#mainframe').show();
            I18n.fillArea($('#mainframe').fadeIn());
            new FactoryScreen().show(item.id, item.name_cn);
        });

        $projectBox.find('.deletePro').off('click').click(function () {
            var $deletePro = $(this);
            var projectId = $deletePro.parent().attr('projectid');
            RemoveProModal.show(_this, projectId);
        });
        $projectBox.find('.proTop').off('click').click(function (e) {
            var transItem;
            $thParent = $(this).parents('.proHover');
            _this.$projectList.prepend($thParent);
            for (var j = 0; j < _this.topArr.length; j++) {
                var tempId;
                tempId = _this.topArr[j].id;

                if (item.id == tempId) {
                    _this.topArr.splice(j, 1);
                }
            }
            _this.topArr.unshift(item);
            localStorage.setItem('fac_project_topArray_' + userId, JSON.stringify(_this.topArr));//把置顶的项目存储到本地内存数组中
        });
        $projectBox.find('.editAuth').off('click').click(function (e) {
            // 查询拥有当前项目的用户
            var projId = this.dataset.id;
            Spinner.spin(document.body);
            WebAPI.get('/factory/getProjectUser/'+projId).done(function (rs) {
                MemberSelectedModal.setState({
                    selectedUser: rs.data
                }).show(function (userList) {
                    if (userList.length <= 0) {
                        alert('请至少选择一个用户！');
                        return;
                    }
                    // 发送请求，更新项目权限
                    WebAPI.post('/factory/updateProjectAuth', {
                        projId: projId,
                        userIds: userList.map(function (row) {
                            return row.id;
                        })
                    });
                });
            }).always(function () {
                Spinner.stop();
            });
        });
        return $projectBox;
    };

    FactoryLogin.prototype.removeProItem = function (projectId) {
        var $removeProModal =$('#removeProModal')
        var password = $('#removePass').val();
        if (password === '') {
            $removeProModal.find('.wrongPromt').html('请填写密码');
        } else {
            $removeProModal.find('.wrongPromt').html('');
            var postData = {
                userId: AppConfig.userId,
                projId: projectId,
                proPass: password
            };
            WebAPI.post('/factory/removeProject/remove', postData).done(function (result) {
                if (result.status === 'OK') {
                    $removeProModal.remove();
                    var arr = JSON.parse(localStorage.getItem('fac_project_topArray_' + AppConfig.userId));
                    if (arr) {
                        if (arr.length!==0) {
                            for (var i = 0; i < arr.length; i++) {
                                if ($('.deletePro').parent('[projectid="' + projectId + '"]').attr('projectid') === arr[i].id) {
                                    arr.splice(i, 1);
                                    localStorage.setItem('fac_project_topArray_' + AppConfig.userId, JSON.stringify(arr));
                                    break;
                                }
                            }
                        }
                        
                    }
                    $('.deletePro').parent('[projectid="' + projectId + '"]').remove();
                } else {
                    new Alert($('.wrongPromt'), 'danger', result.msg).show(1000).close();
                }
            });
        }
    };
    FactoryLogin.prototype.close = function () {
        this.topArr = null;
        this.$addProj = null;
        this.$projectList = null;
    }
    return FactoryLogin;
}( namespace('factory.FactoryScreen'), namespace('factory.components.TemplateList') ));
