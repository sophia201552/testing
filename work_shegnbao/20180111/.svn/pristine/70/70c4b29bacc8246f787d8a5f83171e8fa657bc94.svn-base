import pytestfrom beopWeb.mod_admin import ProjectI18nimport json@pytest.mark.p0@pytest.mark.parametrize(('getProjectI18n_id', 'expected'), [    ("673", {'success': True, 'msg': '', 'code': '1', 'data': {'projectId': 673, 'resource': {'zh': {        'maintenance': {'ENERGY_PAST_OF_THIRTY_DAY': '最近30天能耗趋势', 'DAILY_POWER_CONSUMPTION': '当日总用电',                        'DAILY_POWER_COST': '当日总电费', 'OVER_COOL': '过冷', 'UNQUALIFIED_ITEMS_KPI': 'KPI不达标数量',                        'OVER_HEATED': '过热', 'TEMPERRATURE': '温度', 'ENERGY_TREND_ANALYSIS': '能耗趋势',                        'EQUIPMENT_HEALTH': '设备完好率', 'HUMIDITY': '湿度', 'ENERGY_LAST_THIRTY_DAY': '同比能耗趋势',                        'PRIORITY_FAULTS': '优先处理故障'}}, 'en': {        'maintenance': {'ENERGY_PAST_OF_THIRTY_DAY': 'Last month',                          'DAILY_POWER_CONSUMPTION': 'Daily\xa0Power\xa0Consumption',                          'DAILY_POWER_COST': 'Daily\xa0Power\xa0Cost',                          'OVER_COOL': 'Overcooled',                          'UNQUALIFIED_ITEMS_KPI': 'Unqualified\xa0Items\xa0for\xa0KPI',                          'OVER_HEATED': 'Overheated',                          'TEMPERRATURE': 'Temperature',                          'ENERGY_TREND_ANALYSIS': 'Energy Consumption',                          'EQUIPMENT_HEALTH': 'Equipment Health',                          'HUMIDITY': 'Humidity',                          'ENERGY_LAST_THIRTY_DAY': 'The month before last',                          'PRIORITY_FAULTS': 'Priority Faults'}}}}}),])def test_select_searchUseId(getProjectI18n_id, expected):    rt = ProjectI18n.get_project_i18n(getProjectI18n_id)    rt = json.loads(bytes.decode(rt.data))    assert rt.get("success"), 'actual value is []'    actual_en = rt.get('data').get("resource").get('en').get("maintenance")    actual_zh = rt.get('data').get("resource").get('zh').get("maintenance")    expected_en = expected.get('data').get("resource").get('en').get("maintenance")    expected_zh = expected.get('data').get("resource").get('zh').get("maintenance")    for key in expected_en.keys():        assert expected_en.get(key) in [actual_en.get(key) for key in                                        actual_en.keys()], 'en expected={0} is not in actual'.format(            expected_en.get(key))    for key in expected_zh.keys():        assert expected_zh.get(key) in [actual_zh.get(key) for key in                                        actual_zh.keys()], 'zh expected={0} is not in actual'.format(            expected_zh.get(key))