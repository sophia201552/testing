import React from 'react';
import { connect } from 'react-redux';

import { Tabs, TabPane } from '../../../components/Tabs';
import ElementsTabPane from '../ElementsTabPane';
import TemplateTabPane from '../TemplateTabPane';
import FilesTabPane from '../FilesTabPane';
import ConfigTabPane from '../ConfigTabPane';
import DataSourcePane from '../DataSourcePane';
import { getHelpInfo } from '../../../redux/epics/painter.js';
import HelpInfo from '../../../components/HelpInfo';

import css from './StrategyTree.css';

//props
//width         宽度
//type          home||painter
//strategyId    策略id
class StrategyTree extends React.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      isShowHelps: false
    };
  }
  render(props) {
    const {
      width = '100%',
      strategyId,
      changeTabId,
      selecteddTabId,
      i18n,
      strategyPanelFn,
      selectedItems,
      updateSelectedItems = () => {},
      helpInfo
    } = this.props;
    const { isShowHelps } = this.state;
    return (
      <div id="strategyTree" style={{ width, height: '100%' }}>
        <Tabs
          align="vertical"
          onChange={changeTabId}
          selecteddTabId={selecteddTabId}
          isShowhelpContainer={true}
          toggleHelpWrap={this.toggleHelpWrap.bind(this)}
        >
          <TabPane
            tab={i18n.CATALOG}
            keyId="catalog"
            iconClass="ViewListTree"
          >
            <div
              style={{
                width: '100%',
                height: isShowHelps ? 'calc(100% - 168px)' : '100%'
              }}
            >
              <FilesTabPane
                strategyId={strategyId}
                strategyPanelFn={strategyPanelFn}
              />
            </div>
            {isShowHelps ? (
              <div>
                <HelpInfo isShowHelps={isShowHelps} helpInfo={helpInfo} />
              </div>
            ) : null}
          </TabPane>
          <TabPane
            tab={strategyId ? i18n.ELEMENT : i18n.ATTRIBUTE}
            keyId="props"
            iconClass="SearchAndApps"
          >
            <div
              style={{
                width: '100%',
                height: isShowHelps ? 'calc(100% - 168px)' : '100%'
              }}
            >
              {strategyId ? (
                <ElementsTabPane isShowHelps={isShowHelps} />
              ) : (
                <ConfigTabPane
                  selectedItems={selectedItems}
                  updateSelectedItems={updateSelectedItems}
                />
              )}
            </div>
            {isShowHelps ? (
              <div>
                <HelpInfo isShowHelps={isShowHelps} helpInfo={helpInfo} />
              </div>
            ) : null}
          </TabPane>
          <TabPane
            tab={strategyId ? i18n.DATA : i18n.TEMPLATE}
            keyId="modals"
            iconClass="AppIconDefault"
          >
            <div
              style={{
                width: '100%',
                height: isShowHelps ? 'calc(100% - 168px)' : '100%'
              }}
            >
              {strategyId ? <DataSourcePane /> : <TemplateTabPane />}
            </div>
            {isShowHelps ? (
              <div>
                <HelpInfo isShowHelps={isShowHelps} helpInfo={helpInfo} />
              </div>
            ) : null}
          </TabPane>
          {strategyId ? (
            <TabPane
              tab={i18n.ATTRIBUTE}
              keyId="config"
              iconClass="DeveloperTools"
            >
              <div
                style={{
                  width: '100%',
                  height: isShowHelps ? 'calc(100% - 168px)' : '100%'
                }}
              >
                <ConfigTabPane
                  selectedItems={selectedItems}
                  updateSelectedItems={updateSelectedItems}
                />
              </div>
              {isShowHelps ? (
                <div>
                  <HelpInfo isShowHelps={isShowHelps} helpInfo={helpInfo} />
                </div>
              ) : null}
            </TabPane>
          ) : null}
        </Tabs>
      </div>
    );
  }
  toggleHelpWrap() {
    this.setState({
      isShowHelps: !this.state.isShowHelps
    });
  }
}
const mapDispatchToProps = {
  getHelpInfo
};

const mapStateToProps = function(state) {
  return {
    helpInfo: state.painter.helpInfo
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(StrategyTree);
