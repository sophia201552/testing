var TemperatureSetting = (function () {

    var jqueryMap = {}, stateMap = {
        slider: null
    };

    function TemperatureSetting(heatType,isAnotherColor) {
        this.viewModel = null;
        this.heatType = heatType;
        this.isAnotherColor = isAnotherColor;
    }

    TemperatureSetting.prototype = {
        show: function () {
            var _this = this, text, heatTypeI18n;
            this.init().done(function () {
                heatTypeI18n = I18n.resource.observer.entities[_this.heatType.toUpperCase()];
                text = I18n.resource.observer.entities.TITLE_HEAT_MAP_CONFIGURE.format(heatTypeI18n);
                jqueryMap.$dialogModal.find('#myModalLabel').text(text).end().modal();
            });
        },

        close: function () {
            jqueryMap.$dialogModal.modal('hide');
            if (stateMap.slider && stateMap.slider.destroy) {
                stateMap.slider.destroy();
                stateMap.slider = null;
            }
        },

        init: function () {
            var _this = this;
            return WebAPI.get("/static/views/observer/widgets/temperatureSetting.html").done(function (resultHtml) {
                
                jqueryMap.$dialogContent = $("#dialogContent");
                jqueryMap.$dialogContent.html(resultHtml);
                jqueryMap.$dialogModal = $('#dialogModal');
                _this.renderView();
                _this.attachEvent();
                jqueryMap.$dialogContent.removeClass('modal-lg');
                I18n.fillArea(jqueryMap.$dialogContent);

            });
        },
        renderView: function () {
            var _this = this, defaultMax = 28, defaultMin = 20, defautGradientColor = '0,#3434ff;0.17,#35ffff;0.33,#36fe94;0.5,#6ff71c;0.67,#9fff39;0.83,#ffa922;1,#ff2323;';
            Spinner.spin(jqueryMap.$dialogModal.find('.modal-content')[0]);
            this.loadModel().done(function () {
                var min, max, gradientColor;
                if (_this.viewModel) {
                    min = typeof _this.viewModel.min != 'undefined' && _this.viewModel.min.value != '' ? _this.viewModel.min.value : defaultMin;
                    max = typeof _this.viewModel.max != 'undefined' && _this.viewModel.max.value != '' ? _this.viewModel.max.value : defaultMax;
                    gradientColor = _this.viewModel.gradientColor || defautGradientColor;
                    _this.viewModel.gradientColor = gradientColor;
                } else {
                    min = defaultMin;
                    max = defaultMax;
                    gradientColor = defautGradientColor;
                }
                stateMap.slider = $("#slider-range").ionRangeSlider({
                    min: 10,
                    max: 40,
                    from: min,
                    to: max,
                    type: 'double',//设置类型
                    step: 1,
                    grid: true,
                    grid_num: 6,
                    hide_min_max: true
                }).data("ionRangeSlider");

                if (_this.isAnotherColor) {
                    $('#rangeWrapper .irs-bar').addClass('anotherColor');
                    $('#colorWrapper').addClass('hidden');
                }
                //todo
                if(window.isHtmlHeat3D){
                    $('#rangeWrapper .irs-bar').removeClass('anotherColor');
                    $('#colorWrapper').removeClass('hidden');
                    _this.initGradientColorWrapper(gradientColor);
                }
                //todo end
            }).always(function () {
                Spinner.stop();
            });
        },
        loadModel: function () {
            var _this = this;
            return WebAPI.post('/admin/getColorSetting', {
                userId: AppConfig.userId,
                heatType: _this.heatType
            }).done(function (result) {
                if (result.success) {
                    _this.viewModel = result.data;
                }
            })
        },
        attachEvent: function () {
            var _this = this;
            $('#btnSaveSetting').off().click(function () {
                var $rangeWrapper = $("#rangeWrapper"), minValue = parseFloat($rangeWrapper.find(".irs-from").text()),
                    maxValue = parseFloat($rangeWrapper.find(".irs-to").text());
                if (_this.viewModel && _this.viewModel[_this.heatType]) {
                    _this.viewModel[_this.heatType].min.value = minValue;
                    _this.viewModel[_this.heatType].max.value = maxValue;
                } else {
                    var gradientColor = _this.viewModel&&_this.viewModel.gradientColor||$('#gradientColor').val();
                    _this.viewModel = {};
                    _this.viewModel[_this.heatType] = {
                        "min": {
                            "color": "blue",
                            "value": minValue
                        },
                        "max": {
                            "color": "red",
                            "value": maxValue
                        },
                        "gradientColor": gradientColor
                    }
                }
                Spinner.spin(jqueryMap.$dialogModal.find('.modal-content')[0]);
                WebAPI.post('/admin/setColorSetting', {
                    'setting': _this.viewModel,
                    userId: AppConfig.userId
                }).done(function (result) {
                    if (result.success) {
                        _this.close();
                        Alert.success(ElScreenContainer, I18n.resource.code['2002']).showAtTop(2000);
                    }
                    $(ElScreenContainer).trigger('refreshHeatMap');
                }).always(function () {
                    Spinner.stop();
                })
            });
            $('#gradientColorWrapper').off('click').on('click',function(e){
                var $this = $(this);
                $('.item',$this).remove();
                $('#gradientColor',$this).removeClass('hidden').focus();
            });
            $('#gradientColor').off('blur').on('blur',function(e){
                var values = this.value.split(';').filter(function(v){return v!==''});
                var isError = values.some(function(v){
                    var rs = false;
                    var arr = v.split(',');
                    if(arr.length!=2 || isNaN(Number(arr[0])) || Number(arr[0])<0 || Number(arr[0])>1){
                        rs = true;
                    }
                    try {
                        chroma(arr[1]);
                    } catch (error) {
                        rs = true;
                    }
                    return rs;
                })
                if(Number(values[values.length-1].split(',')[0])!=1){
                    isError = true;
                }
                if(isError){
                    alert('颜色配置格式错误');
                    if(_this.viewModel[_this.heatType]){
                        _this.initGradientColorWrapper(_this.viewModel[_this.heatType].gradientColor);
                    }else{
                        _this.initGradientColorWrapper(_this.viewModel.gradientColor);
                    }
                    
                }else{
                    _this.initGradientColorWrapper(this.value);
                    if(_this.viewModel[_this.heatType]){
                        _this.viewModel[_this.heatType].gradientColor = this.value;
                    }else{
                        _this.viewModel.gradientColor = this.value;
                    }
                }
            });
            $('#gradientColor').off('keydown').on('keydown',function(e){
                if(e.key=="Enter"){
                    $(this).trigger('blur');
                }
            });
        },
        initGradientColorWrapper:function(gradientColor){
            $('#rangeWrapper .irs-bar').css('background','linear-gradient(to right, '+gradientColor.split(';').filter(function(v){return v!==''}).map(function(v){var temp = v.split(','); return temp[1] + ' ' + Number(temp[0])*100 + '%'}).join(',')+')');
            $('#gradientColor').val(gradientColor).addClass('hidden');
            var $wrap = $('#gradientColorWrapper');
            $('.item',$wrap).remove();
            var values = gradientColor.split(';').filter(function(v){return v!==''});
            values.forEach(function(v){
                var arr = v.split(',');
                // $wrap.append('<label class="item">'+arr[0]+'</label>');
                $wrap.append('<div class="item"><label>'+arr[0]+'</label><div class="colorBlock" style="background:'+arr[1]+';"></div></div>');
            });
        }
    };

    return TemperatureSetting;
})();