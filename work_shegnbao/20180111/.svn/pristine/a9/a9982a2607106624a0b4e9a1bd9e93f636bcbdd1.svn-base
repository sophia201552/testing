import React from 'react';
import { connect } from 'react-redux';
import I from 'seamless-immutable';
import { moduleTypes, dataTypes } from '@beopcloud/StrategyV2-Engine/src/enum';
import { DefaultButton } from 'office-ui-fabric-react/lib/Button';
import { DetailsList, Selection } from 'office-ui-fabric-react/lib/DetailsList';
import { Dropdown } from 'office-ui-fabric-react/lib/Dropdown';

import s from './DataExportPanel.css';
const css = (className1, className2 = '') => {
  return className1
    .split(' ')
    .map(v => s[v])
    .concat(className2.split(' '))
    .join(' ')
    .trim();
};

class RenameText extends React.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      isError: false,
      errorMsg: ''
    };
    this._renameItem = this._renameItem.bind(this);
    this._onTextBlur = this._onTextBlur.bind(this);
    this._onTextKeyDown = this._onTextKeyDown.bind(this);
    this._onTextClick = this._onTextClick.bind(this);
    this._onTextChanged = this._onTextChanged.bind(this);
  }
  componentDidMount() {
    const { data } = this.props;
    this.refs.input.value = data.name;
    // this.componentDidUpdate();
  }
  componentDidUpdate() {}
  render() {
    const { dom = [], data } = this.props;
    const { isError, errorMsg } = this.state;
    return (
      <div className={css('RenameText')}>
        <input
          ref="input"
          className={css(`text ${isError ? 'error' : ''}`)}
          onBlur={this._onTextBlur}
          onKeyDown={this._onTextKeyDown}
          onClick={this._onTextClick}
          onChange={this._onTextChanged}
        />
        <label className={css(`errorText ${isError ? '' : 'hide'}`)}>
          {errorMsg}
        </label>
      </div>
    );
  }
  _renameItem(e) {
    e.preventDefault();
    e.stopPropagation();
  }
  _onTextBlur() {
    const {
      data,
      renameItem = () => {},
      verification = () => {
        return { status: true };
      }
    } = this.props;
    let rs = verification(this.refs.input.value);
    if (rs.status) {
      this.setState({ isError: false, errorMsg: '' });
      renameItem(data.key, this.refs.input.value);
    } else {
      this.setState({ isError: true, errorMsg: rs.msg });
    }
  }
  _onTextKeyDown(e) {
    if (e.key == 'Enter') {
      $(this.refs.input).blur();
    }
  }
  _onTextClick(e) {
    e.preventDefault();
    e.stopPropagation();
  }
  _onTextChanged(e) {
    this.setState({ isError: false, errorMsg: '' });
  }
}
class DataExportPanel extends React.Component {
  constructor(props) {
    super(props);
    this._selection = new Selection();
    this.state = {
      items: []
    };
    this._onExportExcel = this._onExportExcel.bind(this);
    this._onActiveItemChanged = this._onActiveItemChanged.bind(this);
  }
  static nameSuffix(nameArr = []) {
    let newNameArr = [];
    let nameSet = new Set();
    const rename = function(name, num, set) {
      if (set.has(name)) {
        let arr = name.split('_'),
          last = parseInt(arr[arr.length - 1]);
        if (isNaN(last)) {
          arr.push(++num);
        } else {
          num = ++last;
          arr[arr.length - 1] = num;
        }
        name = arr.join('_');
        return rename(name, num, set);
      } else {
        set.add(name);
        return name;
      }
    };
    nameArr.forEach(name => {
      newNameArr.push(rename(name, 0, nameSet));
    });
    return newNameArr;
  }
  componentDidMount() {
    this.componentWillReceiveProps(this.props);
  }

  componentWillReceiveProps(nextProps) {
    const { data, moduleInputData } = nextProps;
    let moduleInputDataMap = {},
      items = [];
    moduleInputData.forEach(v => {
      moduleInputDataMap[v.dataType] = moduleInputDataMap[v.dataType] || [];
      moduleInputDataMap[v.dataType].push(v);
    });
    moduleInputDataMap[dataTypes.DS_OPT].forEach((v, i) => {
      let moduleInfo = moduleInputDataMap[dataTypes.MODULE_INFO][i],
        moduleInfoData = moduleInfo.data ? moduleInfo.data : {},
        dsOptData = v.data ? v.data : [];
      let moduleId = moduleInfoData.id,
        moduleName = moduleInfoData.name;
      let dsOptDataNames = dsOptData.map(v => v.name);
      dsOptData.forEach(dsOpt => {
        let id = `${moduleId}_${dsOpt.name}`;
        let item = (data.options.source[id] &&
          data.options.source[id].asMutable()) || {
          id: id,
          moduleName: moduleName,
          oldName: dsOpt.name,
          newName: dsOpt.name,
          remarks: ''
        };
        items.push(item);
      });
    });
    //解决重名
    let newNamesArr = DataExportPanel.nameSuffix(items.map(v => v.newName));
    items.forEach((it, i) => {
      it.newName = newNamesArr[i];
    });
    this.setState({
      items
    });
  }
  render() {
    const { data, updateModule, moduleInputData, i18n } = this.props;
    const { items } = this.state;
    return (
      <div className={css('dataExportPanel')}>
        <div className={css('top-panel')}>
          {/* <div className={css('title')}>{i18n.MODULE_NAME}</div> */}
          <div className={css('content')}>
            <DefaultButton
              className={css('exportBtn')}
              primary={true}
              data-automation-id="test"
              text={i18n.EXPORT_EXCEL}
              onClick={this._onExportExcel}
            />
          </div>
        </div>
        <div className={css('bottom-panel')}>
          <DetailsList
            items={items}
            selection={this._selection}
            selectionPreservedOnEmptyClick={true}
            columns={this._createColumns()}
            _onActiveItemChanged={this._onActiveItemChanged}
          />
        </div>
      </div>
    );
  }
  _createTypeOptions() {
    return [{ key: 'decimal', text: '小数' }, { key: 'time', text: '时间' }];
  }
  _createTimeOptions() {
    return [
      { key: 'YYYY-MM-DD HH:mm:ss', text: '年-月-日 时:分:秒' },
      { key: 'YYYY-MM-DD', text: '年-月-日' },
      { key: 'YYYY-MM-DD HH:mm:00', text: '年-月-日 时:分:00' }
    ];
  }
  _createColumns() {
    const columns = [
      {
        fieldName: 'moduleName',
        key: 'moduleName',
        name: '来源',
        className: css('row'),
        isCollapsable: true,
        isMultiline: true,
        isResizable: true
      },
      {
        fieldName: 'oldName',
        key: 'oldName',
        name: '原名',
        className: css('row'),
        isCollapsable: true,
        isMultiline: true,
        isResizable: true
      },
      {
        fieldName: 'newName',
        key: 'newName',
        name: '名称',
        minWidth: 200,
        className: css('row'),
        isCollapsable: true,
        isMultiline: true,
        isResizable: true,
        onRender: (item, index, headItem) => {
          return (
            <RenameText
              dom={item[headItem['fieldName']]}
              data={{
                key: headItem['fieldName'],
                name: item[headItem['fieldName']]
              }}
              renameItem={this._changeSource.bind(this, index)}
              verification={value => {
                let reg = /^(?!_)(?!.*?_$)[a-zA-Z0-9_]+$/;
                const { items } = this.state;
                if (!reg.test(value)) {
                  return {
                    status: false,
                    msg: '名称只能由字母、数字、下划线组成'
                  };
                }
                if (
                  item[headItem['fieldName']] != value &&
                  items.map(v => v[headItem['fieldName']]).indexOf(value) > -1
                ) {
                  return {
                    status: false,
                    msg: '该名称已存在'
                  };
                }
                return {
                  status: true
                };
              }}
            />
          );
        }
      },
      {
        fieldName: 'remarks',
        key: 'remarks',
        name: '备注',
        minWidth: 200,
        className: css('row'),
        isCollapsable: true,
        isMultiline: true,
        isResizable: true,
        onRender: (item, index, headItem) => {
          return (
            <RenameText
              dom={item[headItem['fieldName']]}
              data={{
                key: headItem['fieldName'],
                name: item[headItem['fieldName']]
              }}
              renameItem={this._changeSource.bind(this, index)}
            />
          );
        }
      },
      {
        fieldName: 'type',
        key: 'type',
        name: '类型',
        className: css('row'),
        isCollapsable: true,
        isMultiline: true,
        isResizable: true,
        onRender: (item, index, headItem) => {
          return (
            <Dropdown
              options={this._createTypeOptions()}
              onChanged={v => {
                this._changeSource(index, 'type', v.key);
              }}
              selectedKey={item.type || 'decimal'}
            />
          );
        }
      },
      {
        fieldName: 'format',
        key: 'format',
        name: '格式',
        minWidth: 200,
        className: css('row'),
        isCollapsable: true,
        isMultiline: true,
        isResizable: true,
        onRender: (item, index, headItem) => {
          switch (item.type) {
            case 'time':
              return (
                <Dropdown
                  options={this._createTimeOptions()}
                  onChanged={v => {
                    this._changeSource(index, 'format', v.key);
                  }}
                  selectedKey={item.format || 'YYYY-MM-DD HH:mm:ss'}
                />
              );
            case 'decimal':
            default:
              return (
                <input
                  className={css('numberText')}
                  type="number"
                  min="0"
                  max="10"
                  value={item.format == undefined ? 2 : item.format}
                  onChange={e => {
                    this._changeSource(index, 'format', Number(e.target.value));
                  }}
                />
              );
          }
        }
      }
    ];
    return columns;
  }
  _changeSource(index, key, value) {
    const { data, updateModule } = this.props;
    if (key == 'type') {
      let v = undefined;
      switch (value) {
        case 'decimal':
          v = 2;
          break;
        case 'time':
          v = 'YYYY-MM-DD HH:mm:ss';
          break;
      }
      this._changeSource(index, 'format', v);
    }
    let items = this.state.items.concat();
    items[index][key] = value;
    let newSource = {};
    items.forEach(it => {
      newSource[it.id] = it;
    });
    updateModule(
      data.setIn(
        ['options', 'source'],
        Object.assign({}, data.options.source, newSource)
      )
    );
  }
  _onExportExcel() {}
  _onActiveItemChanged() {}
}
export default DataExportPanel;
