import React from 'react';
import PropTypes from 'prop-types';

import s from './DataSetComponentV2.css';
const css = (className1, className2 = '') => {
  return className1
    .split(' ')
    .map(v => s[v])
    .concat(className2.split(' '))
    .join(' ');
};
/*
  title               ''
  items               [{key:text}],
  selectedKeys        []
  onSelect            (selectedKeys)=>{}
  isRadio             true/false 是否单选
  extra               [{name,onClick=()=>{}}]
*/
class DataSetComponent extends React.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      selectedKeys: new Set()
    };
    this._onSelected = this._onSelected.bind(this);
  }
  componentDidMount() {
    this.componentWillReceiveProps(this.props);
  }
  componentWillReceiveProps(nextProps) {
    const { selectedKeys = [] } = nextProps;
    this.setState({
      selectedKeys: new Set(selectedKeys)
    });
  }
  render() {
    const { items = [], title = '', extra = [], isRadio = true } = this.props;
    const { selectedKeys } = this.state;
    let extraItem = extra.map(v => (
      <div
        key={v.name}
        className={css('item')}
        onClick={()=>{v.onClick(Array.from(selectedKeys), items)}}
      >
        {v.name}
      </div>
    ));
    let allItem = isRadio
      ? []
      : [
          <div
            key={+new Date()+''}
            className={css(
              `item ${items.length == selectedKeys.size ? 'active' : ''}`
            )}
            onClick={this._onSelected.bind(this, items.map(v=>v.key))}
          >
            {'ALL'}
          </div>
        ];
    let item = items.map(it => {
      let className = 'item';
      if (selectedKeys.has(it.key)) {
        className += ' active';
      }
      return (
        <div
          key={it.key}
          className={css(className)}
          onClick={this._onSelected.bind(this, [it.key])}
        >
          {it.text}
        </div>
      );
    });
    return (
      <div className={css('datasetWrap')}>
        <div className={css('title')}>{title}</div>
        <div className={css('content clear')}>
          {[...extraItem, ...allItem, ...item]}
        </div>
      </div>
    );
  }
  _onSelected(ids, ev) {
    let { selectedKeys } = this.state;
    const { onSelect = () => {}, isRadio = true,items=[] } = this.props;
    let selected = true;
    if (isRadio) {
      if (selectedKeys.has(ids[0])) {
        selectedKeys.clear();
        selected = false;
      } else {
        selectedKeys.clear();
        selectedKeys.add(ids[0]);
      }
    } else {
      if (ids.length > 1) {
          if(selectedKeys.size==items.length){
            selectedKeys.clear();
          }else{
            selectedKeys = new Set(ids);
          }
      } else {
        if (selectedKeys.has(ids[0])) {
          selectedKeys.delete(ids[0]);
          selected = false;
        } else {
          selectedKeys.add(ids[0]);
        }
      }
    }
    this.setState({
      selectedKeys: new Set(selectedKeys)
    });
    onSelect(Array.from(selectedKeys), {
      selected,
      node: ev.target,
      event: ev
    });
  }
}

DataSetComponent.propTypes = {};

export default DataSetComponent;
