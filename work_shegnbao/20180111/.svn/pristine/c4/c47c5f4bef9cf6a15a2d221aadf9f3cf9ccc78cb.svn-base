import pytestfrom beopWeb.mod_algorithm import controllerimport json@pytest.mark.p0@pytest.mark.parametrize(('search_text', 'expected'), [    ("冷机周用电量", [{"_id": "146528122847137926ccbc60", "isFolder": False, "name": "冷机周用电量", "note": "", "parent_id": "14646924698430012e7c5763"}]),    ("内嵌一个检测是否存在某店的函数。",[{'name': 'test001', 'parent_id': '1465981140881760a87cf5a6', '_id': '1466065360251139bb13abd2', 'isFolder': False, 'note': '内嵌一个检测是否存在某店的函数。'}]),    ("KPIScore",[{'name': 'KPIScore', 'parent_id': '14672079461943795023b28b', '_id': '1467207952312379f199eff9', 'isFolder': False, 'note': '计算KPI分值，项目带_state的点释义（0：正常，1：不正常，5：关闭，6：无效）  \n上海华为没有_state'}])])def test_select_searchUseId(search_text, expected):    rt = controller.SearchTemplate(search_text)    rt=json.loads(rt)    assert rt,'actual value is []'    for key in rt[0].keys():        assert rt[0].get(key)==expected[0].get(key),'not equal ,acutal={0},expected={1}'.format(rt[0].get(key),expected[0].get(key))