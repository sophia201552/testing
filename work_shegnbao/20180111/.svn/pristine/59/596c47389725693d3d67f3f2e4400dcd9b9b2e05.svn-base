/**
 * Created by vivian on 2017/7/13.
 */
class GroupProjectOverview {
    constructor(id) {
        this.id = id;
    // constructor(app,opt) {
    //     this.app = app;
        this.opt = undefined;
        // this.app = AppDriver;
        this.ctn = undefined;
        this.requestOnHandle = [];
        this.deleteRequestOnHandle = function (id) {
            for (var i = 0; i < this.requestOnHandle.length; i++) {
                if (this.requestOnHandle[i].id == id) {
                    this.requestOnHandle[i].res.abort();
                    this.requestOnHandle.splice(i, 1);
                }
            }
        }
    }
    show() {
        this.init();
    }
    init() {

        WebAPI.get('/static/app/Platform/views/module/groupProjectOverview.html').done(function (result) {
            document.getElementById('indexMain').innerHTML = result;
            this.ctn = document.getElementById('ctnGroupProjectOverview')
            this.attachEvent();
            this.setEntity();
        }.bind(this)).always(function () {
            I18n.fillArea($('#containerDisplayboard'));
        });
    }
    deleteRequestOnHandle(id) {
        for (var i = 0; i < this.requestOnHandle.length; i++) {
            this.requestOnHandle[i].id == id ? this.requestOnHandle.splice(i, 1) : 1;
        }
    }
    initQueryTime() {
        var $iptSelectTime = $('.iptSelectTime');
        $iptSelectTime.val(new Date().format('yyyy-MM-dd'));
        $('#spanSelectTime').datetimepicker({
            Format: 'yyyy-mm-dd',
            autoclose: true,
            startView: 2,
            minView: 2,
            todayHighlight: true
        });
        $('#spanSelectTime').datetimepicker().on('changeDay', function (ev) {
            $iptSelectTime.val(new Date(ev.date).format('yyyy-MM-dd'));
        });
    }
    attachEvent() {
        this.resizeEchart();
    }
    setEntity() {
        var container;
        var moduleOpt = ModuleIOC.getModuleByMultiParam({module:'summary','option.projectGrpId':this.id},'base')[0]
        var option;
        if(moduleOpt)option = moduleOpt.option;
        // var option = this.opt;
        this.opt = option;
        for (var i = 0; i < option.option.length; i++) {
            var entityCls = GroupProjectOverview[option.option[i].type];
            if (entityCls) {
                var entityIns = new entityCls(this, option.option[i])
                entityIns.init()
            }
        }
    }

    resizeEchart(options, dom) {
        window.onresize = function () {
            $('[_echarts_instance_]').each(function (i, dom) {
                echarts.getInstanceById(dom.getAttribute('_echarts_instance_')).resize();
            });
        }
    }

    getUnit(num) {
        if (num == null || num === "") return '-';
        if (num == 0) return 0;
        if (num >= 1000) {
            return parseFloat(num / 1000).toFixed(0) + ' MWh';
        } else {
            return parseFloat(num).toFixed(0) + ' kWh';
        }
    }
    //获取千分位
    getThousandsBit(num) {
        if (num == null || num === "") return '-';
        if (num == 0) return 0;
        num = num.toFixed(0);　　
        var re = /\d{1,3}(?=(\d{3})+$)/g;　　
        var n1 = num.replace(/^(\d+)((\.\d+)?)$/, function (s, s1, s2) {
            return s1.replace(re, "$&,") + s2;
        });　　
        return n1 + ' kWh';
    }

    close() {
        this.requestOnHandle.forEach(function (item) {
            item.res.abort();
        })
    }
}
window.GroupProjectOverview = GroupProjectOverview;
(function (exports) {
    function Base(screen, option) {
        this.screen = screen;
        this.container = undefined;
        this.option = option;
    }
    Base.prototype = {
        setting: {
            height: 5,
            width: 5
        },
        viewer: '',
        createContainer: function () {
            var container = document.createElement('div');
            container.className = 'ctnEntity';
            container.dataset.type = this.option.type;
            var html = this.viewer;
            container.innerHTML = html;
            container.style.height = this.setting.height * 10 + '%';
            container.style.width = this.setting.width * 10 + '%';
            this.container = container;
            this.screen.ctn.appendChild(this.container);
        },
        init: function () {
            this.createContainer();
            this.render();
            I18n.fillArea($('#containerDisplayboard'));

        },
        render: function () {},
        update: function () {},
        destory: function () {},
        getDataUrl: function (pointData, time) {
            var $promise = $.Deferred();
            var queryTime = toDate(time).format('yyyy-MM-dd HH:mm:ss');
            var toDay = toDate().format('yyyy-MM-01 00:00:00');
            var round = '';
            var _this = this;
            if (queryTime == toDay) {
                var postDataOne = {
                    dsItemIds: pointData,
                }
                round = 'startWorkspaceDataGenPieChart'
            } else {
                var postDataOne = {
                    dsItemIds: pointData,
                    timeStart: toDate(queryTime).format('yyyy-MM-' + DateUtil.daysInMonth(toDate(queryTime)) + '  23:55:00'),
                    timeEnd: toDate(queryTime).format('yyyy-MM-' + DateUtil.daysInMonth(toDate(queryTime)) + '  23:55:00'),
                    timeFormat: 'm5'
                }
                round = 'startWorkspaceDataGenHistogram'
            }
            var url = '/analysis/' + round;
            var request = WebAPI.post(url, postDataOne);
            var requestId = ObjectId();
            this.screen.requestOnHandle.push({
                res: request,
                id: requestId
            });
            request.done(function (result) {
                if (result) {
                    $promise.resolveWith(this, [result, round]);
                } else {
                    $promise.reject();
                }
            }).always(function () {
                _this.screen.deleteRequestOnHandle(requestId);
            }).fail(function () {

            })
            return $promise.promise();
        },
        getPoint: function (pointList) {
            var $promise = $.Deferred();
            var _this = this
            var request = WebAPI.post('/analysis/startWorkspaceDataGenPieChart', {
                "dsItemIds": pointList,
            });
            var requestId = ObjectId();
            this.screen.requestOnHandle.push({
                res: request,
                id: requestId
            });

            request.done(function (result) {
                if (result) {
                    $promise.resolveWith(this, [result]);
                } else {
                    $promise.reject();
                }
            }).always(function () {
                _this.screen.deleteRequestOnHandle(requestId);
            }).fail(function () {

            })
            return $promise.promise();
        },

    }
    exports.base = Base
}(GroupProjectOverview))


;
(function (exports, base) {
    function Anlysis(container, option) {
        base.apply(this, arguments);
    }
    Anlysis.prototype = Object.create(base.prototype); +
    function () {
        this.setting = {
                height: 4,
                width: 4
            },
            this.viewer = `<div class="panelCtn">
                            <div class="panelContainer">
                                <div class="topCtn">
                                    <div class="title"><span i18n="platform_app.group.TOTAL">用能统计</span>
                                        <div class="statisTime" style="display:flex"><input type="text" id="queryAnlysisTimIpt" class="form-control" /></div>
                                    </div>
                                </div>
                                <div class="chartCtn chartAQIa" style="padding-top:10px;">
                                    <div class="anlysisTop anlysisColor" i18n="platform_app.group.MTD"> 月累计</div>
                                    <div class="echartMiddle">
                                    </div>
                                    <div class=" anlysisColor" i18n="platform_app.group.SQUARE">单项目均方均值</div>
                                </div>
                            </div>
                        </div>`,
            this.render = function () {
                $('#queryAnlysisTimIpt').val(toDate().format('yyyy-MM')).datetimepicker('remove').datetimepicker({
                    format: 'yyyy-mm',
                    autoclose: true,
                    minView: 3,
                    startView: 3,
                    endDate: toDate().format('yyyy-MM')
                });
                var _this = this;
                var pointData = [];
                var arrPromise = [];
                var nameArr = [];
                var SpinnerLine = new LoadingSpinner({
                    color: '#00FFFF'
                });
                SpinnerLine.spin($('.chartAQIa')[0]);
                var pointList = this.screen.opt.projectGrp.projectList.map(function (ele) {
                    return '@' + ele.id + '|proj_IndInfoStatis'
                });
                var pointArr = [];
                this.option.item.forEach(item => {
                    pointArr.push(item.ptKey)
                })
                _this.getPoint(pointList).done(function (result) {
                    var rsData = '';
                    pointArr.forEach(item => {
                        for (var i = 0; i < result.dsItemList.length; i++) {
                            if (result.dsItemList[i].data == 'Null') {
                                rsData = 'Null'
                                // SpinnerLine.stop();
                                // return
                                continue
                            }
                            var value = JSON.parse(result.dsItemList[i].data);
                            nameArr.push({
                                name: item,
                                nameZh: value[item].name,
                                pointName: value[item].point,
                                id: result.dsItemList[i].dsItemId.split('|')[0].split('@')[1],
                                unit: value[item].unit
                            })
                            var idd = result.dsItemList[i].dsItemId.split('|')[0]
                            pointData.push(idd + '|' + value[item].point);
                        }

                    })
                    if (rsData == 'Null') {
                        if (nameArr.length == 0) {
                            $('.echartMiddle').html('<p class="text-muted" i18n="platform_app.group.WARN">没有配置点名!</p>');
                            I18n.fillArea($('.echartMiddle'));
                            SpinnerLine.stop();
                            return;
                        }

                    }
                    var sortnameArr = nameArr;
                    var dic = _this.option.item;
                    _this.option.valid = Number(Number(nameArr.length) / Number(_this.option.item.length)).toFixed(0)
                    getData(sortnameArr, pointData, dic)

                })
                //////////////////
                // this.screen.opt.projectGrp.projectList.forEach((items, i) => {
                //     var promise = $.Deferred();
                //     var pointArr = [];
                //     this.option.item.forEach(item => {
                //         pointArr.push(item.ptKey)
                //     })
                //     var postData = {
                //         pointList: ['proj_IndInfoStatis'],
                //         projectId: items.id,
                //         prop: {
                //             proj_IndInfoStatis: {
                //                 pointArr
                //             }
                //         },
                //         timeStart: toDate().format('yyyy-MM-dd 00:00:00'),
                //         timeEnd: toDate().format('yyyy-MM-dd 00:00:00'),
                //         timeFormat: 'd1'
                //     }
                //     WebAPI.post('/get_history_data_padded', postData).done(function (result) {
                //         if (result.error == 'historyData' || result[0] == undefined) {
                //             SpinnerLine.stop();
                //             return;
                //         }
                //         pointArr.forEach(item => {
                //             var value = JSON.parse(result[0].history[0].value)
                //             nameArr.push({
                //                 name: item,
                //                 nameZh: value[item].name,
                //                 pointName: value[item].point,
                //                 id: items.id,
                //                 unit: value[item].unit
                //             })
                //             pointData.push('@' + items.id + '|' + value[item].point);
                //         })
                //     }).always(function () {
                //         promise.resolveWith(null, [pointData, nameArr])
                //     })
                //     arrPromise.push(promise)
                // })

                // $.when.apply(this, arrPromise).done(function () {
                //     var sortnameArr = nameArr;
                //     var dic = _this.option.item;
                //     getData(sortnameArr, pointData, dic)
                // })

                function getData(sortnameArr, pointData, dic) {
                    var queryAnlysisTimIpt = $('#queryAnlysisTimIpt').val()

                    _this.getDataUrl(pointData, queryAnlysisTimIpt).done(function (result, round) {
                        var listArr = [];
                        if (round == 'startWorkspaceDataGenPieChart') {
                            result.dsItemList.forEach(item => {
                                var data = 0;
                                item.data == 'Null' ? item.data = 0 : 1
                                data = item.data;
                                listArr.push({
                                    data: data,
                                    dsItemId: item.dsItemId
                                });
                            })
                        } else {
                            if (result.list.length == 0) {
                                return;
                            }
                            result.list.forEach(item => {
                                var data = 0;
                                item.data.forEach(it => {
                                    data += it;
                                })
                                listArr.push({
                                    data: data,
                                    dsItemId: item.dsItemId
                                });
                            })
                        }

                        dic.forEach(ii => {
                            ii.data = 0;
                        })
                        listArr.forEach((list, i) => {
                            var pts = list.dsItemId.split('|')[1]; //点名
                            var pid = list.dsItemId.split('|')[0].split('@')[1]; //项目ID
                            //所有点名对应的单位和名字
                            sortnameArr.forEach(sn => {
                                if (Number(pid) == Number(sn.id)) {
                                    if (pts == sn.pointName) {
                                        for (var i = 0; i <= dic.length - 1; i++) {
                                            if (dic[i].ptKey == sn.name) {
                                                dic[i].unit = sn.unit;
                                                dic[i].data == undefined ? dic[i].data = 0 : 1;
                                                dic[i].data += Number(list.data);
                                            }
                                        }
                                    }
                                }
                            })
                            if (i == listArr.length - 1) {
                                $('.echartMiddle').empty();
                                dic.forEach((rcs, k) => {
                                    createDom(rcs, k)
                                })
                                I18n.fillArea($('.panelCtn'));
                            }
                        })

                    }).always(() => {
                        SpinnerLine.stop();

                    })
                }

                function createDom(datas, i) {
                    var num = Number(_this.option.valid);
                    var name = getI18n(datas.name);
                    var doms = ``;
                    doms = `<div class="echartOne">
                            <div class="echartTop"><span  class="echartTopColor1">${Number(datas.data).toFixed(0).toLocaleString()}</span><span  class="echartTopColor2">${datas.unit}</span></div>
                            <div class="middleText"> <div class="iconfont ${name.icon}" style="font-size:24px;color:${name.color}"></div><div class="nameColor"i18n="${name.i18n}">用电量</div></div>
                            <div class="echartMain echart${i}"></div>
                         <div class="echartBottom"><span class="echartTopColor1">${Number(datas.data/num).toFixed(0).toLocaleString()}</span><span class="echartTopColor2">${datas.unit}</span></div>
                     </div>`
                    $('.echartMiddle').append(doms)
                    echartRender(datas, $('.echart' + i)[0])
                }

                function echartRender(ds, containers) {
                    var option = {
                        series: [{
                            name: 'Connection',
                            type: 'pie',
                            clockWise: false,
                            radius: ['62%', '68%'],
                            center: ['50%', '45%'],
                            hoverAnimation: false,
                            data: [{
                                value: 0.1,
                                name: 'Offline',
                                itemStyle: {
                                    normal: {
                                        color: 'rgb(253,253,254)'
                                    }
                                },
                            }, {

                                value: 0.94,
                                name: 'Online',
                                itemStyle: {
                                    normal: {
                                        borderWidth: 0,
                                        borderColor: 'rgb(233,235,242)',
                                        color: 'rgb(233,235,242)',
                                        shadowBlur: 0,
                                    }
                                }
                            }],
                            labelLine: {
                                normal: {
                                    show: false
                                }
                            },
                            label: {
                                normal: {
                                    show: false
                                }
                            }
                        }]
                    }
                    var chart = echarts.init(containers); //,this.opt.chartTheme
                    chart.setOption(option);
                }

                function getI18n(index) {
                    var all = {};
                    switch (index) {
                        case '用电量':
                            all = {
                                i18n: 'platform_app.group.ENERGY',
                                icon: 'icon-33',
                                color: 'rgb(79,133,222)'
                            }
                            return all
                        case '用水量':
                            all = {
                                i18n: 'platform_app.group.WATER',
                                icon: 'icon--1',
                                color: 'rgb(133,200,57)'
                            }
                            return all
                        case '用气量':
                            all = {
                                i18n: 'platform_app.group.GAS',
                                icon: 'icon-qi',
                                color: 'rgb(252,154,75)'
                            }
                            return all
                        case '碳排放':
                            all = {
                                i18n: 'platform_app.group.CARBON',
                                icon: 'icon-paifang',
                                color: 'rgb(81,88,101)'
                            }
                            return all
                        default:
                            return
                    }
                }
                $('#queryAnlysisTimIpt').off('change').on('change', (e) => {
                    var sortnameArr = nameArr;
                    //过滤相同的名字 只要一样的一组
                    _this.option.item.forEach(itema => {
                        itema.data = 0;
                    })
                    var dic = _this.option.item;
                    var currentTime = $(e.currentTarget).val();
                    var currentMonth = currentTime.split('-')[1];
                    if(!Number(currentMonth)||Number(currentMonth)>12){
                        alert(i18n_resource.platform_app.overview.TIME_ERROR);
                        return;
                    }
                    if(Number(currentMonth)>new Date().getMonth()+1){
                        alert(i18n_resource.platform_app.overview.TIME_LATER);
                        return;
                    }
                    SpinnerLine.spin($('.chartAQIa')[0]);
                    getData(sortnameArr, pointData, dic)
                });
                $(window).off('resize').on('resize', function () {
                    //echarts重绘
                    $('[_echarts_instance_]').each(function (i, dom) {
                        var img = echarts.getInstanceById(dom.getAttribute('_echarts_instance_')).resize()
                    });

                })
            },
            this.update = function () {},
            this.destory = function () {}
    }.call(Anlysis.prototype)
    exports.analysis = Anlysis
}(GroupProjectOverview, GroupProjectOverview.base))

;
(function (exports, base) {
    function Radar(container, option) {
        base.apply(this, arguments)
    }
    Radar.prototype = Object.create(base.prototype); +
    function () {
        this.setting = {
                height: 4,
                width: 3
            },
            this.viewer = '<div class="panelCtn"> <div class="panelContainer"><div class="topCtn" ><div class="title" > <span i18n="platform_app.group.HEALTH">设备健康率</span> <div class="statisTime" style="display:flex"><input type="text" id="queryHealthTimIpt" class="form-control"/></div></div></div><div class="chartCtn chartAQI" style="position:relative;height:calc(100% - 40px);width:100%;"></div></div></div>',
            this.render = function () {
                I18n.fillArea($('.panelContainer'));
                $('#queryHealthTimIpt').val(toDate().format('yyyy-MM')).datetimepicker('remove').datetimepicker({
                    format: 'yyyy-mm',
                    autoclose: true,
                    minView: 3,
                    startView: 3,
                    endDate: toDate().format('yyyy-MM')
                });

                var _this = this;
                var pointData = [];
                var arrPromise = [];
                var nameArr = [];
                var SpinnerLineA = new LoadingSpinner({
                    color: '#00FFFF'
                });
                SpinnerLineA.spin($('.chartAQI')[0]);
                var pointList = this.screen.opt.projectGrp.projectList.map(function (ele) {
                    return '@' + ele.id + '|proj_IndInfoStatis'
                });
                var pointArr = [];
                this.option.item.forEach(item => {
                    pointArr.push(item.ptKey)
                });
                _this.getPoint(pointList).done(function (result) {
                    var rsData = '';
                    pointArr.forEach(item => {
                        for (var i = 0; i < result.dsItemList.length; i++) {
                            if (result.dsItemList[i].data == 'Null') {
                                rsData = 'Null';
                                // SpinnerLineA.stop();
                                // return
                                continue
                            }
                            var value = JSON.parse(result.dsItemList[i].data)
                            nameArr.push({
                                name: item,
                                nameZh: value[item].name,
                                pointName: value[item].point,
                                id: result.dsItemList[i].dsItemId.split('|')[0].split('@')[1],
                                unit: value[item].unit
                            })
                            var idd = result.dsItemList[i].dsItemId.split('|')[0]
                            pointData.push(idd + '|' + value[item].point);
                        }

                    })
                    if (rsData == 'Null') {
                        if (nameArr.length == 0) {
                            $('.chartAQI').html('<p class="text-muted" i18n="platform_app.group.WARN">没有配置点名!</p>')
                            I18n.fillArea($('.chartAQI'));
                            SpinnerLineA.stop();
                            return;
                        }
                    }
                    var sortnameArr = nameArr;
                    var dic = _this.option.item;
                    _this.option.valid = Number(Number(nameArr.length) / Number(_this.option.item.length)).toFixed(0)
                    getData(sortnameArr, pointData, dic)

                })
                // this.screen.opt.projectGrp.projectList.forEach((items, i) => {
                //     var promise = $.Deferred();
                //     var pointArr = [];
                //     this.option.item.forEach(item => {
                //         pointArr.push(item.ptKey)
                //     })
                //     var postData = {
                //         pointList: ['proj_IndInfoStatis'],
                //         projectId: items.id,
                //         prop: {
                //             proj_IndInfoStatis: {
                //                 pointArr
                //             }
                //         },
                //         timeStart: toDate().format('yyyy-MM-dd 00:00:00'),
                //         timeEnd: toDate().format('yyyy-MM-dd 00:00:00'),
                //         timeFormat: 'd1'
                //     }
                //     WebAPI.post('/get_history_data_padded', postData).done(function (result) {
                //         if (result.error == 'historyData' || result[0] == undefined) {
                //             SpinnerLineA.stop();
                //             return;
                //         }
                //         pointArr.forEach(item => {
                //             var value = JSON.parse(result[0].history[0].value)
                //             nameArr.push({
                //                 name: item,
                //                 nameZh: value[item].name,
                //                 pointName: value[item].point,
                //                 id: items.id,
                //                 unit: value[item].unit
                //             })
                //             pointData.push('@' + items.id + '|' + value[item].point);
                //         })
                //     }).always(function () {
                //         promise.resolveWith(null, [pointData, nameArr])
                //     })
                //     arrPromise.push(promise)
                // })

                // $.when.apply(this, arrPromise).done(function () {
                //     var sortnameArr = nameArr;
                //     var dic = [];
                //     dic = _this.option.item
                //     getData(sortnameArr, pointData, dic);
                // });

                function getData(sortnameArr, pointData, dic) {
                    var queryAnlysisTimIpt = $('#queryHealthTimIpt').val()

                    _this.getDataUrl(pointData, queryAnlysisTimIpt).done(function (result, round) {
                        var listArr = [];

                        if (round == 'startWorkspaceDataGenPieChart') {
                            if (result.dsItemList.length == 0) {
                                return;
                            }
                            result.dsItemList.forEach(item => {
                                var data = 0;
                                item.data == 'Null' ? item.data = 0 : 1
                                data = item.data;
                                listArr.push({
                                    data: data,
                                    dsItemId: item.dsItemId
                                });
                            })
                        } else {
                            if (result.list.length == 0) {
                                return;
                            }
                            result.list.forEach(item => {
                                var data = 0;
                                item.data.forEach(it => {
                                    data += it;
                                })
                                listArr.push({
                                    data: data,
                                    dsItemId: item.dsItemId
                                });
                            })
                        }
                        dic.forEach(ii => {
                            ii.data = 0;
                        })
                        listArr.forEach((list, i) => {
                            var pts = list.dsItemId.split('|')[1]; //点名
                            var pid = list.dsItemId.split('|')[0].split('@')[1]; //项目ID
                            //所有点名对应的单位和名字
                            sortnameArr.forEach(sn => {
                                if (Number(pid) == Number(sn.id)) {
                                    if (pts == sn.pointName) {
                                        for (var i = 0; i <= dic.length - 1; i++) {
                                            if (dic[i].ptKey == sn.name) {
                                                dic[i].unit = sn.unit;
                                                dic[i].data == undefined ? dic[i].data = 0 : 1;
                                                dic[i].data += Number(list.data);
                                            }
                                        }
                                    }
                                }
                            })
                            if (i == listArr.length - 1) {
                                $('.chartAQI').empty();

                                renderEchart(dic);
                                I18n.fillArea($('.panelCtn'));
                            }
                        })

                    }).always(() => {
                        SpinnerLineA.stop();

                    })
                }

                function renderEchart(data) {
                    var num = Number(_this.option.valid);
                    var indicatorArr = [];
                    var dataArr = [];
                    data.forEach(itm => {
                        itm.data = (itm.data / num).toFixed(0);
                        indicatorArr.push({
                            name: i18n_resource.platform_app.group[itm.name_i18n] + ' ' + itm.data + itm.unit,
                            max: 100
                        });
                        dataArr.push(itm.data)
                    })


                    var echartsCtn = document.querySelector('.chartAQI')
                    var lineStyle = {
                        normal: {
                            width: 1,
                            opacity: 0.5
                        }
                    };
                    var option = {
                        backgroundColor: 'rgb(253,253,254)',
                        title: {
                            show: false,
                            text: 'AQI - 雷达图',
                            left: 'center',
                            textStyle: {
                                color: '#eee'
                            }
                        },
                        tooltip: {
                            formatter: function (value) {
                                var dom = ``;
                                data.forEach(it => {
                                    dom += `<span>${i18n_resource.platform_app.group[it.name_i18n]}:${it.data}${it.unit}</span><br>`
                                })
                                return dom
                            }
                        },
                        legend: {
                            show: false,
                            bottom: 5,
                            data: [''],
                            itemGap: 20,
                            textStyle: {
                                color: '#fff',
                                fontSize: 14
                            },
                            selectedMode: 'single'
                        },

                        radar: {
                            nameGap: 5,
                            indicator: indicatorArr,
                            shape: 'circle',
                            splitNumber: 5,
                            name: {
                                textStyle: {
                                    color: '#333'
                                }
                            },
                            splitLine: {
                                lineStyle: {
                                    color: '#dde5f2'
                                }
                            },
                            splitArea: {
                                show: true,
                                areaStyle: {
                                    color: [
                                        'rgb(245,249,250)', 'rgba(241,245,249, 0.5)',
                                        'rgba(241,245,249, 0.7)', 'rgba(241,245,249, 0.8)',
                                        'rgba(241,245,249, 0.9)', 'rgba(241,245,249, 1)'
                                    ].reverse()
                                }
                            },
                            axisLine: {
                                lineStyle: {
                                    color: '#dde5f2'
                                }
                            },
                            axisLabel: {
                                formatter: function (value, index) {}
                            }

                        },
                        series: [{
                            name: '',
                            type: 'radar',
                            lineStyle: lineStyle,
                            data: [{
                                value: dataArr
                            }],
                            symbol: 'circle',
                            itemStyle: {
                                normal: {
                                    width: 2,
                                    color: '#83C736',
                                    label: {
                                        show: false,
                                        position: ['50%', '50%'],
                                        formatter: function (p) {
                                            var data = [];
                                            data = p.data.value;
                                            var key = data.indexOf(p.value);
                                            var max = [300, 250, 300, 5, 200, 100];
                                            var now = max[key];
                                            return ((Number(p.value / now)) * 100).toFixed(1) + '%';
                                        }
                                    }
                                }
                            },
                            areaStyle: {
                                normal: {
                                    color: {
                                        type: 'radial',
                                        x: 0.5,
                                        y: 0.5,
                                        r: 0.5,
                                        colorStops: [{
                                            offset: 1,
                                            color: 'rgba(131,199,54,0.8)'
                                        }, {
                                            offset: 0,
                                            color: 'rgba(131,199,54,0.1)'
                                        }],
                                        globalCoord: false
                                    }
                                }
                            }
                        }]
                    };
                    $(echartsCtn).removeAttr('_echarts_instance_');
                    var echart = echarts.init(echartsCtn);
                    echart.setOption(option,true);
                    window.onresize = echart.resize;
                }
                $('#queryHealthTimIpt').off('change').on('change', (e) => {
                    var sortnameArr = nameArr;
                    _this.option.item.forEach(itema => {
                        itema.data = 0;
                    })
                    var dic = _this.option.item;
                    var currentTime = $(e.currentTarget).val();
                    var currentMonth = currentTime.split('-')[1];
                    if(!Number(currentMonth)||Number(currentMonth)>12){
                        alert(i18n_resource.platform_app.overview.TIME_ERROR);
                        return;
                    }
                    if(Number(currentMonth)>new Date().getMonth()+1){
                        alert(i18n_resource.platform_app.overview.TIME_LATER);
                        return;
                    }
                    SpinnerLineA.spin($('.chartAQI')[0]);
                    getData(sortnameArr, pointData, dic)
                });


            },
            this.update = function () {},
            this.destory = function () {}
    }.call(Radar.prototype)
    exports.radar = Radar
}(GroupProjectOverview, GroupProjectOverview.base))

;
(function (exports, base) {
    function Map(container, option) {
        base.apply(this, arguments)
    }
    Map.prototype = Object.create(base.prototype); +
    function () {
        this.setting = {
                height: 4,
                width: 3
            },
            this.viewer = '<div class="panelCtn panelContainerNoPadding"> <div class="panelContainer"><div class="topCtn" ><div class="title" i18n="platform_app.group.PROJECT">项目分布</div></div><div class="chartCtn chartMap" id="chartMap" style="height:calc(100% - 40px);width:100%;"></div></div></div><script type="text/javascript" src="http://webapi.amap.com/maps?v=1.3&key=9cc89c68a4bd6f3f5f65589f85ad7685"></script>',
            this.render = function () {
                var _this = this;
                var SpinnerLine = new LoadingSpinner({
                    color: '#00FFFF'
                });
                var map = new beop.getMapInstance();
                map.load();               
                window.mapPlatformCallBack= function(){
                    var mapIns;
                    try {
                        if(AMap && AMap.Map){
                            mapIns = new beop.GaodeMap();
                        }
                    } catch (e) {
                        mapIns = new beop.GoogleMap()
                    }                             
                    mapIns.init();    
                    if (AppConfig.userId == 1) {
                        mapIns.addUpdateProjectControl();
                    }                 
                    mapIns.addMarkers(_this.screen.opt.projectGrp.projectList, true);
                    mapIns.initWorkerForUpdating();
                    mapIns.setFitView();               
                }                
                //SpinnerLine.spin($('.chartMap')[0]);
                // I18n.fillArea($('.panelCtn'));
                //     var center = [];
                //     var latlng = _this.screen.opt.projectGrp.projectList[0].latlng.split(',').reverse()
                //     latlng.forEach(item => {
                //         center.push(item)
                //     })
             
                //     var proArr = []
                //     _this.screen.opt.projectGrp.projectList.forEach((item, i) => {
                //         var centerArr = [];
                //         centerArr = item.latlng.split(',').reverse().join(',');
                //         var iid = AppConfig.language == 'zh' ? item.name_cn : item.name_en;
                //         proArr.push({
                //             name: iid,
                //             pid: item.id,
                //             center: centerArr
                //         })
                //     })                   
                //$.when($.get(location.protocol + '//webapi.amap.com/maps/main?v=1.3&key=9cc89c68a4bd6f3f5f65589f85ad7685')).done(function () {
                // $.get(location.protocol + '//webapi.amap.com/maps?v=1.3&callback=mapPlatformCallBack&key=9cc89c68a4bd6f3f5f65589f85ad7685', ).always(() => {
                //     SpinnerLine.stop()
                // })
                // window.mapPlatformCallBack = function () {
                //     if (typeof AMap == 'undefined' || typeof AMap.Map == 'undefined') return;
                //     var center = [];
                //     var latlng = _this.screen.opt.projectGrp.projectList[0].latlng.split(',').reverse()
                //     latlng.forEach(item => {
                //         center.push(item)
                //     })
                //     var map = new AMap.Map('chartMap', {
                //         resizeEnable: true,
                //         zoom: 1,
                //         center: center,
                //     });
                //     var proArr = []
                //     _this.screen.opt.projectGrp.projectList.forEach((item, i) => {
                //         var centerArr = [];
                //         centerArr = item.latlng.split(',').reverse().join(',');
                //         var iid = AppConfig.language == 'zh' ? item.name_cn : item.name_en;
                //         proArr.push({
                //             name: iid,
                //             pid: item.id,
                //             center: centerArr
                //         })
                //     })


                //     for (var i = 0; i < proArr.length; i++) {
                //         var marker;
                //         var content = `<div class ='yijia' data-projectId="${i}"></div>`;
                //         marker = new AMap.Marker({
                //             content: content,
                //             position: proArr[i].center.split(','),
                //             title: proArr[i].name,
                //             map: map
                //         });

                //         var clickModal;
                //         AMap.event.addListener(marker, "click", function () {
                //             $('.yijia').off('click').on('click', function () {
                //                 var index = $(this).attr('data-projectid');
                //                 map.setCenter(proArr[index].center.split(','));
                //                 map.setZoom(15);
                //                 var info = [];
                //                 info.push(`<div class="media" data-pid="${proArr[index].pid}">${proArr[index].name}</div>`);
                //                 infoWindow = new AMap.InfoWindow({
                //                     content: info.join("<br>"),
                //                     offset: new AMap.Pixel(0, -26)
                //                 });
                //                 infoWindow.open(map, proArr[index].center.split(','));
                //                 clickModal = setTimeout(function () {
                //                     $('.amap-info-content').on('click', function () {
                //                         var SpinnerLineA = new LoadingSpinner({
                //                             color: '#00FFFF'
                //                         });
                //                         SpinnerLineA.spin($('.chartMap')[0]);
                //                         var pid = $(this).find('.media').attr('data-pid');
                //                         WebAPI.get('/get/projectDetail/' + pid).done(function (result) {
                //                             var dom = ``;
                //                             dom = `
                //                                 <div class="mapTitle">
                //                                     <span class="mapTitleTag"i18n="platform_app.group.PHOTO">项目照片</span>
                //                                     <span class="mapTitleLine"></span>
                //                                 </div>
                //                                 <div class="mapBody">
                //                                     <div class="mapImg">
                //                                     <img class="img-responsive" src="/static/images/project_img/${result.pic}" onerror="javascript:this.style.height='200px';">
                //                                     </div>
                //                                 </div>
                                                    
                //                                     <div class="mapTitle">
                //                                     <span class="mapTitleTag"i18n="platform_app.group.INFO">基本信息</span>
                //                                     <span class="mapTitleLine"></span>
                //                             </div>
                //                             <div class="mapBody">
                //                                     <div class="mapRow">
                //                                         <div class="mapRowLeft"i18n="platform_app.group.NAME">项目名称：</div>
                //                                         <div class="mapRowRight">${AppConfig.language=='zh'?result.name_cn:result.name_en}</div>       
                //                                     </div>
                //                                     <div class="mapRow">
                //                                             <div class="mapRowLeft"i18n="platform_app.group.ADDRESS">地址:</div>
                //                                             <div class="mapRowRight">${result.address!=''?result.address:'-'}</div>       
                //                                     </div> 
                //                                     <div class="mapRow">
                //                                             <div class="mapRowLeft"i18n="platform_app.group.TYPE">类型：</div>
                //                                             <div class="mapRowRight">${result.type!=''?result.type:'-'}</div>       
                //                                     </div>  
                //                                     <div class="mapRow">
                //                                             <div class="mapRowLeft"i18n="platform_app.group.SYSTEM">接入系统:</div>
                //                                             <div class="mapRowRight">${result.system!=''?result.system:'-'}</div>       
                //                                     </div>  
                //                                     <div class="mapRow">
                //                                             <div class="mapRowLeft"i18n="platform_app.group.TIME">接入时间:</div>
                //                                             <div class="mapRowRight">${result.insertTime!=''?result.insertTime:'-'}</div>       
                //                                     </div>  
                //                                     <div class="mapRow">
                //                                             <div class="mapRowLeft" i18n="platform_app.group.ROW_POINT">接入点位：</div>
                //                                             <div class="mapRowRight">${result.raw_count!=''?result.raw_count:'-'}</div>       
                //                                     </div>  
                //                                     <div class="mapRow">
                //                                             <div class="mapRowLeft"i18n="platform_app.group.SOURCE">数据来源：</div>
                //                                             <div class="mapRowRight">${result.source!=''?result.source:'-'}</div>       
                //                                     </div>
                //                                     <div class="mapRow">
                //                                             <div class="mapRowLeft mapRowWarn"i18n="platform_app.group.EQUIPMENT">接入设备</div>
                //                                             <div class="mapRowRight mapRowWarn">${result.equipment_count!=''?result.equipment_count:'-'}</div>       
                //                                     </div>
                //                                     <div class="mapRow">
                //                                             <div class="mapRowLeft mapRowWarn" i18n="platform_app.group.AREA">建筑面积：</div>
                //                                             <div class="mapRowRight mapRowWarn">${result.area!=''?result.area:'-'}</div>       
                //                                     </div>       
                //                             </div>`
                //                             $('#modal_map').html(dom)
                //                             I18n.fillArea($('#modal_map'));
                //                             $('#mapModal').modal('show');
                //                             SpinnerLineA.stop();
                //                             $('#mapModal').on('hidden.bs.modal', function (e) {
                //                                 $('#modal_map').html('')
                //                             })
                //                         })

                //                         clearTimeout(clickModal);
                //                     })
                //                 }, 800)
                //             });
                //         })
                //     }
                //     $('.amap-marker-content').each(function (dom) {
                //         dom.dataset.toggle = 'tooltip';
                //         dom.dataset.placeholder = 'right';
                //     })
                // }
                // }).always(() => {
                //     SpinnerLine.stop()
                // })

            },
            this.update = function () {},
            this.destory = function () {}
    }.call(Map.prototype)
    exports.map = Map
}(GroupProjectOverview, GroupProjectOverview.base))

;
(function (exports, base) {
    function Rank(container, option) {
        base.apply(this, arguments)
    }
    Rank.prototype = Object.create(base.prototype); +
    function () {
        this.setting = {
                height: 6,
                width: 10
            },
            this.viewer = `<div class="topCtn topCtnRank">
                            <div class="title titleRank"><span i18n="platform_app.group.INDICATORS">重要指标</span>
                                <div class="statisTime" style="display:flex"><input type="text" id="queryRankTimIpt" class="form-control" /></div>
                            </div>
                        </div>
                        <div class="chartCtn RankWrap">
                        
                        </div>`

        this.render = function () {
                $('#queryRankTimIpt').val(toDate().format('yyyy-MM')).datetimepicker('remove').datetimepicker({
                    format: 'yyyy-mm',
                    autoclose: true,
                    minView: 3,
                    startView: 3,
                    endDate: toDate().format('yyyy-MM')
                });
                var _this = this;
                var pointData = [];
                var arrPromise = [];
                var nameArr = [];
                var SpinnerLineA = new LoadingSpinner({
                    color: '#00FFFF'
                });
                SpinnerLineA.spin($('.RankWrap')[0]);
                var pointList = this.screen.opt.projectGrp.projectList.map(function (ele) {
                    return '@' + ele.id + '|proj_IndInfoStatis'
                });
                var pointArr = [];
                this.option.item.forEach(item => {
                    pointArr.push(item.ptKey)
                })
                _this.getPoint(pointList).done(function (result) {
                    var rsData = '';
                    pointArr.forEach(item => {
                        for (var i = 0; i < result.dsItemList.length; i++) {
                            if (result.dsItemList[i].data == 'Null') {
                                rsData = 'Null';
                                // SpinnerLineA.stop();
                                continue
                            }
                            var value = JSON.parse(result.dsItemList[i].data)
                            nameArr.push({
                                name: item,
                                nameZh: value[item].name,
                                pointName: value[item].point,
                                id: result.dsItemList[i].dsItemId.split('|')[0].split('@')[1],
                                unit: value[item].unit
                            })
                            var idd = result.dsItemList[i].dsItemId.split('|')[0]
                            pointData.push(idd + '|' + value[item].point);
                        }

                    })
                    if (rsData == 'Null') {
                        if (nameArr.length == 0) {
                            $('.RankWrap').html('<p class="text-muted" i18n="platform_app.group.WARN">没有配置点名!</p>')
                            I18n.fillArea($('.RankWrap'));
                            SpinnerLineA.stop();
                            return;
                        }
                    }
                    var sortnameArr = nameArr;
                    var dic = _this.option.item;
                    getData(sortnameArr, pointData, dic)

                })
                ///---------
                // this.screen.opt.projectGrp.projectList.forEach((items, i) => {
                //     var promise = $.Deferred();
                //     var pointArr = [];
                //     this.option.item.forEach(item => {
                //         pointArr.push(item.ptKey)
                //     })
                //     var postData = {
                //         pointList: ['proj_IndInfoStatis'],
                //         projectId: items.id,
                //         prop: {
                //             proj_IndInfoStatis: {
                //                 pointArr
                //             }
                //         },
                //         timeStart: toDate().format('yyyy-MM-dd 00:00:00'),
                //         timeEnd: toDate().format('yyyy-MM-dd 00:00:00'),
                //         timeFormat: 'd1'
                //     }
                //     WebAPI.post('/get_history_data_padded', postData).done(function (result) {
                //         if(result[0]==undefined){
                //             return;
                //         }
                //         pointArr.forEach(item => {
                //             var value = JSON.parse(result[0].history[0].value)
                //             // console.log(value[item].point);
                //             nameArr.push({
                //                 name: item,
                //                 nameZh: value[item].name,
                //                 pointName: value[item].point,
                //                 id: items.id,
                //                 unit: value[item].unit
                //             })
                //             pointData.push('@' + items.id + '|' + value[item].point);
                //         })
                //     }).always(function () {
                //         promise.resolveWith(null, [pointData, nameArr])
                //     })
                //     arrPromise.push(promise)
                // })
                // $.when.apply(this, arrPromise).done(function () {
                //     var sortnameArr = nameArr;
                //     var dic = [];
                //     dic = _this.option.item
                //     if(sortnameArr.length==0||pointData.length==0){
                //         SpinnerLineA.stop();
                //         return;
                //     }
                //     getData(sortnameArr, pointData, dic);
                // });

                function getData(sortnameArr, pointData, dic) {
                    var queryAnlysisTimIpt = $('#queryRankTimIpt').val()
                    _this.getDataUrl(pointData, queryAnlysisTimIpt).done(function (result, round) {
                        var listArr = [];
                        if (round == 'startWorkspaceDataGenPieChart') {
                            if (result.dsItemList.length == 0) {
                                return;
                            }
                            result.dsItemList.forEach(item => {
                                var data = 0;
                                item.data == 'Null' ? item.data = 0 : 1;
                                data = Number(item.data).toFixed(0);
                                listArr.push({
                                    data: Number(data),
                                    dsItemId: item.dsItemId
                                });
                            })
                        } else {
                            if (result.list.length == 0) {
                                SpinnerLineA.stop();
                                return;
                            }
                            result.list.forEach(item => {
                                var data = 0;
                                data = item.data[0] == '' || item.data[0] == undefined ? 0 : item.data[0];
                                listArr.push({
                                    data: data,
                                    dsItemId: item.dsItemId
                                });
                            })
                        }
                        for (var i = 0; i <= dic.length - 1; i++) {
                            dic[i].data == undefined ? dic[i].data = [] : dic[i].data = [];
                        }
                        listArr.forEach((list, i) => {
                            var pts = list.dsItemId.split('|')[1]; //点名
                            var pid = list.dsItemId.split('|')[0].split('@')[1]; //项目ID
                            //所有点名对应的单位和名字
                            sortnameArr.forEach(sn => {
                                if (Number(pid) == Number(sn.id)) {
                                    if (pts == sn.pointName) {
                                        for (var i = 0; i <= dic.length - 1; i++) {

                                            if (dic[i].ptKey == sn.name) {
                                                dic[i].unit = sn.unit;
                                                var iid = '';
                                                _this.screen.opt.projectGrp.projectList.forEach(items => {
                                                    if (Number(items.id) == Number(pid)) {
                                                        iid = AppConfig.language == 'zh' ? items.name_cn : items.name_en

                                                    }
                                                })
                                                dic[i].data == undefined ? dic[i].data = [] : 1;
                                                dic[i].data.push({
                                                    value: list.data,
                                                    name: iid
                                                })
                                            }
                                        }
                                    }
                                }
                            })
                            if (i == listArr.length - 1) {
                                getOtherData(dic);
                                I18n.fillArea($('.panelCtn'));
                            }
                        })



                    }).always(() => {
                        SpinnerLineA.stop();

                    })
                }
                I18n.fillArea($('.topCtn'));

                function createDom(dic) {
                    var dom = ``;
                    var $ctnGroupProjectOverview = $('.ctnGroupProjectOverview');
                    dic.forEach(item => {
                        var html = ``;
                        dom = `    <div class="rankPanel">
                                    <div class="rankPanelBox">
                                        <div class="rankPanelBoxTop">
                                            <div class="rankTopLeft" style="background: radial-gradient(circle,${item.color});">
                                                <div class="iconfont  ${item.icon} iconRank"></div>
                                            </div>
                                            <div class="rankTopRight">
                                                <div class="rankTopRightTitle">${i18n_resource.platform_app.group[item.name_i18n]}
                                                    <div class="rankIconLeft1" data-index="after" data-rank="${item.sort}"> <span class="iconfont icon-paimingqian-"></span></div>
                                                </div>
                                                <div class="rankTopRightContent" title="${i18n_resource.platform_app.group[item.desc_i18n]}">${i18n_resource.platform_app.group[item.desc_i18n]}</div>
                                            </div>
                                        </div>
                                        <div class="rankPanelBottom" data-sort="${item.sort}">
                                            <div class="rankPanelBottomNav">
                                                <div class="rankNav rankActive" data-index="before" data-rank="${item.sort}" i18n="platform_app.group.TOP_THREE">前三名</div>
                                                <div class="rankNav" data-index="after" data-rank="${item.sort}" i18n="platform_app.group.AFTER_THREE">后三名</div>
                                            </div>
                                        
                                        </div>
                                    </div>
                                </div>`
                        var forLength = item.data.length > 3 ? 3 : item.data.length;
                        for (var i = 0; i < forLength; i++) {
                            var width = 100;
                            if (item.unit != '%') {
                                width = Number(item.data[0].value);
                            }
                            var num = Number(item.data[i].value) / width * 100 < 60 ? 2 : 0
                            Number(item.data[0].value) == 0 ? width = 1 : 0;
                            html += `<div class="rankLine">
                                        <div class="rankLineTitle" title="${item.data[i].name}">${item.data[i].name}</div>
                                        <div class="rankLineBox"> 
                                        <div class="progress1" style="width: 100%">
                                        <span class="progressBar linear-color-${num}" style="width: ${Number(item.data[i].value)/width*100}%"></span>
                                        </div>
                                        </div>
                                        <div class="rankLineNum" title="${item.data[i].value+item.unit}">${item.data[i].value+item.unit}</div>
                                    </diV>`
                        }

                        $('.RankWrap').append(dom);
                        // $('.RankWrap').find('[data-sort|=' + item.sort + ']').empty();
                        $('.RankWrap').find('[data-sort|=' + item.sort + ']').append(html)
                    })

                    attEvent(dic);
                    I18n.fillArea($('.RankWrap'));
                }

                function getOtherData(dic) {
                    dic.forEach(item => {
                        var data = {};
                        data = getIcon(item.ptKey);
                        item.icon = data.icon;
                        item.color = data.color;
                        item.sort = item.ptKey.split('.')[0]
                        item.data.sort(function (a, b) {
                            return b.value - a.value;
                        })
                    })
                    createDom(dic);
                }

                function getIcon(index) {
                    var all = {};
                    switch (index) {
                        case 'Overcool_Rate':
                            all = {
                                icon: 'icon-leng',
                                color: '#89E3FE,#66A6FF'
                            }
                            return all
                        case 'Overheat_Rate':
                            all = {
                                icon: 'icon-taiyang',
                                color: '#F7CE68,#EE905C'
                            }
                            return all
                        case 'Equipment_Health_Rate':
                            all = {
                                icon: 'icon-jiankang',
                                color: '#9BEE3D,#85C839'
                            }
                            return all
                        case 'ChilledPlant_COP':
                            all = {
                                icon: 'icon-kongtiaolengyuanCOP',
                                color: '#4FF5E0,#00CBDE'
                            }
                            return all
                        case 'Power_Factor':
                            all = {
                                icon: 'icon-gongshuaiyinshu',
                                color: '#6FC2FF,#4C8AE3'
                            }
                            return all
                        case 'PM2.5_Overproof_Number':
                            all = {
                                icon: 'icon-PM',
                                color: '#A29AFF,#4E72D4'
                            }
                            return all
                        default:
                            return
                    }
                }

                function attEvent(dic) {
                    $('.rankIconLeft1').off('click').on('click', function () {
                        var rank = $(this).attr('data-rank');
                        var index = $(this).attr('data-index');
                        var item = {}
                        dic.forEach(items => {
                            if (rank == items.sort) {
                                item = items
                            }
                        })
                        if (index == "before") {
                            var html = '';
                            var forLength = item.data.length > 3 ? 3 : item.data.length;
                            for (var i = 0; i < forLength; i++) {
                                var width = 100;
                                if (item.unit != '%') {
                                    width = Number(item.data[0].value);
                                }
                                var num = Number(item.data[i].value) / width * 100 < 60 ? 2 : 0
                                html += `<div class="rankLine">
                                    <div class="rankLineTitle" title="${item.data[i].name}">${item.data[i].name}</div>
                                    <div class="rankLineBox"> 
                                    <div class="progress1" style="width: 100%">
                                    <span class="progressBar linear-color-${num}" style="width: ${Number(item.data[i].value)/width*100}%"></span>
                                    </div>
                                    </div>
                                    <div class="rankLineNum" title="${item.data[i].value+item.unit}">${item.data[i].value+item.unit}</div>
                                    </diV>`
                            }
                            $(this).attr('data-index', 'after')
                            $(this).find('span').removeClass('icon-paimingqian-1');
                            $(this).find('span').addClass('icon-paimingqian-');
                            $(this).parent().parent().parent().parent().find('.rankPanelBottom').find('.rankLine').remove();
                            $(this).parent().parent().parent().parent().find('.rankPanelBottom').append(html)
                            $(this).parent().parent().parent().parent().find('.rankPanelBottomNav').find('.rankNav').removeClass('rankActive');
                            $(this).parent().parent().parent().parent().find('.rankPanelBottomNav').find('[data-index|=' + index + ']').addClass('rankActive');
                        } else {
                            var html = '';
                            var forLength = item.data.length > 3 ? item.data.length - 3 : 0;
                            for (var k = Number(forLength); k <= Number(item.data.length) - 1; k++) {
                                var width = 100;
                                if (item.unit != '%') {
                                    width = Number(item.data[0].value);
                                }
                                var num = Number(item.data[k].value) / width * 100 < 60 ? 2 : 0
                                html += `<div class="rankLine">
                                        <div class="rankLineTitle" title="${item.data[k].name}">${item.data[k].name}</div>
                                        <div class="rankLineBox"> 
                                        <div class="progress1" style="width: 100%">
                                        <span class="progressBar linear-color-${num}" style="width: ${Number(item.data[k].value)/width*100}%"></span>
                                        </div>
                                        </div>
                                        <div class="rankLineNum" title="${item.data[k].value+item.unit}">${item.data[k].value+item.unit}</div>
                                        </diV>`
                            }
                            $(this).attr('data-index', 'before')
                            $(this).find('span').removeClass('icon-paimingqian-');
                            $(this).find('span').addClass('icon-paimingqian-1');
                            $(this).parent().parent().parent().parent().find('.rankPanelBottom').find('.rankLine').remove();
                            $(this).parent().parent().parent().parent().find('.rankPanelBottom').append(html);
                            $(this).parent().parent().parent().parent().find('.rankPanelBottomNav').find('.rankNav').removeClass('rankActive');
                            $(this).parent().parent().parent().parent().find('.rankPanelBottomNav').find('[data-index|=' + index + ']').addClass('rankActive');
                        }
                    })
                    $('.rankNav').off('click').on('click', function () {
                        var rank = $(this).attr('data-rank');
                        var index = $(this).attr('data-index');
                        var item = {}
                        dic.forEach(items => {
                            if (rank == items.sort) {
                                item = items
                            }
                        })
                        if (index == "before") {
                            var html = '';
                            var forLength = item.data.length > 3 ? 3 : item.data.length;
                            item.data.sort(function(a,b){return b.value - a.value})
                            for (var i = 0; i < forLength; i++) {
                                var width = 100;
                                if (item.unit != '%') {
                                    width = Number(item.data[0].value);
                                }
                                var num = Number(item.data[i].value) / width * 100 < 60 ? 2 : 0
                                html += `<div class="rankLine">
                                    <div class="rankLineTitle" title="${item.data[i].name}">${item.data[i].name}</div>
                                    <div class="rankLineBox"> 
                                    <div class="progress1" style="width: 100%">
                                    <span class="progressBar linear-color-${num}" style="width: ${Number(item.data[i].value)/width*100}%"></span>
                                    </div>
                                    </div>
                                    <div class="rankLineNum" title="${item.data[i].value+item.unit}">${item.data[i].value+item.unit}</div>
                                    </diV>`
                            }
                            $(this).addClass('rankActive');
                            $(this).siblings().removeClass('rankActive');
                            $(this).parent().parent().find('.rankLine').remove();
                            $(this).parent().parent().append(html);
                            $(this).parent().parent().parent().find('.rankIconLeft1 span').removeClass('icon-paimingqian-1');
                            $(this).parent().parent().parent().find('.rankIconLeft1 span').addClass('icon-paimingqian-');
                        } else {
                            var html = '';
                            var forLength = item.data.length > 3 ? item.data.length - 3 : 0;
                            item.data.sort(function(a,b){return a.value - b.value});
                            for (var k = Number(forLength); k <= Number(item.data.length) - 1; k++) {
                                var width = 100;
                                if (item.unit != '%') {
                                    width = Number(item.data[0].value);
                                }
                                var num = Number(item.data[k].value) / width * 100 < 60 ? 2 : 0
                                html += `<div class="rankLine">
                                        <div class="rankLineTitle" title="${item.data[k].name}">${item.data[k].name}</div>
                                        <div class="rankLineBox"> 
                                        <div class="progress1" style="width: 100%">
                                        <span class="progressBar linear-color-${num}" style="width: ${Number(item.data[k].value)/width*100}%"></span>
                                        </div>
                                        </div>
                                        <div class="rankLineNum" title="${item.data[k].value+item.unit}">${item.data[k].value+item.unit}</div>
                                        </diV>`
                            }
                            $(this).addClass('rankActive');
                            $(this).siblings().removeClass('rankActive');
                            $(this).parent().parent().find('.rankLine').remove();
                            $(this).parent().parent().append(html);
                            $(this).parent().parent().parent().find('.rankIconLeft1 span').removeClass('icon-paimingqian-');
                            $(this).parent().parent().parent().find('.rankIconLeft1 span').addClass('icon-paimingqian-1');
                        }

                    });
                    $('#queryRankTimIpt').off('change').on('change', (e) => {
                        var sortnameArr = nameArr;
                        _this.option.item.forEach(itema => {
                            itema.data = [];
                        })
                        var dic = _this.option.item;
                        $('.RankWrap').empty();
                        SpinnerLineA.spin($('.RankWrap')[0]);
                        getData(sortnameArr, pointData, dic)
                    });
                }





            },
            this.update = function () {},
            this.destory = function () {}
    }.call(Rank.prototype)
    exports.rank = Rank
}(GroupProjectOverview, GroupProjectOverview.base))