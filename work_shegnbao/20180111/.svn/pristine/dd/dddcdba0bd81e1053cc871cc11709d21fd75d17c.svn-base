"""Factory 数据处理层"""
import logging
from datetime import datetime
from beopWeb.MongoConnManager import MongoConnManager
from bson.objectid import ObjectId
import os
import time

#define table names
g_table_fac_project = 'Fac_Project'
g_table_fac_user_project = 'Fac_User_Project'
g_table_fac_page = 'Fac_Page'
g_table_fac_sprite = 'Fac_Sprite'
g_table_fac_layer = 'Fac_Layer'
g_table_fac_widget = 'Fac_Widget'
g_table_fac_historyshot = 'Fac_HistoryShot'
g_table_fac_template = 'Fac_Template'
g_table_fac_log = 'Fac_Log'
g_table_fac_pagebak = 'Fac_PageBak'
g_table_fac_configuration = 'Fac_Configuration'
g_table_fac_proj_sprite = 'Fac_ProjSprite'
g_table_fac_navigation = 'Fac_Navigation'
g_table_fac_material = 'Fac_Material'
g_table_fac_spring_layout = 'Fac_SpringLayout'
g_table_fac_report_wrap = 'Fac_ReportWrap'
g_table_fac_report_data = 'Fac_ReportData'

class FactoryService:
    @classmethod
    def recover_page_list(cls, proj_id):
        ''' 恢复意外丢失的页面列表 '''
        result = None
        cursor = None
        old_page_list = None
        new_page_list = None
        conn = MongoConnManager.getConfigConn()

        try:
            result = conn.mdbBb[g_table_fac_navigation]\
                        .find_one({'_id': ObjectId(proj_id)})
            old_page_list = result.get('list', [])

            cursor = conn.mdbBb[g_table_fac_page]\
                        .find({'projId': proj_id, '$or': [{'status': 0}, {'status': {'$exists': False}}]}, {'_id': 1})
            result = list(cursor)

            new_page_list = []
            for item in result:
                new_page_list.append(str(item.get('_id')))
            
            index_dict = {k: i for i, k in enumerate(old_page_list)}
            new_page_list = sorted(new_page_list, key=lambda x: index_dict.get(x, -1))
            
            result = conn.mdbBb[g_table_fac_navigation].update_one({'_id': ObjectId(proj_id)}, {'$set': {'list': new_page_list}})
            result = True
        except Exception as expt:
            print('recover_page_list error:' + expt.__str__())
            logging.error('recover_page_list error:' + expt.__str__())
            return None
        finally:
            if not cursor is None:
                cursor.close()
        return result