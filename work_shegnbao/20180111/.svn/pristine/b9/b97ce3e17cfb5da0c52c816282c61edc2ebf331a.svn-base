import pytestfrom beopWeb.mod_algorithm import controllerimport jsonimport bsonglobal id@pytest.mark.p0@pytest.mark.parametrize(('parent_id', 'expected'), [    ("574d6396e153dc04dc8e75d8", [    {"_id": "14646897259450680125938b", "isFolder": False, "name": "avg_amp", "note": "",     "parent_id": "574d6396e153dc04dc8e75d8"},    {"_id": "1465980626820067fe8a79f4", "isFolder": False, "name": "hzj", "note": "test+",     "parent_id": "574d6396e153dc04dc8e75d8"},    {"_id": "14672652810840678ac2e239", "isFolder": False, "name": "hzjtest", "note": "",     "parent_id": "574d6396e153dc04dc8e75d8"}]),    ('null', [    {'isFolder': True, 'name': 'test', '_id': '146469158894500137f355db', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'name': 'test1', '_id': '14646924698430012e7c5763', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'name': 'mo', '_id': '1465981140881760a87cf5a6', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'name': '12', '_id': '1466066847354502853a619b', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'name': 'woody', '_id': '146656443762040477692865', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'name': 'testo', '_id': '14665646144172156cdeefff', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'name': 'Algorithm', '_id': '14672079461943795023b28b', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'name': 'sophia', '_id': '14672654278246088365a4d6', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'name': 'angelia', '_id': '146726802776045606cc1906', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'name': 'jcGolden', '_id': '146952105970436422b2dc7e', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'name': 'Jason Zou', '_id': '14695931134891730fdc888c', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'name': 'Lion Ye', '_id': '1470118230970509f05f33d2', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'name': 'QSY', '_id': '14706222093923838b2a870b', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'name': 'golding', '_id': '14716682373160013c566880', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'name': '演示06', '_id': '147194117257645655d96c13', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'creator': 2265, 'creatorName': 'AutoTester', 'createTime': 'Fri, 21 Oct 2016 13:52:11 GMT',     'name': 'interfaceTest', '_id': '14770291334356084e4695eb', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'creator': 2265, 'creatorName': 'AutoTester', 'createTime': 'Fri, 21 Oct 2016 13:54:43 GMT',     'name': '33', '_id': '147702928579160814f444a1', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'creator': 68, 'creatorName': 'rikan', 'createTime': 'Fri, 25 Nov 2016 14:42:25 GMT',     'name': 'liqianLib', '_id': '1480056144172068886cb711', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'name': 'Common', '_id': '574d6396e153dc04dc8e75d8', 'note': '', 'parent_id': 'null'},    {'isFolder': True, 'name': 'Utils', '_id': '574d63aee153dc04dc8e75dc', 'note': '', 'parent_id': 'null'}])])def test_LoadTemplateTree(parent_id, expected):    rt = controller.LoadTemplateTree(parent_id)    rt = json.loads(rt)    assert len(rt) >= len(expected), 'not equal,acutal length={0},expected length={1}'.format(len(rt), len(expected))    for index, item in enumerate(expected):        for key in item.keys():            assert item.get(key) == rt[index].get(key), 'not equal ,acutal={0},expected={1}'.format(rt[index].get(key),                                                                                                item.get(key))