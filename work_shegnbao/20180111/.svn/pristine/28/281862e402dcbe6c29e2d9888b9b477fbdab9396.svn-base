
    <meta charset="UTF-8">
    <title></title>
    <link rel="stylesheet" type="text/css" href="/static/scripts/lib/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="/static/app/Benz/env.css">
    <script type="text/javascript" src="/static/scripts/lib/echart/echarts-3.8.4-ex.min.js"></script>
    <script type="text/javascript" src="/static/views/theme/dark.js"></script>
    <script src="/static/scripts/lib/jquery-2.1.4.min.js"></script>
    <script src="/static/scripts/core/webAPI.js"></script>
    <script src="/static/scripts/core/common.js"></script>
    <script src="/static/scripts/lib/bootstrap/bootstrap-datetimepicker/bootstrap-datetimepicker.min.js"></script>

    <style>

        #relevAnalysis {
            width: 100%;
            height: 100%;
        }

        #leftCtnC {
            width: 70%;
            height: 100%;
            float: left;
        }

        #rightCtnC {
            width: 30%;
            height: 100%;
            float: left;
        }

        .chartCtn {
            width: 100%;
            height: 100%;
        }

        .divTop {
            height: 60px;
        }

        #divChartMix {
            height: calc(100% - 60px);
        }

        .paneParams h4 {
            height: 16%; padding-left: 40px;
        }

        .paneParams h4 span {
            padding-left: 20px;
        }
    </style>
    <div id="relevAnalysis">
        <div id="leftCtnC">
            <div class="divTop">
                <div class="form-inline">
                    <div class="form-group">
                        <label class="sr-only" for="baseItem">Amount (in dollars)</label>
                        <div class="input-group">
                            <div class="input-group-addon">对象</div>
                            <select class="form-control" id="baseItem" disabled>
                                <option value="1">能耗</option>
                                <option value="2">产能</option>
                                <option value="3">温度</option>
                                <option value="4">湿度</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="sr-only" for="baseItem">Amount (in dollars)</label>
                        <div class="input-group">

                        </div>
                        <div class="navbar-form navbar-left" style="padding-left: 0;">
                            <div class="input-group" style="width: 400px;">
                                <input class="form-control form_datetime form_datetime1" id="txtTimeStart" size="16" type="text"><!--把类form-control删掉-->
                                <span class="input-group-addon input-group-addon1" i18n="observer.widgets.TO">To</span>
                                <input class="form-control form_datetime form_datetime2" id="txtTimeEnd" size="16" type="text"><!--把类form-control删掉-->
                                <div class="input-group-addon">周期</div>
                                <select class="form-control" id="txtPeriod" style="width: auto;">
                                    <option value="M1">月</option>
                                    <option value="d1" selected>日</option>
                                </select>
                            </div>
                            <button type="button" class="btn btn-info" id="btnAnalysis" i18n="observer.widgets.START">分析</button>
                        </div>
                    </div>
                </div>
            </div>
            <div id="divChartMix" class="chartCtn"></div>
        </div>
        <div id="rightCtnC">
            <div id="divChartRelation" style="float: left; width: 100%; height: 60%;"></div>
            <div class="paneParams" style="float: left; width: 100%; height: calc(100% - 400px);">
                <h4>相关性排位:<span id="txtIndex"></span></h4>
                <h4>相关系数:<span id="txtR"></span></h4>
                <h4>对象:<span id="txtSource"></span></h4>
                <h4>因子:<span id="txtTarget"></span></h4>
            </div>
        </div>
    </div>
<script>
    /// <reference path="../../core/sprites.js" />

    var H5ModelCorrelation = (function () {
        function H5ModelCorrelation() {
            var dictStore = undefined,
                arrPairFactor = undefined,
                pointIdBase = undefined,
                pointIdSelected = undefined,
                arrTimeShaft = undefined;;
        };

        H5ModelCorrelation.prototype = {
            show: function () {
                var now = new Date();
                this.startTime = new Date(now - 86400000 * 30);
                this.endTime = now;
                $("#txtTimeStart").val(this.startTime.format("yyyy-MM-dd"));
                $("#txtTimeEnd").val(this.endTime.format("yyyy-MM-dd"));

                this.init();
            },

            init: function () {
                var _this = this;
                this.chartChord = echarts.init(document.getElementById('divChartRelation'), AppConfig.chartTheme);
                this.chartMix = echarts.init(document.getElementById('divChartMix'), AppConfig.chartTheme);

                this.pointIdBase = '5719c8bc6455142134d35c04';
                this.pointIdSelected = '5719c8bc6455142134d3609a';
                this.dictPairFactor = {
                    "5719c8bc6455142134d35c04": {
                        "5719c8bc6455142134d36159": { value: 0, order: 0 },
                        "5719c8bd6455142134d3ccfd": { value: 0, order: 0 },
                        "5719c8bc6455142134d3609a": { value: 0, order: 0 },
                    },
                    //"55890f8594022d0344b59ec3": {
                    //    "55890f8594022d0344b59ec4": 0.1,
                    //}
                };

                var dsIdList = [];
                for (var keyBase in this.dictPairFactor) {
                    if (dsIdList.indexOf(keyBase) < 0) dsIdList.push(keyBase);
                    for (var keyFactor in this.dictPairFactor[keyBase]) {
                        if (dsIdList.indexOf(keyFactor) < 0) dsIdList.push(keyFactor);
                    }
                }

                event_BtnAnalysis_OnClick();

                $('#btnAnalysis').off().click(event_BtnAnalysis_OnClick);
                function event_BtnAnalysis_OnClick() {
                    var startTime = $("#txtTimeStart").val().toDate();
                    var endTime = $("#txtTimeEnd").val().toDate();
                    var postData = {
                        dsItemIds: dsIdList,
                        timeStart: startTime.format("yyyy-MM-dd HH:mm:ss"),
                        timeEnd: endTime.format("yyyy-MM-dd HH:mm:ss"),
                        timeFormat: $('#txtPeriod').val()
                    }

                    WebAPI.post("/analysis/startWorkspaceDataGenHistogram", postData).done(function (dataSrc) {
                        if (!(dataSrc && dataSrc.list && dataSrc.list.length > 0)) alert('data error');

                        _this.dictStore = {};
                        for (var i = 0; i < dataSrc.list.length; i++) {
                            _this.dictStore[dataSrc.list[i].dsItemId] = dataSrc.list[i];
                        }
                        _this.arrTimeShaft = dataSrc.timeShaft;

                        //TODO: remove
                        _this.dictStore['5719c8bc6455142134d35c04'].dsName = '能耗';
                        _this.dictStore['5719c8bc6455142134d36159'].dsName = '温度';
                        _this.dictStore['5719c8bd6455142134d3ccfd'].dsName = '湿度';
                        _this.dictStore['5719c8bc6455142134d3609a'].dsName = '产能';

                        //_this.dictStore = {
                        //    '5719c8bc6455142134d35c04': {
                        //        dsName: '能耗',
                        //        data: [46.00, 46.96, 47.21, 47.29, 47.19, 47.04, 47.14, 46.77, 47.24, 47.24, 46.92, 45.00]
                        //    },
                        //    '55890f8594022d0344b59ec3': {
                        //        dsName: '温度',
                        //        data: [27.04, 27.14, 26.77, 27.24, 27.24, 26.92, 27.16, 26.82, 26.69, 26.84, 26.94, 27.11]
                        //    },
                        //    '55890f8594022d0344b59ec4': {
                        //        dsItemId: "55890f8594022d0344b59ec4",
                        //        dsName: '湿度',
                        //        data: [36.00, 33.96, 37.21, 37.29, 37.19, 37.04, 37.14, 36.77, 37.24, 37.24, 36.92, 37.16]
                        //    },
                        //    '55890f8594022d0344b59ec5': {
                        //        dsItemId: "55890f8594022d0344b59ec5",
                        //        dsName: '产能',
                        //        data: [66.99, 66.96, 67.21, 67.29, 67.19, 67.04, 67.14, 66.77, 67.24, 67.24, 66.92, 67.16]
                        //    }
                        //};

                        _this.calculateCorrelation();
                        _this.fillChart();
                    });
                };
            },

            calculateCorrelation: function () {
                var arrOrder = [];

                for (var keyBase in this.dictPairFactor) {
                    for (var keyFactor in this.dictPairFactor[keyBase]) {
                        var weight = this.calculatePairCorrelation(this.dictStore[keyBase].data, this.dictStore[keyFactor].data);
                        this.dictPairFactor[keyBase][keyFactor].value = weight;
                        arrOrder.push({ weight: weight, source: keyBase, target: keyFactor });
                    }
                }

                //计算顺位
                arrOrder = arrOrder.sort(function (a, b) {
                    return Math.abs(b.weight) - Math.abs(a.weight);
                });
                for (var i = 0, item; i < arrOrder.length; i++) {
                    item = arrOrder[i];
                    this.dictPairFactor[item.source][item.target].order = i + 1;
                }
            },

            calculatePairCorrelation: function (arrX, arrY) {
                if (!(arrX && arrY) || arrX.length != arrY.length || !(arrX.length > 0 && arrY.length > 0)) return 0;

                var n = arrX.length, sumX = 0, sumY = 0, sumSqX = 0, sumSqY = 0, sumP = 0;
                for (var i = 0, x, y; i < n; i++) {
                    x = arrX[i], y = arrY[i];
                    sumX += x;
                    sumSqX += x * x;
                    sumY += y;
                    sumSqY += y * y;
                    sumP += x * y;
                }

                var num = sumP - (sumX * sumY / n);
                var den = Math.sqrt((sumSqX - Math.pow(sumX, 2) / n) * (sumSqY - Math.pow(sumY, 2) / n));

                return den == 0 ? 0 : num / den;
            },

            fillChart: function () {
                var _this = this;

                this.fillPaneParams();

                var arrNode = [];
                for (var keyBase in this.dictStore) {
                    arrNode.push({ name: keyBase, label: this.dictStore[keyBase].dsName });
                }

                var arrLink = [];
                for (var keyBase in this.dictPairFactor) {
                    for (var keyFactor in this.dictPairFactor[keyBase]) {
                        var item = this.dictPairFactor[keyBase][keyFactor];
                        arrLink.push({ target: keyFactor, source: keyBase, weight: Math.abs(item.value), name: '第 ' + item.order + ' 位' });
                        arrLink.push({ target: keyBase, source: keyFactor, weight: Math.abs(item.value) });
                    }
                }

                var optionChartChord = {
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            var opt = _this.chartMix.getOption();
                            _this.pointIdSelected = params.value.target;
                            opt.legend.data[1] = _this.dictStore[params.value.target].dsName;
                            opt.series = [createSeriesBar(_this.pointIdBase), createSeriesLine(_this.pointIdSelected), createSeriesScatter(_this.pointIdBase, _this.pointIdSelected)];
                            _this.chartMix.setOption(opt);

                            _this.fillPaneParams();

                            return params.name + ': ' + _this.dictStore[params.value.source].dsName + '-' + _this.dictStore[params.value.target].dsName + ' 相关系数 ' + parseFloat(params.value.weight).toFixed(2);
                        }
                    },
                    toolbox: {
                        show: false,
                        feature: {
                            restore: { show: true },
                            magicType: { show: true, type: ['force', 'chord'] },
                            saveAsImage: { show: true }
                        }
                    },
                    series: [
                        {
                            type: 'chord',
                            sort: 'ascending',
                            sortSub: 'descending',
                            showScale: false,
                            itemStyle: {
                                normal: {
                                    label: {
                                        rotate: true,
                                        textStyle: {
                                            color: '#ddd'
                                        },
                                    },

                                }
                            },

                            // 使用 nodes links 表达和弦图
                            nodes: arrNode,
                            links: arrLink,
                            sort: 'ascending',
                        }
                    ]
                };

                this.chartChord.clear().setOption(optionChartChord);

                var optionChartMix = {
                    tooltip: {
                        trigger: 'axis'
                    },
                    toolbox: {
                        show: true,
                        feature: {
                            mark: { show: true },
                            dataView: { show: true, readOnly: false },
                            restore: { show: true },
                            saveAsImage: { show: true }
                        }
                    },
                    xAxis: [
                        {
                            type: 'category',
                            boundaryGap: true,
                            data: function () {
                                var list = [];
                                for (var i = 1; i <= _this.arrTimeShaft.length; i++) {
                                    list.push(new Date(_this.arrTimeShaft[i]).format($('#txtPeriod').val() == 'd1' ? "MM-dd" : "MM"));
                                }
                                return list;
                            }()
                        },
                        {
                            type: 'value',
                            scale: false,
                            axisLabel: { show: false },
                            splitLine: { show: false }
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value',
                            scale: true,
                        },
                        {
                            type: 'value',
                            scale: true,
                            splitLine: { show: false }
                        }
                    ],
                    animation: false,
                    legend: {
                        x: 'left',
                        data: ['能耗', '产能', '相关性散点']//基准选项,和弦图选择项,相关度
                    },
                    series: [
                        createSeriesBar(_this.pointIdBase),
                        createSeriesLine(_this.pointIdSelected),
                        createSeriesScatter(_this.pointIdBase, _this.pointIdSelected)
                    ]
                };
                this.chartMix.clear().setOption(optionChartMix);

                //基准:柱图
                function createSeriesBar(pointIdBase) {
                    return {
                        name: _this.dictStore[pointIdBase].dsName,
                        type: 'bar',
                        itemStyle: {
                            normal: {
                                color: 'rgba(255, 127, 80, 0.7)',
                            },
                        },
                        data: _this.dictStore[pointIdBase].data
                    }
                }
                //鼠标hover选中项或者默认项(相关系数最大的项):折线图
                function createSeriesLine(pointIdSelected) {
                    return {
                        name: _this.dictStore[pointIdSelected].dsName,
                        type: 'line',
                        yAxisIndex: 1,
                        smooth: false,
                        symbolSize: 0,
                        itemStyle: {
                            normal: {
                                color: 'rgba(135, 206, 250, 1)',
                                lineStyle: {
                                    width: 4,
                                    tyle: 'solid',
                                    shadowColor: 'rgba(80,80,80,1)',
                                    shadowBlur: 5,
                                    shadowOffsetX: 3,
                                    shadowOffsetY: 3
                                },
                            },
                        },
                        data: _this.dictStore[pointIdSelected].data
                    }
                }
                //基准和折线图组合成散点图
                function createSeriesScatter(pointIdBase, pointIdSelected) {
                    var arr = [];
                    for (var i = 0; i < _this.dictStore[pointIdBase].data.length; i++) {
                        arr.push([_this.dictStore[pointIdBase].data[i], _this.dictStore[pointIdSelected].data[i]]);
                    }
                    arr.push(0, 0);
                    return {
                        name: '相关性散点',
                        type: 'scatter',
                        symbol: 'triangle',
                        yAxisIndex: 1,
                        xAxisIndex: 1,
                        symbol: 'circle',
                        symbolSize: 6,
                        itemStyle: {
                            normal: {
                                color: 'rgba(50, 205, 50, 0.7)'
                            },
                        },
                        data: arr
                    }
                }
            },

            fillPaneParams: function () {
                $('#txtIndex').text(this.dictPairFactor[this.pointIdBase][this.pointIdSelected].order);
                $('#txtR').text(parseFloat(this.dictPairFactor[this.pointIdBase][this.pointIdSelected].value).toFixed(2));
                $('#txtTarget').text(this.dictStore[this.pointIdSelected].dsName);
                $('#txtSource').text(this.dictStore[this.pointIdBase].dsName);
            }
        }
        return H5ModelCorrelation;
    })();

    new H5ModelCorrelation().show();
</script>