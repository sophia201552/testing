import sys,os
print(os.path.split(sys.path[0])[0])
sys.path.append(os.path.split(sys.path[0])[0])
import smtplib
import email.mime.multipart
import email.mime.text
from email.header import Header
import threading, logging
import unittest, time, datetime, requests
from interfaceTest.Methods.BeopTools import BeopTools
from interfaceTest import app
import json
import memcache
#动态变量,动态导入
caseList = app.config['IMPORT_CASE_LIST']
names = locals()
for x in caseList:
    module = x[0]
    case = x[1]
    names[x[1]] = __import__(x[0], fromlist=([x[1]]))

runningstate = 0  #0调试模式，邮件发给我测试组，1运行模式，邮件发给所有
base_mails = app.config['BASE_TEST_EMAILS']
production_emails = app.config['PRODUCTION_EMAILS']
runmode = 0  # 0:debug, 1:release
m = 1
#case执行次数计数器
count = 1
failure = 0
success = 0
dictionary = {
              'suite_smoke':'冒烟测试集',
              "suite_base":"基础测试集",
              "suite_data":"实时数据测试集",
              "suite_service":"beopService测试集",
              'suite_smart':'智能传感测试集',
              'suite_algorithm':'算法测试集',
              'suite_calc':'点计算测试集',
              'suite_patrol':'巡更测试集',
              'suite_asset':'资产管理测试集',
              'suite_expert':'ExpertContainer测试集',
              'suite_temp':'温控自动化测试集',
              'suite_base_only':'基础测试集',
              'suite_benchmark':'benchmark测试集',
              'suite_workflow':'工单测试集',
              'suite_calc_a':'点计算测试集',
              'suite_calc_b':'点计算测试集',
              'suite_calc_c':'点计算测试集',
              'suite_calc_d':'点计算测试集'
         }

calc_mail_a = app.config['CALC_TEST_EMAILS_A']
calc_mail_b = app.config['CALC_TEST_EMAILS_B']
calc_mail_c = app.config['CALC_TEST_EMAILS_C']
calc_mail_d = app.config['CALC_TEST_EMAILS_D']
project_online_mail = app.config['PROJECT_EMAILS']
smart_mail = app.config['SMART_EMAILS']
algorithm_mail = app.config['ALGORITHM_EMAILS']
service_mail = app.config['SERVICE_ERROR_EMAILS']
patrol_mail = app.config['PATROL_EMAILS']
asset_mail = app.config['ASSET_EMAILS']
container_mail = app.config['CONTAINER_EMAILS']
smoke_mail = app.config['SMOKE_EMAILS']
#smoke_mail = ['woody.wu@rnbtech.com.hk']
sophia_mail = ['sophia.zhao@rnbtech.com.hk']
temp_mail = app.config['TEMP_EMAILS']
benchmark_mail=app.config['BENCHMARK_EMAILS']
workflow_mail=app.config['WORKFLOW_EMAILS']

suite_base_cases = app.config['SUITE_BASE_CASES']
suite_algorithm_cases = app.config['SUITE_ALGORITHM_CASES']
suite_smart_cases = app.config['SUITE_SMART_CASES']
suite_calc_cases_a = app.config['SUITE_CALC_CASES_A']
suite_calc_cases_b = app.config['SUITE_CALC_CASES_B']
suite_calc_cases_c = app.config['SUITE_CALC_CASES_C']
suite_calc_cases_d = app.config['SUITE_CALC_CASES_D']
suite_data_cases = app.config['SUITE_DATA_CASES']
suite_service_cases = app.config['SUITE_SERVICE_CASES']
suite_patrol_cases = app.config['SUITE_PATROL_CASES']
suite_asset_cases = app.config['SUITE_ASSET_CASES']
suite_expert_cases = app.config['SUITE_EXPERT_CASES']
suite_smoke_cases = app.config['SUITE_SMOKE_CASES']
suite_temp_cases = app.config['SUITE_TEMP_CASES']
suite_base_only = app.config['SUITE_BASE_ONLY']
suite_benchmark_cases = app.config['SUITE_BENCHMARK_CASES']
suite_workflow_cases = app.config['SUITE_WORKFLOW_CASES']
mailDelay = app.config['MAIL_DELAY']

def logg(logName):
    log = logName.replace('/', '\\')
    dirName = os.path.split(log)[0]
    if os.path.exists(dirName):
        pass
    else:
        os.mkdir(dirName)
    handler = logging.FileHandler(log, encoding='utf-8')
    logger = logging.getLogger()
    logger.handlers = []
    logger.addHandler(handler)
    logger.setLevel(logging.ERROR)
    return logger



def sendmail(reciepents, title, body=None):
    msg = email.mime.multipart.MIMEMultipart()
    MAIL_SERVER = 'smtp.rnbtech.com.hk'
    MAIL_USERNAME = 'projecttest@rnbtech.com.hk'
    MAIL_PASSWORD = 'Rnbtech1103'
    DEFAULT_MAIL_SENDER = '%s<projecttest@rnbtech.com.hk>' % (Header('BeOP后台自动化测试','utf-8'))
    MAIL_DEFAULT_SENDER = 'projecttest@rnbtech.com.hk'
    msg['from'] = DEFAULT_MAIL_SENDER
    msg['to'] = ';'.join(reciepents)
    msg['subject'] = title
    sendtime = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time()))
    msg['date'] = sendtime
    content = '''
        你好，
                这是一封自动发送的邮件，原因是自动化测试发现了您的问题，请参考：

    '''
    content = content + body
    content = content + '''

       R&B 研发部
    ''' + str(sendtime)
    txt = email.mime.text.MIMEText(content)
    msg.attach(txt)

    smtp = smtplib
    smtp = smtplib.SMTP()
    smtp.connect(MAIL_SERVER, 25)
    smtp.login(MAIL_USERNAME, MAIL_PASSWORD)
    smtp.sendmail(DEFAULT_MAIL_SENDER, reciepents, str(msg))
    smtp.quit()




def runSuite(suiteName, suite_base_cases, emails, delay):
    while 1:
        startTime = BeopTools.getTime()
        now_time = int(time.strftime("%Y%m%d %H%M%S", time.localtime()).split(' ')[1])
        try:
            print("%s测试集开始任务,写入开始时间至Memcache!" % suiteName)
            # BeopTools.setMemTime(suiteName, {'delay':delay, 'startTime':startTime})
            suite = unittest.TestSuite()
            if suiteName == 'suite_smart':
                if int(now_time) > 70000 and int(now_time) < 190000:
                    for case in suite_base_cases:
                        suite.addTest(eval(case + '.' + case)('Test'))
            elif suiteName == "suite_temp":
                if datetime.datetime.now().hour == 9:
                    for case in suite_base_cases:
                        suite.addTest(eval(case + '.' + case)('Test'))
            elif suiteName == 'suite_base_only':
                if datetime.datetime.now().hour == 6 and datetime.datetime.now().minute == 30:
                    for case in suite_base_cases:
                        suite.addTest(eval(case + '.' + case)('Test'))
            else:
                for case in suite_base_cases:
                    if case == 'Smoke006' and datetime.datetime.now().hour < 8:
                        pass
                    else:
                        suite.addTest(eval(case + '.' + case)('Test'))
            case_forward(suite,suiteName,emails)
        except Exception as e:
            print(suiteName, e.__str__())
        print("%s测试集结束任务,写入结束时间至Memcache!" % suiteName)
        BeopTools.setMemTime(suiteName, {'delay':delay, 'startTime':startTime, 'endTime':BeopTools.getTime()})
        time.sleep(delay)


def case_forward(suite,suiteName,emails):



    url = "http://%s" % app.config['SERVERIP']

    '''onlinestatus = 500
    try:
        onlinestatus = requests.get('https://beop.rnbtech.com.hk')
    except Exception as e:
        if len(emails) > 0:
            for i in range(len(emails)):
                sendmail(emails[i],'国服-接口测试->%s' % dictionary[suiteName], '连接%s没有反应，退出测试，请检查网站是否正常' % url)
                pass

    if onlinestatus == 200:'''
    global m,failure,success
    runner = unittest.TextTestRunner()
    testResult = runner.run(suite)
    failures = testResult.failures
    successes = testResult.testsRun - len(failures)
    failure += len(failures)
    success += successes

    for ff in failures:
        CaseID = ff[0].testCaseID
        strAllResult = ''
        logger = logg('%s/error.txt' % sys.path[0])
        logger.error("[%s]---错误case个数为%d!" % (BeopTools.getTime(), len(failures)))
        logger.error("[%s]---" % BeopTools.getTime() + ff[1])
        if suiteName == 'suite_temp' or suiteName == 'suite_calc':
            j = BeopTools.ErrorInfoPraNew(ff[1])
        elif suiteName == 'suite_smoke':
            j = BeopTools.ErrorInfo(ff[1])
        else:
            j = BeopTools.ErrorInfoPra(ff[1])
        if j == '':
            j = BeopTools.ErrorInfo(ff[1])
        strAllResult = strAllResult + '\n=======================\n' + j
        now_time = int(time.strftime("%Y%m%d %H%M%S", time.localtime()).split(' ')[1])
        if len(emails):
            try:
                #if BeopTools.checkCaseNeedSend(CaseID, mailDelay):
                    #conn = BeopTools.getMysqlConn(app.config['MYSQL_NAME'])
                    #BeopTools.setCase(conn, CaseID)
                sendmail(emails, '国服-接口测试->%s' % dictionary[suiteName], strAllResult)
                logger.error("[%s]---发送邮件成功!" % BeopTools.getTime())
            except Exception as e:
                logger.error('发送邮件出错,请检查!' + e.__str__())
            time.sleep(10)
        else:
            logger.error("[%s]---邮箱为空!" % BeopTools.getTime())



    '''else:
        if len(emails) > 0:
            #sendmail(emails, 'BeOP接口测试->%s' % dictionary[suiteName], '连接%s没有反应，退出测试，请检查网站是否正常' % url)
            pass
            print('yichang')'''





'''
def protect():
    TIMEOUT = 120
    while 1:
        try:
            time.sleep(TIMEOUT)
            print('守护线程开始运行!开始检测自动化case运行时间!')
            #suites = app.config['SUITES']
            suites = ['suite_patrol']
            for suite in suites:
                rv = BeopTools.getMemTime(suite)
                print(json.dumps(rv))
                startTime = rv.get('startTime')
                endTime = rv.get('endTime',)
                delay = rv.get('delay')
                if startTime:
                    startTimeStamp = datetime.datetime.strptime(startTime, "%Y-%m-%d %H:%M:%S")
                if endTime is not None:
                    endTimeStamp = datetime.datetime.strptime(endTime, "%Y-%m-%d %H:%M:%S")
                else:
                    print("任务还没结束!")
                if startTime:
                    if endTime:
                        if startTimeStamp >= endTimeStamp:
                            if (datetime.datetime.now() - startTimeStamp).seconds > TIMEOUT:
                                sendmail(app.config['TEST_GROUP_EMAILS'], '国服-接口测试->自动化守护进程判断%s测试集开始%d秒后还未结束,请检查!' % (suite, TIMEOUT))
                            else:
                                print("%s测试集仍在运行" % (suite),)
                        else:
                            if (int((datetime.datetime.now() - endTimeStamp).seconds) - delay) > 20:
                                for _mail in app.config['TEST_GROUP_EMAILS']:
                                    sendmail(_mail, '国服-接口测试->自动化守护进程', '%s测试集结束%d秒后还未开始,可能是线程已挂,请检查!' % (suite, delay))
                            else:
                                print("%s测试集仍在运行" % (suite),)
                    else:
                        if (datetime.datetime.now() - startTimeStamp).seconds > TIMEOUT:
                            sendmail(app.config['TEST_GROUP_EMAILS'], '国服-接口测试->自动化守护进程判断%s测试集开始%d秒后还未结束,请检查!' % (suite, TIMEOUT))
                        else:
                            print("%s测试集仍在运行" % (suite),)

        except Exception as e:
            print(e.__str__())
            continue

'''
def run(caseList):
    try:
        suite = unittest.TestSuite()
        for c in caseList:
            suite.addTest(eval(c + '.' + c)('Test'))
        runner = unittest.TextTestRunner()
        testResult = runner.run(suite)
        failures = testResult.failures
        for ff in failures:
            j = BeopTools.ErrorInfoPraNew(ff[1])
            if j == '':
                j = BeopTools.ErrorInfo(ff[1])
            raise Exception(j)
    except Exception as e:
        raise Exception(e.__str__())

def work():
    global count
    nowTime = time.strftime("%Y-%m-%d %H%M%S", time.localtime()).split(' ')[1]
    print("BEOP后台自动化测试任务开始!")
    begin = time.time()
    startTime = time.strftime('%Y-%m-%d %H:%M:%S')
    threads = []
    #守护线程
    #t0 = threading.Thread(target=protect)
    #t0.setDaemon(True)

    t1 = threading.Thread(target=runSuite,args=("suite_base", suite_base_cases, base_mails,60))
    # t2 = threading.Thread(target=runSuite,args=("suite_algorithm", suite_algorithm_cases, algorithm_mail, 3600))
    # t3 = threading.Thread(target=runSuite,args=("suite_smart", suite_smart_cases, smart_mail, 600))
    # t4 = threading.Thread(target=runSuite,args=("suite_calc_a", suite_calc_cases_a, calc_mail_a, 900))
    # t5 = threading.Thread(target=runSuite,args=("suite_data", suite_data_cases, project_online_mail, 1800))
    # t6 = threading.Thread(target=runSuite,args=("suite_service", suite_service_cases, service_mail, 7200))
    # t7 = threading.Thread(target=runSuite,args=("suite_patrol", suite_patrol_cases, patrol_mail, 7200))
    #t8 = threading.Thread(target=runSuite,args=("suite_asset", suite_asset_cases, asset_mail, 3600))
    # t9 = threading.Thread(target=runSuite,args=("suite_expert", suite_expert_cases, container_mail, 3600))
    # t10 = threading.Thread(target=runSuite,args=("suite_smoke", suite_smoke_cases, smoke_mail, 3600))
    # t11 = threading.Thread(target=runSuite,args=("suite_temp", suite_temp_cases, temp_mail, 3600))
    t12 = threading.Thread(target=runSuite,args=("suite_base_only", suite_base_only, base_mails, 60))
    # t13 = threading.Thread(target=runSuite,args=("suite_benchmark", suite_benchmark_cases, benchmark_mail, 600))
    # t14 = threading.Thread(target=runSuite,args=("suite_workflow", suite_workflow_cases, workflow_mail, 3600))
    # t15 = threading.Thread(target=runSuite, args=("suite_calc_b", suite_calc_cases_b, calc_mail_b, 3600))
    # t16 = threading.Thread(target=runSuite, args=("suite_calc_c", suite_calc_cases_c, calc_mail_c, 3600))
    # t17 = threading.Thread(target=runSuite, args=("suite_calc_d", suite_calc_cases_d, calc_mail_d, 3600))
    for i in range(20):
        try:
            t = eval('t'+str(i))
            threads.append(t)
        except:
            #print("线程t"+str(i)+"不存在!")
            pass



    length = len(threads)




    start = time.time()
    for i in range(length):
        threads[i].start()
    for i in range(length):
        threads[i].join()











if __name__ == "__main__":
    work()

